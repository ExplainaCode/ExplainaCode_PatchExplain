record_number,buggy_code,fixed_code,code_similarity
117001,"@Override public void onPageFinished(WebView view,String url){
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showWebview();
    }
  }
);
  UrlInspector.getInstance().inspectUrl(url);
  super.onPageFinished(view,url);
  Uri uri=Uri.parse(url);
  if (isInternalUri(uri)) {
    CookieSyncManager.getInstance().sync();
  }
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.loginDetectionUrl != null) {
    if (mVisitedLoginOrSignup) {
      mainActivity.updateMenu();
    }
    mVisitedLoginOrSignup=LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl) || LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl);
  }
  if (this.dynamicUpdateExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.dynamicUpdateExec);
  }
  if (this.profilePickerExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.profilePickerExec);
  }
  if (this.analyticsExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.analyticsExec);
  }
  mainActivity.checkNavigationForPage(url);
  if (mainActivity.postLoadJavascript != null) {
    String js=mainActivity.postLoadJavascript;
    mainActivity.postLoadJavascript=null;
    mainActivity.runJavascript(js);
  }
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
}","@Override public void onPageFinished(WebView view,String url){
  super.onPageFinished(view,url);
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (url != null && appConfig.ignorePageFinishedRegexes != null) {
    for (    Pattern pattern : appConfig.ignorePageFinishedRegexes) {
      if (pattern.matcher(url).matches())       return;
    }
  }
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showWebview();
    }
  }
);
  UrlInspector.getInstance().inspectUrl(url);
  Uri uri=Uri.parse(url);
  if (isInternalUri(uri)) {
    CookieSyncManager.getInstance().sync();
  }
  if (appConfig.loginDetectionUrl != null) {
    if (mVisitedLoginOrSignup) {
      mainActivity.updateMenu();
    }
    mVisitedLoginOrSignup=LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl) || LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl);
  }
  if (this.dynamicUpdateExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.dynamicUpdateExec);
  }
  if (this.profilePickerExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.profilePickerExec);
  }
  if (this.analyticsExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.analyticsExec);
  }
  mainActivity.checkNavigationForPage(url);
  if (mainActivity.postLoadJavascript != null) {
    String js=mainActivity.postLoadJavascript;
    mainActivity.postLoadJavascript=null;
    mainActivity.runJavascript(js);
  }
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
}",0.8657024793388429
117002,"public boolean shouldOverrideUrlLoadingNoIntercept(final WebView view,final String url){
  if (url == null)   return false;
  boolean checkLoginSignup=((LeanWebView)view).checkLoginSignup();
  ((LeanWebView)view).setCheckLoginSignup(true);
  Uri uri=Uri.parse(url);
  final AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (checkLoginSignup && appConfig.loginUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (checkLoginSignup && appConfig.signupUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!isInternalUri(uri)) {
    Intent intent=new Intent(Intent.ACTION_VIEW,uri);
    try {
      view.getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Log.e(TAG,e.getMessage(),e);
    }
    return true;
  }
  int currentLevel=mainActivity.getUrlLevel();
  int newLevel=mainActivity.urlLevelForUrl(url);
  if (currentLevel >= 0 && newLevel >= 0) {
    if (newLevel > currentLevel) {
      Intent intent=new Intent(mainActivity.getBaseContext(),MainActivity.class);
      intent.putExtra(""String_Node_Str"",false);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",currentLevel);
      intent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.startActivityForResult(intent,MainActivity.REQUEST_WEB_ACTIVITY);
      return true;
    }
 else     if (newLevel < currentLevel && newLevel <= mainActivity.getParentUrlLevel()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",url);
      returnIntent.putExtra(""String_Node_Str"",newLevel);
      returnIntent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.setResult(Activity.RESULT_OK,returnIntent);
      mainActivity.finish();
      return true;
    }
  }
  if (newLevel >= 0) {
    mainActivity.setUrlLevel(newLevel);
  }
  final String newTitle=mainActivity.titleForUrl(url);
  if (newTitle != null) {
    mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.setTitle(newTitle);
      }
    }
);
  }
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
    }
  }
);
  Pair<LeanWebView,WebViewPoolDisownPolicy> pair=WebViewPool.getInstance().webviewForUrl(url);
  final LeanWebView poolWebview=pair.first;
  WebViewPoolDisownPolicy poolDisownPolicy=pair.second;
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Always) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    WebViewPool.getInstance().disownWebview(poolWebview);
    LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Never) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Reload && !LeanUtils.urlsMatchOnPath(url,this.currentWebviewUrl)) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (this.mainActivity.isPoolWebview) {
    WebViewPool.getInstance().disownWebview(view);
    this.mainActivity.isPoolWebview=false;
  }
  return false;
}","public boolean shouldOverrideUrlLoadingNoIntercept(final WebView view,final String url){
  if (url == null)   return false;
  boolean checkLoginSignup=((LeanWebView)view).checkLoginSignup();
  ((LeanWebView)view).setCheckLoginSignup(true);
  Uri uri=Uri.parse(url);
  final AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (checkLoginSignup && appConfig.loginUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (checkLoginSignup && appConfig.signupUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!isInternalUri(uri)) {
    Intent intent=new Intent(Intent.ACTION_VIEW,uri);
    try {
      view.getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Log.e(TAG,e.getMessage(),e);
    }
    return true;
  }
  int currentLevel=mainActivity.getUrlLevel();
  int newLevel=mainActivity.urlLevelForUrl(url);
  if (currentLevel >= 0 && newLevel >= 0) {
    if (newLevel > currentLevel) {
      Intent intent=new Intent(mainActivity.getBaseContext(),MainActivity.class);
      intent.putExtra(""String_Node_Str"",false);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",currentLevel);
      intent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.startActivityForResult(intent,MainActivity.REQUEST_WEB_ACTIVITY);
      mainActivity.postLoadJavascript=null;
      mainActivity.postLoadJavascriptForRefresh=null;
      return true;
    }
 else     if (newLevel < currentLevel && newLevel <= mainActivity.getParentUrlLevel()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",url);
      returnIntent.putExtra(""String_Node_Str"",newLevel);
      returnIntent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.setResult(Activity.RESULT_OK,returnIntent);
      mainActivity.finish();
      return true;
    }
  }
  if (newLevel >= 0) {
    mainActivity.setUrlLevel(newLevel);
  }
  final String newTitle=mainActivity.titleForUrl(url);
  if (newTitle != null) {
    mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.setTitle(newTitle);
      }
    }
);
  }
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
    }
  }
);
  Pair<LeanWebView,WebViewPoolDisownPolicy> pair=WebViewPool.getInstance().webviewForUrl(url);
  final LeanWebView poolWebview=pair.first;
  WebViewPoolDisownPolicy poolDisownPolicy=pair.second;
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Always) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    WebViewPool.getInstance().disownWebview(poolWebview);
    LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Never) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Reload && !LeanUtils.urlsMatchOnPath(url,this.currentWebviewUrl)) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (this.mainActivity.isPoolWebview) {
    WebViewPool.getInstance().disownWebview(view);
    this.mainActivity.isPoolWebview=false;
  }
  return false;
}",0.9879695556101152
117003,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (mDrawerToggle != null) {
    if (mDrawerToggle.onOptionsItemSelected(item)) {
      return true;
    }
  }
  if (this.actionManager != null) {
    if (this.actionManager.onOptionsItemSelected(item)) {
      return true;
    }
  }
switch (item.getItemId()) {
case android.R.id.home:
    finish();
  return true;
case R.id.action_search:
return true;
case R.id.action_refresh:
if (this.mWebview.getUrl() != null && this.mWebview.getUrl().startsWith(""String_Node_Str"")) {
this.mWebview.goBack();
updateMenu();
}
 else {
this.mWebview.reload();
}
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (mDrawerToggle != null) {
    if (mDrawerToggle.onOptionsItemSelected(item)) {
      return true;
    }
  }
  if (this.actionManager != null) {
    if (this.actionManager.onOptionsItemSelected(item)) {
      return true;
    }
  }
switch (item.getItemId()) {
case android.R.id.home:
    finish();
  return true;
case R.id.action_search:
return true;
case R.id.action_refresh:
String url=this.mWebview.getUrl();
if (url != null && url.startsWith(""String_Node_Str"")) {
this.mWebview.goBack();
updateMenu();
}
 else {
this.postLoadJavascript=this.postLoadJavascriptForRefresh;
this.mWebview.loadUrl(url);
}
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.7338028169014085
117004,"public void loadUrl(String url){
  if (url.equalsIgnoreCase(""String_Node_Str""))   logout();
 else   this.mWebview.loadUrl(url);
  if (this.tabManager != null)   this.tabManager.selectTab(url,null);
}","public void loadUrl(String url){
  this.postLoadJavascript=null;
  this.postLoadJavascriptForRefresh=null;
  if (url.equalsIgnoreCase(""String_Node_Str""))   logout();
 else   this.mWebview.loadUrl(url);
  if (this.tabManager != null)   this.tabManager.selectTab(url,null);
}",0.8432203389830508
117005,"@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    cachePath.mkdirs();
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    databasePath.mkdirs();
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.updateConfig();
    configUpdater.registerEvent();
    if (appConfig.pushNotifications) {
      this.pushManager=new PushManager(this);
      this.pushManager.register();
    }
    WebViewPool.getInstance().init(this);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(this);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      WebView.setWebContentsDebuggingEnabled(true);
    }
  }
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=(ProgressBar)findViewById(R.id.progress);
  LeanWebView wv=(LeanWebView)findViewById(R.id.webview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner spinner=(Spinner)findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,spinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.mWebview=wv;
  setupWebview(wv);
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  this.slidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  if (appConfig.tabBarBackgroundColor != null)   this.slidingTabStrip.setBackgroundColor(appConfig.tabBarBackgroundColor);
  if (appConfig.tabBarTextColor != null)   this.slidingTabStrip.setTextColor(appConfig.tabBarTextColor);
  if (appConfig.tabBarIndicatorColor != null)   this.slidingTabStrip.setIndicatorColor(appConfig.tabBarIndicatorColor);
  hideTabs();
  this.actionManager=new ActionManager(this);
  String url=null;
  String targetUrl=getIntent().getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=getIntent().getStringExtra(""String_Node_Str"");
  if (url != null) {
    wv.loadUrl(url);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=(ExpandableListView)findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      LoginManager.getInstance().init(this);
      LoginManager.getInstance().addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || AppConfig.getInstance(this).showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  }
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    cachePath.mkdirs();
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    databasePath.mkdirs();
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.updateConfig();
    configUpdater.registerEvent();
    if (appConfig.pushNotifications) {
      this.pushManager=new PushManager(this);
      this.pushManager.register();
    }
    WebViewPool.getInstance().init(this);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(this);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      WebView.setWebContentsDebuggingEnabled(true);
    }
  }
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=(ProgressBar)findViewById(R.id.progress);
  LeanWebView wv=(LeanWebView)findViewById(R.id.webview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner spinner=(Spinner)findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,spinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.mWebview=wv;
  setupWebview(wv);
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  this.postLoadJavascriptForRefresh=this.postLoadJavascript;
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  this.slidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  if (appConfig.tabBarBackgroundColor != null)   this.slidingTabStrip.setBackgroundColor(appConfig.tabBarBackgroundColor);
  if (appConfig.tabBarTextColor != null)   this.slidingTabStrip.setTextColor(appConfig.tabBarTextColor);
  if (appConfig.tabBarIndicatorColor != null)   this.slidingTabStrip.setIndicatorColor(appConfig.tabBarIndicatorColor);
  hideTabs();
  this.actionManager=new ActionManager(this);
  String url=null;
  String targetUrl=getIntent().getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=getIntent().getStringExtra(""String_Node_Str"");
  if (url != null) {
    wv.loadUrl(url);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=(ExpandableListView)findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      LoginManager.getInstance().init(this);
      LoginManager.getInstance().addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || AppConfig.getInstance(this).showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  }
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
}",0.993139129456754
117006,"public void loadUrlAndJavascript(String url,String javascript){
  String currentUrl=this.mWebview.getUrl();
  if (url != null && currentUrl != null && url.equals(currentUrl)) {
    hideWebview();
    runJavascript(javascript);
    showWebview();
  }
 else {
    this.postLoadJavascript=javascript;
    loadUrl(url);
  }
  if (this.tabManager != null)   this.tabManager.selectTab(url,javascript);
}","public void loadUrlAndJavascript(String url,String javascript){
  String currentUrl=this.mWebview.getUrl();
  if (url != null && currentUrl != null && url.equals(currentUrl)) {
    runJavascript(javascript);
    this.postLoadJavascriptForRefresh=javascript;
  }
 else {
    this.postLoadJavascript=javascript;
    this.postLoadJavascriptForRefresh=javascript;
    this.mWebview.loadUrl(url);
  }
  if (this.tabManager != null)   this.tabManager.selectTab(url,javascript);
}",0.4528735632183908
117007,"protected String doInBackground(WebviewInterceptParams... inputs){
  AppConfig appConfig=AppConfig.getInstance(this.context);
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    parsedUrl=inputs[0].url;
    webview=inputs[0].webview;
    boolean isReload=inputs[0].isReload;
    HttpURLConnection.setFollowRedirects(true);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (isCancelled())       return null;
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      String customUserAgent=appConfig.userAgentForUrl(parsedUrl.toString());
      if (customUserAgent != null) {
        connection.setRequestProperty(""String_Node_Str"",customUserAgent);
      }
 else {
        connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      }
      if (isReload)       connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        if (this.leanWebviewClient != null && this.leanWebviewClient.shouldOverrideUrlLoadingNoIntercept(this.webview,parsedUrl.toString())) {
          leanWebviewClient.showWebViewImmediately();
          connection.disconnect();
          this.cancel(true);
          return null;
        }
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    finalUrl=connection.getURL();
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      is=new BufferedInputStream(connection.getInputStream());
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null)     is=new BufferedInputStream(connection.getInputStream());
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=LeanWebviewClient.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        double webViewWidth=webview.getWidth() / this.context.getResources().getDisplayMetrics().density;
        double viewportWidth=appConfig.forceViewportWidth;
        double scale=webViewWidth / viewportWidth;
        builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return newString;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}","protected String doInBackground(WebviewInterceptParams... inputs){
  AppConfig appConfig=AppConfig.getInstance(this.context);
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    parsedUrl=inputs[0].url;
    webview=inputs[0].webview;
    boolean isReload=inputs[0].isReload;
    HttpURLConnection.setFollowRedirects(true);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (isCancelled())       return null;
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      String customUserAgent=appConfig.userAgentForUrl(parsedUrl.toString());
      if (customUserAgent != null) {
        connection.setRequestProperty(""String_Node_Str"",customUserAgent);
      }
 else {
        connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      }
      if (isReload)       connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        if (this.leanWebviewClient != null && this.leanWebviewClient.shouldOverrideUrlLoadingNoIntercept(this.webview,parsedUrl.toString())) {
          leanWebviewClient.showWebViewImmediately();
          connection.disconnect();
          this.cancel(true);
          return null;
        }
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    finalUrl=connection.getURL();
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      is=new BufferedInputStream(connection.getInputStream());
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null)     is=new BufferedInputStream(connection.getInputStream());
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=LeanWebviewClient.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        if (appConfig.zoomableForceViewport) {
          builder.append(String.format(""String_Node_Str"",appConfig.forceViewportWidth));
        }
 else {
          double webViewWidth=webview.getWidth() / this.context.getResources().getDisplayMetrics().density;
          double viewportWidth=appConfig.forceViewportWidth;
          double scale=webViewWidth / viewportWidth;
          builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
        }
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return newString;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}",0.97886458589334
117008,"public boolean shouldOverrideUrlLoadingNoIntercept(final WebView view,final String url){
  if (url == null)   return false;
  boolean checkLoginSignup=((LeanWebView)view).checkLoginSignup();
  ((LeanWebView)view).setCheckLoginSignup(true);
  Uri uri=Uri.parse(url);
  final AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (checkLoginSignup && appConfig.loginUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (checkLoginSignup && appConfig.signupUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!isInternalUri(uri)) {
    Intent intent=new Intent(Intent.ACTION_VIEW,uri);
    try {
      view.getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Log.e(TAG,e.getMessage(),e);
    }
    return true;
  }
  int currentLevel=mainActivity.getUrlLevel();
  int newLevel=mainActivity.urlLevelForUrl(url);
  if (currentLevel >= 0 && newLevel >= 0) {
    if (newLevel > currentLevel) {
      Intent intent=new Intent(mainActivity.getBaseContext(),MainActivity.class);
      intent.putExtra(""String_Node_Str"",false);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",currentLevel);
      intent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.startActivityForResult(intent,MainActivity.REQUEST_WEB_ACTIVITY);
      return true;
    }
 else     if (newLevel < currentLevel && newLevel <= mainActivity.getParentUrlLevel()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",url);
      returnIntent.putExtra(""String_Node_Str"",newLevel);
      returnIntent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.setResult(Activity.RESULT_OK,returnIntent);
      mainActivity.finish();
      return true;
    }
  }
  if (newLevel >= 0) {
    mainActivity.setUrlLevel(newLevel);
  }
  final String newTitle=mainActivity.titleForUrl(url);
  if (newTitle != null) {
    mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.setTitle(newTitle);
      }
    }
);
  }
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
    }
  }
);
  Pair<LeanWebView,WebViewPoolDisownPolicy> pair=WebViewPool.getInstance().webviewForUrl(url);
  final LeanWebView poolWebview=pair.first;
  WebViewPoolDisownPolicy poolDisownPolicy=pair.second;
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Always) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    WebViewPool.getInstance().disownWebview(poolWebview);
    LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Never) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Reload && !LeanUtils.urlsMatchOnPath(url,view.getUrl())) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (this.mainActivity.isPoolWebview) {
    WebViewPool.getInstance().disownWebview(view);
    this.mainActivity.isPoolWebview=false;
  }
  return false;
}","public boolean shouldOverrideUrlLoadingNoIntercept(final WebView view,final String url){
  if (url == null)   return false;
  boolean checkLoginSignup=((LeanWebView)view).checkLoginSignup();
  ((LeanWebView)view).setCheckLoginSignup(true);
  Uri uri=Uri.parse(url);
  final AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (checkLoginSignup && appConfig.loginUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (checkLoginSignup && appConfig.signupUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!isInternalUri(uri)) {
    Intent intent=new Intent(Intent.ACTION_VIEW,uri);
    try {
      view.getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Log.e(TAG,e.getMessage(),e);
    }
    return true;
  }
  int currentLevel=mainActivity.getUrlLevel();
  int newLevel=mainActivity.urlLevelForUrl(url);
  if (currentLevel >= 0 && newLevel >= 0) {
    if (newLevel > currentLevel) {
      Intent intent=new Intent(mainActivity.getBaseContext(),MainActivity.class);
      intent.putExtra(""String_Node_Str"",false);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",currentLevel);
      intent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.startActivityForResult(intent,MainActivity.REQUEST_WEB_ACTIVITY);
      return true;
    }
 else     if (newLevel < currentLevel && newLevel <= mainActivity.getParentUrlLevel()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",url);
      returnIntent.putExtra(""String_Node_Str"",newLevel);
      returnIntent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.setResult(Activity.RESULT_OK,returnIntent);
      mainActivity.finish();
      return true;
    }
  }
  if (newLevel >= 0) {
    mainActivity.setUrlLevel(newLevel);
  }
  final String newTitle=mainActivity.titleForUrl(url);
  if (newTitle != null) {
    mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.setTitle(newTitle);
      }
    }
);
  }
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
    }
  }
);
  Pair<LeanWebView,WebViewPoolDisownPolicy> pair=WebViewPool.getInstance().webviewForUrl(url);
  final LeanWebView poolWebview=pair.first;
  WebViewPoolDisownPolicy poolDisownPolicy=pair.second;
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Always) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    WebViewPool.getInstance().disownWebview(poolWebview);
    LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Never) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Reload && !LeanUtils.urlsMatchOnPath(url,this.currentWebviewUrl)) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (this.mainActivity.isPoolWebview) {
    WebViewPool.getInstance().disownWebview(view);
    this.mainActivity.isPoolWebview=false;
  }
  return false;
}",0.996392586142555
117009,"@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    cachePath.mkdirs();
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    databasePath.mkdirs();
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.updateConfig();
    configUpdater.registerEvent();
    if (appConfig.pushNotifications) {
      this.pushManager=new PushManager(this);
      this.pushManager.register();
    }
    WebViewPool.getInstance().init(this);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(this);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      WebView.setWebContentsDebuggingEnabled(true);
    }
  }
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=(ProgressBar)findViewById(R.id.progress);
  LeanWebView wv=(LeanWebView)findViewById(R.id.webview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner spinner=(Spinner)findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,spinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.mWebview=wv;
  setupWebview(wv);
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  String url=null;
  String targetUrl=getIntent().getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=getIntent().getStringExtra(""String_Node_Str"");
  if (url != null) {
    wv.loadUrl(url);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=(ExpandableListView)findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      LoginManager.getInstance().init(this);
      LoginManager.getInstance().addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || AppConfig.getInstance(this).showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  }
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  this.slidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  if (appConfig.tabBarBackgroundColor != null)   this.slidingTabStrip.setBackgroundColor(appConfig.tabBarBackgroundColor);
  if (appConfig.tabBarTextColor != null)   this.slidingTabStrip.setTextColor(appConfig.tabBarTextColor);
  if (appConfig.tabBarIndicatorColor != null)   this.slidingTabStrip.setIndicatorColor(appConfig.tabBarIndicatorColor);
  hideTabs();
  this.actionManager=new ActionManager(this);
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    cachePath.mkdirs();
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    databasePath.mkdirs();
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.updateConfig();
    configUpdater.registerEvent();
    if (appConfig.pushNotifications) {
      this.pushManager=new PushManager(this);
      this.pushManager.register();
    }
    WebViewPool.getInstance().init(this);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(this);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      WebView.setWebContentsDebuggingEnabled(true);
    }
  }
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=(ProgressBar)findViewById(R.id.progress);
  LeanWebView wv=(LeanWebView)findViewById(R.id.webview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner spinner=(Spinner)findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,spinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.mWebview=wv;
  setupWebview(wv);
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  this.slidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  if (appConfig.tabBarBackgroundColor != null)   this.slidingTabStrip.setBackgroundColor(appConfig.tabBarBackgroundColor);
  if (appConfig.tabBarTextColor != null)   this.slidingTabStrip.setTextColor(appConfig.tabBarTextColor);
  if (appConfig.tabBarIndicatorColor != null)   this.slidingTabStrip.setIndicatorColor(appConfig.tabBarIndicatorColor);
  hideTabs();
  this.actionManager=new ActionManager(this);
  String url=null;
  String targetUrl=getIntent().getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=getIntent().getStringExtra(""String_Node_Str"");
  if (url != null) {
    wv.loadUrl(url);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=(ExpandableListView)findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      LoginManager.getInstance().init(this);
      LoginManager.getInstance().addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || AppConfig.getInstance(this).showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  }
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
}",0.8355605889014722
117010,"public void loadUrl(String url){
  this.postLoadJavascript=null;
  this.postLoadJavascriptForRefresh=null;
  if (url.equalsIgnoreCase(""String_Node_Str""))   logout();
 else   this.mWebview.loadUrl(url);
  if (this.tabManager != null)   this.tabManager.selectTab(url,null);
}","public void loadUrl(String url,boolean isFromTab){
  this.postLoadJavascript=null;
  this.postLoadJavascriptForRefresh=null;
  if (url.equalsIgnoreCase(""String_Node_Str""))   logout();
 else   this.mWebview.loadUrl(url);
  if (!isFromTab && this.tabManager != null)   this.tabManager.selectTab(url,null);
}",0.944636678200692
117011,"@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    cachePath.mkdirs();
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    databasePath.mkdirs();
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.updateConfig();
    configUpdater.registerEvent();
    if (appConfig.pushNotifications) {
      this.pushManager=new PushManager(this);
      this.pushManager.register();
    }
    WebViewPool.getInstance().init(this);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(this);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      WebView.setWebContentsDebuggingEnabled(true);
    }
  }
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=(ProgressBar)findViewById(R.id.progress);
  LeanWebView wv=(LeanWebView)findViewById(R.id.webview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner spinner=(Spinner)findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,spinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.mWebview=wv;
  setupWebview(wv);
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  this.postLoadJavascriptForRefresh=this.postLoadJavascript;
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  this.slidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  if (appConfig.tabBarBackgroundColor != null)   this.slidingTabStrip.setBackgroundColor(appConfig.tabBarBackgroundColor);
  if (appConfig.tabBarTextColor != null)   this.slidingTabStrip.setTextColor(appConfig.tabBarTextColor);
  if (appConfig.tabBarIndicatorColor != null)   this.slidingTabStrip.setIndicatorColor(appConfig.tabBarIndicatorColor);
  hideTabs();
  this.actionManager=new ActionManager(this);
  String url=null;
  String targetUrl=getIntent().getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=getIntent().getStringExtra(""String_Node_Str"");
  if (url != null) {
    wv.loadUrl(url);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=(ExpandableListView)findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      LoginManager.getInstance().init(this);
      LoginManager.getInstance().addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || AppConfig.getInstance(this).showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  }
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    cachePath.mkdirs();
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    databasePath.mkdirs();
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.updateConfig();
    configUpdater.registerEvent();
    if (appConfig.pushNotifications) {
      this.pushManager=new PushManager(this);
      this.pushManager.register();
    }
  }
  WebViewPool.getInstance().init(this);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(this);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      WebView.setWebContentsDebuggingEnabled(true);
    }
  }
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=(ProgressBar)findViewById(R.id.progress);
  LeanWebView wv=(LeanWebView)findViewById(R.id.webview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner spinner=(Spinner)findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,spinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.mWebview=wv;
  setupWebview(wv);
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  this.postLoadJavascriptForRefresh=this.postLoadJavascript;
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  this.slidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  if (appConfig.tabBarBackgroundColor != null)   this.slidingTabStrip.setBackgroundColor(appConfig.tabBarBackgroundColor);
  if (appConfig.tabBarTextColor != null)   this.slidingTabStrip.setTextColor(appConfig.tabBarTextColor);
  if (appConfig.tabBarIndicatorColor != null)   this.slidingTabStrip.setIndicatorColor(appConfig.tabBarIndicatorColor);
  hideTabs();
  this.actionManager=new ActionManager(this);
  String url=null;
  String targetUrl=getIntent().getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=getIntent().getStringExtra(""String_Node_Str"");
  if (url != null) {
    wv.loadUrl(url);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=(ExpandableListView)findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      LoginManager.getInstance().init(this);
      LoginManager.getInstance().addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || AppConfig.getInstance(this).showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  }
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
}",0.9993296089385476
117012,"public void loadUrlAndJavascript(String url,String javascript){
  String currentUrl=this.mWebview.getUrl();
  if (url != null && currentUrl != null && url.equals(currentUrl)) {
    runJavascript(javascript);
    this.postLoadJavascriptForRefresh=javascript;
  }
 else {
    this.postLoadJavascript=javascript;
    this.postLoadJavascriptForRefresh=javascript;
    this.mWebview.loadUrl(url);
  }
  if (this.tabManager != null)   this.tabManager.selectTab(url,javascript);
}","public void loadUrlAndJavascript(String url,String javascript,boolean isFromTab){
  String currentUrl=this.mWebview.getUrl();
  if (url != null && currentUrl != null && url.equals(currentUrl)) {
    runJavascript(javascript);
    this.postLoadJavascriptForRefresh=javascript;
  }
 else {
    this.postLoadJavascript=javascript;
    this.postLoadJavascriptForRefresh=javascript;
    this.mWebview.loadUrl(url);
  }
  if (!isFromTab && this.tabManager != null)   this.tabManager.selectTab(url,javascript);
}",0.967280163599182
117013,"@Override public void onTabClick(int position){
  if (this.tabs != null && position < this.tabs.length()) {
    JSONObject entry=this.tabs.optJSONObject(position);
    String url=entry.optString(""String_Node_Str"");
    String javascript=entry.optString(""String_Node_Str"");
    if (url != null && !url.isEmpty()) {
      if (javascript != null)       mainActivity.loadUrlAndJavascript(url,javascript);
 else       mainActivity.loadUrl(url);
    }
  }
}","@Override public void onTabClick(int position){
  if (this.tabs != null && position < this.tabs.length()) {
    JSONObject entry=this.tabs.optJSONObject(position);
    String url=entry.optString(""String_Node_Str"");
    String javascript=entry.optString(""String_Node_Str"");
    if (url != null && !url.isEmpty()) {
      if (javascript != null)       mainActivity.loadUrlAndJavascript(url,javascript,true);
 else       mainActivity.loadUrl(url,true);
    }
  }
}",0.9890350877192984
117014,"public void init(Activity activity){
  this.context=activity;
  this.urlToWebview=new HashMap<String,LeanWebView>();
  this.urlToDisownPolicy=new HashMap<String,WebViewPoolDisownPolicy>();
  this.urlSets=new ArrayList<Set<String>>();
  this.urlsToLoad=new HashSet<String>();
  this.messageReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (intent == null || intent.getAction() == null)       return;
      if (intent.getAction().equals(LeanWebviewClient.STARTED_LOADING_MESSAGE)) {
        WebViewPool pool=WebViewPool.this;
        pool.isMainActivityLoading=true;
        if (pool.currentLoadingWebview != null) {
          pool.currentLoadingWebview.stopLoading();
          pool.isLoading=false;
        }
      }
 else       if (intent.getAction().equals(LeanWebviewClient.FINISHED_LOADING_MESSAGE)) {
        WebViewPool pool=WebViewPool.this;
        pool.isMainActivityLoading=false;
        pool.resumeLoading();
      }
 else       if (intent.getAction().equals(AppConfig.PROCESSED_WEBVIEW_POOLS_MESSAGE)) {
        processConfig();
      }
    }
  }
;
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(LeanWebviewClient.STARTED_LOADING_MESSAGE));
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(AppConfig.PROCESSED_WEBVIEW_POOLS_MESSAGE));
  this.webviewClient=new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      WebViewPool pool=WebViewPool.this;
      view.setWebViewClient(null);
      pool.urlToWebview.put(pool.currentLoadingUrl,pool.currentLoadingWebview);
      pool.currentLoadingUrl=null;
      pool.currentLoadingWebview=null;
      pool.isLoading=false;
      pool.resumeLoading();
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      WebViewPool pool=WebViewPool.this;
      if (AppConfig.getInstance(pool.context).interceptHtml) {
        try {
          URL parsedUrl=new URL(url);
          if (parsedUrl.getProtocol().equals(""String_Node_Str"") || parsedUrl.getProtocol().equals(""String_Node_Str"")) {
            new WebviewInterceptTask(pool.context,null).execute(new WebviewInterceptTask.WebviewInterceptParams(view,parsedUrl,true));
            return true;
          }
        }
 catch (        Exception e) {
          Log.e(TAG,e.getMessage(),e);
        }
      }
      return false;
    }
  }
;
  processConfig();
}","public void init(Activity activity){
  if (this.isInitialized)   return;
  this.isInitialized=true;
  this.context=activity;
  this.urlToWebview=new HashMap<String,LeanWebView>();
  this.urlToDisownPolicy=new HashMap<String,WebViewPoolDisownPolicy>();
  this.urlSets=new ArrayList<Set<String>>();
  this.urlsToLoad=new HashSet<String>();
  this.messageReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (intent == null || intent.getAction() == null)       return;
      if (intent.getAction().equals(LeanWebviewClient.STARTED_LOADING_MESSAGE)) {
        WebViewPool pool=WebViewPool.this;
        pool.isMainActivityLoading=true;
        if (pool.currentLoadingWebview != null) {
          pool.currentLoadingWebview.stopLoading();
          pool.isLoading=false;
        }
      }
 else       if (intent.getAction().equals(LeanWebviewClient.FINISHED_LOADING_MESSAGE)) {
        WebViewPool pool=WebViewPool.this;
        pool.isMainActivityLoading=false;
        pool.resumeLoading();
      }
 else       if (intent.getAction().equals(AppConfig.PROCESSED_WEBVIEW_POOLS_MESSAGE)) {
        processConfig();
      }
    }
  }
;
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(LeanWebviewClient.STARTED_LOADING_MESSAGE));
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(AppConfig.PROCESSED_WEBVIEW_POOLS_MESSAGE));
  this.webviewClient=new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      WebViewPool pool=WebViewPool.this;
      view.setWebViewClient(null);
      pool.urlToWebview.put(pool.currentLoadingUrl,pool.currentLoadingWebview);
      pool.currentLoadingUrl=null;
      pool.currentLoadingWebview=null;
      pool.isLoading=false;
      pool.resumeLoading();
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      WebViewPool pool=WebViewPool.this;
      if (AppConfig.getInstance(pool.context).interceptHtml) {
        try {
          URL parsedUrl=new URL(url);
          if (parsedUrl.getProtocol().equals(""String_Node_Str"") || parsedUrl.getProtocol().equals(""String_Node_Str"")) {
            new WebviewInterceptTask(pool.context,null).execute(new WebviewInterceptTask.WebviewInterceptParams(view,parsedUrl,true));
            return true;
          }
        }
 catch (        Exception e) {
          Log.e(TAG,e.getMessage(),e);
        }
      }
      return false;
    }
  }
;
  processConfig();
}",0.9885350318471338
117015,"public boolean shouldOverrideUrlLoadingNoIntercept(WebView view,String url){
  if (url == null)   return false;
  boolean checkLoginSignup=((LeanWebView)view).checkLoginSignup();
  ((LeanWebView)view).setCheckLoginSignup(true);
  Uri uri=Uri.parse(url);
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (checkLoginSignup && appConfig.loginUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (checkLoginSignup && appConfig.signupUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!isInternalUri(uri)) {
    Intent intent=new Intent(Intent.ACTION_VIEW,uri);
    try {
      view.getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Log.e(TAG,e.getMessage(),e);
    }
    return true;
  }
  int currentLevel=mainActivity.getUrlLevel();
  int newLevel=mainActivity.urlLevelForUrl(url);
  if (currentLevel >= 0 && newLevel >= 0) {
    if (newLevel > currentLevel) {
      Intent intent=new Intent(mainActivity.getBaseContext(),MainActivity.class);
      intent.putExtra(""String_Node_Str"",false);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",currentLevel);
      intent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.startActivityForResult(intent,MainActivity.REQUEST_WEB_ACTIVITY);
      return true;
    }
 else     if (newLevel < currentLevel && newLevel <= mainActivity.getParentUrlLevel()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",url);
      returnIntent.putExtra(""String_Node_Str"",newLevel);
      returnIntent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.setResult(Activity.RESULT_OK,returnIntent);
      mainActivity.finish();
      return true;
    }
  }
  if (newLevel >= 0) {
    mainActivity.setUrlLevel(newLevel);
  }
  final String newTitle=mainActivity.titleForUrl(url);
  if (newTitle != null) {
    mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.setTitle(newTitle);
      }
    }
);
  }
  mainActivity.showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  Pair<LeanWebView,WebViewPoolDisownPolicy> pair=WebViewPool.getInstance().webviewForUrl(url);
  LeanWebView poolWebview=pair.first;
  WebViewPoolDisownPolicy poolDisownPolicy=pair.second;
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Always) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    WebViewPool.getInstance().disownWebview(poolWebview);
    LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.FINISHED_LOADING_MESSAGE));
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Never) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Reload && !LeanUtils.urlsMatchOnPath(url,view.getUrl())) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    return true;
  }
  if (this.mainActivity.isPoolWebview) {
    WebViewPool.getInstance().disownWebview(view);
    this.mainActivity.isPoolWebview=false;
  }
  return false;
}","public boolean shouldOverrideUrlLoadingNoIntercept(WebView view,final String url){
  if (url == null)   return false;
  boolean checkLoginSignup=((LeanWebView)view).checkLoginSignup();
  ((LeanWebView)view).setCheckLoginSignup(true);
  Uri uri=Uri.parse(url);
  final AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (checkLoginSignup && appConfig.loginUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (checkLoginSignup && appConfig.signupUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!isInternalUri(uri)) {
    Intent intent=new Intent(Intent.ACTION_VIEW,uri);
    try {
      view.getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Log.e(TAG,e.getMessage(),e);
    }
    return true;
  }
  int currentLevel=mainActivity.getUrlLevel();
  int newLevel=mainActivity.urlLevelForUrl(url);
  if (currentLevel >= 0 && newLevel >= 0) {
    if (newLevel > currentLevel) {
      Intent intent=new Intent(mainActivity.getBaseContext(),MainActivity.class);
      intent.putExtra(""String_Node_Str"",false);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",currentLevel);
      intent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.startActivityForResult(intent,MainActivity.REQUEST_WEB_ACTIVITY);
      return true;
    }
 else     if (newLevel < currentLevel && newLevel <= mainActivity.getParentUrlLevel()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",url);
      returnIntent.putExtra(""String_Node_Str"",newLevel);
      returnIntent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.setResult(Activity.RESULT_OK,returnIntent);
      mainActivity.finish();
      return true;
    }
  }
  if (newLevel >= 0) {
    mainActivity.setUrlLevel(newLevel);
  }
  final String newTitle=mainActivity.titleForUrl(url);
  if (newTitle != null) {
    mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.setTitle(newTitle);
      }
    }
);
  }
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
    }
  }
);
  Pair<LeanWebView,WebViewPoolDisownPolicy> pair=WebViewPool.getInstance().webviewForUrl(url);
  LeanWebView poolWebview=pair.first;
  WebViewPoolDisownPolicy poolDisownPolicy=pair.second;
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Always) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    WebViewPool.getInstance().disownWebview(poolWebview);
    LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.FINISHED_LOADING_MESSAGE));
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Never) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Reload && !LeanUtils.urlsMatchOnPath(url,view.getUrl())) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    return true;
  }
  if (this.mainActivity.isPoolWebview) {
    WebViewPool.getInstance().disownWebview(view);
    this.mainActivity.isPoolWebview=false;
  }
  return false;
}",0.9852637377771656
117016,"protected String doInBackground(WebviewInterceptParams... inputs){
  AppConfig appConfig=AppConfig.getInstance(this.context);
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    parsedUrl=inputs[0].url;
    webview=inputs[0].webview;
    boolean isReload=inputs[0].isReload;
    HttpURLConnection.setFollowRedirects(true);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (isCancelled())       return null;
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      String customUserAgent=appConfig.userAgentForUrl(parsedUrl.toString());
      if (customUserAgent != null) {
        connection.setRequestProperty(""String_Node_Str"",customUserAgent);
      }
 else {
        connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      }
      if (isReload)       connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        if (this.leanWebviewClient != null && this.leanWebviewClient.shouldOverrideUrlLoadingNoIntercept(this.webview,parsedUrl.toString())) {
          leanWebviewClient.showWebViewImmediately();
          connection.disconnect();
          this.cancel(true);
          return null;
        }
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    finalUrl=connection.getURL();
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      is=new BufferedInputStream(connection.getInputStream());
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null)     is=new BufferedInputStream(connection.getInputStream());
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=LeanWebviewClient.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        if (appConfig.zoomableForceViewport) {
          builder.append(String.format(""String_Node_Str"",appConfig.forceViewportWidth));
        }
 else {
          double webViewWidth=webview.getWidth() / this.context.getResources().getDisplayMetrics().density;
          double viewportWidth=appConfig.forceViewportWidth;
          double scale=webViewWidth / viewportWidth;
          builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
        }
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return newString;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}","protected String doInBackground(WebviewInterceptParams... inputs){
  AppConfig appConfig=AppConfig.getInstance(this.context);
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    parsedUrl=inputs[0].url;
    webview=inputs[0].webview;
    boolean isReload=inputs[0].isReload;
    HttpURLConnection.setFollowRedirects(true);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (isCancelled())       return null;
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      String customUserAgent=appConfig.userAgentForUrl(parsedUrl.toString());
      if (customUserAgent != null) {
        connection.setRequestProperty(""String_Node_Str"",customUserAgent);
      }
 else {
        connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      }
      if (isReload)       connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        if (this.leanWebviewClient != null && this.leanWebviewClient.shouldOverrideUrlLoadingNoIntercept(this.webview,parsedUrl.toString())) {
          leanWebviewClient.showWebViewImmediately();
          connection.disconnect();
          this.cancel(true);
          return null;
        }
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    finalUrl=connection.getURL();
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      try {
        is=new BufferedInputStream(connection.getInputStream());
      }
 catch (      IOException e) {
        is=new BufferedInputStream(connection.getErrorStream());
      }
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null) {
      try {
        is=new BufferedInputStream(connection.getInputStream());
      }
 catch (      IOException e) {
        is=new BufferedInputStream(connection.getErrorStream());
      }
      if (is == null)       return null;
    }
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=LeanWebviewClient.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        if (appConfig.zoomableForceViewport) {
          builder.append(String.format(""String_Node_Str"",appConfig.forceViewportWidth));
        }
 else {
          double webViewWidth=webview.getWidth() / this.context.getResources().getDisplayMetrics().density;
          double viewportWidth=appConfig.forceViewportWidth;
          double scale=webViewWidth / viewportWidth;
          builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
        }
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return newString;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}",0.9648206199930338
117017,"private AppConfig(Context context){
  this.context=context;
  this.appConfigJsBridge=new AppConfigJsBridge();
  InputStream is=null;
  InputStream jsonIs=null;
  try {
    if (fileForOTAconfig().exists()) {
      InputStream otaIS=null;
      try {
        otaIS=new BufferedInputStream(new FileInputStream(fileForOTAconfig()));
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        IOUtils.copy(otaIS,baos);
        baos.close();
        this.json=new JSONObject(baos.toString(""String_Node_Str""));
      }
 catch (      Exception e) {
        Log.e(TAG,e.getMessage(),e);
        IOUtils.close(otaIS);
      }
    }
    if (this.json == null) {
      jsonIs=context.getAssets().open(""String_Node_Str"");
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      IOUtils.copy(jsonIs,baos);
      IOUtils.close(baos);
      this.json=new JSONObject(baos.toString(""String_Node_Str""));
    }
    this.regexInternalExternal=new ArrayList<Pattern>();
    this.regexIsInternal=new ArrayList<Boolean>();
    JSONObject general=this.json.optJSONObject(""String_Node_Str"");
    if (general != null) {
      this.initialUrl=optString(general,""String_Node_Str"");
      initialHost=Uri.parse(this.initialUrl).getHost();
      if (initialHost.startsWith(""String_Node_Str"")) {
        initialHost=initialHost.substring(""String_Node_Str"".length());
      }
      this.appName=optString(general,""String_Node_Str"");
      String forceUserAgent=optString(general,""String_Node_Str"");
      if (forceUserAgent != null && !forceUserAgent.isEmpty()) {
        this.userAgent=forceUserAgent;
      }
 else {
        String userAgentAdd=optString(general,""String_Node_Str"");
        if (userAgentAdd == null)         userAgentAdd=""String_Node_Str"";
        WebView wv=new WebView(context);
        StringBuilder sb=new StringBuilder(wv.getSettings().getUserAgentString());
        sb.append(""String_Node_Str"");
        sb.append(userAgentAdd);
        this.userAgent=sb.toString();
      }
      this.publicKey=optString(general,""String_Node_Str"");
      this.deviceRegKey=optString(general,""String_Node_Str"");
      this.forceSessionCookieExpiry=general.optInt(""String_Node_Str"",0);
    }
    JSONObject forms=this.json.optJSONObject(""String_Node_Str"");
    if (forms != null) {
      JSONObject search=forms.optJSONObject(""String_Node_Str"");
      if (search != null && search.optBoolean(""String_Node_Str"",false)) {
        this.searchTemplateUrl=optString(search,""String_Node_Str"");
      }
      JSONObject loginConfig=forms.optJSONObject(""String_Node_Str"");
      if (loginConfig != null && loginConfig.optBoolean(""String_Node_Str"",false)) {
        this.loginConfig=loginConfig;
        this.loginUrl=optString(loginConfig,""String_Node_Str"");
        this.loginIsFirstPage=loginConfig.optBoolean(""String_Node_Str"",false);
      }
      JSONObject signupConfig=forms.optJSONObject(""String_Node_Str"");
      if (signupConfig != null && signupConfig.optBoolean(""String_Node_Str"",false)) {
        this.signupConfig=signupConfig;
        this.signupUrl=optString(signupConfig,""String_Node_Str"");
      }
    }
    JSONObject navigation=this.json.optJSONObject(""String_Node_Str"");
    if (navigation != null) {
      JSONObject sidebarNav=navigation.optJSONObject(""String_Node_Str"");
      processSidebarNavigation(sidebarNav);
      JSONObject navigationLevels=navigation.optJSONObject(""String_Node_Str"");
      processNavigationLevels(navigationLevels);
      JSONObject navigationTitles=navigation.optJSONObject(""String_Node_Str"");
      processNavigationTitles(navigationTitles);
      this.profilePickerJS=optString(navigation,""String_Node_Str"");
      JSONObject regexInternalExternal=navigation.optJSONObject(""String_Node_Str"");
      if (regexInternalExternal != null) {
        JSONArray rules=regexInternalExternal.optJSONArray(""String_Node_Str"");
        if (rules != null) {
          for (int i=0; i < rules.length(); i++) {
            JSONObject entry=rules.optJSONObject(i);
            if (entry != null && entry.has(""String_Node_Str"") && entry.has(""String_Node_Str"")) {
              String regex=optString(entry,""String_Node_Str"");
              boolean internal=entry.optBoolean(""String_Node_Str"",true);
              if (regex != null) {
                this.regexInternalExternal.add(Pattern.compile(regex));
                this.regexIsInternal.add(internal);
              }
            }
          }
        }
      }
      JSONObject tabNavigation=navigation.optJSONObject(""String_Node_Str"");
      processTabNavigation(tabNavigation);
      JSONObject actionConfig=navigation.optJSONObject(""String_Node_Str"");
      processActions(actionConfig);
      this.showRefreshButton=navigation.optBoolean(""String_Node_Str"",true);
    }
    JSONObject styling=this.json.optJSONObject(""String_Node_Str"");
    this.customCSS=optString(styling,""String_Node_Str"");
    this.forceViewportWidth=styling.optDouble(""String_Node_Str"",Double.NaN);
    this.interceptHtml=this.customCSS != null || !Double.isNaN(this.forceViewportWidth) || this.forceSessionCookieExpiry > 0;
    this.showActionBar=styling.optBoolean(""String_Node_Str"",true);
    this.androidTheme=optString(styling,""String_Node_Str"");
    String sideBackColor=AppConfig.optString(styling,""String_Node_Str"");
    this.sidebarBackgroundColor=LeanUtils.parseColor(sideBackColor);
    String sideForeColor=AppConfig.optString(styling,""String_Node_Str"");
    this.sidebarForegroundColor=LeanUtils.parseColor(sideForeColor);
    String tintColor=AppConfig.optString(styling,""String_Node_Str"");
    this.tintColor=LeanUtils.parseColor(tintColor);
    this.interactiveDelay=styling.optDouble(""String_Node_Str"",Double.NaN);
    this.hideTitleInActionBar=styling.optBoolean(""String_Node_Str"",false);
    this.showLogoInActionBar=styling.optBoolean(""String_Node_Str"",this.hideTitleInActionBar);
    String actionBarForegroundColor=AppConfig.optString(styling,""String_Node_Str"");
    this.actionbarForegroundColor=LeanUtils.parseColor(actionBarForegroundColor);
    if (this.actionbarForegroundColor == null) {
      if (this.androidTheme == null)       this.actionbarForegroundColor=Color.WHITE;
 else       if (this.androidTheme.equalsIgnoreCase(""String_Node_Str""))       this.actionbarForegroundColor=Color.BLACK;
 else       this.actionbarForegroundColor=Color.WHITE;
    }
    JSONObject permissions=this.json.optJSONObject(""String_Node_Str"");
    if (permissions != null) {
      this.usesGeolocation=permissions.optBoolean(""String_Node_Str"",false);
    }
    JSONObject services=this.json.optJSONObject(""String_Node_Str"");
    if (services != null) {
      JSONObject push=services.optJSONObject(""String_Node_Str"");
      this.pushNotifications=push != null && push.optBoolean(""String_Node_Str"",false);
      JSONObject analytics=services.optJSONObject(""String_Node_Str"");
      if (analytics != null && analytics.optBoolean(""String_Node_Str"",false)) {
        this.idsite_test=analytics.optInt(""String_Node_Str"",Integer.MIN_VALUE);
        this.idsite_prod=analytics.optInt(""String_Node_Str"",Integer.MIN_VALUE);
        if (this.idsite_test == Integer.MIN_VALUE || this.idsite_prod == Integer.MIN_VALUE) {
          Log.w(TAG,""String_Node_Str"");
          this.analytics=false;
        }
 else {
          this.analytics=true;
        }
      }
    }
    JSONObject performance=this.json.optJSONObject(""String_Node_Str"");
    if (performance != null) {
      processWebViewPools(performance.optJSONArray(""String_Node_Str""));
    }
    this.allowZoom=this.json.optBoolean(""String_Node_Str"",true);
    this.updateConfigJS=optString(this.json,""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(jsonIs);
  }
}","private AppConfig(Context context){
  this.context=context;
  this.appConfigJsBridge=new AppConfigJsBridge();
  InputStream is=null;
  InputStream jsonIs=null;
  try {
    if (fileForOTAconfig().exists()) {
      InputStream otaIS=null;
      try {
        otaIS=new BufferedInputStream(new FileInputStream(fileForOTAconfig()));
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        IOUtils.copy(otaIS,baos);
        baos.close();
        this.json=new JSONObject(baos.toString(""String_Node_Str""));
      }
 catch (      Exception e) {
        Log.e(TAG,e.getMessage(),e);
        IOUtils.close(otaIS);
      }
    }
    if (this.json == null) {
      jsonIs=context.getAssets().open(""String_Node_Str"");
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      IOUtils.copy(jsonIs,baos);
      IOUtils.close(baos);
      this.json=new JSONObject(baos.toString(""String_Node_Str""));
    }
    this.regexInternalExternal=new ArrayList<Pattern>();
    this.regexIsInternal=new ArrayList<Boolean>();
    JSONObject general=this.json.optJSONObject(""String_Node_Str"");
    if (general != null) {
      this.initialUrl=optString(general,""String_Node_Str"");
      initialHost=Uri.parse(this.initialUrl).getHost();
      if (initialHost.startsWith(""String_Node_Str"")) {
        initialHost=initialHost.substring(""String_Node_Str"".length());
      }
      this.appName=optString(general,""String_Node_Str"");
      String forceUserAgent=optString(general,""String_Node_Str"");
      if (forceUserAgent != null && !forceUserAgent.isEmpty()) {
        this.userAgent=forceUserAgent;
      }
 else {
        String userAgentAdd=optString(general,""String_Node_Str"");
        if (userAgentAdd == null)         userAgentAdd=""String_Node_Str"";
        WebView wv=new WebView(context);
        StringBuilder sb=new StringBuilder(wv.getSettings().getUserAgentString());
        sb.append(""String_Node_Str"");
        sb.append(userAgentAdd);
        this.userAgent=sb.toString();
      }
      this.publicKey=optString(general,""String_Node_Str"");
      this.deviceRegKey=optString(general,""String_Node_Str"");
      this.forceSessionCookieExpiry=general.optInt(""String_Node_Str"",0);
      if (this.forceSessionCookieExpiry > 0)       this.interceptHtml=true;
      processUserAgentRegexes(general.optJSONArray(""String_Node_Str""));
    }
    JSONObject forms=this.json.optJSONObject(""String_Node_Str"");
    if (forms != null) {
      JSONObject search=forms.optJSONObject(""String_Node_Str"");
      if (search != null && search.optBoolean(""String_Node_Str"",false)) {
        this.searchTemplateUrl=optString(search,""String_Node_Str"");
      }
      JSONObject loginConfig=forms.optJSONObject(""String_Node_Str"");
      if (loginConfig != null && loginConfig.optBoolean(""String_Node_Str"",false)) {
        this.loginConfig=loginConfig;
        this.loginUrl=optString(loginConfig,""String_Node_Str"");
        this.loginIsFirstPage=loginConfig.optBoolean(""String_Node_Str"",false);
      }
      JSONObject signupConfig=forms.optJSONObject(""String_Node_Str"");
      if (signupConfig != null && signupConfig.optBoolean(""String_Node_Str"",false)) {
        this.signupConfig=signupConfig;
        this.signupUrl=optString(signupConfig,""String_Node_Str"");
      }
    }
    JSONObject navigation=this.json.optJSONObject(""String_Node_Str"");
    if (navigation != null) {
      JSONObject sidebarNav=navigation.optJSONObject(""String_Node_Str"");
      processSidebarNavigation(sidebarNav);
      JSONObject navigationLevels=navigation.optJSONObject(""String_Node_Str"");
      processNavigationLevels(navigationLevels);
      JSONObject navigationTitles=navigation.optJSONObject(""String_Node_Str"");
      processNavigationTitles(navigationTitles);
      this.profilePickerJS=optString(navigation,""String_Node_Str"");
      JSONObject regexInternalExternal=navigation.optJSONObject(""String_Node_Str"");
      if (regexInternalExternal != null) {
        JSONArray rules=regexInternalExternal.optJSONArray(""String_Node_Str"");
        if (rules != null) {
          for (int i=0; i < rules.length(); i++) {
            JSONObject entry=rules.optJSONObject(i);
            if (entry != null && entry.has(""String_Node_Str"") && entry.has(""String_Node_Str"")) {
              String regex=optString(entry,""String_Node_Str"");
              boolean internal=entry.optBoolean(""String_Node_Str"",true);
              if (regex != null) {
                this.regexInternalExternal.add(Pattern.compile(regex));
                this.regexIsInternal.add(internal);
              }
            }
          }
        }
      }
      JSONObject tabNavigation=navigation.optJSONObject(""String_Node_Str"");
      processTabNavigation(tabNavigation);
      JSONObject actionConfig=navigation.optJSONObject(""String_Node_Str"");
      processActions(actionConfig);
      this.showRefreshButton=navigation.optBoolean(""String_Node_Str"",true);
    }
    JSONObject styling=this.json.optJSONObject(""String_Node_Str"");
    this.customCSS=optString(styling,""String_Node_Str"");
    if (this.customCSS != null)     this.interceptHtml=true;
    this.forceViewportWidth=styling.optDouble(""String_Node_Str"",Double.NaN);
    if (!Double.isNaN(this.forceViewportWidth))     this.interceptHtml=true;
    this.showActionBar=styling.optBoolean(""String_Node_Str"",true);
    this.androidTheme=optString(styling,""String_Node_Str"");
    String sideBackColor=AppConfig.optString(styling,""String_Node_Str"");
    this.sidebarBackgroundColor=LeanUtils.parseColor(sideBackColor);
    String sideForeColor=AppConfig.optString(styling,""String_Node_Str"");
    this.sidebarForegroundColor=LeanUtils.parseColor(sideForeColor);
    String tintColor=AppConfig.optString(styling,""String_Node_Str"");
    this.tintColor=LeanUtils.parseColor(tintColor);
    this.interactiveDelay=styling.optDouble(""String_Node_Str"",Double.NaN);
    this.hideTitleInActionBar=styling.optBoolean(""String_Node_Str"",false);
    this.showLogoInActionBar=styling.optBoolean(""String_Node_Str"",this.hideTitleInActionBar);
    String actionBarForegroundColor=AppConfig.optString(styling,""String_Node_Str"");
    this.actionbarForegroundColor=LeanUtils.parseColor(actionBarForegroundColor);
    if (this.actionbarForegroundColor == null) {
      if (this.androidTheme == null)       this.actionbarForegroundColor=Color.WHITE;
 else       if (this.androidTheme.equalsIgnoreCase(""String_Node_Str""))       this.actionbarForegroundColor=Color.BLACK;
 else       this.actionbarForegroundColor=Color.WHITE;
    }
    JSONObject permissions=this.json.optJSONObject(""String_Node_Str"");
    if (permissions != null) {
      this.usesGeolocation=permissions.optBoolean(""String_Node_Str"",false);
    }
    JSONObject services=this.json.optJSONObject(""String_Node_Str"");
    if (services != null) {
      JSONObject push=services.optJSONObject(""String_Node_Str"");
      this.pushNotifications=push != null && push.optBoolean(""String_Node_Str"",false);
      JSONObject analytics=services.optJSONObject(""String_Node_Str"");
      if (analytics != null && analytics.optBoolean(""String_Node_Str"",false)) {
        this.idsite_test=analytics.optInt(""String_Node_Str"",Integer.MIN_VALUE);
        this.idsite_prod=analytics.optInt(""String_Node_Str"",Integer.MIN_VALUE);
        if (this.idsite_test == Integer.MIN_VALUE || this.idsite_prod == Integer.MIN_VALUE) {
          Log.w(TAG,""String_Node_Str"");
          this.analytics=false;
        }
 else {
          this.analytics=true;
        }
      }
    }
    JSONObject performance=this.json.optJSONObject(""String_Node_Str"");
    if (performance != null) {
      processWebViewPools(performance.optJSONArray(""String_Node_Str""));
    }
    this.allowZoom=this.json.optBoolean(""String_Node_Str"",true);
    this.updateConfigJS=optString(this.json,""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(jsonIs);
  }
}",0.9793499043977056
117018,"public void loadUrl(String url){
  if (url.equalsIgnoreCase(""String_Node_Str""))   logout();
 else   this.mWebview.loadUrl(url);
}","public void loadUrl(String url){
  if (url.equalsIgnoreCase(""String_Node_Str""))   logout();
 else   this.mWebview.loadUrl(url);
  if (this.tabManager != null)   this.tabManager.selectTab(url,null);
}",0.7865853658536586
117019,"@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    cachePath.mkdirs();
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    databasePath.mkdirs();
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.updateConfig();
    configUpdater.registerEvent();
    if (appConfig.pushNotifications) {
      this.pushManager=new PushManager(this);
      this.pushManager.register();
    }
    WebViewPool.getInstance().init(this);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(this);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      WebView.setWebContentsDebuggingEnabled(true);
    }
  }
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=(ProgressBar)findViewById(R.id.progress);
  LeanWebView wv=(LeanWebView)findViewById(R.id.webview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner spinner=(Spinner)findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,spinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.mWebview=wv;
  setupWebview(wv);
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  String url=null;
  String targetUrl=getIntent().getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=getIntent().getStringExtra(""String_Node_Str"");
  if (url != null) {
    wv.loadUrl(url);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=(ExpandableListView)findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      LoginManager.getInstance().init(this);
      LoginManager.getInstance().addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || AppConfig.getInstance(this).showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    if (appConfig.hideTitleInActionBar) {
      getSupportActionBar().setDisplayOptions(0,ActionBar.DISPLAY_SHOW_TITLE);
    }
    if (appConfig.showLogoInActionBar) {
      getSupportActionBar().setDisplayShowCustomEnabled(true);
      ImageView iv=new ImageView(this);
      iv.setImageResource(R.drawable.ic_actionbar);
      getSupportActionBar().setCustomView(iv);
    }
  }
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  this.slidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  this.tabManager=new TabManager(this);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  hideTabs();
  this.actionManager=new ActionManager(this);
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    cachePath.mkdirs();
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    databasePath.mkdirs();
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.updateConfig();
    configUpdater.registerEvent();
    if (appConfig.pushNotifications) {
      this.pushManager=new PushManager(this);
      this.pushManager.register();
    }
    WebViewPool.getInstance().init(this);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(this);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      WebView.setWebContentsDebuggingEnabled(true);
    }
  }
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=(ProgressBar)findViewById(R.id.progress);
  LeanWebView wv=(LeanWebView)findViewById(R.id.webview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner spinner=(Spinner)findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,spinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.mWebview=wv;
  setupWebview(wv);
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  String url=null;
  String targetUrl=getIntent().getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=getIntent().getStringExtra(""String_Node_Str"");
  if (url != null) {
    wv.loadUrl(url);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=(ExpandableListView)findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      LoginManager.getInstance().init(this);
      LoginManager.getInstance().addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || AppConfig.getInstance(this).showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    if (appConfig.hideTitleInActionBar) {
      getSupportActionBar().setDisplayOptions(0,ActionBar.DISPLAY_SHOW_TITLE);
    }
    if (appConfig.showLogoInActionBar) {
      getSupportActionBar().setDisplayShowCustomEnabled(true);
      ImageView iv=new ImageView(this);
      iv.setImageResource(R.drawable.ic_actionbar);
      getSupportActionBar().setCustomView(iv);
    }
  }
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  this.slidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  hideTabs();
  this.actionManager=new ActionManager(this);
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
}",0.999312242090784
117020,"public void loadUrlAndJavascript(String url,String javascript){
  String currentUrl=this.mWebview.getUrl();
  if (url != null && currentUrl != null && url.equals(currentUrl)) {
    hideWebview();
    runJavascript(javascript);
    showWebview();
  }
 else {
    this.postLoadJavascript=javascript;
    loadUrl(url);
  }
}","public void loadUrlAndJavascript(String url,String javascript){
  String currentUrl=this.mWebview.getUrl();
  if (url != null && currentUrl != null && url.equals(currentUrl)) {
    hideWebview();
    runJavascript(javascript);
    showWebview();
  }
 else {
    this.postLoadJavascript=javascript;
    loadUrl(url);
  }
  if (this.tabManager != null)   this.tabManager.selectTab(url,javascript);
}",0.8941504178272981
117021,"public TabManager(MainActivity mainActivity){
  this.mainActivity=mainActivity;
  this.broadcastReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (intent.getAction() != null && intent.getAction().equals(AppConfig.PROCESSED_TAB_NAVIGATION_MESSAGE)) {
        currentMenuId=null;
        checkTabs(currentUrl);
      }
    }
  }
;
  LocalBroadcastManager.getInstance(this.mainActivity).registerReceiver(this.broadcastReceiver,new IntentFilter(AppConfig.PROCESSED_TAB_NAVIGATION_MESSAGE));
}","public TabManager(MainActivity mainActivity,ViewPager viewPager){
  this.mainActivity=mainActivity;
  this.viewPager=viewPager;
  this.broadcastReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (intent.getAction() != null && intent.getAction().equals(AppConfig.PROCESSED_TAB_NAVIGATION_MESSAGE)) {
        currentMenuId=null;
        checkTabs(currentUrl);
      }
    }
  }
;
  LocalBroadcastManager.getInstance(this.mainActivity).registerReceiver(this.broadcastReceiver,new IntentFilter(AppConfig.PROCESSED_TAB_NAVIGATION_MESSAGE));
}",0.9586919104991394
117022,"protected String doInBackground(WebviewInterceptParams... inputs){
  AppConfig appConfig=AppConfig.getInstance(this.context);
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    parsedUrl=inputs[0].url;
    webview=inputs[0].webview;
    boolean isReload=inputs[0].isReload;
    HttpURLConnection.setFollowRedirects(true);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (isCancelled())       return null;
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      if (isReload)       connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        if (this.leanWebviewClient != null && this.leanWebviewClient.shouldOverrideUrlLoadingNoIntercept(this.webview,parsedUrl.toString())) {
          leanWebviewClient.showWebViewImmediately();
          connection.disconnect();
          this.cancel(true);
          return null;
        }
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    finalUrl=connection.getURL();
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      is=new BufferedInputStream(connection.getInputStream());
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null)     is=new BufferedInputStream(connection.getInputStream());
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=LeanWebviewClient.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        double webViewWidth=webview.getWidth() / this.context.getResources().getDisplayMetrics().density;
        double viewportWidth=appConfig.forceViewportWidth;
        double scale=webViewWidth / viewportWidth;
        builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return newString;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}","protected String doInBackground(WebviewInterceptParams... inputs){
  AppConfig appConfig=AppConfig.getInstance(this.context);
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    parsedUrl=inputs[0].url;
    webview=inputs[0].webview;
    boolean isReload=inputs[0].isReload;
    HttpURLConnection.setFollowRedirects(true);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (isCancelled())       return null;
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      String customUserAgent=appConfig.userAgentForUrl(parsedUrl.toString());
      if (customUserAgent != null) {
        connection.setRequestProperty(""String_Node_Str"",customUserAgent);
      }
 else {
        connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      }
      if (isReload)       connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        if (this.leanWebviewClient != null && this.leanWebviewClient.shouldOverrideUrlLoadingNoIntercept(this.webview,parsedUrl.toString())) {
          leanWebviewClient.showWebViewImmediately();
          connection.disconnect();
          this.cancel(true);
          return null;
        }
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    finalUrl=connection.getURL();
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      is=new BufferedInputStream(connection.getInputStream());
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null)     is=new BufferedInputStream(connection.getInputStream());
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=LeanWebviewClient.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        double webViewWidth=webview.getWidth() / this.context.getResources().getDisplayMetrics().density;
        double viewportWidth=appConfig.forceViewportWidth;
        double scale=webViewWidth / viewportWidth;
        builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return newString;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}",0.9722616436588828
117023,"public static void runJavascriptOnWebView(WebView webview,String js){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
    webview.loadUrl(""String_Node_Str"" + js);
  }
 else {
    webview.evaluateJavascript(js,null);
  }
}","public static void runJavascriptOnWebView(WebView webview,String js){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
    if (webview instanceof LeanWebView) {
      ((LeanWebView)webview).loadUrlDirect(""String_Node_Str"" + js);
    }
 else {
      webview.loadUrl(""String_Node_Str"" + js);
    }
  }
 else {
    webview.evaluateJavascript(js,null);
  }
}",0.7558528428093646
117024,"@Override protected String doInBackground(String... urls){
  try {
    URL parsedUrl=new URL(urls[0]);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (connection != null)       connection.disconnect();
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(true);
      connection.setRequestProperty(""String_Node_Str"",AppConfig.getInstance(context).userAgent);
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(connection.getHeaderField(""String_Node_Str""));
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (!isCancelled() && wasRedirected && numRedirects < 10);
    String finalUrl=connection.getURL().toString();
    connection.disconnect();
    return finalUrl;
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
    return null;
  }
}","@Override protected String doInBackground(String... urls){
  try {
    URL parsedUrl=new URL(urls[0]);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (connection != null)       connection.disconnect();
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(true);
      connection.setRequestProperty(""String_Node_Str"",AppConfig.getInstance(context).userAgent);
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (!isCancelled() && wasRedirected && numRedirects < 10);
    String finalUrl=connection.getURL().toString();
    connection.disconnect();
    return finalUrl;
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
    return null;
  }
}",0.9955197132616488
117025,"@Override protected void onResume(){
  super.onResume();
  this.mWebview.onResume();
  retryFailedPage();
  this.connectivityReceiver=new ConnectivityChangeReceiver();
  registerReceiver(this.connectivityReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
}","@Override protected void onResume(){
  super.onResume();
  this.mWebview.onResume();
  retryFailedPage();
  this.connectivityReceiver=new ConnectivityChangeReceiver();
  registerReceiver(this.connectivityReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
  LoginManager.getInstance().checkLogin();
}",0.9272419627749576
117026,"void cancelSubmissionCheck(){
  if (handler != null)   handler.removeMessages(1);
}","void cancelSubmissionCheck(){
  if (checkAjaxHandler != null)   checkAjaxHandler.removeMessages(1);
}",0.9021739130434784
117027,"@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  mFormName=getIntent().getStringExtra(EXTRA_FORMNAME);
  if (mFormName.equals(""String_Node_Str"")) {
    mJson=appConfig.loginConfig;
    mIsLogin=true;
    mForgotPasswordUrl=AppConfig.optString(mJson,""String_Node_Str"");
  }
 else   if (mFormName.equals(""String_Node_Str"")) {
    mJson=appConfig.signupConfig;
  }
 else {
    Log.e(TAG,""String_Node_Str"" + mFormName);
  }
  mTitle=getIntent().getStringExtra(EXTRA_TITLE);
  if (mTitle == null)   mTitle=mJson.optString(""String_Node_Str"",appConfig.appName);
  mFormUrl=AppConfig.optString(mJson,""String_Node_Str"");
  mErrorUrl=AppConfig.optString(mJson,""String_Node_Str"");
  this.setTitle(mTitle);
  mHiddenWebView=new WebView(this);
  WebSettings webSettings=mHiddenWebView.getSettings();
  webSettings.setJavaScriptEnabled(true);
  webSettings.setSaveFormData(false);
  webSettings.setSavePassword(false);
  webSettings.setUserAgentString(appConfig.userAgent);
  mHiddenWebView.setWebViewClient(new WebFormWebViewClient());
  mHiddenWebView.setWebChromeClient(new WebFormWebChromeClient());
  mHiddenWebView.addJavascriptInterface(new jsBridge(),""String_Node_Str"");
  setContentView(R.layout.activity_web_form);
  mLoginFormView=findViewById(R.id.login_form);
  mLoginStatusView=findViewById(R.id.login_status);
  mSubmitButton=(Button)findViewById(R.id.submit_button);
  if (mIsLogin && AppConfig.getInstance(this).loginIsFirstPage) {
    mLoginStatusView.setVisibility(View.VISIBLE);
    mLoginFormView.setVisibility(View.GONE);
    LoginManager.getInstance().addObserver(this);
    LoginManager.getInstance().checkIfNotAlreadyChecking();
  }
  if (getSupportActionBar() != null) {
    if (appConfig.hideTitleInActionBar) {
      getSupportActionBar().setDisplayOptions(0,ActionBar.DISPLAY_SHOW_TITLE);
    }
  }
  processForm(mFormName);
  findViewById(R.id.submit_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      submit();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  super.onCreate(savedInstanceState);
  mFormName=getIntent().getStringExtra(EXTRA_FORMNAME);
  if (mFormName.equals(""String_Node_Str"")) {
    mJson=appConfig.loginConfig;
    mIsLogin=true;
    mForgotPasswordUrl=AppConfig.optString(mJson,""String_Node_Str"");
  }
 else   if (mFormName.equals(""String_Node_Str"")) {
    mJson=appConfig.signupConfig;
  }
 else {
    Log.e(TAG,""String_Node_Str"" + mFormName);
  }
  mTitle=getIntent().getStringExtra(EXTRA_TITLE);
  if (mTitle == null)   mTitle=mJson.optString(""String_Node_Str"",appConfig.appName);
  mFormUrl=AppConfig.optString(mJson,""String_Node_Str"");
  mErrorUrl=AppConfig.optString(mJson,""String_Node_Str"");
  this.setTitle(mTitle);
  mHiddenWebView=new WebView(this);
  WebSettings webSettings=mHiddenWebView.getSettings();
  webSettings.setJavaScriptEnabled(true);
  webSettings.setSaveFormData(false);
  webSettings.setSavePassword(false);
  webSettings.setUserAgentString(appConfig.userAgent);
  mHiddenWebView.setWebViewClient(new WebFormWebViewClient());
  mHiddenWebView.setWebChromeClient(new WebFormWebChromeClient());
  mHiddenWebView.addJavascriptInterface(new jsBridge(),""String_Node_Str"");
  setContentView(R.layout.activity_web_form);
  mLoginFormView=findViewById(R.id.login_form);
  mLoginStatusView=findViewById(R.id.login_status);
  mSubmitButton=(Button)findViewById(R.id.submit_button);
  if (mIsLogin && AppConfig.getInstance(this).loginIsFirstPage) {
    mLoginStatusView.setVisibility(View.VISIBLE);
    mLoginFormView.setVisibility(View.GONE);
    LoginManager.getInstance().addObserver(this);
    LoginManager.getInstance().checkIfNotAlreadyChecking();
  }
 else {
    if (getSupportActionBar() != null) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
  }
  if (getSupportActionBar() != null) {
    if (appConfig.hideTitleInActionBar) {
      getSupportActionBar().setDisplayOptions(0,ActionBar.DISPLAY_SHOW_TITLE);
    }
  }
  processForm(mFormName);
  findViewById(R.id.submit_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      submit();
    }
  }
);
}",0.9722991689750692
117028,"void scheduleSubmissionCheck(){
  handler=new Handler(){
    @Override public void handleMessage(    Message msg){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          WebFormActivity.this.checkSubmissionStatus();
        }
      }
);
    }
  }
;
  Message message=Message.obtain();
  message.what=1;
  handler.sendMessageDelayed(message,1000);
}","void scheduleSubmissionCheck(){
  checkAjaxHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          WebFormActivity.this.checkSubmissionStatus();
        }
      }
);
    }
  }
;
  Message message=Message.obtain();
  message.what=1;
  checkAjaxHandler.sendMessageDelayed(message,1000);
}",0.9714285714285714
117029,"public void submit(){
  try {
    if (validateForm()) {
      for (int i=0; i < fields.size(); i++) {
        JSONObject field=fields.get(i);
        String type=field.getString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str"")) {
          EditText textField=(EditText)mFieldRefs.get(i);
          runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(field.getString(""String_Node_Str"")),LeanUtils.jsWrapString(textField.getText().toString())));
          String selector2=AppConfig.optString(field,""String_Node_Str"");
          if (selector2 != null) {
            runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(selector2),LeanUtils.jsWrapString(textField.getText().toString())));
          }
        }
        if ((type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) && field.getBoolean(""String_Node_Str"")) {
          RadioGroup rg=(RadioGroup)mFieldRefs.get(i);
          for (int j=0; j < rg.getChildCount(); j++) {
            RadioButton rb=(RadioButton)rg.getChildAt(j);
            if (rb.isChecked()) {
              runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(field.getString(""String_Node_Str""))));
            }
          }
        }
      }
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(mLoginFormView.getWindowToken(),0);
      String submitButtonSelector=AppConfig.optString(mJson,""String_Node_Str"");
      if (submitButtonSelector != null && submitButtonSelector.length() > 0) {
        runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(submitButtonSelector)));
      }
 else {
        runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(mJson.getString(""String_Node_Str""))));
      }
      mSubmitted=true;
      mSubmitButton.setEnabled(false);
      if (mJson.optBoolean(""String_Node_Str"",false)) {
        scheduleSubmissionCheck();
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
  }
}","public void submit(){
  try {
    if (validateForm()) {
      for (int i=0; i < fields.size(); i++) {
        JSONObject field=fields.get(i);
        String type=field.getString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str"")) {
          EditText textField=(EditText)mFieldRefs.get(i);
          runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(field.getString(""String_Node_Str"")),LeanUtils.jsWrapString(textField.getText().toString())));
          String selector2=AppConfig.optString(field,""String_Node_Str"");
          if (selector2 != null) {
            runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(selector2),LeanUtils.jsWrapString(textField.getText().toString())));
          }
        }
        if ((type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) && field.getBoolean(""String_Node_Str"")) {
          RadioGroup rg=(RadioGroup)mFieldRefs.get(i);
          for (int j=0; j < rg.getChildCount(); j++) {
            RadioButton rb=(RadioButton)rg.getChildAt(j);
            if (rb.isChecked()) {
              runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(field.getString(""String_Node_Str""))));
            }
          }
        }
      }
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(mLoginFormView.getWindowToken(),0);
      String submitButtonSelector=AppConfig.optString(mJson,""String_Node_Str"");
      if (submitButtonSelector != null && submitButtonSelector.length() > 0) {
        runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(submitButtonSelector)));
      }
 else {
        runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(mJson.getString(""String_Node_Str""))));
      }
      mSubmitted=true;
      mSubmitButton.setEnabled(false);
      if (mJson.optBoolean(""String_Node_Str"",false)) {
        scheduleSubmissionCheck();
      }
      LoginManager.getInstance().addObserver(this);
      this.checkLoginStatusHandler=new Handler();
      this.checkLoginStatusHandler.postDelayed(new Runnable(){
        @Override public void run(){
          LoginManager.getInstance().checkLogin();
        }
      }
,5 * 1000);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
  }
}",0.938757844622376
117030,"public void update(Observable sender,Object data){
  if (sender instanceof LoginManager) {
    sender.deleteObserver(this);
    if (((LoginManager)sender).isLoggedIn()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",true);
      setResult(RESULT_OK,returnIntent);
      finish();
    }
 else {
      mHiddenWebView.loadUrl(this.mJson.optString(""String_Node_Str"",""String_Node_Str""));
      mLoginStatusView.setVisibility(View.GONE);
      mLoginFormView.setVisibility(View.VISIBLE);
    }
  }
}","public void update(Observable sender,Object data){
  if (sender instanceof LoginManager && mIsLogin) {
    sender.deleteObserver(this);
    if (((LoginManager)sender).isLoggedIn()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",true);
      String currentUrl=mHiddenWebView.getUrl();
      if (currentUrl != null && !currentUrl.equals(this.mJson.optString(""String_Node_Str"",""String_Node_Str""))) {
        returnIntent.putExtra(""String_Node_Str"",mHiddenWebView.getUrl());
      }
      setResult(RESULT_OK,returnIntent);
      finish();
    }
 else     if (AppConfig.getInstance(this).loginIsFirstPage) {
      mHiddenWebView.loadUrl(this.mJson.optString(""String_Node_Str"",""String_Node_Str""));
      mLoginStatusView.setVisibility(View.GONE);
      mLoginFormView.setVisibility(View.VISIBLE);
    }
  }
}",0.7750362844702468
117031,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.action_forgot_password) {
    InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    imm.hideSoftInputFromWindow(mLoginFormView.getWindowToken(),0);
    Intent returnIntent=new Intent();
    returnIntent.putExtra(""String_Node_Str"",mForgotPasswordUrl);
    returnIntent.putExtra(""String_Node_Str"",false);
    setResult(RESULT_OK,returnIntent);
    finish();
    return true;
  }
 else   return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.action_forgot_password) {
    InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    imm.hideSoftInputFromWindow(mLoginFormView.getWindowToken(),0);
    Intent returnIntent=new Intent();
    returnIntent.putExtra(""String_Node_Str"",mForgotPasswordUrl);
    returnIntent.putExtra(""String_Node_Str"",false);
    setResult(RESULT_OK,returnIntent);
    finish();
    return true;
  }
 else   if (item.getItemId() == android.R.id.home) {
    this.finish();
    return true;
  }
 else   return super.onOptionsItemSelected(item);
}",0.9226932668329176
117032,"protected String doInBackground(WebviewInterceptParams... inputs){
  AppConfig appConfig=AppConfig.getInstance(this.context);
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    parsedUrl=inputs[0].url;
    webview=inputs[0].webview;
    boolean isReload=inputs[0].isReload;
    HttpURLConnection.setFollowRedirects(true);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (isCancelled())       return null;
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      if (isReload)       connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(connection.getHeaderField(""String_Node_Str""));
        if (this.leanWebviewClient != null && this.leanWebviewClient.shouldOverrideUrlLoadingNoIntercept(this.webview,parsedUrl.toString())) {
          leanWebviewClient.showWebViewImmediately();
          connection.disconnect();
          this.cancel(true);
          return null;
        }
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    finalUrl=connection.getURL();
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      is=new BufferedInputStream(connection.getInputStream());
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null)     is=new BufferedInputStream(connection.getInputStream());
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=LeanWebviewClient.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        double webViewWidth=webview.getWidth() / this.context.getResources().getDisplayMetrics().density;
        double viewportWidth=appConfig.forceViewportWidth;
        double scale=webViewWidth / viewportWidth;
        builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return newString;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}","protected String doInBackground(WebviewInterceptParams... inputs){
  AppConfig appConfig=AppConfig.getInstance(this.context);
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    parsedUrl=inputs[0].url;
    webview=inputs[0].webview;
    boolean isReload=inputs[0].isReload;
    HttpURLConnection.setFollowRedirects(true);
    HttpURLConnection connection=null;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      if (isCancelled())       return null;
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      if (isReload)       connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        if (this.leanWebviewClient != null && this.leanWebviewClient.shouldOverrideUrlLoadingNoIntercept(this.webview,parsedUrl.toString())) {
          leanWebviewClient.showWebViewImmediately();
          connection.disconnect();
          this.cancel(true);
          return null;
        }
        numRedirects++;
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    finalUrl=connection.getURL();
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      is=new BufferedInputStream(connection.getInputStream());
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null)     is=new BufferedInputStream(connection.getInputStream());
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=LeanWebviewClient.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        double webViewWidth=webview.getWidth() / this.context.getResources().getDisplayMetrics().density;
        double viewportWidth=appConfig.forceViewportWidth;
        double scale=webViewWidth / viewportWidth;
        builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return newString;
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}",0.998671272920542
117033,"@Override public void onPageFinished(WebView view,String url){
  mainActivity.showWebview();
  UrlInspector.getInstance().inspectUrl(url);
  super.onPageFinished(view,url);
  Uri uri=Uri.parse(url);
  if (isInternalUri(uri)) {
    CookieSyncManager.getInstance().sync();
  }
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.loginDetectionUrl != null) {
    if (mVisitedLoginOrSignup) {
      mainActivity.updateMenu();
    }
    mVisitedLoginOrSignup=LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl) || LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl);
  }
  if (this.dynamicUpdateExec != null) {
    view.loadUrl(this.dynamicUpdateExec);
  }
  if (this.profilePickerExec != null) {
    view.loadUrl(this.profilePickerExec);
  }
  if (this.analyticsExec != null) {
    view.loadUrl(this.analyticsExec);
  }
  mainActivity.checkTabs(url);
  if (mainActivity.postLoadJavascript != null) {
    String js=mainActivity.postLoadJavascript;
    mainActivity.postLoadJavascript=null;
    mainActivity.runJavascript(js);
  }
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.FINISHED_LOADING_MESSAGE));
}","@Override public void onPageFinished(WebView view,String url){
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showWebview();
    }
  }
);
  UrlInspector.getInstance().inspectUrl(url);
  super.onPageFinished(view,url);
  Uri uri=Uri.parse(url);
  if (isInternalUri(uri)) {
    CookieSyncManager.getInstance().sync();
  }
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.loginDetectionUrl != null) {
    if (mVisitedLoginOrSignup) {
      mainActivity.updateMenu();
    }
    mVisitedLoginOrSignup=LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl) || LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl);
  }
  if (this.dynamicUpdateExec != null) {
    view.loadUrl(this.dynamicUpdateExec);
  }
  if (this.profilePickerExec != null) {
    view.loadUrl(this.profilePickerExec);
  }
  if (this.analyticsExec != null) {
    view.loadUrl(this.analyticsExec);
  }
  mainActivity.checkTabs(url);
  if (mainActivity.postLoadJavascript != null) {
    String js=mainActivity.postLoadJavascript;
    mainActivity.postLoadJavascript=null;
    mainActivity.runJavascript(js);
  }
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.FINISHED_LOADING_MESSAGE));
}",0.9604660840615896
117034,"@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  mainActivity.showWebview();
  if (!mainActivity.isConnected()) {
    ((LeanWebView)view).loadUrlDirect(""String_Node_Str"");
  }
}","@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showWebview();
    }
  }
);
  if (!mainActivity.isConnected()) {
    ((LeanWebView)view).loadUrlDirect(""String_Node_Str"");
  }
}",0.8312611012433393
117035,"@Override public void run(){
  mainActivity.showWebviewImmediately();
}","@Override public void run(){
  mainActivity.showWebview();
}",0.916030534351145
117036,"@Override public void onAnimationEnd(Animation animation){
}","@Override public void onAnimationEnd(Animation animation){
  mProgress.setVisibility(View.INVISIBLE);
}",0.7361963190184049
117037,"public void showWebview(){
  startedLoading=false;
  stopCheckingReadyStatus();
  final WebView wv=this.mWebview;
  if (wv.getVisibility() == View.VISIBLE) {
    mProgress.setVisibility(View.INVISIBLE);
    return;
  }
  Animation fadein=AnimationUtils.loadAnimation(this,android.R.anim.fade_in);
  Animation fadeout=AnimationUtils.loadAnimation(this,android.R.anim.fade_out);
  fadein.setDuration(300);
  fadeout.setDuration(60);
  fadein.setStartOffset(150);
  mProgress.setAlpha(1.0f);
  wv.setVisibility(View.VISIBLE);
  fadeout.setAnimationListener(new Animation.AnimationListener(){
    @Override public void onAnimationStart(    Animation animation){
    }
    @Override public void onAnimationEnd(    Animation animation){
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
  }
);
  mProgress.startAnimation(fadeout);
  wv.startAnimation(fadein);
}","public void showWebview(){
  startedLoading=false;
  stopCheckingReadyStatus();
  final WebView wv=this.mWebview;
  if (wv.getVisibility() == View.VISIBLE) {
    mProgress.setVisibility(View.INVISIBLE);
    return;
  }
  Animation fadein=AnimationUtils.loadAnimation(this,android.R.anim.fade_in);
  Animation fadeout=AnimationUtils.loadAnimation(this,android.R.anim.fade_out);
  fadein.setDuration(300);
  fadeout.setDuration(60);
  fadein.setStartOffset(150);
  mProgress.setAlpha(1.0f);
  wv.setVisibility(View.VISIBLE);
  fadeout.setAnimationListener(new Animation.AnimationListener(){
    @Override public void onAnimationStart(    Animation animation){
    }
    @Override public void onAnimationEnd(    Animation animation){
      mProgress.setVisibility(View.INVISIBLE);
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
  }
);
  mProgress.startAnimation(fadeout);
  wv.startAnimation(fadein);
}",0.9741900054914882
117038,"@Override public void loadUrl(String url){
  if (url.startsWith(""String_Node_Str""))   loadUrlDirect(url);
 else   if (mClient == null || !mClient.shouldOverrideUrlLoading(this,url)) {
    super.loadUrl(url);
  }
}","@Override public void loadUrl(String url){
  if (url.startsWith(""String_Node_Str""))   LeanUtils.runJavascriptOnWebView(this,url.substring(""String_Node_Str"".length()));
 else   if (mClient == null || !mClient.shouldOverrideUrlLoading(this,url)) {
    super.loadUrl(url);
  }
}",0.8073770491803278
117039,"@Override public void onPageFinished(WebView view,String url){
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showWebview();
    }
  }
);
  UrlInspector.getInstance().inspectUrl(url);
  super.onPageFinished(view,url);
  Uri uri=Uri.parse(url);
  if (isInternalUri(uri)) {
    CookieSyncManager.getInstance().sync();
  }
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.loginDetectionUrl != null) {
    if (mVisitedLoginOrSignup) {
      mainActivity.updateMenu();
    }
    mVisitedLoginOrSignup=LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl) || LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl);
  }
  if (this.dynamicUpdateExec != null) {
    view.loadUrl(this.dynamicUpdateExec);
  }
  if (this.profilePickerExec != null) {
    view.loadUrl(this.profilePickerExec);
  }
  if (this.analyticsExec != null) {
    view.loadUrl(this.analyticsExec);
  }
  mainActivity.checkTabs(url);
  if (mainActivity.postLoadJavascript != null) {
    String js=mainActivity.postLoadJavascript;
    mainActivity.postLoadJavascript=null;
    mainActivity.runJavascript(js);
  }
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.FINISHED_LOADING_MESSAGE));
}","@Override public void onPageFinished(WebView view,String url){
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showWebview();
    }
  }
);
  UrlInspector.getInstance().inspectUrl(url);
  super.onPageFinished(view,url);
  Uri uri=Uri.parse(url);
  if (isInternalUri(uri)) {
    CookieSyncManager.getInstance().sync();
  }
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.loginDetectionUrl != null) {
    if (mVisitedLoginOrSignup) {
      mainActivity.updateMenu();
    }
    mVisitedLoginOrSignup=LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl) || LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl);
  }
  if (this.dynamicUpdateExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.dynamicUpdateExec);
  }
  if (this.profilePickerExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.profilePickerExec);
  }
  if (this.analyticsExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.analyticsExec);
  }
  mainActivity.checkTabs(url);
  if (mainActivity.postLoadJavascript != null) {
    String js=mainActivity.postLoadJavascript;
    mainActivity.postLoadJavascript=null;
    mainActivity.runJavascript(js);
  }
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.FINISHED_LOADING_MESSAGE));
}",0.9475320637388264
117040,"public LeanWebviewClient(MainActivity activity){
  super();
  this.mainActivity=activity;
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.profilePickerJS != null) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(LeanUtils.jsWrapString(appConfig.profilePickerJS));
    sb.append(""String_Node_Str"");
    String encoded=LeanUtils.urlEncode(sb.toString());
    if (encoded != null)     this.profilePickerExec=""String_Node_Str"" + encoded;
  }
  if (appConfig.analytics) {
    String distribution=(String)Installation.getInfo(mainActivity).get(""String_Node_Str"");
    int idsite;
    if (distribution != null && (distribution.equals(""String_Node_Str"") || distribution.equals(""String_Node_Str"")))     idsite=appConfig.idsite_prod;
 else     idsite=appConfig.idsite_test;
    this.analyticsExec=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",idsite);
  }
  if (appConfig.updateConfigJS != null) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(LeanUtils.jsWrapString(appConfig.updateConfigJS));
    sb.append(""String_Node_Str"");
    String encoded=LeanUtils.urlEncode(sb.toString());
    if (encoded != null)     this.dynamicUpdateExec=""String_Node_Str"" + encoded;
  }
}","public LeanWebviewClient(MainActivity activity){
  super();
  this.mainActivity=activity;
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.profilePickerJS != null) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(LeanUtils.jsWrapString(appConfig.profilePickerJS));
    sb.append(""String_Node_Str"");
    this.profilePickerExec=sb.toString();
  }
  if (appConfig.analytics) {
    String distribution=(String)Installation.getInfo(mainActivity).get(""String_Node_Str"");
    int idsite;
    if (distribution != null && (distribution.equals(""String_Node_Str"") || distribution.equals(""String_Node_Str"")))     idsite=appConfig.idsite_prod;
 else     idsite=appConfig.idsite_test;
    this.analyticsExec=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",idsite);
  }
  if (appConfig.updateConfigJS != null) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(LeanUtils.jsWrapString(appConfig.updateConfigJS));
    sb.append(""String_Node_Str"");
    this.dynamicUpdateExec=sb.toString();
  }
}",0.3637042569081404
117041,"public void runJavascript(String javascript){
  if (javascript == null)   return;
  this.mWebview.loadUrl(""String_Node_Str"" + javascript);
}","public void runJavascript(String javascript){
  if (javascript == null)   return;
  LeanUtils.runJavascriptOnWebView(this.mWebview,javascript);
}",0.7789473684210526
117042,"public void checkReadyStatus(){
  this.mWebview.loadUrl(""String_Node_Str"");
}","public void checkReadyStatus(){
  LeanUtils.runJavascriptOnWebView(this.mWebview,""String_Node_Str"");
}",0.7597765363128491
117043,"@Override public void onPageFinished(WebView view,String url){
  super.onPageFinished(view,url);
  UrlInspector.getInstance().inspectUrl(url);
  CookieSyncManager.getInstance().sync();
  view.loadUrl(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  boolean success=false;
  if (!LeanUtils.urlsMatchOnPath(url,mFormUrl) && !LeanUtils.urlsMatchOnPath(url,mErrorUrl) && !LeanUtils.urlsMatchOnPath(url,mForgotPasswordUrl)) {
    success=true;
  }
  if (mSubmitted) {
    if (LeanUtils.urlsMatchOnPath(url,mErrorUrl)) {
      mSubmitted=false;
      mSubmitButton.setEnabled(true);
      String errorSelector=mJson.optString(""String_Node_Str"",""String_Node_Str"");
      if (errorSelector.length() > 0) {
        runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(errorSelector),LeanUtils.jsWrapString(errorSelector)));
      }
 else {
        Toast.makeText(WebFormActivity.this,R.string.form_error,Toast.LENGTH_LONG).show();
      }
      mHiddenWebView.loadUrl(mFormUrl);
    }
 else     success=true;
  }
  if (success) {
    cancelSubmissionCheck();
    mSubmitted=false;
    Intent returnIntent=new Intent();
    returnIntent.putExtra(""String_Node_Str"",url);
    returnIntent.putExtra(""String_Node_Str"",true);
    setResult(RESULT_OK,returnIntent);
    finish();
  }
}","@Override public void onPageFinished(WebView view,String url){
  super.onPageFinished(view,url);
  UrlInspector.getInstance().inspectUrl(url);
  CookieSyncManager.getInstance().sync();
  LeanUtils.runJavascriptOnWebView(view,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  boolean success=false;
  if (!LeanUtils.urlsMatchOnPath(url,mFormUrl) && !LeanUtils.urlsMatchOnPath(url,mErrorUrl) && !LeanUtils.urlsMatchOnPath(url,mForgotPasswordUrl)) {
    success=true;
  }
  if (mSubmitted) {
    if (LeanUtils.urlsMatchOnPath(url,mErrorUrl)) {
      mSubmitted=false;
      mSubmitButton.setEnabled(true);
      String errorSelector=mJson.optString(""String_Node_Str"",""String_Node_Str"");
      if (errorSelector.length() > 0) {
        runJavascript(String.format(""String_Node_Str"",LeanUtils.jsWrapString(errorSelector),LeanUtils.jsWrapString(errorSelector)));
      }
 else {
        Toast.makeText(WebFormActivity.this,R.string.form_error,Toast.LENGTH_LONG).show();
      }
      mHiddenWebView.loadUrl(mFormUrl);
    }
 else     success=true;
  }
  if (success) {
    cancelSubmissionCheck();
    mSubmitted=false;
    Intent returnIntent=new Intent();
    returnIntent.putExtra(""String_Node_Str"",url);
    returnIntent.putExtra(""String_Node_Str"",true);
    setResult(RESULT_OK,returnIntent);
    finish();
  }
}",0.9842778793418648
117044,"private void runJavascript(String js){
  js=js.replace(""String_Node_Str"",""String_Node_Str"");
  mHiddenWebView.loadUrl(""String_Node_Str"" + js);
}","private void runJavascript(String js){
  LeanUtils.runJavascriptOnWebView(this.mHiddenWebView,js);
}",0.5901639344262295
117045,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (data != null && data.getBooleanExtra(""String_Node_Str"",false))   finish();
  if (requestCode == REQUEST_WEBFORM && resultCode == RESULT_OK) {
    String url=data.getStringExtra(""String_Node_Str"");
    if (url != null)     globalWebViews.peek().loadUrl(url);
 else {
      globalWebViews.peek().setCheckLoginSignup(false);
      globalWebViews.peek().loadUrl(AppConfig.getInstance(this).initialUrl);
    }
    updateMenu(data.getBooleanExtra(""String_Node_Str"",false));
  }
  if (requestCode == REQUEST_WEB_ACTIVITY && resultCode == RESULT_OK) {
    String url=data.getStringExtra(""String_Node_Str"");
    if (url != null) {
      int urlLevel=data.getIntExtra(""String_Node_Str"",-1);
      if (urlLevel == -1 || parentUrlLevel == -1 || urlLevel > parentUrlLevel) {
        loadUrl(url);
      }
 else {
        setResult(RESULT_OK,data);
        finish();
      }
    }
  }
  if (requestCode == REQUEST_SELECT_PICTURE) {
    if (null == mUploadMessage)     return;
    if (resultCode == RESULT_OK) {
      boolean isCamera;
      if (data == null)       isCamera=true;
 else {
        final String action=data.getAction();
        if (action == null)         isCamera=false;
 else         isCamera=action.equals(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
      }
      Uri selectedImageUri;
      if (isCamera)       selectedImageUri=cameraFileUri;
 else       selectedImageUri=data == null ? null : data.getData();
      try {
        Intent cropIntent=new Intent(""String_Node_Str"");
        cropIntent.setDataAndType(selectedImageUri,""String_Node_Str"");
        cropIntent.putExtra(""String_Node_Str"",1);
        cropIntent.putExtra(""String_Node_Str"",1);
        String timeStamp=new SimpleDateFormat(""String_Node_Str"",Locale.US).format(new Date());
        File outFile=new File(getExternalFilesDir(null),""String_Node_Str"" + timeStamp + ""String_Node_Str"");
        cropFileUri=Uri.fromFile(outFile);
        cropIntent.putExtra(MediaStore.EXTRA_OUTPUT,cropFileUri);
        startActivityForResult(cropIntent,REQUEST_CROP_PICTURE);
        Toast.makeText(getApplicationContext(),getString(R.string.crop_square),Toast.LENGTH_SHORT).show();
      }
 catch (      ActivityNotFoundException e) {
        mUploadMessage.onReceiveValue(selectedImageUri);
        mUploadMessage=null;
      }
    }
 else {
      mUploadMessage.onReceiveValue(null);
      mUploadMessage=null;
    }
  }
  if (requestCode == REQUEST_CROP_PICTURE) {
    if (resultCode == RESULT_OK)     mUploadMessage.onReceiveValue(cropFileUri);
 else     mUploadMessage.onReceiveValue(null);
    mUploadMessage=null;
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (data != null && data.getBooleanExtra(""String_Node_Str"",false))   finish();
  if (requestCode == REQUEST_WEBFORM && resultCode == RESULT_OK) {
    String url=data.getStringExtra(""String_Node_Str"");
    if (url != null)     globalWebViews.peek().loadUrl(url);
 else {
      globalWebViews.peek().setCheckLoginSignup(false);
      globalWebViews.peek().loadUrl(AppConfig.getInstance(this).initialUrl);
    }
    if (AppConfig.getInstance(this).showNavigationMenu) {
      updateMenu(data.getBooleanExtra(""String_Node_Str"",false));
    }
  }
  if (requestCode == REQUEST_WEB_ACTIVITY && resultCode == RESULT_OK) {
    String url=data.getStringExtra(""String_Node_Str"");
    if (url != null) {
      int urlLevel=data.getIntExtra(""String_Node_Str"",-1);
      if (urlLevel == -1 || parentUrlLevel == -1 || urlLevel > parentUrlLevel) {
        loadUrl(url);
      }
 else {
        setResult(RESULT_OK,data);
        finish();
      }
    }
  }
  if (requestCode == REQUEST_SELECT_PICTURE) {
    if (null == mUploadMessage)     return;
    if (resultCode == RESULT_OK) {
      boolean isCamera;
      if (data == null)       isCamera=true;
 else {
        final String action=data.getAction();
        if (action == null)         isCamera=false;
 else         isCamera=action.equals(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
      }
      Uri selectedImageUri;
      if (isCamera)       selectedImageUri=cameraFileUri;
 else       selectedImageUri=data == null ? null : data.getData();
      try {
        Intent cropIntent=new Intent(""String_Node_Str"");
        cropIntent.setDataAndType(selectedImageUri,""String_Node_Str"");
        cropIntent.putExtra(""String_Node_Str"",1);
        cropIntent.putExtra(""String_Node_Str"",1);
        String timeStamp=new SimpleDateFormat(""String_Node_Str"",Locale.US).format(new Date());
        File outFile=new File(getExternalFilesDir(null),""String_Node_Str"" + timeStamp + ""String_Node_Str"");
        cropFileUri=Uri.fromFile(outFile);
        cropIntent.putExtra(MediaStore.EXTRA_OUTPUT,cropFileUri);
        startActivityForResult(cropIntent,REQUEST_CROP_PICTURE);
        Toast.makeText(getApplicationContext(),getString(R.string.crop_square),Toast.LENGTH_SHORT).show();
      }
 catch (      ActivityNotFoundException e) {
        mUploadMessage.onReceiveValue(selectedImageUri);
        mUploadMessage=null;
      }
    }
 else {
      mUploadMessage.onReceiveValue(null);
      mUploadMessage=null;
    }
  }
  if (requestCode == REQUEST_CROP_PICTURE) {
    if (resultCode == RESULT_OK)     mUploadMessage.onReceiveValue(cropFileUri);
 else     mUploadMessage.onReceiveValue(null);
    mUploadMessage=null;
  }
}",0.9878453038674032
117046,"private AppConfig(Context context){
  this.context=context;
  InputStream is=null;
  InputStream jsonIs=null;
  try {
    if (fileForOTAconfig().exists()) {
      InputStream otaIS=null;
      try {
        otaIS=new BufferedInputStream(new FileInputStream(fileForOTAconfig()));
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        IOUtils.copy(otaIS,baos);
        baos.close();
        this.json=new JSONObject(baos.toString(""String_Node_Str""));
      }
 catch (      Exception e) {
        Log.e(TAG,e.getMessage(),e);
        IOUtils.close(otaIS);
      }
    }
    if (this.json == null) {
      jsonIs=context.getAssets().open(""String_Node_Str"");
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      IOUtils.copy(jsonIs,baos);
      IOUtils.close(baos);
      this.json=new JSONObject(baos.toString(""String_Node_Str""));
    }
    this.menus=new HashMap<String,JSONArray>();
    this.loginDetectRegexes=new ArrayList<Pattern>();
    this.loginDetectLocations=new ArrayList<JSONObject>();
    this.navStructureLevelsRegex=new ArrayList<Pattern>();
    this.navStructureLevels=new ArrayList<Integer>();
    this.navTitles=new ArrayList<HashMap<String,Object>>();
    this.regexInternalExternal=new ArrayList<Pattern>();
    this.regexIsInternal=new ArrayList<Boolean>();
    JSONObject general=this.json.optJSONObject(""String_Node_Str"");
    if (general != null) {
      this.initialUrl=optString(general,""String_Node_Str"");
      initialHost=Uri.parse(this.initialUrl).getHost();
      if (initialHost.startsWith(""String_Node_Str"")) {
        initialHost=initialHost.substring(""String_Node_Str"".length());
      }
      this.appName=optString(general,""String_Node_Str"");
      String userAgentAdd=optString(general,""String_Node_Str"");
      if (userAgentAdd == null)       userAgentAdd=""String_Node_Str"";
      WebView wv=new WebView(context);
      StringBuilder sb=new StringBuilder(wv.getSettings().getUserAgentString());
      sb.append(""String_Node_Str"");
      sb.append(userAgentAdd);
      this.userAgent=sb.toString();
      this.publicKey=optString(general,""String_Node_Str"");
    }
    JSONObject navigation=this.json.optJSONObject(""String_Node_Str"");
    if (navigation != null) {
      int numActiveMenus=0;
      JSONObject sidebarNav=navigation.optJSONObject(""String_Node_Str"");
      if (sidebarNav != null) {
        JSONArray menus=sidebarNav.optJSONArray(""String_Node_Str"");
        if (menus != null) {
          for (int i=0; i < menus.length(); i++) {
            JSONObject menu=menus.optJSONObject(i);
            if (menu != null) {
              if (!menu.optBoolean(""String_Node_Str"",false)) {
                continue;
              }
              numActiveMenus++;
              String name=optString(menu,""String_Node_Str"");
              JSONArray items=menu.optJSONArray(""String_Node_Str"");
              if (name != null && items != null) {
                this.menus.put(name,items);
                if (name.equals(""String_Node_Str"")) {
                  this.showNavigationMenu=true;
                }
              }
            }
          }
        }
        this.userIdRegex=optString(sidebarNav,""String_Node_Str"");
        JSONObject menuSelectionConfig=sidebarNav.optJSONObject(""String_Node_Str"");
        if (numActiveMenus > 1 && menuSelectionConfig != null) {
          this.loginDetectionUrl=optString(menuSelectionConfig,""String_Node_Str"");
          JSONArray redirectLocations=menuSelectionConfig.optJSONArray(""String_Node_Str"");
          if (redirectLocations != null) {
            for (int i=0; i < redirectLocations.length(); i++) {
              JSONObject entry=redirectLocations.optJSONObject(i);
              if (entry != null) {
                String regex=optString(entry,""String_Node_Str"");
                if (regex != null) {
                  this.loginDetectRegexes.add(Pattern.compile(regex));
                  this.loginDetectLocations.add(entry);
                }
              }
            }
          }
        }
      }
      JSONObject navigationLevels=navigation.optJSONObject(""String_Node_Str"");
      if (navigationLevels != null && navigationLevels.optBoolean(""String_Node_Str"",false)) {
        JSONArray urlLevels=navigationLevels.optJSONArray(""String_Node_Str"");
        if (urlLevels != null) {
          for (int i=0; i < urlLevels.length(); i++) {
            JSONObject entry=urlLevels.optJSONObject(i);
            if (entry != null) {
              String regex=optString(entry,""String_Node_Str"");
              int level=entry.optInt(""String_Node_Str"",-1);
              if (regex != null && level != -1) {
                this.navStructureLevelsRegex.add(Pattern.compile(regex));
                this.navStructureLevels.add(level);
              }
            }
          }
        }
      }
      JSONObject navigationTitles=navigation.optJSONObject(""String_Node_Str"");
      if (navigationTitles != null && navigationTitles.optBoolean(""String_Node_Str"",false)) {
        JSONArray titles=navigationTitles.optJSONArray(""String_Node_Str"");
        if (titles != null) {
          for (int i=0; i < titles.length(); i++) {
            JSONObject entry=titles.optJSONObject(i);
            if (entry != null) {
              String regex=optString(entry,""String_Node_Str"");
              if (regex != null) {
                try {
                  HashMap<String,Object> toAdd=new HashMap<String,Object>();
                  Pattern pattern=Pattern.compile(entry.getString(""String_Node_Str""));
                  toAdd.put(""String_Node_Str"",pattern);
                  String title=optString(entry,""String_Node_Str"");
                  String urlRegex=optString(entry,""String_Node_Str"");
                  int urlChompWords=entry.optInt(""String_Node_Str"",-1);
                  if (title != null) {
                    toAdd.put(""String_Node_Str"",title);
                  }
                  if (urlRegex != null) {
                    Pattern urlRegexPattern=Pattern.compile(urlRegex);
                    toAdd.put(""String_Node_Str"",urlRegexPattern);
                  }
                  if (urlChompWords != -1) {
                    toAdd.put(""String_Node_Str"",urlChompWords);
                  }
                  this.navTitles.add(toAdd);
                }
 catch (                PatternSyntaxException e) {
                  Log.e(TAG,e.getMessage(),e);
                }
              }
            }
          }
        }
      }
      this.profilePickerJS=optString(navigation,""String_Node_Str"");
      JSONObject regexInternalExternal=navigation.optJSONObject(""String_Node_Str"");
      if (regexInternalExternal != null) {
        JSONArray rules=regexInternalExternal.optJSONArray(""String_Node_Str"");
        if (rules != null) {
          for (int i=0; i < rules.length(); i++) {
            JSONObject entry=rules.optJSONObject(i);
            if (entry != null && entry.has(""String_Node_Str"") && entry.has(""String_Node_Str"")) {
              String regex=optString(entry,""String_Node_Str"");
              boolean internal=entry.optBoolean(""String_Node_Str"",true);
              if (regex != null) {
                this.regexInternalExternal.add(Pattern.compile(regex));
                this.regexIsInternal.add(internal);
              }
            }
          }
        }
      }
    }
    JSONObject styling=this.json.optJSONObject(""String_Node_Str"");
    this.customCss=optString(styling,""String_Node_Str"");
    this.forceViewportWidth=styling.optDouble(""String_Node_Str"",Double.NaN);
    this.interceptHtml=this.customCss != null || !Double.isNaN(this.forceViewportWidth);
    this.showActionBar=styling.optBoolean(""String_Node_Str"",true);
    this.androidTheme=optString(styling,""String_Node_Str"");
    this.interactiveDelay=styling.optDouble(""String_Node_Str"",Double.NaN);
    JSONObject forms=this.json.optJSONObject(""String_Node_Str"");
    if (forms != null) {
      JSONObject search=forms.optJSONObject(""String_Node_Str"");
      if (search != null && search.optBoolean(""String_Node_Str"",false)) {
        this.searchTemplateUrl=optString(search,""String_Node_Str"");
      }
      JSONObject loginConfig=forms.optJSONObject(""String_Node_Str"");
      if (loginConfig != null && loginConfig.optBoolean(""String_Node_Str"",false)) {
        this.loginConfig=loginConfig;
        this.loginUrl=optString(loginConfig,""String_Node_Str"");
        this.loginIsFirstPage=loginConfig.optBoolean(""String_Node_Str"",false);
      }
      JSONObject signupConfig=forms.optJSONObject(""String_Node_Str"");
      if (signupConfig != null && signupConfig.optBoolean(""String_Node_Str"",false)) {
        this.signupConfig=signupConfig;
        this.signupUrl=optString(signupConfig,""String_Node_Str"");
      }
    }
    JSONObject permissions=this.json.optJSONObject(""String_Node_Str"");
    if (permissions != null) {
      this.usesGeolocation=permissions.optBoolean(""String_Node_Str"",false);
    }
    this.allowZoom=this.json.optBoolean(""String_Node_Str"",true);
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(jsonIs);
  }
}","private AppConfig(Context context){
  this.context=context;
  InputStream is=null;
  InputStream jsonIs=null;
  try {
    if (fileForOTAconfig().exists()) {
      InputStream otaIS=null;
      try {
        otaIS=new BufferedInputStream(new FileInputStream(fileForOTAconfig()));
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        IOUtils.copy(otaIS,baos);
        baos.close();
        this.json=new JSONObject(baos.toString(""String_Node_Str""));
      }
 catch (      Exception e) {
        Log.e(TAG,e.getMessage(),e);
        IOUtils.close(otaIS);
      }
    }
    if (this.json == null) {
      jsonIs=context.getAssets().open(""String_Node_Str"");
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      IOUtils.copy(jsonIs,baos);
      IOUtils.close(baos);
      this.json=new JSONObject(baos.toString(""String_Node_Str""));
    }
    this.menus=new HashMap<String,JSONArray>();
    this.loginDetectRegexes=new ArrayList<Pattern>();
    this.loginDetectLocations=new ArrayList<JSONObject>();
    this.navStructureLevelsRegex=new ArrayList<Pattern>();
    this.navStructureLevels=new ArrayList<Integer>();
    this.navTitles=new ArrayList<HashMap<String,Object>>();
    this.regexInternalExternal=new ArrayList<Pattern>();
    this.regexIsInternal=new ArrayList<Boolean>();
    JSONObject general=this.json.optJSONObject(""String_Node_Str"");
    if (general != null) {
      this.initialUrl=optString(general,""String_Node_Str"");
      initialHost=Uri.parse(this.initialUrl).getHost();
      if (initialHost.startsWith(""String_Node_Str"")) {
        initialHost=initialHost.substring(""String_Node_Str"".length());
      }
      this.appName=optString(general,""String_Node_Str"");
      String userAgentAdd=optString(general,""String_Node_Str"");
      if (userAgentAdd == null)       userAgentAdd=""String_Node_Str"";
      WebView wv=new WebView(context);
      StringBuilder sb=new StringBuilder(wv.getSettings().getUserAgentString());
      sb.append(""String_Node_Str"");
      sb.append(userAgentAdd);
      this.userAgent=sb.toString();
      this.publicKey=optString(general,""String_Node_Str"");
    }
    JSONObject forms=this.json.optJSONObject(""String_Node_Str"");
    if (forms != null) {
      JSONObject search=forms.optJSONObject(""String_Node_Str"");
      if (search != null && search.optBoolean(""String_Node_Str"",false)) {
        this.searchTemplateUrl=optString(search,""String_Node_Str"");
      }
      JSONObject loginConfig=forms.optJSONObject(""String_Node_Str"");
      if (loginConfig != null && loginConfig.optBoolean(""String_Node_Str"",false)) {
        this.loginConfig=loginConfig;
        this.loginUrl=optString(loginConfig,""String_Node_Str"");
        this.loginIsFirstPage=loginConfig.optBoolean(""String_Node_Str"",false);
      }
      JSONObject signupConfig=forms.optJSONObject(""String_Node_Str"");
      if (signupConfig != null && signupConfig.optBoolean(""String_Node_Str"",false)) {
        this.signupConfig=signupConfig;
        this.signupUrl=optString(signupConfig,""String_Node_Str"");
      }
    }
    JSONObject navigation=this.json.optJSONObject(""String_Node_Str"");
    if (navigation != null) {
      int numActiveMenus=0;
      JSONObject sidebarNav=navigation.optJSONObject(""String_Node_Str"");
      if (sidebarNav != null) {
        JSONArray menus=sidebarNav.optJSONArray(""String_Node_Str"");
        if (menus != null) {
          for (int i=0; i < menus.length(); i++) {
            JSONObject menu=menus.optJSONObject(i);
            if (menu != null) {
              if (!menu.optBoolean(""String_Node_Str"",false)) {
                continue;
              }
              numActiveMenus++;
              String name=optString(menu,""String_Node_Str"");
              JSONArray items=menu.optJSONArray(""String_Node_Str"");
              if (name != null && items != null) {
                this.menus.put(name,items);
                if (name.equals(""String_Node_Str"")) {
                  this.showNavigationMenu=true;
                }
              }
            }
          }
        }
        this.userIdRegex=optString(sidebarNav,""String_Node_Str"");
        JSONObject menuSelectionConfig=sidebarNav.optJSONObject(""String_Node_Str"");
        if ((numActiveMenus > 1 || this.loginIsFirstPage) && menuSelectionConfig != null) {
          this.loginDetectionUrl=optString(menuSelectionConfig,""String_Node_Str"");
          JSONArray redirectLocations=menuSelectionConfig.optJSONArray(""String_Node_Str"");
          if (redirectLocations != null) {
            for (int i=0; i < redirectLocations.length(); i++) {
              JSONObject entry=redirectLocations.optJSONObject(i);
              if (entry != null) {
                String regex=optString(entry,""String_Node_Str"");
                if (regex != null) {
                  this.loginDetectRegexes.add(Pattern.compile(regex));
                  this.loginDetectLocations.add(entry);
                }
              }
            }
          }
        }
      }
      JSONObject navigationLevels=navigation.optJSONObject(""String_Node_Str"");
      if (navigationLevels != null && navigationLevels.optBoolean(""String_Node_Str"",false)) {
        JSONArray urlLevels=navigationLevels.optJSONArray(""String_Node_Str"");
        if (urlLevels != null) {
          for (int i=0; i < urlLevels.length(); i++) {
            JSONObject entry=urlLevels.optJSONObject(i);
            if (entry != null) {
              String regex=optString(entry,""String_Node_Str"");
              int level=entry.optInt(""String_Node_Str"",-1);
              if (regex != null && level != -1) {
                this.navStructureLevelsRegex.add(Pattern.compile(regex));
                this.navStructureLevels.add(level);
              }
            }
          }
        }
      }
      JSONObject navigationTitles=navigation.optJSONObject(""String_Node_Str"");
      if (navigationTitles != null && navigationTitles.optBoolean(""String_Node_Str"",false)) {
        JSONArray titles=navigationTitles.optJSONArray(""String_Node_Str"");
        if (titles != null) {
          for (int i=0; i < titles.length(); i++) {
            JSONObject entry=titles.optJSONObject(i);
            if (entry != null) {
              String regex=optString(entry,""String_Node_Str"");
              if (regex != null) {
                try {
                  HashMap<String,Object> toAdd=new HashMap<String,Object>();
                  Pattern pattern=Pattern.compile(entry.getString(""String_Node_Str""));
                  toAdd.put(""String_Node_Str"",pattern);
                  String title=optString(entry,""String_Node_Str"");
                  String urlRegex=optString(entry,""String_Node_Str"");
                  int urlChompWords=entry.optInt(""String_Node_Str"",-1);
                  if (title != null) {
                    toAdd.put(""String_Node_Str"",title);
                  }
                  if (urlRegex != null) {
                    Pattern urlRegexPattern=Pattern.compile(urlRegex);
                    toAdd.put(""String_Node_Str"",urlRegexPattern);
                  }
                  if (urlChompWords != -1) {
                    toAdd.put(""String_Node_Str"",urlChompWords);
                  }
                  this.navTitles.add(toAdd);
                }
 catch (                PatternSyntaxException e) {
                  Log.e(TAG,e.getMessage(),e);
                }
              }
            }
          }
        }
      }
      this.profilePickerJS=optString(navigation,""String_Node_Str"");
      JSONObject regexInternalExternal=navigation.optJSONObject(""String_Node_Str"");
      if (regexInternalExternal != null) {
        JSONArray rules=regexInternalExternal.optJSONArray(""String_Node_Str"");
        if (rules != null) {
          for (int i=0; i < rules.length(); i++) {
            JSONObject entry=rules.optJSONObject(i);
            if (entry != null && entry.has(""String_Node_Str"") && entry.has(""String_Node_Str"")) {
              String regex=optString(entry,""String_Node_Str"");
              boolean internal=entry.optBoolean(""String_Node_Str"",true);
              if (regex != null) {
                this.regexInternalExternal.add(Pattern.compile(regex));
                this.regexIsInternal.add(internal);
              }
            }
          }
        }
      }
    }
    JSONObject styling=this.json.optJSONObject(""String_Node_Str"");
    this.customCss=optString(styling,""String_Node_Str"");
    this.forceViewportWidth=styling.optDouble(""String_Node_Str"",Double.NaN);
    this.interceptHtml=this.customCss != null || !Double.isNaN(this.forceViewportWidth);
    this.showActionBar=styling.optBoolean(""String_Node_Str"",true);
    this.androidTheme=optString(styling,""String_Node_Str"");
    this.interactiveDelay=styling.optDouble(""String_Node_Str"",Double.NaN);
    JSONObject permissions=this.json.optJSONObject(""String_Node_Str"");
    if (permissions != null) {
      this.usesGeolocation=permissions.optBoolean(""String_Node_Str"",false);
    }
    this.allowZoom=this.json.optBoolean(""String_Node_Str"",true);
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(jsonIs);
  }
}",0.8966158219889563
117047,"@Override protected void onPostExecute(String finalUrl){
  UrlInspector.getInstance().inspectUrl(finalUrl);
  if (finalUrl == null) {
    loggedIn=false;
    loginStatus=""String_Node_Str"";
    setChanged();
    notifyObservers();
  }
  AppConfig appConfig=AppConfig.getInstance(LoginManager.this.context);
  List<Pattern> regexes=appConfig.loginDetectRegexes;
  for (int i=0; i < regexes.size(); i++) {
    Pattern regex=regexes.get(i);
    if (regex.matcher(finalUrl).matches()) {
      JSONObject entry=appConfig.loginDetectLocations.get(i);
      loggedIn=entry.optBoolean(""String_Node_Str"",false);
      loginStatus=AppConfig.optString(entry,""String_Node_Str"");
      if (loginStatus == null)       loginStatus=loggedIn ? ""String_Node_Str"" : ""String_Node_Str"";
      setChanged();
      notifyObservers();
      break;
    }
  }
}","@Override protected void onPostExecute(String finalUrl){
  UrlInspector.getInstance().inspectUrl(finalUrl);
  if (finalUrl == null) {
    loggedIn=false;
    loginStatus=""String_Node_Str"";
    setChanged();
    notifyObservers();
    return;
  }
  AppConfig appConfig=AppConfig.getInstance(LoginManager.this.context);
  List<Pattern> regexes=appConfig.loginDetectRegexes;
  for (int i=0; i < regexes.size(); i++) {
    Pattern regex=regexes.get(i);
    if (regex.matcher(finalUrl).matches()) {
      JSONObject entry=appConfig.loginDetectLocations.get(i);
      loggedIn=entry.optBoolean(""String_Node_Str"",false);
      loginStatus=AppConfig.optString(entry,""String_Node_Str"");
      if (loginStatus == null)       loginStatus=loggedIn ? ""String_Node_Str"" : ""String_Node_Str"";
      setChanged();
      notifyObservers();
      break;
    }
  }
}",0.9928571428571428
117048,"@Nullable private static Annotation createAnnotation(@NotNull AnnotationHolder holder,@NotNull PsiFile file,@NotNull Document document,@NotNull Result.Warn warn,@NotNull HighlightSeverity severity,@Nullable TextAttributes forcedTextAttributes,boolean showErrorOnWholeLine){
  int line=warn.line - 1;
  int column=warn.column - 1;
  if (line < 0 || line >= document.getLineCount()) {
    return null;
  }
  int lineEndOffset=document.getLineEndOffset(line);
  int lineStartOffset=document.getLineStartOffset(line);
  int errorLineStartOffset=StringUtil.lineColToOffset(document.getCharsSequence(),line,column);
  if (errorLineStartOffset == -1) {
    return null;
  }
  TextRange range;
  if (showErrorOnWholeLine) {
    range=new TextRange(lineStartOffset,lineEndOffset);
  }
 else {
    PsiElement lit=PsiUtil.getElementAtOffset(file,errorLineStartOffset);
    range=lit.getTextRange();
  }
  Annotation annotation=JSLinterUtil.createAnnotation(holder,severity,forcedTextAttributes,range,MESSAGE_PREFIX + warn.message.trim() + ""String_Node_Str""+ warn.rule+ ')');
  if (annotation != null) {
    annotation.setAfterEndOfLine(errorLineStartOffset == lineEndOffset);
  }
  return annotation;
}","@Nullable private static Annotation createAnnotation(@NotNull AnnotationHolder holder,@NotNull PsiFile file,@NotNull Document document,@NotNull VerifyMessage warn,@NotNull HighlightSeverity severity,@Nullable TextAttributes forcedTextAttributes,boolean showErrorOnWholeLine){
  int line=warn.line - 1;
  int column=warn.column - 1;
  if (line < 0 || line >= document.getLineCount()) {
    return null;
  }
  int lineEndOffset=document.getLineEndOffset(line);
  int lineStartOffset=document.getLineStartOffset(line);
  int errorLineStartOffset=StringUtil.lineColToOffset(document.getCharsSequence(),line,column);
  if (errorLineStartOffset == -1) {
    return null;
  }
  TextRange range;
  if (showErrorOnWholeLine) {
    range=new TextRange(lineStartOffset,lineEndOffset);
  }
 else {
    PsiElement lit=PsiUtil.getElementAtOffset(file,errorLineStartOffset);
    range=lit.getTextRange();
  }
  Annotation annotation=JSLinterUtil.createAnnotation(holder,severity,forcedTextAttributes,range,MESSAGE_PREFIX + warn.message.trim() + ""String_Node_Str""+ warn.ruleId+ ')');
  if (annotation != null) {
    annotation.setAfterEndOfLine(errorLineStartOffset == lineEndOffset);
  }
  return annotation;
}",0.989103101424979
117049,"@Override public void apply(@NotNull PsiFile file,ExternalLintAnnotationResult<Result> annotationResult,@NotNull AnnotationHolder holder){
  if (annotationResult == null) {
    return;
  }
  InspectionProjectProfileManager inspectionProjectProfileManager=InspectionProjectProfileManager.getInstance(file.getProject());
  SeverityRegistrar severityRegistrar=inspectionProjectProfileManager.getSeverityRegistrar();
  HighlightDisplayKey inspectionKey=getHighlightDisplayKeyByClass();
  EditorColorsScheme colorsScheme=annotationResult.input.colorsScheme;
  Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
  if (document == null) {
    return;
  }
  ESLintProjectComponent component=annotationResult.input.project.getComponent(ESLintProjectComponent.class);
  for (  Result.Warn warn : annotationResult.result.warns) {
    HighlightSeverity severity=getHighlightSeverity(warn,component.treatAsWarnings);
    TextAttributes forcedTextAttributes=JSLinterUtil.getTextAttributes(colorsScheme,severityRegistrar,severity);
    Annotation annotation=createAnnotation(holder,file,document,warn,severity,forcedTextAttributes,false);
    if (annotation != null) {
      int offset=StringUtil.lineColToOffset(document.getText(),warn.line - 1,warn.column);
      PsiElement lit=PsiUtil.getElementAtOffset(file,offset);
      BaseActionFix actionFix=Fixes.getFixForRule(warn.rule,lit);
      if (actionFix != null) {
        annotation.registerFix(actionFix,null,inspectionKey);
      }
      annotation.registerFix(new SuppressActionFix(warn.rule,lit),null,inspectionKey);
      annotation.registerFix(new SuppressLineActionFix(warn.rule,lit),null,inspectionKey);
    }
  }
}","@Override public void apply(@NotNull PsiFile file,ExternalLintAnnotationResult<Result> annotationResult,@NotNull AnnotationHolder holder){
  if (annotationResult == null) {
    return;
  }
  InspectionProjectProfileManager inspectionProjectProfileManager=InspectionProjectProfileManager.getInstance(file.getProject());
  SeverityRegistrar severityRegistrar=inspectionProjectProfileManager.getSeverityRegistrar();
  HighlightDisplayKey inspectionKey=getHighlightDisplayKeyByClass();
  EditorColorsScheme colorsScheme=annotationResult.input.colorsScheme;
  Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
  if (document == null) {
    return;
  }
  ESLintProjectComponent component=annotationResult.input.project.getComponent(ESLintProjectComponent.class);
  for (  VerifyMessage warn : annotationResult.result.warns) {
    HighlightSeverity severity=getHighlightSeverity(warn,component.treatAsWarnings);
    TextAttributes forcedTextAttributes=JSLinterUtil.getTextAttributes(colorsScheme,severityRegistrar,severity);
    Annotation annotation=createAnnotation(holder,file,document,warn,severity,forcedTextAttributes,false);
    if (annotation != null) {
      int offset=StringUtil.lineColToOffset(document.getText(),warn.line - 1,warn.column);
      PsiElement lit=PsiUtil.getElementAtOffset(file,offset);
      BaseActionFix actionFix=Fixes.getFixForRule(warn.ruleId,lit);
      if (actionFix != null) {
        annotation.registerFix(actionFix,null,inspectionKey);
      }
      annotation.registerFix(new SuppressActionFix(warn.ruleId,lit),null,inspectionKey);
      annotation.registerFix(new SuppressLineActionFix(warn.ruleId,lit),null,inspectionKey);
    }
  }
}",0.9911920140927776
117050,"private static HighlightSeverity getHighlightSeverity(Result.Warn warn,boolean treatAsWarnings){
  if (treatAsWarnings) {
    return HighlightSeverity.WARNING;
  }
  return warn.level.equals(""String_Node_Str"") ? HighlightSeverity.ERROR : HighlightSeverity.WARNING;
}","private static HighlightSeverity getHighlightSeverity(VerifyMessage warn,boolean treatAsWarnings){
  if (treatAsWarnings) {
    return HighlightSeverity.WARNING;
  }
  return warn.severity == 2 ? HighlightSeverity.ERROR : HighlightSeverity.WARNING;
}",0.8682170542635659
117051,"public static boolean isESLintConfigFile(VirtualFile file){
  return file != null && file.getName().equals(ESLintConfigFileType.ESLINTRC);
}","public static boolean isESLintConfigFile(VirtualFile file){
  return file != null && isRC(file.getName());
}",0.8306451612903226
117052,"@NotNull static GeneralCommandLine createLint(@NotNull ESLintRunner.ESLintSettings settings){
  GeneralCommandLine commandLine=create(settings);
  commandLine.addParameter(settings.targetFile);
  CLI.addParamIfNotEmpty(commandLine,C,settings.config);
  if (StringUtil.isNotEmpty(settings.rules)) {
    CLI.addParam(commandLine,RULESDIR,""String_Node_Str"" + settings.rules + ""String_Node_Str"");
  }
  if (StringUtil.isNotEmpty(settings.ext)) {
    CLI.addParam(commandLine,EXT,settings.ext);
  }
  return commandLine;
}","@NotNull static GeneralCommandLine createLint(@NotNull ESLintRunner.ESLintSettings settings){
  GeneralCommandLine commandLine=create(settings);
  commandLine.addParameter(settings.targetFile);
  CLI.addParamIfNotEmpty(commandLine,C,settings.config);
  if (StringUtil.isNotEmpty(settings.rules)) {
    CLI.addParam(commandLine,RULESDIR,""String_Node_Str"" + settings.rules + ""String_Node_Str"");
  }
  if (StringUtil.isNotEmpty(settings.ext)) {
    CLI.addParam(commandLine,EXT,settings.ext);
  }
  CLI.addParam(commandLine,FORMAT,JSON);
  return commandLine;
}",0.9618604651162792
117053,"public static Result processResults(ProcessOutput output){
  Result result=new Result();
  List<String> lines=output.getStdoutLines();
  String file=null;
  for (  String line : lines) {
    if (file == null) {
      file=line;
    }
    Warn warn=parseLine(line);
    if (warn != null) {
      result.warns.add(warn);
    }
  }
  result.errorOutput=output.getStderr();
  return result;
}","public static Result processResults(ProcessOutput output){
  Result result=new Result();
  result.errorOutput=output.getStderr();
  try {
    List<FileResult> fileResults=parseInternal(output.getStdout());
    if (!fileResults.isEmpty()) {
      result.warns=fileResults.get(0).messages;
    }
  }
 catch (  Exception e) {
    result.errorOutput=e.toString();
  }
  return result;
}",0.2779220779220779
117054,"public boolean printToFile() throws PrintException, IOException {
  log.info(""String_Node_Str"" + outputPath.get());
  OutputStream out=new FileOutputStream(outputPath.get());
  out.write(this.getRawCmds().getByteArray());
  out.close();
  return true;
}","public boolean printToFile() throws PrintException, IOException {
  log.info(""String_Node_Str"" + outputPath.get());
  OutputStream out=null;
  try {
    out=new FileOutputStream(outputPath.get());
    out.write(this.getRawCmds().getByteArray());
  }
  finally {
    if (out != null) {
      out.close();
    }
    outputPath.set(null);
  }
  return true;
}",0.7881773399014779
117055,"/** 
 * A brute-force, however surprisingly elegant way to send a file to a networked printer. The socket host can be an IP Address or Host Name.  The port 9100 is a standard HP/JetDirect and may work well. Please note that this will completely bypass the Print Spooler, so the Operating System will have absolutely no printer information.  This is printing ""blind"".
 * @throws UnknownHostException
 * @throws IOException
 */
private boolean printToSocket() throws IOException {
  log.info(""String_Node_Str"" + socketHost.get() + ""String_Node_Str""+ socketPort.get());
  Socket socket=new Socket(socketHost.get(),socketPort.get());
  DataOutputStream out=new DataOutputStream(socket.getOutputStream());
  out.write(getRawCmds().getByteArray());
  socket.close();
  return true;
}","/** 
 * A brute-force, however surprisingly elegant way to send a file to a networked printer. The socket host can be an IP Address or Host Name.  The port 9100 is a standard HP/JetDirect and may work well. Please note that this will completely bypass the Print Spooler, so the Operating System will have absolutely no printer information.  This is printing ""blind"".
 * @throws UnknownHostException
 * @throws IOException
 */
private boolean printToSocket() throws IOException {
  log.info(""String_Node_Str"" + socketHost.get() + ""String_Node_Str""+ socketPort.get());
  Socket socket=null;
  DataOutputStream out=null;
  try {
    socket=new Socket(socketHost.get(),socketPort.get());
    out=new DataOutputStream(socket.getOutputStream());
    out.write(getRawCmds().getByteArray());
  }
  finally {
    if (out != null) {
      out.close();
    }
    if (socket != null) {
      socket.close();
    }
    socketHost.set(null);
    socketPort.set(null);
  }
  return true;
}",0.8063963449457453
117056,"public boolean prompt(String description,Certificate cert){
  persistentCheckBox.setSelected(false);
  if (cert == null || cert.isBlocked()) {
    approved=false;
    return false;
  }
  if (cert.isTrusted() && cert.isSaved()) {
    return true;
  }
  setDescription(description);
  setCertificate(cert);
  setVisible(true);
  return isApproved();
}","public boolean prompt(String description,Certificate cert){
  persistentCheckBox.setSelected(false);
  if (cert == null || cert.isBlocked()) {
    approved=false;
    return false;
  }
  if (cert.isTrusted() && cert.isSaved()) {
    approved=true;
    return true;
  }
  setDescription(description);
  setCertificate(cert);
  setVisible(true);
  return isApproved();
}",0.9735006973500696
117057,"public void setPrintParameters(PrintApplet applet){
  this.ps.set(applet.getPrintService());
  this.jobName.set(applet.getJobName().replace(""String_Node_Str"",""String_Node_Str""));
  if (applet.getCopies() > 1) {
    setCopies(applet.getCopies());
  }
}","public void setPrintParameters(PrintApplet applet){
  this.jobName.set(applet.getJobName().replace(""String_Node_Str"",""String_Node_Str""));
  if (applet.getCopies() > 1) {
    setCopies(applet.getCopies());
  }
}",0.334056399132321
117058,"public void setPrintParameters(PrintApplet a){
  setPrintService(a.getPrintService());
  setPaperSize(a.getPaperSize());
  setCopies(a.getCopies());
  setJobName(a.getJobName().replace(""String_Node_Str"",""String_Node_Str""));
  setLogPostScriptFeatures(a.getLogPostScriptFeatures());
}","public void setPrintParameters(PrintApplet a){
  setCopies(a.getCopies());
  setJobName(a.getJobName().replace(""String_Node_Str"",""String_Node_Str""));
  setLogPostScriptFeatures(a.getLogPostScriptFeatures());
}",0.3211382113821138
117059,"public void setPrintParameters(PrintApplet rawPrintApplet){
  this.setPrintService(rawPrintApplet.getPrintService());
  this.setJobName(rawPrintApplet.getJobName().replace(""String_Node_Str"",""String_Node_Str""));
  this.setCharset(rawPrintApplet.getCharset());
  this.setAlternatePrinting(rawPrintApplet.isAlternatePrinting());
  if (rawPrintApplet.getCopies() > 0) {
    setCopies(rawPrintApplet.getCopies());
  }
  this.clear();
}","public void setPrintParameters(PrintApplet rawPrintApplet){
  this.setJobName(rawPrintApplet.getJobName().replace(""String_Node_Str"",""String_Node_Str""));
  this.setAlternatePrinting(rawPrintApplet.isAlternatePrinting());
  if (rawPrintApplet.getCopies() > 0) {
    setCopies(rawPrintApplet.getCopies());
  }
  this.clear();
}",0.4482758620689655
117060,"@OnWebSocketMessage public void onMessage(Session session,String text){
  if (qz == null)   qz=new PrintApplet();
  System.out.println(""String_Node_Str"" + text);
  int space=text.indexOf(' ');
  if (space > 0) {
    String command=text.substring(0,space);
    if (""String_Node_Str"".equals(command)) {
      qz.isActive();
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
      qz.isActive();
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
 else     if (""String_Node_Str"".equals(command)) {
    }
  }
}","@OnWebSocketMessage public String onMessage(Session session,String text){
  if (text == null)   return ""String_Node_Str"";
  if (qz == null) {
    qz=new PrintApplet();
    qz.init();
    qz.start();
  }
  System.out.println(""String_Node_Str"" + text);
  if (text.startsWith(""String_Node_Str"")) {
    if (methods == null) {
      methods=new TreeSet<String>();
    }
    try {
      Class c=PrintApplet.class;
      Method[] m=c.getDeclaredMethods();
      for (      Method method : m) {
        if (method.getModifiers() == 1 && method.getDeclaringClass() == PrintApplet.class) {
          String name=method.getName();
          if (!name.equals(""String_Node_Str"") && !name.equals(""String_Node_Str"") && !name.equals(""String_Node_Str"")&& !name.equals(""String_Node_Str"")&& !name.equals(""String_Node_Str"")&& !name.equals(""String_Node_Str"")&& !name.equals(""String_Node_Str"")) {
            methods.add(method.getName() + ""String_Node_Str"" + method.getReturnType()+ ""String_Node_Str""+ method.getParameterTypes().length);
          }
        }
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    if (methods == null)     return ""String_Node_Str"";
    return StringUtils.join(methods,""String_Node_Str"");
  }
 else {
    String[] parts=text.split(""String_Node_Str"");
    String name=parts[0];
    int params=Integer.valueOf(parts.length - 1);
    try {
      Method[] m=PrintApplet.class.getMethods();
      Method method=null;
      for (      Method mm : m) {
        System.out.println(name + ""String_Node_Str"" + params+ ""String_Node_Str""+ mm.getName()+ ""String_Node_Str""+ mm.getParameterTypes().length);
        if (mm.getName().equals(name) && params == mm.getParameterTypes().length) {
          method=mm;
        }
      }
      String result=""String_Node_Str"";
      if (method != null) {
        Object[] obj=new Object[params];
        for (int x=1; x < params + 1; x++) {
          obj[x - 1]=covertType(parts[x],method.getParameterTypes()[x - 1]);
        }
switch (params) {
case 0:
          result=String.valueOf(method.invoke(qz));
        break;
case 1:
      result=String.valueOf(method.invoke(qz,obj[0]));
    break;
case 2:
  result=String.valueOf(method.invoke(qz,obj[0],obj[1]));
break;
case 3:
result=String.valueOf(method.invoke(qz,obj[0],obj[1],obj[2]));
break;
case 4:
result=String.valueOf(method.invoke(qz,obj[0],obj[1],obj[2],obj[3]));
break;
case 5:
result=String.valueOf(method.invoke(qz,obj[0],obj[1],obj[2],obj[3],obj[5]));
break;
default :
result=""String_Node_Str"";
}
}
 else {
return ""String_Node_Str"";
}
return ""String_Node_Str"" + result;
}
 catch (Exception ex) {
ex.printStackTrace();
}
}
return ""String_Node_Str"";
}",0.0956447480785653
117061,"/** 
 * Returns the cached version of the found serial ports on the system. i.e. [""COM1"",""COM2"",""COM3""] or [""/dev/tty0"",""/dev/tty1""]
 * @return 
 */
public String getSerialPorts(){
  return this.serialPorts;
}","/** 
 * Returns the cached version of the found serial ports on the system. i.e. [""COM1"",""COM2"",""COM3""] or [""/dev/tty0"",""/dev/tty1""]
 * @return Cached version of serial ports
 */
public String getSerialPorts(){
  return this.serialPorts;
}",0.9330357142857144
117062,"/** 
 * Timeout in milliseconds for the port.readBytes() function. Default is 1200 (1.2 seconds)
 * @param timeout 
 */
public final void setTimeout(int timeout){
  this.timeout=timeout;
}","/** 
 * Timeout in milliseconds for the port.readBytes() function. Default is 1200 (1.2 seconds)
 * @param timeout the timeout
 */
public final void setTimeout(int timeout){
  this.timeout=timeout;
}",0.9715762273901808
117063,"/** 
 * Return whether or not the serial port is open
 * @return 
 */
public boolean isOpen(){
  return port == null ? false : port.isOpened();
}","/** 
 * Return whether or not the serial port is open
 * @return boolean indicating if port is open
 */
public boolean isOpen(){
  return port != null && port.isOpened();
}",0.8517350157728707
117064,"/** 
 * Timeout in milliseconds for the port.readBytes() function.
 * @return 
 */
public int getTimeout(){
  return this.timeout;
}","/** 
 * Timeout in milliseconds for the port.readBytes() function.
 * @return the timeout
 */
public int getTimeout(){
  return this.timeout;
}",0.96
117065,"/** 
 * Caches a comma delimited list of ports found on this system.  Also caches the array so that it can be referenced by index when opening the port later.
 * @return 
 */
public String fetchSerialPorts(){
  StringBuilder sb=new StringBuilder();
  this.portArray=SerialPortList.getPortNames();
  for (int i=0; i < this.portArray.length; i++) {
    sb.append(this.portArray[i]).append(i < this.portArray.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  return (this.serialPorts=sb.toString());
}","/** 
 * Caches a comma delimited list of ports found on this system.  Also caches the array so that it can be referenced by index when opening the port later.
 * @return List of ports
 */
public String fetchSerialPorts(){
  StringBuilder sb=new StringBuilder();
  this.portArray=SerialPortList.getPortNames();
  for (int i=0; i < this.portArray.length; i++) {
    sb.append(this.portArray[i]).append(i < this.portArray.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  return (this.serialPorts=sb.toString());
}",0.9873417721518988
117066,"/** 
 * Closes the open serial port, if open.  If not, displays a warning message in the console and  continues quietly.  If the port cannot close, a  <code>SerialPortExcpetion</code> will be thrown.
 * @return
 * @throws SerialPortException 
 */
public boolean close() throws SerialPortException {
  if (port == null || !port.isOpened()) {
    LogIt.log(Level.WARNING,""String_Node_Str"" + portName + ""String_Node_Str"");
    return false;
  }
  boolean closed=port.closePort();
  if (!closed) {
    LogIt.log(Level.WARNING,""String_Node_Str"" + portName + ""String_Node_Str"");
  }
 else {
    LogIt.log(""String_Node_Str"" + portName + ""String_Node_Str"");
  }
  port=null;
  portName=null;
  return closed;
}","/** 
 * Closes the open serial port, if open.  If not, displays a warning message in the console and  continues quietly.  If the port cannot close, a  <code>SerialPortExcpetion</code> will be thrown.
 * @return boolean indicating success
 * @throws SerialPortException 
 */
public boolean close() throws SerialPortException {
  if (port == null || !port.isOpened()) {
    LogIt.log(Level.WARNING,""String_Node_Str"" + portName + ""String_Node_Str"");
    return false;
  }
  boolean closed=port.closePort();
  if (!closed) {
    LogIt.log(Level.WARNING,""String_Node_Str"" + portName + ""String_Node_Str"");
  }
 else {
    LogIt.log(""String_Node_Str"" + portName + ""String_Node_Str"");
  }
  port=null;
  portName=null;
  return closed;
}",0.981132075471698
117067,"/** 
 * Allow a port to be selected from array of returned ports.
 * @param portID
 * @return
 * @throws SerialPortException
 * @throws SerialException 
 */
public boolean open(int portID) throws SerialPortException, SerialException {
  if (this.serialPorts == null) {
    this.getSerialPorts();
  }
  if (this.serialPorts.equals(""String_Node_Str"")) {
    throw new SerialException(""String_Node_Str"");
  }
  if (portID > -1 && this.portArray.length > 0 && this.portArray.length > portID) {
    return open(portArray[portID]);
  }
 else {
    throw new SerialException(""String_Node_Str"" + portID + ""String_Node_Str""+ ""String_Node_Str""+ serialPorts);
  }
}","/** 
 * Allow a port to be selected from array of returned ports.
 * @param portID the port ID to select
 * @return boolean indicting success
 * @throws SerialPortException
 * @throws SerialException 
 */
public boolean open(int portID) throws SerialPortException, SerialException {
  if (this.serialPorts == null) {
    this.getSerialPorts();
  }
  if (""String_Node_Str"".equals(this.serialPorts)) {
    throw new SerialException(""String_Node_Str"");
  }
  if (portID > -1 && this.portArray.length > 0 && this.portArray.length > portID) {
    return open(portArray[portID]);
  }
 else {
    throw new SerialException(""String_Node_Str"" + portID + ""String_Node_Str""+ ""String_Node_Str""+ serialPorts);
  }
}",0.915929203539823
117068,"private void generateIntArray(){
  LogIt.log(""String_Node_Str"");
  imageAsIntArray=new int[(int)(imageAsBooleanArray.length / 8)];
  for (int i=0; i < imageAsIntArray.length; i++) {
    for (int k=0; k < 8; k++) {
      imageAsIntArray[i]+=(imageAsBooleanArray[8 * i + k] ? 1 : 0) << 7 - k;
    }
  }
}","private void generateIntArray(){
  LogIt.log(""String_Node_Str"");
  imageAsIntArray=new int[imageAsBooleanArray.length / 8];
  for (int i=0; i < imageAsIntArray.length; i++) {
    for (int k=0; k < 8; k++) {
      imageAsIntArray[i]+=(imageAsBooleanArray[8 * i + k] ? 1 : 0) << 7 - k;
    }
  }
}",0.9882747068676716
117069,"/** 
 * Initializes the ImageWrapper. This populates the internal structures with the data created from the original image. It is normally called by the constructor, but if for any reason you change the image contents (for example, if you resize the image), it must be initialized again prior to calling getImageCommand()
 */
private final void init(){
  LogIt.log(""String_Node_Str"");
  generateBlackPixels();
  generateIntArray();
}","/** 
 * Initializes the ImageWrapper. This populates the internal structures with the data created from the original image. It is normally called by the constructor, but if for any reason you change the image contents (for example, if you resize the image), it must be initialized again prior to calling getImageCommand()
 */
private void init(){
  LogIt.log(""String_Node_Str"");
  generateBlackPixels();
  generateIntArray();
}",0.9930232558139536
117070,"/** 
 * Generates the EPL2 commands to print an image. One command is emitted per line of the image. This avoids issues with too long commands.
 * @return The commands to print the image as an array of bytes, ready to besent to the printer
 */
public byte[] getImageCommand() throws InvalidRawImageException, UnsupportedEncodingException {
  this.getByteBuffer().clear();
switch (languageType) {
case ESCP:
case ESCP2:
    appendEpsonSlices(this.getByteBuffer());
  break;
case ZPL:
case ZPLII:
String zplHexAsString=ByteUtilities.getHexString(getImageAsIntArray());
int byteLen=zplHexAsString.length() / 2;
int perRow=byteLen / getHeight();
StringBuilder zpl=new StringBuilder(""String_Node_Str"").append(byteLen).append(""String_Node_Str"").append(byteLen).append(""String_Node_Str"").append(perRow).append(""String_Node_Str"").append(zplHexAsString);
this.getByteBuffer().append(zpl,charset);
break;
case EPL:
case EPL2:
StringBuilder epl=new StringBuilder(""String_Node_Str"").append(getxPos()).append(""String_Node_Str"").append(getyPos()).append(""String_Node_Str"").append(getWidth() / 8).append(""String_Node_Str"").append(getHeight()).append(""String_Node_Str"");
this.getByteBuffer().append(epl,charset).append(getBytes());
break;
case CPCL:
String cpclHexAsString=ByteUtilities.getHexString(getImageAsIntArray());
StringBuilder cpcl=new StringBuilder(""String_Node_Str"").append((int)(getWidth() / 8)).append(""String_Node_Str"").append(getHeight()).append(""String_Node_Str"").append(getxPos()).append(""String_Node_Str"").append(getyPos()).append(""String_Node_Str"").append(cpclHexAsString);
this.getByteBuffer().append(cpcl,charset);
break;
default :
throw new InvalidRawImageException(charset.name() + ""String_Node_Str"");
}
return this.getByteBuffer().getByteArray();
}","/** 
 * Generates the EPL2 commands to print an image. One command is emitted per line of the image. This avoids issues with too long commands.
 * @return The commands to print the image as an array of bytes, ready to besent to the printer
 */
public byte[] getImageCommand() throws InvalidRawImageException, UnsupportedEncodingException {
  this.getByteBuffer().clear();
switch (languageType) {
case ESCP:
case ESCP2:
    appendEpsonSlices(this.getByteBuffer());
  break;
case ZPL:
case ZPLII:
String zplHexAsString=ByteUtilities.getHexString(getImageAsIntArray());
int byteLen=zplHexAsString.length() / 2;
int perRow=byteLen / getHeight();
StringBuilder zpl=new StringBuilder(""String_Node_Str"").append(byteLen).append(""String_Node_Str"").append(byteLen).append(""String_Node_Str"").append(perRow).append(""String_Node_Str"").append(zplHexAsString);
this.getByteBuffer().append(zpl,charset);
break;
case EPL:
case EPL2:
StringBuilder epl=new StringBuilder(""String_Node_Str"").append(getxPos()).append(""String_Node_Str"").append(getyPos()).append(""String_Node_Str"").append(getWidth() / 8).append(""String_Node_Str"").append(getHeight()).append(""String_Node_Str"");
this.getByteBuffer().append(epl,charset).append(getBytes());
break;
case CPCL:
String cpclHexAsString=ByteUtilities.getHexString(getImageAsIntArray());
StringBuilder cpcl=new StringBuilder(""String_Node_Str"").append(getWidth() / 8).append(""String_Node_Str"").append(getHeight()).append(""String_Node_Str"").append(getxPos()).append(""String_Node_Str"").append(getyPos()).append(""String_Node_Str"").append(cpclHexAsString);
this.getByteBuffer().append(cpcl,charset);
break;
default :
throw new InvalidRawImageException(charset.name() + ""String_Node_Str"");
}
return this.getByteBuffer().getByteArray();
}",0.998003992015968
117071,"/** 
 * http://android-essential-devtopics.blogspot.com/2013/02/sending-bit-image-to-epson-printer.html
 * @author Oleg Morozov 02/21/2013 (via public domain)
 * @author Tres Finocchiaro 10/01/2013
 * @param b 
 */
private void appendEpsonSlices(ByteArrayBuilder builder){
  builder.append(new byte[]{0x1B,0x33,24});
  int offset=0;
  while (offset < getHeight()) {
    byte nL=(byte)((int)(getWidth() % 256));
    byte nH=(byte)((int)(getWidth() / 256));
    builder.append(new byte[]{0x1B,0x2A,(byte)dotDensity,nL,nH});
    for (int x=0; x < getWidth(); ++x) {
      for (int k=0; k < 3; ++k) {
        byte slice=0;
        for (int b=0; b < 8; ++b) {
          int y=(((offset / 8) + k) * 8) + b;
          int i=(y * getWidth()) + x;
          boolean v=false;
          if (i < getImageAsBooleanArray().length) {
            v=getImageAsBooleanArray()[i];
          }
          slice|=(byte)((v ? 1 : 0) << (7 - b));
        }
        builder.append(new byte[]{slice});
      }
    }
    offset+=24;
    builder.append(new byte[]{10});
  }
  builder.append(new byte[]{0x1B,0x33,30});
}","/** 
 * http://android-essential-devtopics.blogspot.com/2013/02/sending-bit-image-to-epson-printer.html
 * @param builder the ByteArrayBuilder to use
 * @author Oleg Morozov 02/21/2013 (via public domain)
 * @author Tres Finocchiaro 10/01/2013
 */
private void appendEpsonSlices(ByteArrayBuilder builder){
  builder.append(new byte[]{0x1B,0x33,24});
  int offset=0;
  while (offset < getHeight()) {
    byte nL=(byte)((int)(getWidth() % 256));
    byte nH=(byte)((int)(getWidth() / 256));
    builder.append(new byte[]{0x1B,0x2A,(byte)dotDensity,nL,nH});
    for (int x=0; x < getWidth(); ++x) {
      for (int k=0; k < 3; ++k) {
        byte slice=0;
        for (int b=0; b < 8; ++b) {
          int y=(((offset / 8) + k) * 8) + b;
          int i=(y * getWidth()) + x;
          boolean v=false;
          if (i < getImageAsBooleanArray().length) {
            v=getImageAsBooleanArray()[i];
          }
          slice|=(byte)((v ? 1 : 0) << (7 - b));
        }
        builder.append(new byte[]{slice});
      }
    }
    offset+=24;
    builder.append(new byte[]{10});
  }
  builder.append(new byte[]{0x1B,0x33,30});
}",0.9733634311512416
117072,"/** 
 * Convenience method for append(byte[]) combined with a String of specified charset
 * @param s
 * @param c
 * @return
 * @throws UnsupportedEncodingException 
 */
public final ByteArrayBuilder append(StringBuilder s,Charset c) throws UnsupportedEncodingException {
  return append(s.toString(),c);
}","/** 
 * Convenience method for append(byte[]) combined with a String of specified charset
 * @param stringBuilder the StringBuilder to append
 * @param charset the Charset of the StringBuilder
 * @return this <code>ByteArrayBuilder</code>
 * @throws UnsupportedEncodingException 
 */
public final ByteArrayBuilder append(StringBuilder stringBuilder,Charset charset) throws UnsupportedEncodingException {
  return append(stringBuilder.toString(),charset);
}",0.8031496062992126
117073,"/** 
 * Convenience method for encoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param dataToEncode byte array of data to encode in base64 form
 * @param filename Filename for saving encoded data
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if dataToEncode is null
 * @since 2.1
 */
public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {
  if (dataToEncode == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);
    bos.write(dataToEncode);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      bos.close();
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Convenience method for encoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param dataToEncode byte array of data to encode in base64 form
 * @param filename Filename for saving encoded data
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if dataToEncode is null
 * @since 2.1
 */
public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {
  if (dataToEncode == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);
    bos.write(dataToEncode);
  }
  finally {
    try {
      if (bos != null) {
        bos.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.9397590361445785
117074,"/** 
 * Convenience method for reading a binary file and base64-encoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param filename Filename for reading binary data
 * @return base64-encoded string
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static String encodeFromFile(String filename) throws java.io.IOException {
  String encodedData=null;
  Base64.InputStream bis=null;
  try {
    java.io.File file=new java.io.File(filename);
    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];
    int length=0;
    int numBytes=0;
    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);
    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {
      length+=numBytes;
    }
    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      bis.close();
    }
 catch (    Exception e) {
    }
  }
  return encodedData;
}","/** 
 * Convenience method for reading a binary file and base64-encoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param filename Filename for reading binary data
 * @return base64-encoded string
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static String encodeFromFile(String filename) throws java.io.IOException {
  String encodedData=null;
  Base64.InputStream bis=null;
  try {
    java.io.File file=new java.io.File(filename);
    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];
    int length=0;
    int numBytes;
    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);
    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {
      length+=numBytes;
    }
    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);
  }
  finally {
    try {
      if (bis != null) {
        bis.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return encodedData;
}",0.8885135135135135
117075,"/** 
 * Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.
 * @param s the string to decode
 * @param options encode options such as URL_SAFE
 * @return the decoded data
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if <tt>s</tt> is null
 * @since 1.4
 */
public static byte[] decode(String s,int options) throws java.io.IOException {
  if (s == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  byte[] bytes;
  try {
    bytes=s.getBytes(PREFERRED_ENCODING);
  }
 catch (  java.io.UnsupportedEncodingException uee) {
    bytes=s.getBytes();
  }
  bytes=decode(bytes,0,bytes.length,options);
  if (bytes != null && bytes.length >= 4) {
    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);
    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {
      java.io.ByteArrayInputStream bais=null;
      java.util.zip.GZIPInputStream gzis=null;
      java.io.ByteArrayOutputStream baos=null;
      byte[] buffer=new byte[2048];
      int length=0;
      try {
        baos=new java.io.ByteArrayOutputStream();
        bais=new java.io.ByteArrayInputStream(bytes);
        gzis=new java.util.zip.GZIPInputStream(bais);
        while ((length=gzis.read(buffer)) >= 0) {
          baos.write(buffer,0,length);
        }
        bytes=baos.toByteArray();
      }
 catch (      java.io.IOException e) {
      }
 finally {
        try {
          baos.close();
        }
 catch (        Exception e) {
        }
        try {
          gzis.close();
        }
 catch (        Exception e) {
        }
        try {
          bais.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  return bytes;
}","/** 
 * Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.
 * @param s the string to decode
 * @param options encode options such as URL_SAFE
 * @return the decoded data
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if <tt>s</tt> is null
 * @since 1.4
 */
public static byte[] decode(String s,int options) throws java.io.IOException {
  if (s == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  byte[] bytes;
  try {
    bytes=s.getBytes(PREFERRED_ENCODING);
  }
 catch (  java.io.UnsupportedEncodingException uee) {
    bytes=s.getBytes();
  }
  bytes=decode(bytes,0,bytes.length,options);
  if (bytes != null && bytes.length >= 4) {
    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);
    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {
      java.io.ByteArrayInputStream bais=null;
      java.util.zip.GZIPInputStream gzis=null;
      java.io.ByteArrayOutputStream baos=null;
      byte[] buffer=new byte[2048];
      int length;
      try {
        baos=new java.io.ByteArrayOutputStream();
        bais=new java.io.ByteArrayInputStream(bytes);
        gzis=new java.util.zip.GZIPInputStream(bais);
        while ((length=gzis.read(buffer)) >= 0) {
          baos.write(buffer,0,length);
        }
        bytes=baos.toByteArray();
      }
 catch (      java.io.IOException e) {
      }
 finally {
        try {
          if (baos != null) {
            baos.close();
          }
        }
 catch (        Exception ignored) {
        }
        try {
          if (gzis != null) {
            gzis.close();
          }
        }
 catch (        Exception ignored) {
        }
        try {
          if (bais != null) {
            bais.close();
          }
        }
 catch (        Exception ignored) {
        }
      }
    }
  }
  return bytes;
}",0.9370513528437328
117076,"/** 
 * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.
 * @param infile Input file
 * @param outfile Output file
 * @throws java.io.IOException if there is an error
 * @since 2.2
 */
public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {
  byte[] decoded=Base64.decodeFromFile(infile);
  java.io.OutputStream out=null;
  try {
    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
    out.write(decoded);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      out.close();
    }
 catch (    Exception ex) {
    }
  }
}","/** 
 * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.
 * @param infile Input file
 * @param outfile Output file
 * @throws java.io.IOException if there is an error
 * @since 2.2
 */
public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {
  byte[] decoded=Base64.decodeFromFile(infile);
  java.io.OutputStream out=null;
  try {
    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
    out.write(decoded);
  }
  finally {
    try {
      if (out != null) {
        out.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.8439773645917542
117077,"/** 
 * Returns one of the _SOMETHING_DECODABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
 */
private final static byte[] getDecodabet(int options){
  if ((options & URL_SAFE) == URL_SAFE) {
    return _URL_SAFE_DECODABET;
  }
 else   if ((options & ORDERED) == ORDERED) {
    return _ORDERED_DECODABET;
  }
 else {
    return _STANDARD_DECODABET;
  }
}","/** 
 * Returns one of the _SOMETHING_DECODABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
 */
private static byte[] getDecodabet(int options){
  if ((options & URL_SAFE) == URL_SAFE) {
    return _URL_SAFE_DECODABET;
  }
 else   if ((options & ORDERED) == ORDERED) {
    return _ORDERED_DECODABET;
  }
 else {
    return _STANDARD_DECODABET;
  }
}",0.9942307692307693
117078,"/** 
 * Convenience method for reading a base64-encoded file and decoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param filename Filename for reading encoded data
 * @return decoded byte array
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static byte[] decodeFromFile(String filename) throws java.io.IOException {
  byte[] decodedData=null;
  Base64.InputStream bis=null;
  try {
    java.io.File file=new java.io.File(filename);
    byte[] buffer=null;
    int length=0;
    int numBytes=0;
    if (file.length() > Integer.MAX_VALUE) {
      throw new java.io.IOException(""String_Node_Str"" + file.length() + ""String_Node_Str"");
    }
    buffer=new byte[(int)file.length()];
    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);
    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {
      length+=numBytes;
    }
    decodedData=new byte[length];
    System.arraycopy(buffer,0,decodedData,0,length);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      bis.close();
    }
 catch (    Exception e) {
    }
  }
  return decodedData;
}","/** 
 * Convenience method for reading a base64-encoded file and decoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param filename Filename for reading encoded data
 * @return decoded byte array
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static byte[] decodeFromFile(String filename) throws java.io.IOException {
  byte[] decodedData=null;
  Base64.InputStream bis=null;
  try {
    java.io.File file=new java.io.File(filename);
    byte[] buffer;
    int length=0;
    int numBytes;
    if (file.length() > Integer.MAX_VALUE) {
      throw new java.io.IOException(""String_Node_Str"" + file.length() + ""String_Node_Str"");
    }
    buffer=new byte[(int)file.length()];
    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);
    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {
      length+=numBytes;
    }
    decodedData=new byte[length];
    System.arraycopy(buffer,0,decodedData,0,length);
  }
  finally {
    try {
      if (bis != null) {
        bis.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return decodedData;
}",0.8992886559341071
117079,"/** 
 * Attempts to decode Base64 data and deserialize a Java Object within. Returns <tt>null</tt> if there was an error.
 * @param encodedObject The Base64 data to decode
 * @return The decoded and deserialized object
 * @throws NullPointerException if encodedObject is null
 * @throws java.io.IOException if there is a general error
 * @throws ClassNotFoundException if the decoded object is of a class that cannot be found by the JVM
 * @since 1.5
 */
public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {
  byte[] objBytes=decode(encodedObject);
  java.io.ByteArrayInputStream bais=null;
  java.io.ObjectInputStream ois=null;
  Object obj=null;
  try {
    bais=new java.io.ByteArrayInputStream(objBytes);
    ois=new java.io.ObjectInputStream(bais);
    obj=ois.readObject();
  }
 catch (  java.io.IOException e) {
    throw e;
  }
catch (  java.lang.ClassNotFoundException e) {
    throw e;
  }
 finally {
    try {
      bais.close();
    }
 catch (    Exception e) {
    }
    try {
      ois.close();
    }
 catch (    Exception e) {
    }
  }
  return obj;
}","/** 
 * Attempts to decode Base64 data and deserialize a Java Object within. Returns <tt>null</tt> if there was an error.
 * @param encodedObject The Base64 data to decode
 * @return The decoded and deserialized object
 * @throws NullPointerException if encodedObject is null
 * @throws java.io.IOException if there is a general error
 * @throws ClassNotFoundException if the decoded object is of a class that cannot be found by the JVM
 * @since 1.5
 */
public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {
  byte[] objBytes=decode(encodedObject);
  java.io.ByteArrayInputStream bais=null;
  java.io.ObjectInputStream ois=null;
  Object obj=null;
  try {
    bais=new java.io.ByteArrayInputStream(objBytes);
    ois=new java.io.ObjectInputStream(bais);
    obj=ois.readObject();
  }
  finally {
    try {
      if (bais != null) {
        bais.close();
      }
    }
 catch (    Exception ignored) {
    }
    try {
      if (ois != null) {
        ois.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return obj;
}",0.8981233243967829
117080,"/** 
 * Serializes an object and returns the Base64-encoded version of that serialized object. <p>As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p> The object is not GZip-compressed before being encoded. <p> Example options:<pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters </pre> <p> Example: <code>encodeObject( myObj, Base64.GZIP )</code> or <p> Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>
 * @param serializableObject The object to encode
 * @param options Specified options
 * @return The Base64-encoded object
 * @see Base64#GZIP
 * @see Base64#DO_BREAK_LINES
 * @throws java.io.IOException if there is an error
 * @since 2.0
 */
public static String encodeObject(java.io.Serializable serializableObject,int options) throws java.io.IOException {
  if (serializableObject == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  java.io.ByteArrayOutputStream baos=null;
  java.io.OutputStream b64os=null;
  java.io.ObjectOutputStream oos=null;
  try {
    baos=new java.io.ByteArrayOutputStream();
    b64os=new Base64.OutputStream(baos,ENCODE | options);
    oos=new java.io.ObjectOutputStream(b64os);
    oos.writeObject(serializableObject);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      oos.close();
    }
 catch (    Exception e) {
    }
    try {
      b64os.close();
    }
 catch (    Exception e) {
    }
    try {
      baos.close();
    }
 catch (    Exception e) {
    }
  }
  try {
    return new String(baos.toByteArray(),PREFERRED_ENCODING);
  }
 catch (  java.io.UnsupportedEncodingException uue) {
    return new String(baos.toByteArray());
  }
}","/** 
 * Serializes an object and returns the Base64-encoded version of that serialized object. <p>As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p> The object is not GZip-compressed before being encoded. <p> Example options:<pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters </pre> <p> Example: <code>encodeObject( myObj, Base64.GZIP )</code> or <p> Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>
 * @param serializableObject The object to encode
 * @param options Specified options
 * @return The Base64-encoded object
 * @see Base64#GZIP
 * @see Base64#DO_BREAK_LINES
 * @throws java.io.IOException if there is an error
 * @since 2.0
 */
public static String encodeObject(java.io.Serializable serializableObject,int options) throws java.io.IOException {
  if (serializableObject == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  java.io.ByteArrayOutputStream baos=null;
  java.io.OutputStream b64os=null;
  java.io.ObjectOutputStream oos=null;
  try {
    baos=new java.io.ByteArrayOutputStream();
    b64os=new Base64.OutputStream(baos,ENCODE | options);
    oos=new java.io.ObjectOutputStream(b64os);
    oos.writeObject(serializableObject);
  }
  finally {
    try {
      if (oos != null) {
        oos.close();
      }
    }
 catch (    Exception ignored) {
    }
    try {
      if (b64os != null) {
        b64os.close();
      }
    }
 catch (    Exception ignored) {
    }
    try {
      if (baos != null) {
        baos.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  try {
    return new String(baos.toByteArray(),PREFERRED_ENCODING);
  }
 catch (  java.io.UnsupportedEncodingException uue) {
    return new String(baos.toByteArray());
  }
}",0.9163468917881812
117081,"/** 
 * Similar to   {@link #encodeBytes(byte[],int,int,int)} but returnsa byte array instead of instantiating a String. This is more efficient if you're working with I/O streams and have large data sets to encode.
 * @param source The data to convert
 * @param off Offset in array where conversion should begin
 * @param len Length of data to convert
 * @param options Specified options
 * @return The Base64-encoded data as a String
 * @see Base64#GZIP
 * @see Base64#DO_BREAK_LINES
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if source array is null
 * @throws IllegalArgumentException if source array, offset, or length are invalid
 * @since 2.3.1
 */
public static byte[] encodeBytesToBytes(byte[] source,int off,int len,int options) throws java.io.IOException {
  if (source == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (off < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + off);
  }
  if (len < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + len);
  }
  if (off + len > source.length) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",off,len,source.length));
  }
  if ((options & GZIP) > 0) {
    java.io.ByteArrayOutputStream baos=null;
    java.util.zip.GZIPOutputStream gzos=null;
    Base64.OutputStream b64os=null;
    try {
      baos=new java.io.ByteArrayOutputStream();
      b64os=new Base64.OutputStream(baos,ENCODE | options);
      gzos=new java.util.zip.GZIPOutputStream(b64os);
      gzos.write(source,off,len);
      gzos.close();
    }
 catch (    java.io.IOException e) {
      throw e;
    }
 finally {
      try {
        gzos.close();
      }
 catch (      Exception e) {
      }
      try {
        b64os.close();
      }
 catch (      Exception e) {
      }
      try {
        baos.close();
      }
 catch (      Exception e) {
      }
    }
    return baos.toByteArray();
  }
 else {
    boolean breakLines=(options & DO_BREAK_LINES) > 0;
    int encLen=(len / 3) * 4 + (len % 3 > 0 ? 4 : 0);
    if (breakLines) {
      encLen+=encLen / MAX_LINE_LENGTH;
    }
    byte[] outBuff=new byte[encLen];
    int d=0;
    int e=0;
    int len2=len - 2;
    int lineLength=0;
    for (; d < len2; d+=3, e+=4) {
      encode3to4(source,d + off,3,outBuff,e,options);
      lineLength+=4;
      if (breakLines && lineLength >= MAX_LINE_LENGTH) {
        outBuff[e + 4]=NEW_LINE;
        e++;
        lineLength=0;
      }
    }
    if (d < len) {
      encode3to4(source,d + off,len - d,outBuff,e,options);
      e+=4;
    }
    if (e < outBuff.length - 1) {
      byte[] finalOut=new byte[e];
      System.arraycopy(outBuff,0,finalOut,0,e);
      return finalOut;
    }
 else {
      return outBuff;
    }
  }
}","/** 
 * Similar to   {@link #encodeBytes(byte[],int,int,int)} but returnsa byte array instead of instantiating a String. This is more efficient if you're working with I/O streams and have large data sets to encode.
 * @param source The data to convert
 * @param off Offset in array where conversion should begin
 * @param len Length of data to convert
 * @param options Specified options
 * @return The Base64-encoded data as a String
 * @see Base64#GZIP
 * @see Base64#DO_BREAK_LINES
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if source array is null
 * @throws IllegalArgumentException if source array, offset, or length are invalid
 * @since 2.3.1
 */
public static byte[] encodeBytesToBytes(byte[] source,int off,int len,int options) throws java.io.IOException {
  if (source == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (off < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + off);
  }
  if (len < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + len);
  }
  if (off + len > source.length) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",off,len,source.length));
  }
  if ((options & GZIP) > 0) {
    java.io.ByteArrayOutputStream baos=null;
    java.util.zip.GZIPOutputStream gzos=null;
    Base64.OutputStream b64os=null;
    try {
      baos=new java.io.ByteArrayOutputStream();
      b64os=new Base64.OutputStream(baos,ENCODE | options);
      gzos=new java.util.zip.GZIPOutputStream(b64os);
      gzos.write(source,off,len);
      gzos.close();
    }
  finally {
      try {
        if (gzos != null) {
          gzos.close();
        }
      }
 catch (      Exception ignored) {
      }
      try {
        if (b64os != null) {
          b64os.close();
        }
      }
 catch (      Exception ignored) {
      }
      try {
        if (baos != null) {
          baos.close();
        }
      }
 catch (      Exception ignored) {
      }
    }
    return baos.toByteArray();
  }
 else {
    boolean breakLines=(options & DO_BREAK_LINES) > 0;
    int encLen=(len / 3) * 4 + (len % 3 > 0 ? 4 : 0);
    if (breakLines) {
      encLen+=encLen / MAX_LINE_LENGTH;
    }
    byte[] outBuff=new byte[encLen];
    int d=0;
    int e=0;
    int len2=len - 2;
    int lineLength=0;
    for (; d < len2; d+=3, e+=4) {
      encode3to4(source,d + off,3,outBuff,e,options);
      lineLength+=4;
      if (breakLines && lineLength >= MAX_LINE_LENGTH) {
        outBuff[e + 4]=NEW_LINE;
        e++;
        lineLength=0;
      }
    }
    if (d < len) {
      encode3to4(source,d + off,len - d,outBuff,e,options);
      e+=4;
    }
    if (e < outBuff.length - 1) {
      byte[] finalOut=new byte[e];
      System.arraycopy(outBuff,0,finalOut,0,e);
      return finalOut;
    }
 else {
      return outBuff;
    }
  }
}",0.9343091752945376
117082,"/** 
 * Convenience method for decoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param dataToDecode Base64-encoded data as a string
 * @param filename Filename for saving decoded data
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);
    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      bos.close();
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Convenience method for decoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param dataToDecode Base64-encoded data as a string
 * @param filename Filename for saving decoded data
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);
    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));
  }
  finally {
    try {
      if (bos != null) {
        bos.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.9308755760368664
117083,"/** 
 * Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
 */
private final static byte[] getAlphabet(int options){
  if ((options & URL_SAFE) == URL_SAFE) {
    return _URL_SAFE_ALPHABET;
  }
 else   if ((options & ORDERED) == ORDERED) {
    return _ORDERED_ALPHABET;
  }
 else {
    return _STANDARD_ALPHABET;
  }
}","/** 
 * Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
 */
private static byte[] getAlphabet(int options){
  if ((options & URL_SAFE) == URL_SAFE) {
    return _URL_SAFE_ALPHABET;
  }
 else   if ((options & ORDERED) == ORDERED) {
    return _ORDERED_ALPHABET;
  }
 else {
    return _STANDARD_ALPHABET;
  }
}",0.9942418426103646
117084,"/** 
 * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.
 * @param infile Input file
 * @param outfile Output file
 * @throws java.io.IOException if there is an error
 * @since 2.2
 */
public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {
  String encoded=Base64.encodeFromFile(infile);
  java.io.OutputStream out=null;
  try {
    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
    out.write(encoded.getBytes(""String_Node_Str""));
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      out.close();
    }
 catch (    Exception ex) {
    }
  }
}","/** 
 * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.
 * @param infile Input file
 * @param outfile Output file
 * @throws java.io.IOException if there is an error
 * @since 2.2
 */
public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {
  String encoded=Base64.encodeFromFile(infile);
  java.io.OutputStream out=null;
  try {
    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
    out.write(encoded.getBytes(""String_Node_Str""));
  }
  finally {
    try {
      if (out != null) {
        out.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.8507347254447022
117085,"/** 
 * Finds a printer in the PrintServices listing and returns it's respective PrintService.<p>  If a PrintService is supplied, the same PrintService is returned.  If an Object is supplied, it calls the ""toString()"" method and then does a standard name search.</p>
 * @param o The object holding the name of the printer to search for.
 * @return PrintService ps for RawPrint(ps, cmds)
 */
public static PrintService findPrinter(Object o){
  PrintService exact=null;
  PrintService begins=null;
  PrintService partial=null;
  String printerName;
  if (o == null) {
    return null;
  }
 else   if (o instanceof String) {
    printerName=""String_Node_Str"" + (String)o + ""String_Node_Str"";
  }
 else   if (o instanceof PrintService) {
    return (PrintService)o;
  }
 else {
    printerName=""String_Node_Str"" + o.toString() + ""String_Node_Str"";
  }
  getPrinterList();
  LogIt.log(Level.INFO,""String_Node_Str"" + printers.length + ""String_Node_Str"");
  LogIt.log(Level.INFO,""String_Node_Str"" + printerName);
  Pattern p1=Pattern.compile(""String_Node_Str"" + printerName + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Pattern p2=Pattern.compile(""String_Node_Str"" + printerName,Pattern.CASE_INSENSITIVE);
  Pattern p3=Pattern.compile(printerName,Pattern.CASE_INSENSITIVE);
  for (  PrintService ps : printers) {
    String sysPrinter=((PrinterName)ps.getAttribute(PrinterName.class)).getValue();
    Matcher m1=p1.matcher(sysPrinter);
    Matcher m2=p2.matcher(sysPrinter);
    Matcher m3=p3.matcher(sysPrinter);
    if (m1.find()) {
      exact=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
 else     if (m2.find()) {
      begins=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
 else     if (m3.find()) {
      partial=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
  }
  if (exact != null) {
    LogIt.log(""String_Node_Str"" + exact.getName());
    return exact;
  }
 else   if (begins != null) {
    LogIt.log(""String_Node_Str"" + begins.getName());
    return begins;
  }
 else   if (partial != null) {
    LogIt.log(""String_Node_Str"" + partial.getName());
    return partial;
  }
  LogIt.log(Level.WARNING,""String_Node_Str"" + printerName);
  return null;
}","/** 
 * Finds a printer in the PrintServices listing and returns it's respective PrintService.<p>  If a PrintService is supplied, the same PrintService is returned.  If an Object is supplied, it calls the ""toString()"" method and then does a standard name search.</p>
 * @param printerNameObject The object holding the name of the printer to search for.
 * @return PrintService ps for RawPrint(ps, cmds)
 */
public static PrintService findPrinter(Object printerNameObject){
  PrintService exact=null;
  PrintService begins=null;
  PrintService partial=null;
  String printerName;
  if (printerNameObject == null) {
    return null;
  }
 else   if (printerNameObject instanceof String) {
    printerName=""String_Node_Str"" + printerNameObject + ""String_Node_Str"";
  }
 else   if (printerNameObject instanceof PrintService) {
    return (PrintService)printerNameObject;
  }
 else {
    printerName=""String_Node_Str"" + printerNameObject.toString() + ""String_Node_Str"";
  }
  getPrinterList();
  LogIt.log(Level.INFO,""String_Node_Str"" + printers.length + ""String_Node_Str"");
  LogIt.log(Level.INFO,""String_Node_Str"" + printerName);
  Pattern p1=Pattern.compile(""String_Node_Str"" + printerName + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Pattern p2=Pattern.compile(""String_Node_Str"" + printerName,Pattern.CASE_INSENSITIVE);
  Pattern p3=Pattern.compile(printerName,Pattern.CASE_INSENSITIVE);
  for (  PrintService ps : printers) {
    String sysPrinter=ps.getAttribute(PrinterName.class).getValue();
    Matcher m1=p1.matcher(sysPrinter);
    Matcher m2=p2.matcher(sysPrinter);
    Matcher m3=p3.matcher(sysPrinter);
    if (m1.find()) {
      exact=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
 else     if (m2.find()) {
      begins=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
 else     if (m3.find()) {
      partial=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
  }
  if (exact != null) {
    LogIt.log(""String_Node_Str"" + exact.getName());
    return exact;
  }
 else   if (begins != null) {
    LogIt.log(""String_Node_Str"" + begins.getName());
    return begins;
  }
 else   if (partial != null) {
    LogIt.log(""String_Node_Str"" + partial.getName());
    return partial;
  }
  LogIt.log(Level.WARNING,""String_Node_Str"" + printerName);
  return null;
}",0.895123580494322
117086,"/** 
 * Returns a CSV format of printer names, convenient for JavaScript
 * @return
 */
public static String getPrinterListing(){
  return printerListing;
}","/** 
 * Returns a CSV format of printer names, convenient for JavaScript
 * @return CSV listing of printer names
 */
public static String getPrinterListing(){
  return printerListing;
}",0.9149560117302052
117087,"/** 
 * Convenience method for append(byte[]) combined with a String of specified charset
 * @param s
 * @param c
 * @return
 * @throws UnsupportedEncodingException 
 */
public final ByteArrayBuilder append(StringBuilder s,Charset c) throws UnsupportedEncodingException {
  return append(s.toString(),c);
}","/** 
 * Convenience method for append(byte[]) combined with a String of specified charset
 * @param stringBuilder the StringBuilder to append
 * @param charset the Charset of the StringBuilder
 * @return this <code>ByteArrayBuilder</code>
 * @throws UnsupportedEncodingException 
 */
public final ByteArrayBuilder append(StringBuilder stringBuilder,Charset charset) throws UnsupportedEncodingException {
  return append(stringBuilder.toString(),charset);
}",0.8031496062992126
117088,"/** 
 * Convenience method for encoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param dataToEncode byte array of data to encode in base64 form
 * @param filename Filename for saving encoded data
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if dataToEncode is null
 * @since 2.1
 */
public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {
  if (dataToEncode == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);
    bos.write(dataToEncode);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      bos.close();
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Convenience method for encoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param dataToEncode byte array of data to encode in base64 form
 * @param filename Filename for saving encoded data
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if dataToEncode is null
 * @since 2.1
 */
public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {
  if (dataToEncode == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);
    bos.write(dataToEncode);
  }
  finally {
    try {
      if (bos != null) {
        bos.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.9397590361445785
117089,"/** 
 * Convenience method for reading a binary file and base64-encoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param filename Filename for reading binary data
 * @return base64-encoded string
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static String encodeFromFile(String filename) throws java.io.IOException {
  String encodedData=null;
  Base64.InputStream bis=null;
  try {
    java.io.File file=new java.io.File(filename);
    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];
    int length=0;
    int numBytes=0;
    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);
    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {
      length+=numBytes;
    }
    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      bis.close();
    }
 catch (    Exception e) {
    }
  }
  return encodedData;
}","/** 
 * Convenience method for reading a binary file and base64-encoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param filename Filename for reading binary data
 * @return base64-encoded string
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static String encodeFromFile(String filename) throws java.io.IOException {
  String encodedData=null;
  Base64.InputStream bis=null;
  try {
    java.io.File file=new java.io.File(filename);
    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];
    int length=0;
    int numBytes;
    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);
    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {
      length+=numBytes;
    }
    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);
  }
  finally {
    try {
      if (bis != null) {
        bis.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return encodedData;
}",0.8885135135135135
117090,"/** 
 * Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.
 * @param s the string to decode
 * @param options encode options such as URL_SAFE
 * @return the decoded data
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if <tt>s</tt> is null
 * @since 1.4
 */
public static byte[] decode(String s,int options) throws java.io.IOException {
  if (s == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  byte[] bytes;
  try {
    bytes=s.getBytes(PREFERRED_ENCODING);
  }
 catch (  java.io.UnsupportedEncodingException uee) {
    bytes=s.getBytes();
  }
  bytes=decode(bytes,0,bytes.length,options);
  if (bytes != null && bytes.length >= 4) {
    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);
    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {
      java.io.ByteArrayInputStream bais=null;
      java.util.zip.GZIPInputStream gzis=null;
      java.io.ByteArrayOutputStream baos=null;
      byte[] buffer=new byte[2048];
      int length=0;
      try {
        baos=new java.io.ByteArrayOutputStream();
        bais=new java.io.ByteArrayInputStream(bytes);
        gzis=new java.util.zip.GZIPInputStream(bais);
        while ((length=gzis.read(buffer)) >= 0) {
          baos.write(buffer,0,length);
        }
        bytes=baos.toByteArray();
      }
 catch (      java.io.IOException e) {
      }
 finally {
        try {
          baos.close();
        }
 catch (        Exception e) {
        }
        try {
          gzis.close();
        }
 catch (        Exception e) {
        }
        try {
          bais.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  return bytes;
}","/** 
 * Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.
 * @param s the string to decode
 * @param options encode options such as URL_SAFE
 * @return the decoded data
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if <tt>s</tt> is null
 * @since 1.4
 */
public static byte[] decode(String s,int options) throws java.io.IOException {
  if (s == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  byte[] bytes;
  try {
    bytes=s.getBytes(PREFERRED_ENCODING);
  }
 catch (  java.io.UnsupportedEncodingException uee) {
    bytes=s.getBytes();
  }
  bytes=decode(bytes,0,bytes.length,options);
  if (bytes != null && bytes.length >= 4) {
    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);
    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {
      java.io.ByteArrayInputStream bais=null;
      java.util.zip.GZIPInputStream gzis=null;
      java.io.ByteArrayOutputStream baos=null;
      byte[] buffer=new byte[2048];
      int length;
      try {
        baos=new java.io.ByteArrayOutputStream();
        bais=new java.io.ByteArrayInputStream(bytes);
        gzis=new java.util.zip.GZIPInputStream(bais);
        while ((length=gzis.read(buffer)) >= 0) {
          baos.write(buffer,0,length);
        }
        bytes=baos.toByteArray();
      }
 catch (      java.io.IOException e) {
      }
 finally {
        try {
          if (baos != null) {
            baos.close();
          }
        }
 catch (        Exception ignored) {
        }
        try {
          if (gzis != null) {
            gzis.close();
          }
        }
 catch (        Exception ignored) {
        }
        try {
          if (bais != null) {
            bais.close();
          }
        }
 catch (        Exception ignored) {
        }
      }
    }
  }
  return bytes;
}",0.9370513528437328
117091,"/** 
 * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.
 * @param infile Input file
 * @param outfile Output file
 * @throws java.io.IOException if there is an error
 * @since 2.2
 */
public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {
  byte[] decoded=Base64.decodeFromFile(infile);
  java.io.OutputStream out=null;
  try {
    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
    out.write(decoded);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      out.close();
    }
 catch (    Exception ex) {
    }
  }
}","/** 
 * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.
 * @param infile Input file
 * @param outfile Output file
 * @throws java.io.IOException if there is an error
 * @since 2.2
 */
public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {
  byte[] decoded=Base64.decodeFromFile(infile);
  java.io.OutputStream out=null;
  try {
    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
    out.write(decoded);
  }
  finally {
    try {
      if (out != null) {
        out.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.8439773645917542
117092,"/** 
 * Returns one of the _SOMETHING_DECODABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
 */
private final static byte[] getDecodabet(int options){
  if ((options & URL_SAFE) == URL_SAFE) {
    return _URL_SAFE_DECODABET;
  }
 else   if ((options & ORDERED) == ORDERED) {
    return _ORDERED_DECODABET;
  }
 else {
    return _STANDARD_DECODABET;
  }
}","/** 
 * Returns one of the _SOMETHING_DECODABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
 */
private static byte[] getDecodabet(int options){
  if ((options & URL_SAFE) == URL_SAFE) {
    return _URL_SAFE_DECODABET;
  }
 else   if ((options & ORDERED) == ORDERED) {
    return _ORDERED_DECODABET;
  }
 else {
    return _STANDARD_DECODABET;
  }
}",0.9942307692307693
117093,"/** 
 * Convenience method for reading a base64-encoded file and decoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param filename Filename for reading encoded data
 * @return decoded byte array
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static byte[] decodeFromFile(String filename) throws java.io.IOException {
  byte[] decodedData=null;
  Base64.InputStream bis=null;
  try {
    java.io.File file=new java.io.File(filename);
    byte[] buffer=null;
    int length=0;
    int numBytes=0;
    if (file.length() > Integer.MAX_VALUE) {
      throw new java.io.IOException(""String_Node_Str"" + file.length() + ""String_Node_Str"");
    }
    buffer=new byte[(int)file.length()];
    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);
    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {
      length+=numBytes;
    }
    decodedData=new byte[length];
    System.arraycopy(buffer,0,decodedData,0,length);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      bis.close();
    }
 catch (    Exception e) {
    }
  }
  return decodedData;
}","/** 
 * Convenience method for reading a base64-encoded file and decoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param filename Filename for reading encoded data
 * @return decoded byte array
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static byte[] decodeFromFile(String filename) throws java.io.IOException {
  byte[] decodedData=null;
  Base64.InputStream bis=null;
  try {
    java.io.File file=new java.io.File(filename);
    byte[] buffer;
    int length=0;
    int numBytes;
    if (file.length() > Integer.MAX_VALUE) {
      throw new java.io.IOException(""String_Node_Str"" + file.length() + ""String_Node_Str"");
    }
    buffer=new byte[(int)file.length()];
    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);
    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {
      length+=numBytes;
    }
    decodedData=new byte[length];
    System.arraycopy(buffer,0,decodedData,0,length);
  }
  finally {
    try {
      if (bis != null) {
        bis.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return decodedData;
}",0.8992886559341071
117094,"/** 
 * Attempts to decode Base64 data and deserialize a Java Object within. Returns <tt>null</tt> if there was an error.
 * @param encodedObject The Base64 data to decode
 * @return The decoded and deserialized object
 * @throws NullPointerException if encodedObject is null
 * @throws java.io.IOException if there is a general error
 * @throws ClassNotFoundException if the decoded object is of a class that cannot be found by the JVM
 * @since 1.5
 */
public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {
  byte[] objBytes=decode(encodedObject);
  java.io.ByteArrayInputStream bais=null;
  java.io.ObjectInputStream ois=null;
  Object obj=null;
  try {
    bais=new java.io.ByteArrayInputStream(objBytes);
    ois=new java.io.ObjectInputStream(bais);
    obj=ois.readObject();
  }
 catch (  java.io.IOException e) {
    throw e;
  }
catch (  java.lang.ClassNotFoundException e) {
    throw e;
  }
 finally {
    try {
      bais.close();
    }
 catch (    Exception e) {
    }
    try {
      ois.close();
    }
 catch (    Exception e) {
    }
  }
  return obj;
}","/** 
 * Attempts to decode Base64 data and deserialize a Java Object within. Returns <tt>null</tt> if there was an error.
 * @param encodedObject The Base64 data to decode
 * @return The decoded and deserialized object
 * @throws NullPointerException if encodedObject is null
 * @throws java.io.IOException if there is a general error
 * @throws ClassNotFoundException if the decoded object is of a class that cannot be found by the JVM
 * @since 1.5
 */
public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {
  byte[] objBytes=decode(encodedObject);
  java.io.ByteArrayInputStream bais=null;
  java.io.ObjectInputStream ois=null;
  Object obj=null;
  try {
    bais=new java.io.ByteArrayInputStream(objBytes);
    ois=new java.io.ObjectInputStream(bais);
    obj=ois.readObject();
  }
  finally {
    try {
      if (bais != null) {
        bais.close();
      }
    }
 catch (    Exception ignored) {
    }
    try {
      if (ois != null) {
        ois.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return obj;
}",0.8981233243967829
117095,"/** 
 * Serializes an object and returns the Base64-encoded version of that serialized object. <p>As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p> The object is not GZip-compressed before being encoded. <p> Example options:<pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters </pre> <p> Example: <code>encodeObject( myObj, Base64.GZIP )</code> or <p> Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>
 * @param serializableObject The object to encode
 * @param options Specified options
 * @return The Base64-encoded object
 * @see Base64#GZIP
 * @see Base64#DO_BREAK_LINES
 * @throws java.io.IOException if there is an error
 * @since 2.0
 */
public static String encodeObject(java.io.Serializable serializableObject,int options) throws java.io.IOException {
  if (serializableObject == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  java.io.ByteArrayOutputStream baos=null;
  java.io.OutputStream b64os=null;
  java.io.ObjectOutputStream oos=null;
  try {
    baos=new java.io.ByteArrayOutputStream();
    b64os=new Base64.OutputStream(baos,ENCODE | options);
    oos=new java.io.ObjectOutputStream(b64os);
    oos.writeObject(serializableObject);
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      oos.close();
    }
 catch (    Exception e) {
    }
    try {
      b64os.close();
    }
 catch (    Exception e) {
    }
    try {
      baos.close();
    }
 catch (    Exception e) {
    }
  }
  try {
    return new String(baos.toByteArray(),PREFERRED_ENCODING);
  }
 catch (  java.io.UnsupportedEncodingException uue) {
    return new String(baos.toByteArray());
  }
}","/** 
 * Serializes an object and returns the Base64-encoded version of that serialized object. <p>As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p> The object is not GZip-compressed before being encoded. <p> Example options:<pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters </pre> <p> Example: <code>encodeObject( myObj, Base64.GZIP )</code> or <p> Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>
 * @param serializableObject The object to encode
 * @param options Specified options
 * @return The Base64-encoded object
 * @see Base64#GZIP
 * @see Base64#DO_BREAK_LINES
 * @throws java.io.IOException if there is an error
 * @since 2.0
 */
public static String encodeObject(java.io.Serializable serializableObject,int options) throws java.io.IOException {
  if (serializableObject == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  java.io.ByteArrayOutputStream baos=null;
  java.io.OutputStream b64os=null;
  java.io.ObjectOutputStream oos=null;
  try {
    baos=new java.io.ByteArrayOutputStream();
    b64os=new Base64.OutputStream(baos,ENCODE | options);
    oos=new java.io.ObjectOutputStream(b64os);
    oos.writeObject(serializableObject);
  }
  finally {
    try {
      if (oos != null) {
        oos.close();
      }
    }
 catch (    Exception ignored) {
    }
    try {
      if (b64os != null) {
        b64os.close();
      }
    }
 catch (    Exception ignored) {
    }
    try {
      if (baos != null) {
        baos.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  try {
    return new String(baos.toByteArray(),PREFERRED_ENCODING);
  }
 catch (  java.io.UnsupportedEncodingException uue) {
    return new String(baos.toByteArray());
  }
}",0.9163468917881812
117096,"/** 
 * Similar to   {@link #encodeBytes(byte[],int,int,int)} but returnsa byte array instead of instantiating a String. This is more efficient if you're working with I/O streams and have large data sets to encode.
 * @param source The data to convert
 * @param off Offset in array where conversion should begin
 * @param len Length of data to convert
 * @param options Specified options
 * @return The Base64-encoded data as a String
 * @see Base64#GZIP
 * @see Base64#DO_BREAK_LINES
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if source array is null
 * @throws IllegalArgumentException if source array, offset, or length are invalid
 * @since 2.3.1
 */
public static byte[] encodeBytesToBytes(byte[] source,int off,int len,int options) throws java.io.IOException {
  if (source == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (off < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + off);
  }
  if (len < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + len);
  }
  if (off + len > source.length) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",off,len,source.length));
  }
  if ((options & GZIP) > 0) {
    java.io.ByteArrayOutputStream baos=null;
    java.util.zip.GZIPOutputStream gzos=null;
    Base64.OutputStream b64os=null;
    try {
      baos=new java.io.ByteArrayOutputStream();
      b64os=new Base64.OutputStream(baos,ENCODE | options);
      gzos=new java.util.zip.GZIPOutputStream(b64os);
      gzos.write(source,off,len);
      gzos.close();
    }
 catch (    java.io.IOException e) {
      throw e;
    }
 finally {
      try {
        gzos.close();
      }
 catch (      Exception e) {
      }
      try {
        b64os.close();
      }
 catch (      Exception e) {
      }
      try {
        baos.close();
      }
 catch (      Exception e) {
      }
    }
    return baos.toByteArray();
  }
 else {
    boolean breakLines=(options & DO_BREAK_LINES) > 0;
    int encLen=(len / 3) * 4 + (len % 3 > 0 ? 4 : 0);
    if (breakLines) {
      encLen+=encLen / MAX_LINE_LENGTH;
    }
    byte[] outBuff=new byte[encLen];
    int d=0;
    int e=0;
    int len2=len - 2;
    int lineLength=0;
    for (; d < len2; d+=3, e+=4) {
      encode3to4(source,d + off,3,outBuff,e,options);
      lineLength+=4;
      if (breakLines && lineLength >= MAX_LINE_LENGTH) {
        outBuff[e + 4]=NEW_LINE;
        e++;
        lineLength=0;
      }
    }
    if (d < len) {
      encode3to4(source,d + off,len - d,outBuff,e,options);
      e+=4;
    }
    if (e < outBuff.length - 1) {
      byte[] finalOut=new byte[e];
      System.arraycopy(outBuff,0,finalOut,0,e);
      return finalOut;
    }
 else {
      return outBuff;
    }
  }
}","/** 
 * Similar to   {@link #encodeBytes(byte[],int,int,int)} but returnsa byte array instead of instantiating a String. This is more efficient if you're working with I/O streams and have large data sets to encode.
 * @param source The data to convert
 * @param off Offset in array where conversion should begin
 * @param len Length of data to convert
 * @param options Specified options
 * @return The Base64-encoded data as a String
 * @see Base64#GZIP
 * @see Base64#DO_BREAK_LINES
 * @throws java.io.IOException if there is an error
 * @throws NullPointerException if source array is null
 * @throws IllegalArgumentException if source array, offset, or length are invalid
 * @since 2.3.1
 */
public static byte[] encodeBytesToBytes(byte[] source,int off,int len,int options) throws java.io.IOException {
  if (source == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (off < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + off);
  }
  if (len < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + len);
  }
  if (off + len > source.length) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",off,len,source.length));
  }
  if ((options & GZIP) > 0) {
    java.io.ByteArrayOutputStream baos=null;
    java.util.zip.GZIPOutputStream gzos=null;
    Base64.OutputStream b64os=null;
    try {
      baos=new java.io.ByteArrayOutputStream();
      b64os=new Base64.OutputStream(baos,ENCODE | options);
      gzos=new java.util.zip.GZIPOutputStream(b64os);
      gzos.write(source,off,len);
      gzos.close();
    }
  finally {
      try {
        if (gzos != null) {
          gzos.close();
        }
      }
 catch (      Exception ignored) {
      }
      try {
        if (b64os != null) {
          b64os.close();
        }
      }
 catch (      Exception ignored) {
      }
      try {
        if (baos != null) {
          baos.close();
        }
      }
 catch (      Exception ignored) {
      }
    }
    return baos.toByteArray();
  }
 else {
    boolean breakLines=(options & DO_BREAK_LINES) > 0;
    int encLen=(len / 3) * 4 + (len % 3 > 0 ? 4 : 0);
    if (breakLines) {
      encLen+=encLen / MAX_LINE_LENGTH;
    }
    byte[] outBuff=new byte[encLen];
    int d=0;
    int e=0;
    int len2=len - 2;
    int lineLength=0;
    for (; d < len2; d+=3, e+=4) {
      encode3to4(source,d + off,3,outBuff,e,options);
      lineLength+=4;
      if (breakLines && lineLength >= MAX_LINE_LENGTH) {
        outBuff[e + 4]=NEW_LINE;
        e++;
        lineLength=0;
      }
    }
    if (d < len) {
      encode3to4(source,d + off,len - d,outBuff,e,options);
      e+=4;
    }
    if (e < outBuff.length - 1) {
      byte[] finalOut=new byte[e];
      System.arraycopy(outBuff,0,finalOut,0,e);
      return finalOut;
    }
 else {
      return outBuff;
    }
  }
}",0.9343091752945376
117097,"/** 
 * Convenience method for decoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param dataToDecode Base64-encoded data as a string
 * @param filename Filename for saving decoded data
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);
    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      bos.close();
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Convenience method for decoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>
 * @param dataToDecode Base64-encoded data as a string
 * @param filename Filename for saving decoded data
 * @throws java.io.IOException if there is an error
 * @since 2.1
 */
public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);
    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));
  }
  finally {
    try {
      if (bos != null) {
        bos.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.9308755760368664
117098,"/** 
 * Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
 */
private final static byte[] getAlphabet(int options){
  if ((options & URL_SAFE) == URL_SAFE) {
    return _URL_SAFE_ALPHABET;
  }
 else   if ((options & ORDERED) == ORDERED) {
    return _ORDERED_ALPHABET;
  }
 else {
    return _STANDARD_ALPHABET;
  }
}","/** 
 * Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.
 */
private static byte[] getAlphabet(int options){
  if ((options & URL_SAFE) == URL_SAFE) {
    return _URL_SAFE_ALPHABET;
  }
 else   if ((options & ORDERED) == ORDERED) {
    return _ORDERED_ALPHABET;
  }
 else {
    return _STANDARD_ALPHABET;
  }
}",0.9942418426103646
117099,"/** 
 * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.
 * @param infile Input file
 * @param outfile Output file
 * @throws java.io.IOException if there is an error
 * @since 2.2
 */
public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {
  String encoded=Base64.encodeFromFile(infile);
  java.io.OutputStream out=null;
  try {
    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
    out.write(encoded.getBytes(""String_Node_Str""));
  }
 catch (  java.io.IOException e) {
    throw e;
  }
 finally {
    try {
      out.close();
    }
 catch (    Exception ex) {
    }
  }
}","/** 
 * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.
 * @param infile Input file
 * @param outfile Output file
 * @throws java.io.IOException if there is an error
 * @since 2.2
 */
public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {
  String encoded=Base64.encodeFromFile(infile);
  java.io.OutputStream out=null;
  try {
    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
    out.write(encoded.getBytes(""String_Node_Str""));
  }
  finally {
    try {
      if (out != null) {
        out.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.8507347254447022
117100,"/** 
 * Finds a printer in the PrintServices listing and returns it's respective PrintService.<p>  If a PrintService is supplied, the same PrintService is returned.  If an Object is supplied, it calls the ""toString()"" method and then does a standard name search.</p>
 * @param o The object holding the name of the printer to search for.
 * @return PrintService ps for RawPrint(ps, cmds)
 */
public static PrintService findPrinter(Object o){
  PrintService exact=null;
  PrintService begins=null;
  PrintService partial=null;
  String printerName;
  if (o == null) {
    return null;
  }
 else   if (o instanceof String) {
    printerName=""String_Node_Str"" + (String)o + ""String_Node_Str"";
  }
 else   if (o instanceof PrintService) {
    return (PrintService)o;
  }
 else {
    printerName=""String_Node_Str"" + o.toString() + ""String_Node_Str"";
  }
  getPrinterList();
  LogIt.log(Level.INFO,""String_Node_Str"" + printers.length + ""String_Node_Str"");
  LogIt.log(Level.INFO,""String_Node_Str"" + printerName);
  Pattern p1=Pattern.compile(""String_Node_Str"" + printerName + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Pattern p2=Pattern.compile(""String_Node_Str"" + printerName,Pattern.CASE_INSENSITIVE);
  Pattern p3=Pattern.compile(printerName,Pattern.CASE_INSENSITIVE);
  for (  PrintService ps : printers) {
    String sysPrinter=((PrinterName)ps.getAttribute(PrinterName.class)).getValue();
    Matcher m1=p1.matcher(sysPrinter);
    Matcher m2=p2.matcher(sysPrinter);
    Matcher m3=p3.matcher(sysPrinter);
    if (m1.find()) {
      exact=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
 else     if (m2.find()) {
      begins=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
 else     if (m3.find()) {
      partial=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
  }
  if (exact != null) {
    LogIt.log(""String_Node_Str"" + exact.getName());
    return exact;
  }
 else   if (begins != null) {
    LogIt.log(""String_Node_Str"" + begins.getName());
    return begins;
  }
 else   if (partial != null) {
    LogIt.log(""String_Node_Str"" + partial.getName());
    return partial;
  }
  LogIt.log(Level.WARNING,""String_Node_Str"" + printerName);
  return null;
}","/** 
 * Finds a printer in the PrintServices listing and returns it's respective PrintService.<p>  If a PrintService is supplied, the same PrintService is returned.  If an Object is supplied, it calls the ""toString()"" method and then does a standard name search.</p>
 * @param printerNameObject The object holding the name of the printer to search for.
 * @return PrintService ps for RawPrint(ps, cmds)
 */
public static PrintService findPrinter(Object printerNameObject){
  PrintService exact=null;
  PrintService begins=null;
  PrintService partial=null;
  String printerName;
  if (printerNameObject == null) {
    return null;
  }
 else   if (printerNameObject instanceof String) {
    printerName=""String_Node_Str"" + printerNameObject + ""String_Node_Str"";
  }
 else   if (printerNameObject instanceof PrintService) {
    return (PrintService)printerNameObject;
  }
 else {
    printerName=""String_Node_Str"" + printerNameObject.toString() + ""String_Node_Str"";
  }
  getPrinterList();
  LogIt.log(Level.INFO,""String_Node_Str"" + printers.length + ""String_Node_Str"");
  LogIt.log(Level.INFO,""String_Node_Str"" + printerName);
  Pattern p1=Pattern.compile(""String_Node_Str"" + printerName + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Pattern p2=Pattern.compile(""String_Node_Str"" + printerName,Pattern.CASE_INSENSITIVE);
  Pattern p3=Pattern.compile(printerName,Pattern.CASE_INSENSITIVE);
  for (  PrintService ps : printers) {
    String sysPrinter=ps.getAttribute(PrinterName.class).getValue();
    Matcher m1=p1.matcher(sysPrinter);
    Matcher m2=p2.matcher(sysPrinter);
    Matcher m3=p3.matcher(sysPrinter);
    if (m1.find()) {
      exact=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
 else     if (m2.find()) {
      begins=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
 else     if (m3.find()) {
      partial=ps;
      LogIt.log(""String_Node_Str"" + sysPrinter);
    }
  }
  if (exact != null) {
    LogIt.log(""String_Node_Str"" + exact.getName());
    return exact;
  }
 else   if (begins != null) {
    LogIt.log(""String_Node_Str"" + begins.getName());
    return begins;
  }
 else   if (partial != null) {
    LogIt.log(""String_Node_Str"" + partial.getName());
    return partial;
  }
  LogIt.log(Level.WARNING,""String_Node_Str"" + printerName);
  return null;
}",0.895123580494322
117101,"/** 
 * Returns a CSV format of printer names, convenient for JavaScript
 * @return
 */
public static String getPrinterListing(){
  return printerListing;
}","/** 
 * Returns a CSV format of printer names, convenient for JavaScript
 * @return CSV listing of printer names
 */
public static String getPrinterListing(){
  return printerListing;
}",0.9149560117302052
117102,"/** 
 * Returns the cached version of the found serial ports on the system. i.e. [""COM1"",""COM2"",""COM3""] or [""/dev/tty0"",""/dev/tty1""]
 * @return 
 */
public String getSerialPorts(){
  return this.serialPorts;
}","/** 
 * Returns the cached version of the found serial ports on the system. i.e. [""COM1"",""COM2"",""COM3""] or [""/dev/tty0"",""/dev/tty1""]
 * @return Cached version of serial ports
 */
public String getSerialPorts(){
  return this.serialPorts;
}",0.9330357142857144
117103,"/** 
 * Timeout in milliseconds for the port.readBytes() function. Default is 1200 (1.2 seconds)
 * @param timeout 
 */
public final void setTimeout(int timeout){
  this.timeout=timeout;
}","/** 
 * Timeout in milliseconds for the port.readBytes() function. Default is 1200 (1.2 seconds)
 * @param timeout the timeout
 */
public final void setTimeout(int timeout){
  this.timeout=timeout;
}",0.9715762273901808
117104,"/** 
 * Return whether or not the serial port is open
 * @return 
 */
public boolean isOpen(){
  return port == null ? false : port.isOpened();
}","/** 
 * Return whether or not the serial port is open
 * @return boolean indicating if port is open
 */
public boolean isOpen(){
  return port != null && port.isOpened();
}",0.8517350157728707
117105,"/** 
 * Timeout in milliseconds for the port.readBytes() function.
 * @return 
 */
public int getTimeout(){
  return this.timeout;
}","/** 
 * Timeout in milliseconds for the port.readBytes() function.
 * @return the timeout
 */
public int getTimeout(){
  return this.timeout;
}",0.96
117106,"/** 
 * Caches a comma delimited list of ports found on this system.  Also caches the array so that it can be referenced by index when opening the port later.
 * @return 
 */
public String fetchSerialPorts(){
  StringBuilder sb=new StringBuilder();
  this.portArray=SerialPortList.getPortNames();
  for (int i=0; i < this.portArray.length; i++) {
    sb.append(this.portArray[i]).append(i < this.portArray.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  return (this.serialPorts=sb.toString());
}","/** 
 * Caches a comma delimited list of ports found on this system.  Also caches the array so that it can be referenced by index when opening the port later.
 * @return List of ports
 */
public String fetchSerialPorts(){
  StringBuilder sb=new StringBuilder();
  this.portArray=SerialPortList.getPortNames();
  for (int i=0; i < this.portArray.length; i++) {
    sb.append(this.portArray[i]).append(i < this.portArray.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  return (this.serialPorts=sb.toString());
}",0.9873417721518988
117107,"/** 
 * Closes the open serial port, if open.  If not, displays a warning message in the console and  continues quietly.  If the port cannot close, a  <code>SerialPortExcpetion</code> will be thrown.
 * @return
 * @throws SerialPortException 
 */
public boolean close() throws SerialPortException {
  if (port == null || !port.isOpened()) {
    LogIt.log(Level.WARNING,""String_Node_Str"" + portName + ""String_Node_Str"");
    return false;
  }
  boolean closed=port.closePort();
  if (!closed) {
    LogIt.log(Level.WARNING,""String_Node_Str"" + portName + ""String_Node_Str"");
  }
 else {
    LogIt.log(""String_Node_Str"" + portName + ""String_Node_Str"");
  }
  port=null;
  portName=null;
  return closed;
}","/** 
 * Closes the open serial port, if open.  If not, displays a warning message in the console and  continues quietly.  If the port cannot close, a  <code>SerialPortExcpetion</code> will be thrown.
 * @return boolean indicating success
 * @throws SerialPortException 
 */
public boolean close() throws SerialPortException {
  if (port == null || !port.isOpened()) {
    LogIt.log(Level.WARNING,""String_Node_Str"" + portName + ""String_Node_Str"");
    return false;
  }
  boolean closed=port.closePort();
  if (!closed) {
    LogIt.log(Level.WARNING,""String_Node_Str"" + portName + ""String_Node_Str"");
  }
 else {
    LogIt.log(""String_Node_Str"" + portName + ""String_Node_Str"");
  }
  port=null;
  portName=null;
  return closed;
}",0.981132075471698
117108,"/** 
 * Allow a port to be selected from array of returned ports.
 * @param portID
 * @return
 * @throws SerialPortException
 * @throws SerialException 
 */
public boolean open(int portID) throws SerialPortException, SerialException {
  if (this.serialPorts == null) {
    this.getSerialPorts();
  }
  if (this.serialPorts.equals(""String_Node_Str"")) {
    throw new SerialException(""String_Node_Str"");
  }
  if (portID > -1 && this.portArray.length > 0 && this.portArray.length > portID) {
    return open(portArray[portID]);
  }
 else {
    throw new SerialException(""String_Node_Str"" + portID + ""String_Node_Str""+ ""String_Node_Str""+ serialPorts);
  }
}","/** 
 * Allow a port to be selected from array of returned ports.
 * @param portID the port ID to select
 * @return boolean indicting success
 * @throws SerialPortException
 * @throws SerialException 
 */
public boolean open(int portID) throws SerialPortException, SerialException {
  if (this.serialPorts == null) {
    this.getSerialPorts();
  }
  if (""String_Node_Str"".equals(this.serialPorts)) {
    throw new SerialException(""String_Node_Str"");
  }
  if (portID > -1 && this.portArray.length > 0 && this.portArray.length > portID) {
    return open(portArray[portID]);
  }
 else {
    throw new SerialException(""String_Node_Str"" + portID + ""String_Node_Str""+ ""String_Node_Str""+ serialPorts);
  }
}",0.915929203539823
117109,"private void generateIntArray(){
  LogIt.log(""String_Node_Str"");
  imageAsIntArray=new int[(int)(imageAsBooleanArray.length / 8)];
  for (int i=0; i < imageAsIntArray.length; i++) {
    for (int k=0; k < 8; k++) {
      imageAsIntArray[i]+=(imageAsBooleanArray[8 * i + k] ? 1 : 0) << 7 - k;
    }
  }
}","private void generateIntArray(){
  LogIt.log(""String_Node_Str"");
  imageAsIntArray=new int[imageAsBooleanArray.length / 8];
  for (int i=0; i < imageAsIntArray.length; i++) {
    for (int k=0; k < 8; k++) {
      imageAsIntArray[i]+=(imageAsBooleanArray[8 * i + k] ? 1 : 0) << 7 - k;
    }
  }
}",0.9882747068676716
117110,"/** 
 * Initializes the ImageWrapper. This populates the internal structures with the data created from the original image. It is normally called by the constructor, but if for any reason you change the image contents (for example, if you resize the image), it must be initialized again prior to calling getImageCommand()
 */
private final void init(){
  LogIt.log(""String_Node_Str"");
  generateBlackPixels();
  generateIntArray();
}","/** 
 * Initializes the ImageWrapper. This populates the internal structures with the data created from the original image. It is normally called by the constructor, but if for any reason you change the image contents (for example, if you resize the image), it must be initialized again prior to calling getImageCommand()
 */
private void init(){
  LogIt.log(""String_Node_Str"");
  generateBlackPixels();
  generateIntArray();
}",0.9930232558139536
117111,"/** 
 * Generates the EPL2 commands to print an image. One command is emitted per line of the image. This avoids issues with too long commands.
 * @return The commands to print the image as an array of bytes, ready to besent to the printer
 */
public byte[] getImageCommand() throws InvalidRawImageException, UnsupportedEncodingException {
  this.getByteBuffer().clear();
switch (languageType) {
case ESCP:
case ESCP2:
    appendEpsonSlices(this.getByteBuffer());
  break;
case ZPL:
case ZPLII:
String zplHexAsString=ByteUtilities.getHexString(getImageAsIntArray());
int byteLen=zplHexAsString.length() / 2;
int perRow=byteLen / getHeight();
StringBuilder zpl=new StringBuilder(""String_Node_Str"").append(byteLen).append(""String_Node_Str"").append(byteLen).append(""String_Node_Str"").append(perRow).append(""String_Node_Str"").append(zplHexAsString);
this.getByteBuffer().append(zpl,charset);
break;
case EPL:
case EPL2:
StringBuilder epl=new StringBuilder(""String_Node_Str"").append(getxPos()).append(""String_Node_Str"").append(getyPos()).append(""String_Node_Str"").append(getWidth() / 8).append(""String_Node_Str"").append(getHeight()).append(""String_Node_Str"");
this.getByteBuffer().append(epl,charset).append(getBytes());
break;
case CPCL:
String cpclHexAsString=ByteUtilities.getHexString(getImageAsIntArray());
StringBuilder cpcl=new StringBuilder(""String_Node_Str"").append((int)(getWidth() / 8)).append(""String_Node_Str"").append(getHeight()).append(""String_Node_Str"").append(getxPos()).append(""String_Node_Str"").append(getyPos()).append(""String_Node_Str"").append(cpclHexAsString);
this.getByteBuffer().append(cpcl,charset);
break;
default :
throw new InvalidRawImageException(charset.name() + ""String_Node_Str"");
}
return this.getByteBuffer().getByteArray();
}","/** 
 * Generates the EPL2 commands to print an image. One command is emitted per line of the image. This avoids issues with too long commands.
 * @return The commands to print the image as an array of bytes, ready to besent to the printer
 */
public byte[] getImageCommand() throws InvalidRawImageException, UnsupportedEncodingException {
  this.getByteBuffer().clear();
switch (languageType) {
case ESCP:
case ESCP2:
    appendEpsonSlices(this.getByteBuffer());
  break;
case ZPL:
case ZPLII:
String zplHexAsString=ByteUtilities.getHexString(getImageAsIntArray());
int byteLen=zplHexAsString.length() / 2;
int perRow=byteLen / getHeight();
StringBuilder zpl=new StringBuilder(""String_Node_Str"").append(byteLen).append(""String_Node_Str"").append(byteLen).append(""String_Node_Str"").append(perRow).append(""String_Node_Str"").append(zplHexAsString);
this.getByteBuffer().append(zpl,charset);
break;
case EPL:
case EPL2:
StringBuilder epl=new StringBuilder(""String_Node_Str"").append(getxPos()).append(""String_Node_Str"").append(getyPos()).append(""String_Node_Str"").append(getWidth() / 8).append(""String_Node_Str"").append(getHeight()).append(""String_Node_Str"");
this.getByteBuffer().append(epl,charset).append(getBytes());
break;
case CPCL:
String cpclHexAsString=ByteUtilities.getHexString(getImageAsIntArray());
StringBuilder cpcl=new StringBuilder(""String_Node_Str"").append(getWidth() / 8).append(""String_Node_Str"").append(getHeight()).append(""String_Node_Str"").append(getxPos()).append(""String_Node_Str"").append(getyPos()).append(""String_Node_Str"").append(cpclHexAsString);
this.getByteBuffer().append(cpcl,charset);
break;
default :
throw new InvalidRawImageException(charset.name() + ""String_Node_Str"");
}
return this.getByteBuffer().getByteArray();
}",0.998003992015968
117112,"/** 
 * http://android-essential-devtopics.blogspot.com/2013/02/sending-bit-image-to-epson-printer.html
 * @author Oleg Morozov 02/21/2013 (via public domain)
 * @author Tres Finocchiaro 10/01/2013
 * @param b 
 */
private void appendEpsonSlices(ByteArrayBuilder builder){
  builder.append(new byte[]{0x1B,0x33,24});
  int offset=0;
  while (offset < getHeight()) {
    byte nL=(byte)((int)(getWidth() % 256));
    byte nH=(byte)((int)(getWidth() / 256));
    builder.append(new byte[]{0x1B,0x2A,(byte)dotDensity,nL,nH});
    for (int x=0; x < getWidth(); ++x) {
      for (int k=0; k < 3; ++k) {
        byte slice=0;
        for (int b=0; b < 8; ++b) {
          int y=(((offset / 8) + k) * 8) + b;
          int i=(y * getWidth()) + x;
          boolean v=false;
          if (i < getImageAsBooleanArray().length) {
            v=getImageAsBooleanArray()[i];
          }
          slice|=(byte)((v ? 1 : 0) << (7 - b));
        }
        builder.append(new byte[]{slice});
      }
    }
    offset+=24;
    builder.append(new byte[]{10});
  }
  builder.append(new byte[]{0x1B,0x33,30});
}","/** 
 * http://android-essential-devtopics.blogspot.com/2013/02/sending-bit-image-to-epson-printer.html
 * @param builder the ByteArrayBuilder to use
 * @author Oleg Morozov 02/21/2013 (via public domain)
 * @author Tres Finocchiaro 10/01/2013
 */
private void appendEpsonSlices(ByteArrayBuilder builder){
  builder.append(new byte[]{0x1B,0x33,24});
  int offset=0;
  while (offset < getHeight()) {
    byte nL=(byte)((int)(getWidth() % 256));
    byte nH=(byte)((int)(getWidth() / 256));
    builder.append(new byte[]{0x1B,0x2A,(byte)dotDensity,nL,nH});
    for (int x=0; x < getWidth(); ++x) {
      for (int k=0; k < 3; ++k) {
        byte slice=0;
        for (int b=0; b < 8; ++b) {
          int y=(((offset / 8) + k) * 8) + b;
          int i=(y * getWidth()) + x;
          boolean v=false;
          if (i < getImageAsBooleanArray().length) {
            v=getImageAsBooleanArray()[i];
          }
          slice|=(byte)((v ? 1 : 0) << (7 - b));
        }
        builder.append(new byte[]{slice});
      }
    }
    offset+=24;
    builder.append(new byte[]{10});
  }
  builder.append(new byte[]{0x1B,0x33,30});
}",0.9733634311512416
117113,"public void setCopies(int copies){
  this.copies=Integer.valueOf(copies);
}","public void setCopies(int copies){
  this.copies=copies;
}",0.8721804511278195
117114,"/** 
 * Converts typed Hex (<code>String</code> base 16) to <code>byte[]</code>. This is expecially useful for special characters that are appended via JavaScript, specifically the ""\0"" or <code>NUL</code> character, which will early terminate a JavaScript <code>String</code>.
 * @param s
 * @return
 * @throws NumberFormatException
 */
public static byte[] hexStringToByteArray(String s) throws NumberFormatException {
  byte[] data=new byte[0];
  if (s != null && s.length() > 0) {
    String[] split;
    if (s.length() > 2) {
      if (s.length() >= 3 && s.contains(""String_Node_Str"")) {
        s=s.startsWith(""String_Node_Str"") ? s.substring(1) : s;
        s=s.endsWith(""String_Node_Str"") ? s.substring(0,s.length() - 1) : s;
        split=s.split(""String_Node_Str"");
      }
 else {
        split=s.split(""String_Node_Str"");
      }
      data=new byte[split.length];
      for (int i=0; i < split.length; i++) {
        data[i]=Byte.parseByte(split[i],16);
      }
    }
 else     if (s.length() == 2) {
      data=new byte[]{Byte.parseByte(s)};
    }
  }
  return data;
}","/** 
 * Converts typed Hex (<code>String</code> base 16) to <code>byte[]</code>. This is expecially useful for special characters that are appended via JavaScript, specifically the ""\0"" or <code>NUL</code> character, which will early terminate a JavaScript <code>String</code>.
 * @param s
 * @return
 * @throws NumberFormatException
 */
public static byte[] hexStringToByteArray(String s) throws NumberFormatException {
  byte[] data=new byte[0];
  if (s != null && s.length() > 0) {
    String[] split;
    if (s.length() > 2) {
      if (s.length() >= 3 && s.contains(""String_Node_Str"")) {
        s=s.startsWith(""String_Node_Str"") ? s.substring(1) : s;
        s=s.endsWith(""String_Node_Str"") ? s.substring(0,s.length() - 1) : s;
        split=s.split(""String_Node_Str"");
      }
 else {
        split=s.split(""String_Node_Str"");
      }
      data=new byte[split.length];
      for (int i=0; i < split.length; i++) {
        Integer signedByte=Integer.parseInt(split[i],16);
        data[i]=(byte)(signedByte & 0xFF);
      }
    }
 else     if (s.length() == 2) {
      data=new byte[]{Byte.parseByte(s)};
    }
  }
  return data;
}",0.9585585585585584
117115,"/** 
 * Checks if the stored   {@code Collection} does not contain the provided item.<p>This method throws an  {@code AssertionError} if<ul> <li>the stored  {@code Collection} does contain the passed {@code item}</li> <li>the given   {@code Collection} is {@code null}</li> </ul> </p>
 * @param item the {@code Object} which the {@code Collection} should not contain.
 */
public void toNotContain(final Object item){
  expectNotNull(this.getValue(),""String_Node_Str"",item);
  expectTrue(!this.getValue().contains(item),""String_Node_Str"",this.getValue(),item);
}","/** 
 * Checks if the stored   {@code Collection} does not contain the provided item.<p>This method throws an  {@code AssertionError} if<ul> <li>the stored  {@code Collection} does contain the passed {@code item}</li> <li>the given   {@code Collection} is {@code null}</li> </ul>
 * @param item the {@code Object} which the {@code Collection} should not contain.
 */
public void toNotContain(final Object item){
  expectNotNull(this.getValue(),""String_Node_Str"",item);
  expectTrue(!this.getValue().contains(item),""String_Node_Str"",this.getValue(),item);
}",0.9955237242614146
117116,"/** 
 * Checks if the given   {@code Collection} has the expected size<p>This method throws an  {@code AssertionError} if<ul> <li>the stored  {@code Collection} has a different size than the passed value</li><li>the stored  {@code Collection} is {@code null}</li> </ul> </p>
 * @param size The expected size of the collection
 */
public void toHaveSize(final int size){
  expectNotNull(this.getValue(),""String_Node_Str"",size);
  expectTrue(this.getValue().size() == size,""String_Node_Str"" + ""String_Node_Str"",this.getValue(),size,this.getValue().size());
}","/** 
 * Checks if the given   {@code Collection} has the expected size<p>This method throws an  {@code AssertionError} if<ul> <li>the stored  {@code Collection} has a different size than the passed value</li><li>the stored  {@code Collection} is {@code null}</li> </ul>
 * @param size The expected size of the collection
 */
public void toHaveSize(final int size){
  expectNotNull(this.getValue(),""String_Node_Str"",size);
  expectTrue(this.getValue().size() == size,""String_Node_Str"" + ""String_Node_Str"",this.getValue(),size,this.getValue().size());
}",0.995483288166215
117117,"/** 
 * Checks if the stored   {@code Collection} contains the provided item.<p>This method throws an  {@code AssertionError} if<ul> <li>the stored  {@code Collection} does not contain the passed {@code item}</li> <li>the given   {@code Collection} is {@code null}</li> </ul> </p>
 * @param item the {@code Object} which the {@code Collection} should contain.
 */
public void toContain(final Object item){
  expectNotNull(this.getValue(),""String_Node_Str"",item);
  expectTrue(this.getValue().contains(item),""String_Node_Str"",this.getValue(),item);
}","/** 
 * Checks if the stored   {@code Collection} contains the provided item.<p>This method throws an  {@code AssertionError} if<ul> <li>the stored  {@code Collection} does not contain the passed {@code item}</li> <li>the given   {@code Collection} is {@code null}</li> </ul>
 * @param item the {@code Object} which the {@code Collection} should contain.
 */
public void toContain(final Object item){
  expectNotNull(this.getValue(),""String_Node_Str"",item);
  expectTrue(this.getValue().contains(item),""String_Node_Str"",this.getValue(),item);
}",0.9954254345837146
117118,"/** 
 * Checks if the stored   {@code Map} does not contain the given {@code key}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} contains the given {@code key}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 */
public void toNotContainKey(final K key){
  expectNotNull(this.getValue(),""String_Node_Str"",key);
  expectTrue(!this.getValue().containsKey(key),""String_Node_Str"",this.getValue(),key);
}","/** 
 * Checks if the stored   {@code Map} does not contain the given {@code key}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} contains the given {@code key}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 * @param key the expected key
 */
public void toNotContainKey(final K key){
  expectNotNull(this.getValue(),""String_Node_Str"",key);
  expectTrue(!this.getValue().containsKey(key),""String_Node_Str"",this.getValue(),key);
}",0.966702470461869
117119,"/** 
 * Checks if the stored   {@code Map} has a given {@code size}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} does not have the given {@code size}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 */
public void toHaveSize(final int size){
  expectNotNull(this.getValue(),""String_Node_Str"",size);
  expectTrue(this.getValue().size() == size,""String_Node_Str"",this.getValue(),size,this.getValue().size());
}","/** 
 * Checks if the stored   {@code Map} has a given {@code size}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} does not have the given {@code size}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 * @param size the expected size
 */
public void toHaveSize(final int size){
  expectNotNull(this.getValue(),""String_Node_Str"",size);
  expectTrue(this.getValue().size() == size,""String_Node_Str"",this.getValue(),size,this.getValue().size());
}",0.9655172413793104
117120,"/** 
 * Checks if the stored   {@code Map} contains the given {@code key}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} does not contain the given {@code key}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 */
public void toContainKey(final K key){
  expectNotNull(this.getValue(),""String_Node_Str"",key);
  expectTrue(this.getValue().containsKey(key),""String_Node_Str"",this.getValue(),key);
}","/** 
 * Checks if the stored   {@code Map} contains the given {@code key}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} does not contain the given {@code key}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 * @param key the expected key
 */
public void toContainKey(final K key){
  expectNotNull(this.getValue(),""String_Node_Str"",key);
  expectTrue(this.getValue().containsKey(key),""String_Node_Str"",this.getValue(),key);
}",0.9664138678223184
117121,"/** 
 * Checks if the stored   {@code Map} does not contain the given {@code value}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} does not contain the given {@code value}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 */
public void toNotContainValue(final V value){
  expectNotNull(this.getValue(),""String_Node_Str"",value);
  expectTrue(!this.getValue().containsValue(value),""String_Node_Str"",this.getValue(),value);
}","/** 
 * Checks if the stored   {@code Map} does not contain the given {@code value}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} does not contain the given {@code value}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 * @param value the expected value
 */
public void toNotContainValue(final V value){
  expectNotNull(this.getValue(),""String_Node_Str"",value);
  expectTrue(!this.getValue().containsValue(value),""String_Node_Str"",this.getValue(),value);
}",0.9643947100712106
117122,"/** 
 * Checks if the stored   {@code Map} contains the given {@code value}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} does not contain the given {@code value}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 */
public void toContainValue(final V value){
  expectNotNull(this.getValue(),""String_Node_Str"",value);
  expectTrue(this.getValue().containsValue(value),""String_Node_Str"",this.getValue(),value);
}","/** 
 * Checks if the stored   {@code Map} contains the given {@code value}. <p>This method throws an   {@code AssertionError} if<ul> <li>the stored  {@code Map} does not contain the given {@code value}</li> <li>the stored   {@code Map} is {@code null}</li> </ul>
 * @param value the expected value
 */
public void toContainValue(final V value){
  expectNotNull(this.getValue(),""String_Node_Str"",value);
  expectTrue(this.getValue().containsValue(value),""String_Node_Str"",this.getValue(),value);
}",0.9635036496350364
117123,"/** 
 * Checks if the stored value is an instance of the   {@code expectedClass}<p>This method throws an   {@code AssertionError} if the stored value is not of instance of {@code expectedClass}.
 * @param expectedClass
 */
public void toBeInstanceOf(Class<?> expectedClass){
  expectTrue(expectedClass.isInstance(value),""String_Node_Str"",this.value,expectedClass.getName());
}","/** 
 * Checks if the stored value is an instance of the   {@code expectedClass}<p>This method throws an   {@code AssertionError} if the stored value is not of instance of {@code expectedClass}.
 * @param expectedClass The expected class
 */
public void toBeInstanceOf(Class<?> expectedClass){
  expectTrue(expectedClass.isInstance(value),""String_Node_Str"",this.value,expectedClass.getName());
}",0.9753566796368353
117124,"/** 
 * Checks if an exception of type   {@code expectedExceptionClass} with message {@code expectedMessage} was thrown.<p>This method throws an  {@code AssertionError} if:<ul> <li>no exception was thrown.</li> <li>the thrown exception is not an instance of  {@code expectedExceptionClass}</li> <li>the message of the thrown exception is not equal   {@code expectedMessage}</li> </ul>
 * @param expectedExceptionClass the expected exception
 * @param expectedMessage the expected message
 */
public <T extends Exception>void toThrow(Class<T> expectedExceptionClass,String expectedMessage){
  Arguments.ensureNotNull(expectedMessage,""String_Node_Str"");
  this.toThrow(expectedExceptionClass);
  String exceptionMessage=this.exception.getMessage();
  Expectations.expectTrue(expectedMessage.equals(exceptionMessage),""String_Node_Str"",exceptionMessage,exceptionMessage);
}","/** 
 * Checks if an exception of type   {@code expectedExceptionClass} with message {@code expectedMessage} was thrown.<p>This method throws an  {@code AssertionError} if:<ul> <li>no exception was thrown.</li> <li>the thrown exception is not an instance of  {@code expectedExceptionClass}</li> <li>the message of the thrown exception is not equal   {@code expectedMessage}</li> </ul>
 * @param expectedExceptionClass the expected exception
 * @param expectedMessage the expected message
 */
public <T extends Exception>void toThrow(Class<T> expectedExceptionClass,String expectedMessage){
  Arguments.ensureNotNull(expectedMessage,""String_Node_Str"");
  this.toThrow(expectedExceptionClass);
  String exceptionMessage=this.exception.getMessage();
  Expectations.expectTrue(expectedMessage.equals(exceptionMessage),""String_Node_Str"",expectedMessage,exceptionMessage);
}",0.9925158318940702
117125,"/** 
 * Gets the stack in the fusion crafting core. Also known as the crafting catalyst.<br> slot 0 = Input Slot<br> slot 1 == output slot
 */
ItemStack getStackInCore(int slot);","/** 
 * Gets the stack in the fusion crafting core. Also known as the crafting catalyst.<br> slot 0 = Input Slot<br> slot 1 == output slot
 */
@Nonnull ItemStack getStackInCore(int slot);",0.9753424657534246
117126,"/** 
 * Sets the stack in the specified slot.<br> slot 0 = Input Slot<br> slot 1 == output slot
 */
void setStackInCore(int slot,ItemStack stack);","/** 
 * Sets the stack in the specified slot.<br> slot 0 = Input Slot<br> slot 1 == output slot
 */
void setStackInCore(int slot,@Nonnull ItemStack stack);",0.9700996677740864
117127,"@Override public void craft(IFusionCraftingInventory inventory,World world,BlockPos pos){
  if (!matches(inventory,world,pos)) {
    return;
  }
  List<ICraftingPedestal> pedestals=new ArrayList<>();
  pedestals.addAll(inventory.getPedestals());
  for (  Object ingredient : ingredients) {
    for (    ICraftingPedestal pedestal : pedestals) {
      if (!pedestal.getStackInPedestal().isEmpty() && OreDictHelper.areStacksEqual(ingredient,pedestal.getStackInPedestal()) && pedestal.getPedestalTier() >= craftingTier) {
        ItemStack stack=pedestal.getStackInPedestal();
        if (stack.getItem().hasContainerItem(stack)) {
          stack=stack.getItem().getContainerItem(stack);
        }
 else {
          stack.shrink(1);
          if (stack.getCount() <= 0) {
            stack=ItemStack.EMPTY;
          }
        }
        pedestal.setStackInPedestal(stack);
        pedestals.remove(pedestal);
        break;
      }
    }
  }
  ItemStack catalyst=inventory.getStackInCore(0);
  catalyst.shrink(this.catalyst.getCount());
  if (catalyst.getCount() <= 0) {
    catalyst=ItemStack.EMPTY;
  }
  inventory.setStackInCore(0,catalyst);
  inventory.setStackInCore(1,result.copy());
}","@Override public void craft(IFusionCraftingInventory inventory,World world,BlockPos pos){
  if (!matches(inventory,world,pos)) {
    return;
  }
  List<ICraftingInjector> pedestals=new ArrayList<>();
  pedestals.addAll(inventory.getInjectors());
  for (  Object ingredient : ingredients) {
    for (    ICraftingInjector pedestal : pedestals) {
      if (!pedestal.getStackInPedestal().isEmpty() && OreDictHelper.areStacksEqual(ingredient,pedestal.getStackInPedestal()) && pedestal.getPedestalTier() >= craftingTier) {
        ItemStack stack=pedestal.getStackInPedestal();
        if (stack.getItem().hasContainerItem(stack)) {
          stack=stack.getItem().getContainerItem(stack);
        }
 else {
          stack.shrink(1);
          if (stack.getCount() <= 0) {
            stack=ItemStack.EMPTY;
          }
        }
        pedestal.setStackInPedestal(stack);
        pedestals.remove(pedestal);
        break;
      }
    }
  }
  ItemStack catalyst=inventory.getStackInCore(0);
  catalyst.shrink(this.catalyst.getCount());
  if (catalyst.getCount() <= 0) {
    catalyst=ItemStack.EMPTY;
  }
  inventory.setStackInCore(0,catalyst);
  inventory.setStackInCore(1,result.copy());
}",0.9798149705634988
117128,"@Override public String canCraft(IFusionCraftingInventory inventory,World world,BlockPos pos){
  if (!inventory.getStackInCore(1).isEmpty()) {
    return ""String_Node_Str"";
  }
  List<ICraftingPedestal> pedestals=new ArrayList<ICraftingPedestal>();
  pedestals.addAll(inventory.getPedestals());
  for (  ICraftingPedestal pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty() && pedestal.getPedestalTier() < craftingTier) {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}","@Override public String canCraft(IFusionCraftingInventory inventory,World world,BlockPos pos){
  if (!inventory.getStackInCore(1).isEmpty()) {
    return ""String_Node_Str"";
  }
  List<ICraftingInjector> pedestals=new ArrayList<ICraftingInjector>();
  pedestals.addAll(inventory.getInjectors());
  for (  ICraftingInjector pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty() && pedestal.getPedestalTier() < craftingTier) {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}",0.9377431906614786
117129,"@Override public boolean matches(IFusionCraftingInventory inventory,World world,BlockPos pos){
  List<ICraftingPedestal> pedestals=new ArrayList<ICraftingPedestal>();
  pedestals.addAll(inventory.getPedestals());
  if (inventory.getStackInCore(0).isEmpty() || !inventory.getStackInCore(0).isItemEqual(catalyst) || inventory.getStackInCore(0).getCount() < catalyst.getCount()) {
    return false;
  }
  if (catalyst.hasTagCompound() && !ItemStack.areItemStackTagsEqual(catalyst,inventory.getStackInCore(0))) {
    return false;
  }
  for (  Object ingredient : ingredients) {
    boolean foundIngredient=false;
    for (    ICraftingPedestal pedestal : pedestals) {
      if (!pedestal.getStackInPedestal().isEmpty() && OreDictHelper.areStacksEqual(ingredient,pedestal.getStackInPedestal())) {
        ItemStack i=OreDictHelper.resolveObject(ingredient);
        if (i.hasTagCompound() && !ItemStack.areItemStackTagsEqual(i,pedestal.getStackInPedestal())) {
          continue;
        }
        foundIngredient=true;
        pedestals.remove(pedestal);
        break;
      }
    }
    if (!foundIngredient) {
      return false;
    }
  }
  for (  ICraftingPedestal pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty()) {
      return false;
    }
  }
  return true;
}","@Override public boolean matches(IFusionCraftingInventory inventory,World world,BlockPos pos){
  List<ICraftingInjector> pedestals=new ArrayList<ICraftingInjector>();
  pedestals.addAll(inventory.getInjectors());
  if (inventory.getStackInCore(0).isEmpty() || !inventory.getStackInCore(0).isItemEqual(catalyst) || inventory.getStackInCore(0).getCount() < catalyst.getCount()) {
    return false;
  }
  if (catalyst.hasTagCompound() && !ItemStack.areItemStackTagsEqual(catalyst,inventory.getStackInCore(0))) {
    return false;
  }
  for (  Object ingredient : ingredients) {
    boolean foundIngredient=false;
    for (    ICraftingInjector pedestal : pedestals) {
      if (!pedestal.getStackInPedestal().isEmpty() && OreDictHelper.areStacksEqual(ingredient,pedestal.getStackInPedestal())) {
        ItemStack i=OreDictHelper.resolveObject(ingredient);
        if (i.hasTagCompound() && !ItemStack.areItemStackTagsEqual(i,pedestal.getStackInPedestal())) {
          continue;
        }
        foundIngredient=true;
        pedestals.remove(pedestal);
        break;
      }
    }
    if (!foundIngredient) {
      return false;
    }
  }
  for (  ICraftingInjector pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty()) {
      return false;
    }
  }
  return true;
}",0.9689681923972072
117130,"@Override public void craft(IFusionCraftingInventory inventory,World world,BlockPos pos){
  if (!matches(inventory,world,pos)) {
    return;
  }
  List<ICraftingPedestal> pedestals=new ArrayList<ICraftingPedestal>();
  pedestals.addAll(inventory.getPedestals());
  for (  Object ingredient : ingredients) {
    for (    ICraftingPedestal pedestal : pedestals) {
      if (!pedestal.getStackInPedestal().isEmpty() && OreDictHelper.areStacksEqual(ingredient,pedestal.getStackInPedestal()) && pedestal.getPedestalTier() >= craftingTier && !pedestal.getStackInPedestal().isItemEqual(upgradeKey)) {
        ItemStack stack=pedestal.getStackInPedestal();
        if (stack.getItem().hasContainerItem(stack)) {
          stack=stack.getItem().getContainerItem(stack);
        }
 else {
          stack.shrink(1);
          if (stack.getCount() <= 0) {
            stack=ItemStack.EMPTY;
          }
        }
        pedestal.setStackInPedestal(stack);
        pedestals.remove(pedestal);
        break;
      }
    }
  }
  ItemStack stack=inventory.getStackInCore(0);
  inventory.setStackInCore(0,ItemStack.EMPTY);
  UpgradeHelper.setUpgradeLevel(stack,upgrade,upgradeLevel);
  inventory.setStackInCore(1,stack);
}","@Override public void craft(IFusionCraftingInventory inventory,World world,BlockPos pos){
  if (!matches(inventory,world,pos)) {
    return;
  }
  List<ICraftingInjector> pedestals=new ArrayList<ICraftingInjector>();
  pedestals.addAll(inventory.getInjectors());
  for (  Object ingredient : ingredients) {
    for (    ICraftingInjector pedestal : pedestals) {
      if (!pedestal.getStackInPedestal().isEmpty() && OreDictHelper.areStacksEqual(ingredient,pedestal.getStackInPedestal()) && pedestal.getPedestalTier() >= craftingTier && !pedestal.getStackInPedestal().isItemEqual(upgradeKey)) {
        ItemStack stack=pedestal.getStackInPedestal();
        if (stack.getItem().hasContainerItem(stack)) {
          stack=stack.getItem().getContainerItem(stack);
        }
 else {
          stack.shrink(1);
          if (stack.getCount() <= 0) {
            stack=ItemStack.EMPTY;
          }
        }
        pedestal.setStackInPedestal(stack);
        pedestals.remove(pedestal);
        break;
      }
    }
  }
  ItemStack stack=inventory.getStackInCore(0);
  inventory.setStackInCore(0,ItemStack.EMPTY);
  UpgradeHelper.setUpgradeLevel(stack,upgrade,upgradeLevel);
  inventory.setStackInCore(1,stack);
}",0.9735099337748344
117131,"@Override public String canCraft(IFusionCraftingInventory inventory,World world,BlockPos pos){
  if (!isRecipeCatalyst(inventory.getStackInCore(0))) {
    return ""String_Node_Str"";
  }
  if (!inventory.getStackInCore(1).isEmpty()) {
    return ""String_Node_Str"";
  }
  IUpgradableItem item=(IUpgradableItem)inventory.getStackInCore(0).getItem();
  if (item.getMaxUpgradeLevel(inventory.getStackInCore(0),upgrade) < upgradeLevel) {
    return ""String_Node_Str"";
  }
  if (UpgradeHelper.getUpgradeLevel(inventory.getStackInCore(0),upgrade) >= upgradeLevel) {
    return ""String_Node_Str"";
  }
  if (UpgradeHelper.getUpgradeLevel(inventory.getStackInCore(0),upgrade) < upgradeLevel - 1) {
    return ""String_Node_Str"";
  }
  List<ICraftingPedestal> pedestals=new ArrayList<ICraftingPedestal>();
  pedestals.addAll(inventory.getPedestals());
  for (  ICraftingPedestal pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty() && pedestal.getPedestalTier() < craftingTier) {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}","@Override public String canCraft(IFusionCraftingInventory inventory,World world,BlockPos pos){
  if (!isRecipeCatalyst(inventory.getStackInCore(0))) {
    return ""String_Node_Str"";
  }
  if (!inventory.getStackInCore(1).isEmpty()) {
    return ""String_Node_Str"";
  }
  IUpgradableItem item=(IUpgradableItem)inventory.getStackInCore(0).getItem();
  if (item.getMaxUpgradeLevel(inventory.getStackInCore(0),upgrade) < upgradeLevel) {
    return ""String_Node_Str"";
  }
  if (UpgradeHelper.getUpgradeLevel(inventory.getStackInCore(0),upgrade) >= upgradeLevel) {
    return ""String_Node_Str"";
  }
  if (UpgradeHelper.getUpgradeLevel(inventory.getStackInCore(0),upgrade) < upgradeLevel - 1) {
    return ""String_Node_Str"";
  }
  List<ICraftingInjector> pedestals=new ArrayList<ICraftingInjector>();
  pedestals.addAll(inventory.getInjectors());
  for (  ICraftingInjector pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty() && pedestal.getPedestalTier() < craftingTier) {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}",0.9697256385998108
117132,"@Override public boolean matches(IFusionCraftingInventory inventory,World world,BlockPos pos){
  List<ICraftingPedestal> pedestals=new ArrayList<ICraftingPedestal>();
  pedestals.addAll(inventory.getPedestals());
  if (!isRecipeCatalyst(inventory.getStackInCore(0))) {
    return false;
  }
  boolean flag=false;
  for (  ICraftingPedestal pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty() && upgradeKey.isItemEqual(pedestal.getStackInPedestal())) {
      flag=true;
      break;
    }
  }
  if (!flag) {
    return false;
  }
  for (  Object ingredient : ingredients) {
    flag=false;
    for (    ICraftingPedestal pedestal : pedestals) {
      if (!pedestal.getStackInPedestal().isEmpty() && OreDictHelper.areStacksEqual(ingredient,pedestal.getStackInPedestal())) {
        flag=true;
        pedestals.remove(pedestal);
        break;
      }
    }
    if (!flag) {
      return false;
    }
  }
  for (  ICraftingPedestal pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty() && !pedestal.getStackInPedestal().isItemEqual(upgradeKey)) {
      return false;
    }
  }
  return true;
}","@Override public boolean matches(IFusionCraftingInventory inventory,World world,BlockPos pos){
  List<ICraftingInjector> pedestals=new ArrayList<ICraftingInjector>();
  pedestals.addAll(inventory.getInjectors());
  if (!isRecipeCatalyst(inventory.getStackInCore(0))) {
    return false;
  }
  boolean flag=false;
  for (  ICraftingInjector pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty() && upgradeKey.isItemEqual(pedestal.getStackInPedestal())) {
      flag=true;
      break;
    }
  }
  if (!flag) {
    return false;
  }
  for (  Object ingredient : ingredients) {
    flag=false;
    for (    ICraftingInjector pedestal : pedestals) {
      if (!pedestal.getStackInPedestal().isEmpty() && OreDictHelper.areStacksEqual(ingredient,pedestal.getStackInPedestal())) {
        flag=true;
        pedestals.remove(pedestal);
        break;
      }
    }
    if (!flag) {
      return false;
    }
  }
  for (  ICraftingInjector pedestal : pedestals) {
    if (!pedestal.getStackInPedestal().isEmpty() && !pedestal.getStackInPedestal().isItemEqual(upgradeKey)) {
      return false;
    }
  }
  return true;
}",0.9575596816976129
117133,"public static boolean isStackValid(ItemStack stack){
  if (stack.getItem() == Item.getItemFromBlock(DEFeatures.draconiumChest)) {
    return false;
  }
  return true;
}","public static boolean isStackValid(ItemStack stack){
  if (stack.getItem() == Item.getItemFromBlock(DEFeatures.draconiumChest)) {
    return false;
  }
 else   if (!stack.isEmpty()) {
    String name=stack.getUnlocalizedName().toLowerCase();
    if (name.contains(""String_Node_Str"") || name.contains(""String_Node_Str"") || name.contains(""String_Node_Str"")|| name.contains(""String_Node_Str"")) {
      return false;
    }
  }
  return true;
}",0.514003294892916
117134,"@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  TileEntity tile=world.getTileEntity(pos);
  if (tile instanceof TileFusionCraftingCore) {
    ((TileFusionCraftingCore)tile).updatePedestals();
  }
  if (!world.isRemote) {
    FMLNetworkHandler.openGui(player,DraconicEvolution.instance,GuiHandler.GUIID_FUSION_CRAFTING,world,pos.getX(),pos.getY(),pos.getZ());
  }
  return true;
}","@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  TileEntity tile=world.getTileEntity(pos);
  if (tile instanceof TileFusionCraftingCore) {
    ((TileFusionCraftingCore)tile).updateInjectors();
  }
  if (!world.isRemote) {
    FMLNetworkHandler.openGui(player,DraconicEvolution.instance,GuiHandler.GUIID_FUSION_CRAFTING,world,pos.getX(),pos.getY(),pos.getZ());
  }
  return true;
}",0.9840954274353876
117135,"public void neighborChanged(IBlockState state,World world,BlockPos pos,Block blockIn){
  if (!world.isRemote) {
    if (world.isBlockPowered(pos)) {
      TileEntity tile=world.getTileEntity(pos);
      if (tile instanceof TileFusionCraftingCore) {
        ((TileFusionCraftingCore)tile).attemptStartCrafting();
      }
    }
  }
}","@Override public void neighborChanged(IBlockState state,World world,BlockPos pos,Block blockIn,BlockPos fromPos){
  if (!world.isRemote) {
    if (world.isBlockPowered(pos)) {
      TileEntity tile=world.getTileEntity(pos);
      if (tile instanceof TileFusionCraftingCore) {
        ((TileFusionCraftingCore)tile).attemptStartCrafting();
      }
    }
  }
}",0.9608127721335268
117136,"private boolean validateCraftingInventory(){
  if (getStackInPedestal() != null && currentCraftingInventory != null && currentCraftingInventory.craftingInProgress() && !((TileEntity)currentCraftingInventory).isInvalid()) {
    return true;
  }
  currentCraftingInventory=null;
  return false;
}","private boolean validateCraftingInventory(){
  if (!getStackInPedestal().isEmpty() && currentCraftingInventory != null && currentCraftingInventory.craftingInProgress() && !((TileEntity)currentCraftingInventory).isInvalid()) {
    return true;
  }
  currentCraftingInventory=null;
  return false;
}",0.3891708967851099
117137,"@Override public void renderParticle(VertexBuffer buffer,Entity entity,float partialTicks,float rotationX,float rotationZ,float rotationYZ,float rotationXY,float rotationXZ){
  Vec3D pos1=new Vec3D(posX - interpPosX,posY - interpPosY,posZ - interpPosZ).offset(facing,-0.35D);
  Vec3D pos2;
  double texOffset=(ClientEventHandler.elapsedTicks + partialTicks) / -150D;
  double coreSize=tile.getCoreDiameter() / 2.3;
  if (!DEShaders.useShaders() || !DEConfig.useReactorBeamShaders) {
    renderWithoutShaders(buffer,pos1,coreSize,texOffset);
    return;
  }
  float animation=(ClientEventHandler.elapsedTicks + partialTicks) * 0.02F;
  texOffset=0;
  if (isInjectorEffect) {
    if (beam_E == null) {
      beam_E=new ShaderProgram();
      beam_E.attachShader(DEShaders.reactorBeamE);
    }
    beam_E.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",fxState);
      cache.glUniform1F(""String_Node_Str"",1);
      cache.glUniform1F(""String_Node_Str"",fxState);
    }
);
    pos2=pos1.copy().offset(facing,0.6D);
    renderShaderBeam(buffer,pos1,0.1F,0.1F,0.6D,0,0,true,energyBeamColour);
    beam_E.releaseShader();
    renderShaderBeam(buffer,pos2,0.1F,coreSize / 1.5,dist - (coreSize * 1.3),0,0,false,energyBeamColour);
    beam_E.releaseShader();
  }
 else {
    pos2=pos1.copy().offset(facing,0.8D);
    if (beam_O == null) {
      beam_O=new ShaderProgram();
      beam_O.attachShader(DEShaders.reactorBeamE);
    }
    beam_O.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",(float)tile.animExtractState.value);
      cache.glUniform1F(""String_Node_Str"",1);
      cache.glUniform1F(""String_Node_Str"",(float)tile.animExtractState.value);
    }
);
    renderShaderBeam(buffer,pos1,0.263F,0.263F,0.8D,texOffset,0,true,extractBeamColour);
    beam_O.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",(float)tile.animExtractState.value);
      cache.glUniform1F(""String_Node_Str"",0);
      cache.glUniform1F(""String_Node_Str"",(float)tile.animExtractState.value);
    }
);
    renderShaderBeam(buffer,pos2,0.263F,coreSize / 2,dist - (coreSize * 1.3),texOffset,0,false,extractBeamColour);
    if (beam_I == null) {
      beam_I=new ShaderProgram();
      beam_I.attachShader(DEShaders.reactorBeamE);
    }
    beam_I.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",fxState);
      cache.glUniform1F(""String_Node_Str"",1);
      cache.glUniform1F(""String_Node_Str"",fxState);
    }
);
    renderShaderBeam(buffer,pos1,0.355D,0.355D,0.8D,texOffset,0,true,fieldBeamColour);
    beam_I.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",fxState);
      cache.glUniform1F(""String_Node_Str"",0);
      cache.glUniform1F(""String_Node_Str"",fxState);
    }
);
    renderShaderBeam(buffer,pos2,0.355D,coreSize,dist - coreSize,texOffset,0,false,fieldBeamColour);
    beam_I.releaseShader();
  }
}","@Override public void renderParticle(VertexBuffer buffer,Entity entity,float partialTicks,float rotationX,float rotationZ,float rotationYZ,float rotationXY,float rotationXZ){
  Vec3D pos1=new Vec3D(posX - interpPosX,posY - interpPosY,posZ - interpPosZ).offset(facing,-0.35D);
  Vec3D pos2;
  double texOffset=(ClientEventHandler.elapsedTicks + partialTicks) / -150D;
  double coreSize=tile.getCoreDiameter() / 2.3;
  if (!DEShaders.useShaders() || !DEConfig.useReactorBeamShaders) {
    renderWithoutShaders(buffer,pos1,coreSize,texOffset);
    return;
  }
  float animation=(ClientEventHandler.elapsedTicks + partialTicks) * 0.02F;
  texOffset=0;
  if (isInjectorEffect) {
    if (beam_E == null) {
      beam_E=new ShaderProgram();
      beam_E.attachShader(DEShaders.reactorBeamE);
      beam_E.addGlobalUniformCallback(cache -> {
        cache.glUniform1F(""String_Node_Str"",fxState);
        cache.glUniform1F(""String_Node_Str"",fxState);
      }
);
    }
    beam_E.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",1);
    }
);
    pos2=pos1.copy().offset(facing,0.6D);
    renderShaderBeam(buffer,pos1,0.1F,0.1F,0.6D,0,0,true,energyBeamColour);
    beam_E.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",0);
    }
);
    renderShaderBeam(buffer,pos2,0.1F,coreSize / 1.5,dist - (coreSize * 1.3),0,0,false,energyBeamColour);
    beam_E.releaseShader();
  }
 else {
    pos2=pos1.copy().offset(facing,0.8D);
    if (beam_O == null) {
      beam_O=new ShaderProgram();
      beam_O.attachShader(DEShaders.reactorBeamO);
      beam_O.addGlobalUniformCallback(cache -> {
        cache.glUniform1F(""String_Node_Str"",(float)tile.animExtractState.value);
        cache.glUniform1F(""String_Node_Str"",(float)tile.animExtractState.value);
      }
);
    }
    beam_O.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",1);
    }
);
    renderShaderBeam(buffer,pos1,0.263F,0.263F,0.8D,texOffset,0,true,extractBeamColour);
    beam_O.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",0);
    }
);
    renderShaderBeam(buffer,pos2,0.263F,coreSize / 2,dist - (coreSize * 1.3),texOffset,0,false,extractBeamColour);
    if (beam_I == null) {
      beam_I=new ShaderProgram();
      beam_I.attachShader(DEShaders.reactorBeamI);
      beam_I.addGlobalUniformCallback(cache -> {
        cache.glUniform1F(""String_Node_Str"",fxState);
        cache.glUniform1F(""String_Node_Str"",fxState);
      }
);
    }
    beam_I.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",1);
    }
);
    renderShaderBeam(buffer,pos1,0.355D,0.355D,0.8D,texOffset,0,true,fieldBeamColour);
    beam_I.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",animation);
      cache.glUniform1F(""String_Node_Str"",0);
    }
);
    renderShaderBeam(buffer,pos2,0.355D,coreSize,dist - coreSize,texOffset,0,false,fieldBeamColour);
    beam_I.releaseShader();
  }
}",0.8392544209017047
117138,"private void releaseShader(){
  if (DEShaders.useShaders() && DEConfig.useCrystalShaders) {
    shaderProgram.releaseShader();
  }
}","private void releaseShader(){
  if (DEShaders.useShaders() && DEConfig.useCrystalShaders && shaderProgram != null) {
    shaderProgram.releaseShader();
  }
}",0.9134948096885812
117139,"@Override protected void drawGuiContainerBackgroundLayer(float f,int X,int Y){
  GL11.glColor4f(1,1,1,1);
  ResourceHelperDE.bindTexture(DETextures.GUI_GRINDER);
  drawTexturedModalRect(guiLeft,guiTop,0,0,xSize,ySize);
  float power=(float)tile.energySync.value / (float)tile.getMaxEnergyStored(EnumFacing.DOWN) * -1 + 1;
  drawTexturedModalRect(guiLeft + 68,guiTop + 12 + (int)(power * 40),xSize,(int)(power * 40),12,40 - (int)(power * 40));
  drawCenteredString(fontRendererObj,I18n.format(DEFeatures.grinder.getUnlocalizedName() + ""String_Node_Str""),guiLeft + xSize / 2 + 2,guiTop,0x00FFFF);
  int x=X - guiLeft;
  int y=Y - guiTop;
  if (GuiHelper.isInRect(68,10,12,40,x,y)) {
    ArrayList<String> internal=new ArrayList<>();
    internal.add(I18n.format(""String_Node_Str""));
    internal.add(""String_Node_Str"" + TextFormatting.DARK_BLUE + tile.energySync.value+ ""String_Node_Str""+ tile.getMaxEnergyStored(EnumFacing.UP));
    drawHoveringText(internal,x + guiLeft,y + guiTop,fontRendererObj);
  }
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int X,int Y){
  GlStateManager.color(1,1,1,1);
  ResourceHelperDE.bindTexture(DETextures.GUI_GRINDER);
  drawTexturedModalRect(guiLeft,guiTop,0,0,xSize,ySize);
  float power=(float)tile.energySync.value / (float)tile.getMaxEnergyStored(EnumFacing.DOWN) * -1 + 1;
  drawTexturedModalRect(guiLeft + 68,guiTop + 12 + (int)(power * 40),xSize,(int)(power * 40),12,40 - (int)(power * 40));
  drawCenteredString(fontRendererObj,I18n.format(DEFeatures.grinder.getUnlocalizedName() + ""String_Node_Str""),guiLeft + xSize / 2 + 2,guiTop,0x00FFFF);
  int x=X - guiLeft;
  int y=Y - guiTop;
  if (GuiHelper.isInRect(68,10,12,40,x,y)) {
    ArrayList<String> internal=new ArrayList<>();
    internal.add(I18n.format(""String_Node_Str""));
    internal.add(""String_Node_Str"" + TextFormatting.DARK_BLUE + tile.energySync.value+ ""String_Node_Str""+ tile.getMaxEnergyStored(EnumFacing.UP));
    drawHoveringText(internal,x + guiLeft,y + guiTop,fontRendererObj);
  }
}",0.9841112214498512
117140,"@Override public void drawScreen(int x,int y,float partial){
  drawDefaultBackground();
  HudHandler.drawHUD(new RenderGameOverlayEvent.Post(new RenderGameOverlayEvent(partial,new ScaledResolution(mc)),RenderGameOverlayEvent.ElementType.ALL));
  int[] pos=DEConfig.hudSettings;
  int hudX=(int)((pos[0] / 1000D) * width);
  int hudY=(int)((pos[1] / 1000D) * height);
  int armorX=(int)((pos[2] / 1000D) * width);
  int armorY=(int)((pos[3] / 1000D) * height);
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),width / 2,height / 2 - 90,0x00FFFF);
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),width / 2,height / 2 - 77,0xFFFFFF);
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),width / 2,height / 2 - 15,0xFFFFFF);
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),width / 2,height / 2 + 85,0xFFFFFF);
  drawCenteredString(fontRendererObj,DEConfig.hudSettings[4] + ""String_Node_Str"",width / 2 + 97,height / 2 - 63,0xFFFFFF);
  drawCenteredString(fontRendererObj,DEConfig.hudSettings[5] + ""String_Node_Str"",width / 2 + 97,height / 2 - 1,0xFFFFFF);
  super.drawScreen(x,y,partial);
  GL11.glDisable(GL12.GL_RESCALE_NORMAL);
  RenderHelper.disableStandardItemLighting();
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_DEPTH_TEST);
  GuiHelper.drawGradientRect(hudX - 19,hudY - 19,hudX + 20,hudY + 20,0x20FF00FF,0x20FF00FF,1F,1D);
  GuiHelper.drawGradientRect(hudX - 4,hudY,hudX + 5,hudY + 1,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX,hudY - 4,hudX + 1,hudY + 5,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX - 19,hudY - 19,hudX + 20,hudY - 18,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX - 19,hudY + 19,hudX + 20,hudY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX - 19,hudY - 19,hudX - 18,hudY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX + 19,hudY - 19,hudX + 20,hudY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 19,armorY - 19,armorX + 20,armorY + 20,0x20FF00FF,0x20FF00FF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 4,armorY,armorX + 5,armorY + 1,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX,armorY - 4,armorX + 1,armorY + 5,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 19,armorY - 19,armorX + 20,armorY - 18,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 19,armorY + 19,armorX + 20,armorY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 19,armorY - 19,armorX - 18,armorY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX + 19,armorY - 19,armorX + 20,armorY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_DEPTH_TEST);
  RenderHelper.enableStandardItemLighting();
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  if (GuiHelper.isInRect(armorX - 19,armorY - 19,39,39,x,y) || GuiHelper.isInRect(hudX - 19,hudY - 19,39,39,x,y)) {
    drawHoveringText(new ArrayList<String>(){
{
        add(I18n.format(""String_Node_Str""));
      }
    }
,x,y,fontRendererObj);
  }
}","@Override public void drawScreen(int x,int y,float partial){
  drawDefaultBackground();
  HudHandler.drawHUD(new RenderGameOverlayEvent.Post(new RenderGameOverlayEvent(partial,new ScaledResolution(mc)),RenderGameOverlayEvent.ElementType.ALL));
  int[] pos=DEConfig.hudSettings;
  int hudX=(int)((pos[0] / 1000D) * width);
  int hudY=(int)((pos[1] / 1000D) * height);
  int armorX=(int)((pos[2] / 1000D) * width);
  int armorY=(int)((pos[3] / 1000D) * height);
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),width / 2,height / 2 - 90,0x00FFFF);
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),width / 2,height / 2 - 77,0xFFFFFF);
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),width / 2,height / 2 - 15,0xFFFFFF);
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),width / 2,height / 2 + 85,0xFFFFFF);
  drawCenteredString(fontRendererObj,DEConfig.hudSettings[4] + ""String_Node_Str"",width / 2 + 97,height / 2 - 63,0xFFFFFF);
  drawCenteredString(fontRendererObj,DEConfig.hudSettings[5] + ""String_Node_Str"",width / 2 + 97,height / 2 - 1,0xFFFFFF);
  super.drawScreen(x,y,partial);
  GlStateManager.disableRescaleNormal();
  RenderHelper.disableStandardItemLighting();
  GlStateManager.disableLighting();
  GlStateManager.disableDepth();
  GuiHelper.drawGradientRect(hudX - 19,hudY - 19,hudX + 20,hudY + 20,0x20FF00FF,0x20FF00FF,1F,1D);
  GuiHelper.drawGradientRect(hudX - 4,hudY,hudX + 5,hudY + 1,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX,hudY - 4,hudX + 1,hudY + 5,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX - 19,hudY - 19,hudX + 20,hudY - 18,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX - 19,hudY + 19,hudX + 20,hudY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX - 19,hudY - 19,hudX - 18,hudY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(hudX + 19,hudY - 19,hudX + 20,hudY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 19,armorY - 19,armorX + 20,armorY + 20,0x20FF00FF,0x20FF00FF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 4,armorY,armorX + 5,armorY + 1,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX,armorY - 4,armorX + 1,armorY + 5,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 19,armorY - 19,armorX + 20,armorY - 18,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 19,armorY + 19,armorX + 20,armorY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX - 19,armorY - 19,armorX - 18,armorY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GuiHelper.drawGradientRect(armorX + 19,armorY - 19,armorX + 20,armorY + 20,0xFFFFFFFF,0xFFFFFFFF,1F,1D);
  GlStateManager.enableLighting();
  GlStateManager.enableDepth();
  RenderHelper.enableStandardItemLighting();
  GlStateManager.enableRescaleNormal();
  if (GuiHelper.isInRect(armorX - 19,armorY - 19,39,39,x,y) || GuiHelper.isInRect(hudX - 19,hudY - 19,39,39,x,y)) {
    drawHoveringText(new ArrayList<String>(){
{
        add(I18n.format(""String_Node_Str""));
      }
    }
,x,y,fontRendererObj);
  }
}",0.4529205234599425
117141,"@Override public void render(Entity entity,float rotation,float brightness,float invRender,float f3,float f4,float f5){
  GL11.glPushMatrix();
  this.basePlate.render(f5);
  GL11.glRotatef(rotation,0F,0F,1F);
  this.hub1.render(f5);
  GL11.glRotatef(rotation * 2F,0F,0F,-1F);
  this.hub2.render(f5);
  float lastBrightnessX=OpenGlHelper.lastBrightnessX;
  float lastBrightnessY=OpenGlHelper.lastBrightnessY;
  float b=brightness * 200F;
  float colour=Math.min(2F,(brightness * 2F) + 0.1F);
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,Math.min(200F,lastBrightnessX + b),Math.min(200F,lastBrightnessY + b));
  if (brightness > 0F && invRender == 0) {
    GL11.glDisable(GL11.GL_LIGHTING);
  }
  GL11.glColor4f(colour,colour,colour,1F);
  this.rotor2R.render(f5);
  GL11.glRotatef(rotation * 2F,0F,0F,1F);
  this.rotor1R.render(f5);
  GL11.glColor4f(1F,1F,1F,1F);
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,lastBrightnessX,lastBrightnessY);
  if (brightness > 0F && invRender == 0) {
    GL11.glEnable(GL11.GL_LIGHTING);
  }
  GL11.glPopMatrix();
}","@Override public void render(Entity entity,float rotation,float brightness,float invRender,float f3,float f4,float f5){
  GlStateManager.pushMatrix();
  this.basePlate.render(f5);
  GlStateManager.rotate(rotation,0F,0F,1F);
  this.hub1.render(f5);
  GlStateManager.rotate(rotation * 2F,0F,0F,-1F);
  this.hub2.render(f5);
  float lastBrightnessX=OpenGlHelper.lastBrightnessX;
  float lastBrightnessY=OpenGlHelper.lastBrightnessY;
  float b=brightness * 200F;
  float colour=Math.min(2F,(brightness * 2F) + 0.1F);
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,Math.min(200F,lastBrightnessX + b),Math.min(200F,lastBrightnessY + b));
  if (brightness > 0F && invRender == 0) {
    GlStateManager.disableLighting();
  }
  GlStateManager.color(colour,colour,colour,1F);
  this.rotor2R.render(f5);
  GlStateManager.rotate(rotation * 2F,0F,0F,1F);
  this.rotor1R.render(f5);
  GlStateManager.rotate(1F,1F,1F,1F);
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,lastBrightnessX,lastBrightnessY);
  if (brightness > 0F && invRender == 0) {
    GlStateManager.enableLighting();
  }
  GlStateManager.popMatrix();
}",0.7896613190730838
117142,"@Override public Pair<? extends IBakedModel,Matrix4f> handlePerspective(ItemCameraTransforms.TransformType cameraTransformType){
  return MapWrapper.handlePerspective(this,TransformUtils.DEFAULT_ITEM.getTransforms(),cameraTransformType);
}","@Override public Pair<? extends IBakedModel,Matrix4f> handlePerspective(ItemStack stack,ItemCameraTransforms.TransformType cameraTransformType){
  return IPerspectiveAwareModel.MapWrapper.handlePerspective(this,TransformUtils.DEFAULT_ITEM.getTransforms(),cameraTransformType);
}",0.9245647969052224
117143,"@Override public void renderItem(ItemStack item,ItemCameraTransforms.TransformType transformType){
  Minecraft mc=Minecraft.getMinecraft();
  GlStateManager.pushMatrix();
  GlStateManager.translate(0.5,0.5,0.5);
  mc.getRenderItem().renderItem(stack,ItemCameraTransforms.TransformType.FIXED);
  if (DEShaders.useShaders()) {
    if (shaderProgram == null) {
      shaderProgram=new ShaderProgram();
      shaderProgram.attachShader(DEShaders.reactorShield);
    }
    shaderProgram.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",((float)ClientEventHandler.elapsedTicks + mc.getRenderPartialTicks()) / -100F);
      cache.glUniform1F(""String_Node_Str"",0.09F);
    }
);
    mc.getRenderItem().renderItem(stack,ItemCameraTransforms.TransformType.FIXED);
    shaderProgram.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",((float)ClientEventHandler.elapsedTicks + mc.getRenderPartialTicks()) / 100F);
      cache.glUniform1F(""String_Node_Str"",0.02F);
    }
);
    mc.getRenderItem().renderItem(stack,ItemCameraTransforms.TransformType.FIXED);
    shaderProgram.releaseShader();
  }
  GlStateManager.popMatrix();
}","@Override public void renderItem(ItemStack item,ItemCameraTransforms.TransformType transformType){
  Minecraft mc=Minecraft.getMinecraft();
  GlStateManager.pushMatrix();
  GlStateManager.translate(0.5,0.5,0.5);
  if (transformType == ItemCameraTransforms.TransformType.FIXED) {
    GlStateManager.rotate(180,0,1,0);
  }
  renderSkull();
  if (DEShaders.useShaders()) {
    if (shaderProgram == null) {
      shaderProgram=new ShaderProgram();
      shaderProgram.attachShader(DEShaders.reactorShield);
    }
    shaderProgram.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",((float)ClientEventHandler.elapsedTicks + mc.getRenderPartialTicks()) / -100F);
      cache.glUniform1F(""String_Node_Str"",0.09F);
    }
);
    renderSkull();
    shaderProgram.useShader(cache -> {
      cache.glUniform1F(""String_Node_Str"",((float)ClientEventHandler.elapsedTicks + mc.getRenderPartialTicks()) / 100F);
      cache.glUniform1F(""String_Node_Str"",0.02F);
    }
);
    renderSkull();
    shaderProgram.releaseShader();
  }
  GlStateManager.popMatrix();
}",0.8683371298405467
117144,"@Override public void renderItem(ItemStack item,ItemCameraTransforms.TransformType transformType){
  CrystalType type=CrystalType.fromMeta(item.getItemDamage());
  int tier=CrystalType.getTier(item.getItemDamage());
  GlStateManager.pushMatrix();
  GlStateTracker.pushState();
  GlStateManager.disableLighting();
  CCRenderState ccrs=CCRenderState.instance();
  Matrix4 mat=RenderUtils.getMatrix(new Vector3(0.5,type == CrystalType.CRYSTAL_IO ? 0 : 0.5,0.5),new Rotation(0,0,0,0),1);
  ResourceHelperDE.bindTexture(DETextures.ENERGY_CRYSTAL_BASE);
  if (type == CrystalType.CRYSTAL_IO) {
    ccrs.startDrawing(GL11.GL_TRIANGLES,DefaultVertexFormats.POSITION_TEX);
    crystalBase.render(ccrs,mat);
    ccrs.draw();
    mat.apply(new Rotation((ClientEventHandler.elapsedTicks) / 400F,0,1,0));
    ResourceHelperDE.bindTexture(DETextures.REACTOR_CORE);
    bindShader(0,tier);
    ccrs.startDrawing(GL11.GL_TRIANGLES,DefaultVertexFormats.POSITION_TEX);
    crystalHalf.render(ccrs,mat);
    ccrs.draw();
    releaseShader();
  }
 else {
    bindShader(0,tier);
    ccrs.startDrawing(GL11.GL_TRIANGLES,DefaultVertexFormats.POSITION_TEX);
    crystalFull.render(ccrs,mat);
    ccrs.draw();
    releaseShader();
  }
  GlStateTracker.popState();
  GlStateManager.popMatrix();
}","@Override public void renderItem(ItemStack item,ItemCameraTransforms.TransformType transformType){
  CrystalType type=CrystalType.fromMeta(item.getItemDamage());
  int tier=CrystalType.getTier(item.getItemDamage());
  GlStateManager.pushMatrix();
  GlStateTracker.pushState();
  CCRenderState ccrs=CCRenderState.instance();
  Matrix4 mat=RenderUtils.getMatrix(new Vector3(0.5,type == CrystalType.CRYSTAL_IO ? 0 : 0.5,0.5),new Rotation(0,0,0,0),1);
  ResourceHelperDE.bindTexture(DETextures.ENERGY_CRYSTAL_BASE);
  if (type == CrystalType.CRYSTAL_IO) {
    ccrs.startDrawing(GL11.GL_TRIANGLES,DefaultVertexFormats.POSITION_TEX);
    crystalBase.render(ccrs,mat);
    ccrs.draw();
    mat.apply(new Rotation((ClientEventHandler.elapsedTicks) / 400F,0,1,0));
    ResourceHelperDE.bindTexture(DETextures.REACTOR_CORE);
    bindShader(0,tier);
    ccrs.startDrawing(GL11.GL_TRIANGLES,DefaultVertexFormats.POSITION_TEX);
    crystalHalf.render(ccrs,mat);
    ccrs.draw();
    releaseShader();
  }
 else {
    bindShader(0,tier);
    ccrs.startDrawing(GL11.GL_TRIANGLES,DefaultVertexFormats.POSITION_TEX);
    crystalFull.render(ccrs,mat);
    ccrs.draw();
    releaseShader();
  }
  GlStateTracker.popState();
  GlStateManager.popMatrix();
}",0.985634477254589
117145,"@Override public void renderTileEntityAt(TileDislocatorPedestal te,double x,double y,double z,float partialTicks,int destroyStage){
  if (modelQuads == null) {
    modelQuads=Minecraft.getMinecraft().getBlockRendererDispatcher().getModelForState(DEFeatures.dislocatorPedestal.getDefaultState()).getQuads(DEFeatures.dislocatorPedestal.getDefaultState(),null,0);
  }
  GlStateManager.pushMatrix();
  GlStateManager.translate(x + 0.5,y,z + 0.5);
  if (!te.getStackInSlot(0).isEmpty()) {
    GlStateManager.pushMatrix();
    GL11.glScalef(1F,-1F,-1F);
    drawNameString(te.getStackInSlot(0),0,te,partialTicks);
    GlStateManager.popMatrix();
  }
  GlStateManager.rotate(-te.rotation.value * 22.5F,0,1,0);
  GlStateManager.translate(-0.5,0,-0.5);
  TextureUtils.bindBlockTexture();
  ModelUtils.renderQuads(modelQuads);
  if (!te.getStackInSlot(0).isEmpty()) {
    GlStateManager.translate(0.5,0.79,0.52);
    GlStateManager.rotate(-67.5F,1,0,0);
    GlStateManager.scale(0.5F,0.5F,0.5F);
    renderItem(te.getStackInSlot(0));
  }
  GlStateManager.popMatrix();
}","@Override public void renderTileEntityAt(TileDislocatorPedestal te,double x,double y,double z,float partialTicks,int destroyStage){
  if (modelQuads == null) {
    modelQuads=Minecraft.getMinecraft().getBlockRendererDispatcher().getModelForState(DEFeatures.dislocatorPedestal.getDefaultState()).getQuads(DEFeatures.dislocatorPedestal.getDefaultState(),null,0);
  }
  GlStateManager.pushMatrix();
  GlStateManager.translate(x + 0.5,y,z + 0.5);
  if (!te.getStackInSlot(0).isEmpty()) {
    GlStateManager.pushMatrix();
    GlStateManager.scale(1F,-1F,-1F);
    drawNameString(te.getStackInSlot(0),0,te,partialTicks);
    GlStateManager.popMatrix();
  }
  GlStateManager.rotate(-te.rotation.value * 22.5F,0,1,0);
  GlStateManager.translate(-0.5,0,-0.5);
  TextureUtils.bindBlockTexture();
  ModelUtils.renderQuads(modelQuads);
  if (!te.getStackInSlot(0).isEmpty()) {
    GlStateManager.translate(0.5,0.79,0.52);
    GlStateManager.rotate(-67.5F,1,0,0);
    GlStateManager.scale(0.5F,0.5F,0.5F);
    renderItem(te.getStackInSlot(0));
  }
  GlStateManager.popMatrix();
}",0.9854117647058824
117146,"public static void stopLoading(EntityChaosGuardian guardian){
  if (!DEConfig.chaosGuardianLoading) {
    return;
  }
  if (!ticketList.containsKey(guardian)) {
    return;
  }
  ForgeChunkManager.releaseTicket(ticketList.get(guardian));
  ticketList.remove(guardian);
}","public static void stopLoading(EntityChaosGuardian guardian){
  if (!DEConfig.chaosGuardianLoading) {
    return;
  }
  if (!ticketList.containsKey(guardian)) {
    return;
  }
  Ticket ticket=ticketList.get(guardian);
  for (  ChunkPos pos : ticket.getChunkList()) {
    ForgeChunkManager.unforceChunk(ticket,pos);
    ((WorldServer)guardian.worldObj).getChunkProvider().unload(guardian.worldObj.getChunkFromChunkCoords(pos.chunkXPos,pos.chunkZPos));
  }
  ForgeChunkManager.releaseTicket(ticket);
  ticketList.remove(guardian);
}",0.5967540574282147
117147,"@Override public void onLivingUpdate(){
  if (ticksExisted % 20 == 0 && !worldObj.isRemote) {
    LogHelper.dev(""String_Node_Str"" + this.getEntityString());
    LogHelper.dev(""String_Node_Str"" + this.isDead);
    LogHelper.dev(""String_Node_Str"" + this.isRiding());
  }
  if (!homeSet) {
    homeX=(int)posX;
    homeY=(int)posY;
    homeZ=(int)posZ;
    targetX=homeX;
    targetZ=homeZ;
    homeSet=true;
  }
  if (crystals == null)   updateCrystals();
  float f;
  float f1;
  float moveSpeedMultiplier=behaviour.dragonSpeed;
  if (this.worldObj.isRemote) {
    f=MathHelper.cos(this.animTime * (float)Math.PI * 2.0F);
    f1=MathHelper.cos(this.prevAnimTime * (float)Math.PI * 2.0F);
    if (f1 <= -0.3F && f >= -0.3F) {
      if (deathTicks <= 0) {
        this.worldObj.playSound(this.posX,this.posY,this.posZ,SoundEvents.ENTITY_ENDERDRAGON_FLAP,SoundCategory.HOSTILE,5.0F,0.8F + this.rand.nextFloat() * 0.3F,false);
      }
    }
  }
  this.prevAnimTime=this.animTime;
  float f2;
  if (!worldObj.isRemote) {
    updateTarget();
    if (worldObj.getClosestPlayer(posX,posY,posZ,500,true) == null && getDistance(homeX,homeY,homeZ) < 100) {
      DragonChunkLoader.stopLoading(this);
    }
 else {
      if (getHealth() > 0) {
        DragonChunkLoader.updateLoaded(this);
      }
    }
    if (deathTicks > 0) {
      DragonChunkLoader.stopLoading(this);
    }
    customAIUpdate();
    if (behaviour == EnumBehaviour.FIREBOMB && Utils.getDistanceAtoB(posX,posY,posZ,homeX,homeY + 30,homeZ) <= 3) {
      moveSpeedMultiplier=0;
    }
  }
  if (this.getHealth() <= 0.0F) {
    behaviour=EnumBehaviour.DEAD;
    f=(this.rand.nextFloat() - 0.5F) * 8.0F;
    f1=(this.rand.nextFloat() - 0.5F) * 4.0F;
    f2=(this.rand.nextFloat() - 0.5F) * 8.0F;
    worldObj.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE,this.posX + (double)f,this.posY + 2.0D + (double)f1,this.posZ + (double)f2,0.0D,0.0D,0.0D);
  }
  this.updateDragonEnderCrystal();
  f=0.2F / (MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 10.0F + 1.0F);
  f*=moveSpeedMultiplier == 0 ? 1 : moveSpeedMultiplier;
  f*=(float)Math.pow(2.0D,this.motionY);
  if (this.slowed) {
    this.animTime+=f * 0.5F;
  }
 else {
    this.animTime+=f;
  }
  this.rotationYaw=MathHelper.wrapDegrees(this.rotationYaw);
  if (this.ringBufferIndex < 0) {
    for (int i=0; i < this.ringBuffer.length; ++i) {
      this.ringBuffer[i][0]=(double)this.rotationYaw;
      this.ringBuffer[i][1]=this.posY;
    }
  }
  if (++this.ringBufferIndex == this.ringBuffer.length) {
    this.ringBufferIndex=0;
  }
  this.ringBuffer[this.ringBufferIndex][0]=(double)this.rotationYaw;
  this.ringBuffer[this.ringBufferIndex][1]=this.posY;
  double d0;
  double d1;
  double d2;
  double d10;
  float f12;
  if (this.worldObj.isRemote) {
    if (this.newPosRotationIncrements > 0) {
      d10=this.posX + (this.interpTargetX - this.posX) / (double)this.newPosRotationIncrements;
      d0=this.posY + (this.interpTargetY - this.posY) / (double)this.newPosRotationIncrements;
      d1=this.posZ + (this.interpTargetZ - this.posZ) / (double)this.newPosRotationIncrements;
      d2=MathHelper.wrapDegrees(this.interpTargetYaw - (double)this.rotationYaw);
      this.rotationYaw=(float)((double)this.rotationYaw + d2 / (double)this.newPosRotationIncrements);
      this.rotationPitch=(float)((double)this.rotationPitch + (this.interpTargetPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
      --this.newPosRotationIncrements;
      this.setPosition(d10,d0,d1);
      this.setRotation(this.rotationYaw,this.rotationPitch);
    }
  }
 else {
    if (target != null && (target.isDead || !target.isEntityAlive() || target.getDistance(posX,posY,posZ) > 300)) {
      target=null;
    }
    d10=this.targetX - this.posX;
    d0=this.targetY - this.posY;
    d1=this.targetZ - this.posZ;
    d2=d10 * d10 + d0 * d0 + d1 * d1;
    if (this.target != null) {
      if (behaviour == EnumBehaviour.CIRCLE_PLAYER) {
        this.targetX=this.target.posX + (int)(Math.cos(circlePosition) * 60);
        this.targetZ=this.target.posZ + (int)(Math.sin(circlePosition) * 60);
        moveSpeedMultiplier=1F + Math.min(((float)Utils.getDistanceAtoB(targetX,targetZ,posX,posZ) / 50) * 3F,3F);
      }
 else {
        this.targetX=this.target.posX;
        this.targetZ=this.target.posZ;
      }
      double d3=this.targetX - this.posX;
      double d5=this.targetZ - this.posZ;
      double d7=Math.sqrt(d3 * d3 + d5 * d5);
      double d8=0.4000000059604645D + d7 / 80.0D - 1.0D;
      if (d8 > 10.0D) {
        d8=10.0D;
      }
      this.targetY=this.target.getEntityBoundingBox().minY + d8 + (behaviour == EnumBehaviour.CIRCLE_PLAYER ? 25 : 0);
    }
 else     if (behaviour != EnumBehaviour.FIREBOMB) {
      this.targetX+=this.rand.nextGaussian() * 2.0D;
      this.targetZ+=this.rand.nextGaussian() * 2.0D;
    }
    if (this.forceNewTarget || d2 < 100.0D || d2 > 22500.0D || this.isCollidedHorizontally || this.isCollidedVertically) {
      this.setNewTarget();
    }
    d0/=(double)MathHelper.sqrt_double(d10 * d10 + d1 * d1);
    f12=0.6F;
    if (d0 < (double)(-f12)) {
      d0=(double)(-f12);
    }
    if (d0 > (double)f12) {
      d0=(double)f12;
    }
    this.motionY+=d0 * 0.10000000149011612D;
    this.rotationYaw=MathHelper.wrapDegrees(this.rotationYaw);
    double d4=180.0D - Math.atan2(d10,d1) * 180.0D / Math.PI;
    double d6=MathHelper.wrapDegrees(d4 - (double)this.rotationYaw);
    if (d6 > 50.0D) {
      d6=50.0D;
    }
    if (d6 < -50.0D) {
      d6=-50.0D;
    }
    Vec3d vec3=new Vec3d(this.targetX - this.posX,this.targetY - this.posY,this.targetZ - this.posZ).normalize();
    Vec3d vec32=new Vec3d((double)MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F),this.motionY,(double)(-MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F))).normalize();
    float f5=(float)(vec32.dotProduct(vec3) + 0.5D) / 1.5F;
    if (f5 < 0.0F) {
      f5=0.0F;
    }
    this.randomYawVelocity*=0.8F;
    float f6=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 1.0F + 1.0F;
    double d9=Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ) * 1.0D + 1.0D;
    if (d9 > 40.0D) {
      d9=40.0D;
    }
    this.randomYawVelocity=(float)((double)this.randomYawVelocity + d6 * (0.699999988079071D / d9 / (double)f6));
    this.rotationYaw+=this.randomYawVelocity * 0.1F;
    float f7=(float)(2.0D / (d9 + 1.0D));
    float f8=0.06F;
    this.moveRelative(0.0F,-1.0F,f8 * (f5 * f7 + (1.0F - f7)));
    if (this.slowed) {
      this.moveEntity(this.motionX * 0.800000011920929D * moveSpeedMultiplier,this.motionY * 0.800000011920929D * moveSpeedMultiplier,this.motionZ * 0.800000011920929D * moveSpeedMultiplier);
    }
 else {
      this.moveEntity(this.motionX * moveSpeedMultiplier,this.motionY * moveSpeedMultiplier,this.motionZ * moveSpeedMultiplier);
    }
    Vec3d vec31=new Vec3d(this.motionX,this.motionY,this.motionZ).normalize();
    float f9=(float)(vec31.dotProduct(vec32) + 1.0D) / 2.0F;
    f9=0.8F + 0.15F * f9;
    this.motionX*=(double)f9;
    this.motionZ*=(double)f9;
    this.motionY*=0.9100000262260437D;
  }
  this.renderYawOffset=this.rotationYaw;
  this.dragonPartHead.width=this.dragonPartHead.height=3.0F;
  this.dragonPartTail1.width=this.dragonPartTail1.height=2.0F;
  this.dragonPartTail2.width=this.dragonPartTail2.height=2.0F;
  this.dragonPartTail3.width=this.dragonPartTail3.height=2.0F;
  this.dragonPartBody.height=3.0F;
  this.dragonPartBody.width=5.0F;
  this.dragonPartWing1.height=2.0F;
  this.dragonPartWing1.width=4.0F;
  this.dragonPartWing2.height=3.0F;
  this.dragonPartWing2.width=4.0F;
  f1=(float)(this.getMovementOffsets(5,1.0F)[1] - this.getMovementOffsets(10,1.0F)[1]) * 10.0F / 180.0F * (float)Math.PI;
  f2=MathHelper.cos(f1);
  float f10=-MathHelper.sin(f1);
  float f3=this.rotationYaw * (float)Math.PI / 180.0F;
  float f11=MathHelper.sin(f3);
  float f4=MathHelper.cos(f3);
  this.dragonPartBody.onUpdate();
  this.dragonPartBody.setLocationAndAngles(this.posX + (double)(f11 * 0.5F),this.posY,this.posZ - (double)(f4 * 0.5F),0.0F,0.0F);
  this.dragonPartWing1.onUpdate();
  this.dragonPartWing1.setLocationAndAngles(this.posX + (double)(f4 * 4.5F),this.posY + 2.0D,this.posZ + (double)(f11 * 4.5F),0.0F,0.0F);
  this.dragonPartWing2.onUpdate();
  this.dragonPartWing2.setLocationAndAngles(this.posX - (double)(f4 * 4.5F),this.posY + 2.0D,this.posZ - (double)(f11 * 4.5F),0.0F,0.0F);
  if (!this.worldObj.isRemote && this.hurtTime == 0) {
    this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.dragonPartWing1.getEntityBoundingBox().expand(4.0D,2.0D,4.0D).offset(0.0D,-2.0D,0.0D)));
    this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.dragonPartWing2.getEntityBoundingBox().expand(4.0D,2.0D,4.0D).offset(0.0D,-2.0D,0.0D)));
    this.attackEntitiesInList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.dragonPartHead.getEntityBoundingBox().expand(1.0D,1.0D,1.0D)));
  }
  double[] adouble1=this.getMovementOffsets(5,1.0F);
  double[] adouble=this.getMovementOffsets(0,1.0F);
  f12=MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
  float f13=MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
  this.dragonPartHead.onUpdate();
  this.dragonPartHead.setLocationAndAngles(this.posX + (double)(f12 * 5.5F * f2),this.posY + (adouble[1] - adouble1[1]) * 1.0D + (double)(f10 * 5.5F),this.posZ - (double)(f13 * 5.5F * f2),0.0F,0.0F);
  for (int j=0; j < 3; ++j) {
    EntityDragonPart entitydragonpart=null;
    if (j == 0) {
      entitydragonpart=this.dragonPartTail1;
    }
    if (j == 1) {
      entitydragonpart=this.dragonPartTail2;
    }
    if (j == 2) {
      entitydragonpart=this.dragonPartTail3;
    }
    double[] adouble2=this.getMovementOffsets(12 + j * 2,1.0F);
    float f14=this.rotationYaw * (float)Math.PI / 180.0F + this.simplifyAngle(adouble2[0] - adouble1[0]) * (float)Math.PI / 180.0F * 1.0F;
    float f15=MathHelper.sin(f14);
    float f16=MathHelper.cos(f14);
    float f17=1.5F;
    float f18=(float)(j + 1) * 2.0F;
    entitydragonpart.onUpdate();
    entitydragonpart.setLocationAndAngles(this.posX - (double)((f11 * f17 + f15 * f18) * f2),this.posY + (adouble2[1] - adouble1[1]) * 1.0D - (double)((f18 + f17) * f10) + 1.5D,this.posZ + (double)((f4 * f17 + f16 * f18) * f2),0.0F,0.0F);
  }
  if (!this.worldObj.isRemote) {
    this.slowed=this.destroyBlocksInAABB(this.dragonPartHead.getEntityBoundingBox()) | this.destroyBlocksInAABB(this.dragonPartBody.getEntityBoundingBox());
  }
}","@Override public void onLivingUpdate(){
  if (ticksExisted % 20 == 0 && !worldObj.isRemote) {
    LogHelper.dev(""String_Node_Str"" + this.getEntityString());
    LogHelper.dev(""String_Node_Str"" + this.isDead);
    LogHelper.dev(""String_Node_Str"" + this.isRiding());
  }
  if (!homeSet) {
    homeX=(int)posX;
    homeY=(int)posY;
    homeZ=(int)posZ;
    targetX=homeX;
    targetZ=homeZ;
    homeSet=true;
  }
  if (crystals == null)   updateCrystals();
  float f;
  float f1;
  float moveSpeedMultiplier=behaviour.dragonSpeed;
  if (this.worldObj.isRemote) {
    f=MathHelper.cos(this.animTime * (float)Math.PI * 2.0F);
    f1=MathHelper.cos(this.prevAnimTime * (float)Math.PI * 2.0F);
    if (f1 <= -0.3F && f >= -0.3F) {
      if (deathTicks <= 0) {
        this.worldObj.playSound(this.posX,this.posY,this.posZ,SoundEvents.ENTITY_ENDERDRAGON_FLAP,SoundCategory.HOSTILE,5.0F,0.8F + this.rand.nextFloat() * 0.3F,false);
      }
    }
  }
  this.prevAnimTime=this.animTime;
  float f2;
  if (!worldObj.isRemote) {
    updateTarget();
    if (worldObj.getClosestPlayer(posX,posY,posZ,500,true) == null && getDistance(homeX,homeY,homeZ) < 100) {
      LogHelper.dev(""String_Node_Str"");
      DragonChunkLoader.updateLoaded(this);
      double posX=this.posX - (this.posX % 16) + 8;
      double posZ=this.posZ - (this.posZ % 16) + 8;
      setPosition(posX,posY,posZ);
      behaviour=EnumBehaviour.ROAMING;
      motionX=motionY=motionZ=0;
      DragonChunkLoader.stopLoading(this);
      LogHelper.dev(""String_Node_Str"");
      return;
    }
 else {
      if (getHealth() > 0) {
        DragonChunkLoader.updateLoaded(this);
      }
    }
    if (deathTicks > 0) {
      DragonChunkLoader.stopLoading(this);
    }
    customAIUpdate();
    if (behaviour == EnumBehaviour.FIREBOMB && Utils.getDistanceAtoB(posX,posY,posZ,homeX,homeY + 30,homeZ) <= 3) {
      moveSpeedMultiplier=0;
    }
  }
  if (this.getHealth() <= 0.0F) {
    behaviour=EnumBehaviour.DEAD;
    f=(this.rand.nextFloat() - 0.5F) * 8.0F;
    f1=(this.rand.nextFloat() - 0.5F) * 4.0F;
    f2=(this.rand.nextFloat() - 0.5F) * 8.0F;
    worldObj.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE,this.posX + (double)f,this.posY + 2.0D + (double)f1,this.posZ + (double)f2,0.0D,0.0D,0.0D);
  }
  this.updateDragonEnderCrystal();
  f=0.2F / (MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 10.0F + 1.0F);
  f*=moveSpeedMultiplier == 0 ? 1 : moveSpeedMultiplier;
  f*=(float)Math.pow(2.0D,this.motionY);
  if (this.slowed) {
    this.animTime+=f * 0.5F;
  }
 else {
    this.animTime+=f;
  }
  this.rotationYaw=MathHelper.wrapDegrees(this.rotationYaw);
  if (this.ringBufferIndex < 0) {
    for (int i=0; i < this.ringBuffer.length; ++i) {
      this.ringBuffer[i][0]=(double)this.rotationYaw;
      this.ringBuffer[i][1]=this.posY;
    }
  }
  if (++this.ringBufferIndex == this.ringBuffer.length) {
    this.ringBufferIndex=0;
  }
  this.ringBuffer[this.ringBufferIndex][0]=(double)this.rotationYaw;
  this.ringBuffer[this.ringBufferIndex][1]=this.posY;
  double d0;
  double d1;
  double d2;
  double d10;
  float f12;
  if (this.worldObj.isRemote) {
    if (this.newPosRotationIncrements > 0) {
      d10=this.posX + (this.interpTargetX - this.posX) / (double)this.newPosRotationIncrements;
      d0=this.posY + (this.interpTargetY - this.posY) / (double)this.newPosRotationIncrements;
      d1=this.posZ + (this.interpTargetZ - this.posZ) / (double)this.newPosRotationIncrements;
      d2=MathHelper.wrapDegrees(this.interpTargetYaw - (double)this.rotationYaw);
      this.rotationYaw=(float)((double)this.rotationYaw + d2 / (double)this.newPosRotationIncrements);
      this.rotationPitch=(float)((double)this.rotationPitch + (this.interpTargetPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
      --this.newPosRotationIncrements;
      this.setPosition(d10,d0,d1);
      this.setRotation(this.rotationYaw,this.rotationPitch);
    }
  }
 else {
    if (target != null && (target.isDead || !target.isEntityAlive() || target.getDistance(posX,posY,posZ) > 300)) {
      target=null;
    }
    d10=this.targetX - this.posX;
    d0=this.targetY - this.posY;
    d1=this.targetZ - this.posZ;
    d2=d10 * d10 + d0 * d0 + d1 * d1;
    if (this.target != null) {
      if (behaviour == EnumBehaviour.CIRCLE_PLAYER) {
        this.targetX=this.target.posX + (int)(Math.cos(circlePosition) * 60);
        this.targetZ=this.target.posZ + (int)(Math.sin(circlePosition) * 60);
        moveSpeedMultiplier=1F + Math.min(((float)Utils.getDistanceAtoB(targetX,targetZ,posX,posZ) / 50) * 3F,3F);
      }
 else {
        this.targetX=this.target.posX;
        this.targetZ=this.target.posZ;
      }
      double d3=this.targetX - this.posX;
      double d5=this.targetZ - this.posZ;
      double d7=Math.sqrt(d3 * d3 + d5 * d5);
      double d8=0.4000000059604645D + d7 / 80.0D - 1.0D;
      if (d8 > 10.0D) {
        d8=10.0D;
      }
      this.targetY=this.target.getEntityBoundingBox().minY + d8 + (behaviour == EnumBehaviour.CIRCLE_PLAYER ? 25 : 0);
    }
 else     if (behaviour != EnumBehaviour.FIREBOMB) {
      this.targetX+=this.rand.nextGaussian() * 2.0D;
      this.targetZ+=this.rand.nextGaussian() * 2.0D;
    }
    if (this.forceNewTarget || d2 < 100.0D || d2 > 22500.0D || this.isCollidedHorizontally || this.isCollidedVertically) {
      this.setNewTarget();
    }
    d0/=(double)MathHelper.sqrt_double(d10 * d10 + d1 * d1);
    f12=0.6F;
    if (d0 < (double)(-f12)) {
      d0=(double)(-f12);
    }
    if (d0 > (double)f12) {
      d0=(double)f12;
    }
    this.motionY+=d0 * 0.10000000149011612D;
    this.rotationYaw=MathHelper.wrapDegrees(this.rotationYaw);
    double d4=180.0D - Math.atan2(d10,d1) * 180.0D / Math.PI;
    double d6=MathHelper.wrapDegrees(d4 - (double)this.rotationYaw);
    if (d6 > 50.0D) {
      d6=50.0D;
    }
    if (d6 < -50.0D) {
      d6=-50.0D;
    }
    Vec3d vec3=new Vec3d(this.targetX - this.posX,this.targetY - this.posY,this.targetZ - this.posZ).normalize();
    Vec3d vec32=new Vec3d((double)MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F),this.motionY,(double)(-MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F))).normalize();
    float f5=(float)(vec32.dotProduct(vec3) + 0.5D) / 1.5F;
    if (f5 < 0.0F) {
      f5=0.0F;
    }
    this.randomYawVelocity*=0.8F;
    float f6=MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 1.0F + 1.0F;
    double d9=Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ) * 1.0D + 1.0D;
    if (d9 > 40.0D) {
      d9=40.0D;
    }
    this.randomYawVelocity=(float)((double)this.randomYawVelocity + d6 * (0.699999988079071D / d9 / (double)f6));
    this.rotationYaw+=this.randomYawVelocity * 0.1F;
    float f7=(float)(2.0D / (d9 + 1.0D));
    float f8=0.06F;
    this.moveRelative(0.0F,-1.0F,f8 * (f5 * f7 + (1.0F - f7)));
    if (this.slowed) {
      this.moveEntity(this.motionX * 0.800000011920929D * moveSpeedMultiplier,this.motionY * 0.800000011920929D * moveSpeedMultiplier,this.motionZ * 0.800000011920929D * moveSpeedMultiplier);
    }
 else {
      this.moveEntity(this.motionX * moveSpeedMultiplier,this.motionY * moveSpeedMultiplier,this.motionZ * moveSpeedMultiplier);
    }
    Vec3d vec31=new Vec3d(this.motionX,this.motionY,this.motionZ).normalize();
    float f9=(float)(vec31.dotProduct(vec32) + 1.0D) / 2.0F;
    f9=0.8F + 0.15F * f9;
    this.motionX*=(double)f9;
    this.motionZ*=(double)f9;
    this.motionY*=0.9100000262260437D;
  }
  this.renderYawOffset=this.rotationYaw;
  this.dragonPartHead.width=this.dragonPartHead.height=3.0F;
  this.dragonPartTail1.width=this.dragonPartTail1.height=2.0F;
  this.dragonPartTail2.width=this.dragonPartTail2.height=2.0F;
  this.dragonPartTail3.width=this.dragonPartTail3.height=2.0F;
  this.dragonPartBody.height=3.0F;
  this.dragonPartBody.width=5.0F;
  this.dragonPartWing1.height=2.0F;
  this.dragonPartWing1.width=4.0F;
  this.dragonPartWing2.height=3.0F;
  this.dragonPartWing2.width=4.0F;
  f1=(float)(this.getMovementOffsets(5,1.0F)[1] - this.getMovementOffsets(10,1.0F)[1]) * 10.0F / 180.0F * (float)Math.PI;
  f2=MathHelper.cos(f1);
  float f10=-MathHelper.sin(f1);
  float f3=this.rotationYaw * (float)Math.PI / 180.0F;
  float f11=MathHelper.sin(f3);
  float f4=MathHelper.cos(f3);
  this.dragonPartBody.onUpdate();
  this.dragonPartBody.setLocationAndAngles(this.posX + (double)(f11 * 0.5F),this.posY,this.posZ - (double)(f4 * 0.5F),0.0F,0.0F);
  this.dragonPartWing1.onUpdate();
  this.dragonPartWing1.setLocationAndAngles(this.posX + (double)(f4 * 4.5F),this.posY + 2.0D,this.posZ + (double)(f11 * 4.5F),0.0F,0.0F);
  this.dragonPartWing2.onUpdate();
  this.dragonPartWing2.setLocationAndAngles(this.posX - (double)(f4 * 4.5F),this.posY + 2.0D,this.posZ - (double)(f11 * 4.5F),0.0F,0.0F);
  if (!this.worldObj.isRemote && this.hurtTime == 0) {
    this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.dragonPartWing1.getEntityBoundingBox().expand(4.0D,2.0D,4.0D).offset(0.0D,-2.0D,0.0D)));
    this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.dragonPartWing2.getEntityBoundingBox().expand(4.0D,2.0D,4.0D).offset(0.0D,-2.0D,0.0D)));
    this.attackEntitiesInList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.dragonPartHead.getEntityBoundingBox().expand(1.0D,1.0D,1.0D)));
  }
  double[] adouble1=this.getMovementOffsets(5,1.0F);
  double[] adouble=this.getMovementOffsets(0,1.0F);
  f12=MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
  float f13=MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
  this.dragonPartHead.onUpdate();
  this.dragonPartHead.setLocationAndAngles(this.posX + (double)(f12 * 5.5F * f2),this.posY + (adouble[1] - adouble1[1]) * 1.0D + (double)(f10 * 5.5F),this.posZ - (double)(f13 * 5.5F * f2),0.0F,0.0F);
  for (int j=0; j < 3; ++j) {
    EntityDragonPart entitydragonpart=null;
    if (j == 0) {
      entitydragonpart=this.dragonPartTail1;
    }
    if (j == 1) {
      entitydragonpart=this.dragonPartTail2;
    }
    if (j == 2) {
      entitydragonpart=this.dragonPartTail3;
    }
    double[] adouble2=this.getMovementOffsets(12 + j * 2,1.0F);
    float f14=this.rotationYaw * (float)Math.PI / 180.0F + this.simplifyAngle(adouble2[0] - adouble1[0]) * (float)Math.PI / 180.0F * 1.0F;
    float f15=MathHelper.sin(f14);
    float f16=MathHelper.cos(f14);
    float f17=1.5F;
    float f18=(float)(j + 1) * 2.0F;
    entitydragonpart.onUpdate();
    entitydragonpart.setLocationAndAngles(this.posX - (double)((f11 * f17 + f15 * f18) * f2),this.posY + (adouble2[1] - adouble1[1]) * 1.0D - (double)((f18 + f17) * f10) + 1.5D,this.posZ + (double)((f4 * f17 + f16 * f18) * f2),0.0F,0.0F);
  }
  if (!this.worldObj.isRemote) {
    this.slowed=this.destroyBlocksInAABB(this.dragonPartHead.getEntityBoundingBox()) | this.destroyBlocksInAABB(this.dragonPartBody.getEntityBoundingBox());
  }
}",0.9827467218771566
117148,"@Override public ActionResult<ItemStack> onItemRightClick(ItemStack itemStack,World world,EntityPlayer player,EnumHand hand){
  if (!world.isRemote) {
  }
  MODES.clear();
  MODES.put(0,""String_Node_Str"");
  MODES.put(1,""String_Node_Str"");
  MODES.put(2,""String_Node_Str"");
  MODES.put(3,""String_Node_Str"");
  MODES.put(4,""String_Node_Str"");
  MODES.put(5,""String_Node_Str"");
  MODES.put(6,""String_Node_Str"");
  MODES.put(7,""String_Node_Str"");
  handleRightClick(itemStack,world,player,hand);
  return super.onItemRightClick(itemStack,world,player,hand);
}","@Override public ActionResult<ItemStack> onItemRightClick(ItemStack itemStack,World world,EntityPlayer player,EnumHand hand){
  double posX=player.posX - (player.posX % 16) + 8;
  double posZ=player.posZ - (player.posZ % 16) + 8;
  player.setPosition(posX,player.posY,posZ);
  MODES.clear();
  MODES.put(0,""String_Node_Str"");
  MODES.put(1,""String_Node_Str"");
  MODES.put(2,""String_Node_Str"");
  MODES.put(3,""String_Node_Str"");
  MODES.put(4,""String_Node_Str"");
  MODES.put(5,""String_Node_Str"");
  MODES.put(6,""String_Node_Str"");
  MODES.put(7,""String_Node_Str"");
  handleRightClick(itemStack,world,player,hand);
  return super.onItemRightClick(itemStack,world,player,hand);
}",0.2191558441558441
117149,"public static void addModAchievements(){
  int x=5;
}","public static void addModAchievements(){
  int x=5;
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-10 + x,0,DEFeatures.draconiumDust,null).initIndependentStat().setSpecial(),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-8 + x,0,DEFeatures.draconiumIngot,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-6 + x,0,DEFeatures.draconicCore,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-4 + x,0,DEFeatures.wyvernCore,getAchievement(""String_Node_Str"")).setSpecial(),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-8 + x,1,DEFeatures.dislocator,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-7 + x,2,DEFeatures.particleGenerator,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-5 + x,-2,DEFeatures.celestialManipulator,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-7 + x,-2,DEFeatures.dissEnchanter,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-4 + x,-6,DEFeatures.energyStorageCore,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,1,DEFeatures.wyvernPick,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,-1,DEFeatures.wyvernShovel,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,2,DEFeatures.wyvernSword,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,-2,DEFeatures.wyvernBow,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,-4,DEFeatures.wyvernHelm,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,-3,DEFeatures.wyvernChest,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,3,DEFeatures.wyvernLegs,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,4,DEFeatures.wyvernBoots,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,-5,DEFeatures.dislocatorAdvanced,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-2 + x,5,DEFeatures.wyvernCapacitor,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",0 + x,0,DEFeatures.dragonHeart,getAchievement(""String_Node_Str"")).setSpecial(),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",2 + x,0,DEFeatures.draconicBlock,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",4 + x,0,DEFeatures.awakenedCore,getAchievement(""String_Node_Str"")).setSpecial(),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",2 + x,-3,DEFeatures.draconicHelm,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",2 + x,-2,DEFeatures.draconicChest,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",2 + x,2,DEFeatures.draconicLegs,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",2 + x,3,DEFeatures.draconicBoots,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",6 + x,0,DEFeatures.draconicPick,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",6 + x,-1,DEFeatures.draconicShovel,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",6 + x,1,DEFeatures.draconicAxe,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",6 + x,-2,DEFeatures.draconicSword,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",6 + x,2,DEFeatures.draconicBow,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",6 + x,-3,DEFeatures.draconicCapacitor,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",6 + x,3,DEFeatures.draconicHoe,getAchievement(""String_Node_Str"")),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",8 + x,0,DEFeatures.draconicStaffOfPower,getAchievement(""String_Node_Str"")).setSpecial(),""String_Node_Str"");
  ItemStack mobSoul=new ItemStack(DEFeatures.mobSoul);
  ItemNBTHelper.setString(mobSoul,""String_Node_Str"",""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",0 + x,-2,mobSoul,null).initIndependentStat(),""String_Node_Str"");
  addAchievement(""String_Node_Str"",new Achievement(""String_Node_Str"",""String_Node_Str"",-8 + x,-1,DEFeatures.infoTablet,getAchievement(""String_Node_Str"")),""String_Node_Str"");
}",0.0160703456640388
117150,"/** 
 * Clears the pedestal list and then re acquires all valid pedestals.
 */
public void updatePedestals(){
  if (isCrafting.value) {
    return;
  }
  pedestals.clear();
  int range=16;
  List<BlockPos> positions=new ArrayList<BlockPos>();
  positions.addAll(Lists.newArrayList(BlockPos.getAllInBox(pos.add(-range,-1,-1),pos.add(range,1,1))));
  positions.addAll(Lists.newArrayList(BlockPos.getAllInBox(pos.add(-1,-range,-1),pos.add(1,range,1))));
  positions.addAll(Lists.newArrayList(BlockPos.getAllInBox(pos.add(-1,-1,-range),pos.add(1,1,range))));
  for (  BlockPos checkPos : positions) {
    TileEntity tile=worldObj.getTileEntity(checkPos);
    if (tile instanceof ICraftingPedestal) {
      ICraftingPedestal pedestal=(ICraftingPedestal)tile;
      Vec3D dirVec=new Vec3D(tile.getPos()).subtract(pos);
      double dist=Utils.getDistanceAtoB(new Vec3D(tile.getPos()),new Vec3D(pos));
      if (dist >= 2 && EnumFacing.getFacingFromVector((int)dirVec.x,(int)dirVec.y,(int)dirVec.z) == pedestal.getDirection().getOpposite() && pedestal.setCraftingInventory(this)) {
        BlockPos pPos=tile.getPos();
        EnumFacing facing=pedestal.getDirection();
        List<BlockPos> checkList=Lists.newArrayList(BlockPos.getAllInBox(pPos.offset(facing),pPos.offset(facing,FacingUtils.destanceInDirection(pPos,pos,facing) - 2)));
        boolean obstructed=false;
        for (        BlockPos bp : checkList) {
          if (!worldObj.isAirBlock(bp) && (worldObj.getBlockState(bp).isFullCube() || worldObj.getTileEntity(bp) instanceof ICraftingPedestal)) {
            obstructed=true;
            break;
          }
        }
        if (!obstructed) {
          pedestals.add(pedestal);
        }
 else {
          pedestal.setCraftingInventory(null);
        }
      }
    }
  }
}","/** 
 * Clears the pedestal list and then re acquires all valid pedestals.
 */
public void updatePedestals(){
  if (isCrafting.value) {
    return;
  }
  pedestals.clear();
  int range=16;
  List<BlockPos> positions=new ArrayList<BlockPos>();
  positions.addAll(Lists.newArrayList(BlockPos.getAllInBox(pos.add(-range,-1,-1),pos.add(range,1,1))));
  positions.addAll(Lists.newArrayList(BlockPos.getAllInBox(pos.add(-1,-range,-1),pos.add(1,range,1))));
  positions.addAll(Lists.newArrayList(BlockPos.getAllInBox(pos.add(-1,-1,-range),pos.add(1,1,range))));
  for (  BlockPos checkPos : positions) {
    TileEntity tile=worldObj.getTileEntity(checkPos);
    if (tile instanceof ICraftingPedestal) {
      ICraftingPedestal pedestal=(ICraftingPedestal)tile;
      Vec3D dirVec=new Vec3D(tile.getPos()).subtract(pos);
      double dist=Utils.getDistanceAtoB(new Vec3D(tile.getPos()),new Vec3D(pos));
      if (dist >= 2 && EnumFacing.getFacingFromVector((int)dirVec.x,(int)dirVec.y,(int)dirVec.z) == pedestal.getDirection().getOpposite() && pedestal.setCraftingInventory(this)) {
        BlockPos pPos=tile.getPos();
        EnumFacing facing=pedestal.getDirection();
        List<BlockPos> checkList=Lists.newArrayList(BlockPos.getAllInBox(pPos.offset(facing),pPos.offset(facing,FacingUtils.destanceInDirection(pPos,pos,facing) - 1)));
        boolean obstructed=false;
        for (        BlockPos bp : checkList) {
          if (!worldObj.isAirBlock(bp) && (worldObj.getBlockState(bp).isFullCube() || worldObj.getTileEntity(bp) instanceof ICraftingPedestal)) {
            obstructed=true;
            break;
          }
        }
        if (!obstructed) {
          pedestals.add(pedestal);
        }
 else {
          pedestal.setCraftingInventory(null);
        }
      }
    }
  }
}",0.9994400895856664
117151,"private void killnextEnderman(){
  if (worldObj.isRemote) {
    return;
  }
  List<EntityEnderman> list=worldObj.getEntitiesWithinAABB(EntityEnderman.class,getEntityBoundingBox().expand(8,15,8),EntitySelectors.IS_ALIVE);
  LogHelper.dev(getEntityBoundingBox().expand(8,15,8));
  if (!list.isEmpty()) {
    EntityEnderman enderman=list.get(rand.nextInt(list.size()));
    enderman.captureDrops=true;
    Vec3D dirVec=Vec3D.getDirectionVec(new Vec3D(enderman),new Vec3D(0.5,67.5,0.5));
    enderman.motionX=dirVec.x;
    enderman.motionY=dirVec.y;
    enderman.motionZ=dirVec.z;
    enderman.attackEntityFrom(DamageSource.magic,10000F);
    soulsCollected++;
    BCEffectHandler.spawnFX(DEParticles.SOUL_EXTRACTION,worldObj,new Vec3D(enderman),new Vec3D(this),100);
  }
}","private void killnextEnderman(){
  if (worldObj.isRemote) {
    return;
  }
  List<EntityEnderman> list=worldObj.getEntitiesWithinAABB(EntityEnderman.class,getEntityBoundingBox().expand(8,15,8),EntitySelectors.IS_ALIVE);
  if (!list.isEmpty()) {
    EntityEnderman enderman=list.get(rand.nextInt(list.size()));
    enderman.captureDrops=true;
    Vec3D dirVec=Vec3D.getDirectionVec(new Vec3D(enderman),new Vec3D(0.5,exitPortalLocation.getY() + 0.5,0.5));
    enderman.motionX=dirVec.x;
    enderman.motionY=dirVec.y;
    enderman.motionZ=dirVec.z;
    enderman.attackEntityFrom(DamageSource.magic,10000F);
    soulsCollected++;
    BCEffectHandler.spawnFX(DEParticles.SOUL_EXTRACTION,worldObj,new Vec3D(enderman),new Vec3D(this),100);
  }
}",0.6905235255135852
117152,"@Override public void onUpdate(){
  this.prevPosX=this.posX;
  this.prevPosY=this.posY;
  this.prevPosZ=this.posZ;
  if (!worldObj.isRemote) {
    updateStage();
  }
  if (getStage() == Stage.POSITION) {
    LogHelper.dev(noClip);
    this.moveEntity(this.motionX,this.motionY,this.motionZ);
  }
 else {
    setPosition(0.5,67.5,0.5);
    motionX=motionY=motionZ=0;
  }
  if (!worldObj.isRemote) {
    if (dragon != null) {
      dragon.setAttackTarget(null);
      if (!dragon.isEntityAlive()) {
        dragon=null;
        LogHelper.dev(""String_Node_Str"");
        List<EntityDragon> list=worldObj.getEntities(EntityDragon.class,EntitySelectors.IS_ALIVE);
        for (        EntityDragon listItem : list) {
          if (dragon == null || listItem.getDistance(0,67,0) < dragon.getDistance(0,67,0)) {
            dragon=listItem;
          }
        }
        if (dragon == null) {
          cancel();
          return;
        }
      }
      if (getStage() != Stage.EXTRACT) {
        IPhase phase=dragon.getPhaseManager().getCurrentPhase();
        if (phase instanceof PhaseLandingApproach || phase instanceof PhaseLanding || phase instanceof PhaseSittingBase) {
          dragon.getPhaseManager().setPhase(PhaseList.HOLDING_PATTERN);
        }
      }
 else       if (stageTime < 300) {
        IPhase phase=dragon.getPhaseManager().getCurrentPhase();
        if (phase instanceof PhaseTakeoff) {
          dragon.getPhaseManager().setPhase(PhaseList.SITTING_SCANNING);
        }
 else         if (!(phase instanceof PhaseLandingApproach || phase instanceof PhaseLanding || phase instanceof PhaseSittingBase|| phase instanceof PhaseHover)) {
          dragon.getPhaseManager().setPhase(PhaseList.LANDING);
        }
      }
    }
  }
}","@Override public void onUpdate(){
  this.prevPosX=this.posX;
  this.prevPosY=this.posY;
  this.prevPosZ=this.posZ;
  if (exitPortalLocation == null) {
    for (exitPortalLocation=new BlockPos(0,100,0); worldObj.getBlockState(this.exitPortalLocation).getBlock() != Blocks.BEDROCK && exitPortalLocation.getY() > 30; this.exitPortalLocation=this.exitPortalLocation.down())     ;
    if (exitPortalLocation.getY() <= 30) {
      cancel();
      return;
    }
    LogHelper.dev(exitPortalLocation);
    exitPortalLocation=exitPortalLocation.up(1);
  }
  if (!worldObj.isRemote) {
    updateStage();
  }
  if (getStage() == Stage.POSITION) {
    this.moveEntity(this.motionX,this.motionY,this.motionZ);
  }
 else {
    setPosition(0.5,exitPortalLocation.getY() + 0.5,0.5);
    motionX=motionY=motionZ=0;
  }
  if (!worldObj.isRemote) {
    if (dragon != null) {
      dragon.setAttackTarget(null);
      if (!dragon.isEntityAlive()) {
        dragon=null;
        LogHelper.dev(""String_Node_Str"");
        List<EntityDragon> list=worldObj.getEntities(EntityDragon.class,EntitySelectors.IS_ALIVE);
        for (        EntityDragon listItem : list) {
          if (dragon == null || listItem.getDistance(0,exitPortalLocation.getY() + 0.5,0) < dragon.getDistance(0,exitPortalLocation.getY() + 0.5,0)) {
            dragon=listItem;
          }
        }
        if (dragon == null) {
          cancel();
          return;
        }
      }
      if (getStage() != Stage.EXTRACT) {
        IPhase phase=dragon.getPhaseManager().getCurrentPhase();
        if (phase instanceof PhaseLandingApproach || phase instanceof PhaseLanding || phase instanceof PhaseSittingBase) {
          dragon.getPhaseManager().setPhase(PhaseList.HOLDING_PATTERN);
        }
      }
 else       if (stageTime < 300) {
        IPhase phase=dragon.getPhaseManager().getCurrentPhase();
        if (phase instanceof PhaseTakeoff) {
          dragon.getPhaseManager().setPhase(PhaseList.SITTING_SCANNING);
        }
 else         if (!(phase instanceof PhaseLandingApproach || phase instanceof PhaseLanding || phase instanceof PhaseSittingBase|| phase instanceof PhaseHover)) {
          dragon.getPhaseManager().setPhase(PhaseList.LANDING);
        }
      }
    }
  }
}",0.8602312719959779
117153,"private void updateStage(){
switch (getStage()) {
case POSITION:
{
      if (getDistance(0.5,67.5,0.5) > 0.1) {
        ((WorldServer)worldObj).spawnParticle(EnumParticleTypes.END_ROD,true,posX,posY,posZ,1,0,0,0,0.01,0);
        double speed=0.1;
        Vec3D dirVec=Vec3D.getDirectionVec(new Vec3D(this),new Vec3D(0.5,67.5,0.5));
        motionX=dirVec.x * speed;
        motionY=dirVec.y * speed;
        motionZ=dirVec.z * speed;
      }
 else {
        motionX=motionY=motionZ=0;
        setPosition(0.5,67.5,0.5);
        setStage(Stage.ACQUIRE_DRAGON);
        stageTime=0;
      }
      break;
    }
case ACQUIRE_DRAGON:
{
    if (stageTime == 0) {
      if (!(worldObj.provider instanceof WorldProviderEnd)) {
        cancel();
        return;
      }
      fightManager=((WorldProviderEnd)worldObj.provider).getDragonFightManager();
      List<EntityDragon> list=worldObj.getEntities(EntityDragon.class,EntitySelectors.IS_ALIVE);
      if (fightManager.dragonKilled || list.isEmpty()) {
        cancel();
        return;
      }
      for (      EntityDragon listItem : list) {
        if (dragon == null || listItem.getDistance(0,67,0) < dragon.getDistance(0,67,0)) {
          dragon=listItem;
        }
      }
      for (      WorldGenSpikes.EndSpike genSpike : BiomeEndDecorator.getSpikesForWorld(worldObj)) {
        boolean crystalFound=false;
        for (        EntityEnderCrystal entityendercrystal : worldObj.getEntitiesWithinAABB(EntityEnderCrystal.class,genSpike.getTopBoundingBox())) {
          entityendercrystal.setBeamTarget(new BlockPos(0,65,0));
          entityendercrystal.setEntityInvulnerable(true);
          crystalFound=true;
        }
        if (!crystalFound) {
          deadCrystals.add(new BlockPos(genSpike.getCenterX() + 0.5,genSpike.getHeight() + 1,genSpike.getCenterZ() + 0.5));
        }
      }
    }
 else     if (deadCrystals.size() > 0 && stageTime > 50) {
      BlockPos pos=deadCrystals.remove(rand.nextInt(deadCrystals.size()));
      worldObj.createExplosion((Entity)null,pos.getX() + 0.5,pos.getY(),pos.getZ() + 0.5,5.0F,true);
      EntityEnderCrystal crystal=new EntityEnderCrystal(worldObj);
      crystal.setLocationAndAngles(pos.getX() + 0.5,pos.getY(),pos.getZ() + 0.5,rand.nextFloat() * 360.0F,0.0F);
      worldObj.spawnEntityInWorld(crystal);
      crystal.setEntityInvulnerable(true);
      crystal.setBeamTarget(new BlockPos(0,65,0));
      stageTime=0;
    }
    if (stageTime > 50) {
      setStage(Stage.COLLECT_SOULS);
      stageTime=0;
      return;
    }
    stageTime++;
    break;
  }
case COLLECT_SOULS:
{
  if (stageTime % 20 == 0) {
    List<EntityEnderman> list=worldObj.getEntitiesWithinAABB(EntityEnderman.class,getEntityBoundingBox().expand(300,300,300),EntitySelectors.IS_ALIVE);
    if (list.size() < 20) {
      spawnNewEnderman();
    }
    int targeting=0;
    for (    EntityEnderman enderman : list) {
      if (enderman.getDistance(0,64,0) > 60) {
        enderman.setDead();
        continue;
      }
      targeting++;
      if (targeting > 5 && enderman.getAttackTarget() == this && rand.nextInt(20) == 0) {
        EntityPlayer player=Utils.getClosestPlayer(worldObj,enderman.posX,enderman.posY,enderman.posZ,50,false);
        if (player != null) {
          enderman.setAttackTarget(player);
        }
 else {
          enderman.setAttackTarget(this);
        }
      }
 else       if (targeting > 5 && enderman.getAttackTarget() instanceof EntityPlayer) {
        continue;
      }
 else {
        enderman.setAttackTarget(this);
      }
    }
    for (int i=rand.nextInt(4); i >= 0; i--) {
      killnextEnderman();
    }
  }
  if (soulsCollected > 100) {
    stageTime=0;
    setStage(Stage.EXTRACT);
  }
  stageTime++;
  break;
}
case EXTRACT:
{
if (stageTime % 20 == 0) {
  List<EntityEnderman> list=worldObj.getEntitiesWithinAABB(EntityEnderman.class,getEntityBoundingBox().expand(300,300,300),EntitySelectors.IS_ALIVE);
  for (  EntityEnderman enderman : list) {
    enderman.setAttackTarget(this);
  }
}
double dragonDist=dragon == null ? 100 : dragon.getDistance(posX,posY,posZ);
if (dragon != null && dragonDist < 10) {
  BCEffectHandler.spawnFX(DEParticles.SOUL_EXTRACTION,worldObj,new Vec3D(dragon).add(0,2,0),new Vec3D(this),512D,3);
}
if (stageTime == 300) {
  List<Entity> list=worldObj.getEntitiesWithinAABB(Entity.class,getEntityBoundingBox().expand(300,300,300),EntitySelectors.IS_ALIVE);
  for (  Entity entity : list) {
    if (entity instanceof EntityEnderman || (entity instanceof EntityItem && ((EntityItem)entity).getEntityItem().getItem() == Items.ENDER_PEARL) || entity instanceof EntityAreaEffectCloud) {
      entity.setDead();
    }
  }
  this.worldObj.playSound((EntityPlayer)null,posX,posY,posZ,SoundEvents.ENTITY_GENERIC_EXPLODE,SoundCategory.BLOCKS,40.0F,(1.0F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
  for (  EntityPlayer entityplayer : worldObj.playerEntities) {
    if (entityplayer.getDistance(posX,posY,posZ) < 512) {
      ((EntityPlayerMP)entityplayer).connection.sendPacket(new SPacketExplosion(posX,posY,posZ,505,Collections.<BlockPos>emptyList(),new Vec3d(0,0,0)));
    }
  }
  EntityPersistentItem entityItem=new EntityPersistentItem(worldObj,posX,posY,posZ,new ItemStack(Blocks.DRAGON_EGG));
  worldObj.spawnEntityInWorld(entityItem);
  entityItem.motionX=entityItem.motionY=entityItem.motionZ=0;
  cleanup();
  if (dragon != null) {
    dragon.getPhaseManager().setPhase(PhaseList.CHARGING_PLAYER);
  }
}
if (stageTime > 320) {
  worldObj.playSound((EntityPlayer)null,posX,posY,posZ,SoundEvents.ENTITY_ENDERMEN_STARE,SoundCategory.MASTER,10,0.7F);
  worldObj.playSound((EntityPlayer)null,posX,posY,posZ,SoundEvents.ENTITY_ENDERMEN_STARE,SoundCategory.MASTER,10,1F);
  worldObj.playSound((EntityPlayer)null,posX,posY,posZ,SoundEvents.ENTITY_ENDERMEN_STARE,SoundCategory.MASTER,10,1.3F);
  setDead();
}
if (dragon != null && (dragonDist < 10 || stageTime >= 300)) {
  stageTime++;
}
break;
}
}
}","private void updateStage(){
switch (getStage()) {
case POSITION:
{
      if (getDistance(0.5,exitPortalLocation.getY() + 0.5,0.5) > 0.1) {
        ((WorldServer)worldObj).spawnParticle(EnumParticleTypes.END_ROD,true,posX,posY,posZ,1,0,0,0,0.01,0);
        double speed=0.1;
        Vec3D dirVec=Vec3D.getDirectionVec(new Vec3D(this),new Vec3D(0.5,exitPortalLocation.getY() + 0.5,0.5));
        motionX=dirVec.x * speed;
        motionY=dirVec.y * speed;
        motionZ=dirVec.z * speed;
        stageTime++;
      }
 else {
        motionX=motionY=motionZ=0;
        setPosition(0.5,exitPortalLocation.getY() + 0.5,0.5);
        setStage(Stage.ACQUIRE_DRAGON);
        stageTime=0;
      }
      break;
    }
case ACQUIRE_DRAGON:
{
    if (stageTime == 0) {
      if (!(worldObj.provider instanceof WorldProviderEnd)) {
        cancel();
        return;
      }
      fightManager=((WorldProviderEnd)worldObj.provider).getDragonFightManager();
      List<EntityDragon> list=worldObj.getEntities(EntityDragon.class,EntitySelectors.IS_ALIVE);
      if (fightManager.dragonKilled || list.isEmpty()) {
        cancel();
        return;
      }
      for (      EntityDragon listItem : list) {
        if (dragon == null || listItem.getDistance(0,exitPortalLocation.getY() + 0.5,0) < dragon.getDistance(0,exitPortalLocation.getY() + 0.5,0)) {
          dragon=listItem;
        }
      }
      for (      WorldGenSpikes.EndSpike genSpike : BiomeEndDecorator.getSpikesForWorld(worldObj)) {
        boolean crystalFound=false;
        for (        EntityEnderCrystal entityendercrystal : worldObj.getEntitiesWithinAABB(EntityEnderCrystal.class,genSpike.getTopBoundingBox())) {
          entityendercrystal.setBeamTarget(exitPortalLocation.down(2));
          entityendercrystal.setEntityInvulnerable(true);
          crystalFound=true;
        }
        if (!crystalFound) {
          deadCrystals.add(new BlockPos(genSpike.getCenterX() + 0.5,genSpike.getHeight() + 1,genSpike.getCenterZ() + 0.5));
        }
      }
    }
 else     if (deadCrystals.size() > 0 && stageTime > 50) {
      BlockPos pos=deadCrystals.remove(rand.nextInt(deadCrystals.size()));
      worldObj.createExplosion((Entity)null,pos.getX() + 0.5,pos.getY(),pos.getZ() + 0.5,5.0F,true);
      EntityEnderCrystal crystal=new EntityEnderCrystal(worldObj);
      crystal.setLocationAndAngles(pos.getX() + 0.5,pos.getY(),pos.getZ() + 0.5,rand.nextFloat() * 360.0F,0.0F);
      worldObj.spawnEntityInWorld(crystal);
      crystal.setEntityInvulnerable(true);
      crystal.setBeamTarget(exitPortalLocation.down(2));
      stageTime=0;
    }
    if (stageTime > 50) {
      setStage(Stage.COLLECT_SOULS);
      stageTime=0;
      return;
    }
    stageTime++;
    break;
  }
case COLLECT_SOULS:
{
  if (stageTime % 20 == 0) {
    List<EntityEnderman> list=worldObj.getEntitiesWithinAABB(EntityEnderman.class,getEntityBoundingBox().expand(300,300,300),EntitySelectors.IS_ALIVE);
    if (list.size() < 20) {
      spawnNewEnderman();
    }
    int targeting=0;
    for (    EntityEnderman enderman : list) {
      if (enderman.getDistance(0,64,0) > 60) {
        enderman.setDead();
        continue;
      }
      targeting++;
      if (targeting > 5 && enderman.getAttackTarget() == this && rand.nextInt(20) == 0) {
        EntityPlayer player=Utils.getClosestPlayer(worldObj,enderman.posX,enderman.posY,enderman.posZ,50,false);
        if (player != null) {
          enderman.setAttackTarget(player);
        }
 else {
          enderman.setAttackTarget(this);
        }
      }
 else       if (targeting > 5 && enderman.getAttackTarget() instanceof EntityPlayer) {
        continue;
      }
 else {
        enderman.setAttackTarget(this);
      }
    }
    for (int i=rand.nextInt(4); i >= 0; i--) {
      killnextEnderman();
    }
  }
  if (soulsCollected > 100) {
    stageTime=0;
    setStage(Stage.EXTRACT);
  }
  stageTime++;
  break;
}
case EXTRACT:
{
if (stageTime % 20 == 0) {
  List<EntityEnderman> list=worldObj.getEntitiesWithinAABB(EntityEnderman.class,getEntityBoundingBox().expand(300,300,300),EntitySelectors.IS_ALIVE);
  for (  EntityEnderman enderman : list) {
    enderman.setAttackTarget(this);
  }
}
double dragonDist=dragon == null ? 100 : dragon.getDistance(posX,posY,posZ);
if (dragon != null && dragonDist < 10) {
  BCEffectHandler.spawnFX(DEParticles.SOUL_EXTRACTION,worldObj,new Vec3D(dragon).add(0,2,0),new Vec3D(this),512D,3);
}
if (stageTime == 300) {
  List<Entity> list=worldObj.getEntitiesWithinAABB(Entity.class,getEntityBoundingBox().expand(300,300,300),EntitySelectors.IS_ALIVE);
  for (  Entity entity : list) {
    if (entity instanceof EntityEnderman || (entity instanceof EntityItem && ((EntityItem)entity).getEntityItem().getItem() == Items.ENDER_PEARL) || entity instanceof EntityAreaEffectCloud) {
      entity.setDead();
    }
  }
  this.worldObj.playSound((EntityPlayer)null,posX,posY,posZ,SoundEvents.ENTITY_GENERIC_EXPLODE,SoundCategory.BLOCKS,40.0F,(1.0F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
  PacketCustom.sendToAllAround(new SPacketExplosion(posX,posY,posZ,505,Collections.<BlockPos>emptyList(),new Vec3d(0,0,0)),posX,posY,posZ,512,1);
  EntityPersistentItem entityItem=new EntityPersistentItem(worldObj,posX,posY,posZ,new ItemStack(Blocks.DRAGON_EGG));
  worldObj.spawnEntityInWorld(entityItem);
  entityItem.motionX=entityItem.motionY=entityItem.motionZ=0;
  cleanup();
  if (dragon != null) {
    dragon.getPhaseManager().setPhase(PhaseList.CHARGING_PLAYER);
  }
}
if (stageTime > 320) {
  worldObj.playSound((EntityPlayer)null,posX,posY,posZ,SoundEvents.ENTITY_ENDERMEN_STARE,SoundCategory.MASTER,10,0.7F);
  worldObj.playSound((EntityPlayer)null,posX,posY,posZ,SoundEvents.ENTITY_ENDERMEN_STARE,SoundCategory.MASTER,10,1F);
  worldObj.playSound((EntityPlayer)null,posX,posY,posZ,SoundEvents.ENTITY_ENDERMEN_STARE,SoundCategory.MASTER,10,1.3F);
  setDead();
}
if (dragon != null && (dragonDist < 10 || stageTime >= 300)) {
  stageTime++;
}
break;
}
}
}",0.9460788399033252
117154,"@Override protected void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){
  GuiHelper.drawGuiBaseBackground(this,guiLeft,guiTop,xSize,ySize);
  GuiHelper.drawColouredRect(guiLeft + 3,guiTop + 3,xSize - 6,110,0xFF00FFFF);
  GuiHelper.drawColouredRect(guiLeft + 4,guiTop + 4,xSize - 8,108,0xFF000000);
  if (currentRecipe != null && canCraft != null && canCraft.equals(""String_Node_Str"")) {
    GuiHelper.drawColouredRect(guiLeft + 15,guiTop + 7,20,100,0xFFAA00FF);
    GuiHelper.drawColouredRect(guiLeft + 16,guiTop + 8,18,98,0xFF000000);
    GuiHelper.drawColouredRect(guiLeft + xSize - 35,guiTop + 7,20,100,0xFFAA00FF);
    GuiHelper.drawColouredRect(guiLeft + xSize - 34,guiTop + 8,18,98,0xFF000000);
    GuiHelper.drawColouredRect(guiLeft + (xSize / 2) - 10,guiTop + 24,20,64,0xFF00FFFF);
    GuiHelper.drawColouredRect(guiLeft + (xSize / 2) - 9,guiTop + 25,18,62,0xFF000000);
  }
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),guiLeft + (xSize / 2),guiTop + 5,InfoHelper.GUI_TITLE);
  GlStateManager.color(1F,1F,1F,1F);
  ResourceHelperDE.bindTexture(DETextures.GUI_FUSION_CRAFTING);
  GuiHelper.drawPlayerSlots(this,guiLeft + (xSize / 2),guiTop + 115,true);
  if (currentRecipe == null || canCraft == null || !canCraft.equals(""String_Node_Str"")) {
    drawTexturedModalRect(guiLeft + (xSize / 2) - 9,guiTop + 25,138,0,18,18);
    if (tile.getStackInSlot(1) != null) {
      drawTexturedModalRect(guiLeft + (xSize / 2) - 9,guiTop + 69,138,0,18,18);
    }
  }
  if (currentRecipe != null) {
    GuiHelper.drawStack2D(currentRecipe.getRecipeOutput(tile.getStackInCore(0)),mc,guiLeft + (xSize / 2) - 8,guiTop + 70,16F);
    List ingredients=currentRecipe.getRecipeIngredients();
    int centerX=guiLeft + xSize / 2;
    int centerY=guiTop + ySize / 2 - 42;
    if (tile.isCrafting.value && tile.craftingStage.value > 0) {
      GlStateManager.depthMask(false);
      double charge=tile.craftingStage.value / 1000D;
      if (charge > 1) {
        charge=1;
      }
      int size=(int)((1D - charge) * 98);
      RenderEnergyBolt.renderBoltBetween(new Vec3D(guiLeft + 16 + boltStats[0],guiTop + 106,0),new Vec3D(guiLeft + 16 + boltStats[1],guiTop + 8 + size,0),1,charge * 10,10,boltStats[2],true);
      RenderEnergyBolt.renderBoltBetween(new Vec3D(guiLeft + 16 + boltStats[3],guiTop + 106,0),new Vec3D(guiLeft + 16 + boltStats[4],guiTop + 8 + size,0),1,charge * 10,10,boltStats[5],true);
      RenderEnergyBolt.renderBoltBetween(new Vec3D(guiLeft + xSize - 34 + boltStats[0],guiTop + 106,0),new Vec3D(guiLeft + xSize - 34 + boltStats[1],guiTop + 8 + size,0),1,charge * 10,10,boltStats[2],true);
      RenderEnergyBolt.renderBoltBetween(new Vec3D(guiLeft + xSize - 34 + boltStats[3],guiTop + 106,0),new Vec3D(guiLeft + xSize - 34 + boltStats[4],guiTop + 8 + size,0),1,charge * 10,10,boltStats[5],true);
    }
    for (int i=0; i < ingredients.size(); i++) {
      boolean isLeft=i % 2 == 0;
      boolean isOdd=ingredients.size() % 2 == 1;
      int sideCount=ingredients.size() / 2;
      if (isOdd && !isLeft) {
        sideCount--;
      }
      int xPos;
      int yPos;
      if (isLeft) {
        xPos=centerX - 65;
        int ySize=80 / Math.max(sideCount - (isOdd ? 0 : 1),1);
        int sideIndex=i / 2;
        if (sideCount <= 1 && (!isOdd || ingredients.size() == 1)) {
          sideIndex=1;
          ySize=40;
        }
        yPos=centerY - 40 + (sideIndex * ySize);
      }
 else {
        xPos=centerX + 65;
        int ySize=80 / Math.max(sideCount - (isOdd ? 0 : 1),1);
        int sideIndex=i / 2;
        if (isOdd) {
          sideCount++;
        }
        if (sideCount <= 1) {
          sideIndex=1;
          ySize=40;
        }
        yPos=centerY - 40 + (sideIndex * ySize);
      }
      GuiHelper.drawStack2D(OreDictHelper.resolveObject(ingredients.get(i)),mc,xPos - 8,yPos - 8,16F);
    }
    if (tile.isCrafting.value && tile.craftingStage.value >= 0) {
      int state=tile.craftingStage.value;
      String status=state > 1000 ? I18n.format(""String_Node_Str"") : I18n.format(""String_Node_Str"");
      double d=state > 1000 ? (state - 1000F) / 1000D : state / 1000D;
      drawCenteredString(fontRendererObj,status + ""String_Node_Str"" + TextFormatting.GOLD+ ((int)(d * 100) + ""String_Node_Str""),width / 2,guiTop + 95,state < 1000 ? 0x00FF00 : 0x00FFFF);
    }
  }
}","@Override protected void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){
  GuiHelper.drawGuiBaseBackground(this,guiLeft,guiTop,xSize,ySize);
  GuiHelper.drawColouredRect(guiLeft + 3,guiTop + 3,xSize - 6,110,0xFF00FFFF);
  GuiHelper.drawColouredRect(guiLeft + 4,guiTop + 4,xSize - 8,108,0xFF000000);
  if (currentRecipe != null && canCraft != null && canCraft.equals(""String_Node_Str"")) {
    GuiHelper.drawColouredRect(guiLeft + 15,guiTop + 7,20,100,0xFFAA00FF);
    GuiHelper.drawColouredRect(guiLeft + 16,guiTop + 8,18,98,0xFF000000);
    GuiHelper.drawColouredRect(guiLeft + xSize - 35,guiTop + 7,20,100,0xFFAA00FF);
    GuiHelper.drawColouredRect(guiLeft + xSize - 34,guiTop + 8,18,98,0xFF000000);
    GuiHelper.drawColouredRect(guiLeft + (xSize / 2) - 10,guiTop + 24,20,64,0xFF00FFFF);
    GuiHelper.drawColouredRect(guiLeft + (xSize / 2) - 9,guiTop + 25,18,62,0xFF000000);
  }
  drawCenteredString(fontRendererObj,I18n.format(""String_Node_Str""),guiLeft + (xSize / 2),guiTop + 5,InfoHelper.GUI_TITLE);
  GlStateManager.color(1F,1F,1F,1F);
  ResourceHelperDE.bindTexture(DETextures.GUI_FUSION_CRAFTING);
  GuiHelper.drawPlayerSlots(this,guiLeft + (xSize / 2),guiTop + 115,true);
  if (currentRecipe == null || canCraft == null || !canCraft.equals(""String_Node_Str"")) {
    drawTexturedModalRect(guiLeft + (xSize / 2) - 9,guiTop + 25,138,0,18,18);
    if (tile.getStackInSlot(1) != null) {
      drawTexturedModalRect(guiLeft + (xSize / 2) - 9,guiTop + 69,138,0,18,18);
    }
  }
  if (currentRecipe != null) {
    GuiHelper.drawStack2D(currentRecipe.getRecipeOutput(tile.getStackInCore(0)),mc,guiLeft + (xSize / 2) - 8,guiTop + 70,16F);
    List ingredients=currentRecipe.getRecipeIngredients();
    int centerX=guiLeft + xSize / 2;
    int centerY=guiTop + ySize / 2 - 42;
    if (tile.isCrafting.value && tile.craftingStage.value > 0) {
      GlStateManager.depthMask(false);
      double charge=tile.craftingStage.value / 1000D;
      if (charge > 1) {
        charge=1;
      }
      int size=(int)((1D - charge) * 98);
      RenderEnergyBolt.renderBoltBetween(new Vec3D(guiLeft + 16 + boltStats[0],guiTop + 106,0),new Vec3D(guiLeft + 16 + boltStats[1],guiTop + 8 + size,0),1,charge * 10,10,boltStats[2],true);
      RenderEnergyBolt.renderBoltBetween(new Vec3D(guiLeft + 16 + boltStats[3],guiTop + 106,0),new Vec3D(guiLeft + 16 + boltStats[4],guiTop + 8 + size,0),1,charge * 10,10,boltStats[5],true);
      RenderEnergyBolt.renderBoltBetween(new Vec3D(guiLeft + xSize - 34 + boltStats[0],guiTop + 106,0),new Vec3D(guiLeft + xSize - 34 + boltStats[1],guiTop + 8 + size,0),1,charge * 10,10,boltStats[2],true);
      RenderEnergyBolt.renderBoltBetween(new Vec3D(guiLeft + xSize - 34 + boltStats[3],guiTop + 106,0),new Vec3D(guiLeft + xSize - 34 + boltStats[4],guiTop + 8 + size,0),1,charge * 10,10,boltStats[5],true);
      GlStateManager.depthMask(true);
    }
    for (int i=0; i < ingredients.size(); i++) {
      boolean isLeft=i % 2 == 0;
      boolean isOdd=ingredients.size() % 2 == 1;
      int sideCount=ingredients.size() / 2;
      if (isOdd && !isLeft) {
        sideCount--;
      }
      int xPos;
      int yPos;
      if (isLeft) {
        xPos=centerX - 65;
        int ySize=80 / Math.max(sideCount - (isOdd ? 0 : 1),1);
        int sideIndex=i / 2;
        if (sideCount <= 1 && (!isOdd || ingredients.size() == 1)) {
          sideIndex=1;
          ySize=40;
        }
        yPos=centerY - 40 + (sideIndex * ySize);
      }
 else {
        xPos=centerX + 65;
        int ySize=80 / Math.max(sideCount - (isOdd ? 0 : 1),1);
        int sideIndex=i / 2;
        if (isOdd) {
          sideCount++;
        }
        if (sideCount <= 1) {
          sideIndex=1;
          ySize=40;
        }
        yPos=centerY - 40 + (sideIndex * ySize);
      }
      GuiHelper.drawStack2D(OreDictHelper.resolveObject(ingredients.get(i)),mc,xPos - 8,yPos - 8,16F);
    }
    if (tile.isCrafting.value && tile.craftingStage.value >= 0) {
      int state=tile.craftingStage.value;
      String status=state > 1000 ? I18n.format(""String_Node_Str"") : I18n.format(""String_Node_Str"");
      double d=state > 1000 ? (state - 1000F) / 1000D : state / 1000D;
      drawCenteredString(fontRendererObj,status + ""String_Node_Str"" + TextFormatting.GOLD+ ((int)(d * 100) + ""String_Node_Str""),width / 2,guiTop + 95,state < 1000 ? 0x00FF00 : 0x00FFFF);
    }
  }
}",0.9956511787594416
117155,"@Override public void update(){
  if (!worldObj.isRemote) {
    detectAndSendChanges();
  }
  if (worldObj.isRemote) {
    updateEffects();
  }
  if (isCrafting.value && !worldObj.isRemote) {
    if (DEEventHandler.serverTicks % 10 == 0) {
      worldObj.notifyNeighborsOfStateChange(pos,getBlockType());
    }
    for (    ICraftingPedestal pedestal : pedestals) {
      if (((TileEntity)pedestal).isInvalid()) {
        invalidateCrafting();
        return;
      }
    }
    if (activeRecipe == null || !activeRecipe.matches(this,worldObj,pos) || activeRecipe.canCraft(this,worldObj,pos) == null || !activeRecipe.canCraft(this,worldObj,pos).equals(""String_Node_Str"")) {
      invalidateCrafting();
      return;
    }
    long totalCharge=0;
    for (    ICraftingPedestal pedestal : pedestals) {
      if (pedestal.getStackInPedestal() == null) {
        continue;
      }
      totalCharge+=pedestal.getCharge();
    }
    int averageCharge=(int)(totalCharge / activeRecipe.getRecipeIngredients().size());
    double percentage=averageCharge / (double)activeRecipe.getEnergyCost();
    if (percentage <= 1D && craftingStage.value < 1000) {
      craftingStage.value=(short)(percentage * 1000D);
      if (craftingStage.value == 0 && percentage > 0) {
        craftingStage.value=1;
      }
    }
 else     if (craftingStage.value < 2000) {
      craftingStage.value+=2;
    }
 else     if (craftingStage.value >= 2000) {
      activeRecipe.craft(this,worldObj,pos);
      for (      ICraftingPedestal pedestal : pedestals) {
        pedestal.onCraft();
      }
      isCrafting.value=false;
    }
  }
 else   if (!worldObj.isRemote && !isCrafting.value && craftingStage.value > 0) {
    craftingStage.value=0;
  }
}","@Override public void update(){
  if (!worldObj.isRemote) {
    detectAndSendChanges();
  }
  if (worldObj.isRemote) {
    updateEffects();
  }
  if (isCrafting.value && !worldObj.isRemote) {
    if (DEEventHandler.serverTicks % 10 == 0) {
      worldObj.notifyNeighborsOfStateChange(pos,getBlockType());
    }
    for (    ICraftingPedestal pedestal : pedestals) {
      if (((TileEntity)pedestal).isInvalid()) {
        invalidateCrafting();
        return;
      }
    }
    if (activeRecipe == null || !activeRecipe.matches(this,worldObj,pos) || activeRecipe.canCraft(this,worldObj,pos) == null || !activeRecipe.canCraft(this,worldObj,pos).equals(""String_Node_Str"")) {
      invalidateCrafting();
      return;
    }
    long totalCharge=0;
    for (    ICraftingPedestal pedestal : pedestals) {
      if (pedestal.getStackInPedestal() == null) {
        continue;
      }
      totalCharge+=pedestal.getCharge();
    }
    int averageCharge=(int)(totalCharge / activeRecipe.getRecipeIngredients().size());
    double percentage=averageCharge / (double)activeRecipe.getEnergyCost();
    if (percentage <= 1D && craftingStage.value < 1000) {
      craftingStage.value=(short)(percentage * 1000D);
      if (craftingStage.value == 0 && percentage > 0) {
        craftingStage.value=1;
      }
    }
 else     if (craftingStage.value < 2000) {
      craftingStage.value+=2;
    }
 else     if (craftingStage.value >= 2000) {
      activeRecipe.craft(this,worldObj,pos);
      for (      ICraftingPedestal pedestal : pedestals) {
        pedestal.onCraft();
      }
      if (!worldObj.isRemote) {
        isCrafting.value=false;
      }
    }
  }
 else   if (!worldObj.isRemote && !isCrafting.value && craftingStage.value > 0) {
    craftingStage.value=0;
  }
}",0.9638139000574384
117156,"public TileFusionCraftingCore(){
  setInventorySize(2);
  registerSyncableObject(isCrafting,false);
  registerSyncableObject(craftingStage,false);
  setShouldRefreshOnBlockChange();
}","public TileFusionCraftingCore(){
  setInventorySize(2);
  registerSyncableObject(isCrafting,true);
  registerSyncableObject(craftingStage,false);
  setShouldRefreshOnBlockChange();
}",0.9808219178082191
117157,"@Override public void fromBytes(ByteBuf buf){
  boolean isCompressed=buf.readBoolean();
  if (!isCompressed) {
    readBytes(buf);
    return;
  }
  Inflater inflater=new Inflater();
  try {
    int rawSize=buf.readInt();
    buf=buf.unwrap();
    byte[] rawBytes=new byte[rawSize];
    inflater.inflate(rawBytes);
    buf.clear();
    buf.ensureWritable(rawBytes.length + 8000,true);
    buf.writeBytes(rawBytes);
    buf.readerIndex(0);
    readBytes(buf);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new EncoderException(e);
  }
 finally {
    inflater.end();
  }
}","@Override public void fromBytes(ByteBuf buf){
  boolean isCompressed=buf.readBoolean();
  if (!isCompressed) {
    readBytes(buf);
    return;
  }
  Inflater inflater=new Inflater();
  try {
    int rawSize=buf.readInt();
    byte[] compressedBytes=new byte[buf.readableBytes()];
    buf.readBytes(compressedBytes);
    buf=Unpooled.buffer();
    inflater.setInput(compressedBytes);
    byte[] rawBytes=new byte[rawSize];
    inflater.inflate(rawBytes);
    buf.clear();
    buf.writeBytes(rawBytes);
    buf.readerIndex(0);
    readBytes(buf);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new EncoderException(e);
  }
 finally {
    inflater.end();
  }
}",0.8082408874801902
117158,"/** 
 * Call this once the explosion calculation has completed to manually detonate.
 * @return false if calculation is not yet complete or detonation has already occurred.
 */
public boolean detonate(){
  if (!isCalculationComplete() || detonated) {
    return false;
  }
  LogHelper.dev(""String_Node_Str"");
  LogHelper.startTimer(""String_Node_Str"");
  ExplosionHelper removalHelper=new ExplosionHelper(world);
  int i=0;
  for (  Collection<BlockPos> list : destroyedBlocks) {
    removalHelper.addBlocksForRemoval(list);
    i+=list.size();
  }
  for (  BlockPos pos : lavaPositions) {
    world.setBlockState(pos,lavaState);
  }
  removalHelper.addBlocksForUpdate(blocksToUpdate);
  removalHelper.finish();
  LogHelper.dev(""String_Node_Str"" + i);
  LogHelper.stopTimer();
  isDead=true;
  detonated=true;
  final BlockPos pos=origin.getPos();
  PacketExplosionFX packet=new PacketExplosionFX(pos,radius);
  DraconicEvolution.network.sendToAllAround(packet,new NetworkRegistry.TargetPoint(world.provider.getDimension(),pos.getX(),pos.getY(),pos.getZ(),radius * 4));
  new DelayedExecutor(60){
    @Override public void execute(    Object[] args){
      List<Entity> list=world.getEntitiesWithinAABB(Entity.class,new AxisAlignedBB(pos,pos.add(1,1,1)).expand(radius * 2.5,radius * 2.5,radius * 2.5));
      for (      Entity e : list) {
        double dist=e.getDistance(pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5);
        float dmg=10000F * (1F - (float)(dist / (radius * 1.2D)));
        e.attackEntityFrom(fusionExplosion,dmg);
      }
    }
  }
.run();
  return true;
}","/** 
 * Call this once the explosion calculation has completed to manually detonate.
 * @return false if calculation is not yet complete or detonation has already occurred.
 */
public boolean detonate(){
  if (!isCalculationComplete() || detonated) {
    return false;
  }
  long l=System.currentTimeMillis();
  LogHelper.dev(""String_Node_Str"");
  LogHelper.startTimer(""String_Node_Str"");
  ExplosionHelper removalHelper=new ExplosionHelper(world);
  int i=0;
  for (  Collection<BlockPos> list : destroyedBlocks) {
    removalHelper.addBlocksForRemoval(list);
    i+=list.size();
  }
  removalHelper.finish();
  LogHelper.stopTimer();
  LogHelper.startTimer(""String_Node_Str"");
  for (  BlockPos pos : lavaPositions) {
    world.setBlockState(pos,lavaState);
  }
  LogHelper.stopTimer();
  LogHelper.startTimer(""String_Node_Str"");
  removalHelper.addBlocksForUpdate(blocksToUpdate);
  LogHelper.dev(""String_Node_Str"" + i);
  LogHelper.stopTimer();
  isDead=true;
  detonated=true;
  final BlockPos pos=origin.getPos();
  PacketExplosionFX packet=new PacketExplosionFX(pos,radius);
  DraconicEvolution.network.sendToAllAround(packet,new NetworkRegistry.TargetPoint(world.provider.getDimension(),pos.getX(),pos.getY(),pos.getZ(),radius * 4));
  new DelayedExecutor(60){
    @Override public void execute(    Object[] args){
      List<Entity> list=world.getEntitiesWithinAABB(Entity.class,new AxisAlignedBB(pos,pos.add(1,1,1)).expand(radius * 2.5,radius * 2.5,radius * 2.5));
      for (      Entity e : list) {
        double dist=e.getDistance(pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5);
        float dmg=10000F * (1F - (float)(dist / (radius * 1.2D)));
        e.attackEntityFrom(fusionExplosion,dmg);
      }
    }
  }
.run();
  LogHelper.dev(""String_Node_Str"" + (System.currentTimeMillis() - l) / 1000D + ""String_Node_Str"");
  return true;
}",0.9057591623036648
117159,"public void updateCriticalState(){
  if (!(worldObj instanceof WorldServer)) {
    return;
  }
  shieldCharge.value=worldObj.rand.nextInt(Math.max(1,(int)(maxShieldCharge.value * 0.01)));
  animExtractState.value=1;
  temperature.value=MathHelper.approachExp(temperature.value,MAX_TEMPERATURE * 1.2,0.0005);
  if (explosionProcess == null) {
    explosionProcess=new ProcessExplosion(pos,(int)Utils.map(convertedFuel.value + reactableFuel.value,144,10368,50,350),(WorldServer)worldObj,-1);
    ProcessHandler.addProcess(explosionProcess);
    explosionCountdown.value=-1;
    minExplosionDelay=1200 + worldObj.rand.nextInt(2400);
    return;
  }
  minExplosionDelay--;
  if (!explosionProcess.isCalculationComplete()) {
    return;
  }
  if (explosionCountdown.value == -1) {
    explosionCountdown.value=(60 * 20) + Math.max(0,minExplosionDelay);
  }
  if (explosionCountdown.value-- <= 0) {
    explosionProcess.detonate();
  }
}","public void updateCriticalState(){
  if (!(worldObj instanceof WorldServer)) {
    return;
  }
  shieldCharge.value=worldObj.rand.nextInt(Math.max(1,(int)(maxShieldCharge.value * 0.01)));
  animExtractState.value=1;
  temperature.value=MathHelper.approachExp(temperature.value,MAX_TEMPERATURE * 1.2,0.0005);
  if (explosionProcess == null) {
    explosionProcess=new ProcessExplosion(pos,(int)Utils.map(convertedFuel.value + reactableFuel.value,144,10368,50,350),(WorldServer)worldObj,-1);
    ProcessHandler.addProcess(explosionProcess);
    explosionCountdown.value=-1;
    minExplosionDelay=1200 + worldObj.rand.nextInt(2400);
    return;
  }
  minExplosionDelay--;
  if (!explosionProcess.isCalculationComplete()) {
    return;
  }
  if (explosionCountdown.value == -1) {
    explosionCountdown.value=(60 * 20) + Math.max(0,minExplosionDelay);
  }
  if (explosionCountdown.value > 200)   explosionCountdown.value=200;
  if (explosionCountdown.value-- <= 0) {
    explosionProcess.detonate();
  }
}",0.9637681159420288
117160,"public void removeBlock(BlockPos pos){
  if (!hasBlockStorage(pos) || isAirBlock(pos)) {
    return;
  }
  Chunk chunk=getChunk(pos);
  IBlockState oldState=chunk.getBlockState(pos);
  if (oldState.getBlock().hasTileEntity(oldState)) {
    serverWorld.setBlockToAir(pos);
    PlayerChunkMap playerChunkMap=serverWorld.getPlayerChunkMap();
    if (playerChunkMap != null) {
      PlayerChunkMapEntry watcher=playerChunkMap.getEntry(pos.getX() >> 4,pos.getZ() >> 4);
      if (watcher != null) {
        watcher.sendPacket(new SPacketBlockChange(serverWorld,pos));
      }
    }
  }
  setRecalcPrecipitationHeightMap(pos);
  ExtendedBlockStorage storage=getBlockStorage(pos);
  storage.set(pos.getX() & 15,pos.getY() & 15,pos.getZ() & 15,AIR);
  fireBlockBreak(pos,oldState);
  removeTileEntity(pos);
  setChunkModified(pos);
}","public void removeBlock(BlockPos pos){
  if (!hasBlockStorage(pos) || isAirBlock(pos)) {
    return;
  }
  Chunk chunk=getChunk(pos);
  IBlockState oldState=chunk.getBlockState(pos);
  if (oldState.getBlock().hasTileEntity(oldState)) {
    serverWorld.setBlockToAir(pos);
    PlayerChunkMap playerChunkMap=serverWorld.getPlayerChunkMap();
    if (playerChunkMap != null) {
      PlayerChunkMapEntry watcher=playerChunkMap.getEntry(pos.getX() >> 4,pos.getZ() >> 4);
      if (watcher != null) {
        watcher.sendPacket(new SPacketBlockChange(serverWorld,pos));
      }
    }
  }
  ExtendedBlockStorage storage=getBlockStorage(pos);
  storage.set(pos.getX() & 15,pos.getY() & 15,pos.getZ() & 15,AIR);
  fireBlockBreak(pos,oldState);
  setChunkModified(pos);
}",0.9589905362776026
117161,"private Chunk getChunk(BlockPos pos){
  return serverWorld.getChunkFromChunkCoords(pos.getX() >> 4,pos.getZ() >> 4);
}","private Chunk getChunk(BlockPos pos){
  ChunkPos cp=new ChunkPos(pos);
  if (!chunkCache.containsKey(cp)) {
    chunkCache.put(cp,serverWorld.getChunkFromChunkCoords(pos.getX() >> 4,pos.getZ() >> 4));
  }
  return chunkCache.get(cp);
}",0.6288951841359773
117162,"/** 
 * Call when finished removing blocks to calculate lighting and send chunk updates to the client.
 */
public void finish(){
  LogHelperBC.startTimer(""String_Node_Str"");
  PlayerChunkMap playerChunkMap=serverWorld.getPlayerChunkMap();
  if (playerChunkMap == null) {
    return;
  }
  for (  Chunk chunk : modifiedChunks) {
    chunk.setModified(true);
    chunk.generateSkylightMap();
    PlayerChunkMapEntry watcher=playerChunkMap.getEntry(chunk.xPosition,chunk.zPosition);
    if (watcher != null) {
      watcher.sendPacket(new SPacketChunkData(chunk,65535));
    }
  }
  LogHelperBC.stopTimer();
  LogHelperBC.startTimer(""String_Node_Str"");
  try {
    LogHelperBC.dev(""String_Node_Str"" + blocksToUpdate.size() + ""String_Node_Str"");
    BlockFalling.fallInstantly=true;
    for (    BlockPos pos : blocksToUpdate) {
      IBlockState state=serverWorld.getBlockState(pos);
      if (state.getBlock() instanceof BlockFalling) {
        state.getBlock().updateTick(serverWorld,pos,state,serverWorld.rand);
      }
      state.neighborChanged(serverWorld,pos,Blocks.AIR);
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  LogHelperBC.stopTimer();
  BlockFalling.fallInstantly=false;
  modifiedChunks.clear();
}","/** 
 * Call when finished removing blocks to calculate lighting and send chunk updates to the client.
 */
public void finish(){
  LogHelperBC.startTimer(""String_Node_Str"");
  PlayerChunkMap playerChunkMap=serverWorld.getPlayerChunkMap();
  if (playerChunkMap == null) {
    return;
  }
  for (  Chunk chunk : modifiedChunks) {
    chunk.setModified(true);
    chunk.generateSkylightMap();
    PlayerChunkMapEntry watcher=playerChunkMap.getEntry(chunk.xPosition,chunk.zPosition);
    if (watcher != null) {
      watcher.sendPacket(new SPacketChunkData(chunk,65535));
    }
  }
  LogHelperBC.stopTimer();
  LogHelperBC.startTimer(""String_Node_Str"");
  try {
    LogHelperBC.dev(""String_Node_Str"" + blocksToUpdate.size() + ""String_Node_Str"");
    BlockFalling.fallInstantly=true;
    for (    BlockPos pos : blocksToUpdate) {
      IBlockState state=serverWorld.getBlockState(pos);
      if (state.getBlock() instanceof BlockFalling) {
        state.getBlock().updateTick(serverWorld,pos,state,serverWorld.rand);
      }
      state.neighborChanged(serverWorld,pos,Blocks.AIR);
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  LogHelperBC.stopTimer();
  BlockFalling.fallInstantly=false;
}",0.989326765188834
117163,"public static void stopTimer(){
  if (!timerRunning) {
    LogHelper.error(""String_Node_Str"");
    return;
  }
  long ns=System.nanoTime() - startTime;
  String value;
  long ms=1000000;
  long s=ms * 1000;
  if (ns > s) {
    value=Utils.round(ns / (double)s,1000) + ""String_Node_Str"";
  }
 else   if (ns > 1000) {
    value=Utils.round(ns / (double)ms,10000) + ""String_Node_Str"";
  }
 else {
    value=ns + ""String_Node_Str"";
  }
  dev(""String_Node_Str"" + timerName + ""String_Node_Str""+ value);
  timerRunning=false;
}","public static void stopTimer(){
  if (!timerRunning) {
    LogHelper.error(""String_Node_Str"");
    return;
  }
  long ns=System.nanoTime() - startTime;
  String value;
  long ms=1000000;
  long s=ms * 1000;
  if (ns > s) {
    value=Utils.round(ns / (double)s,1000) + ""String_Node_Str"";
  }
 else   if (ns > 1000) {
    value=Utils.round(ns / (double)ms,10000) + ""String_Node_Str"";
  }
 else {
    value=ns + ""String_Node_Str"";
  }
  info(""String_Node_Str"" + timerName + ""String_Node_Str""+ value);
  timerRunning=false;
}",0.8933717579250721
117164,"public static void registerRecipes(){
  ToolUpgrade.addUpgradeRecipes();
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.STONE_AXE),new ItemStack(Items.WOODEN_AXE),1000,0,new ItemStack[]{new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)}));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.IRON_AXE),new ItemStack(Items.STONE_AXE),1000,0,new ItemStack[]{new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)}));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.GOLDEN_AXE),new ItemStack(Items.IRON_AXE),1000,0,new ItemStack[]{new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)}));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.DIAMOND_AXE),new ItemStack(Items.GOLDEN_AXE),1000,0,new ItemStack[]{new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)}));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(DEFeatures.wyvernAxe),new ItemStack(Items.DIAMOND_AXE),1000,0,new ItemStack[]{new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)}));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Blocks.BEACON,12),new ItemStack(Blocks.OBSIDIAN),1000,3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new ItemStack(Items.GOLDEN_SWORD),Items.APPLE,Blocks.DIAMOND_ORE));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.STONE_AXE),new ItemStack(Items.WOODEN_AXE),1000,0,new ItemStack[]{new ItemStack(DEFeatures.draconicCore)}));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(DEFeatures.wyvernAxe),new ItemStack(Items.DIAMOND_AXE),10000,0,new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore)));
}","public static void registerRecipes(){
  ToolUpgrade.addUpgradeRecipes();
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.STONE_AXE),new ItemStack(Items.WOODEN_AXE),1000,0,new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.IRON_AXE),new ItemStack(Items.STONE_AXE),1000,0,new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.GOLDEN_AXE),new ItemStack(Items.IRON_AXE),1000,0,new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.DIAMOND_AXE),new ItemStack(Items.GOLDEN_AXE),1000,0,new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(DEFeatures.wyvernAxe),new ItemStack(Items.DIAMOND_AXE),1000,0,new ItemStack(Items.DIAMOND),new ItemStack(Blocks.OBSIDIAN),new ItemStack(DEFeatures.draconiumDust),new ItemStack(DEFeatures.draconicCore)));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Blocks.BEACON,12),new ItemStack(Blocks.OBSIDIAN),1000,3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new ItemStack(Items.GOLDEN_SWORD),Items.APPLE,Blocks.DIAMOND_ORE));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(Items.STONE_AXE),new ItemStack(Items.WOODEN_AXE),1000,0,new ItemStack(DEFeatures.draconicCore)));
  FusionRecipeRegistry.registerRecipe(new SimpleFusionRecipe(new ItemStack(DEFeatures.wyvernAxe),new ItemStack(Items.DIAMOND_AXE),10000,0,new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore),new ItemStack(DEFeatures.draconicCore)));
}",0.98227936066713
117165,"@Override public Class<?> getTileEntityClass(){
  LogHelper.info(""String_Node_Str"");
  return IDEPeripheral.class;
}","@Override public Class<?> getTileEntityClass(){
  return IDEPeripheral.class;
}",0.8102564102564103
117166,"@Override public ManagedEnvironment createEnvironment(World world,BlockPos pos,EnumFacing side){
  LogHelper.info(""String_Node_Str"");
  return new DEManagedPeripheral((IDEPeripheral)world.getTileEntity(pos));
}","@Override public ManagedEnvironment createEnvironment(World world,BlockPos pos,EnumFacing side){
  return new DEManagedPeripheral((IDEPeripheral)world.getTileEntity(pos));
}",0.9033942558746736
117167,"@Optional.Method(modid=""String_Node_Str"") public static void initOC(){
  LogHelper.info(""String_Node_Str"");
  Driver.add(new OCAdapter());
}","@Optional.Method(modid=""String_Node_Str"") public static void initOC(){
  Driver.add(new OCAdapter());
}",0.8477366255144033
117168,"public ActionResult<ItemStack> handleRightClick(ItemStack stack,World world,EntityPlayer player,EnumHand hand){
  player.inventory.addItemStackToInventory(new ItemStack(Blocks.END_GATEWAY,64));
  int mode=ItemNBTHelper.getInteger(stack,""String_Node_Str"",0);
  if (player.isSneaking()) {
    mode++;
    if (mode == MODES.size()) {
      mode=0;
    }
    if (!world.isRemote) {
      player.addChatComponentMessage(new TextComponentString(MODES.get(mode)));
    }
    ItemNBTHelper.setInteger(stack,""String_Node_Str"",mode);
    return new ActionResult<ItemStack>(EnumActionResult.SUCCESS,stack);
  }
switch (mode) {
case 0:
    break;
case 3:
  if (world.isRemote) {
    Map<ResourceLocation,ArrayDeque<Particle>[][]> texturedRenderQueue=ReflectionHelper.getPrivateValue(BCEffectRenderer.class,BCEffectHandler.effectRenderer,""String_Node_Str"");
    for (    ArrayDeque<Particle>[][] array : texturedRenderQueue.values()) {
      for (      ArrayDeque<Particle>[] array2 : array) {
        for (        ArrayDeque<Particle> particle : array2) {
          LogHelper.info(particle);
        }
      }
    }
  }
break;
case 4:
if (!world.isRemote) {
player.openGui(DraconicEvolution.instance,2016,world,0,0,0);
}
break;
case 5:
if (world instanceof WorldServer) {
FMLLog.info(""String_Node_Str"");
BlockPlacementBatcher batcher=new BlockPlacementBatcher((WorldServer)world);
for (int x=-120; x < 120; x++) {
for (int y=0; y < 100; y++) {
for (int z=-120; z < 120; z++) {
  BlockPos posAt=new BlockPos(player.posX + x,y,player.posZ + z);
  if (posAt.getY() == 63 || world.getBlockState(posAt).getBlock() == Blocks.BEDROCK || world.getBlockState(posAt).getBlock() == Blocks.STONE || world.getBlockState(posAt).getBlock() == Blocks.DIRT || world.getBlockState(posAt).getBlock() == Blocks.GRASS || world.getBlockState(posAt).getBlock().getRegistryName().getResourceDomain().contains(""String_Node_Str"") || world.getBlockState(posAt).getBlock().getRegistryName().getResourcePath().contains(""String_Node_Str"")) {
    batcher.setBlockState(posAt,Blocks.AIR.getDefaultState());
  }
}
}
}
batcher.finish();
}
BlockPos pos=new BlockPos(player);
for (int x=-10; x < 10; x++) {
for (int z=-10; z < 10; z++) {
world.getChunkFromBlockCoords(pos.add(x * 16,0,z * 16)).generateSkylightMap();
}
}
break;
}
return new ActionResult<ItemStack>(EnumActionResult.PASS,stack);
}","public ActionResult<ItemStack> handleRightClick(ItemStack stack,World world,EntityPlayer player,EnumHand hand){
  player.inventory.addItemStackToInventory(new ItemStack(Blocks.END_GATEWAY,64));
  int mode=ItemNBTHelper.getInteger(stack,""String_Node_Str"",0);
  if (player.isSneaking()) {
    mode++;
    if (mode == MODES.size()) {
      mode=0;
    }
    if (!world.isRemote) {
      player.addChatComponentMessage(new TextComponentString(MODES.get(mode)));
    }
    ItemNBTHelper.setInteger(stack,""String_Node_Str"",mode);
    return new ActionResult<ItemStack>(EnumActionResult.SUCCESS,stack);
  }
switch (mode) {
case 0:
    break;
case 3:
  if (world.isRemote) {
    Map<ResourceLocation,ArrayDeque<Particle>[][]> texturedRenderQueue=ReflectionHelper.getPrivateValue(BCEffectRenderer.class,BCEffectHandler.effectRenderer,""String_Node_Str"");
    for (    ArrayDeque<Particle>[][] array : texturedRenderQueue.values()) {
      for (      ArrayDeque<Particle>[] array2 : array) {
        for (        ArrayDeque<Particle> particle : array2) {
          LogHelper.info(particle);
        }
      }
    }
  }
break;
case 4:
if (!world.isRemote) {
player.openGui(DraconicEvolution.instance,2016,world,0,0,0);
}
break;
case 5:
if (world instanceof WorldServer) {
FMLLog.info(""String_Node_Str"");
}
BlockPos pos=new BlockPos(player);
for (int x=-10; x < 10; x++) {
for (int z=-10; z < 10; z++) {
world.getChunkFromBlockCoords(pos.add(x * 16,0,z * 16)).generateSkylightMap();
}
}
break;
}
return new ActionResult<ItemStack>(EnumActionResult.PASS,stack);
}",0.7949704901206056
117169,"public static ItemStack changeMode(ItemStack stack,EntityPlayer player,boolean hasOblit,int maxSize){
  if (player.isSneaking()) {
    if (ItemNBTHelper.getShort(stack,""String_Node_Str"",(short)0) < maxSize)     ItemNBTHelper.setShort(stack,""String_Node_Str"",(short)(ItemNBTHelper.getShort(stack,""String_Node_Str"",(short)0) + 1));
 else     ItemNBTHelper.setShort(stack,""String_Node_Str"",(short)0);
    if (!player.worldObj.isRemote)     player.addChatMessage(new ChatComponentTranslation(""String_Node_Str"" + ItemNBTHelper.getShort(stack,""String_Node_Str"",(short)0) + ""String_Node_Str""));
  }
 else {
    if (hasOblit) {
      ItemNBTHelper.setBoolean(stack,""String_Node_Str"",!ItemNBTHelper.getBoolean(stack,""String_Node_Str"",false));
      if (player.worldObj.isRemote)       player.addChatMessage(new ChatComponentTranslation(""String_Node_Str"" + ItemNBTHelper.getBoolean(stack,""String_Node_Str"",false) + ""String_Node_Str""));
    }
  }
  return stack;
}","public static ItemStack changeMode(ItemStack stack,EntityPlayer player,boolean hasOblit,int maxSize){
  if (player.isSneaking()) {
    if (ItemNBTHelper.getShort(stack,""String_Node_Str"",(short)0) < maxSize)     ItemNBTHelper.setShort(stack,""String_Node_Str"",(short)(ItemNBTHelper.getShort(stack,""String_Node_Str"",(short)0) + 1));
 else     ItemNBTHelper.setShort(stack,""String_Node_Str"",(short)0);
    if (!player.worldObj.isRemote)     player.addChatMessage(new ChatComponentTranslation(""String_Node_Str"" + ItemNBTHelper.getShort(stack,""String_Node_Str"",(short)0) + ""String_Node_Str""));
  }
 else {
    updateGhostBlocks(player,player.worldObj);
    if (hasOblit) {
      ItemNBTHelper.setBoolean(stack,""String_Node_Str"",!ItemNBTHelper.getBoolean(stack,""String_Node_Str"",false));
      if (player.worldObj.isRemote)       player.addChatMessage(new ChatComponentTranslation(""String_Node_Str"" + ItemNBTHelper.getBoolean(stack,""String_Node_Str"",false) + ""String_Node_Str""));
    }
  }
  return stack;
}",0.7434715821812596
117170,"public static MovingObjectPosition raytraceFromEntity(World world,Entity player,boolean par3,double range){
  float f=1.0F;
  float f1=player.prevRotationPitch + (player.rotationPitch - player.prevRotationPitch) * f;
  float f2=player.prevRotationYaw + (player.rotationYaw - player.prevRotationYaw) * f;
  double d0=player.prevPosX + (player.posX - player.prevPosX) * (double)f;
  double d1=player.prevPosY + (player.posY - player.prevPosY) * (double)f;
  if (!world.isRemote && player instanceof EntityPlayer)   d1+=1.62D;
  double d2=player.prevPosZ + (player.posZ - player.prevPosZ) * (double)f;
  Vec3 vec3=world.getWorldVec3Pool().getVecFromPool(d0,d1,d2);
  float f3=MathHelper.cos(-f2 * 0.017453292F - (float)Math.PI);
  float f4=MathHelper.sin(-f2 * 0.017453292F - (float)Math.PI);
  float f5=-MathHelper.cos(-f1 * 0.017453292F);
  float f6=MathHelper.sin(-f1 * 0.017453292F);
  float f7=f4 * f5;
  float f8=f3 * f5;
  double d3=range;
  if (player instanceof EntityPlayerMP) {
    d3=((EntityPlayerMP)player).theItemInWorldManager.getBlockReachDistance();
  }
  Vec3 vec31=vec3.addVector((double)f7 * d3,(double)f6 * d3,(double)f8 * d3);
  return world.func_147447_a(vec3,vec31,par3,!par3,par3);
}","public static MovingObjectPosition raytraceFromEntity(World world,Entity player,double range){
  float f=1.0F;
  float f1=player.prevRotationPitch + (player.rotationPitch - player.prevRotationPitch) * f;
  float f2=player.prevRotationYaw + (player.rotationYaw - player.prevRotationYaw) * f;
  double d0=player.prevPosX + (player.posX - player.prevPosX) * (double)f;
  double d1=player.prevPosY + (player.posY - player.prevPosY) * (double)f;
  if (!world.isRemote && player instanceof EntityPlayer)   d1+=1.62D;
  double d2=player.prevPosZ + (player.posZ - player.prevPosZ) * (double)f;
  Vec3 vec3=world.getWorldVec3Pool().getVecFromPool(d0,d1,d2);
  float f3=MathHelper.cos(-f2 * 0.017453292F - (float)Math.PI);
  float f4=MathHelper.sin(-f2 * 0.017453292F - (float)Math.PI);
  float f5=-MathHelper.cos(-f1 * 0.017453292F);
  float f6=MathHelper.sin(-f1 * 0.017453292F);
  float f7=f4 * f5;
  float f8=f3 * f5;
  double d3=range;
  if (player instanceof EntityPlayerMP) {
    d3=((EntityPlayerMP)player).theItemInWorldManager.getBlockReachDistance();
  }
  Vec3 vec31=vec3.addVector((double)f7 * d3,(double)f6 * d3,(double)f8 * d3);
  return world.rayTraceBlocks(vec3,vec31);
}",0.976510067114094
117171,"public static boolean disSquare(int x,int y,int z,final EntityPlayer player,final World world,final boolean silk,final int fortune,Material[] materialsListing,ItemStack stack){
  int size=stack.getItem().equals(ModItems.draconicAxe) ? 2 : ItemNBTHelper.getShort(stack,""String_Node_Str"",(short)0);
  MovingObjectPosition mop=raytraceFromEntity(world,player,false,4.5D);
  if (mop == null) {
    return false;
  }
  int sizeX=size;
  int sizeY=size;
  int sizeZ=size;
  int yOff=(size * -1);
  Block targetBlock=world.getBlock(x,y,z);
  if (size > 0)   yOff++;
  if (size == 0)   return false;
  int side=(stack == null || stack.getItem() == null || stack.getItem().equals(ModItems.draconicAxe)) ? 6 : mop.sideHit;
switch (side) {
case 0:
case 1:
    sizeY=0;
  yOff=0;
break;
case 2:
case 3:
sizeZ=0;
break;
case 4:
case 5:
sizeX=0;
break;
}
for (int x1=x - sizeX; x1 <= x + sizeX; x1++) {
for (int y1=y - (sizeY + yOff); y1 <= y + (sizeY - yOff); y1++) {
for (int z1=z - sizeZ; z1 <= z + sizeZ; z1++) {
mineBlock(x1,y1,z1,player,world,silk,fortune,materialsListing,stack);
}
}
}
world.playSoundEffect(x + 0.5F,y + 0.5F,z + 0.5F,targetBlock.stepSound.getStepResourcePath(),(targetBlock.stepSound.getVolume() + 1.0F) / 2.0F,targetBlock.stepSound.getPitch() * 0.8F);
return true;
}","public static boolean disSquare(int x,int y,int z,final EntityPlayer player,final World world,final boolean silk,final int fortune,Material[] materialsListing,ItemStack stack){
  int size=stack.getItem().equals(ModItems.draconicAxe) ? 2 : ItemNBTHelper.getShort(stack,""String_Node_Str"",(short)0);
  MovingObjectPosition mop=raytraceFromEntity(world,player,4.5D);
  if (mop == null) {
    if (player instanceof EntityPlayer)     updateGhostBlocks(player,world);
    return false;
  }
  int sizeX=size;
  int sizeY=size;
  int sizeZ=size;
  int yOff=(size * -1);
  Block targetBlock=world.getBlock(x,y,z);
  if (size > 0)   yOff++;
  if (size == 0)   return false;
  int side=(stack.getItem().equals(ModItems.draconicAxe)) ? 6 : mop.sideHit;
switch (side) {
case 0:
case 1:
    sizeY=0;
  yOff=0;
break;
case 2:
case 3:
sizeZ=0;
break;
case 4:
case 5:
sizeX=0;
break;
}
for (int x1=x - sizeX; x1 <= x + sizeX; x1++) {
for (int y1=y - (sizeY + yOff); y1 <= y + (sizeY - yOff); y1++) {
for (int z1=z - sizeZ; z1 <= z + sizeZ; z1++) {
mineBlock(x1,y1,z1,player,world,silk,fortune,materialsListing,stack);
player.worldObj.scheduleBlockUpdate(x1,y1,z1,Blocks.stone,100);
}
}
}
world.playSoundEffect(x + 0.5F,y + 0.5F,z + 0.5F,targetBlock.stepSound.getStepResourcePath(),(targetBlock.stepSound.getVolume() + 1.0F) / 2.0F,targetBlock.stepSound.getPitch() * 0.8F);
return true;
}",0.9278428409520212
117172,"@Override public boolean canConnectRedstone(IBlockAccess world,int x,int y,int z,int side){
  return true;
}","@Override public boolean canConnectRedstone(IBlockAccess world,int x,int y,int z,int side){
  if (side == 0 || side == 1)   return false;
 else   return true;
}",0.8059701492537313
117173,"@Override public int isProvidingStrongPower(IBlockAccess world,int x,int y,int z,int meta){
  TileEntity te=world.getTileEntity(x,y,z);
  TilePlayerDetectorAdvanced detector=(te != null && te instanceof TilePlayerDetectorAdvanced) ? (TilePlayerDetectorAdvanced)te : null;
  if (detector != null)   return detector.output ? 15 : 0;
 else   return 0;
}","@Override public int isProvidingStrongPower(IBlockAccess world,int x,int y,int z,int meta){
  TileEntity te=world.getTileEntity(x,y,z);
  TilePlayerDetectorAdvanced detector=(te != null && te instanceof TilePlayerDetectorAdvanced) ? (TilePlayerDetectorAdvanced)te : null;
  if (detector != null)   if (!detector.outputInverted)   return detector.output ? 15 : 0;
 else   return detector.output ? 0 : 15;
 else   return 0;
}",0.9055627425614488
117174,"@Override public boolean canConnectRedstone(IBlockAccess world,int x,int y,int z,int side){
  return true;
}","@Override public boolean canConnectRedstone(IBlockAccess world,int x,int y,int z,int side){
  if (side == 0 || side == 1)   return false;
 else   return true;
}",0.8059701492537313
117175,"public void updateBlocks(){
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,blockType);
}","public void updateBlocks(){
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,blockType);
  worldObj.notifyBlocksOfNeighborChange(xCoord - 1,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord + 1,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord - 1,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord + 1,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord - 1,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord + 1,worldObj.getBlock(xCoord,yCoord,zCoord));
}",0.2411347517730496
117176,"public void updateBlocks(){
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,blockType);
}","public void updateBlocks(){
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,blockType);
  worldObj.notifyBlocksOfNeighborChange(xCoord - 1,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord + 1,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord - 1,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord + 1,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord - 1,worldObj.getBlock(xCoord,yCoord,zCoord));
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord + 1,worldObj.getBlock(xCoord,yCoord,zCoord));
}",0.2411347517730496
117177,"/** 
 * Generates a set of Gnuplot scripts for visualizing low dimensional components in a GAM.
 * @param gam the GAM model.
 * @param instances the training set.
 * @param dirPath the directory path to write to.
 * @param outputTerminal output plot format (png or pdf).
 * @throws IOException
 */
public static void generateGnuplotScripts(GAM gam,Instances instances,String dirPath,Terminal outputTerminal) throws IOException {
  List<Attribute> attributes=instances.getAttributes();
  List<int[]> terms=gam.getTerms();
  List<Regressor> regressors=gam.getRegressors();
  File dir=new File(dirPath);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  double[] value=new double[attributes.size()];
  Instance point=new Instance(value);
  String terminal=outputTerminal.toString();
  for (int i=0; i < terms.size(); i++) {
    int[] term=terms.get(i);
    Regressor regressor=regressors.get(i);
    if (term.length == 1) {
      Attribute f=attributes.get(term[0]);
switch (f.getType()) {
case BINNED:
        int numBins=((BinnedAttribute)f).getNumBins();
      if (numBins == 1) {
        continue;
      }
    break;
case NOMINAL:
  int numStates=((NominalAttribute)f).getStates().length;
if (numStates == 1) {
  continue;
}
break;
default :
break;
}
PrintWriter out=new PrintWriter(dir.getAbsolutePath() + File.separator + f.getName()+ ""String_Node_Str"");
out.printf(""String_Node_Str"",terminal);
out.printf(""String_Node_Str"",f.getName(),terminal);
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
switch (f.getType()) {
case BINNED:
int numBins=((BinnedAttribute)f).getNumBins();
Bins bins=((BinnedAttribute)f).getBins();
double[] boundaries=bins.getBoundaries();
double start=boundaries[0] - 1;
if (boundaries.length >= 2) {
start=boundaries[0] - (boundaries[1] - boundaries[0]);
}
out.printf(""String_Node_Str"",start,boundaries[boundaries.length - 1]);
out.println(""String_Node_Str"");
List<Double> predList=new ArrayList<>();
for (int j=0; j < numBins; j++) {
point.setValue(term[0],j);
predList.add(regressor.regress(point));
}
point.setValue(term[0],0);
out.printf(""String_Node_Str"",start,predList.get(0));
for (int j=0; j < numBins; j++) {
point.setValue(term[0],j);
out.printf(""String_Node_Str"",boundaries[j],predList.get(j));
if (j < numBins - 1) {
out.printf(""String_Node_Str"",boundaries[j],predList.get(j + 1));
}
}
out.println(""String_Node_Str"");
break;
case NOMINAL:
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
String[] states=((NominalAttribute)f).getStates();
for (int j=0; j < states.length; j++) {
point.setValue(term[0],j);
out.printf(""String_Node_Str"",states[j],regressor.regress(point));
}
out.println(""String_Node_Str"");
break;
default :
Set<Double> values=new HashSet<>();
for (Instance instance : instances) {
values.add(instance.getValue(term[0]));
}
List<Double> list=new ArrayList<>(values);
Collections.sort(list);
out.printf(""String_Node_Str"",list.get(0),list.get(list.size() - 1));
if (regressor instanceof CubicSpline) {
CubicSpline spline=(CubicSpline)regressor;
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
double[] knots=spline.getKnots();
double[] w=spline.getCoefficients();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"").append(spline.getIntercept());
sb.append(""String_Node_Str"").append(w[0]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(w[1]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(w[2]).append(""String_Node_Str"");
for (int j=0; j < knots.length; j++) {
sb.append(""String_Node_Str"").append(w[j + 3]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(knots[j]).append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
out.println(sb.toString());
}
 else {
out.println(""String_Node_Str"");
for (double v : list) {
point.setValue(term[0],v);
out.printf(""String_Node_Str"",v,regressor.regress(point));
}
}
break;
}
out.flush();
out.close();
}
 else if (term.length == 2) {
Attribute f1=attributes.get(term[0]);
Attribute f2=attributes.get(term[1]);
PrintWriter out=new PrintWriter(dir.getAbsolutePath() + File.separator + f1.getName()+ ""String_Node_Str""+ f2.getName()+ ""String_Node_Str"");
out.printf(""String_Node_Str"",terminal);
out.printf(""String_Node_Str"",f1.getName(),f2.getName(),terminal);
out.println(""String_Node_Str"");
int size1=0;
if (f1.getType() == Attribute.Type.BINNED) {
size1=((BinnedAttribute)f1).getNumBins();
}
 else if (f1.getType() == Attribute.Type.NOMINAL) {
size1=((NominalAttribute)f1).getCardinality();
}
int size2=0;
if (f2.getType() == Attribute.Type.BINNED) {
size2=((BinnedAttribute)f2).getNumBins();
}
 else if (f2.getType() == Attribute.Type.NOMINAL) {
size2=((NominalAttribute)f2).getCardinality();
}
if (f1.getType() == Attribute.Type.NOMINAL) {
out.print(""String_Node_Str"");
String[] states=((NominalAttribute)f1).getStates();
for (int j=0; j < states.length; j++) {
out.printf(""String_Node_Str"",states[j],j);
}
out.println(""String_Node_Str"");
}
if (f2.getType() == Attribute.Type.NOMINAL) {
out.print(""String_Node_Str"");
String[] states=((NominalAttribute)f2).getStates();
for (int j=0; j < states.length; j++) {
out.printf(""String_Node_Str"",states[j],j);
}
out.println(""String_Node_Str"");
}
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
Bins bins1=((BinnedAttribute)f1).getBins();
double[] boundaries1=bins1.getBoundaries();
double start1=boundaries1[0] - 1;
if (boundaries1.length >= 2) {
start1=boundaries1[0] - (boundaries1[1] - boundaries1[0]);
}
Bins bins2=((BinnedAttribute)f2).getBins();
double[] boundaries2=bins2.getBoundaries();
double start2=boundaries2[0] - 1;
if (boundaries2.length >= 2) {
start2=boundaries2[0] - (boundaries2[1] - boundaries2[0]);
}
out.printf(""String_Node_Str"",start1,boundaries1[boundaries1.length - 1]);
out.printf(""String_Node_Str"",start2,boundaries2[boundaries2.length - 1]);
out.println(""String_Node_Str"");
for (int r=-1; r < size1; r++) {
if (r == -1) {
point.setValue(term[0],0);
}
 else {
point.setValue(term[0],r);
}
for (int c=-1; c < size2; c++) {
if (c == -1) {
point.setValue(term[1],0);
}
 else {
point.setValue(term[1],c);
}
if (c == -1) {
out.print(start2 + ""String_Node_Str"");
}
 else {
out.print(boundaries2[c] + ""String_Node_Str"");
}
if (r == -1) {
out.print(start1 + ""String_Node_Str"");
}
 else {
out.print(boundaries1[r] + ""String_Node_Str"");
}
out.println(gam.regress(point));
}
out.println();
}
out.println(""String_Node_Str"");
out.flush();
out.close();
}
}
}","/** 
 * Generates a set of Gnuplot scripts for visualizing low dimensional components in a GAM.
 * @param gam the GAM model.
 * @param instances the training set.
 * @param dirPath the directory path to write to.
 * @param outputTerminal output plot format (png or pdf).
 * @throws IOException
 */
public static void generateGnuplotScripts(GAM gam,Instances instances,String dirPath,Terminal outputTerminal) throws IOException {
  List<Attribute> attributes=instances.getAttributes();
  Map<Integer,Attribute> attMap=new HashMap<>(attributes.size());
  for (  Attribute attribute : attributes) {
    attMap.put(attribute.getIndex(),attribute);
  }
  List<int[]> terms=gam.getTerms();
  List<Regressor> regressors=gam.getRegressors();
  File dir=new File(dirPath);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  double[] value=new double[attributes.size()];
  Instance point=new Instance(value);
  String terminal=outputTerminal.toString();
  for (int i=0; i < terms.size(); i++) {
    int[] term=terms.get(i);
    Regressor regressor=regressors.get(i);
    if (term.length == 1) {
      Attribute f=attMap.get(term[0]);
switch (f.getType()) {
case BINNED:
        int numBins=((BinnedAttribute)f).getNumBins();
      if (numBins == 1) {
        continue;
      }
    break;
case NOMINAL:
  int numStates=((NominalAttribute)f).getStates().length;
if (numStates == 1) {
  continue;
}
break;
default :
break;
}
PrintWriter out=new PrintWriter(dir.getAbsolutePath() + File.separator + f.getName()+ ""String_Node_Str"");
out.printf(""String_Node_Str"",terminal);
out.printf(""String_Node_Str"",f.getName(),terminal);
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
switch (f.getType()) {
case BINNED:
int numBins=((BinnedAttribute)f).getNumBins();
Bins bins=((BinnedAttribute)f).getBins();
double[] boundaries=bins.getBoundaries();
double start=boundaries[0] - 1;
if (boundaries.length >= 2) {
start=boundaries[0] - (boundaries[1] - boundaries[0]);
}
out.printf(""String_Node_Str"",start,boundaries[boundaries.length - 1]);
out.println(""String_Node_Str"");
List<Double> predList=new ArrayList<>();
for (int j=0; j < numBins; j++) {
point.setValue(term[0],j);
predList.add(regressor.regress(point));
}
point.setValue(term[0],0);
out.printf(""String_Node_Str"",start,predList.get(0));
for (int j=0; j < numBins; j++) {
point.setValue(term[0],j);
out.printf(""String_Node_Str"",boundaries[j],predList.get(j));
if (j < numBins - 1) {
out.printf(""String_Node_Str"",boundaries[j],predList.get(j + 1));
}
}
out.println(""String_Node_Str"");
break;
case NOMINAL:
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
String[] states=((NominalAttribute)f).getStates();
for (int j=0; j < states.length; j++) {
point.setValue(term[0],j);
out.printf(""String_Node_Str"",states[j],regressor.regress(point));
}
out.println(""String_Node_Str"");
break;
default :
Set<Double> values=new HashSet<>();
for (Instance instance : instances) {
values.add(instance.getValue(term[0]));
}
List<Double> list=new ArrayList<>(values);
Collections.sort(list);
out.printf(""String_Node_Str"",list.get(0),list.get(list.size() - 1));
if (regressor instanceof CubicSpline) {
CubicSpline spline=(CubicSpline)regressor;
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
double[] knots=spline.getKnots();
double[] w=spline.getCoefficients();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"").append(spline.getIntercept());
sb.append(""String_Node_Str"").append(w[0]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(w[1]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(w[2]).append(""String_Node_Str"");
for (int j=0; j < knots.length; j++) {
sb.append(""String_Node_Str"").append(w[j + 3]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(knots[j]).append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
out.println(sb.toString());
}
 else {
out.println(""String_Node_Str"");
for (double v : list) {
point.setValue(term[0],v);
out.printf(""String_Node_Str"",v,regressor.regress(point));
}
}
break;
}
out.flush();
out.close();
}
 else if (term.length == 2) {
Attribute f1=attMap.get(term[0]);
Attribute f2=attMap.get(term[1]);
PrintWriter out=new PrintWriter(dir.getAbsolutePath() + File.separator + f1.getName()+ ""String_Node_Str""+ f2.getName()+ ""String_Node_Str"");
out.printf(""String_Node_Str"",terminal);
out.printf(""String_Node_Str"",f1.getName(),f2.getName(),terminal);
out.println(""String_Node_Str"");
int size1=0;
if (f1.getType() == Attribute.Type.BINNED) {
size1=((BinnedAttribute)f1).getNumBins();
}
 else if (f1.getType() == Attribute.Type.NOMINAL) {
size1=((NominalAttribute)f1).getCardinality();
}
int size2=0;
if (f2.getType() == Attribute.Type.BINNED) {
size2=((BinnedAttribute)f2).getNumBins();
}
 else if (f2.getType() == Attribute.Type.NOMINAL) {
size2=((NominalAttribute)f2).getCardinality();
}
if (f1.getType() == Attribute.Type.NOMINAL) {
out.print(""String_Node_Str"");
String[] states=((NominalAttribute)f1).getStates();
for (int j=0; j < states.length; j++) {
out.printf(""String_Node_Str"",states[j],j);
}
out.println(""String_Node_Str"");
}
if (f2.getType() == Attribute.Type.NOMINAL) {
out.print(""String_Node_Str"");
String[] states=((NominalAttribute)f2).getStates();
for (int j=0; j < states.length; j++) {
out.printf(""String_Node_Str"",states[j],j);
}
out.println(""String_Node_Str"");
}
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
Bins bins1=((BinnedAttribute)f1).getBins();
double[] boundaries1=bins1.getBoundaries();
double start1=boundaries1[0] - 1;
if (boundaries1.length >= 2) {
start1=boundaries1[0] - (boundaries1[1] - boundaries1[0]);
}
Bins bins2=((BinnedAttribute)f2).getBins();
double[] boundaries2=bins2.getBoundaries();
double start2=boundaries2[0] - 1;
if (boundaries2.length >= 2) {
start2=boundaries2[0] - (boundaries2[1] - boundaries2[0]);
}
out.printf(""String_Node_Str"",start1,boundaries1[boundaries1.length - 1]);
out.printf(""String_Node_Str"",start2,boundaries2[boundaries2.length - 1]);
out.println(""String_Node_Str"");
for (int r=-1; r < size1; r++) {
if (r == -1) {
point.setValue(term[0],0);
}
 else {
point.setValue(term[0],r);
}
for (int c=-1; c < size2; c++) {
if (c == -1) {
point.setValue(term[1],0);
}
 else {
point.setValue(term[1],c);
}
if (c == -1) {
out.print(start2 + ""String_Node_Str"");
}
 else {
out.print(boundaries2[c] + ""String_Node_Str"");
}
if (r == -1) {
out.print(start1 + ""String_Node_Str"");
}
 else {
out.print(boundaries1[r] + ""String_Node_Str"");
}
out.println(gam.regress(point));
}
out.println();
}
out.println(""String_Node_Str"");
out.flush();
out.close();
}
}
}",0.9855851818657106
117178,"/** 
 * Splits a dataset. <pre> Usage: mltk.core.processor.InstancesSplitter -i	input dataset path -o	output directory path [-r]	attribute file path [-m]	splitting mode:parameter. Splitting mode can be split (s) and cross validation (c) (default: c:5) [-a]	attribute name to perform stratified sampling (default: null) [-s]	seed of the random number generator (default: 0) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(InstancesSplitter.class,opts);
  String[] data=null;
  try {
    parser.parse(args);
    data=opts.crossValidationMode.split(""String_Node_Str"");
    if (data.length < 2) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances instances=InstancesReader.read(opts.attPath,opts.inputPath);
  File attFile=new File(opts.attPath);
  String prefix=attFile.getName().split(""String_Node_Str"")[0];
  File dir=new File(opts.outputDirPath);
  if (!dir.exists()) {
    dir.mkdirs();
  }
switch (data[0]) {
case ""String_Node_Str"":
    int k=Integer.parseInt(data[1]);
  if (data.length == 2) {
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
 else {
    double ratio=Double.parseDouble(data[2]);
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k,ratio);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][2],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
break;
case ""String_Node_Str"":
if (data.length == 2) {
double ratio=Double.parseDouble(data[1]);
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratio);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
 else if (data.length == 3) {
double[] ratios=new double[data.length - 1];
for (int i=0; i < ratios.length; i++) {
  ratios[i]=Double.parseDouble(data[i + 1]);
}
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[2],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
 else {
double[] ratios=new double[data.length - 1];
for (int i=0; i < ratios.length; i++) {
  ratios[i]=Double.parseDouble(data[i + 1]);
}
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
for (int i=0; i < datasets.length; i++) {
  InstancesWriter.write(datasets[i],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str""+ i);
}
}
break;
default :
break;
}
}","/** 
 * Splits a dataset. <pre> Usage: mltk.core.processor.InstancesSplitter -i	input dataset path -o	output directory path [-r]	attribute file path [-m]	splitting mode:parameter. Splitting mode can be split (s) and cross validation (c) (default: c:5) [-a]	attribute name to perform stratified sampling (default: null) [-s]	seed of the random number generator (default: 0) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(InstancesSplitter.class,opts);
  String[] data=null;
  try {
    parser.parse(args);
    data=opts.crossValidationMode.split(""String_Node_Str"");
    if (data.length < 2) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances instances=InstancesReader.read(opts.attPath,opts.inputPath);
  File attFile=new File(opts.attPath);
  String prefix=attFile.getName().split(""String_Node_Str"")[0];
  File dir=new File(opts.outputDirPath);
  if (!dir.exists()) {
    dir.mkdirs();
  }
switch (data[0]) {
case ""String_Node_Str"":
    int k=Integer.parseInt(data[1]);
  if (data.length == 2) {
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
 else {
    double ratio=Double.parseDouble(data[2]);
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k,ratio);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][2],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
break;
case ""String_Node_Str"":
if (data.length == 2) {
double ratio=Double.parseDouble(data[1]);
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratio);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
 else if (data.length == 3) {
double ratioTrain=Double.parseDouble(data[1]);
double ratioValid=Double.parseDouble(data[2]);
double[] ratios=new double[]{ratioTrain,ratioValid};
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
 else if (data.length == 4) {
double ratioTrain=Double.parseDouble(data[1]);
double ratioValid=Double.parseDouble(data[2]);
double ratioTest=Double.parseDouble(data[3]);
double[] ratios=new double[]{ratioTrain,ratioValid,ratioTest};
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[2],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
 else {
double[] ratios=new double[data.length - 1];
for (int i=0; i < ratios.length; i++) {
  ratios[i]=Double.parseDouble(data[i + 1]);
}
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
for (int i=0; i < datasets.length; i++) {
  InstancesWriter.write(datasets[i],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str""+ i);
}
}
break;
default :
break;
}
}",0.765590903870449
117179,"protected TreeNode createNode(Dataset dataset,int limit,double[] stats){
  boolean stdIs0=getStats(dataset.instances,stats);
  final double totalWeights=stats[0];
  final double sum=stats[1];
  final double weightedMean=stats[2];
  if (stats[0] < limit || stdIs0) {
    RegressionTreeLeaf node=new RegressionTreeLeaf(weightedMean);
    return node;
  }
  double bestEval=Double.POSITIVE_INFINITY;
  List<IntDoublePair> splits=new ArrayList<>();
  List<Attribute> attributes=dataset.instances.getAttributes();
  int[] a=perm.permute().getPermutation();
  Set<Integer> selected=new HashSet<>(numFeatures);
  for (int i=0; i < numFeatures; i++) {
    selected.add(a[i]);
  }
  for (int i=0; i < attributes.size(); i++) {
    Attribute attribute=attributes.get(i);
    if (!selected.contains(i)) {
      continue;
    }
    int attIndex=attribute.getIndex();
    List<IntDoublePair> sortedList=dataset.sortedLists.get(i);
    List<Double> uniqueValues=new ArrayList<>(sortedList.size());
    List<DoublePair> histogram=new ArrayList<>(sortedList.size());
    getHistogram(dataset.instances,sortedList,uniqueValues,totalWeights,sum,histogram);
    if (uniqueValues.size() > 1) {
      DoublePair split=split(uniqueValues,histogram,totalWeights,sum);
      if (split.v2 <= bestEval) {
        IntDoublePair splitPoint=new IntDoublePair(attIndex,split.v1);
        if (split.v2 < bestEval) {
          splits.clear();
          bestEval=split.v2;
        }
        splits.add(splitPoint);
      }
    }
  }
  if (bestEval < Double.POSITIVE_INFINITY) {
    Random rand=Random.getInstance();
    IntDoublePair splitPoint=splits.get(rand.nextInt(splits.size()));
    int attIndex=splitPoint.v1;
    TreeNode node=new TreeInteriorNode(attIndex,splitPoint.v2);
    stats[3]=bestEval + totalWeights * weightedMean * weightedMean;
    return node;
  }
 else {
    RegressionTreeLeaf node=new RegressionTreeLeaf(weightedMean);
    return node;
  }
}","protected TreeNode createNode(Dataset dataset,int limit,double[] stats){
  boolean stdIs0=getStats(dataset.instances,stats);
  final double totalWeights=stats[0];
  final double sum=stats[1];
  final double weightedMean=stats[2];
  if (stats[0] < limit || stdIs0) {
    RegressionTreeLeaf node=new RegressionTreeLeaf(weightedMean);
    return node;
  }
  double bestEval=Double.POSITIVE_INFINITY;
  List<IntDoublePair> splits=new ArrayList<>();
  List<Attribute> attributes=dataset.instances.getAttributes();
  int[] a=perm.permute().getPermutation();
  Set<Integer> selected=new HashSet<>(numFeatures);
  for (int i=0; i < numFeatures; i++) {
    selected.add(a[i]);
  }
  for (int j=0; j < attributes.size(); j++) {
    int attIndex=attributes.get(j).getIndex();
    if (!selected.contains(j)) {
      continue;
    }
    String attName=attributes.get(j).getName();
    List<IntDoublePair> sortedList=dataset.sortedLists.get(attName);
    List<Double> uniqueValues=new ArrayList<>(sortedList.size());
    List<DoublePair> histogram=new ArrayList<>(sortedList.size());
    getHistogram(dataset.instances,sortedList,uniqueValues,totalWeights,sum,histogram);
    if (uniqueValues.size() > 1) {
      DoublePair split=split(uniqueValues,histogram,totalWeights,sum);
      if (split.v2 <= bestEval) {
        IntDoublePair splitPoint=new IntDoublePair(attIndex,split.v1);
        if (split.v2 < bestEval) {
          splits.clear();
          bestEval=split.v2;
        }
        splits.add(splitPoint);
      }
    }
  }
  if (bestEval < Double.POSITIVE_INFINITY) {
    Random rand=Random.getInstance();
    IntDoublePair splitPoint=splits.get(rand.nextInt(splits.size()));
    int attIndex=splitPoint.v1;
    TreeNode node=new TreeInteriorNode(attIndex,splitPoint.v2);
    stats[3]=bestEval + totalWeights * weightedMean * weightedMean;
    return node;
  }
 else {
    RegressionTreeLeaf node=new RegressionTreeLeaf(weightedMean);
    return node;
  }
}",0.9580653460252122
117180,"/** 
 * Splits a dataset. <pre> Usage: mltk.core.processor.InstancesSplitter -i	input dataset path -o	output directory path [-r]	attribute file path [-m]	splitting mode:parameter. Splitting mode can be split (s) and cross validation (c) (default: c:5) [-a]	attribute name to perform stratified sampling (default: null) [-s]	seed of the random number generator (default: 0) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(InstancesSplitter.class,opts);
  String[] data=null;
  try {
    parser.parse(args);
    data=opts.crossValidationMode.split(""String_Node_Str"");
    if (data.length < 2) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances instances=InstancesReader.read(opts.attPath,opts.inputPath);
  File attFile=new File(opts.attPath);
  String prefix=attFile.getName().split(""String_Node_Str"")[0];
  File dir=new File(opts.outputDirPath);
  if (!dir.exists()) {
    dir.mkdir();
  }
switch (data[0]) {
case ""String_Node_Str"":
    int k=Integer.parseInt(data[1]);
  if (data.length == 2) {
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
 else {
    double ratio=Double.parseDouble(data[2]);
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k,ratio);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][2],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
break;
case ""String_Node_Str"":
if (data.length == 2) {
double ratio=Double.parseDouble(data[1]);
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratio);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
if (data.length == 3) {
double[] ratios=new double[data.length - 1];
for (int i=0; i < ratios.length; i++) {
ratios[i]=Double.parseDouble(data[i + 1]);
}
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[2],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
 else {
double[] ratios=new double[data.length - 1];
for (int i=0; i < ratios.length; i++) {
ratios[i]=Double.parseDouble(data[i + 1]);
}
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
for (int i=0; i < datasets.length; i++) {
InstancesWriter.write(datasets[i],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str""+ i);
}
}
break;
default :
break;
}
}","/** 
 * Splits a dataset. <pre> Usage: mltk.core.processor.InstancesSplitter -i	input dataset path -o	output directory path [-r]	attribute file path [-m]	splitting mode:parameter. Splitting mode can be split (s) and cross validation (c) (default: c:5) [-a]	attribute name to perform stratified sampling (default: null) [-s]	seed of the random number generator (default: 0) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(InstancesSplitter.class,opts);
  String[] data=null;
  try {
    parser.parse(args);
    data=opts.crossValidationMode.split(""String_Node_Str"");
    if (data.length < 2) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances instances=InstancesReader.read(opts.attPath,opts.inputPath);
  File attFile=new File(opts.attPath);
  String prefix=attFile.getName().split(""String_Node_Str"")[0];
  File dir=new File(opts.outputDirPath);
  if (!dir.exists()) {
    dir.mkdir();
  }
switch (data[0]) {
case ""String_Node_Str"":
    int k=Integer.parseInt(data[1]);
  if (data.length == 2) {
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
 else {
    double ratio=Double.parseDouble(data[2]);
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,opts.attToStrafity,k,ratio);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][2],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
break;
case ""String_Node_Str"":
if (data.length == 2) {
double ratio=Double.parseDouble(data[1]);
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratio);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
 else if (data.length == 3) {
double[] ratios=new double[data.length - 1];
for (int i=0; i < ratios.length; i++) {
  ratios[i]=Double.parseDouble(data[i + 1]);
}
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[2],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
}
 else {
double[] ratios=new double[data.length - 1];
for (int i=0; i < ratios.length; i++) {
  ratios[i]=Double.parseDouble(data[i + 1]);
}
Instances[] datasets=InstancesSplitter.split(instances,opts.attToStrafity,ratios);
for (int i=0; i < datasets.length; i++) {
  InstancesWriter.write(datasets[i],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str""+ i);
}
}
break;
default :
break;
}
}",0.9985177865612648
117181,"protected static void split(List<Double> uniqueValues,List<DoublePair> stats,Interval parent,double limit){
  if (parent.weight <= limit || parent.end - parent.start <= 1) {
    parent.split=Double.NaN;
  }
 else {
    parent.left=new Interval();
    parent.right=new Interval();
    int start=parent.left.start=parent.start;
    int end=parent.right.end=parent.end;
    final double totalWeight=parent.weight;
    final double sum=parent.sum;
    double weight1=stats.get(start).v1;
    double weight2=totalWeight - weight1;
    double sum1=stats.get(start).v2;
    double sum2=sum - sum1;
    double bestEval=-sum1 * sum1 / weight1 - sum2 * sum2 / weight2;
    List<double[]> splits=new ArrayList<>();
    splits.add(new double[]{(uniqueValues.get(start) + uniqueValues.get(start + 1)) / 2,start,weight1,sum1,weight2,sum2});
    for (int i=start + 1; i < end - 1; i++) {
      final double w=stats.get(i).v1;
      final double s=stats.get(i).v2;
      weight1+=w;
      weight2-=w;
      sum1+=s;
      sum2-=s;
      double eval=-sum1 * sum1 / weight1 - sum2 * sum2 / weight2;
      if (eval <= bestEval) {
        double split=(uniqueValues.get(i) + uniqueValues.get(i + 1)) / 2;
        if (eval < bestEval) {
          bestEval=eval;
          splits.clear();
        }
        splits.add(new double[]{split,i,weight1,sum1,weight2,sum2});
      }
    }
    Random rand=Random.getInstance();
    double[] split=splits.get(rand.nextInt(splits.size()));
    parent.split=split[0];
    parent.left.end=(int)split[1] + 1;
    parent.right.start=(int)split[1] + 1;
    parent.left.weight=split[2];
    parent.left.sum=split[3];
    parent.right.weight=split[4];
    parent.right.sum=split[5];
    parent.gain=(split[3] / split[2]) * split[3] + (split[5] / split[4]) * split[5];
    parent.value=-parent.gain + (sum / totalWeight * sum);
  }
}","protected static void split(List<Double> uniqueValues,List<DoublePair> stats,Interval parent,double limit){
  if (parent.weight <= limit || parent.end - parent.start <= 1) {
    parent.split=Double.NaN;
  }
 else {
    parent.left=new Interval();
    parent.right=new Interval();
    int start=parent.left.start=parent.start;
    int end=parent.right.end=parent.end;
    final double totalWeight=parent.weight;
    final double sum=parent.sum;
    double weight1=stats.get(start).v1;
    double weight2=totalWeight - weight1;
    double sum1=stats.get(start).v2;
    double sum2=sum - sum1;
    double bestEval=-(OptimUtils.getGain(sum1,weight1) + OptimUtils.getGain(sum2,weight2));
    List<double[]> splits=new ArrayList<>();
    splits.add(new double[]{(uniqueValues.get(start) + uniqueValues.get(start + 1)) / 2,start,weight1,sum1,weight2,sum2});
    for (int i=start + 1; i < end - 1; i++) {
      final double w=stats.get(i).v1;
      final double s=stats.get(i).v2;
      weight1+=w;
      weight2-=w;
      sum1+=s;
      sum2-=s;
      double eval1=OptimUtils.getGain(sum1,weight1);
      double eval2=OptimUtils.getGain(sum2,weight2);
      double eval=-(eval1 + eval2);
      if (eval <= bestEval) {
        double split=(uniqueValues.get(i) + uniqueValues.get(i + 1)) / 2;
        if (eval < bestEval) {
          bestEval=eval;
          splits.clear();
        }
        splits.add(new double[]{split,i,weight1,sum1,weight2,sum2});
      }
    }
    Random rand=Random.getInstance();
    double[] split=splits.get(rand.nextInt(splits.size()));
    parent.split=split[0];
    parent.left.end=(int)split[1] + 1;
    parent.right.start=(int)split[1] + 1;
    parent.left.weight=split[2];
    parent.left.sum=split[3];
    parent.right.weight=split[4];
    parent.right.sum=split[5];
    parent.gain=(split[3] / split[2]) * split[3] + (split[5] / split[4]) * split[5];
    parent.value=-parent.gain + (sum / totalWeight * sum);
  }
}",0.9292128895932382
117182,"protected static void findCuts(Table table,int[] v1,int v2){
  double bestEval=Double.POSITIVE_INFINITY;
  for (int i=0; i < table.resp.length - 1; i++) {
    double sum1=table.resp[i][v2][0];
    double sum2=table.resp[i][v2][2];
    double weight1=table.count[i][v2][0];
    double weight2=table.count[i][v2][2];
    double eval=-sum1 * sum1 / weight1 - sum2 * sum2 / weight2;
    if (eval < bestEval) {
      bestEval=eval;
      v1[0]=i;
    }
  }
  bestEval=Double.POSITIVE_INFINITY;
  for (int i=0; i < table.resp.length - 1; i++) {
    double sum1=table.resp[i][v2][1];
    double sum2=table.resp[i][v2][3];
    double weight1=table.count[i][v2][1];
    double weight2=table.count[i][v2][3];
    double eval=-sum1 * sum1 / weight1 - sum2 * sum2 / weight2;
    if (eval < bestEval) {
      bestEval=eval;
      v1[1]=i;
    }
  }
}","protected static void findCuts(Table table,int[] v1,int v2){
  double bestEval=Double.POSITIVE_INFINITY;
  for (int i=0; i < table.resp.length - 1; i++) {
    double sum1=table.resp[i][v2][0];
    double sum2=table.resp[i][v2][2];
    double weight1=table.count[i][v2][0];
    double weight2=table.count[i][v2][2];
    double eval1=OptimUtils.getGain(sum1,weight1);
    double eval2=OptimUtils.getGain(sum2,weight2);
    double eval=-(eval1 + eval2);
    if (eval < bestEval) {
      bestEval=eval;
      v1[0]=i;
    }
  }
  bestEval=Double.POSITIVE_INFINITY;
  for (int i=0; i < table.resp.length - 1; i++) {
    double sum1=table.resp[i][v2][1];
    double sum2=table.resp[i][v2][3];
    double weight1=table.count[i][v2][1];
    double weight2=table.count[i][v2][3];
    double eval1=OptimUtils.getGain(sum1,weight1);
    double eval2=OptimUtils.getGain(sum2,weight2);
    double eval=-(eval1 + eval2);
    if (eval < bestEval) {
      bestEval=eval;
      v1[1]=i;
    }
  }
}",0.8217821782178217
117183,"protected static void findCut(CHistogram cHist,IntDoublePair cut){
  cut.v2=Double.POSITIVE_INFINITY;
  for (int i=0; i < cHist.size() - 1; i++) {
    double sum1=cHist.sum[i];
    double sum2=cHist.sum[cHist.size() - 1] - sum1;
    double weight1=cHist.count[i];
    double weight2=cHist.count[cHist.size() - 1] - weight1;
    double eval=-sum1 * sum1 * weight1 - sum2 * sum2 * weight2;
    if (eval < cut.v2) {
      cut.v2=eval;
      cut.v1=i;
    }
  }
}","protected static void findCut(CHistogram cHist,IntDoublePair cut){
  cut.v2=Double.POSITIVE_INFINITY;
  for (int i=0; i < cHist.size() - 1; i++) {
    double sum1=cHist.sum[i];
    double sum2=cHist.sum[cHist.size() - 1] - sum1;
    double weight1=cHist.count[i];
    double weight2=cHist.count[cHist.size() - 1] - weight1;
    double eval1=OptimUtils.getGain(sum1,weight1);
    double eval2=OptimUtils.getGain(sum2,weight2);
    double eval=-(eval1 + eval2);
    if (eval < cut.v2) {
      cut.v2=eval;
      cut.v1=i;
    }
  }
}",0.8363636363636363
117184,"/** 
 * Returns the pseudo residual.
 * @param pred the prediction.
 * @param cls the class label.
 * @return the pseudo residual.
 */
public static double getPseudoResidual(double pred,double cls){
  if (cls == 1) {
    return 1 / (1 + Math.exp(pred));
  }
 else {
    return -1 / (1 + Math.exp(-pred));
  }
}","/** 
 * Returns the pseudo residual.
 * @param pred the prediction.
 * @param cls the class label.
 * @return the pseudo residual.
 */
public static double getPseudoResidual(double pred,double cls){
  return cls - getProbability(pred);
}",0.753199268738574
117185,"@Test public void testGetPseudoResidual(){
  Assert.assertEquals(0.5,OptimUtils.getPseudoResidual(0,1),MathUtils.EPSILON);
  Assert.assertEquals(-0.5,OptimUtils.getPseudoResidual(0,-1),MathUtils.EPSILON);
}","@Test public void testGetPseudoResidual(){
  Assert.assertEquals(0.5,OptimUtils.getPseudoResidual(0,1),MathUtils.EPSILON);
  Assert.assertEquals(-0.5,OptimUtils.getPseudoResidual(0,0),MathUtils.EPSILON);
}",0.9927007299270072
117186,"/** 
 * Generates a set of Gnuplot scripts for visualizing low dimensional components in a GAM.
 * @param gam the GAM model.
 * @param instances the training set.
 * @param dirPath the directory path to write to.
 * @param outputTerminal output plot format (png or pdf).
 * @throws IOException
 */
public static void generateGnuplotScripts(GAM gam,Instances instances,String dirPath,Terminal outputTerminal) throws IOException {
  List<Attribute> attributes=instances.getAttributes();
  Map<Integer,Attribute> attMap=new HashMap<>(attributes.size());
  for (  Attribute attribute : attributes) {
    attMap.put(attribute.getIndex(),attribute);
  }
  List<int[]> terms=gam.getTerms();
  List<Regressor> regressors=gam.getRegressors();
  File dir=new File(dirPath);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  double[] value=new double[attributes.size()];
  Instance point=new Instance(value);
  String terminal=outputTerminal.toString();
  for (int i=0; i < terms.size(); i++) {
    int[] term=terms.get(i);
    Regressor regressor=regressors.get(i);
    if (term.length == 1) {
      Attribute f=attMap.get(term[0]);
switch (f.getType()) {
case BINNED:
        int numBins=((BinnedAttribute)f).getNumBins();
      if (numBins == 1) {
        continue;
      }
    break;
case NOMINAL:
  int numStates=((NominalAttribute)f).getStates().length;
if (numStates == 1) {
  continue;
}
break;
default :
break;
}
PrintWriter out=new PrintWriter(dir.getAbsolutePath() + File.separator + f.getName()+ ""String_Node_Str"");
out.printf(""String_Node_Str"",terminal);
out.printf(""String_Node_Str"",f.getName(),terminal);
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
switch (f.getType()) {
case BINNED:
int numBins=((BinnedAttribute)f).getNumBins();
Bins bins=((BinnedAttribute)f).getBins();
double[] boundaries=bins.getBoundaries();
double start=boundaries[0] - 1;
if (boundaries.length >= 2) {
start=boundaries[0] - (boundaries[1] - boundaries[0]);
}
out.printf(""String_Node_Str"",start,boundaries[boundaries.length - 1]);
out.println(""String_Node_Str"");
List<Double> predList=new ArrayList<>();
for (int j=0; j < numBins; j++) {
point.setValue(term[0],j);
predList.add(regressor.regress(point));
}
point.setValue(term[0],0);
out.printf(""String_Node_Str"",start,predList.get(0));
for (int j=0; j < numBins; j++) {
point.setValue(term[0],j);
out.printf(""String_Node_Str"",boundaries[j],predList.get(j));
if (j < numBins - 1) {
out.printf(""String_Node_Str"",boundaries[j],predList.get(j + 1));
}
}
out.println(""String_Node_Str"");
break;
case NOMINAL:
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
String[] states=((NominalAttribute)f).getStates();
for (int j=0; j < states.length; j++) {
point.setValue(term[0],j);
out.printf(""String_Node_Str"",states[j],regressor.regress(point));
}
out.println(""String_Node_Str"");
break;
default :
Set<Double> values=new HashSet<>();
for (Instance instance : instances) {
values.add(instance.getValue(term[0]));
}
List<Double> list=new ArrayList<>(values);
Collections.sort(list);
out.printf(""String_Node_Str"",list.get(0),list.get(list.size() - 1));
if (regressor instanceof CubicSpline) {
CubicSpline spline=(CubicSpline)regressor;
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
double[] knots=spline.getKnots();
double[] w=spline.getCoefficients();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"").append(spline.getIntercept());
sb.append(""String_Node_Str"").append(w[0]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(w[1]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(w[2]).append(""String_Node_Str"");
for (int j=0; j < knots.length; j++) {
sb.append(""String_Node_Str"").append(w[j + 3]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(knots[j]).append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
out.println(sb.toString());
}
 else {
out.println(""String_Node_Str"");
for (double v : list) {
point.setValue(term[0],v);
out.printf(""String_Node_Str"",v,regressor.regress(point));
}
}
break;
}
out.flush();
out.close();
}
 else if (term.length == 2) {
Attribute f1=attMap.get(term[0]);
Attribute f2=attMap.get(term[1]);
PrintWriter out=new PrintWriter(dir.getAbsolutePath() + File.separator + f1.getName()+ ""String_Node_Str""+ f2.getName()+ ""String_Node_Str"");
out.printf(""String_Node_Str"",terminal);
out.printf(""String_Node_Str"",f1.getName(),f2.getName(),terminal);
out.println(""String_Node_Str"");
int size1=0;
if (f1.getType() == Attribute.Type.BINNED) {
size1=((BinnedAttribute)f1).getNumBins();
}
 else if (f1.getType() == Attribute.Type.NOMINAL) {
size1=((NominalAttribute)f1).getCardinality();
}
int size2=0;
if (f2.getType() == Attribute.Type.BINNED) {
size2=((BinnedAttribute)f2).getNumBins();
}
 else if (f2.getType() == Attribute.Type.NOMINAL) {
size2=((NominalAttribute)f2).getCardinality();
}
if (f1.getType() == Attribute.Type.NOMINAL) {
out.print(""String_Node_Str"");
String[] states=((NominalAttribute)f1).getStates();
for (int j=0; j < states.length; j++) {
out.printf(""String_Node_Str"",states[j],j);
}
out.println(""String_Node_Str"");
}
if (f2.getType() == Attribute.Type.NOMINAL) {
out.print(""String_Node_Str"");
String[] states=((NominalAttribute)f2).getStates();
for (int j=0; j < states.length; j++) {
out.printf(""String_Node_Str"",states[j],j);
}
out.println(""String_Node_Str"");
}
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
Bins bins1=((BinnedAttribute)f1).getBins();
double[] boundaries1=bins1.getBoundaries();
double start1=boundaries1[0] - 1;
if (boundaries1.length >= 2) {
start1=boundaries1[0] - (boundaries1[1] - boundaries1[0]);
}
Bins bins2=((BinnedAttribute)f2).getBins();
double[] boundaries2=bins2.getBoundaries();
double start2=boundaries2[0] - 1;
if (boundaries2.length >= 2) {
start2=boundaries2[0] - (boundaries2[1] - boundaries2[0]);
}
out.printf(""String_Node_Str"",start1,boundaries1[boundaries1.length - 1]);
out.printf(""String_Node_Str"",start2,boundaries2[boundaries2.length - 1]);
out.println(""String_Node_Str"");
for (int r=-1; r < size1; r++) {
if (r == -1) {
point.setValue(term[0],0);
}
 else {
point.setValue(term[0],r);
}
for (int c=-1; c < size2; c++) {
if (c == -1) {
point.setValue(term[1],0);
}
 else {
point.setValue(term[1],c);
}
if (c == -1) {
out.print(start2 + ""String_Node_Str"");
}
 else {
out.print(boundaries2[c] + ""String_Node_Str"");
}
if (r == -1) {
out.print(start1 + ""String_Node_Str"");
}
 else {
out.print(boundaries1[r] + ""String_Node_Str"");
}
out.println(gam.regress(point));
}
out.println();
}
out.println(""String_Node_Str"");
out.flush();
out.close();
}
}
}","/** 
 * Generates a set of Gnuplot scripts for visualizing low dimensional components in a GAM.
 * @param gam the GAM model.
 * @param instances the training set.
 * @param dirPath the directory path to write to.
 * @param outputTerminal output plot format (png or pdf).
 * @throws IOException
 */
public static void generateGnuplotScripts(GAM gam,Instances instances,String dirPath,Terminal outputTerminal) throws IOException {
  List<Attribute> attributes=instances.getAttributes();
  int p=-1;
  Map<Integer,Attribute> attMap=new HashMap<>(attributes.size());
  for (  Attribute attribute : attributes) {
    int attIndex=attribute.getIndex();
    attMap.put(attIndex,attribute);
    if (attIndex > p) {
      p=attIndex;
    }
  }
  p++;
  List<int[]> terms=gam.getTerms();
  List<Regressor> regressors=gam.getRegressors();
  File dir=new File(dirPath);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  double[] value=new double[p];
  Instance point=new Instance(value);
  String terminal=outputTerminal.toString();
  for (int i=0; i < terms.size(); i++) {
    int[] term=terms.get(i);
    Regressor regressor=regressors.get(i);
    if (term.length == 1) {
      Attribute f=attMap.get(term[0]);
switch (f.getType()) {
case BINNED:
        int numBins=((BinnedAttribute)f).getNumBins();
      if (numBins == 1) {
        continue;
      }
    break;
case NOMINAL:
  int numStates=((NominalAttribute)f).getStates().length;
if (numStates == 1) {
  continue;
}
break;
default :
break;
}
PrintWriter out=new PrintWriter(dir.getAbsolutePath() + File.separator + f.getName()+ ""String_Node_Str"");
out.printf(""String_Node_Str"",terminal);
out.printf(""String_Node_Str"",f.getName(),terminal);
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
switch (f.getType()) {
case BINNED:
int numBins=((BinnedAttribute)f).getNumBins();
Bins bins=((BinnedAttribute)f).getBins();
double[] boundaries=bins.getBoundaries();
double start=boundaries[0] - 1;
if (boundaries.length >= 2) {
start=boundaries[0] - (boundaries[1] - boundaries[0]);
}
out.printf(""String_Node_Str"",start,boundaries[boundaries.length - 1]);
out.println(""String_Node_Str"");
List<Double> predList=new ArrayList<>();
for (int j=0; j < numBins; j++) {
point.setValue(term[0],j);
predList.add(regressor.regress(point));
}
point.setValue(term[0],0);
out.printf(""String_Node_Str"",start,predList.get(0));
for (int j=0; j < numBins; j++) {
point.setValue(term[0],j);
out.printf(""String_Node_Str"",boundaries[j],predList.get(j));
if (j < numBins - 1) {
out.printf(""String_Node_Str"",boundaries[j],predList.get(j + 1));
}
}
out.println(""String_Node_Str"");
break;
case NOMINAL:
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
String[] states=((NominalAttribute)f).getStates();
for (int j=0; j < states.length; j++) {
point.setValue(term[0],j);
out.printf(""String_Node_Str"",states[j],regressor.regress(point));
}
out.println(""String_Node_Str"");
break;
default :
Set<Double> values=new HashSet<>();
for (Instance instance : instances) {
values.add(instance.getValue(term[0]));
}
List<Double> list=new ArrayList<>(values);
Collections.sort(list);
out.printf(""String_Node_Str"",list.get(0),list.get(list.size() - 1));
if (regressor instanceof CubicSpline) {
CubicSpline spline=(CubicSpline)regressor;
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
double[] knots=spline.getKnots();
double[] w=spline.getCoefficients();
StringBuilder sb=new StringBuilder();
sb.append(""String_Node_Str"").append(spline.getIntercept());
sb.append(""String_Node_Str"").append(w[0]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(w[1]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(w[2]).append(""String_Node_Str"");
for (int j=0; j < knots.length; j++) {
sb.append(""String_Node_Str"").append(w[j + 3]).append(""String_Node_Str"");
sb.append(""String_Node_Str"").append(knots[j]).append(""String_Node_Str"");
}
sb.append(""String_Node_Str"");
out.println(sb.toString());
}
 else {
out.println(""String_Node_Str"");
for (double v : list) {
point.setValue(term[0],v);
out.printf(""String_Node_Str"",v,regressor.regress(point));
}
}
break;
}
out.flush();
out.close();
}
 else if (term.length == 2) {
Attribute f1=attMap.get(term[0]);
Attribute f2=attMap.get(term[1]);
PrintWriter out=new PrintWriter(dir.getAbsolutePath() + File.separator + f1.getName()+ ""String_Node_Str""+ f2.getName()+ ""String_Node_Str"");
out.printf(""String_Node_Str"",terminal);
out.printf(""String_Node_Str"",f1.getName(),f2.getName(),terminal);
out.println(""String_Node_Str"");
int size1=0;
if (f1.getType() == Attribute.Type.BINNED) {
size1=((BinnedAttribute)f1).getNumBins();
}
 else if (f1.getType() == Attribute.Type.NOMINAL) {
size1=((NominalAttribute)f1).getCardinality();
}
int size2=0;
if (f2.getType() == Attribute.Type.BINNED) {
size2=((BinnedAttribute)f2).getNumBins();
}
 else if (f2.getType() == Attribute.Type.NOMINAL) {
size2=((NominalAttribute)f2).getCardinality();
}
if (f1.getType() == Attribute.Type.NOMINAL) {
out.print(""String_Node_Str"");
String[] states=((NominalAttribute)f1).getStates();
for (int j=0; j < states.length; j++) {
out.printf(""String_Node_Str"",states[j],j);
}
out.println(""String_Node_Str"");
}
if (f2.getType() == Attribute.Type.NOMINAL) {
out.print(""String_Node_Str"");
String[] states=((NominalAttribute)f2).getStates();
for (int j=0; j < states.length; j++) {
out.printf(""String_Node_Str"",states[j],j);
}
out.println(""String_Node_Str"");
}
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
out.println(""String_Node_Str"");
Bins bins1=((BinnedAttribute)f1).getBins();
double[] boundaries1=bins1.getBoundaries();
double start1=boundaries1[0] - 1;
if (boundaries1.length >= 2) {
start1=boundaries1[0] - (boundaries1[1] - boundaries1[0]);
}
Bins bins2=((BinnedAttribute)f2).getBins();
double[] boundaries2=bins2.getBoundaries();
double start2=boundaries2[0] - 1;
if (boundaries2.length >= 2) {
start2=boundaries2[0] - (boundaries2[1] - boundaries2[0]);
}
out.printf(""String_Node_Str"",start1,boundaries1[boundaries1.length - 1]);
out.printf(""String_Node_Str"",start2,boundaries2[boundaries2.length - 1]);
out.println(""String_Node_Str"");
for (int r=-1; r < size1; r++) {
if (r == -1) {
point.setValue(term[0],0);
}
 else {
point.setValue(term[0],r);
}
for (int c=-1; c < size2; c++) {
if (c == -1) {
point.setValue(term[1],0);
}
 else {
point.setValue(term[1],c);
}
if (c == -1) {
out.print(start2 + ""String_Node_Str"");
}
 else {
out.print(boundaries2[c] + ""String_Node_Str"");
}
if (r == -1) {
out.print(start1 + ""String_Node_Str"");
}
 else {
out.print(boundaries1[r] + ""String_Node_Str"");
}
out.println(gam.regress(point));
}
out.println();
}
out.println(""String_Node_Str"");
out.flush();
out.close();
}
}
}",0.9900132177999706
117187,"/** 
 * <p> <pre> Usage: Predictor -d	data set path -m	model path [-r]	attribute file path [-p]	prediction path [-R]	residual path [-g]	task between classification (c) and regression (r) (default: r) [-P]	output probablity (default: false) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Predictor.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(opts.attPath,opts.dataPath);
  mltk.predictor.Predictor predictor=PredictorReader.read(opts.modelPath);
switch (task) {
case REGRESSION:
    Regressor regressor=(Regressor)predictor;
  double rmse=Evaluator.evalRMSE(regressor,instances);
System.out.println(""String_Node_Str"" + rmse);
if (opts.predictionPath != null) {
PrintWriter out=new PrintWriter(opts.predictionPath);
for (Instance instance : instances) {
  double pred=regressor.regress(instance);
  out.println(pred);
}
out.flush();
out.close();
}
if (opts.residualPath != null) {
PrintWriter out=new PrintWriter(opts.residualPath);
for (Instance instance : instances) {
double pred=regressor.regress(instance);
out.println(instance.getTarget() - pred);
}
out.flush();
out.close();
}
break;
case CLASSIFICATION:
Classifier classifier=(Classifier)predictor;
double error=Evaluator.evalError(classifier,instances);
System.out.println(""String_Node_Str"" + (error * 100) + ""String_Node_Str"");
if (opts.predictionPath != null) {
if (opts.prob) {
PrintWriter out=new PrintWriter(opts.predictionPath);
ProbabilisticClassifier probClassifier=(ProbabilisticClassifier)predictor;
for (Instance instance : instances) {
double[] pred=probClassifier.predictProbabilities(instance);
out.println(Arrays.toString(pred));
}
out.flush();
out.close();
}
 else {
PrintWriter out=new PrintWriter(opts.predictionPath);
for (Instance instance : instances) {
double pred=classifier.classify(instance);
out.println((int)pred);
}
out.flush();
out.close();
}
}
if (opts.residualPath != null) {
if (predictor instanceof Regressor) {
PrintWriter out=new PrintWriter(opts.residualPath);
Regressor regressingClassifier=(Regressor)predictor;
for (Instance instance : instances) {
double pred=regressingClassifier.regress(instance);
int cls=(int)instance.getTarget();
out.println(OptimUtils.getPseudoResidual(pred,cls));
}
out.flush();
out.close();
}
 else {
System.out.println(""String_Node_Str"");
}
}
break;
default :
break;
}
}","/** 
 * <p> <pre> Usage: mltk.predictor.evaluation.Predictor -d	data set path -m	model path [-r]	attribute file path [-p]	prediction path [-R]	residual path [-g]	task between classification (c) and regression (r) (default: r) [-P]	output probablity (default: false) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Predictor.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(opts.attPath,opts.dataPath);
  mltk.predictor.Predictor predictor=PredictorReader.read(opts.modelPath);
switch (task) {
case REGRESSION:
    Regressor regressor=(Regressor)predictor;
  double rmse=Evaluator.evalRMSE(regressor,instances);
System.out.println(""String_Node_Str"" + rmse);
if (opts.predictionPath != null) {
PrintWriter out=new PrintWriter(opts.predictionPath);
for (Instance instance : instances) {
  double pred=regressor.regress(instance);
  out.println(pred);
}
out.flush();
out.close();
}
if (opts.residualPath != null) {
PrintWriter out=new PrintWriter(opts.residualPath);
for (Instance instance : instances) {
double pred=regressor.regress(instance);
out.println(instance.getTarget() - pred);
}
out.flush();
out.close();
}
break;
case CLASSIFICATION:
Classifier classifier=(Classifier)predictor;
double error=Evaluator.evalError(classifier,instances);
System.out.println(""String_Node_Str"" + (error * 100) + ""String_Node_Str"");
if (opts.predictionPath != null) {
if (opts.prob) {
PrintWriter out=new PrintWriter(opts.predictionPath);
ProbabilisticClassifier probClassifier=(ProbabilisticClassifier)predictor;
for (Instance instance : instances) {
double[] pred=probClassifier.predictProbabilities(instance);
out.println(Arrays.toString(pred));
}
out.flush();
out.close();
}
 else {
PrintWriter out=new PrintWriter(opts.predictionPath);
for (Instance instance : instances) {
double pred=classifier.classify(instance);
out.println((int)pred);
}
out.flush();
out.close();
}
}
if (opts.residualPath != null) {
if (predictor instanceof Regressor) {
PrintWriter out=new PrintWriter(opts.residualPath);
Regressor regressingClassifier=(Regressor)predictor;
for (Instance instance : instances) {
double pred=regressingClassifier.regress(instance);
int cls=(int)instance.getTarget();
out.println(OptimUtils.getPseudoResidual(pred,cls));
}
out.flush();
out.close();
}
 else {
System.out.println(""String_Node_Str"");
}
}
break;
default :
break;
}
}",0.9950998869204674
117188,"/** 
 * <p> <pre> Usage: mltk.predictor.gam.GA2MLearner -t	train set path -i	input model path -I	list of pairwise interactions path -m	maximum number of iterations [-g]	task between classification (c) and regression (r) (default: r) [-v]	valid set path [-e]	evaluation metric (default: default metric of task) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-b]	bagging iterations (default: 100) [-s]	seed of the random number generator (default: 0) [-l]	learning rate (default: 0.01) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(GA2MLearner.class,opts);
  Task task=null;
  Metric metric=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
    if (opts.metric == null) {
      metric=task.getDefaultMetric();
    }
 else {
      metric=MetricFactory.getMetric(opts.metric);
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  List<IntPair> terms=new ArrayList<>();
  BufferedReader br=new BufferedReader(new FileReader(opts.interactionsPath));
  for (; ; ) {
    String line=br.readLine();
    if (line == null) {
      break;
    }
    String[] data=line.split(""String_Node_Str"");
    IntPair term=new IntPair(Integer.parseInt(data[0]),Integer.parseInt(data[1]));
    terms.add(term);
  }
  br.close();
  GAM gam=PredictorReader.read(opts.inputModelPath,GAM.class);
  GA2MLearner learner=new GA2MLearner();
  learner.setBaggingIters(opts.baggingIters);
  learner.setGAM(gam);
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setTask(task);
  learner.setMetric(metric);
  learner.setLearningRate(opts.learningRate);
  learner.setVerbose(opts.verbose);
  if (opts.validPath != null) {
    Instances validSet=InstancesReader.read(opts.attPath,opts.validPath);
    learner.setValidSet(validSet);
  }
  long start=System.currentTimeMillis();
  learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}","/** 
 * <p> <pre> Usage: mltk.predictor.gam.GA2MLearner -t	train set path -i	input model path -I	list of pairwise interactions path -m	maximum number of iterations [-g]	task between classification (c) and regression (r) (default: r) [-v]	valid set path [-e]	evaluation metric (default: default metric of task) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-b]	bagging iterations (default: 100) [-s]	seed of the random number generator (default: 0) [-l]	learning rate (default: 0.01) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(GA2MLearner.class,opts);
  Task task=null;
  Metric metric=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
    if (opts.metric == null) {
      metric=task.getDefaultMetric();
    }
 else {
      metric=MetricFactory.getMetric(opts.metric);
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  List<IntPair> terms=new ArrayList<>();
  BufferedReader br=new BufferedReader(new FileReader(opts.interactionsPath));
  for (; ; ) {
    String line=br.readLine();
    if (line == null) {
      break;
    }
    String[] data=line.split(""String_Node_Str"");
    IntPair term=new IntPair(Integer.parseInt(data[0]),Integer.parseInt(data[1]));
    terms.add(term);
  }
  br.close();
  GAM gam=PredictorReader.read(opts.inputModelPath,GAM.class);
  GA2MLearner learner=new GA2MLearner();
  learner.setBaggingIters(opts.baggingIters);
  learner.setGAM(gam);
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setTask(task);
  learner.setMetric(metric);
  learner.setPairs(terms);
  learner.setLearningRate(opts.learningRate);
  learner.setVerbose(opts.verbose);
  if (opts.validPath != null) {
    Instances validSet=InstancesReader.read(opts.attPath,opts.validPath);
    learner.setValidSet(validSet);
  }
  long start=System.currentTimeMillis();
  learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}",0.9942784488239034
117189,"/** 
 * Randomly permutes this permutation.
 * @return this permutation.
 */
public Permutation permute(){
  for (int i=0; i < a.length; i++) {
    int idx=Random.getInstance().nextInt(i + 1);
    int t=a[idx];
    a[idx]=a[i];
    a[i]=t;
  }
  return this;
}","/** 
 * Randomly permutes this permutation.
 * @return this permutation.
 */
public Permutation permute(){
  for (int i=a.length - 1; i > 0; i++) {
    int idx=Random.getInstance().nextInt(i + 1);
    int t=a[idx];
    a[idx]=a[i];
    a[i]=t;
  }
  return this;
}",0.9389312977099236
117190,"@Override public int compare(DoublePair o1,DoublePair o2){
  int cmp=Double.compare(o1.v1,o2.v1);
  if (cmp == 0) {
    cmp=Double.compare(o2.v2,o2.v2);
  }
  return cmp;
}","@Override public int compare(DoublePair o1,DoublePair o2){
  int cmp=Double.compare(o1.v1,o2.v1);
  if (cmp == 0) {
    cmp=Double.compare(o1.v2,o2.v2);
  }
  return cmp;
}",0.994186046511628
117191,"protected void doOnePassBinomial(int[][] indices,double[][] values,double[] theta,double[] y,final double tl1,final double tl2,double[] w,double[] pTrain,double[] rTrain){
  for (int j=0; j < indices.length; j++) {
    if (Math.abs(theta[j]) <= MathUtils.EPSILON) {
      continue;
    }
    double eta=0;
    int[] index=indices[j];
    double[] value=values[j];
    for (int i=0; i < index.length; i++) {
      int idx=index[i];
      eta+=rTrain[idx] * value[i];
    }
    double newW=w[j] * theta[j] + eta;
    double t=tl1;
    if (newW > t) {
      newW-=t;
    }
 else     if (newW < -t) {
      newW+=t;
    }
 else {
      newW=0;
    }
    newW/=(theta[j] + tl2);
    double delta=newW - w[j];
    w[j]=newW;
    for (int i=0; i < index.length; i++) {
      int idx=index[i];
      pTrain[idx]+=delta * value[i];
      rTrain[idx]=OptimUtils.getPseudoResidual(pTrain[idx],y[idx]);
    }
  }
}","protected void doOnePassBinomial(int[][] indices,double[][] values,double[] theta,double[] y,final double tl1,final double tl2,double[] w,double[] pTrain,double[] rTrain){
  for (int j=0; j < indices.length; j++) {
    if (Math.abs(theta[j]) <= MathUtils.EPSILON) {
      continue;
    }
    double eta=0;
    int[] index=indices[j];
    double[] value=values[j];
    for (int i=0; i < index.length; i++) {
      int idx=index[i];
      eta+=rTrain[idx] * value[i];
    }
    double newW=w[j] * theta[j] + eta;
    if (newW > tl1) {
      newW-=tl1;
    }
 else     if (newW < -tl1) {
      newW+=tl1;
    }
 else {
      newW=0;
    }
    newW/=(theta[j] + tl2);
    double delta=newW - w[j];
    w[j]=newW;
    for (int i=0; i < index.length; i++) {
      int idx=index[i];
      pTrain[idx]+=delta * value[i];
      rTrain[idx]=OptimUtils.getPseudoResidual(pTrain[idx],y[idx]);
    }
  }
}",0.975473801560758
117192,"/** 
 * Constructor.
 * @param obj the object.
 */
public CmdLineParser(Class<?> clazz,Object obj){
  this.name=clazz.getCanonicalName();
  this.obj=obj;
  argList=new ArrayList<>();
  fieldList=new ArrayList<>();
  processFields(obj.getClass().getFields());
  processFields(obj.getClass().getDeclaredFields());
}","/** 
 * Constructor.
 * @param clazz the class object.
 * @param obj the object.
 */
public CmdLineParser(Class<?> clazz,Object obj){
  this.name=clazz.getCanonicalName();
  this.obj=obj;
  argList=new ArrayList<>();
  fieldList=new ArrayList<>();
  processFields(obj.getClass().getFields());
  processFields(obj.getClass().getDeclaredFields());
}",0.9484848484848484
117193,"/** 
 * Returns a bootstrap sample with out-of-bag samples.
 * @param instances the data set.
 * @param bagIndices
 * @param oobIndices
 */
public static void createBootstrapSample(Instances instances,Map<Integer,Integer> bagIndices,List<Integer> oobIndices){
  Random rand=Random.getInstance();
  for (; ; ) {
    bagIndices.clear();
    oobIndices.clear();
    for (int i=0; i < instances.size(); i++) {
      int idx=rand.nextInt(instances.size());
      if (!bagIndices.containsKey(idx)) {
        bagIndices.put(idx,0);
      }
      bagIndices.put(idx,bagIndices.get(idx) + 1);
    }
    for (int i=0; i < instances.size(); i++) {
      if (!bagIndices.containsKey(i)) {
        oobIndices.add(i);
      }
    }
    if (oobIndices.size() > 0) {
      break;
    }
  }
}","/** 
 * Returns a bootstrap sample with out-of-bag samples.
 * @param instances the data set.
 * @param bagIndices the index of sampled instances with weights.
 * @param oobIndices the out-of-bag indexes.
 */
public static void createBootstrapSample(Instances instances,Map<Integer,Integer> bagIndices,List<Integer> oobIndices){
  Random rand=Random.getInstance();
  for (; ; ) {
    bagIndices.clear();
    oobIndices.clear();
    for (int i=0; i < instances.size(); i++) {
      int idx=rand.nextInt(instances.size());
      if (!bagIndices.containsKey(idx)) {
        bagIndices.put(idx,0);
      }
      bagIndices.put(idx,bagIndices.get(idx) + 1);
    }
    for (int i=0; i < instances.size(); i++) {
      if (!bagIndices.containsKey(i)) {
        oobIndices.add(i);
      }
    }
    if (oobIndices.size() > 0) {
      break;
    }
  }
}",0.9573810994441012
117194,"/** 
 * <p> <pre> Usage: Discretizer -r	attribute file path -i	input dataset path -o	output dataset path [-d]	discretized attribute file path [-m]	output attribute file path [-n]	maximum num of bins (default: 256) [-t]	training file path </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options app=new Options();
  CmdLineParser parser=new CmdLineParser(Discretizer.class,app);
  try {
    parser.parse(args);
    if (app.maxNumBins < 0) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  List<Attribute> attributes=null;
  if (app.trainPath != null) {
    Instances trainSet=InstancesReader.read(app.attPath,app.trainPath);
    attributes=trainSet.getAttributes();
    for (int i=0; i < attributes.size(); i++) {
      Attribute attribute=attributes.get(i);
      if (attribute.getType() == Type.NUMERIC) {
        Discretizer.discretize(trainSet,i,app.maxNumBins);
      }
    }
  }
 else   if (app.disAttPath != null) {
    attributes=AttributesReader.read(app.disAttPath).v1;
  }
 else {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(app.attPath,app.inputPath);
  List<Attribute> attrs=instances.getAttributes();
  for (int i=0; i < attrs.size(); i++) {
    Attribute attr=attrs.get(i);
    if (attr.getType() == Type.NUMERIC) {
      BinnedAttribute binnedAttr=(BinnedAttribute)attributes.get(i);
      Discretizer.discretize(instances,i,binnedAttr.getBins());
    }
  }
  if (app.outputAttPath != null) {
    InstancesWriter.write(instances,app.outputAttPath,app.outputPath);
  }
 else {
    InstancesWriter.write(instances,app.outputPath);
  }
}","/** 
 * <p> <pre> Usage: mltk.core.processor.Discretizer -i	input dataset path -o	output dataset path [-r]	attribute file path [-t]	training file path [-d]	discretized attribute file path [-m]	output attribute file path [-n]	maximum num of bins (default: 256) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options app=new Options();
  CmdLineParser parser=new CmdLineParser(Discretizer.class,app);
  try {
    parser.parse(args);
    if (app.maxNumBins < 0) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  List<Attribute> attributes=null;
  if (app.trainPath != null) {
    Instances trainSet=InstancesReader.read(app.attPath,app.trainPath);
    attributes=trainSet.getAttributes();
    for (int i=0; i < attributes.size(); i++) {
      Attribute attribute=attributes.get(i);
      if (attribute.getType() == Type.NUMERIC) {
        Discretizer.discretize(trainSet,i,app.maxNumBins);
      }
    }
  }
 else   if (app.disAttPath != null) {
    attributes=AttributesReader.read(app.disAttPath).v1;
  }
 else {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(app.attPath,app.inputPath);
  List<Attribute> attrs=instances.getAttributes();
  for (int i=0; i < attrs.size(); i++) {
    Attribute attr=attrs.get(i);
    if (attr.getType() == Type.NUMERIC) {
      BinnedAttribute binnedAttr=(BinnedAttribute)attributes.get(i);
      Discretizer.discretize(instances,i,binnedAttr.getBins());
    }
  }
  if (app.outputAttPath != null) {
    InstancesWriter.write(instances,app.outputAttPath,app.outputPath);
  }
 else {
    InstancesWriter.write(instances,app.outputPath);
  }
}",0.9593767390094602
117195,"/** 
 * <p> <pre> Usage: mltk.core.processor.InstancesSplitter -r	attribute file path -i	input dataset path -o	output directory path [-c]	splitting mode:parameter. Splitting mode can be split (s) and cross validation (c) (default: c:5) [-s]	seed of the random number generator (default: 0) </pre> </p>
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(InstancesSplitter.class,opts);
  String[] data=null;
  try {
    parser.parse(args);
    data=opts.crossValidationMode.split(""String_Node_Str"");
    if (data.length < 2) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances instances=InstancesReader.read(opts.attPath,opts.inputPath);
  File attFile=new File(opts.attPath);
  String prefix=attFile.getName().split(""String_Node_Str"")[0];
  File dir=new File(opts.outputDirPath);
  if (!dir.exists()) {
    dir.mkdir();
  }
switch (data[0]) {
case ""String_Node_Str"":
    int k=Integer.parseInt(data[1]);
  if (data.length == 2) {
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,k);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
 else {
    double ratio=Double.parseDouble(data[2]);
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,k,ratio);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][2],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
break;
case ""String_Node_Str"":
double ratio=Double.parseDouble(data[1]);
Instances[] datasets=InstancesSplitter.split(instances,ratio);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
break;
default :
break;
}
}","/** 
 * Splits a dataset. <pre> Usage: mltk.core.processor.InstancesSplitter -r	attribute file path -i	input dataset path -o	output directory path [-c]	splitting mode:parameter. Splitting mode can be split (s) and cross validation (c) (default: c:5) [-s]	seed of the random number generator (default: 0) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(InstancesSplitter.class,opts);
  String[] data=null;
  try {
    parser.parse(args);
    data=opts.crossValidationMode.split(""String_Node_Str"");
    if (data.length < 2) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances instances=InstancesReader.read(opts.attPath,opts.inputPath);
  File attFile=new File(opts.attPath);
  String prefix=attFile.getName().split(""String_Node_Str"")[0];
  File dir=new File(opts.outputDirPath);
  if (!dir.exists()) {
    dir.mkdir();
  }
switch (data[0]) {
case ""String_Node_Str"":
    int k=Integer.parseInt(data[1]);
  if (data.length == 2) {
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,k);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
 else {
    double ratio=Double.parseDouble(data[2]);
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,k,ratio);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][2],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
break;
case ""String_Node_Str"":
double ratio=Double.parseDouble(data[1]);
Instances[] datasets=InstancesSplitter.split(instances,ratio);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
break;
default :
break;
}
}",0.99085734000345
117196,"/** 
 * Selects features using backward elimination in Additive Groves.
 * @param trainSet the training set.
 * @param validSet the validation set.
 * @param learner the learner to use.
 * @param baggingIters the number of bagging iterations.
 * @param numTrees the number of trees in a grove.
 * @param alpha the alpha.
 * @param numIters the number of iterations to estimate the mean and std for full complexity models.
 * @return the list of selected features and <mean, std> pair for full complexity models.
 */
public static Pair<List<Attribute>,DoublePair> select(Instances trainSet,Instances validSet,AdditiveGrovesLearner learner,int baggingIters,int numTrees,double alpha,int numIters){
  List<Attribute> attributes=trainSet.getAttributes();
  List<Attribute> selected=new ArrayList<>(attributes);
  DoublePair perf=null;
  for (; ; ) {
    if (selected.size() == 0) {
      break;
    }
    boolean changed=false;
    trainSet.setAttributes(selected);
    perf=evaluateModel(trainSet,validSet,learner,baggingIters,numTrees,alpha,numIters);
    System.out.println(""String_Node_Str"" + perf.v1 + ""String_Node_Str""+ perf.v2);
    int i;
    for (i=0; i < selected.size(); ) {
      List<Attribute> attList=new ArrayList<>(selected);
      Attribute attr=attList.get(i);
      System.out.println(""String_Node_Str"" + attr.getName());
      attList.remove(i);
      trainSet.setAttributes(attList);
      Regressor regressor=learner.runLayeredTraining(trainSet,baggingIters,numTrees,alpha);
      double rmse=Evaluator.evalRMSE(regressor,validSet);
      System.out.println(""String_Node_Str"" + attr.getName() + ""String_Node_Str""+ rmse);
      if (perf.v1 - perf.v2 * 3 <= rmse && rmse <= perf.v1 + perf.v2 * 3) {
        selected.remove(i);
        changed=true;
        System.out.println(""String_Node_Str"" + attr.getName());
      }
 else {
        i++;
      }
    }
    if (!changed) {
      break;
    }
  }
  trainSet.setAttributes(attributes);
  return new Pair<List<Attribute>,DoublePair>(selected,perf);
}","/** 
 * Selects features using backward elimination in Additive Groves.
 * @param trainSet the training set.
 * @param validSet the validation set.
 * @param learner the learner to use.
 * @param baggingIters the number of bagging iterations.
 * @param numTrees the number of trees in a grove.
 * @param alpha the alpha.
 * @param numIters the number of iterations to estimate the mean and std for full complexity models.
 * @return the list of selected features and $lt;mean, std$gt; pair for full complexity models.
 */
public static Pair<List<Attribute>,DoublePair> select(Instances trainSet,Instances validSet,AdditiveGrovesLearner learner,int baggingIters,int numTrees,double alpha,int numIters){
  List<Attribute> attributes=trainSet.getAttributes();
  List<Attribute> selected=new ArrayList<>(attributes);
  DoublePair perf=null;
  for (; ; ) {
    if (selected.size() == 0) {
      break;
    }
    boolean changed=false;
    trainSet.setAttributes(selected);
    perf=evaluateModel(trainSet,validSet,learner,baggingIters,numTrees,alpha,numIters);
    System.out.println(""String_Node_Str"" + perf.v1 + ""String_Node_Str""+ perf.v2);
    int i;
    for (i=0; i < selected.size(); ) {
      List<Attribute> attList=new ArrayList<>(selected);
      Attribute attr=attList.get(i);
      System.out.println(""String_Node_Str"" + attr.getName());
      attList.remove(i);
      trainSet.setAttributes(attList);
      Regressor regressor=learner.runLayeredTraining(trainSet,baggingIters,numTrees,alpha);
      double rmse=Evaluator.evalRMSE(regressor,validSet);
      System.out.println(""String_Node_Str"" + attr.getName() + ""String_Node_Str""+ rmse);
      if (perf.v1 - perf.v2 * 3 <= rmse && rmse <= perf.v1 + perf.v2 * 3) {
        selected.remove(i);
        changed=true;
        System.out.println(""String_Node_Str"" + attr.getName());
      }
 else {
        i++;
      }
    }
    if (!changed) {
      break;
    }
  }
  trainSet.setAttributes(attributes);
  return new Pair<List<Attribute>,DoublePair>(selected,perf);
}",0.9975247524752476
117197,"/** 
 * <p> <pre> Usage: Evaluator -d	data set path -m	model path [-r]	attribute file path [-e]	AUC (a), Error (c), RMSE (r) (default: r) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Evaluator.class,opts);
  try {
    parser.parse(args);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(opts.attPath,opts.dataPath);
  mltk.predictor.Predictor predictor=PredictorReader.read(opts.modelPath);
switch (opts.task) {
case ""String_Node_Str"":
    ProbabilisticClassifier probClassifier=(ProbabilisticClassifier)predictor;
  double auc=Evaluator.evalAreaUnderROC(probClassifier,instances);
System.out.println(""String_Node_Str"" + auc);
break;
case ""String_Node_Str"":
Classifier classifier=(Classifier)predictor;
double error=Evaluator.evalError(classifier,instances);
System.out.println(""String_Node_Str"" + error);
break;
case ""String_Node_Str"":
Regressor regressor=(Regressor)predictor;
double rmse=Evaluator.evalRMSE(regressor,instances);
System.out.println(""String_Node_Str"" + rmse);
break;
default :
break;
}
}","/** 
 * Evaluates a predictor. <pre> Usage: Evaluator -d	data set path -m	model path [-r]	attribute file path [-e]	AUC (a), Error (c), RMSE (r) (default: r) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Evaluator.class,opts);
  try {
    parser.parse(args);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(opts.attPath,opts.dataPath);
  mltk.predictor.Predictor predictor=PredictorReader.read(opts.modelPath);
switch (opts.task) {
case ""String_Node_Str"":
    ProbabilisticClassifier probClassifier=(ProbabilisticClassifier)predictor;
  double auc=Evaluator.evalAreaUnderROC(probClassifier,instances);
System.out.println(""String_Node_Str"" + auc);
break;
case ""String_Node_Str"":
Classifier classifier=(Classifier)predictor;
double error=Evaluator.evalError(classifier,instances);
System.out.println(""String_Node_Str"" + error);
break;
case ""String_Node_Str"":
Regressor regressor=(Regressor)predictor;
double rmse=Evaluator.evalRMSE(regressor,instances);
System.out.println(""String_Node_Str"" + rmse);
break;
default :
break;
}
}",0.98812351543943
117198,"/** 
 * <p> <pre> Usage: mltk.predictor.evaluation.Predictor -d	data set path -m	model path [-r]	attribute file path [-p]	prediction path [-R]	residual path [-g]	task between classification (c) and regression (r) (default: r) [-P]	output probablity (default: false) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Predictor.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(opts.attPath,opts.dataPath);
  mltk.predictor.Predictor predictor=PredictorReader.read(opts.modelPath);
switch (task) {
case REGRESSION:
    Regressor regressor=(Regressor)predictor;
  double rmse=Evaluator.evalRMSE(regressor,instances);
System.out.println(""String_Node_Str"" + rmse);
if (opts.predictionPath != null) {
PrintWriter out=new PrintWriter(opts.predictionPath);
for (Instance instance : instances) {
  double pred=regressor.regress(instance);
  out.println(pred);
}
out.flush();
out.close();
}
if (opts.residualPath != null) {
PrintWriter out=new PrintWriter(opts.residualPath);
for (Instance instance : instances) {
double pred=regressor.regress(instance);
out.println(instance.getTarget() - pred);
}
out.flush();
out.close();
}
break;
case CLASSIFICATION:
Classifier classifier=(Classifier)predictor;
double error=Evaluator.evalError(classifier,instances);
System.out.println(""String_Node_Str"" + (error * 100) + ""String_Node_Str"");
if (opts.predictionPath != null) {
if (opts.prob) {
PrintWriter out=new PrintWriter(opts.predictionPath);
ProbabilisticClassifier probClassifier=(ProbabilisticClassifier)predictor;
for (Instance instance : instances) {
double[] pred=probClassifier.predictProbabilities(instance);
out.println(Arrays.toString(pred));
}
out.flush();
out.close();
}
 else {
PrintWriter out=new PrintWriter(opts.predictionPath);
for (Instance instance : instances) {
double pred=classifier.classify(instance);
out.println((int)pred);
}
out.flush();
out.close();
}
}
if (opts.residualPath != null) {
if (predictor instanceof Regressor) {
PrintWriter out=new PrintWriter(opts.residualPath);
Regressor regressingClassifier=(Regressor)predictor;
for (Instance instance : instances) {
double pred=regressingClassifier.regress(instance);
int cls=(int)instance.getTarget();
out.println(OptimUtils.getPseudoResidual(pred,cls));
}
out.flush();
out.close();
}
 else {
System.out.println(""String_Node_Str"");
}
}
break;
default :
break;
}
}","/** 
 * Makes predictions on a dataset. <pre> Usage: mltk.predictor.evaluation.Predictor -d	data set path -m	model path [-r]	attribute file path [-p]	prediction path [-R]	residual path [-g]	task between classification (c) and regression (r) (default: r) [-P]	output probablity (default: false) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Predictor.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(opts.attPath,opts.dataPath);
  mltk.predictor.Predictor predictor=PredictorReader.read(opts.modelPath);
switch (task) {
case REGRESSION:
    Regressor regressor=(Regressor)predictor;
  double rmse=Evaluator.evalRMSE(regressor,instances);
System.out.println(""String_Node_Str"" + rmse);
if (opts.predictionPath != null) {
PrintWriter out=new PrintWriter(opts.predictionPath);
for (Instance instance : instances) {
  double pred=regressor.regress(instance);
  out.println(pred);
}
out.flush();
out.close();
}
if (opts.residualPath != null) {
PrintWriter out=new PrintWriter(opts.residualPath);
for (Instance instance : instances) {
double pred=regressor.regress(instance);
out.println(instance.getTarget() - pred);
}
out.flush();
out.close();
}
break;
case CLASSIFICATION:
Classifier classifier=(Classifier)predictor;
double error=Evaluator.evalError(classifier,instances);
System.out.println(""String_Node_Str"" + (error * 100) + ""String_Node_Str"");
if (opts.predictionPath != null) {
if (opts.prob) {
PrintWriter out=new PrintWriter(opts.predictionPath);
ProbabilisticClassifier probClassifier=(ProbabilisticClassifier)predictor;
for (Instance instance : instances) {
double[] pred=probClassifier.predictProbabilities(instance);
out.println(Arrays.toString(pred));
}
out.flush();
out.close();
}
 else {
PrintWriter out=new PrintWriter(opts.predictionPath);
for (Instance instance : instances) {
double pred=classifier.classify(instance);
out.println((int)pred);
}
out.flush();
out.close();
}
}
if (opts.residualPath != null) {
if (predictor instanceof Regressor) {
PrintWriter out=new PrintWriter(opts.residualPath);
Regressor regressingClassifier=(Regressor)predictor;
for (Instance instance : instances) {
double pred=regressingClassifier.regress(instance);
int cls=(int)instance.getTarget();
out.println(OptimUtils.getPseudoResidual(pred,cls));
}
out.flush();
out.close();
}
 else {
System.out.println(""String_Node_Str"");
}
}
break;
default :
break;
}
}",0.992717086834734
117199,"/** 
 * <p> <pre> Usage: mltk.predictor.gam.GA2MLearner -t	train set path -i	input model path -I	list of pairwise interactions path -m	maximum number of iterations [-g]	task between classification (c) and regression (r) (default: r) [-v]	valid set path [-e]	evaluation metric (default: default metric of task) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-b]	bagging iterations (default: 100) [-s]	seed of the random number generator (default: 0) [-l]	learning rate (default: 0.01) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(GA2MLearner.class,opts);
  Task task=null;
  Metric metric=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
    if (opts.metric == null) {
      metric=task.getDefaultMetric();
    }
 else {
      metric=MetricFactory.getMetric(opts.metric);
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  List<IntPair> terms=new ArrayList<>();
  BufferedReader br=new BufferedReader(new FileReader(opts.interactionsPath));
  for (; ; ) {
    String line=br.readLine();
    if (line == null) {
      break;
    }
    String[] data=line.split(""String_Node_Str"");
    IntPair term=new IntPair(Integer.parseInt(data[0]),Integer.parseInt(data[1]));
    terms.add(term);
  }
  br.close();
  GAM gam=PredictorReader.read(opts.inputModelPath,GAM.class);
  GA2MLearner learner=new GA2MLearner();
  learner.setBaggingIters(opts.baggingIters);
  learner.setGAM(gam);
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setTask(task);
  learner.setMetric(metric);
  learner.setPairs(terms);
  learner.setLearningRate(opts.learningRate);
  learner.setVerbose(opts.verbose);
  if (opts.validPath != null) {
    Instances validSet=InstancesReader.read(opts.attPath,opts.validPath);
    learner.setValidSet(validSet);
  }
  long start=System.currentTimeMillis();
  learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}","/** 
 * Trains a GA2M. <pre> Usage: mltk.predictor.gam.GA2MLearner -t	train set path -i	input model path -I	list of pairwise interactions path -m	maximum number of iterations [-g]	task between classification (c) and regression (r) (default: r) [-v]	valid set path [-e]	evaluation metric (default: default metric of task) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-b]	bagging iterations (default: 100) [-s]	seed of the random number generator (default: 0) [-l]	learning rate (default: 0.01) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(GA2MLearner.class,opts);
  Task task=null;
  Metric metric=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
    if (opts.metric == null) {
      metric=task.getDefaultMetric();
    }
 else {
      metric=MetricFactory.getMetric(opts.metric);
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  List<IntPair> terms=new ArrayList<>();
  BufferedReader br=new BufferedReader(new FileReader(opts.interactionsPath));
  for (; ; ) {
    String line=br.readLine();
    if (line == null) {
      break;
    }
    String[] data=line.split(""String_Node_Str"");
    IntPair term=new IntPair(Integer.parseInt(data[0]),Integer.parseInt(data[1]));
    terms.add(term);
  }
  br.close();
  GAM gam=PredictorReader.read(opts.inputModelPath,GAM.class);
  GA2MLearner learner=new GA2MLearner();
  learner.setBaggingIters(opts.baggingIters);
  learner.setGAM(gam);
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setTask(task);
  learner.setMetric(metric);
  learner.setPairs(terms);
  learner.setLearningRate(opts.learningRate);
  learner.setVerbose(opts.verbose);
  if (opts.validPath != null) {
    Instances validSet=InstancesReader.read(opts.attPath,opts.validPath);
    learner.setValidSet(validSet);
  }
  long start=System.currentTimeMillis();
  learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}",0.9953703703703703
117200,"/** 
 * <p> <pre> Usage: mltk.predictor.gam.GAMLearner -t	train set path -m	maximum number of iterations [-g]	task between classification (c) and regression (r) (default: r) [-v]	valid set path [-e]	evaluation metric (default: default metric of task) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-b]	base learner (default: tr:3:100) [-s]	seed of the random number generator (default: 0) [-l]	learning rate (default: 0.01) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(GAMLearner.class,opts);
  Task task=null;
  Metric metric=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
    if (opts.metric == null) {
      metric=task.getDefaultMetric();
    }
 else {
      metric=MetricFactory.getMetric(opts.metric);
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  GAMLearner learner=new GAMLearner();
  learner.setBaseLearner(opts.baseLearner);
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setLearningRate(opts.learningRate);
  learner.setTask(task);
  learner.setMetric(metric);
  learner.setVerbose(opts.verbose);
  if (opts.validPath != null) {
    Instances validSet=InstancesReader.read(opts.attPath,opts.validPath);
    learner.setValidSet(validSet);
  }
  long start=System.currentTimeMillis();
  GAM gam=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}","/** 
 * Trains a GAM. <pre> Usage: mltk.predictor.gam.GAMLearner -t	train set path -m	maximum number of iterations [-g]	task between classification (c) and regression (r) (default: r) [-v]	valid set path [-e]	evaluation metric (default: default metric of task) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-b]	base learner (default: tr:3:100) [-s]	seed of the random number generator (default: 0) [-l]	learning rate (default: 0.01) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(GAMLearner.class,opts);
  Task task=null;
  Metric metric=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
    if (opts.metric == null) {
      metric=task.getDefaultMetric();
    }
 else {
      metric=MetricFactory.getMetric(opts.metric);
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  GAMLearner learner=new GAMLearner();
  learner.setBaseLearner(opts.baseLearner);
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setLearningRate(opts.learningRate);
  learner.setTask(task);
  learner.setMetric(metric);
  learner.setVerbose(opts.verbose);
  if (opts.validPath != null) {
    Instances validSet=InstancesReader.read(opts.attPath,opts.validPath);
    learner.setValidSet(validSet);
  }
  long start=System.currentTimeMillis();
  GAM gam=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}",0.9942481511914544
117201,"/** 
 * Builds a classifier.
 * @param trainSet the training set.
 * @param maxNumIters the maximum number of iterations.
 * @param numKnots the number of knots.
 * @param lambda the lambda.
 * @param alpha the alpha.
 * @param fitIntercept whether the intercept is included.
 * @return a classifier.
 */
public GAM buildClassifier(Instances trainSet,int maxNumIters,int numKnots,double lambda,double alpha){
  return buildClassifier(trainSet,isSparse(trainSet),maxNumIters,numKnots,lambda,alpha);
}","/** 
 * Builds a classifier.
 * @param trainSet the training set.
 * @param maxNumIters the maximum number of iterations.
 * @param numKnots the number of knots.
 * @param lambda the lambda.
 * @param alpha the alpha.
 * @return a classifier.
 */
public GAM buildClassifier(Instances trainSet,int maxNumIters,int numKnots,double lambda,double alpha){
  return buildClassifier(trainSet,isSparse(trainSet),maxNumIters,numKnots,lambda,alpha);
}",0.9382978723404256
117202,"/** 
 * <p> <pre> Usage: mltk.predictor.gam.SPLAMLearner -t	train set path [-g]	task between classification (c) and regression (r) (default: r) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-d]	number of knots (default: 10) [-m]	maximum number of iterations (default: 0) [-l]	lambda (default: 0) [-a]	alpha (default: 1, i.e., SPAM model) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(SPLAMLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
    if (opts.numKnots < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  SPLAMLearner learner=new SPLAMLearner();
  learner.setNumKnots(opts.numKnots);
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setLambda(opts.lambda);
  learner.setAlpha(opts.alpha);
  learner.setTask(task);
  learner.setVerbose(opts.verbose);
  long start=System.currentTimeMillis();
  GAM gam=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}","/** 
 * Trains a SPLAM. <pre> Usage: mltk.predictor.gam.SPLAMLearner -t	train set path [-g]	task between classification (c) and regression (r) (default: r) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-d]	number of knots (default: 10) [-m]	maximum number of iterations (default: 0) [-l]	lambda (default: 0) [-a]	alpha (default: 1, i.e., SPAM model) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(SPLAMLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
    if (opts.numKnots < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  SPLAMLearner learner=new SPLAMLearner();
  learner.setNumKnots(opts.numKnots);
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setLambda(opts.lambda);
  learner.setAlpha(opts.alpha);
  learner.setTask(task);
  learner.setVerbose(opts.verbose);
  long start=System.currentTimeMillis();
  GAM gam=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}",0.9922218464660127
117203,"/** 
 * <p> <pre> Usage: mltk.predictor.gam.ScorecardModelLearner -t	train set path -m	maximum number of iterations [-g]	task between classification (c) and regression (r) (default: r) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-l]	lambda (default: 0) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(ScorecardModelLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  ScorecardModelLearner learner=new ScorecardModelLearner();
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setLambda(opts.lambda);
  learner.setTask(task);
  learner.setVerbose(opts.verbose);
  long start=System.currentTimeMillis();
  GAM gam=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}","/** 
 * Trains a scorecard model. <pre> Usage: mltk.predictor.gam.ScorecardModelLearner -t	train set path -m	maximum number of iterations [-g]	task between classification (c) and regression (r) (default: r) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-l]	lambda (default: 0) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(ScorecardModelLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  ScorecardModelLearner learner=new ScorecardModelLearner();
  learner.setMaxNumIters(opts.maxNumIters);
  learner.setLambda(opts.lambda);
  learner.setTask(task);
  learner.setVerbose(opts.verbose);
  long start=System.currentTimeMillis();
  GAM gam=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}",0.9869203329369798
117204,"/** 
 * <p> <pre> Usage: mltk.predictor.gam.interaction.FAST -d	dataset path -R	residual path -o	output path [-r]	attribute file path [-b]	number of bins (default: 256) [-p]	number of threads (default: 1) </pre> </p>
 * @param args the command line arguments
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(FAST.class,opts);
  try {
    parser.parse(args);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(opts.attPath,opts.datasetPath);
  System.out.println(""String_Node_Str"");
  BufferedReader br=new BufferedReader(new FileReader(opts.residualPath),65535);
  for (int i=0; i < instances.size(); i++) {
    String line=br.readLine();
    double residual=Double.parseDouble(line);
    Instance instance=instances.get(i);
    instance.setTarget(residual);
  }
  br.close();
  List<Attribute> attributes=instances.getAttributes();
  System.out.println(""String_Node_Str"");
  for (int i=0; i < attributes.size(); i++) {
    if (attributes.get(i).getType() == Type.NUMERIC) {
      Discretizer.discretize(instances,i,opts.maxNumBins);
    }
  }
  System.out.println(""String_Node_Str"");
  List<Element<IntPair>> pairs=new ArrayList<>();
  for (int i=0; i < attributes.size(); i++) {
    for (int j=i + 1; j < attributes.size(); j++) {
      pairs.add(new Element<IntPair>(new IntPair(i,j),0.0));
    }
  }
  System.out.println(""String_Node_Str"");
  FASTThread[] threads=new FASTThread[opts.numThreads];
  long start=System.currentTimeMillis();
  for (int i=0; i < threads.length; i++) {
    threads[i]=new FASTThread(instances);
  }
  for (int i=0; i < pairs.size(); i++) {
    threads[i % threads.length].add(pairs.get(i));
  }
  for (int i=0; i < threads.length; i++) {
    threads[i].start();
  }
  System.out.println(""String_Node_Str"");
  for (int i=0; i < threads.length; i++) {
    threads[i].join();
  }
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  Collections.sort(pairs);
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  PrintWriter out=new PrintWriter(opts.outputPath);
  for (int i=0; i < pairs.size(); i++) {
    Element<IntPair> pair=pairs.get(i);
    out.println(pair.element.v1 + ""String_Node_Str"" + pair.element.v2+ ""String_Node_Str""+ pair.weight);
  }
  out.flush();
  out.close();
}","/** 
 * Ranks pairwise interactions using FAST. <pre> Usage: mltk.predictor.gam.interaction.FAST -d	dataset path -R	residual path -o	output path [-r]	attribute file path [-b]	number of bins (default: 256) [-p]	number of threads (default: 1) </pre>
 * @param args the command line arguments
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(FAST.class,opts);
  try {
    parser.parse(args);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances instances=InstancesReader.read(opts.attPath,opts.datasetPath);
  System.out.println(""String_Node_Str"");
  BufferedReader br=new BufferedReader(new FileReader(opts.residualPath),65535);
  for (int i=0; i < instances.size(); i++) {
    String line=br.readLine();
    double residual=Double.parseDouble(line);
    Instance instance=instances.get(i);
    instance.setTarget(residual);
  }
  br.close();
  List<Attribute> attributes=instances.getAttributes();
  System.out.println(""String_Node_Str"");
  for (int i=0; i < attributes.size(); i++) {
    if (attributes.get(i).getType() == Type.NUMERIC) {
      Discretizer.discretize(instances,i,opts.maxNumBins);
    }
  }
  System.out.println(""String_Node_Str"");
  List<Element<IntPair>> pairs=new ArrayList<>();
  for (int i=0; i < attributes.size(); i++) {
    for (int j=i + 1; j < attributes.size(); j++) {
      pairs.add(new Element<IntPair>(new IntPair(i,j),0.0));
    }
  }
  System.out.println(""String_Node_Str"");
  FASTThread[] threads=new FASTThread[opts.numThreads];
  long start=System.currentTimeMillis();
  for (int i=0; i < threads.length; i++) {
    threads[i]=new FASTThread(instances);
  }
  for (int i=0; i < pairs.size(); i++) {
    threads[i % threads.length].add(pairs.get(i));
  }
  for (int i=0; i < threads.length; i++) {
    threads[i].start();
  }
  System.out.println(""String_Node_Str"");
  for (int i=0; i < threads.length; i++) {
    threads[i].join();
  }
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  Collections.sort(pairs);
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  PrintWriter out=new PrintWriter(opts.outputPath);
  for (int i=0; i < pairs.size(); i++) {
    Element<IntPair> pair=pairs.get(i);
    out.println(pair.element.v1 + ""String_Node_Str"" + pair.element.v2+ ""String_Node_Str""+ pair.weight);
  }
  out.flush();
  out.close();
}",0.9904452124415531
117205,"/** 
 * <p> <pre> Usage: mltk.predictor.gam.tool.Diagnostics -d	dataset path -i	input model path -o	output path [-r]	attribute file path </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Diagnostics.class,opts);
  try {
    parser.parse(args);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances dataset=InstancesReader.read(opts.attPath,opts.datasetPath);
  GAM gam=PredictorReader.read(opts.inputModelPath,GAM.class);
  List<Element<int[]>> list=Diagnostics.diagnose(gam,dataset);
  Collections.sort(list);
  Collections.reverse(list);
  PrintWriter out=new PrintWriter(opts.outputPath);
  for (  Element<int[]> element : list) {
    int[] term=element.element;
    double weight=element.weight;
    out.println(Arrays.toString(term) + ""String_Node_Str"" + weight);
  }
  out.flush();
  out.close();
}","/** 
 * Generates term importance for GAMs. <pre> Usage: mltk.predictor.gam.tool.Diagnostics -d	dataset path -i	input model path -o	output path [-r]	attribute file path </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Diagnostics.class,opts);
  try {
    parser.parse(args);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances dataset=InstancesReader.read(opts.attPath,opts.datasetPath);
  GAM gam=PredictorReader.read(opts.inputModelPath,GAM.class);
  List<Element<int[]>> list=Diagnostics.diagnose(gam,dataset);
  Collections.sort(list);
  Collections.reverse(list);
  PrintWriter out=new PrintWriter(opts.outputPath);
  for (  Element<int[]> element : list) {
    int[] term=element.element;
    double weight=element.weight;
    out.println(Arrays.toString(term) + ""String_Node_Str"" + weight);
  }
  out.flush();
  out.close();
}",0.9790754257907542
117206,"/** 
 * <p> <pre> Usage: mltk.predictor.gam.tool.Visualizer -r	attribute file path -d	dataset path -i	input model path -o	output directory path [-t]	output terminal (default: png) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Visualizer.class,opts);
  try {
    parser.parse(args);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances dataset=InstancesReader.read(opts.attPath,opts.datasetPath);
  GAM gam=PredictorReader.read(opts.inputModelPath,GAM.class);
  Visualizer.generateGnuplotScripts(gam,dataset,opts.dirPath,Terminal.getEnum(opts.terminal));
}","/** 
 * Generates scripts for visualizing GAMs. <pre> Usage: mltk.predictor.gam.tool.Visualizer -r	attribute file path -d	dataset path -i	input model path -o	output directory path [-t]	output terminal (default: png) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(Visualizer.class,opts);
  try {
    parser.parse(args);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances dataset=InstancesReader.read(opts.attPath,opts.datasetPath);
  GAM gam=PredictorReader.read(opts.inputModelPath,GAM.class);
  Visualizer.generateGnuplotScripts(gam,dataset,opts.dirPath,Terminal.getEnum(opts.terminal));
}",0.9700827498408656
117207,"@Override public void read(BufferedReader in) throws Exception {
  in.readLine();
  link=LinkFunction.get(in.readLine().split(""String_Node_Str"")[1]);
  intercept=ArrayUtils.parseDoubleArray(in.readLine());
  int p=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
  w=new double[intercept.length][p];
  for (int j=0; j < p; j++) {
    String[] data=in.readLine().split(""String_Node_Str"");
    for (int i=0; i < w.length; i++) {
      w[i][j]=Double.parseDouble(data[i]);
    }
  }
}","@Override public void read(BufferedReader in) throws Exception {
  link=LinkFunction.get(in.readLine().split(""String_Node_Str"")[1]);
  in.readLine();
  intercept=ArrayUtils.parseDoubleArray(in.readLine());
  int p=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
  w=new double[intercept.length][p];
  for (int j=0; j < p; j++) {
    String[] data=in.readLine().split(""String_Node_Str"");
    for (int i=0; i < w.length; i++) {
      w[i][j]=Double.parseDouble(data[i]);
    }
  }
}",0.9655172413793104
117208,"@Override public double[] predictProbabilities(Instance instance){
  if (w.length == 1) {
    double[] prob=new double[2];
    double pred=regress(intercept[0],w[0],instance);
    prob[0]=1 / (1 + Math.exp(-pred));
    prob[1]=1 - prob[0];
    return prob;
  }
 else {
    double[] prob=new double[w.length];
    double[] pred=new double[w.length];
    double sum=0;
    for (int i=0; i < w.length; i++) {
      pred[i]=regress(intercept[i],w[i],instance);
      prob[i]=1 / (1 + Math.exp(-pred[i]));
      sum+=prob[i];
    }
    for (int i=0; i < prob.length; i++) {
      prob[i]/=sum;
    }
    return prob;
  }
}","@Override public double[] predictProbabilities(Instance instance){
  if (w.length == 1) {
    double[] prob=new double[2];
    double pred=regress(intercept[0],w[0],instance);
    prob[0]=MathUtils.sigmoid(pred);
    prob[1]=1 - prob[0];
    return prob;
  }
 else {
    double[] prob=new double[w.length];
    double[] pred=new double[w.length];
    double sum=0;
    for (int i=0; i < w.length; i++) {
      pred[i]=regress(intercept[i],w[i],instance);
      prob[i]=MathUtils.sigmoid(pred[i]);
      sum+=prob[i];
    }
    for (int i=0; i < prob.length; i++) {
      prob[i]/=sum;
    }
    return prob;
  }
}",0.9365853658536586
117209,"@Override public void write(PrintWriter out) throws Exception {
  out.printf(""String_Node_Str"",this.getClass().getCanonicalName());
  out.printf(""String_Node_Str"" + link);
  out.println(""String_Node_Str"" + intercept.length);
  out.println(Arrays.toString(intercept));
  final int p=w[0].length;
  out.println(""String_Node_Str"" + p);
  for (int j=0; j < p; j++) {
    out.print(w[0][j]);
    for (int i=1; i < w.length; i++) {
      out.print(""String_Node_Str"" + w[i][j]);
    }
    out.println();
  }
}","@Override public void write(PrintWriter out) throws Exception {
  out.printf(""String_Node_Str"",this.getClass().getCanonicalName());
  out.println(""String_Node_Str"" + link);
  out.println(""String_Node_Str"" + intercept.length);
  out.println(Arrays.toString(intercept));
  final int p=w[0].length;
  out.println(""String_Node_Str"" + p);
  for (int j=0; j < p; j++) {
    out.print(w[0][j]);
    for (int i=1; i < w.length; i++) {
      out.print(""String_Node_Str"" + w[i][j]);
    }
    out.println();
  }
}",0.9970149253731344
117210,"/** 
 * Returns the response distribution family.
 */
public Family getFamily(){
  return family;
}","/** 
 * Returns the response distribution family.
 * @return the response distribution family.
 */
public Family getFamily(){
  return family;
}",0.8148148148148148
117211,"/** 
 * <p> <pre> Usage: mltk.predictor.glm.LassoLearner -t	train set path [-g]	task between classification (c) and regression (r) (default: r) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-m]	maximum num of iterations (default: 0) [-l]	lambda (default: 0) </pre> </p>
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(LassoLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  LassoLearner learner=new LassoLearner();
  learner.setVerbose(opts.verbose);
  learner.setTask(task);
  learner.setLambda(opts.lambda);
  learner.setMaxNumIters(opts.maxIter);
  long start=System.currentTimeMillis();
  GLM glm=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(glm,opts.outputModelPath);
  }
}","/** 
 * Trains L1-regularized GLMs. <pre> Usage: mltk.predictor.glm.LassoLearner -t	train set path [-g]	task between classification (c) and regression (r) (default: r) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-m]	maximum num of iterations (default: 0) [-l]	lambda (default: 0) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(LassoLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  LassoLearner learner=new LassoLearner();
  learner.setVerbose(opts.verbose);
  learner.setTask(task);
  learner.setLambda(opts.lambda);
  learner.setMaxNumIters(opts.maxIter);
  long start=System.currentTimeMillis();
  GLM glm=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(glm,opts.outputModelPath);
  }
}",0.974190905366653
117212,"/** 
 * Builds L1-regularized regressors for a sequence of regularization parameter lambdas on sparse format. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param maxNumIters the maximum number of iterations.
 * @param numLambdas the number of lambdas.
 * @param minLambdaRatio the minimum lambda is minLambdaRatio * max lambda.
 * @return L1-regularized regressors.
 */
public List<GLM> buildGaussianRegressors(int[] attrs,int[][] indices,double[][] values,double[] y,int maxNumIters,int numLambdas,double minLambdaRatio){
  double[] w=new double[attrs.length];
  double intercept=0;
  double[] rTrain=new double[y.length];
  for (int i=0; i < rTrain.length; i++) {
    rTrain[i]=y[i];
  }
  double[] sq=new double[values.length];
  for (int i=0; i < values.length; i++) {
    sq[i]=StatUtils.sumSq(values[i]);
  }
  double maxLambda=findMaxLambdaGaussian(indices,values,y);
  double alpha=Math.pow(minLambdaRatio,1.0 / numLambdas);
  List<GLM> glms=new ArrayList<>(numLambdas);
  Set<ModelStructure> structures=new HashSet<>();
  double lambda=maxLambda;
  for (int g=0; g < numLambdas; g++) {
    final double tl1=lambda * y.length;
    for (int iter=0; iter < maxNumIters; iter++) {
      double prevLoss=GLMOptimUtils.computeLassoLoss(rTrain,w,lambda);
      if (fitIntercept) {
        intercept+=OptimUtils.fitIntercept(rTrain);
      }
      doOnePassGaussian(indices,values,sq,tl1,w,rTrain);
      double currLoss=GLMOptimUtils.computeLassoLoss(rTrain,w,lambda);
      if (verbose) {
        System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ ""String_Node_Str""+ currLoss);
      }
      if (OptimUtils.isConverged(prevLoss,currLoss,epsilon)) {
        break;
      }
    }
    lambda*=alpha;
    if (refit) {
      boolean[] selected=new boolean[attrs.length];
      for (int i=0; i < selected.length; i++) {
        selected[i]=w[i] != 0;
      }
      ModelStructure structure=new ModelStructure(selected);
      if (!structures.contains(structure)) {
        GLM glm=refitGaussianRegressor(attrs,selected,indices,values,y,maxNumIters);
        glms.add(glm);
        structures.add(structure);
      }
    }
 else {
      GLM glm=GLMOptimUtils.getGLM(attrs,w,intercept,LinkFunction.IDENTITY);
      glms.add(glm);
    }
  }
  return glms;
}","/** 
 * Builds L1-regularized regressors for a sequence of regularization parameter lambdas on sparse format. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param numLambdas the number of lambdas.
 * @param minLambdaRatio the minimum lambda is minLambdaRatio * max lambda.
 * @return L1-regularized regressors.
 */
public List<GLM> buildGaussianRegressors(int[] attrs,int[][] indices,double[][] values,double[] y,int maxNumIters,int numLambdas,double minLambdaRatio){
  double[] w=new double[attrs.length];
  double intercept=0;
  double[] rTrain=new double[y.length];
  for (int i=0; i < rTrain.length; i++) {
    rTrain[i]=y[i];
  }
  double[] sq=new double[values.length];
  for (int i=0; i < values.length; i++) {
    sq[i]=StatUtils.sumSq(values[i]);
  }
  double maxLambda=findMaxLambdaGaussian(indices,values,y);
  double alpha=Math.pow(minLambdaRatio,1.0 / numLambdas);
  List<GLM> glms=new ArrayList<>(numLambdas);
  Set<ModelStructure> structures=new HashSet<>();
  double lambda=maxLambda;
  for (int g=0; g < numLambdas; g++) {
    final double tl1=lambda * y.length;
    for (int iter=0; iter < maxNumIters; iter++) {
      double prevLoss=GLMOptimUtils.computeLassoLoss(rTrain,w,lambda);
      if (fitIntercept) {
        intercept+=OptimUtils.fitIntercept(rTrain);
      }
      doOnePassGaussian(indices,values,sq,tl1,w,rTrain);
      double currLoss=GLMOptimUtils.computeLassoLoss(rTrain,w,lambda);
      if (verbose) {
        System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ ""String_Node_Str""+ currLoss);
      }
      if (OptimUtils.isConverged(prevLoss,currLoss,epsilon)) {
        break;
      }
    }
    lambda*=alpha;
    if (refit) {
      boolean[] selected=new boolean[attrs.length];
      for (int i=0; i < selected.length; i++) {
        selected[i]=w[i] != 0;
      }
      ModelStructure structure=new ModelStructure(selected);
      if (!structures.contains(structure)) {
        GLM glm=refitGaussianRegressor(attrs,selected,indices,values,y,maxNumIters);
        glms.add(glm);
        structures.add(structure);
      }
    }
 else {
      GLM glm=GLMOptimUtils.getGLM(attrs,w,intercept,LinkFunction.IDENTITY);
      glms.add(glm);
    }
  }
  return glms;
}",0.9950029982010794
117213,"/** 
 * <p> <pre> Usage: mltk.predictor.glm.RidgeLearner -t	train set path [-g]	task between classification (c) and regression (r) (default: r) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-m]	maximum num of iterations (default: 0) [-l]	lambda (default: 0) </pre> </p>
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(RidgeLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  RidgeLearner learner=new RidgeLearner();
  learner.setVerbose(opts.verbose);
  learner.setTask(task);
  learner.setLambda(opts.lambda);
  learner.setMaxNumIters(opts.maxIter);
  long start=System.currentTimeMillis();
  GLM glm=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(glm,opts.outputModelPath);
  }
}","/** 
 * Trains L2-regularized GLMs. <pre> Usage: mltk.predictor.glm.RidgeLearner -t	train set path [-g]	task between classification (c) and regression (r) (default: r) [-r]	attribute file path [-o]	output model path [-V]	verbose (default: true) [-m]	maximum num of iterations (default: 0) [-l]	lambda (default: 0) </pre>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(RidgeLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.get(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  RidgeLearner learner=new RidgeLearner();
  learner.setVerbose(opts.verbose);
  learner.setTask(task);
  learner.setLambda(opts.lambda);
  learner.setMaxNumIters(opts.maxIter);
  long start=System.currentTimeMillis();
  GLM glm=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(glm,opts.outputModelPath);
  }
}",0.974190905366653
117214,"@Override public int compare(DoublePair o1,DoublePair o2){
  if (o1.v1 < o2.v1) {
    return -1;
  }
 else   if (o1.v1 > o2.v1) {
    return 1;
  }
 else {
    if (o1.v2 < o2.v2) {
      return -1;
    }
 else     if (o1.v2 > o2.v2) {
      return 1;
    }
 else {
      return 0;
    }
  }
}","@Override public int compare(DoublePair o1,DoublePair o2){
  int cmp=Double.compare(o1.v1,o2.v1);
  if (cmp == 0) {
    cmp=Double.compare(o2.v2,o2.v2);
  }
  return cmp;
}",0.396551724137931
117215,"@Override public int compare(IntDoublePair o1,IntDoublePair o2){
  int cmp=0;
  if (firstIsKey) {
    if (o1.v1 < o2.v1) {
      cmp=-1;
    }
 else     if (o1.v1 > o2.v1) {
      cmp=1;
    }
  }
 else {
    if (o1.v2 < o2.v2) {
      cmp=-1;
    }
 else     if (o1.v2 > o2.v2) {
      cmp=1;
    }
  }
  if (!ascending) {
    cmp=-cmp;
  }
  return cmp;
}","@Override public int compare(IntDoublePair o1,IntDoublePair o2){
  int cmp=0;
  if (firstIsKey) {
    cmp=Integer.compare(o1.v1,o2.v1);
  }
 else {
    cmp=Double.compare(o1.v2,o2.v2);
  }
  if (!ascending) {
    cmp=-cmp;
  }
  return cmp;
}",0.3839732888146911
117216,"/** 
 * Returns the dot product of two vectors.
 * @param a the 1st vector.
 * @param b the 2nd vector.
 * @return the dot product of two vectors.
 */
public static double dotProduct(SparseVector a,SparseVector b){
  int[] indices1=a.getIndices();
  double[] values1=a.getValues();
  int[] indices2=b.getIndices();
  double[] values2=b.getValues();
  double s=0;
  int i=0;
  int j=0;
  while (i < indices1.length && j < indices2.length) {
    if (indices1[i] < indices2[j]) {
      i++;
    }
 else     if (indices1[i] > indices2[j]) {
      j++;
    }
 else {
      s+=values1[i] * values2[j];
    }
  }
  return s;
}","/** 
 * Returns the dot product of two vectors.
 * @param a the 1st vector.
 * @param b the 2nd vector.
 * @return the dot product of two vectors.
 */
public static double dotProduct(SparseVector a,SparseVector b){
  int[] indices1=a.getIndices();
  double[] values1=a.getValues();
  int[] indices2=b.getIndices();
  double[] values2=b.getValues();
  double s=0;
  int i=0;
  int j=0;
  while (i < indices1.length && j < indices2.length) {
    if (indices1[i] < indices2[j]) {
      i++;
    }
 else     if (indices1[i] > indices2[j]) {
      j++;
    }
 else {
      s+=values1[i] * values2[j];
      i++;
      j++;
    }
  }
  return s;
}",0.9825396825396824
117217,"/** 
 * <p> <pre> Usage: LassoLearner -t	train set path [-r]	attribute file path [-o]	output model path [-g]	task between classification (c) and regression (r) (default: r) [-m]	maximum num of iterations (default: 0) [-l]	lambda (default: 0)
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(LassoLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.getEnum(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  LassoLearner learner=new LassoLearner();
  learner.setVerbose(true);
  learner.setTask(task);
  learner.setLambda(opts.lambda);
  learner.setMaxNumIters(opts.maxIter);
  long start=System.currentTimeMillis();
  GLM glm=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(glm,opts.outputModelPath);
  }
}","/** 
 * <p> <pre> Usage: LassoLearner -t	train set path [-r]	attribute file path [-o]	output model path [-g]	task between classification (c) and regression (r) (default: r) [-m]	maximum num of iterations (default: 0) [-l]	lambda (default: 0) </pre> </p>
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(LassoLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.getEnum(opts.task);
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  LassoLearner learner=new LassoLearner();
  learner.setVerbose(true);
  learner.setTask(task);
  learner.setLambda(opts.lambda);
  learner.setMaxNumIters(opts.maxIter);
  long start=System.currentTimeMillis();
  GLM glm=learner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(glm,opts.outputModelPath);
  }
}",0.9947322212467076
117218,"@Override public void read(BufferedReader in) throws Exception {
  int k=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
  trees=new BoostedRegressionTrees[k];
  for (int i=0; i < trees.length; i++) {
    trees[i]=new BoostedRegressionTrees();
    int n=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
    for (int j=0; j < n; i++) {
      RegressionTree rt=new RegressionTree();
      rt.read(in);
      trees[i].add(rt);
      in.readLine();
    }
  }
}","@Override public void read(BufferedReader in) throws Exception {
  int k=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
  trees=new BoostedRegressionTrees[k];
  for (int i=0; i < trees.length; i++) {
    int n=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
    trees[i]=new BoostedRegressionTrees();
    for (int j=0; j < n; j++) {
      in.readLine();
      RegressionTree rt=new RegressionTree();
      rt.read(in);
      trees[i].add(rt);
      in.readLine();
    }
    in.readLine();
  }
}",0.872255489021956
117219,"@Override public void write(PrintWriter out) throws Exception {
  out.printf(""String_Node_Str"",this.getClass().getCanonicalName());
  out.println(""String_Node_Str"" + trees.length);
  for (  BoostedRegressionTrees rtList : trees) {
    out.println(""String_Node_Str"" + rtList.size());
    for (    RegressionTree rt : rtList) {
      rt.write(out);
    }
    out.println();
  }
}","@Override public void write(PrintWriter out) throws Exception {
  out.printf(""String_Node_Str"",this.getClass().getCanonicalName());
  out.println(""String_Node_Str"" + trees.length);
  for (  BoostedRegressionTrees rtList : trees) {
    out.println(""String_Node_Str"" + rtList.size());
    for (    RegressionTree rt : rtList) {
      rt.write(out);
      out.println();
    }
    out.println();
  }
}",0.9729032258064516
117220,"protected void getHistogram(Instances instances,List<IntDoublePair> pairs,List<Double> uniqueValues,double w,double s,List<DoublePair> histogram){
  if (pairs.size() == 0) {
    return;
  }
  double lastValue=pairs.get(0).v2;
  double totalWeight=instances.get(pairs.get(0).v1).getWeight();
  double sum=instances.get(pairs.get(0).v1).getTarget() * totalWeight;
  for (int i=1; i < pairs.size(); i++) {
    IntDoublePair pair=pairs.get(i);
    double value=pair.v2;
    double weight=instances.get(pairs.get(i).v1).getWeight();
    double resp=instances.get(pairs.get(i).v1).getTarget();
    if (value != lastValue) {
      uniqueValues.add(lastValue);
      histogram.add(new DoublePair(totalWeight,sum));
      lastValue=value;
      totalWeight=weight;
      sum=resp * weight;
    }
 else {
      totalWeight+=weight;
      sum+=resp * weight;
    }
  }
  uniqueValues.add(lastValue);
  histogram.add(new DoublePair(totalWeight,sum));
  if (pairs.size() != instances.size()) {
    double sumWeight=0;
    double sumTarget=0;
    for (    DoublePair pair : histogram) {
      sumWeight+=pair.v1;
      sumTarget+=pair.v2;
    }
    double weightOnZero=w - sumWeight;
    double sumOnZero=s - sumTarget;
    int idx=Collections.binarySearch(uniqueValues,ZERO);
    if (idx < 0) {
      uniqueValues.add(-idx - 1,ZERO);
      histogram.add(-idx - 1,new DoublePair(weightOnZero,sumOnZero));
    }
  }
}","protected void getHistogram(Instances instances,List<IntDoublePair> pairs,List<Double> uniqueValues,double w,double s,List<DoublePair> histogram){
  if (pairs.size() > 0) {
    double lastValue=pairs.get(0).v2;
    double totalWeight=instances.get(pairs.get(0).v1).getWeight();
    double sum=instances.get(pairs.get(0).v1).getTarget() * totalWeight;
    for (int i=1; i < pairs.size(); i++) {
      IntDoublePair pair=pairs.get(i);
      double value=pair.v2;
      double weight=instances.get(pairs.get(i).v1).getWeight();
      double resp=instances.get(pairs.get(i).v1).getTarget();
      if (value != lastValue) {
        uniqueValues.add(lastValue);
        histogram.add(new DoublePair(totalWeight,sum));
        lastValue=value;
        totalWeight=weight;
        sum=resp * weight;
      }
 else {
        totalWeight+=weight;
        sum+=resp * weight;
      }
    }
    uniqueValues.add(lastValue);
    histogram.add(new DoublePair(totalWeight,sum));
  }
  if (pairs.size() != instances.size()) {
    double sumWeight=0;
    double sumTarget=0;
    for (    DoublePair pair : histogram) {
      sumWeight+=pair.v1;
      sumTarget+=pair.v2;
    }
    double weightOnZero=w - sumWeight;
    double sumOnZero=s - sumTarget;
    int idx=Collections.binarySearch(uniqueValues,ZERO);
    if (idx < 0) {
      uniqueValues.add(-idx - 1,ZERO);
      histogram.add(-idx - 1,new DoublePair(weightOnZero,sumOnZero));
    }
  }
}",0.9784680550653018
117221,"/** 
 * <p> <pre> Usage: InstancesSplitter -r	attribute file path -i	input dataset path -o	output directory path [-c]	splitting mode:parameter. Splitting mode can be split (s) and cross validation (c) (default: c:5) [-s]	seed of the random number generator (default: 0) </pre> </p>
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(InstancesSplitter.class,opts);
  String[] data=null;
  try {
    parser.parse(args);
    data=opts.crossValidationMode.split(""String_Node_Str"");
    if (data.length != 2) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances instances=InstancesReader.read(opts.attPath,opts.inputPath);
  File attFile=new File(opts.attPath);
  String prefix=attFile.getName().split(""String_Node_Str"")[0];
  File dir=new File(opts.outputDirPath);
  if (!dir.exists()) {
    dir.mkdir();
  }
switch (data[0]) {
case ""String_Node_Str"":
    int k=Integer.parseInt(data[1]);
  if (data.length == 2) {
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,k);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
 else {
    double ratio=Double.parseDouble(data[2]);
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,k,ratio);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
break;
case ""String_Node_Str"":
double ratio=Double.parseDouble(data[1]);
Instances[] datasets=InstancesSplitter.split(instances,ratio);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
break;
default :
break;
}
}","/** 
 * <p> <pre> Usage: InstancesSplitter -r	attribute file path -i	input dataset path -o	output directory path [-c]	splitting mode:parameter. Splitting mode can be split (s) and cross validation (c) (default: c:5) [-s]	seed of the random number generator (default: 0) </pre> </p>
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(InstancesSplitter.class,opts);
  String[] data=null;
  try {
    parser.parse(args);
    data=opts.crossValidationMode.split(""String_Node_Str"");
    if (data.length < 2) {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Random.getInstance().setSeed(opts.seed);
  Instances instances=InstancesReader.read(opts.attPath,opts.inputPath);
  File attFile=new File(opts.attPath);
  String prefix=attFile.getName().split(""String_Node_Str"")[0];
  File dir=new File(opts.outputDirPath);
  if (!dir.exists()) {
    dir.mkdir();
  }
switch (data[0]) {
case ""String_Node_Str"":
    int k=Integer.parseInt(data[1]);
  if (data.length == 2) {
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,k);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
 else {
    double ratio=Double.parseDouble(data[2]);
    Instances[][] folds=InstancesSplitter.createCrossValidationFolds(instances,k,ratio);
    for (int i=0; i < folds.length; i++) {
      String path=opts.outputDirPath + File.separator + ""String_Node_Str""+ i;
      File directory=new File(path);
      if (!directory.exists()) {
        directory.mkdir();
      }
      InstancesWriter.write(folds[i][0],path + File.separator + prefix+ ""String_Node_Str"",path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][1],path + File.separator + prefix+ ""String_Node_Str"");
      InstancesWriter.write(folds[i][2],path + File.separator + prefix+ ""String_Node_Str"");
    }
  }
break;
case ""String_Node_Str"":
double ratio=Double.parseDouble(data[1]);
Instances[] datasets=InstancesSplitter.split(instances,ratio);
InstancesWriter.write(datasets[0],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"",opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
InstancesWriter.write(datasets[1],opts.outputDirPath + File.separator + prefix+ ""String_Node_Str"");
break;
default :
break;
}
}",0.9831231124533664
117222,"static GAM getGAM(GLM glm,List<Attribute> attList){
  double[] w=glm.coefficients(0);
  GAM gam=new GAM();
  int k=0;
  for (  Attribute attribute : attList) {
    int attIndex=attribute.getIndex();
    int[] term=new int[]{attIndex};
    if (attribute instanceof NumericalAttribute) {
      LinearFunction func=new LinearFunction(attIndex,-w[k++]);
      gam.add(term,func);
    }
 else     if (attribute instanceof BinnedAttribute) {
      BinnedAttribute binnedAttribute=(BinnedAttribute)attribute;
      int size=binnedAttribute.getNumBins();
      double[] predictions=new double[size];
      for (int j=0; j < predictions.length; j++) {
        predictions[j]=-w[k++];
      }
      Array1D ary=new Array1D(attIndex,predictions);
      gam.add(term,ary);
    }
 else     if (attribute instanceof NominalAttribute) {
      NominalAttribute nominalAttribute=(NominalAttribute)attribute;
      int size=nominalAttribute.getCardinality();
      double[] predictions=new double[size];
      for (int j=0; j < predictions.length; j++) {
        predictions[j]=-w[k++];
      }
      Array1D ary=new Array1D(attIndex,predictions);
      gam.add(term,ary);
    }
  }
  gam.setIntercept(-glm.intercept(0));
  return gam;
}","static GAM getGAM(GLM glm,List<Attribute> attList){
  double[] w=glm.coefficients(0);
  GAM gam=new GAM();
  int k=0;
  for (  Attribute attribute : attList) {
    int attIndex=attribute.getIndex();
    int[] term=new int[]{attIndex};
    if (attribute instanceof NumericalAttribute) {
      LinearFunction func=new LinearFunction(attIndex,-w[k++]);
      gam.add(term,func);
    }
 else     if (attribute instanceof BinnedAttribute) {
      BinnedAttribute binnedAttribute=(BinnedAttribute)attribute;
      int size=binnedAttribute.getNumBins();
      double[] predictions=new double[size];
      for (int j=0; j < predictions.length && k < w.length; j++) {
        predictions[j]=-w[k++];
      }
      Array1D ary=new Array1D(attIndex,predictions);
      gam.add(term,ary);
    }
 else     if (attribute instanceof NominalAttribute) {
      NominalAttribute nominalAttribute=(NominalAttribute)attribute;
      int size=nominalAttribute.getCardinality();
      double[] predictions=new double[size];
      for (int j=0; j < predictions.length && k < w.length; j++) {
        predictions[j]=-w[k++];
      }
      Array1D ary=new Array1D(attIndex,predictions);
      gam.add(term,ary);
    }
  }
  gam.setIntercept(-glm.intercept(0));
  return gam;
}",0.9870445344129556
117223,"/** 
 * <p> <pre> Usage: SPLAMLearner -t	train set path [-r]	attribute file path [-o]	output model path [-g]	task between classification (c) and regression (r) (default: r) [-d]	number of knots (default: 10) [-m]	maximum number of iterations (default: 0) [-l]	lambda (default: 0) [-a]	alpha (default: 1, i.e., SPAM model) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(SPLAMLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.getEnum(opts.task);
    if (opts.numKnots < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  SPLAMLearner splamLearner=new SPLAMLearner();
  splamLearner.setNumKnots(opts.numKnots);
  splamLearner.setMaxNumIters(opts.maxNumIters);
  splamLearner.setLambda(opts.lambda);
  splamLearner.setAlpha(opts.alpha);
  splamLearner.setTask(task);
  splamLearner.setVerbose(true);
  long start=System.currentTimeMillis();
  GAM gam=splamLearner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}","/** 
 * <p> <pre> Usage: SPLAMLearner -t	train set path [-r]	attribute file path [-o]	output model path [-g]	task between classification (c) and regression (r) (default: r) [-d]	number of knots (default: 10) [-m]	maximum number of iterations (default: 0) [-l]	lambda (default: 0) [-a]	alpha (default: 0, i.e., SPAM model) </pre> </p>
 * @param args the command line arguments.
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  Options opts=new Options();
  CmdLineParser parser=new CmdLineParser(SPLAMLearner.class,opts);
  Task task=null;
  try {
    parser.parse(args);
    task=Task.getEnum(opts.task);
    if (opts.numKnots < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  IllegalArgumentException e) {
    parser.printUsage();
    System.exit(1);
  }
  Instances trainSet=InstancesReader.read(opts.attPath,opts.trainPath);
  SPLAMLearner splamLearner=new SPLAMLearner();
  splamLearner.setNumKnots(opts.numKnots);
  splamLearner.setMaxNumIters(opts.maxNumIters);
  splamLearner.setLambda(opts.lambda);
  splamLearner.setAlpha(opts.alpha);
  splamLearner.setTask(task);
  splamLearner.setVerbose(true);
  long start=System.currentTimeMillis();
  GAM gam=splamLearner.build(trainSet);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (end - start) / 1000.0);
  if (opts.outputModelPath != null) {
    PredictorWriter.write(gam,opts.outputModelPath);
  }
}",0.9993164730006836
117224,"/** 
 * Constructor.
 */
public SPLAMLearner(){
  verbose=false;
  fitIntercept=true;
  refit=false;
  numKnots=10;
  maxNumIters=-1;
  lambda=0.0;
  alpha=1;
  epsilon=MathUtils.EPSILON;
  task=Task.REGRESSION;
}","/** 
 * Constructor.
 */
public SPLAMLearner(){
  verbose=false;
  fitIntercept=true;
  refit=false;
  numKnots=10;
  maxNumIters=-1;
  lambda=0.0;
  alpha=0;
  epsilon=MathUtils.EPSILON;
  task=Task.REGRESSION;
}",0.9953051643192488
117225,"/** 
 * Builds a classifier.
 * @param gam the GAM.
 * @param terms the list of feature interaction pairs.
 * @param trainSet the training set.
 * @param maxNumIters the maximum number of iterations.
 */
public void buildClassifier(GAM gam,List<IntPair> terms,Instances trainSet,int maxNumIters){
  List<BoostedEnsemble> regressors=new ArrayList<>();
  int[] indices=new int[terms.size()];
  for (int i=0; i < indices.length; i++) {
    indices[i]=gam.terms.indexOf(terms.get(i));
    regressors.add(new BoostedEnsemble());
  }
  double[] target=new double[trainSet.size()];
  for (int i=0; i < target.length; i++) {
    target[i]=trainSet.get(i).getTarget();
  }
  Instances[] bags=Bagging.createBags(trainSet,baggingIters);
  SquareCutter cutter=new SquareCutter(true);
  BaggedEnsembleLearner learner=new BaggedEnsembleLearner(bags.length,cutter);
  double[] pTrain=new double[trainSet.size()];
  double[] rTrain=new double[trainSet.size()];
  OptimUtils.computePseudoResidual(pTrain,target,rTrain);
  for (int i=0; i < pTrain.length; i++) {
    Instance instance=trainSet.get(i);
    pTrain[i]=gam.regress(instance);
  }
  for (int iter=0; iter < maxNumIters; iter++) {
    int k=iter % terms.size();
    for (int i=0; i < trainSet.size(); i++) {
      trainSet.get(i).setTarget(rTrain[i]);
    }
    BoostedEnsemble boostedEnsemble=regressors.get(k);
    IntPair term=terms.get(k);
    cutter.setAttIndices(term.v1,term.v2);
    BaggedEnsemble baggedEnsemble=learner.build(bags);
    if (learningRate != 1) {
      for (int i=0; i < baggedEnsemble.size(); i++) {
        Function2D func=(Function2D)baggedEnsemble.get(i);
        func.multiply(learningRate);
      }
    }
    boostedEnsemble.add(baggedEnsemble);
    for (int i=0; i < trainSet.size(); i++) {
      Instance instance=trainSet.get(i);
      double pred=baggedEnsemble.regress(instance);
      pTrain[i]+=pred;
      rTrain[i]=OptimUtils.getPseudoResidual(pTrain[i],target[i]);
    }
    double measure=metric.eval(pTrain,target);
    if (verbose) {
      System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ k+ ""String_Node_Str""+ measure);
    }
  }
  for (int i=0; i < target.length; i++) {
    trainSet.get(i).setTarget(target[i]);
  }
  List<Attribute> attributes=trainSet.getAttributes();
  for (int i=0; i < regressors.size(); i++) {
    BoostedEnsemble boostedEnsemble=regressors.get(i);
    IntPair term=terms.get(i);
    Function2D function=CompressionUtils.compress(term.v1,term.v2,boostedEnsemble);
    Attribute f1=attributes.get(term.v1);
    Attribute f2=attributes.get(term.v2);
    int n1=-1;
    if (f1.getType() == Type.BINNED) {
      n1=((BinnedAttribute)f1).getNumBins();
    }
 else     if (f1.getType() == Type.NOMINAL) {
      n1=((NominalAttribute)f1).getCardinality();
    }
    int n2=-1;
    if (f2.getType() == Type.BINNED) {
      n2=((BinnedAttribute)f2).getNumBins();
    }
 else     if (f1.getType() == Type.NOMINAL) {
      n2=((NominalAttribute)f2).getCardinality();
    }
    Regressor newRegressor=function;
    if (n1 > 0 && n2 > 0) {
      newRegressor=CompressionUtils.convert(n1,n2,function);
    }
    if (indices[i] < 0) {
      gam.add(new int[]{term.v1,term.v2},newRegressor);
    }
 else {
      Regressor regressor=gam.regressors.get(indices[i]);
      if (regressor instanceof Function2D) {
        Function2D func=(Function2D)regressor;
        func.add(function);
      }
 else       if (regressor instanceof Array2D) {
        Array2D ary=(Array2D)regressor;
        ary.add((Array2D)newRegressor);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
}","/** 
 * Builds a classifier.
 * @param gam the GAM.
 * @param terms the list of feature interaction pairs.
 * @param trainSet the training set.
 * @param maxNumIters the maximum number of iterations.
 */
public void buildClassifier(GAM gam,List<IntPair> terms,Instances trainSet,int maxNumIters){
  List<BoostedEnsemble> regressors=new ArrayList<>();
  int[] indices=new int[terms.size()];
  for (int i=0; i < indices.length; i++) {
    indices[i]=gam.terms.indexOf(terms.get(i));
    regressors.add(new BoostedEnsemble());
  }
  double[] target=new double[trainSet.size()];
  for (int i=0; i < target.length; i++) {
    target[i]=trainSet.get(i).getTarget();
  }
  Instances[] bags=Bagging.createBags(trainSet,baggingIters);
  SquareCutter cutter=new SquareCutter(true);
  BaggedEnsembleLearner learner=new BaggedEnsembleLearner(bags.length,cutter);
  double[] pTrain=new double[trainSet.size()];
  double[] rTrain=new double[trainSet.size()];
  for (int i=0; i < pTrain.length; i++) {
    Instance instance=trainSet.get(i);
    pTrain[i]=gam.regress(instance);
  }
  OptimUtils.computePseudoResidual(pTrain,target,rTrain);
  for (int iter=0; iter < maxNumIters; iter++) {
    int k=iter % terms.size();
    for (int i=0; i < trainSet.size(); i++) {
      trainSet.get(i).setTarget(rTrain[i]);
    }
    BoostedEnsemble boostedEnsemble=regressors.get(k);
    IntPair term=terms.get(k);
    cutter.setAttIndices(term.v1,term.v2);
    BaggedEnsemble baggedEnsemble=learner.build(bags);
    if (learningRate != 1) {
      for (int i=0; i < baggedEnsemble.size(); i++) {
        Function2D func=(Function2D)baggedEnsemble.get(i);
        func.multiply(learningRate);
      }
    }
    boostedEnsemble.add(baggedEnsemble);
    for (int i=0; i < trainSet.size(); i++) {
      Instance instance=trainSet.get(i);
      double pred=baggedEnsemble.regress(instance);
      pTrain[i]+=pred;
      rTrain[i]=OptimUtils.getPseudoResidual(pTrain[i],target[i]);
    }
    double measure=metric.eval(pTrain,target);
    if (verbose) {
      System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ k+ ""String_Node_Str""+ measure);
    }
  }
  for (int i=0; i < target.length; i++) {
    trainSet.get(i).setTarget(target[i]);
  }
  List<Attribute> attributes=trainSet.getAttributes();
  for (int i=0; i < regressors.size(); i++) {
    BoostedEnsemble boostedEnsemble=regressors.get(i);
    IntPair term=terms.get(i);
    Function2D function=CompressionUtils.compress(term.v1,term.v2,boostedEnsemble);
    Attribute f1=attributes.get(term.v1);
    Attribute f2=attributes.get(term.v2);
    int n1=-1;
    if (f1.getType() == Type.BINNED) {
      n1=((BinnedAttribute)f1).getNumBins();
    }
 else     if (f1.getType() == Type.NOMINAL) {
      n1=((NominalAttribute)f1).getCardinality();
    }
    int n2=-1;
    if (f2.getType() == Type.BINNED) {
      n2=((BinnedAttribute)f2).getNumBins();
    }
 else     if (f1.getType() == Type.NOMINAL) {
      n2=((NominalAttribute)f2).getCardinality();
    }
    Regressor newRegressor=function;
    if (n1 > 0 && n2 > 0) {
      newRegressor=CompressionUtils.convert(n1,n2,function);
    }
    if (indices[i] < 0) {
      gam.add(new int[]{term.v1,term.v2},newRegressor);
    }
 else {
      Regressor regressor=gam.regressors.get(indices[i]);
      if (regressor instanceof Function2D) {
        Function2D func=(Function2D)regressor;
        func.add(function);
      }
 else       if (regressor instanceof Array2D) {
        Array2D ary=(Array2D)regressor;
        ary.add((Array2D)newRegressor);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
}",0.9663169519602428
117226,"@Override public void read(BufferedReader in) throws Exception {
  int bn=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
  groves=new ArrayList<>();
  for (int i=0; i < bn; i++) {
    int tn=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
    RegressionTree[] grove=new RegressionTree[tn];
    for (int j=0; j < tn; i++) {
      RegressionTree rt=new RegressionTree();
      rt.read(in);
      grove[i]=rt;
      in.readLine();
    }
    groves.add(grove);
  }
}","@Override public void read(BufferedReader in) throws Exception {
  int bn=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
  groves=new ArrayList<>();
  for (int i=0; i < bn; i++) {
    int tn=Integer.parseInt(in.readLine().split(""String_Node_Str"")[1]);
    RegressionTree[] grove=new RegressionTree[tn];
    for (int j=0; j < tn; j++) {
      in.readLine();
      RegressionTree rt=new RegressionTree();
      rt.read(in);
      grove[i]=rt;
      in.readLine();
    }
    groves.add(grove);
    in.readLine();
  }
}",0.9587426326129664
117227,"@Override public void write(PrintWriter out) throws Exception {
  out.printf(""String_Node_Str"",this.getClass().getCanonicalName());
  out.println(""String_Node_Str"" + groves.size());
  for (  RegressionTree[] grove : groves) {
    out.println(""String_Node_Str"" + grove.length);
    for (    RegressionTree rt : grove) {
      rt.write(out);
    }
    out.println();
  }
}","@Override public void write(PrintWriter out) throws Exception {
  out.printf(""String_Node_Str"",this.getClass().getCanonicalName());
  out.println(""String_Node_Str"" + groves.size());
  for (  RegressionTree[] grove : groves) {
    out.println(""String_Node_Str"" + grove.length);
    for (    RegressionTree rt : grove) {
      rt.write(out);
      out.println();
    }
    out.println();
  }
}",0.9724047306176083
117228,"public Function2D build(Instances instances){
  List<Attribute> attributes=instances.getAttributes();
  int size1=0;
  Attribute f1=attributes.get(attIndex1);
  if (f1.getType() == Attribute.Type.BINNED) {
    size1=((BinnedAttribute)f1).getNumBins();
  }
 else   if (f1.getType() == Attribute.Type.NOMINAL) {
    size1=((NominalAttribute)f1).getCardinality();
  }
  int size2=0;
  Attribute f2=attributes.get(attIndex2);
  if (f1.getType() == Attribute.Type.BINNED) {
    size2=((BinnedAttribute)f2).getNumBins();
  }
 else   if (f1.getType() == Attribute.Type.NOMINAL) {
    size2=((NominalAttribute)f2).getCardinality();
  }
  if (size1 == 1 || size2 == 1) {
    return new Function2D(f1.getIndex(),f2.getIndex(),new double[]{Double.POSITIVE_INFINITY},new double[]{Double.POSITIVE_INFINITY},new double[1][1]);
  }
  Histogram2D hist2d=new Histogram2D(size1,size2);
  for (  Instance instance : instances) {
    int idx1=(int)instance.getValue(f1);
    int idx2=(int)instance.getValue(f2);
    hist2d.resp[idx1][idx2]+=instance.getTarget() * instance.getWeight();
    hist2d.count[idx1][idx2]+=instance.getWeight();
  }
  Pair<CHistogram,CHistogram> cHist=hist2d.computeCHistogram();
  Table table=new Table(size1,size2);
  computeTable(hist2d,cHist.v1,cHist.v2,table);
  double bestRSS=Double.POSITIVE_INFINITY;
  double[] predInt1=new double[4];
  int bestV1=-1;
  int[] bestV2s=new int[2];
  int[] v2s=new int[2];
  for (int v1=0; v1 < size1 - 1; v1++) {
    findCuts(table,v1,v2s);
    getPredictor(table,v1,v2s,predInt1);
    double rss=getRSS(table,v1,v2s,predInt1);
    if (rss < bestRSS) {
      bestRSS=rss;
      bestV1=v1;
      bestV2s[0]=v2s[0];
      bestV2s[1]=v2s[1];
    }
  }
  boolean cutOnAttr2=false;
  double[] predInt2=new double[4];
  int[] bestV1s=new int[2];
  int bestV2=-1;
  int[] v1s=new int[2];
  for (int v2=0; v2 < size2 - 1; v2++) {
    findCuts(table,v1s,v2);
    getPredictor(table,v1s,v2,predInt2);
    double rss=getRSS(table,v1s,v2,predInt2);
    if (rss < bestRSS) {
      bestRSS=rss;
      bestV2=v2;
      bestV1s[0]=v1s[0];
      bestV1s[1]=v1s[1];
      cutOnAttr2=true;
    }
  }
  if (cutOnAttr2) {
    getPredictor(table,bestV1s,bestV2,predInt2);
    if (lineSearch) {
      lineSearch(instances,f2.getIndex(),f1.getIndex(),bestV2,bestV1s[0],bestV1s[1],predInt2);
    }
    return getFunction2D(f1.getIndex(),f2.getIndex(),bestV1s,bestV2,predInt2);
  }
 else {
    getPredictor(table,bestV1,bestV2s,predInt1);
    if (lineSearch) {
      lineSearch(instances,f1.getIndex(),f2.getIndex(),bestV1,bestV2s[0],bestV2s[1],predInt1);
    }
    return getFunction2D(f1.getIndex(),f2.getIndex(),bestV1,bestV2s,predInt1);
  }
}","public Function2D build(Instances instances){
  List<Attribute> attributes=instances.getAttributes();
  int size1=0;
  Attribute f1=attributes.get(attIndex1);
  if (f1.getType() == Attribute.Type.BINNED) {
    size1=((BinnedAttribute)f1).getNumBins();
  }
 else   if (f1.getType() == Attribute.Type.NOMINAL) {
    size1=((NominalAttribute)f1).getCardinality();
  }
  int size2=0;
  Attribute f2=attributes.get(attIndex2);
  if (f2.getType() == Attribute.Type.BINNED) {
    size2=((BinnedAttribute)f2).getNumBins();
  }
 else   if (f2.getType() == Attribute.Type.NOMINAL) {
    size2=((NominalAttribute)f2).getCardinality();
  }
  if (size1 == 1 || size2 == 1) {
    return new Function2D(f1.getIndex(),f2.getIndex(),new double[]{Double.POSITIVE_INFINITY},new double[]{Double.POSITIVE_INFINITY},new double[1][1]);
  }
  Histogram2D hist2d=new Histogram2D(size1,size2);
  for (  Instance instance : instances) {
    int idx1=(int)instance.getValue(f1);
    int idx2=(int)instance.getValue(f2);
    hist2d.resp[idx1][idx2]+=instance.getTarget() * instance.getWeight();
    hist2d.count[idx1][idx2]+=instance.getWeight();
  }
  Pair<CHistogram,CHistogram> cHist=hist2d.computeCHistogram();
  Table table=new Table(size1,size2);
  computeTable(hist2d,cHist.v1,cHist.v2,table);
  double bestRSS=Double.POSITIVE_INFINITY;
  double[] predInt1=new double[4];
  int bestV1=-1;
  int[] bestV2s=new int[2];
  int[] v2s=new int[2];
  for (int v1=0; v1 < size1 - 1; v1++) {
    findCuts(table,v1,v2s);
    getPredictor(table,v1,v2s,predInt1);
    double rss=getRSS(table,v1,v2s,predInt1);
    if (rss < bestRSS) {
      bestRSS=rss;
      bestV1=v1;
      bestV2s[0]=v2s[0];
      bestV2s[1]=v2s[1];
    }
  }
  boolean cutOnAttr2=false;
  double[] predInt2=new double[4];
  int[] bestV1s=new int[2];
  int bestV2=-1;
  int[] v1s=new int[2];
  for (int v2=0; v2 < size2 - 1; v2++) {
    findCuts(table,v1s,v2);
    getPredictor(table,v1s,v2,predInt2);
    double rss=getRSS(table,v1s,v2,predInt2);
    if (rss < bestRSS) {
      bestRSS=rss;
      bestV2=v2;
      bestV1s[0]=v1s[0];
      bestV1s[1]=v1s[1];
      cutOnAttr2=true;
    }
  }
  if (cutOnAttr2) {
    getPredictor(table,bestV1s,bestV2,predInt2);
    if (lineSearch) {
      lineSearch(instances,f2.getIndex(),f1.getIndex(),bestV2,bestV1s[0],bestV1s[1],predInt2);
    }
    return getFunction2D(f1.getIndex(),f2.getIndex(),bestV1s,bestV2,predInt2);
  }
 else {
    getPredictor(table,bestV1,bestV2s,predInt1);
    if (lineSearch) {
      lineSearch(instances,f1.getIndex(),f2.getIndex(),bestV1,bestV2s[0],bestV2s[1],predInt1);
    }
    return getFunction2D(f1.getIndex(),f2.getIndex(),bestV1,bestV2s,predInt1);
  }
}",0.9992500937382828
117229,"protected static Function2D getFunction2D(int attIndex1,int attIndex2,int[] v1,int v2,double[] predInt){
  double[] splits1=null;
  double[] splits2=new double[]{v2 + 0.5,Double.POSITIVE_INFINITY};
  double[][] predictions=null;
  if (v1[0] < v1[1]) {
    splits1=new double[]{v1[0] + 0.5,v1[1] + 0.5,Double.POSITIVE_INFINITY};
    predictions=new double[][]{{predInt[0],predInt[2]},{predInt[1],predInt[2]},{predInt[1],predInt[3]}};
  }
 else   if (v1[0] > v1[1]) {
    splits1=new double[]{v1[1] + 0.5,v1[0] + 0.5,Double.POSITIVE_INFINITY};
    predictions=new double[][]{{predInt[0],predInt[2]},{predInt[0],predInt[3]},{predInt[1],predInt[3]}};
  }
 else {
    splits1=new double[]{v1[0] + 0.5,Double.POSITIVE_INFINITY};
    predictions=new double[][]{{predInt[0],predInt[1]},{predInt[2],predInt[3]}};
  }
  return new Function2D(attIndex1,attIndex2,splits1,splits2,predictions);
}","protected static Function2D getFunction2D(int attIndex1,int attIndex2,int[] v1,int v2,double[] predInt){
  double[] splits1=null;
  double[] splits2=new double[]{v2,Double.POSITIVE_INFINITY};
  double[][] predictions=null;
  if (v1[0] < v1[1]) {
    splits1=new double[]{v1[0],v1[1],Double.POSITIVE_INFINITY};
    predictions=new double[][]{{predInt[0],predInt[2]},{predInt[1],predInt[2]},{predInt[1],predInt[3]}};
  }
 else   if (v1[0] > v1[1]) {
    splits1=new double[]{v1[1],v1[0],Double.POSITIVE_INFINITY};
    predictions=new double[][]{{predInt[0],predInt[2]},{predInt[0],predInt[3]},{predInt[1],predInt[3]}};
  }
 else {
    splits1=new double[]{v1[0],Double.POSITIVE_INFINITY};
    predictions=new double[][]{{predInt[0],predInt[2]},{predInt[1],predInt[3]}};
  }
  return new Function2D(attIndex1,attIndex2,splits1,splits2,predictions);
}",0.9502890173410404
117230,"protected static void lineSearch(Instances instances,int attIndex1,int attIndex2,int c1,int c21,int c22,double[] predictions){
  double[] numerator=new double[4];
  double[] denominator=new double[4];
  for (  Instance instance : instances) {
    int v1=(int)instance.getValue(attIndex1);
    int v2=(int)instance.getValue(attIndex2);
    double target=instance.getTarget();
    double t=Math.abs(target);
    if (v1 <= c1) {
      if (v2 <= c21) {
        numerator[0]+=target * instance.getWeight();
        denominator[0]+=t * (1 - t) * instance.getWeight();
      }
 else {
        numerator[1]+=target * instance.getWeight();
        denominator[1]+=t * (1 - t) * instance.getWeight();
      }
    }
 else {
      if (v2 <= c22) {
        numerator[2]+=target * instance.getWeight();
        denominator[2]+=t * (1 - t) * instance.getWeight();
      }
 else {
        numerator[3]+=target * instance.getWeight();
        denominator[3]+=t * (1 - t) * instance.getWeight();
      }
    }
  }
  for (int i=0; i < numerator.length; i++) {
    predictions[i]=denominator[i] == 0 ? 0.0 : numerator[i] / denominator[i];
  }
}","protected static void lineSearch(Instances instances,int attIndex1,int attIndex2,int c1,int c21,int c22,double[] predictions){
  double[] numerator=new double[4];
  double[] denominator=new double[4];
  for (  Instance instance : instances) {
    int v1=(int)instance.getValue(attIndex1);
    int v2=(int)instance.getValue(attIndex2);
    double target=instance.getTarget();
    double t=Math.abs(target);
    if (v1 <= c1) {
      if (v2 <= c21) {
        numerator[0]+=target * instance.getWeight();
        denominator[0]+=t * (1 - t) * instance.getWeight();
      }
 else {
        numerator[1]+=target * instance.getWeight();
        denominator[1]+=t * (1 - t) * instance.getWeight();
      }
    }
 else {
      if (v2 <= c22) {
        numerator[2]+=target * instance.getWeight();
        denominator[2]+=t * (1 - t) * instance.getWeight();
      }
 else {
        numerator[3]+=target * instance.getWeight();
        denominator[3]+=t * (1 - t) * instance.getWeight();
      }
    }
  }
  for (int i=0; i < numerator.length; i++) {
    predictions[i]=Math.abs(denominator[i]) < MathUtils.EPSILON ? 0.0 : numerator[i] / denominator[i];
  }
}",0.9696436427628684
117231,"protected static void lineSearch(Instances instances,int attIndex1,int attIndex2,int c1,int c21,int c22,double[] predictions){
  double[] numerator=new double[4];
  double[] denominator=new double[4];
  for (  Instance instance : instances) {
    int v1=(int)instance.getValue(attIndex1);
    int v2=(int)instance.getValue(attIndex2);
    double target=instance.getTarget();
    double t=Math.abs(target);
    if (v1 <= c1) {
      if (v2 <= c21) {
        numerator[0]+=target;
        denominator[0]+=t * (1 - t);
      }
 else {
        numerator[1]+=target;
        denominator[1]+=t * (1 - t);
      }
    }
 else {
      if (v2 <= c22) {
        numerator[2]+=target;
        denominator[2]+=t * (1 - t);
      }
 else {
        numerator[3]+=target;
        denominator[3]+=t * (1 - t);
      }
    }
  }
  for (int i=0; i < numerator.length; i++) {
    predictions[i]=denominator[i] == 0 ? 0.0 : numerator[i] / denominator[i];
  }
}","protected static void lineSearch(Instances instances,int attIndex1,int attIndex2,int c1,int c21,int c22,double[] predictions){
  double[] numerator=new double[4];
  double[] denominator=new double[4];
  for (  Instance instance : instances) {
    int v1=(int)instance.getValue(attIndex1);
    int v2=(int)instance.getValue(attIndex2);
    double target=instance.getTarget();
    double t=Math.abs(target);
    if (v1 <= c1) {
      if (v2 <= c21) {
        numerator[0]+=target * instance.getWeight();
        denominator[0]+=t * (1 - t) * instance.getWeight();
      }
 else {
        numerator[1]+=target * instance.getWeight();
        denominator[1]+=t * (1 - t) * instance.getWeight();
      }
    }
 else {
      if (v2 <= c22) {
        numerator[2]+=target * instance.getWeight();
        denominator[2]+=t * (1 - t) * instance.getWeight();
      }
 else {
        numerator[3]+=target * instance.getWeight();
        denominator[3]+=t * (1 - t) * instance.getWeight();
      }
    }
  }
  for (int i=0; i < numerator.length; i++) {
    predictions[i]=denominator[i] == 0 ? 0.0 : numerator[i] / denominator[i];
  }
}",0.9108527131782944
117232,"@Override public double eval(double[] preds,Instances instances){
  double error=0;
  for (int i=0; i < preds.length; i++) {
    if (preds[i] != instances.get(i).getTarget()) {
      error++;
    }
  }
  return error / preds.length;
}","@Override public double eval(double[] preds,Instances instances){
  double error=0;
  for (int i=0; i < preds.length; i++) {
    double cls=preds[i] <= 0 ? 0 : 1;
    if (cls != instances.get(i).getTarget()) {
      error++;
    }
  }
  return error / preds.length;
}",0.9021956087824352
117233,"protected double findMaxLambda(int[][] indices,double[][] values,int[] y,double[] predictionTrain,double l1Ratio){
  if (fitIntercept) {
    OptimUtils.fitIntercept(predictionTrain,y);
  }
  double maxLambda=0;
  for (int k=0; k < values.length; k++) {
    double eta=0;
    int[] index=indices[k];
    double[] value=values[k];
    for (int i=0; i < index.length; i++) {
      int idx=index[i];
      double r=OptimUtils.getPseudoResidual(predictionTrain[idx],y[idx]);
      r*=value[i];
      eta+=r;
    }
    double t=Math.abs(eta);
    if (t > maxLambda) {
      maxLambda=t;
    }
  }
  maxLambda/=y.length;
  maxLambda/=l1Ratio;
  if (fitIntercept) {
    Arrays.fill(predictionTrain,0);
  }
  return maxLambda;
}","protected double findMaxLambda(int[][] indices,double[][] values,int[] y,double[] pTrain,double[] rTrain,double l1Ratio){
  if (fitIntercept) {
    OptimUtils.fitIntercept(pTrain,rTrain,y);
  }
  double maxLambda=0;
  for (int k=0; k < values.length; k++) {
    double eta=0;
    int[] index=indices[k];
    double[] value=values[k];
    for (int i=0; i < index.length; i++) {
      int idx=index[i];
      double r=OptimUtils.getPseudoResidual(pTrain[idx],y[idx]);
      r*=value[i];
      eta+=r;
    }
    double t=Math.abs(eta);
    if (t > maxLambda) {
      maxLambda=t;
    }
  }
  maxLambda/=y.length;
  maxLambda/=l1Ratio;
  if (fitIntercept) {
    Arrays.fill(pTrain,0);
    OptimUtils.computePseudoResidual(pTrain,y,rTrain);
  }
  return maxLambda;
}",0.922972972972973
117234,"/** 
 * Builds an elastic-net penalized binary classifier on sparse inputs. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param lambda the lambda.
 * @param l1Ratio the L1 ratio.
 * @return an elastic-net penalized classifier.
 */
public GLM buildBinaryClassifier(int[] attrs,int[][] indices,double[][] values,int[] y,int maxNumIters,double lambda,double l1Ratio){
  double[] w=new double[attrs.length];
  double intercept=0;
  double[] pTrain=new double[y.length];
  double[] rTrain=new double[y.length];
  for (int i=0; i < rTrain.length; i++) {
    rTrain[i]=OptimUtils.getPseudoResidual(pTrain[i],y[i]);
  }
  double[] theta=new double[values.length];
  for (int i=0; i < values.length; i++) {
    theta[i]=StatUtils.sumSq(values[i]) / 4;
  }
  final double lambda1=lambda * l1Ratio;
  final double lambda2=lambda * (1 - l1Ratio);
  final double tl1=lambda1 * y.length;
  final double tl2=lambda2 * y.length;
  double prevLoss=GLMOptimUtils.computeElasticNetLoss(pTrain,y,w,lambda1,lambda2);
  for (int iter=0; iter < maxNumIters; iter++) {
    if (fitIntercept) {
      intercept+=OptimUtils.fitIntercept(pTrain,y);
    }
    doOnePass(indices,values,theta,y,tl1,tl2,w,pTrain,rTrain);
    double currLoss=GLMOptimUtils.computeElasticNetLoss(pTrain,y,w,lambda1,lambda2);
    if (verbose) {
      System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ ""String_Node_Str""+ currLoss);
    }
    if (prevLoss - currLoss < epsilon) {
      break;
    }
    prevLoss=currLoss;
  }
  return GLMOptimUtils.getGLM(attrs,w,intercept);
}","/** 
 * Builds an elastic-net penalized binary classifier on sparse inputs. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param lambda the lambda.
 * @param l1Ratio the L1 ratio.
 * @return an elastic-net penalized classifier.
 */
public GLM buildBinaryClassifier(int[] attrs,int[][] indices,double[][] values,int[] y,int maxNumIters,double lambda,double l1Ratio){
  double[] w=new double[attrs.length];
  double intercept=0;
  double[] pTrain=new double[y.length];
  double[] rTrain=new double[y.length];
  OptimUtils.computePseudoResidual(pTrain,y,rTrain);
  double[] theta=new double[values.length];
  for (int i=0; i < values.length; i++) {
    theta[i]=StatUtils.sumSq(values[i]) / 4;
  }
  final double lambda1=lambda * l1Ratio;
  final double lambda2=lambda * (1 - l1Ratio);
  final double tl1=lambda1 * y.length;
  final double tl2=lambda2 * y.length;
  double prevLoss=GLMOptimUtils.computeElasticNetLoss(pTrain,y,w,lambda1,lambda2);
  for (int iter=0; iter < maxNumIters; iter++) {
    if (fitIntercept) {
      intercept+=OptimUtils.fitIntercept(pTrain,rTrain,y);
    }
    doOnePass(indices,values,theta,y,tl1,tl2,w,pTrain,rTrain);
    double currLoss=GLMOptimUtils.computeElasticNetLoss(pTrain,y,w,lambda1,lambda2);
    if (verbose) {
      System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ ""String_Node_Str""+ currLoss);
    }
    if (OptimUtils.isConverged(prevLoss,currLoss,epsilon)) {
      break;
    }
    prevLoss=currLoss;
  }
  return GLMOptimUtils.getGLM(attrs,w,intercept);
}",0.9475696340797378
117235,"/** 
 * Builds elastic-net penalized binary classifiers on sparse inputs for a sequence of regularization parameter lambdas. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param numLambdas the number of lambdas.
 * @param minLambdaRatio the minimum lambda is minLambdaRatio * max lambda.
 * @param l1Ratio the L1 ratio.
 * @return an elastic-net penalized classifier.
 */
public GLM[] buildBinaryClassifiers(int[] attrs,int[][] indices,double[][] values,int[] y,int maxNumIters,int numLambdas,double minLambdaRatio,double l1Ratio){
  double[] w=new double[attrs.length];
  double intercept=0;
  double[] pTrain=new double[y.length];
  double[] rTrain=new double[y.length];
  for (int i=0; i < rTrain.length; i++) {
    rTrain[i]=OptimUtils.getPseudoResidual(pTrain[i],y[i]);
  }
  double[] theta=new double[values.length];
  for (int i=0; i < values.length; i++) {
    theta[i]=StatUtils.sumSq(values[i]) / 4;
  }
  double maxLambda=findMaxLambda(indices,values,y,pTrain,l1Ratio);
  double alpha=Math.pow(minLambdaRatio,1.0 / numLambdas);
  GLM[] glms=new GLM[numLambdas];
  double lambda=maxLambda;
  for (int g=0; g < glms.length; g++) {
    final double lambda1=lambda * l1Ratio;
    final double lambda2=lambda * (1 - l1Ratio);
    final double tl1=lambda1 * y.length;
    final double tl2=lambda2 * y.length;
    double prevLoss=GLMOptimUtils.computeElasticNetLoss(pTrain,y,w,lambda1,lambda2);
    for (int iter=0; iter < maxNumIters; iter++) {
      if (fitIntercept) {
        intercept+=OptimUtils.fitIntercept(pTrain,y);
      }
      doOnePass(indices,values,theta,y,tl1,tl2,w,pTrain,rTrain);
      double currLoss=GLMOptimUtils.computeElasticNetLoss(pTrain,y,w,lambda1,lambda2);
      if (verbose) {
        System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ ""String_Node_Str""+ currLoss);
      }
      if (prevLoss - currLoss < epsilon) {
        break;
      }
      prevLoss=currLoss;
    }
    glms[g]=GLMOptimUtils.getGLM(attrs,w,intercept);
    lambda*=alpha;
  }
  return glms;
}","/** 
 * Builds elastic-net penalized binary classifiers on sparse inputs for a sequence of regularization parameter lambdas. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param numLambdas the number of lambdas.
 * @param minLambdaRatio the minimum lambda is minLambdaRatio * max lambda.
 * @param l1Ratio the L1 ratio.
 * @return an elastic-net penalized classifier.
 */
public GLM[] buildBinaryClassifiers(int[] attrs,int[][] indices,double[][] values,int[] y,int maxNumIters,int numLambdas,double minLambdaRatio,double l1Ratio){
  double[] w=new double[attrs.length];
  double intercept=0;
  double[] pTrain=new double[y.length];
  double[] rTrain=new double[y.length];
  OptimUtils.computePseudoResidual(pTrain,y,rTrain);
  double[] theta=new double[values.length];
  for (int i=0; i < values.length; i++) {
    theta[i]=StatUtils.sumSq(values[i]) / 4;
  }
  double maxLambda=findMaxLambda(indices,values,y,pTrain,rTrain,l1Ratio);
  double alpha=Math.pow(minLambdaRatio,1.0 / numLambdas);
  GLM[] glms=new GLM[numLambdas];
  double lambda=maxLambda;
  for (int g=0; g < glms.length; g++) {
    final double lambda1=lambda * l1Ratio;
    final double lambda2=lambda * (1 - l1Ratio);
    final double tl1=lambda1 * y.length;
    final double tl2=lambda2 * y.length;
    double prevLoss=GLMOptimUtils.computeElasticNetLoss(pTrain,y,w,lambda1,lambda2);
    for (int iter=0; iter < maxNumIters; iter++) {
      if (fitIntercept) {
        intercept+=OptimUtils.fitIntercept(pTrain,rTrain,y);
      }
      doOnePass(indices,values,theta,y,tl1,tl2,w,pTrain,rTrain);
      double currLoss=GLMOptimUtils.computeElasticNetLoss(pTrain,y,w,lambda1,lambda2);
      if (verbose) {
        System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ ""String_Node_Str""+ currLoss);
      }
      if (OptimUtils.isConverged(prevLoss,currLoss,epsilon)) {
        break;
      }
      prevLoss=currLoss;
    }
    glms[g]=GLMOptimUtils.getGLM(attrs,w,intercept);
    lambda*=alpha;
  }
  return glms;
}",0.9503361526783778
117236,"/** 
 * Builds elastic-net penalized regressors for a sequence of regularization parameter lambdas. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param numLambdas the number of lambdas.
 * @param minLambdaRatio the minimum lambda is minLambdaRatio * max lambda.
 * @param l1Ratio the L1 ratio.
 * @return elastic-net penalized regressors.
 */
public GLM[] buildRegressors(int[] attrs,int[][] indices,double[][] values,double[] y,int maxNumIters,int numLambdas,double minLambdaRatio,double l1Ratio){
  double[] w=new double[attrs.length];
  double intercept=0;
  GLM[] glms=new GLM[numLambdas];
  double[] rTrain=new double[y.length];
  for (int i=0; i < rTrain.length; i++) {
    rTrain[i]=y[i];
  }
  double[] sq=new double[values.length];
  for (int i=0; i < values.length; i++) {
    sq[i]=StatUtils.sumSq(values[i]);
  }
  double maxLambda=findMaxLambda(indices,values,y,l1Ratio);
  double alpha=Math.pow(minLambdaRatio,1.0 / numLambdas);
  double lambda=maxLambda;
  for (int g=0; g < glms.length; g++) {
    final double lambda1=lambda * l1Ratio;
    final double lambda2=lambda * (1 - l1Ratio);
    final double tl1=lambda1 * y.length;
    final double tl2=lambda2 * y.length;
    double prevLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
    for (int iter=0; iter < maxNumIters; iter++) {
      if (fitIntercept) {
        intercept+=OptimUtils.fitIntercept(rTrain);
      }
      doOnePass(indices,values,sq,tl1,tl2,w,rTrain);
      double currLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
      if (verbose) {
        System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ currLoss);
      }
      if (prevLoss - currLoss < epsilon) {
        break;
      }
      prevLoss=currLoss;
    }
    double currLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
    System.out.println(""String_Node_Str"" + g + ""String_Node_Str""+ lambda+ ""String_Node_Str""+ currLoss+ ""String_Node_Str""+ StatUtils.rms(rTrain));
    lambda*=alpha;
    glms[g]=GLMOptimUtils.getGLM(attrs,w,intercept);
  }
  return glms;
}","/** 
 * Builds elastic-net penalized regressors for a sequence of regularization parameter lambdas. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param numLambdas the number of lambdas.
 * @param minLambdaRatio the minimum lambda is minLambdaRatio * max lambda.
 * @param l1Ratio the L1 ratio.
 * @return elastic-net penalized regressors.
 */
public GLM[] buildRegressors(int[] attrs,int[][] indices,double[][] values,double[] y,int maxNumIters,int numLambdas,double minLambdaRatio,double l1Ratio){
  double[] w=new double[attrs.length];
  double intercept=0;
  GLM[] glms=new GLM[numLambdas];
  double[] rTrain=new double[y.length];
  for (int i=0; i < rTrain.length; i++) {
    rTrain[i]=y[i];
  }
  double[] sq=new double[values.length];
  for (int i=0; i < values.length; i++) {
    sq[i]=StatUtils.sumSq(values[i]);
  }
  double maxLambda=findMaxLambda(indices,values,y,l1Ratio);
  double alpha=Math.pow(minLambdaRatio,1.0 / numLambdas);
  double lambda=maxLambda;
  for (int g=0; g < glms.length; g++) {
    final double lambda1=lambda * l1Ratio;
    final double lambda2=lambda * (1 - l1Ratio);
    final double tl1=lambda1 * y.length;
    final double tl2=lambda2 * y.length;
    double prevLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
    for (int iter=0; iter < maxNumIters; iter++) {
      if (fitIntercept) {
        intercept+=OptimUtils.fitIntercept(rTrain);
      }
      doOnePass(indices,values,sq,tl1,tl2,w,rTrain);
      double currLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
      if (verbose) {
        System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ currLoss);
      }
      if (OptimUtils.isConverged(prevLoss,currLoss,epsilon)) {
        break;
      }
      prevLoss=currLoss;
    }
    double currLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
    System.out.println(""String_Node_Str"" + g + ""String_Node_Str""+ lambda+ ""String_Node_Str""+ currLoss+ ""String_Node_Str""+ StatUtils.rms(rTrain));
    lambda*=alpha;
    glms[g]=GLMOptimUtils.getGLM(attrs,w,intercept);
  }
  return glms;
}",0.9840871021775544
117237,"/** 
 * Builds an elastic-net penalized regressor on sparse inputs. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param lambda the lambda.
 * @param l1Ratio the L1 ratio.
 * @return an elastic-net penalized regressor.
 */
public GLM buildRegressor(int[] attrs,int[][] indices,double[][] values,double[] y,int maxNumIters,double lambda,double l1Ratio){
  double[] w=new double[attrs.length];
  double intercept=0;
  double[] rTrain=new double[y.length];
  for (int i=0; i < rTrain.length; i++) {
    rTrain[i]=y[i];
  }
  double[] sq=new double[attrs.length];
  for (int i=0; i < values.length; i++) {
    sq[i]=StatUtils.sumSq(values[i]);
  }
  final double lambda1=lambda * l1Ratio;
  final double lambda2=lambda * (1 - l1Ratio);
  final double tl1=lambda1 * y.length;
  final double tl2=lambda2 * y.length;
  double prevLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
  for (int iter=0; iter < maxNumIters; iter++) {
    if (fitIntercept) {
      intercept+=OptimUtils.fitIntercept(rTrain);
    }
    doOnePass(indices,values,sq,tl1,tl2,w,rTrain);
    double currLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
    if (verbose) {
      System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ ""String_Node_Str""+ currLoss);
    }
    if (prevLoss - currLoss < epsilon) {
      break;
    }
    prevLoss=currLoss;
  }
  return GLMOptimUtils.getGLM(attrs,w,intercept);
}","/** 
 * Builds an elastic-net penalized regressor on sparse inputs. Each row of the input represents a feature (instead of a data point), i.e., in column-oriented format. This procedure does not assume the data is normalized or centered.
 * @param attrs the attribute list.
 * @param indices the indices.
 * @param values the values.
 * @param y the targets.
 * @param maxNumIters the maximum number of iterations.
 * @param lambda the lambda.
 * @param l1Ratio the L1 ratio.
 * @return an elastic-net penalized regressor.
 */
public GLM buildRegressor(int[] attrs,int[][] indices,double[][] values,double[] y,int maxNumIters,double lambda,double l1Ratio){
  double[] w=new double[attrs.length];
  double intercept=0;
  double[] rTrain=new double[y.length];
  for (int i=0; i < rTrain.length; i++) {
    rTrain[i]=y[i];
  }
  double[] sq=new double[attrs.length];
  for (int i=0; i < values.length; i++) {
    sq[i]=StatUtils.sumSq(values[i]);
  }
  final double lambda1=lambda * l1Ratio;
  final double lambda2=lambda * (1 - l1Ratio);
  final double tl1=lambda1 * y.length;
  final double tl2=lambda2 * y.length;
  double prevLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
  for (int iter=0; iter < maxNumIters; iter++) {
    if (fitIntercept) {
      intercept+=OptimUtils.fitIntercept(rTrain);
    }
    doOnePass(indices,values,sq,tl1,tl2,w,rTrain);
    double currLoss=GLMOptimUtils.computeElasticNetLoss(rTrain,w,lambda1,lambda2);
    if (verbose) {
      System.out.println(""String_Node_Str"" + iter + ""String_Node_Str""+ ""String_Node_Str""+ currLoss);
    }
    if (OptimUtils.isConverged(prevLoss,currLoss,epsilon)) {
      break;
    }
    prevLoss=currLoss;
  }
  return GLMOptimUtils.getGLM(attrs,w,intercept);
}",0.9867205542725174
117238,"static GLM getGLM(int[] attrs,double[] w,double intercept){
  GLM glm=attrs.length == 0 ? new GLM(0) : new GLM(attrs[attrs.length - 1] + 1);
  for (int i=0; i < attrs.length; i++) {
    glm.w[0][attrs[i]]=w[i];
  }
  glm.intercept[0]=intercept;
  return glm;
}","static GLM getGLM(int[] attrs,double[] w,double intercept){
  final int p=attrs.length == 0 ? 0 : StatUtils.max(attrs) + 1;
  GLM glm=new GLM(p);
  for (int i=0; i < attrs.length; i++) {
    glm.w[0][attrs[i]]=w[i];
  }
  glm.intercept[0]=intercept;
  return glm;
}",0.8
117239,"@Override public String stringValue(){
  int offset=this.getTzOffsetMinutes();
  if (offset == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder();
  if (offset < 0) {
    stringBuilder.append('-');
  }
 else {
    stringBuilder.append('+');
  }
  int hourPart=offset / 60;
  int minutePart=offset - (hourPart * 60);
  stringBuilder.append(String.format(""String_Node_Str"",hourPart));
  stringBuilder.append(':');
  stringBuilder.append(String.format(""String_Node_Str"",minutePart));
  return stringBuilder.toString();
}","@Override public String stringValue(){
  int offset=this.getTzOffsetMinutes();
  if (offset == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder();
  if (offset < 0) {
    stringBuilder.append('-');
    offset=offset * -1;
  }
 else {
    stringBuilder.append('+');
  }
  int hourPart=offset / 60;
  int minutePart=offset - (hourPart * 60);
  stringBuilder.append(String.format(""String_Node_Str"",hourPart));
  stringBuilder.append(':');
  stringBuilder.append(String.format(""String_Node_Str"",minutePart));
  return stringBuilder.toString();
}",0.9788359788359788
117240,"protected static PolicyDef newInstance(Document document,PolicySet policySetParent) throws DOMStructureException {
  PolicyDef policyDef=null;
  try {
    Node rootNode=document.getFirstChild();
    if (rootNode == null) {
      throw new Exception(""String_Node_Str"");
    }
    if (DOMUtil.isInNamespace(rootNode,XACML3.XMLNS)) {
      if (XACML3.ELEMENT_POLICY.equals(rootNode.getLocalName())) {
        policyDef=DOMPolicy.newInstance(rootNode,policySetParent,null);
        if (policyDef == null) {
          throw new DOMStructureException(""String_Node_Str"");
        }
      }
 else       if (XACML3.ELEMENT_POLICYSET.equals(rootNode.getLocalName())) {
        policyDef=DOMPolicySet.newInstance(rootNode,policySetParent,null);
        if (policyDef == null) {
          throw new DOMStructureException(""String_Node_Str"");
        }
      }
 else {
        throw DOMUtil.newUnexpectedElementException(rootNode);
      }
    }
 else {
      throw DOMUtil.newUnexpectedElementException(rootNode);
    }
  }
 catch (  Exception ex) {
    throw new DOMStructureException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  return policyDef;
}","protected static PolicyDef newInstance(Document document,PolicySet policySetParent) throws DOMStructureException {
  PolicyDef policyDef=null;
  try {
    Node rootNode=document.getFirstChild();
    if (rootNode == null) {
      throw new Exception(""String_Node_Str"");
    }
    while (true) {
      if (rootNode.getNodeType() != Node.COMMENT_NODE) {
        break;
      }
      rootNode=rootNode.getNextSibling();
      if (rootNode == null) {
        throw new Exception(""String_Node_Str"");
      }
    }
    if (DOMUtil.isInNamespace(rootNode,XACML3.XMLNS)) {
      if (XACML3.ELEMENT_POLICY.equals(rootNode.getLocalName())) {
        policyDef=DOMPolicy.newInstance(rootNode,policySetParent,null);
        if (policyDef == null) {
          throw new DOMStructureException(""String_Node_Str"");
        }
      }
 else       if (XACML3.ELEMENT_POLICYSET.equals(rootNode.getLocalName())) {
        policyDef=DOMPolicySet.newInstance(rootNode,policySetParent,null);
        if (policyDef == null) {
          throw new DOMStructureException(""String_Node_Str"");
        }
      }
 else {
        throw DOMUtil.newUnexpectedElementException(rootNode);
      }
    }
 else {
      throw DOMUtil.newUnexpectedElementException(rootNode);
    }
  }
 catch (  Exception ex) {
    throw new DOMStructureException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  return policyDef;
}",0.9072082835523696
117241,"/** 
 * readPolicy - does the work to read in policy data from a file.
 * @param policy - The path to the policy file.
 * @return - The policy data object. This *should* be either a PolicySet or a Policy.
 */
public static Object readPolicy(InputStream is){
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    dbf.setNamespaceAware(true);
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(is);
    NodeList nodes=doc.getChildNodes();
    Node node=nodes.item(0);
    Element e=null;
    if (node.getNodeType() == Node.ELEMENT_NODE) {
      e=(Element)node;
      if (e.getNamespaceURI().equals(""String_Node_Str"")) {
        if (e.getNodeName().endsWith(""String_Node_Str"")) {
          JAXBContext context=JAXBContext.newInstance(PolicyType.class);
          Unmarshaller um=context.createUnmarshaller();
          JAXBElement<PolicyType> root=um.unmarshal(e,PolicyType.class);
          return root.getValue();
        }
 else         if (e.getNodeName().endsWith(""String_Node_Str"")) {
          JAXBContext context=JAXBContext.newInstance(PolicySetType.class);
          Unmarshaller um=context.createUnmarshaller();
          JAXBElement<PolicySetType> root=um.unmarshal(e,PolicySetType.class);
          return root.getValue();
        }
 else {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + e.getNodeName());
          }
        }
      }
 else {
        logger.warn(""String_Node_Str"" + e.getNamespaceURI());
      }
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + node.getNodeName() + ""String_Node_Str""+ node.getNodeType()+ ""String_Node_Str""+ node.getNodeValue());
      }
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
  }
  return null;
}","/** 
 * readPolicy - does the work to read in policy data from a file.
 * @param policy - The path to the policy file.
 * @return - The policy data object. This *should* be either a PolicySet or a Policy.
 */
public static Object readPolicy(InputStream is){
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    dbf.setNamespaceAware(true);
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document doc=db.parse(is);
    NodeList nodes=doc.getChildNodes();
    Node node=null;
    for (int i=0; i < nodes.getLength(); i++) {
      if (nodes.item(i).getNodeType() != Node.COMMENT_NODE) {
        node=nodes.item(i);
        break;
      }
    }
    Element e=null;
    if (node != null && node.getNodeType() == Node.ELEMENT_NODE) {
      e=(Element)node;
      if (e.getNamespaceURI().equals(""String_Node_Str"")) {
        if (e.getNodeName().endsWith(""String_Node_Str"")) {
          JAXBContext context=JAXBContext.newInstance(PolicyType.class);
          Unmarshaller um=context.createUnmarshaller();
          JAXBElement<PolicyType> root=um.unmarshal(e,PolicyType.class);
          return root.getValue();
        }
 else         if (e.getNodeName().endsWith(""String_Node_Str"")) {
          JAXBContext context=JAXBContext.newInstance(PolicySetType.class);
          Unmarshaller um=context.createUnmarshaller();
          JAXBElement<PolicySetType> root=um.unmarshal(e,PolicySetType.class);
          return root.getValue();
        }
 else {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + e.getNodeName());
          }
        }
      }
 else {
        logger.warn(""String_Node_Str"" + e.getNamespaceURI());
      }
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + node.getNodeName() + ""String_Node_Str""+ node.getNodeType()+ ""String_Node_Str""+ node.getNodeValue());
      }
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
  }
  return null;
}",0.9419456066945606
117242,"/** 
 * Creates an   {@link com.att.research.xacml.api.Attribute} from the value associated with the field with the given <code>fieldName</code>.
 * @param resultSet the {@link java.sql.ResultSet} containing the current row from the database
 * @param fieldName the <code>String</code> name of the field containing the attribute value
 * @param pipRequestAttribute the {@link com.att.research.xacml.api.pip.PIPRequest} for the <code>Attribute</code> to create
 * @return a new <code>Attribute</code> with the value of the given <code>fieldName</code>.
 */
protected Attribute getAttributeFromResultSet(ResultSet resultSet,String fieldName,PIPRequest pipRequestAttribute){
  AttributeValue<?> attributeValue=null;
  Identifier identifierDataType=pipRequestAttribute.getDataTypeId();
  try {
    DataType<?> dataType=dataTypeFactory.getDataType(identifierDataType);
    if (dataType == null) {
      this.logger.warn(""String_Node_Str"" + pipRequestAttribute.getDataTypeId().stringValue());
      return null;
    }
    if (identifierDataType.equals(XACML3.ID_DATATYPE_BOOLEAN)) {
      attributeValue=dataType.createAttributeValue(resultSet.getBoolean(fieldName));
    }
 else     if (identifierDataType.equals(XACML3.ID_DATATYPE_DATE) || identifierDataType.equals(XACML3.ID_DATATYPE_DATETIME)) {
      attributeValue=dataType.createAttributeValue(resultSet.getDate(fieldName));
    }
 else     if (identifierDataType.equals(XACML3.ID_DATATYPE_DOUBLE)) {
      attributeValue=dataType.createAttributeValue(resultSet.getDouble(fieldName));
    }
 else     if (identifierDataType.equals(XACML3.ID_DATATYPE_INTEGER)) {
      attributeValue=dataType.createAttributeValue(resultSet.getInt(fieldName));
    }
 else {
      String stringValue=resultSet.getString(fieldName);
      if (stringValue != null) {
        attributeValue=dataType.createAttributeValue(stringValue);
      }
    }
  }
 catch (  Exception ex) {
    this.logger.error(""String_Node_Str"" + fieldName + ""String_Node_Str""+ identifierDataType.stringValue()+ ""String_Node_Str""+ ex.toString(),ex);
    return null;
  }
  String issuer=this.defaultIssuer;
  if (pipRequestAttribute.getIssuer() != null) {
    issuer=pipRequestAttribute.getIssuer();
  }
  return new StdAttribute(pipRequestAttribute.getCategory(),pipRequestAttribute.getAttributeId(),attributeValue,issuer,false);
}","/** 
 * Creates an   {@link com.att.research.xacml.api.Attribute} from the value associated with the field with the given <code>fieldName</code>.
 * @param resultSet the {@link java.sql.ResultSet} containing the current row from the database
 * @param fieldName the <code>String</code> name of the field containing the attribute value
 * @param pipRequestAttribute the {@link com.att.research.xacml.api.pip.PIPRequest} for the <code>Attribute</code> to create
 * @return a new <code>Attribute</code> with the value of the given <code>fieldName</code>.
 */
protected Attribute getAttributeFromResultSet(ResultSet resultSet,String fieldName,PIPRequest pipRequestAttribute){
  AttributeValue<?> attributeValue=null;
  Identifier identifierDataType=pipRequestAttribute.getDataTypeId();
  try {
    DataType<?> dataType=dataTypeFactory.getDataType(identifierDataType);
    if (dataType == null) {
      this.logger.warn(""String_Node_Str"" + pipRequestAttribute.getDataTypeId().stringValue());
      return null;
    }
    int columnIndex=-1;
    try {
      columnIndex=resultSet.findColumn(fieldName);
    }
 catch (    Exception e) {
      try {
        columnIndex=Integer.parseInt(fieldName);
      }
 catch (      Exception e1) {
        logger.error(""String_Node_Str"" + fieldName);
      }
    }
    if (this.logger.isDebugEnabled()) {
      this.logger.debug(""String_Node_Str"" + fieldName + ""String_Node_Str""+ columnIndex);
    }
    if (identifierDataType.equals(XACML3.ID_DATATYPE_BOOLEAN)) {
      attributeValue=dataType.createAttributeValue(resultSet.getBoolean(columnIndex));
    }
 else     if (identifierDataType.equals(XACML3.ID_DATATYPE_DATE) || identifierDataType.equals(XACML3.ID_DATATYPE_DATETIME)) {
      attributeValue=dataType.createAttributeValue(resultSet.getDate(columnIndex));
    }
 else     if (identifierDataType.equals(XACML3.ID_DATATYPE_DOUBLE)) {
      attributeValue=dataType.createAttributeValue(resultSet.getDouble(columnIndex));
    }
 else     if (identifierDataType.equals(XACML3.ID_DATATYPE_INTEGER)) {
      attributeValue=dataType.createAttributeValue(resultSet.getInt(columnIndex));
    }
 else {
      String stringValue=resultSet.getString(columnIndex);
      if (stringValue != null) {
        attributeValue=dataType.createAttributeValue(stringValue);
      }
    }
  }
 catch (  Exception ex) {
    this.logger.error(""String_Node_Str"" + fieldName + ""String_Node_Str""+ identifierDataType.stringValue()+ ""String_Node_Str""+ ex.toString(),ex);
    return null;
  }
  String issuer=this.defaultIssuer;
  if (pipRequestAttribute.getIssuer() != null) {
    issuer=pipRequestAttribute.getIssuer();
  }
  return new StdAttribute(pipRequestAttribute.getCategory(),pipRequestAttribute.getAttributeId(),attributeValue,issuer,false);
}",0.8982552440697902
117243,"private void addObligation(Object parent,ObligationExpressionType expression,boolean bAdd){
  ObligationExpressionsType expressions=null;
  if (parent instanceof PolicySetType) {
    expressions=((PolicySetType)parent).getObligationExpressions();
    if (expressions == null) {
      expressions=new ObligationExpressionsType();
      ((PolicySetType)parent).setObligationExpressions(expressions);
    }
  }
 else   if (parent instanceof PolicyType) {
    expressions=((PolicyType)parent).getObligationExpressions();
    if (expressions == null) {
      expressions=new ObligationExpressionsType();
      ((PolicyType)parent).setObligationExpressions(expressions);
    }
  }
 else   if (parent instanceof RuleType) {
    expressions=((RuleType)parent).getObligationExpressions();
    if (expressions == null) {
      expressions=new ObligationExpressionsType();
      ((RuleType)parent).setObligationExpressions(expressions);
    }
  }
  if (bAdd) {
    expressions.getObligationExpression().add(expression);
  }
  this.obligations.put(expression,parent);
}","private void addObligation(Object parent,ObligationExpressionType expression,boolean bAdd){
  ObligationExpressionsType expressions=null;
  if (parent instanceof PolicySetType) {
    expressions=((PolicySetType)parent).getObligationExpressions();
    if (expressions == null) {
      expressions=new ObligationExpressionsType();
      ((PolicySetType)parent).setObligationExpressions(expressions);
    }
  }
 else   if (parent instanceof PolicyType) {
    expressions=((PolicyType)parent).getObligationExpressions();
    if (expressions == null) {
      expressions=new ObligationExpressionsType();
      ((PolicyType)parent).setObligationExpressions(expressions);
    }
  }
 else   if (parent instanceof RuleType) {
    expressions=((RuleType)parent).getObligationExpressions();
    if (expressions == null) {
      expressions=new ObligationExpressionsType();
      ((RuleType)parent).setObligationExpressions(expressions);
    }
  }
 else   if (parent instanceof ObligationExpressionsType) {
    expressions=(ObligationExpressionsType)parent;
    if (bAdd) {
      expressions.getObligationExpression().add(expression);
    }
    parent=this.getParent(expressions);
    this.obligations.put(expression,parent);
    return;
  }
  if (bAdd) {
    expressions.getObligationExpression().add(expression);
  }
  this.obligations.put(expression,parent);
}",0.877906976744186
117244,"private void addAdvice(Object parent,AdviceExpressionType expression,boolean bAdd){
  AdviceExpressionsType expressions=null;
  if (parent instanceof PolicySetType) {
    expressions=((PolicySetType)parent).getAdviceExpressions();
    if (expressions == null) {
      expressions=new AdviceExpressionsType();
      ((PolicySetType)parent).setAdviceExpressions(expressions);
    }
  }
 else   if (parent instanceof PolicyType) {
    expressions=((PolicyType)parent).getAdviceExpressions();
    if (expressions == null) {
      expressions=new AdviceExpressionsType();
      ((PolicyType)parent).setAdviceExpressions(expressions);
    }
  }
 else   if (parent instanceof RuleType) {
    expressions=((RuleType)parent).getAdviceExpressions();
    if (expressions == null) {
      expressions=new AdviceExpressionsType();
      ((RuleType)parent).setAdviceExpressions(expressions);
    }
  }
  if (bAdd) {
    expressions.getAdviceExpression().add(expression);
  }
  this.advice.put(expression,parent);
}","private void addAdvice(Object parent,AdviceExpressionType expression,boolean bAdd){
  AdviceExpressionsType expressions=null;
  if (parent instanceof PolicySetType) {
    expressions=((PolicySetType)parent).getAdviceExpressions();
    if (expressions == null) {
      expressions=new AdviceExpressionsType();
      ((PolicySetType)parent).setAdviceExpressions(expressions);
    }
  }
 else   if (parent instanceof PolicyType) {
    expressions=((PolicyType)parent).getAdviceExpressions();
    if (expressions == null) {
      expressions=new AdviceExpressionsType();
      ((PolicyType)parent).setAdviceExpressions(expressions);
    }
  }
 else   if (parent instanceof RuleType) {
    expressions=((RuleType)parent).getAdviceExpressions();
    if (expressions == null) {
      expressions=new AdviceExpressionsType();
      ((RuleType)parent).setAdviceExpressions(expressions);
    }
  }
 else   if (parent instanceof AdviceExpressionsType) {
    expressions=(AdviceExpressionsType)parent;
    if (bAdd) {
      expressions.getAdviceExpression().add(expression);
    }
    parent=this.getParent(expressions);
    this.advice.put(expression,parent);
    return;
  }
  if (bAdd) {
    expressions.getAdviceExpression().add(expression);
  }
  this.advice.put(expression,parent);
}",0.8783487044356609
117245,"@Override public Object getParent(Object itemId){
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + itemId);
  }
  if (itemId.equals(this.root)) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"");
    }
    return null;
  }
  if (itemId instanceof PolicySetType) {
    return this.policySets.get(itemId);
  }
  if (itemId instanceof PolicyType) {
    return this.policies.get(itemId);
  }
  if (itemId instanceof RuleType) {
    return this.rules.get(itemId);
  }
  if (itemId instanceof TargetType) {
    return this.targets.get(itemId);
  }
  if (itemId instanceof ObligationExpressionType) {
    return this.obligations.get(itemId);
  }
  if (itemId instanceof AdviceExpressionType) {
    return this.advice.get(itemId);
  }
  if (itemId instanceof AllOfType) {
    return this.allofs.get(itemId);
  }
  if (itemId instanceof AnyOfType) {
    return this.anyofs.get(itemId);
  }
  if (itemId instanceof MatchType) {
    return this.matches.get(itemId);
  }
  if (itemId instanceof ConditionType) {
    return this.conditions.get(itemId);
  }
  if (itemId instanceof VariableDefinitionType) {
    return this.variables.get(itemId);
  }
  return null;
}","@Override public Object getParent(Object itemId){
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + itemId);
  }
  assert(itemId != null);
  if (itemId == null) {
    logger.fatal(""String_Node_Str"");
    return null;
  }
  if (itemId.equals(this.root)) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"");
    }
    return null;
  }
  if (itemId instanceof PolicySetType) {
    return this.policySets.get(itemId);
  }
  if (itemId instanceof PolicyType) {
    return this.policies.get(itemId);
  }
  if (itemId instanceof RuleType) {
    return this.rules.get(itemId);
  }
  if (itemId instanceof TargetType) {
    return this.targets.get(itemId);
  }
  if (itemId instanceof ObligationExpressionType) {
    return this.obligations.get(itemId);
  }
  if (itemId instanceof AdviceExpressionType) {
    return this.advice.get(itemId);
  }
  if (itemId instanceof AllOfType) {
    return this.allofs.get(itemId);
  }
  if (itemId instanceof AnyOfType) {
    return this.anyofs.get(itemId);
  }
  if (itemId instanceof MatchType) {
    return this.matches.get(itemId);
  }
  if (itemId instanceof ConditionType) {
    return this.conditions.get(itemId);
  }
  if (itemId instanceof VariableDefinitionType) {
    return this.variables.get(itemId);
  }
  return null;
}",0.8889776357827476
117246,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  PreferenceManager.setDefaultValues(this,R.xml.preferences,false);
  Preferences.getInstance(this).getPreferences().registerOnSharedPreferenceChangeListener(this);
  mConversions=Conversions.getInstance();
  setContentView(R.layout.activity_main);
  setupToolbar();
  setToolbarHomeNavigation(true);
  if (getSupportActionBar() != null)   getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_menu_white_24dp);
  int conversion=Preferences.getInstance(this).getLastConversion();
  setToolbarTitle(mConversions.getById(conversion).getLabelResource());
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerLayout.setDrawerListener(new DrawerLayout.DrawerListener(){
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
    }
    @Override public void onDrawerOpened(    View drawerView){
      hideKeyboard();
    }
    @Override public void onDrawerClosed(    View drawerView){
    }
    @Override public void onDrawerStateChanged(    int newState){
    }
  }
);
  setupDrawer(conversion);
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,ConversionFragment.newInstance(conversion)).commit();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  PreferenceManager.setDefaultValues(this,R.xml.preferences,false);
  Preferences.getInstance(this).getPreferences().registerOnSharedPreferenceChangeListener(this);
  mConversions=Conversions.getInstance();
  setContentView(R.layout.activity_main);
  setupToolbar();
  setToolbarHomeNavigation(true);
  if (getSupportActionBar() != null)   getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_menu_white_24dp);
  int conversion=Preferences.getInstance(this).getLastConversion();
  setToolbarTitle(mConversions.getById(conversion).getLabelResource());
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerLayout.setDrawerListener(new DrawerLayout.DrawerListener(){
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
    }
    @Override public void onDrawerOpened(    View drawerView){
      hideKeyboard();
    }
    @Override public void onDrawerClosed(    View drawerView){
    }
    @Override public void onDrawerStateChanged(    int newState){
    }
  }
);
  setupDrawer(getMenuPositionOfConversion(conversion));
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,ConversionFragment.newInstance(conversion)).commit();
  }
}",0.9816685372240928
117247,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_download:
    mPresenter.onUpdateCurrencyConversions(true);
  return true;
case R.id.menu_clear:
mTxtValue.setText(""String_Node_Str"");
return true;
case R.id.menu_help:
HelpDialogFragment.newInstance().show(getChildFragmentManager(),HelpDialogFragment.TAG);
return true;
case R.id.menu_settings:
PreferencesActivity.start(getActivity());
return true;
case R.id.menu_donate:
DonateActivity.start(getActivity());
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_download:
    mPresenter.onUpdateCurrencyConversions();
  return true;
case R.id.menu_clear:
mTxtValue.setText(""String_Node_Str"");
return true;
case R.id.menu_help:
HelpDialogFragment.newInstance().show(getChildFragmentManager(),HelpDialogFragment.TAG);
return true;
case R.id.menu_settings:
PreferencesActivity.start(getActivity());
return true;
case R.id.menu_donate:
DonateActivity.start(getActivity());
default :
return super.onOptionsItemSelected(item);
}
}",0.9964912280701754
117248,"/** 
 * Get the Unit associated with the checked button in a radio group
 * @param group RadioGroup which contains the button
 * @return Unit associated with checked button
 */
private Unit getCheckedUnit(RadioGroup group){
  int index=group.getCheckedRadioButtonId();
  RadioButton btn=(RadioButton)group.findViewById(index);
  return (Unit)btn.getTag();
}","/** 
 * Get the Unit associated with the checked button in a radio group
 * @param group RadioGroup which contains the button
 * @return Unit associated with checked button
 */
private Unit getCheckedUnit(RadioGroup group){
  int id=group.getCheckedRadioButtonId();
  Conversion c=Conversions.getInstance().getById(mConversionId);
  for (  Unit unit : c.getUnits()) {
    if (unit.getId() == id) {
      return unit;
    }
  }
  return c.getUnits().get(0);
}",0.6895705521472393
117249,"@Override public void onFailure(Call<CurrencyResponse> call,Throwable t){
  if (!Conversions.getInstance().hasCurrency()) {
    mView.showLoadingError(R.string.error_loading_currency);
  }
 else   if (showResult) {
    mView.showToastError(R.string.toast_error_updating_currency);
  }
}","@Override public void onFailure(Call<CurrencyResponse> call,Throwable t){
  if (!Conversions.getInstance().hasCurrency()) {
    mView.showLoadingError(R.string.error_loading_currency);
  }
 else {
    mView.showToastError(R.string.toast_error_updating_currency);
  }
}",0.967509025270758
117250,"public void onGetUnitsToDisplay(@Conversion.id int conversionId){
switch (conversionId) {
case Conversion.CURRENCY:
    onUpdateCurrencyConversions(false);
  if (Conversions.getInstance().hasCurrency()) {
    mView.showUnitsList(Conversions.getInstance().getById(conversionId));
  }
 else {
    mView.showProgressCircle();
  }
break;
default :
mView.showUnitsList(Conversions.getInstance().getById(conversionId));
break;
}
}","public void onGetUnitsToDisplay(@Conversion.id int conversionId){
switch (conversionId) {
case Conversion.CURRENCY:
    if (Conversions.getInstance().hasCurrency()) {
      mView.showUnitsList(Conversions.getInstance().getById(conversionId));
    }
 else {
      mView.showProgressCircle();
    }
  if (!Conversions.getInstance().isCurrencyUpdated()) {
    onUpdateCurrencyConversions();
  }
break;
default :
mView.showUnitsList(Conversions.getInstance().getById(conversionId));
break;
}
}",0.7732749178532311
117251,"@Override public void onResponse(Call<CurrencyResponse> call,Response<CurrencyResponse> response){
  boolean hadCurrency=Conversions.getInstance().hasCurrency();
  Preferences.getInstance(mView.getContext()).saveLatestCurrency(response.body());
  Conversions.getInstance().updateCurrencyConversions(mView.getContext());
  if (hadCurrency) {
    mView.updateCurrencyConversion();
    if (showResult) {
      mView.showToast(R.string.toast_currency_updated);
    }
  }
 else {
    mView.showUnitsList(Conversions.getInstance().getById(Conversion.CURRENCY));
  }
}","@Override public void onResponse(Call<CurrencyResponse> call,Response<CurrencyResponse> response){
  boolean hadCurrency=Conversions.getInstance().hasCurrency();
  Preferences.getInstance(mView.getContext()).saveLatestCurrency(response.body());
  Conversions.getInstance().updateCurrencyConversions(mView.getContext());
  Conversions.getInstance().setCurrencyUpdated(true);
  mView.showToast(R.string.toast_currency_updated);
  if (hadCurrency) {
    mView.updateCurrencyConversion();
  }
 else {
    mView.showUnitsList(Conversions.getInstance().getById(Conversion.CURRENCY));
  }
}",0.7867132867132867
117252,"public void onUpdateCurrencyConversions(final boolean showResult){
  FixerApi.getInstance().getService().getLatestRates().enqueue(new Callback<CurrencyResponse>(){
    @Override public void onResponse(    Call<CurrencyResponse> call,    Response<CurrencyResponse> response){
      boolean hadCurrency=Conversions.getInstance().hasCurrency();
      Preferences.getInstance(mView.getContext()).saveLatestCurrency(response.body());
      Conversions.getInstance().updateCurrencyConversions(mView.getContext());
      if (hadCurrency) {
        mView.updateCurrencyConversion();
        if (showResult) {
          mView.showToast(R.string.toast_currency_updated);
        }
      }
 else {
        mView.showUnitsList(Conversions.getInstance().getById(Conversion.CURRENCY));
      }
    }
    @Override public void onFailure(    Call<CurrencyResponse> call,    Throwable t){
      if (!Conversions.getInstance().hasCurrency()) {
        mView.showLoadingError(R.string.error_loading_currency);
      }
 else       if (showResult) {
        mView.showToastError(R.string.toast_error_updating_currency);
      }
    }
  }
);
}","public void onUpdateCurrencyConversions(){
  FixerApi.getInstance().getService().getLatestRates().enqueue(new Callback<CurrencyResponse>(){
    @Override public void onResponse(    Call<CurrencyResponse> call,    Response<CurrencyResponse> response){
      boolean hadCurrency=Conversions.getInstance().hasCurrency();
      Preferences.getInstance(mView.getContext()).saveLatestCurrency(response.body());
      Conversions.getInstance().updateCurrencyConversions(mView.getContext());
      Conversions.getInstance().setCurrencyUpdated(true);
      mView.showToast(R.string.toast_currency_updated);
      if (hadCurrency) {
        mView.updateCurrencyConversion();
      }
 else {
        mView.showUnitsList(Conversions.getInstance().getById(Conversion.CURRENCY));
      }
    }
    @Override public void onFailure(    Call<CurrencyResponse> call,    Throwable t){
      if (!Conversions.getInstance().hasCurrency()) {
        mView.showLoadingError(R.string.error_loading_currency);
      }
 else {
        mView.showToastError(R.string.toast_error_updating_currency);
      }
    }
  }
);
}",0.8717253839205059
117253,"private Conversions(){
  getAreaConversions();
  getCookingConversions();
  getStorageConversions();
  getEnergyConversions();
  getFuelConversions();
  getLengthConversions();
  getMassConversions();
  getPowerConversions();
  getPressureConversions();
  getSpeedConversions();
  getTemperatureConversions();
  getTimeConversions();
  getTorqueConversions();
  getVolumeConversions();
}","private Conversions(){
  getAreaConversions();
  getCookingConversions();
  getStorageConversions();
  getEnergyConversions();
  getFuelConversions();
  getLengthConversions();
  getMassConversions();
  getPowerConversions();
  getPressureConversions();
  getSpeedConversions();
  getTemperatureConversions();
  getTimeConversions();
  getTorqueConversions();
  getVolumeConversions();
  mCurrencyUpdated=false;
}",0.9675
117254,"private void getStorageConversions(){
  List<Unit> units=new ArrayList<Unit>();
  units.add(new Unit(BIT,R.string.bit,0.00000011920928955078,8388608.0));
  units.add(new Unit(BYTE,R.string.Byte,0.00000095367431640625,1048576.0));
  units.add(new Unit(KILOBIT,R.string.kilobit,0.0001220703125,8192.0));
  units.add(new Unit(KILOBYTE,R.string.kilobyte,0.0009765625,1024.0));
  units.add(new Unit(MEGABIT,R.string.megabit,1.0,1.0));
  units.add(new Unit(MEGABYTE,R.string.megabyte,0.83612736,1.19599004630108026));
  units.add(new Unit(GIGABIT,R.string.gigabit,128.0,0.0078125));
  units.add(new Unit(GIGABYTE,R.string.gigabyte,1024.0,0.0009765625));
  units.add(new Unit(TERABIT,R.string.terabit,131072.0,0.00000762939453125));
  units.add(new Unit(TERABYTE,R.string.terabyte,1048576.0,0.00000095367431640625));
  addConversion(Conversion.STORAGE,new Conversion(Conversion.STORAGE,R.string.storage,units));
}","private void getStorageConversions(){
  List<Unit> units=new ArrayList<Unit>();
  units.add(new Unit(BIT,R.string.bit,0.00000011920928955078,8388608.0));
  units.add(new Unit(BYTE,R.string.Byte,0.00000095367431640625,1048576.0));
  units.add(new Unit(KILOBIT,R.string.kilobit,0.0001220703125,8192.0));
  units.add(new Unit(KILOBYTE,R.string.kilobyte,0.0009765625,1024.0));
  units.add(new Unit(MEGABIT,R.string.megabit,0.125,8.0));
  units.add(new Unit(MEGABYTE,R.string.megabyte,1.0,1.0));
  units.add(new Unit(GIGABIT,R.string.gigabit,128.0,0.0078125));
  units.add(new Unit(GIGABYTE,R.string.gigabyte,1024.0,0.0009765625));
  units.add(new Unit(TERABIT,R.string.terabit,131072.0,0.00000762939453125));
  units.add(new Unit(TERABYTE,R.string.terabyte,1048576.0,0.00000095367431640625));
  addConversion(Conversion.STORAGE,new Conversion(Conversion.STORAGE,R.string.storage,units));
}",0.972640982691234
117255,"@Test public void testStorage(){
  Conversion storage=mConversions.getById(Conversion.STORAGE);
  mPresenter.convert(4.0,storage.getUnitById(BYTE),storage.getUnitById(BIT));
  verify(view,atLeastOnce()).showResult(eq(32.0));
  mPresenter.convert(4.0,storage.getUnitById(KILOBIT),storage.getUnitById(BYTE));
  verify(view,atLeastOnce()).showResult(eq(512.0));
  mPresenter.convert(4.0,storage.getUnitById(KILOBYTE),storage.getUnitById(KILOBIT));
  verify(view,atLeastOnce()).showResult(eq(32.0));
  mPresenter.convert(4.0,storage.getUnitById(MEGABIT),storage.getUnitById(KILOBYTE));
  verify(view,atLeastOnce()).showResult(eq(512.0));
  mPresenter.convert(4.0,storage.getUnitById(MEGABYTE),storage.getUnitById(MEGABIT));
  verify(view,atLeastOnce()).showResult(eq(32.0));
  mPresenter.convert(4.0,storage.getUnitById(GIGABIT),storage.getUnitById(MEGABYTE));
  verify(view,atLeastOnce()).showResult(eq(512.0));
  mPresenter.convert(4.0,storage.getUnitById(GIGABYTE),storage.getUnitById(GIGABIT));
  verify(view,atLeastOnce()).showResult(eq(32.0));
  mPresenter.convert(4.0,storage.getUnitById(TERABIT),storage.getUnitById(GIGABYTE));
  verify(view,atLeastOnce()).showResult(eq(512.0));
  mPresenter.convert(4.0,storage.getUnitById(TERABIT),storage.getUnitById(TERABYTE));
  verify(view,atLeastOnce()).showResult(eq(0.5));
  mPresenter.convert(4.0,storage.getUnitById(BIT),storage.getUnitById(BYTE));
  verify(view,atLeastOnce()).showResult(eq(0.5));
}","@Test public void testStorage(){
  Conversion storage=mConversions.getById(Conversion.STORAGE);
  mPresenter.convert(4.0,storage.getUnitById(BYTE),storage.getUnitById(BIT));
  verify(view,atLeastOnce()).showResult(eq(32.0));
  mPresenter.convert(4.0,storage.getUnitById(KILOBIT),storage.getUnitById(BYTE));
  verify(view,atLeastOnce()).showResult(eq(512.0));
  mPresenter.convert(4.0,storage.getUnitById(KILOBYTE),storage.getUnitById(KILOBIT));
  verify(view,atLeastOnce()).showResult(eq(32.0));
  mPresenter.convert(4.0,storage.getUnitById(MEGABIT),storage.getUnitById(KILOBYTE));
  verify(view,atLeastOnce()).showResult(eq(512.0));
  mPresenter.convert(4.0,storage.getUnitById(MEGABYTE),storage.getUnitById(MEGABIT));
  verify(view,atLeastOnce()).showResult(eq(32.0));
  mPresenter.convert(4.0,storage.getUnitById(GIGABIT),storage.getUnitById(MEGABYTE));
  verify(view,atLeastOnce()).showResult(eq(512.0));
  mPresenter.convert(4.0,storage.getUnitById(GIGABYTE),storage.getUnitById(GIGABIT));
  verify(view,atLeastOnce()).showResult(eq(32.0));
  mPresenter.convert(4.0,storage.getUnitById(TERABIT),storage.getUnitById(GIGABYTE));
  verify(view,atLeastOnce()).showResult(eq(512.0));
  mPresenter.convert(4.0,storage.getUnitById(TERABIT),storage.getUnitById(TERABYTE));
  verify(view,atLeastOnce()).showResult(eq(0.5));
  mPresenter.convert(4.0,storage.getUnitById(BIT),storage.getUnitById(BYTE));
  verify(view,atLeastOnce()).showResult(eq(0.5));
  mPresenter.convert(1.0,storage.getUnitById(GIGABYTE),storage.getUnitById(MEGABYTE));
  verify(view,atLeastOnce()).showResult(eq(1024.0));
}",0.9539170506912442
117256,"@Override public SerializablePredicate<OProperty> getPredicateForTableProperties(){
  return (prop) -> CustomAttribute.DISPLAYABLE.getValue(prop,true);
}","@Override public SerializablePredicate<OProperty> getPredicateForTableProperties(){
  return (prop) -> CustomAttribute.DISPLAYABLE.getValue(prop);
}",0.9833887043189368
117257,"@Override public SerializablePredicate<OProperty> getPredicateForListProperties(){
  return (prop) -> !CustomAttribute.HIDDEN.getValue(prop,false);
}","@Override public SerializablePredicate<OProperty> getPredicateForListProperties(){
  return (prop) -> !(Boolean)CustomAttribute.HIDDEN.getValue(prop);
}",0.9501661129568106
117258,"public DefaultPageHeader(String id,IModel<String> model){
  super(id,model);
  add(new Label(""String_Node_Str"",model));
  add(menu=new DefaultPageHeaderMenu(""String_Node_Str""));
}","public DefaultPageHeader(String id,IModel<String> model){
  super(id,model);
  add(new Label(""String_Node_Str"",model));
  add(menu=new DefaultPageHeaderMenu(""String_Node_Str""));
  OSecurityHelper.secureComponent(menu,OSecurityHelper.requireOClass(OWidgetsModule.OCLASS_DASHBOARD,OrientPermission.UPDATE));
}",0.7366255144032922
117259,"@Override public void sendMail(String to,OMail mail) throws MessagingException, UnsupportedEncodingException {
  final OMailSettings settings=mail.getMailSettings();
  final Session session=createSession(settings);
  final Message message=new MimeMessage(session);
  message.setFrom(createFrom(mail,settings));
  message.setRecipient(Message.RecipientType.TO,new InternetAddress(to));
  message.setSubject(mail.getSubject());
  message.setContent(mail.getText(),""String_Node_Str"");
  Transport.send(message);
}","@Override public void sendMail(String to,OMail mail) throws MessagingException, UnsupportedEncodingException {
  mail.reload();
  final OMailSettings settings=mail.getMailSettings();
  final Session session=createSession(settings);
  final Message message=new MimeMessage(session);
  message.setFrom(createFrom(mail,settings));
  message.setRecipient(Message.RecipientType.TO,new InternetAddress(to));
  message.setSubject(mail.getSubject());
  message.setContent(mail.getText(),""String_Node_Str"");
  Transport.send(message);
}",0.9836065573770492
117260,"@Override public void sendMailAsync(String to,OMail mail,Consumer<Boolean> f){
  new Thread(() -> {
    boolean success=false;
    try {
      sendMail(to,mail);
      success=true;
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
 finally {
      if (f != null)       f.accept(success);
    }
  }
).start();
}","@Override public void sendMailAsync(String to,OMail mail,Consumer<Boolean> f){
  OrienteerWebSession session=OrienteerWebSession.get();
  OrienteerWebApplication app=OrienteerWebApplication.get();
  RequestCycle requestCycle=RequestCycle.get();
  new Thread(() -> {
    boolean success=false;
    try {
      ThreadContext.setSession(session);
      ThreadContext.setApplication(app);
      ThreadContext.setRequestCycle(requestCycle);
      sendMail(to,mail);
      success=true;
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
 finally {
      if (f != null)       f.accept(success);
    }
  }
).start();
}",0.6875653082549634
117261,"@Before public void init(){
  OMailSettings settings=new OMailSettings().setEmail(""String_Node_Str"").setPassword(""String_Node_Str"").setSmtpHost(""String_Node_Str"").setSmtpPort(587).setTlsSsl(true);
  mail=new OMail().setMailSettings(settings).setName(""String_Node_Str"").setFrom(""String_Node_Str"").setSubject(""String_Node_Str"").setText(""String_Node_Str"");
  to=""String_Node_Str"";
}","@Before public void init(){
  String email=""String_Node_Str"";
  String password=""String_Node_Str"";
  String mailName=""String_Node_Str"";
  to=""String_Node_Str"";
  Function<String,OMail> query=(name) -> {
    List<ODocument> docs=OrienteerWebSession.get().getDatabase().query(new OSQLSynchQuery<>(""String_Node_Str"" + OMail.CLASS_NAME + ""String_Node_Str""+ OMail.NAME+ ""String_Node_Str"",1),name);
    return docs != null && !docs.isEmpty() ? new OMail(docs.get(0)) : null;
  }
;
  Consumer<String> create=(name) -> {
    OMailSettings settings=new OMailSettings().setEmail(email).setPassword(password).setSmtpHost(""String_Node_Str"").setSmtpPort(587).setTlsSsl(true);
    OMail mail=new OMail().setMailSettings(settings).setName(name).setFrom(""String_Node_Str"").setSubject(""String_Node_Str"").setText(""String_Node_Str"");
    settings.sudoSave();
    mail.sudoSave();
  }
;
  create.accept(mailName);
  mail=query.apply(mailName);
  assertNotNull(mail);
}",0.3858327053504145
117262,"@Test @Ignore public void testSendEmail(){
  try {
    mailService.sendMail(to,mail);
  }
 catch (  MessagingException|UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
}","@Test public void testSendEmail(){
  try {
    mailService.sendMail(to,mail);
  }
 catch (  MessagingException|UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
}",0.979381443298969
117263,"@After public void destroy(){
  mail=null;
}","@After public void destroy(){
  new DBClosure<Void>(){
    @Override protected Void execute(    ODatabaseDocument db){
      db.command(new OCommandSQL(""String_Node_Str"")).execute(mail.getDocument());
      db.command(new OCommandSQL(""String_Node_Str"")).execute(mail.getMailSettings().getDocument());
      return null;
    }
  }
.execute();
}",0.1808785529715762
117264,"@Test @Ignore public void testSendEmailAsyncWithCallback() throws InterruptedException {
}","@Test public void testSendEmailAsyncWithCallback() throws InterruptedException {
}",0.9534883720930232
117265,"public static OTaskManager get(){
  OrienteerWebApplication app=OrienteerWebApplication.lookupApplication();
  OTaskManager taskManager=app.getMetaData(TASK_MANAGER_KEY);
  if (taskManager == null) {
synchronized (OTaskManager.class) {
      if (taskManager == null) {
        taskManager=new OTaskManager();
        app.setMetaData(TASK_MANAGER_KEY,taskManager);
      }
    }
  }
  return taskManager;
}","public static OTaskManager get(){
  OrienteerWebApplication app=OrienteerWebApplication.lookupApplication();
  OTaskManager taskManager=app.getMetaData(TASK_MANAGER_KEY);
  if (taskManager == null) {
synchronized (OTaskManager.class) {
      taskManager=app.getMetaData(TASK_MANAGER_KEY);
      if (taskManager == null) {
        taskManager=new OTaskManager();
        app.setMetaData(TASK_MANAGER_KEY,taskManager);
      }
    }
  }
  return taskManager;
}",0.9385863267670916
117266,"public <V>void persist(final String field,final V value){
  document.field(field,value);
  if (document.getIdentity().isPersistent()) {
    DBClosure.sudoSave(document);
  }
}","public <V>void persist(final String field,final V value){
  document.field(field,value);
  if (document.getIdentity().isPersistent()) {
    sudoSave();
  }
}",0.9457831325301204
117267,"@Override public void onRecordAfterRead(ODocument iDocument){
  super.onRecordAfterRead(iDocument);
  OClass oClass=iDocument.getSchemaClass();
  if (oClass != null) {
    List<String> calcProperties=getCalcProperties(iDocument);
    if (calcProperties != null && calcProperties.size() > 0) {
      for (      String calcProperty : calcProperties) {
        final OProperty property=oClass.getProperty(calcProperty);
        String script=CustomAttribute.CALC_SCRIPT.getValue(property);
        if (!Strings.isEmpty(script)) {
          try {
            List<ODocument> calculated;
            if (FULL_QUERY_PATTERN.matcher(script).find()) {
              calculated=iDocument.getDatabase().query(new OSQLSynchQuery<Object>(script),iDocument);
            }
 else {
              script=""String_Node_Str"" + script + ""String_Node_Str""+ iDocument.getIdentity();
              calculated=iDocument.getDatabase().query(new OSQLSynchQuery<Object>(script));
            }
            if (calculated != null && calculated.size() > 0) {
              OType type=property.getType();
              Object value;
              if (type.isMultiValue()) {
                final OType linkedType=property.getLinkedType();
                value=linkedType == null ? calculated : Lists.transform(calculated,new Function<ODocument,Object>(){
                  @Override public Object apply(                  ODocument input){
                    return OType.convert(input.field(""String_Node_Str""),linkedType.getDefaultJavaType());
                  }
                }
);
              }
 else {
                value=calculated.get(0).field(""String_Node_Str"");
              }
              value=OType.convert(value,type.getDefaultJavaType());
              iDocument.field(calcProperty,value);
            }
          }
 catch (          OCommandSQLParsingException e) {
            LOG.warn(""String_Node_Str"",e);
            iDocument.field(calcProperty,e.getLocalizedMessage());
          }
        }
      }
    }
  }
}","@Override public void onRecordAfterRead(ODocument iDocument){
  super.onRecordAfterRead(iDocument);
  OClass oClass=iDocument.getSchemaClass();
  if (oClass != null) {
    List<String> calcProperties=getCalcProperties(iDocument);
    if (calcProperties != null && calcProperties.size() > 0) {
      for (      String calcProperty : calcProperties) {
        final OProperty property=oClass.getProperty(calcProperty);
        String script=CustomAttribute.CALC_SCRIPT.getValue(property);
        if (!Strings.isEmpty(script)) {
          try {
            List<ODocument> calculated;
            if (FULL_QUERY_PATTERN.matcher(script).find()) {
              calculated=iDocument.getDatabase().query(new OSQLSynchQuery<Object>(script),iDocument);
            }
 else {
              script=""String_Node_Str"" + script + ""String_Node_Str""+ iDocument.getIdentity();
              calculated=iDocument.getDatabase().query(new OSQLSynchQuery<Object>(script));
            }
            if (calculated != null && calculated.size() > 0) {
              OType type=property.getType();
              Object value;
              if (type.isMultiValue()) {
                final OType linkedType=property.getLinkedType();
                value=linkedType == null ? calculated : Lists.transform(calculated,new Function<ODocument,Object>(){
                  @Override public Object apply(                  ODocument input){
                    return OType.convert(input.field(""String_Node_Str""),linkedType.getDefaultJavaType());
                  }
                }
);
              }
 else {
                value=calculated.get(0).field(""String_Node_Str"");
              }
              value=OType.convert(value,type.getDefaultJavaType());
              Object oldValue=iDocument.field(calcProperty);
              if (oldValue != value && (oldValue == null || !oldValue.equals(value))) {
                iDocument.field(calcProperty,value);
              }
            }
          }
 catch (          OCommandSQLParsingException e) {
            LOG.warn(""String_Node_Str"",e);
            iDocument.field(calcProperty,e.getLocalizedMessage());
          }
        }
      }
    }
  }
}",0.9601336834566724
117268,"public CreateEdgeCommand(IModel<?> labelModel,OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentIModel){
  super(labelModel,table);
  setBootstrapType(BootstrapType.SUCCESS);
  setIcon(FAIconType.plus);
  setAutoNotify(false);
  this.classModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
  this.documentModel=documentIModel;
}","public CreateEdgeCommand(IModel<?> labelModel,OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentIModel){
  super(labelModel,table);
  setBootstrapType(BootstrapType.SUCCESS);
  setIcon(FAIconType.plus);
  setAutoNotify(false);
  this.classModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
  this.documentModel=documentIModel;
  setChandingModel(true);
}",0.9636871508379888
117269,"@Override protected void initializeContent(final ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setAutoSize(true);
  modal.setMinimalWidth(300);
  SelectSubOClassDialogPage selectEdgeClassDialog=new SelectSubOClassDialogPage(modal,new OClassModel(GraphModule.EDGE_CLASS_NAME)){
    @Override protected void onSelect(    AjaxRequestTarget target,    final OClass selectedOClass){
      modal.setTitle(new ResourceModel(""String_Node_Str""));
      OClassModel vertexOClassModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
      modal.setContent(new SelectDialogPanel(modal.getContentId(),modal,vertexOClassModel,true){
        @Override protected boolean onSelect(        AjaxRequestTarget target,        List<ODocument> objects,        boolean selectMore){
          createEdge(objects,selectedOClass);
          modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
            private static final long serialVersionUID=1L;
            @Override public void onClose(            AjaxRequestTarget target){
              target.add(getPage());
            }
          }
);
          return true;
        }
      }
);
      modal.show(target);
    }
  }
;
  modal.setContent(selectEdgeClassDialog);
}","@Override protected void initializeContent(final ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setAutoSize(true);
  modal.setMinimalWidth(300);
  SelectSubOClassDialogPage selectEdgeClassDialog=new SelectSubOClassDialogPage(modal,new OClassModel(GraphModule.EDGE_CLASS_NAME)){
    @Override protected void onSelect(    AjaxRequestTarget target,    OClass selectedOClass){
      modal.setTitle(new ResourceModel(""String_Node_Str""));
      final OClassModel selectedEdgeOClassModel=new OClassModel(selectedOClass);
      OClassModel vertexOClassModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
      modal.setContent(new SelectDialogPanel(modal.getContentId(),modal,vertexOClassModel,true){
        @Override protected boolean onSelect(        AjaxRequestTarget target,        List<ODocument> objects,        boolean selectMore){
          createEdge(objects,selectedEdgeOClassModel.getObject());
          this.modal.close(target);
          CreateEdgeCommand.this.sendActionPerformed();
          return true;
        }
      }
);
      modal.show(target);
    }
  }
;
  modal.setContent(selectEdgeClassDialog);
}",0.6896265560165975
117270,"private void createEdge(List<ODocument> documents,OClass edgeClass){
  OrientGraph tx=null;
  try {
    tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
    for (    ODocument createTo : documents) {
      tx.addEdge(null,tx.getVertex(documentModel.getObject().getIdentity()),tx.getVertex(createTo.getIdentity()),edgeClass.getName());
    }
  }
  finally {
    if (tx != null)     tx.shutdown();
  }
}","private void createEdge(List<ODocument> documents,OClass edgeClass){
  OrientGraph tx=orientGraphProvider.get();
  for (  ODocument createTo : documents) {
    tx.addEdge(null,tx.getVertex(documentModel.getObject().getIdentity()),tx.getVertex(createTo.getIdentity()),edgeClass.getName());
  }
  tx.commit();
  tx.begin();
}",0.6948228882833788
117271,"@Override protected boolean onSelect(AjaxRequestTarget target,List<ODocument> objects,boolean selectMore){
  createEdge(objects,selectedOClass);
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=1L;
    @Override public void onClose(    AjaxRequestTarget target){
      target.add(getPage());
    }
  }
);
  return true;
}","@Override protected boolean onSelect(AjaxRequestTarget target,List<ODocument> objects,boolean selectMore){
  createEdge(objects,selectedEdgeOClassModel.getObject());
  this.modal.close(target);
  CreateEdgeCommand.this.sendActionPerformed();
  return true;
}",0.4499229583975346
117272,"public CreateVertexCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentIModel){
  super(new ResourceModel(""String_Node_Str""),table);
  setBootstrapType(BootstrapType.PRIMARY);
  setIcon(FAIconType.plus);
  setAutoNotify(false);
  this.classModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
  this.documentModel=documentIModel;
}","public CreateVertexCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentIModel){
  super(new ResourceModel(""String_Node_Str""),table);
  setBootstrapType(BootstrapType.PRIMARY);
  setIcon(FAIconType.plus);
  setAutoNotify(false);
  this.classModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
  this.documentModel=documentIModel;
  setChandingModel(true);
}",0.9643835616438357
117273,"private void createVertex(OClass vertexClass,OClass edgeClass){
  OrientGraph tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
  OrientVertex newVertex=tx.addVertex(vertexClass.getName(),(String)null);
  OrientVertex vertex=tx.getVertex(documentModel.getObject().getIdentity());
  tx.addEdge(null,vertex,newVertex,edgeClass.getName());
}","private OrientVertex createVertex(OClass vertexClass,OClass edgeClass){
  OrientGraph tx=orientGraphProvider.get();
  OrientVertex newVertex=tx.addVertex(vertexClass.getName(),(String)null);
  OrientVertex vertex=tx.getVertex(documentModel.getObject().getIdentity());
  tx.addEdge(null,vertex,newVertex,edgeClass.getName());
  tx.commit();
  tx.begin();
  return newVertex;
}",0.8337950138504155
117274,"@Override protected void initializeContent(final ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setAutoSize(true);
  modal.setMinimalWidth(300);
  SelectSubOClassDialogPage selectVertexClassDialog=new SelectSubOClassDialogPage(modal,new OClassModel(GraphModule.VERTEX_CLASS_NAME)){
    @Override protected void onSelect(    AjaxRequestTarget target,    final OClass selectedOVertexClass){
      modal.setTitle(new ResourceModel(""String_Node_Str""));
      OClassModel edgeOClassModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
      modal.setContent(new SelectSubOClassDialogPage(modal,edgeOClassModel){
        @Override protected void onSelect(        AjaxRequestTarget target,        final OClass selectedOEdgeClass){
          createVertex(selectedOVertexClass,selectedOEdgeClass);
          modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
            private static final long serialVersionUID=1L;
            @Override public void onClose(            AjaxRequestTarget target){
              setResponsePage(new ODocumentPage(new ODocumentModel(documentModel.getObject())).setModeObject(DisplayMode.VIEW));
            }
          }
);
        }
      }
);
      modal.show(target);
    }
  }
;
  modal.setContent(selectVertexClassDialog);
}","@Override protected void initializeContent(final ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setAutoSize(true);
  modal.setMinimalWidth(300);
  SelectSubOClassDialogPage selectVertexClassDialog=new SelectSubOClassDialogPage(modal,new OClassModel(GraphModule.VERTEX_CLASS_NAME)){
    @Override protected void onSelect(    AjaxRequestTarget target,    OClass selectedOVertexClass){
      modal.setTitle(new ResourceModel(""String_Node_Str""));
      final IModel<OClass> selectedOVertextClassModel=new OClassModel(selectedOVertexClass);
      OClassModel edgeOClassModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
      modal.setContent(new SelectSubOClassDialogPage(modal,edgeOClassModel){
        @Override protected void onSelect(        AjaxRequestTarget target,        final OClass selectedOEdgeClass){
          OrientVertex newV=createVertex(selectedOVertextClassModel.getObject(),selectedOEdgeClass);
          setResponsePage(new ODocumentPage(newV.getRecord()).setModeObject(DisplayMode.EDIT));
        }
      }
);
      modal.show(target);
    }
  }
;
  modal.setContent(selectVertexClassDialog);
}",0.7073667073667074
117275,"@Override protected void onSelect(AjaxRequestTarget target,final OClass selectedOEdgeClass){
  createVertex(selectedOVertexClass,selectedOEdgeClass);
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=1L;
    @Override public void onClose(    AjaxRequestTarget target){
      setResponsePage(new ODocumentPage(new ODocumentModel(documentModel.getObject())).setModeObject(DisplayMode.VIEW));
    }
  }
);
}","@Override protected void onSelect(AjaxRequestTarget target,final OClass selectedOEdgeClass){
  OrientVertex newV=createVertex(selectedOVertextClassModel.getObject(),selectedOEdgeClass);
  setResponsePage(new ODocumentPage(newV.getRecord()).setModeObject(DisplayMode.EDIT));
}",0.4946524064171123
117276,"public DeleteEdgeCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentModel){
  super(new ResourceModel(""String_Node_Str""),table);
  this.documentModel=documentModel;
  this.classModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
}","public DeleteEdgeCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentModel){
  super(new ResourceModel(""String_Node_Str""),table);
  this.documentModel=documentModel;
  this.classModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
  setChandingModel(true);
}",0.9507575757575758
117277,"@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  super.performMultiAction(target,objects);
  OrientGraph tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
  tx.commit();
  for (  ODocument doc : objects) {
    ORID id=doc.getIdentity();
    OrientEdge edge=tx.getEdge(id);
    tx.removeEdge(edge);
  }
  tx.begin();
  setResponsePage(new ODocumentPage(documentModel.getObject()).setModeObject(DisplayMode.VIEW));
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  OrientGraph tx=orientGraphProvider.get();
  for (  ODocument doc : objects) {
    ORID id=doc.getIdentity();
    OrientEdge edge=tx.getEdge(id);
    tx.removeEdge(edge);
  }
  tx.commit();
  tx.begin();
  sendActionPerformed();
}",0.7076537013801757
117278,"public DeleteVertexCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentModel){
  super(table);
  this.classModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
  this.documentModel=documentModel;
}","public DeleteVertexCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentModel){
  super(table);
  this.classModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
  this.documentModel=documentModel;
  setChandingModel(true);
}",0.9437229437229436
117279,"@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  super.performMultiAction(target,objects);
  OrientGraph tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
  tx.commit();
  for (  ODocument doc : objects) {
    ORID id=doc.getIdentity();
    tx.removeVertex(tx.getVertex(id));
  }
  tx.begin();
  setResponsePage(new ODocumentPage(documentModel.getObject()).setModeObject(DisplayMode.VIEW));
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  super.performMultiAction(target,objects);
  OrientGraph tx=orientGraphProvider.get();
  for (  ODocument doc : objects) {
    ORID id=doc.getIdentity();
    tx.removeVertex(tx.getVertex(id));
  }
  tx.commit();
  tx.begin();
  sendActionPerformed();
}",0.7628607277289837
117280,"public UnlinkVertexCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentModel){
  super(new ResourceModel(""String_Node_Str""),table);
  setBootstrapType(BootstrapType.WARNING);
  this.documentModel=documentModel;
  this.classModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
}","public UnlinkVertexCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentModel){
  super(new ResourceModel(""String_Node_Str""),table);
  setBootstrapType(BootstrapType.WARNING);
  this.documentModel=documentModel;
  this.classModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
  setChandingModel(true);
}",0.9579288025889968
117281,"@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  super.performMultiAction(target,objects);
  OrientGraph tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
  tx.commit();
  for (  ODocument doc : objects) {
    ORID id=doc.getIdentity();
    OrientVertex vertex=tx.getVertex(id);
    removeEdges(tx,vertex);
  }
  tx.begin();
  setResponsePage(new ODocumentPage(documentModel.getObject()).setModeObject(DisplayMode.VIEW));
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  super.performMultiAction(target,objects);
  OrientGraph tx=orientGraphProvider.get();
  for (  ODocument doc : objects) {
    ORID id=doc.getIdentity();
    OrientVertex vertex=tx.getVertex(id);
    removeEdges(tx,vertex);
  }
  tx.commit();
  tx.begin();
  sendActionPerformed();
}",0.779976717112922
117282,"@SuppressWarnings(""String_Node_Str"") public GraphVerticesWidget(String id,final IModel<ODocument> model,IModel<ODocument> widgetDocumentModel){
  super(id,model,widgetDocumentModel);
  IModel<DisplayMode> modeModel=DisplayMode.VIEW.asModel();
  OProperty nameProperty=oClassIntrospector.getNameProperty(getModelObject().getSchemaClass());
  OEntityColumn entityColumn=new OEntityColumn(nameProperty,true,modeModel);
  Function<ODocument,String> directionLocalizer=new Function<ODocument,String>(){
    @Override public String apply(    ODocument vertex){
      Object fieldIn=model.getObject().field(""String_Node_Str"");
      String direction=((OIdentifiable)fieldIn).getIdentity().equals(vertex.getIdentity()) ? ""String_Node_Str"" : ""String_Node_Str"";
      return getLocalizer().getString(""String_Node_Str"" + direction,GraphVerticesWidget.this);
    }
  }
;
  ODocumentDescriptionColumn directionColumn=new ODocumentDescriptionColumn(new StringResourceModel(""String_Node_Str"",this,Model.of()),directionLocalizer);
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<>(""String_Node_Str"" + ((OIdentifiable)model.getObject().field(""String_Node_Str"")).getIdentity() + ""String_Node_Str""+ ((OIdentifiable)model.getObject().field(""String_Node_Str"")).getIdentity()+ ""String_Node_Str"");
  GenericTablePanel<ODocument> tablePanel=new GenericTablePanel<ODocument>(""String_Node_Str"",Lists.newArrayList(entityColumn,directionColumn),provider,2);
  OrienteerDataTable<ODocument,String> table=tablePanel.getDataTable();
  add(tablePanel);
  add(DisableIfDocumentNotSavedBehavior.INSTANCE,UpdateOnActionPerformedEventBehavior.INSTANCE_ALL_CONTINUE);
}","@SuppressWarnings(""String_Node_Str"") public GraphVerticesWidget(String id,final IModel<ODocument> model,IModel<ODocument> widgetDocumentModel){
  super(id,model,widgetDocumentModel);
  IModel<DisplayMode> modeModel=DisplayMode.VIEW.asModel();
  OProperty nameProperty=oClassIntrospector.getNameProperty(getModelObject().getSchemaClass());
  OEntityColumn entityColumn=new OEntityColumn(nameProperty,true,modeModel);
  ODocumentDescriptionColumn directionColumn=new ODocumentDescriptionColumn(new StringResourceModel(""String_Node_Str"",this,Model.of()),new DirectionLocalizer());
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<>(""String_Node_Str"" + ((OIdentifiable)model.getObject().field(""String_Node_Str"")).getIdentity() + ""String_Node_Str""+ ((OIdentifiable)model.getObject().field(""String_Node_Str"")).getIdentity()+ ""String_Node_Str"");
  GenericTablePanel<ODocument> tablePanel=new GenericTablePanel<ODocument>(""String_Node_Str"",Lists.newArrayList(entityColumn,directionColumn),provider,2);
  OrienteerDataTable<ODocument,String> table=tablePanel.getDataTable();
  add(tablePanel);
  add(DisableIfDocumentNotSavedBehavior.INSTANCE,UpdateOnActionPerformedEventBehavior.INSTANCE_ALL_CONTINUE);
}",0.7492130115424974
117283,"@Override public String apply(ODocument vertex){
  Object fieldIn=model.getObject().field(""String_Node_Str"");
  String direction=((OIdentifiable)fieldIn).getIdentity().equals(vertex.getIdentity()) ? ""String_Node_Str"" : ""String_Node_Str"";
  return getLocalizer().getString(""String_Node_Str"" + direction,GraphVerticesWidget.this);
}","@Override public String apply(ODocument vertex){
  Object fieldIn=getModelObject().field(""String_Node_Str"");
  String direction=((OIdentifiable)fieldIn).getIdentity().equals(vertex.getIdentity()) ? ""String_Node_Str"" : ""String_Node_Str"";
  return getLocalizer().getString(""String_Node_Str"" + direction,GraphVerticesWidget.this);
}",0.9742033383915024
117284,"@Provides @RequestScoped public OrientGraph provideOrientGraph(ODatabaseDocumentTx dbTx){
  return new OrientGraph(dbTx);
}","@Provides @RequestScoped public OrientGraph provideOrientGraph(ODatabaseDocumentTx dbTx){
  return new OrientGraph(dbTx,false);
}",0.9761904761904762
117285,"@Override protected void initializeContent(final ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setAutoSize(true);
  modal.setMinimalWidth(300);
  SelectSubOClassDialogPage selectEdgeClassDialog=new SelectSubOClassDialogPage(modal,new OClassModel(GraphModule.EDGE_CLASS_NAME)){
    @Override protected void onSelect(    AjaxRequestTarget target,    OClass selectedOClass){
      modal.setTitle(new ResourceModel(""String_Node_Str""));
      final OClassModel selectedEdgeOClassModel=new OClassModel(selectedOClass);
      OClassModel vertexOClassModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
      modal.setContent(new SelectDialogPanel(modal.getContentId(),modal,vertexOClassModel,true){
        @Override protected boolean onSelect(        AjaxRequestTarget target,        List<ODocument> objects,        boolean selectMore){
          createEdge(objects,selectedEdgeOClassModel.getObject());
          this.modal.close(target);
          CreateEdgeCommand.this.sendActionPerformed();
          return true;
        }
      }
);
      modal.show(target);
    }
  }
;
  modal.setContent(selectEdgeClassDialog);
}","@Override protected void initializeContent(final ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setAutoSize(true);
  modal.setMinimalWidth(300);
  SelectSubOClassDialogPage selectEdgeClassDialog=new SelectSubOClassDialogPage(modal,new OClassModel(GraphModule.EDGE_CLASS_NAME)){
    @Override protected void onSelect(    AjaxRequestTarget target,    OClass selectedOClass){
      modal.setWindowClosedCallback(null);
      modal.setTitle(new ResourceModel(""String_Node_Str""));
      final OClassModel selectedEdgeOClassModel=new OClassModel(selectedOClass);
      OClassModel vertexOClassModel=new OClassModel(GraphModule.VERTEX_CLASS_NAME);
      modal.setContent(new SelectDialogPanel(modal.getContentId(),modal,vertexOClassModel,true){
        @Override protected boolean onSelect(        AjaxRequestTarget target,        List<ODocument> objects,        boolean selectMore){
          createEdge(objects,selectedEdgeOClassModel.getObject());
          this.modal.close(target);
          CreateEdgeCommand.this.sendActionPerformed();
          return true;
        }
      }
);
      modal.show(target);
    }
  }
;
  modal.setContent(selectEdgeClassDialog);
}",0.9817409766454352
117286,"private OClass addClassToSchema(OSchema schema,OArchitectOClass architectOClass){
  String name=architectOClass.getName();
  OClass oClass=schema.getOrCreateClass(name);
  if (architectOClass.isExistsInDb())   removePropertiesFromOClass(oClass,architectOClass.getPropertiesForDelete());
  addSuperClassesToOClass(schema,oClass,architectOClass.getSuperClasses());
  addPropertiesToOClass(schema,oClass,architectOClass.getProperties());
  return oClass;
}","private OClass addClassToSchema(OSchema schema,OArchitectOClass architectOClass){
  String name=architectOClass.getName();
  OClass oClass=schema.getOrCreateClass(name);
  addSuperClassesToOClass(schema,oClass,architectOClass.getSuperClasses());
  addPropertiesToOClass(schema,oClass,architectOClass.getProperties());
  return oClass;
}",0.5044359949302915
117287,"@Override protected void respond(AjaxRequestTarget target){
  if (actionActive)   return;
  actionActive=true;
  IRequestParameters params=RequestCycle.get().getRequest().getRequestParameters();
  String json=params.getParameterValue(JSON_VAR).toString(""String_Node_Str"");
  List<OArchitectOClass> classes;
  classes=JsonUtil.fromJSON(json);
  try {
    addClassesToSchema(classes);
    target.prependJavaScript(""String_Node_Str"");
  }
 catch (  Exception ex) {
    target.prependJavaScript(""String_Node_Str"");
  }
  actionActive=false;
}","@Override protected void respond(AjaxRequestTarget target){
  if (actionActive)   return;
  actionActive=true;
  IRequestParameters params=RequestCycle.get().getRequest().getRequestParameters();
  String json=params.getParameterValue(JSON_VAR).toString(""String_Node_Str"");
  List<OArchitectOClass> classes;
  classes=JsonUtil.fromJSON(json);
  try {
    addClassesToSchema(classes);
    target.prependJavaScript(""String_Node_Str"" + ""String_Node_Str"");
  }
 catch (  Exception ex) {
    LOG.error(""String_Node_Str"",ex);
    target.prependJavaScript(""String_Node_Str"");
  }
  actionActive=false;
}",0.9496910856134158
117288,"@Override protected void respond(AjaxRequestTarget target){
  if (actionActive)   return;
  actionActive=true;
  IRequestParameters params=RequestCycle.get().getRequest().getRequestParameters();
  try {
    ODocument document=model.getObject();
    document.field(OArchitectModule.CONFIG_OPROPERTY,params.getParameterValue(CONFIG_VAR));
    document.save();
    target.appendJavaScript(""String_Node_Str"");
  }
 catch (  Exception ex) {
    target.appendJavaScript(""String_Node_Str"");
  }
  actionActive=false;
}","@Override protected void respond(AjaxRequestTarget target){
  if (actionActive)   return;
  actionActive=true;
  IRequestParameters params=RequestCycle.get().getRequest().getRequestParameters();
  try {
    ODocument document=model.getObject();
    document.field(OArchitectModule.CONFIG_OPROPERTY,params.getParameterValue(CONFIG_VAR));
    document.save();
    target.appendJavaScript(""String_Node_Str"");
  }
 catch (  Exception ex) {
    LOG.error(""String_Node_Str"",ex);
    target.appendJavaScript(""String_Node_Str"");
  }
  actionActive=false;
}",0.9650613786591123
117289,"@Override public void renderHead(IHeaderResponse response){
  super.renderHead(response);
  response.render(CssReferenceHeaderItem.forReference(OARCHITECT_CSS));
  response.render(CssReferenceHeaderItem.forReference(MXGRAPH_CSS));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forScript(String.format(""String_Node_Str"",""String_Node_Str""),null));
  response.render(JavaScriptHeaderItem.forReference(MXGRAPH_JS));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  String locale=getOArchitectEditorLocale();
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,String.format(""String_Node_Str"",locale))));
  PackageResourceReference configXml=new PackageResourceReference(OArchitectEditorWidget.class,""String_Node_Str"");
  String configUrl=urlFor(configXml,null).toString();
  String baseUrl=configUrl.substring(0,configUrl.indexOf(""String_Node_Str""));
  TextTemplate configTemplate=new PackageTextTemplate(OArchitectEditorWidget.class,""String_Node_Str"");
  Map<String,Object> params=CommonUtils.toMap(""String_Node_Str"",baseUrl);
  String config=configTemplate.asString(params);
  boolean canUpdate=canUserUpdateEditor();
  response.render(OnLoadHeaderItem.forScript(String.format(""String_Node_Str"",baseUrl,CommonUtils.escapeAndWrapAsJavaScriptString(config),locale,this.getMarkupId(),container.getMarkupId(),editor.getMarkupId(),sidebar.getMarkupId(),toolbar.getMarkupId(),outline.getMarkupId(),Boolean.toString(canUpdate))));
}","@Override public void renderHead(IHeaderResponse response){
  super.renderHead(response);
  response.render(CssReferenceHeaderItem.forReference(OARCHITECT_CSS));
  response.render(CssReferenceHeaderItem.forReference(MXGRAPH_CSS));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forScript(String.format(""String_Node_Str"",""String_Node_Str""),null));
  response.render(JavaScriptHeaderItem.forReference(MXGRAPH_JS));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  String locale=getOArchitectEditorLocale();
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,String.format(""String_Node_Str"",locale))));
  PackageResourceReference configXml=new PackageResourceReference(OArchitectEditorWidget.class,""String_Node_Str"");
  String configUrl=urlFor(configXml,null).toString();
  String baseUrl=configUrl.substring(0,configUrl.indexOf(""String_Node_Str""));
  TextTemplate configTemplate=new PackageTextTemplate(OArchitectEditorWidget.class,""String_Node_Str"");
  Map<String,Object> params=CommonUtils.toMap(""String_Node_Str"",baseUrl);
  String config=configTemplate.asString(params);
  boolean canUpdate=canUserUpdateEditor();
  response.render(OnLoadHeaderItem.forScript(String.format(""String_Node_Str"",baseUrl,CommonUtils.escapeAndWrapAsJavaScriptString(config),locale,this.getMarkupId(),container.getMarkupId(),editor.getMarkupId(),sidebar.getMarkupId(),toolbar.getMarkupId(),outline.getMarkupId(),Boolean.toString(canUpdate))));
}",0.9833846153846154
117290,"private static OArchitectOClass convertOClassFromJson(JSONObject jsonObject){
  OArchitectOClass oClass=new OArchitectOClass(jsonObject.getString(NAME));
  if (!jsonObject.isNull(SUPER_CLASSES)) {
    oClass.setSuperClasses(getSuperClasses(jsonObject.getJSONArray(SUPER_CLASSES)));
  }
  if (!jsonObject.isNull(EXISTS_IN_DB)) {
    String exists=jsonObject.getString(EXISTS_IN_DB);
    oClass.setExistsInDb(exists.equals(""String_Node_Str"") || exists.equals(""String_Node_Str""));
  }
  if (!jsonObject.isNull(PROPERTIES)) {
    oClass.setProperties(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES)));
  }
  if (!jsonObject.isNull(PROPERTIES_FOR_DELETE)) {
    oClass.setPropertiesForDelete(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES_FOR_DELETE)));
  }
  return oClass;
}","private static OArchitectOClass convertOClassFromJson(JSONObject jsonObject){
  OArchitectOClass oClass=new OArchitectOClass(jsonObject.getString(NAME));
  if (!jsonObject.isNull(SUPER_CLASSES)) {
    oClass.setSuperClasses(getSuperClasses(jsonObject.getJSONArray(SUPER_CLASSES)));
  }
  if (!jsonObject.isNull(EXISTS_IN_DB)) {
    String exists=jsonObject.getString(EXISTS_IN_DB);
    oClass.setExistsInDb(exists.equals(""String_Node_Str"") || exists.equals(""String_Node_Str""));
  }
  if (!jsonObject.isNull(PROPERTIES)) {
    oClass.setProperties(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES)));
  }
  return oClass;
}",0.8671328671328671
117291,"private static OArchitectOProperty convertOPropertyFromJson(JSONObject jsonObject){
  String name=!jsonObject.isNull(NAME) ? jsonObject.getString(NAME) : null;
  OType type=!jsonObject.isNull(TYPE) ? OType.valueOf(jsonObject.getString(TYPE)) : null;
  OArchitectOProperty property=null;
  if (!Strings.isNullOrEmpty(name) && type != null) {
    property=new OArchitectOProperty(name,type);
    if (!jsonObject.isNull(SUBCLASS_PROPERTY)) {
      String subClassProperty=jsonObject.getString(SUBCLASS_PROPERTY);
      property.setSubClassProperty(subClassProperty.equals(""String_Node_Str"") || subClassProperty.equals(""String_Node_Str""));
    }
    if (!jsonObject.isNull(LINKED_CLASS_NAME)) {
      property.setLinkedClass(jsonObject.getString(LINKED_CLASS_NAME));
    }
    if (!jsonObject.isNull(ORDER)) {
      property.setOrder(jsonObject.getInt(ORDER));
    }
    if (!jsonObject.isNull(INVERSE_PROPERTY)) {
      property.setInverseProperty(convertInverseProperty(jsonObject.getJSONObject(INVERSE_PROPERTY)));
    }
  }
  return property;
}","private static OArchitectOProperty convertOPropertyFromJson(JSONObject jsonObject){
  String name=!jsonObject.isNull(NAME) ? jsonObject.getString(NAME) : null;
  OType type=!jsonObject.isNull(TYPE) ? OType.valueOf(jsonObject.getString(TYPE)) : null;
  OArchitectOProperty property=null;
  if (!Strings.isNullOrEmpty(name) && type != null) {
    property=new OArchitectOProperty(name,type);
    if (!jsonObject.isNull(SUBCLASS_PROPERTY)) {
      String subClassProperty=jsonObject.getString(SUBCLASS_PROPERTY);
      property.setSubClassProperty(subClassProperty.equals(""String_Node_Str"") || subClassProperty.equals(""String_Node_Str""));
    }
    if (!jsonObject.isNull(LINKED_CLASS_NAME)) {
      property.setLinkedClass(jsonObject.getString(LINKED_CLASS_NAME));
    }
    if (!jsonObject.isNull(ORDER)) {
      property.setOrder(jsonObject.getInt(ORDER));
    }
    if (!jsonObject.isNull(INVERSE_PROPERY_ENABLE)) {
      property.setInversePropertyEnable(jsonObject.getBoolean(INVERSE_PROPERY_ENABLE));
      if (!jsonObject.isNull(INVERSE_PROPERTY)) {
        property.setInverseProperty(convertInverseProperty(jsonObject.getJSONObject(INVERSE_PROPERTY)));
      }
    }
  }
  return property;
}",0.9313113291703836
117292,"public static OArchitectOProperty toArchitectOProperty(OProperty property){
  OArchitectOProperty architectProperty=new OArchitectOProperty(property.getName(),property.getType());
  if (property.getLinkedClass() != null) {
    architectProperty.setLinkedClass(property.getLinkedClass().getName());
    OProperty inverse=CustomAttribute.PROP_INVERSE.getValue(property);
    if (inverse != null) {
      OArchitectOProperty prop=new OArchitectOProperty(inverse.getName(),inverse.getType());
      prop.setExistsInDb(true);
      architectProperty.setInverseProperty(prop);
    }
  }
  int order=CustomAttribute.ORDER.getValue(property);
  architectProperty.setOrder(order);
  architectProperty.setPageUrl(""String_Node_Str"" + property.getOwnerClass().getName() + ""String_Node_Str""+ property.getName());
  architectProperty.setExistsInDb(true);
  return architectProperty;
}","public static OArchitectOProperty toArchitectOProperty(OProperty property){
  OArchitectOProperty architectProperty=new OArchitectOProperty(property.getName(),property.getType());
  if (property.getLinkedClass() != null) {
    architectProperty.setLinkedClass(property.getLinkedClass().getName());
    OProperty inverse=CustomAttribute.PROP_INVERSE.getValue(property);
    if (inverse != null) {
      OArchitectOProperty prop=new OArchitectOProperty(inverse.getName(),inverse.getType());
      prop.setExistsInDb(true);
      architectProperty.setInversePropertyEnable(true);
      architectProperty.setInverseProperty(prop);
    }
  }
  int order=CustomAttribute.ORDER.getValue(property);
  architectProperty.setOrder(order);
  architectProperty.setPageUrl(""String_Node_Str"" + property.getOwnerClass().getName() + ""String_Node_Str""+ property.getName());
  architectProperty.setExistsInDb(true);
  return architectProperty;
}",0.9688195991091314
117293,"private static List<OArchitectOProperty> toOArchitectProperties(Collection<OProperty> properties,List<OClass> superClasses){
  List<OArchitectOProperty> architectProperties=new ArrayList<>(properties.size());
  for (  OProperty property : properties) {
    OArchitectOProperty architectOProperty=OArchitectOProperty.toArchitectOProperty(property);
    architectOProperty.setSubClassProperty(isSubClassProperty(property,superClasses));
    architectProperties.add(architectOProperty);
  }
  return architectProperties;
}","private static List<OArchitectOProperty> toOArchitectProperties(Collection<OProperty> properties,List<OClass> superClasses){
  List<OArchitectOProperty> architectProperties=new ArrayList<>(properties.size());
  ExtendedOPropertiesDataProvider provider=new ExtendedOPropertiesDataProvider(new CollectionModel<>(properties));
  provider.setSort(CustomAttribute.ORDER.getName(),SortOrder.ASCENDING);
  Iterator<? extends OProperty> iterator=provider.iterator(0,provider.size());
  while (iterator.hasNext()) {
    OProperty property=iterator.next();
    OArchitectOProperty architectOProperty=OArchitectOProperty.toArchitectOProperty(property);
    architectOProperty.setSubClassProperty(isSubClassProperty(property,superClasses));
    architectProperties.add(architectOProperty);
  }
  return architectProperties;
}",0.7222222222222222
117294,"@Override protected void respond(AjaxRequestTarget target){
  IRequestParameters params=RequestCycle.get().getRequest().getRequestParameters();
  String json=params.getParameterValue(EXISTS_CLASSES_VAR).toString(""String_Node_Str"");
  manager.setExistsClasses(JsonUtil.fromJSON(json));
  manager.switchModalWindow(target,true);
}","@Override protected void respond(AjaxRequestTarget target){
  IRequestParameters params=RequestCycle.get().getRequest().getRequestParameters();
  String json=params.getParameterValue(EXISTS_CLASSES_VAR).toString(""String_Node_Str"");
  manager.setExistsClasses(JsonUtil.fromJSON(json));
  manager.showModalWindow(target);
}",0.9830508474576272
117295,"private ModalWindow createModalWindow(String id){
  ModalWindow modal=new ModalWindow(id);
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setInitialWidth(670);
  modal.setInitialHeight(510);
  modal.setMinimalWidth(670);
  modal.setMinimalHeight(510);
  return modal;
}","private ModalWindow createModalWindow(String id){
  ModalWindow modal=new ModalWindow(id);
  modal.setOutputMarkupId(true);
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setInitialWidth(670);
  modal.setInitialHeight(510);
  modal.setMinimalWidth(670);
  modal.setMinimalHeight(510);
  return modal;
}",0.9454545454545454
117296,"public SchemaOClassesPanel(String id,String jsCallback){
  super(id);
  this.jsCallback=jsCallback;
  modal=createModalWindow(""String_Node_Str"");
  modal.setContent(createGenericTablePanel(modal.getContentId()));
  add(modal);
}","public SchemaOClassesPanel(String id,String jsCallback){
  super(id);
  this.jsCallback=jsCallback;
  modal=createModalWindow(""String_Node_Str"");
  modal.setContent(createGenericTablePanel(modal.getContentId()));
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    AjaxRequestTarget target){
      switchPageScroll(target,false);
    }
  }
);
  add(modal);
}",0.6708074534161491
117297,"@Override protected void performMultiAction(AjaxRequestTarget target,List<OClass> classes){
  List<OArchitectOClass> architectOClasses=toOArchitectOClasses(classes);
  String json=JsonUtil.toJSON(architectOClasses);
  if (Strings.isNullOrEmpty(json))   json=""String_Node_Str"";
  manager.executeCallback(target,json);
  manager.switchModalWindow(target,false);
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<OClass> classes){
  List<OArchitectOClass> architectOClasses=toOArchitectOClasses(classes);
  String json=JsonUtil.toJSON(architectOClasses);
  if (Strings.isNullOrEmpty(json))   json=""String_Node_Str"";
  manager.executeCallback(target,json);
  manager.closeModalWindow(target);
}",0.9286713286713286
117298,"@Override public void onClick(AjaxRequestTarget target){
  manager.executeCallback(target,""String_Node_Str"");
  manager.switchModalWindow(target,false);
}","@Override public void onClick(AjaxRequestTarget target){
  manager.executeCallback(target,""String_Node_Str"");
  manager.closeModalWindow(target);
}",0.9501661129568106
117299,"private void addPropertiesToOClass(OSchema schema,OClass oClass,List<OArchitectOProperty> properties){
  for (  OArchitectOProperty property : properties) {
    if (!property.isSubClassProperty()) {
      OProperty oProperty=oClass.getProperty(property.getName());
      if (oProperty == null) {
        oProperty=oClass.createProperty(property.getName(),property.getType());
      }
 else       if (oProperty.getType() != property.getType()) {
        oProperty.setType(property.getType());
      }
      if (!Strings.isNullOrEmpty(property.getLinkedClass())) {
        OClass linkedClass=schema.getOrCreateClass(property.getLinkedClass());
        oProperty.setLinkedClass(linkedClass);
      }
    }
  }
}","private void addPropertiesToOClass(OSchema schema,OClass oClass,List<OArchitectOProperty> properties){
  for (  OArchitectOProperty property : properties) {
    if (!property.isSubClassProperty()) {
      OProperty oProperty=oClass.getProperty(property.getName());
      if (oProperty == null && !property.isExistsInDb()) {
        oProperty=oClass.createProperty(property.getName(),property.getType());
      }
 else       if (oProperty != null && !property.isExistsInDb() && oProperty.getType() != property.getType()) {
        oProperty.setType(property.getType());
      }
      if (!Strings.isNullOrEmpty(property.getLinkedClass())) {
        OClass linkedClass=schema.getOrCreateClass(property.getLinkedClass());
        oProperty.setLinkedClass(linkedClass);
        OProperty inverseProp=!Strings.isNullOrEmpty(property.getInverseProperty()) ? linkedClass.getProperty(property.getInverseProperty()) : null;
        CustomAttribute.PROP_INVERSE.setValue(oProperty,inverseProp);
      }
    }
  }
}",0.8154205607476636
117300,"public GetOClassesBehavior(IOArchitectOClassesManager manager){
  this.manager=manager;
}","public GetOClassesBehavior(IOClassesModalManager manager){
  this.manager=manager;
}",0.9132947976878611
117301,"@Override protected void respond(AjaxRequestTarget target){
  IRequestParameters params=RequestCycle.get().getRequest().getRequestParameters();
  String json=params.getParameterValue(EXISTS_CLASSES_VAR).toString(""String_Node_Str"");
  manager.setExistsClasses(JsonUtil.fromJSON(json));
  manager.showModalWindow(target);
}","@Override protected void respond(AjaxRequestTarget target){
  IRequestParameters params=RequestCycle.get().getRequest().getRequestParameters();
  String json=params.getParameterValue(EXISTS_CLASSES_VAR).toString(""String_Node_Str"");
  boolean classesList=params.getParameterValue(CLASSES_LIST_VAR).toBoolean(false);
  if (classesList) {
    target.appendJavaScript(String.format(""String_Node_Str"",getAllClassesAsJson()));
  }
 else {
    manager.setExistsClasses(JsonUtil.fromJSON(json));
    manager.showModalWindow(target);
  }
}",0.754406580493537
117302,"public SchemaOClassesPanel(String id,String jsCallback){
  super(id);
  this.jsCallback=jsCallback;
  modal=createModalWindow(""String_Node_Str"");
  modal.setContent(createGenericTablePanel(modal.getContentId()));
  add(modal);
}","public SchemaOClassesPanel(String id,String jsCallback){
  super(id);
  this.jsCallback=jsCallback;
  modal=createModalWindow(""String_Node_Str"");
  modal.setContent(createGenericTablePanel(modal.getContentId()));
  add(modal);
  add(AttributeModifier.append(""String_Node_Str"",""String_Node_Str""));
}",0.8669201520912547
117303,"private void addSuperClassesToOClass(OSchema schema,OClass oClass,List<String> superClassNames){
  if (superClassNames != null && !superClassNames.isEmpty()) {
    List<OClass> superClasses=Lists.newArrayList();
    for (    String architectSuperClass : superClassNames) {
      if (!oClass.isSubClassOf(architectSuperClass) && schema.existsClass(architectSuperClass)) {
        OClass superClass=schema.getClass(architectSuperClass);
        superClasses.add(superClass);
      }
    }
    oClass.setSuperClasses(superClasses);
  }
}","private void addSuperClassesToOClass(OSchema schema,OClass oClass,List<String> superClassNames){
  if (superClassNames != null && !superClassNames.isEmpty()) {
    List<OClass> superClasses=Lists.newArrayList();
    for (    String architectSuperClass : superClassNames) {
      if (schema.existsClass(architectSuperClass)) {
        OClass superClass=schema.getClass(architectSuperClass);
        superClasses.add(superClass);
      }
    }
    oClass.setSuperClasses(superClasses);
  }
}",0.9560117302052786
117304,"private OClass addClassToSchema(OSchema schema,OArchitectOClass architectOClass){
  String name=architectOClass.getName();
  OClass oClass=schema.getOrCreateClass(name);
  removePropertiesFromOClass(oClass,architectOClass.getPropertiesForDelete());
  addSuperClassesToOClass(schema,oClass,architectOClass.getSuperClassesNames());
  addPropertiesToOClass(schema,oClass,architectOClass.getProperties());
  return oClass;
}","private OClass addClassToSchema(OSchema schema,OArchitectOClass architectOClass){
  String name=architectOClass.getName();
  OClass oClass=schema.getOrCreateClass(name);
  if (architectOClass.isExistsInDatabase())   removePropertiesFromOClass(oClass,architectOClass.getPropertiesForDelete());
  addSuperClassesToOClass(schema,oClass,architectOClass.getSuperClassesNames());
  addPropertiesToOClass(schema,oClass,architectOClass.getProperties());
  return oClass;
}",0.9502262443438914
117305,"private static OArchitectOClass convertOClassFromJson(JSONObject jsonObject){
  OArchitectOClass oClass=new OArchitectOClass(jsonObject.getString(NAME));
  if (!jsonObject.isNull(SUPER_CLASSES_NAMES)) {
    oClass.setSuperClassesNames(getSuperClasses(jsonObject.getJSONArray(SUPER_CLASSES_NAMES)));
  }
  if (!jsonObject.isNull(PROPERTIES)) {
    oClass.setProperties(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES)));
  }
  if (!jsonObject.isNull(PROPERTIES_FOR_DELETE)) {
    oClass.setPropertiesForDelete(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES_FOR_DELETE)));
  }
  return oClass;
}","private static OArchitectOClass convertOClassFromJson(JSONObject jsonObject){
  OArchitectOClass oClass=new OArchitectOClass(jsonObject.getString(NAME));
  if (!jsonObject.isNull(SUPER_CLASSES_NAMES)) {
    oClass.setSuperClassesNames(getSuperClasses(jsonObject.getJSONArray(SUPER_CLASSES_NAMES)));
  }
  if (!jsonObject.isNull(EXISTS_IN_DB)) {
    String exists=jsonObject.getString(EXISTS_IN_DB);
    oClass.setExistsInDatabase(exists.equals(""String_Node_Str"") || exists.equals(""String_Node_Str""));
  }
  if (!jsonObject.isNull(PROPERTIES)) {
    oClass.setProperties(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES)));
  }
  if (!jsonObject.isNull(PROPERTIES_FOR_DELETE)) {
    oClass.setPropertiesForDelete(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES_FOR_DELETE)));
  }
  return oClass;
}",0.8595271210013908
117306,"@Override public void renderHead(IHeaderResponse response){
  super.renderHead(response);
  response.render(CssReferenceHeaderItem.forReference(OARCHITECT_CSS));
  response.render(CssReferenceHeaderItem.forReference(MXGRAPH_CSS));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forScript(String.format(""String_Node_Str"",""String_Node_Str""),null));
  response.render(JavaScriptHeaderItem.forReference(MXGRAPH_JS));
  addOArchitectDependencies(response);
}","@Override public void renderHead(IHeaderResponse response){
  super.renderHead(response);
  response.render(CssReferenceHeaderItem.forReference(OARCHITECT_CSS));
  response.render(CssReferenceHeaderItem.forReference(MXGRAPH_CSS));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forScript(String.format(""String_Node_Str"",""String_Node_Str""),null));
  response.render(JavaScriptHeaderItem.forReference(MXGRAPH_JS));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  response.render(JavaScriptHeaderItem.forReference(new JavaScriptResourceReference(OArchitectEditorWidget.class,""String_Node_Str"")));
  PackageResourceReference configXml=new PackageResourceReference(OArchitectEditorWidget.class,""String_Node_Str"");
  String configUrl=urlFor(configXml,null).toString();
  String baseUrl=configUrl.substring(0,configUrl.indexOf(""String_Node_Str""));
  TextTemplate configTemplate=new PackageTextTemplate(OArchitectEditorWidget.class,""String_Node_Str"");
  Map<String,Object> params=CommonUtils.toMap(""String_Node_Str"",baseUrl);
  String config=configTemplate.asString(params);
  response.render(OnLoadHeaderItem.forScript(String.format(""String_Node_Str"",baseUrl,CommonUtils.escapeAndWrapAsJavaScriptString(config),container.getMarkupId(),editor.getMarkupId(),sidebar.getMarkupId(),toolbar.getMarkupId())));
}",0.4449779911964786
117307,"private static OArchitectOClass convertOClassFromJson(JSONObject jsonObject){
  OArchitectOClass oClass=new OArchitectOClass(jsonObject.getString(NAME));
  oClass.setSuperClassesNames(getSuperClasses(jsonObject.getJSONArray(SUPER_CLASSES_NAMES)));
  oClass.setProperties(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES)));
  oClass.setPropertiesForDelete(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES_FOR_DELETE)));
  return oClass;
}","private static OArchitectOClass convertOClassFromJson(JSONObject jsonObject){
  OArchitectOClass oClass=new OArchitectOClass(jsonObject.getString(NAME));
  if (!jsonObject.isNull(SUPER_CLASSES_NAMES)) {
    oClass.setSuperClassesNames(getSuperClasses(jsonObject.getJSONArray(SUPER_CLASSES_NAMES)));
  }
  if (!jsonObject.isNull(PROPERTIES)) {
    oClass.setProperties(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES)));
  }
  if (!jsonObject.isNull(PROPERTIES_FOR_DELETE)) {
    oClass.setPropertiesForDelete(getOPropertyListFromJson(jsonObject.getJSONArray(PROPERTIES_FOR_DELETE)));
  }
  return oClass;
}",0.8534322820037106
117308,"@Override protected DatePicker newDatePicker(){
  return new DatePicker(){
    @Override public void beforeRender(    Component component){
      Response response=component.getResponse();
      response.write(""String_Node_Str"");
    }
    @Override public void afterRender(    Component component){
      Response response=component.getResponse();
      response.write(""String_Node_Str"" + ""String_Node_Str"");
      response.write(""String_Node_Str"");
    }
    @Override public void renderHead(    Component component,    IHeaderResponse response){
      String jqueryInit=String.format(""String_Node_Str"",getDateTextField().getMarkupId(),getLocale().getLanguage(),OrienteerWebApplication.DATE_CONVERTER.getDatePattern(getLocale()));
      response.render(OnLoadHeaderItem.forScript(jqueryInit));
    }
  }
;
}","@Override protected DatePicker newDatePicker(){
  return new DatePicker(){
    @Override public void beforeRender(    Component component){
      Response response=component.getResponse();
      response.write(""String_Node_Str"");
    }
    @Override public void afterRender(    Component component){
      Response response=component.getResponse();
      response.write(""String_Node_Str"" + ""String_Node_Str"");
      response.write(""String_Node_Str"");
    }
    @Override public void renderHead(    Component component,    IHeaderResponse response){
      String jqueryInit=String.format(""String_Node_Str"",getDateTextField().getMarkupId(),getLocale().getLanguage(),getDateFormat());
      response.render(OnDomReadyHeaderItem.forScript(jqueryInit));
    }
  }
;
}",0.9102482495225972
117309,"@Override protected DateTextField newDateTextField(String id,PropertyModel<Date> dateFieldModel){
  DateTextField dateTextField=new DateTextField(id,dateFieldModel,OrienteerWebApplication.DATE_CONVERTER);
  dateTextField.setOutputMarkupId(true);
  return dateTextField;
}","@Override protected DateTextField newDateTextField(String id,PropertyModel<Date> model){
  DateTextField dateTextField=DateTextField.forDatePattern(id,model,""String_Node_Str"");
  dateTextField.setOutputMarkupId(true);
  return dateTextField;
}",0.7704280155642024
117310,"@Override public void renderHead(IHeaderResponse response){
  response.render(new PriorityHeaderItem(CssHeaderItem.forReference(BOOTSTRAP_CSS)));
  response.render(CssHeaderItem.forReference(FONT_AWESOME_CSS));
  response.render(CssHeaderItem.forReference(SB_ADMIN_CSS));
  response.render(CssHeaderItem.forReference(METISMENU_CSS));
  response.render(CssHeaderItem.forReference(ORIENTEER_CSS));
  response.render(CssHeaderItem.forReference(BOOTSTRAP_DATE_PICKER_CSS));
  super.renderHead(response);
  JavaScriptLibrarySettings javaScriptSettings=getApplication().getJavaScriptLibrarySettings();
  response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forReference(javaScriptSettings.getJQueryReference())));
  response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forReference(BOOTSTRAP_JS)));
  response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forReference(METISMENU_JS)));
  response.render(JavaScriptHeaderItem.forReference(BOOTSTRAP_DATE_PICKER_JS));
  response.render(JavaScriptHeaderItem.forReference(new WebjarsJavaScriptResourceReference(String.format(BOOTSTRAP_DATEPICKER_LOCALE,getLocale().getLanguage()))));
  response.render(OnDomReadyHeaderItem.forScript(""String_Node_Str""));
}","@Override public void renderHead(IHeaderResponse response){
  response.render(new PriorityHeaderItem(CssHeaderItem.forReference(BOOTSTRAP_CSS)));
  response.render(CssHeaderItem.forReference(FONT_AWESOME_CSS));
  response.render(CssHeaderItem.forReference(SB_ADMIN_CSS));
  response.render(CssHeaderItem.forReference(METISMENU_CSS));
  response.render(CssHeaderItem.forReference(ORIENTEER_CSS));
  super.renderHead(response);
  addBootstrapDatepicker(response);
  JavaScriptLibrarySettings javaScriptSettings=getApplication().getJavaScriptLibrarySettings();
  response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forReference(javaScriptSettings.getJQueryReference())));
  response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forReference(BOOTSTRAP_JS)));
  response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forReference(METISMENU_JS)));
  response.render(OnDomReadyHeaderItem.forScript(""String_Node_Str""));
}",0.5246971109040075
117311,"private void addFilterPanels(WebMarkupContainer container,List<AbstractFilterPanel> panels,final List<FilterTab> tabs){
  ListView<AbstractFilterPanel> listView=new ListView<AbstractFilterPanel>(""String_Node_Str"",panels){
    private boolean first=true;
    @Override protected void populateItem(    ListItem<AbstractFilterPanel> item){
      if (first) {
        first=false;
        item.add(AttributeModifier.append(""String_Node_Str"",TAB_PANE_ACTIVE));
      }
 else       item.add(AttributeModifier.append(""String_Node_Str"",TAB_PANE));
      AbstractFilterPanel panel=item.getModelObject();
      for (      FilterTab tab : tabs) {
        if (tab.getType() == panel.getFilterCriteriaType()) {
          tab.setTabId(item.getMarkupId());
          break;
        }
      }
      item.add(panel);
    }
  }
;
  listView.setOutputMarkupPlaceholderTag(true);
  listView.setReuseItems(true);
  container.add(listView);
}","private void addFilterPanels(WebMarkupContainer container,List<AbstractFilterPanel> panels,final List<FilterTab> tabs){
  ListView<AbstractFilterPanel> listView=new ListView<AbstractFilterPanel>(""String_Node_Str"",panels){
    private boolean first=true;
    @Override protected void populateItem(    ListItem<AbstractFilterPanel> item){
      if (first) {
        first=false;
        item.add(AttributeModifier.append(""String_Node_Str"",TAB_PANE_ACTIVE));
      }
 else       item.add(AttributeModifier.append(""String_Node_Str"",TAB_PANE));
      item.add(AttributeModifier.append(""String_Node_Str"",FILTER_WIDTH));
      AbstractFilterPanel panel=item.getModelObject();
      for (      FilterTab tab : tabs) {
        if (tab.getType() == panel.getFilterCriteriaType()) {
          tab.setTabId(item.getMarkupId());
          break;
        }
      }
      item.add(panel);
    }
  }
;
  listView.setOutputMarkupPlaceholderTag(true);
  listView.setReuseItems(true);
  container.add(listView);
}",0.9613375130616508
117312,"@Override public void destroy(Application application){
}","@Override public void destroy(Application application){
  OrienteerWebApplication app=(OrienteerWebApplication)application;
  app.unregisterModule(Module.class);
}",0.5181818181818182
117313,"public OClassOMethodConfig(ClassOMethod oMethod,java.lang.reflect.Method javaMethod){
  this.oMethod=oMethod;
  behaviors=Arrays.asList(oMethod.behaviors());
  this.javaMethodName=javaMethod.getName();
  this.javaClassName=javaMethod.getDeclaringClass().getName();
}","public OClassOMethodConfig(ClassOMethod oMethod,Method javaMethod){
  this.oMethod=oMethod;
  behaviors=Arrays.asList(oMethod.behaviors());
  this.javaMethodName=javaMethod.getName();
  this.javaClassName=javaMethod.getDeclaringClass().getName();
}",0.2723735408560311
117314,"private OArtifact getOArtifact(String groupArtifactVersion,Path pathToJar){
  OArtifactReference mainArtifact=pathToJar != null ? getArtifactReference(groupArtifactVersion,pathToJar) : resolveAndGetArtifactReference(groupArtifactVersion);
  if (mainArtifact == null)   return null;
  ;
  List<Artifact> artifacts=resolveDependenciesInArtifacts(groupArtifactVersion);
  OArtifact moduleMetadata=new OArtifact();
  moduleMetadata.setLoad(false).setArtifactReference(mainArtifact).setDependencies(toOArtifactDependencies(artifacts));
  return moduleMetadata;
}","private OArtifact getOArtifact(String groupArtifactVersion,Path pathToJar){
  OArtifactReference mainArtifact=pathToJar != null ? getArtifactReference(groupArtifactVersion,pathToJar) : resolveAndGetArtifactReference(groupArtifactVersion);
  if (mainArtifact == null)   return null;
  List<Artifact> artifacts=resolveDependenciesInArtifacts(groupArtifactVersion);
  OArtifact moduleMetadata=new OArtifact();
  moduleMetadata.setLoad(false).setArtifactReference(mainArtifact).setDependencies(toOArtifactDependencies(artifacts));
  return moduleMetadata;
}",0.5837837837837838
117315,"/** 
 * Download Orienteer artifacts from server.
 * @return list of {@link OArtifact} from server
 * @throws IOException 
 */
public static List<OArtifact> getOrienteerArtifactsFromServer() throws IOException {
  URL website=new URL(initUtils.getOrienteerModulesUrl());
  File localFile=new File(initUtils.getPathToModulesFolder().toFile(),""String_Node_Str"");
  ReadableByteChannel rbc=Channels.newChannel(website.openStream());
  FileOutputStream fos=new FileOutputStream(localFile);
  try {
    fos.getChannel().transferFrom(rbc,0,Long.MAX_VALUE);
  }
  finally {
    fos.close();
  }
  OrienteerArtifactsReader reader=new OrienteerArtifactsReader(localFile.toPath());
  List<OArtifact> ooArtifacts=reader.readArtifacts();
  List<OArtifact> metadataModules=getOArtifactsMetadataAsList();
  for (  OArtifact metadataModule : metadataModules) {
    for (    OArtifact module : ooArtifacts) {
      OArtifactReference metadataArtifact=metadataModule.getArtifactReference();
      OArtifactReference moduleArtifact=module.getArtifactReference();
      if (metadataArtifact.equals(moduleArtifact)) {
        module.setDownloaded(true);
      }
    }
  }
  return ooArtifacts;
}","/** 
 * Download Orienteer artifacts from server.
 * @return list of {@link OArtifact} from server
 * @throws IOException 
 */
public static List<OArtifact> getOrienteerArtifactsFromServer() throws IOException {
  URL website=new URL(initUtils.getOrienteerModulesUrl());
  File localFile=new File(initUtils.getPathToModulesFolder().toFile(),""String_Node_Str"");
  FileOutputStream fos=new FileOutputStream(localFile);
  try {
    IOUtils.copy(website.openStream(),fos);
  }
  finally {
    fos.close();
  }
  OrienteerArtifactsReader reader=new OrienteerArtifactsReader(localFile.toPath());
  List<OArtifact> ooArtifacts=reader.readArtifacts();
  List<OArtifact> metadataModules=getOArtifactsMetadataAsList();
  for (  OArtifact metadataModule : metadataModules) {
    for (    OArtifact module : ooArtifacts) {
      OArtifactReference metadataArtifact=metadataModule.getArtifactReference();
      OArtifactReference moduleArtifact=module.getArtifactReference();
      if (metadataArtifact.equals(moduleArtifact)) {
        module.setDownloaded(true);
      }
    }
  }
  return ooArtifacts;
}",0.8897707231040565
117316,"@Override public void destroy(Application application){
  OrienteerWebApplication app=(OrienteerWebApplication)application;
}","@Override public void destroy(Application application){
  OrienteerWebApplication app=(OrienteerWebApplication)application;
  app.unregisterModule(Module.class);
}",0.8680555555555556
117317,"private ClassLoader initClassLoader(Properties properties){
  OrienteerClassLoader.create(OrienteerFilter.class.getClassLoader());
  OrienteerClassLoader.enable();
  OrienteerClassLoader.reindex();
  return OrienteerClassLoader.getClassLoader();
}","private ClassLoader initClassLoader(Properties properties){
  OrienteerClassLoader.create(OrienteerFilter.class.getClassLoader());
  OrienteerClassLoader.enable();
  return OrienteerClassLoader.getClassLoader();
}",0.7434782608695653
117318,"@Override public void destroy(){
  LOG.info(""String_Node_Str"" + this.getClass().getName());
  OrienteerClassLoader.clear();
  filter.destroy();
  filter=null;
}","@Override public void destroy(){
  LOG.info(""String_Node_Str"" + this.getClass().getName());
  filter.destroy();
  filter=null;
}",0.8888888888888888
117319,"public synchronized <M extends IOrienteerModule>M registerModule(Class<M> moduleClass){
  M module=getServiceInstance(moduleClass);
  registeredModules.put(module.getName(),getServiceInstance(moduleClass));
  registeredModulesSorted=false;
  return module;
}","public synchronized <M extends IOrienteerModule>M registerModule(Class<M> moduleClass){
  M module=getServiceInstance(moduleClass);
  registeredModules.put(module.getName(),getServiceInstance(moduleClass));
  registeredModulesSorted=false;
  MethodManager.get().addModule(moduleClass);
  MethodManager.get().reload();
  return module;
}",0.8686868686868687
117320,"public synchronized <M extends IOrienteerModule>M unregisterModule(Class<M> moduleClass){
  M module=getServiceInstance(moduleClass);
  if (registeredModules.containsKey(module.getName())) {
    registeredModules.remove(module.getName());
    return module;
  }
 else   LOG.info(""String_Node_Str"" + module.getName());
  return null;
}","public synchronized <M extends IOrienteerModule>M unregisterModule(Class<M> moduleClass){
  M module=getServiceInstance(moduleClass);
  if (registeredModules.containsKey(module.getName())) {
    MethodManager.get().removeModule(moduleClass);
    registeredModules.remove(module.getName());
    MethodManager.get().reload();
    return module;
  }
 else   LOG.info(""String_Node_Str"" + module.getName());
  return null;
}",0.8419654714475432
117321,"/** 
 * Add Orienteer modules to classloader resources.
 * @param modules - list which contains modules for add
 * @throws NullPointerException if jar file of module is null
 */
private void addModulesToClassLoaderResources(List<OArtifact> modules){
  for (  OArtifact metadata : modules) {
    try {
      addURL(metadata.getArtifactReference().getFile().toURI().toURL());
      for (      OArtifactReference artifact : metadata.getDependencies()) {
        addURL(artifact.getFile().toURI().toURL());
      }
      addOrienteerModule(metadata.getArtifactReference().getFile().toPath());
    }
 catch (    MalformedURLException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * Add Orienteer modules to classloader resources.
 * @param modules - list which contains modules for add
 * @throws NullPointerException if jar file of module is null
 */
private void addModulesToClassLoaderResources(List<OArtifact> modules){
  for (  OArtifact metadata : modules) {
    try {
      addURL(metadata.getArtifactReference().getFile().toURI().toURL());
      for (      OArtifactReference artifact : metadata.getDependencies()) {
        addURL(artifact.getFile().toURI().toURL());
      }
    }
 catch (    MalformedURLException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.9394409937888198
117322,"public LinkEditPanel(String id,IModel<ODocument> documentModel,IModel<OProperty> propertyModel){
  super(id,new DynamicPropertyValueModel<OIdentifiable>(documentModel,propertyModel));
  setOutputMarkupPlaceholderTag(true);
  setRenderBodyOnly(false);
  inputDocument=new ODocumentModel((ORID)getModelObject());
  add(new ODocumentPageLink(""String_Node_Str"",inputDocument).setDocumentNameAsBody(true));
  modal=new ModalWindow(""String_Node_Str"");
  modal.setAutoSize(true);
  add(modal);
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setContent(new SelectDialogPanel(modal.getContentId(),modal,new PropertyModel<OClass>(propertyModel,""String_Node_Str""),false){
    @Override protected boolean onSelect(    AjaxRequestTarget target,    List<ODocument> objects,    boolean selectMore){
      if (objects == null || objects.size() == 0)       return true;
      if (objects.size() > 1) {
        String message=getLocalizer().getString(""String_Node_Str"",this).replace(""String_Node_Str"",""String_Node_Str"");
        target.appendJavaScript(""String_Node_Str"" + message + ""String_Node_Str"");
        return false;
      }
 else {
        inputDocument.setObject(objects.get(0));
        target.add(LinkEditPanel.this);
        return true;
      }
    }
  }
);
  add(new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      modal.show(target);
    }
  }
);
  add(new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      inputDocument.setObject(null);
      target.add(LinkEditPanel.this);
    }
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(inputDocument.getObject() != null);
    }
  }
);
}","public LinkEditPanel(String id,IModel<ODocument> documentModel,IModel<OProperty> propertyModel){
  super(id,new DynamicPropertyValueModel<OIdentifiable>(documentModel,propertyModel));
  setOutputMarkupPlaceholderTag(true);
  setRenderBodyOnly(false);
  inputDocument=new ODocumentModel(getModelObject());
  add(new ODocumentPageLink(""String_Node_Str"",inputDocument).setDocumentNameAsBody(true));
  modal=new ModalWindow(""String_Node_Str"");
  modal.setAutoSize(true);
  add(modal);
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setContent(new SelectDialogPanel(modal.getContentId(),modal,new PropertyModel<OClass>(propertyModel,""String_Node_Str""),false){
    @Override protected boolean onSelect(    AjaxRequestTarget target,    List<ODocument> objects,    boolean selectMore){
      if (objects == null || objects.size() == 0)       return true;
      if (objects.size() > 1) {
        String message=getLocalizer().getString(""String_Node_Str"",this).replace(""String_Node_Str"",""String_Node_Str"");
        target.appendJavaScript(""String_Node_Str"" + message + ""String_Node_Str"");
        return false;
      }
 else {
        inputDocument.setObject(objects.get(0));
        target.add(LinkEditPanel.this);
        return true;
      }
    }
  }
);
  add(new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      modal.show(target);
    }
  }
);
  add(new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      inputDocument.setObject(null);
      target.add(LinkEditPanel.this);
    }
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(inputDocument.getObject() != null);
    }
  }
);
}",0.9982698961937716
117323,"@Override public String getDefaultSql(){
  String thisLang=getLocale().getLanguage();
  String systemLang=Locale.getDefault().getLanguage();
  OClass oClass=getModelObject();
  StringBuilder sb=new StringBuilder();
  Collection<OProperty> properties=oClass.properties();
  for (  OProperty property : properties) {
    OType type=property.getType();
    if (Comparable.class.isAssignableFrom(type.getDefaultJavaType())) {
      sb.append(property.getName()).append(""String_Node_Str"");
    }
 else     if (OType.LINK.equals(type)) {
      OClass linkedClass=property.getLinkedClass();
      OProperty nameProperty=oClassIntrospector.getNameProperty(linkedClass);
      if (nameProperty != null) {
        OType linkedClassType=nameProperty.getType();
        String map=property.getName() + '.' + nameProperty.getName();
        if (Comparable.class.isAssignableFrom(linkedClassType.getDefaultJavaType())) {
          sb.append(map).append(""String_Node_Str"");
        }
 else         if (OType.EMBEDDEDMAP.equals(linkedClassType)) {
          sb.append(""String_Node_Str"").append(map).append('[').append(thisLang).append(""String_Node_Str"");
          if (!thisLang.equals(systemLang)) {
            sb.append(map).append('[').append(systemLang).append(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"").append(map).append(""String_Node_Str"").append(property.getName()).append(""String_Node_Str"");
        }
      }
    }
  }
  if (sb.length() > 0)   sb.setLength(sb.length() - 2);
  sb.insert(0,""String_Node_Str"");
  sb.append(""String_Node_Str"").append(oClass.getName());
  return sb.toString();
}","@Override public String getDefaultSql(){
  String thisLang=getLocale().getLanguage();
  String systemLang=Locale.getDefault().getLanguage();
  OClass oClass=getModelObject();
  StringBuilder sb=new StringBuilder();
  Collection<OProperty> properties=oClass.properties();
  for (  OProperty property : properties) {
    OType type=property.getType();
    if (OType.LINK.equals(type)) {
      OClass linkedClass=property.getLinkedClass();
      OProperty nameProperty=oClassIntrospector.getNameProperty(linkedClass);
      if (nameProperty != null) {
        OType linkedClassType=nameProperty.getType();
        String map=property.getName() + '.' + nameProperty.getName();
        if (OType.EMBEDDEDMAP.equals(linkedClassType)) {
          sb.append(""String_Node_Str"").append(map).append('[').append(thisLang).append(""String_Node_Str"");
          if (!thisLang.equals(systemLang)) {
            sb.append(map).append('[').append(systemLang).append(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"").append(map).append(""String_Node_Str"").append(property.getName()).append(""String_Node_Str"");
        }
 else         if (Comparable.class.isAssignableFrom(linkedClassType.getDefaultJavaType())) {
          sb.append(map).append(""String_Node_Str"");
        }
      }
    }
 else     if (Comparable.class.isAssignableFrom(type.getDefaultJavaType())) {
      sb.append(property.getName()).append(""String_Node_Str"");
    }
  }
  if (sb.length() > 0)   sb.setLength(sb.length() - 2);
  sb.insert(0,""String_Node_Str"");
  sb.append(""String_Node_Str"").append(oClass.getName());
  return sb.toString();
}",0.8127712337259765
117324,"private ClassLoader initClassLoader(Properties properties){
  OrienteerClassLoader.create(OrienteerFilter.class.getClassLoader());
  OrienteerClassLoader.enable();
  return OrienteerClassLoader.getClassLoader();
}","private ClassLoader initClassLoader(Properties properties){
  OrienteerClassLoader.create(OrienteerFilter.class.getClassLoader());
  OrienteerClassLoader.enable();
  OrienteerClassLoader.reindex();
  return OrienteerClassLoader.getClassLoader();
}",0.9260869565217392
117325,"@Override public void destroy(){
  LOG.info(""String_Node_Str"" + this.getClass().getName());
  filter.destroy();
  filter=null;
}","@Override public void destroy(){
  LOG.info(""String_Node_Str"" + this.getClass().getName());
  OrienteerClassLoader.clear();
  filter.destroy();
  filter=null;
}",0.8888888888888888
117326,"/** 
 * Add Orienteer modules to classloader resources.
 * @param modules - list which contains modules for add
 * @throws NullPointerException if jar file of module is null
 */
private void addModulesToClassLoaderResources(List<OArtifact> modules){
  for (  OArtifact metadata : modules) {
    try {
      addURL(metadata.getArtifactReference().getFile().toURI().toURL());
      for (      OArtifactReference artifact : metadata.getDependencies()) {
        addURL(artifact.getFile().toURI().toURL());
      }
    }
 catch (    MalformedURLException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * Add Orienteer modules to classloader resources.
 * @param modules - list which contains modules for add
 * @throws NullPointerException if jar file of module is null
 */
private void addModulesToClassLoaderResources(List<OArtifact> modules){
  for (  OArtifact metadata : modules) {
    try {
      addURL(metadata.getArtifactReference().getFile().toURI().toURL());
      for (      OArtifactReference artifact : metadata.getDependencies()) {
        addURL(artifact.getFile().toURI().toURL());
      }
      addOrienteerModule(metadata.getArtifactReference().getFile().toPath());
    }
 catch (    MalformedURLException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.9394409937888198
117327,"/** 
 * Unarchive pom.xml from jar file
 * @param jarFile  jar file which contains pom.xml
 * @param jarEntry {@link JarEntry} of pom.xml
 * @return {@link Optional<Path>} of pom.xml or Optional.absent() if pom.xml is not present
 * @throws IOException
 */
private Optional<Path> unarchivePomFile(JarFile jarFile,JarEntry jarEntry) throws IOException {
  Optional<Path> resultOptional=Optional.absent();
  int pointer=jarEntry.getName().lastIndexOf(""String_Node_Str"") + 1;
  String fileName=jarEntry.getName().substring(pointer);
  pointer=jarFile.getName().lastIndexOf(""String_Node_Str"") + 1;
  if (pomFolder == null) {
    String folder=jarFile.getName().substring(0,pointer);
    pomFolder=Paths.get(folder + POM_FOLDER_NAME);
  }
  if (!Files.exists(pomFolder))   Files.createDirectory(pomFolder);
  Path path=pomFolder.resolve(jarFile.getName().substring(pointer).replace(""String_Node_Str"",fileName));
  try (BufferedInputStream in=new BufferedInputStream(jarFile.getInputStream(jarEntry));BufferedOutputStream out=new BufferedOutputStream(Files.newOutputStream(path))){
    int readBytes;
    byte[] buff=new byte[4096];
    while ((readBytes=in.read(buff)) != -1) {
      out.write(buff,0,readBytes);
    }
    resultOptional=Optional.of(path);
  }
 catch (  IOException e) {
    Files.deleteIfExists(path);
    if (LOG.isDebugEnabled()) {
      LOG.error(""String_Node_Str"" + jarEntry.getName());
      e.printStackTrace();
    }
  }
  return resultOptional;
}","/** 
 * Unarchive pom.xml from jar file
 * @param jarFile  jar file which contains pom.xml
 * @param jarEntry {@link JarEntry} of pom.xml
 * @return {@link Optional<Path>} of pom.xml or Optional.absent() if pom.xml is not present
 * @throws IOException
 */
private Optional<Path> unarchivePomFile(JarFile jarFile,JarEntry jarEntry) throws IOException {
  Optional<Path> resultOptional=Optional.absent();
  int pointer=jarEntry.getName().lastIndexOf(""String_Node_Str"") + 1;
  String fileName=jarEntry.getName().substring(pointer);
  Path path=File.createTempFile(fileName,""String_Node_Str"").toPath();
  try (BufferedInputStream in=new BufferedInputStream(jarFile.getInputStream(jarEntry));BufferedOutputStream out=new BufferedOutputStream(Files.newOutputStream(path))){
    int readBytes;
    byte[] buff=new byte[4096];
    while ((readBytes=in.read(buff)) != -1) {
      out.write(buff,0,readBytes);
    }
    resultOptional=Optional.of(path);
  }
 catch (  IOException e) {
    Files.deleteIfExists(path);
    if (LOG.isDebugEnabled()) {
      LOG.error(""String_Node_Str"" + jarEntry.getName());
      e.printStackTrace();
    }
  }
  return resultOptional;
}",0.8580129425199847
117328,"/** 
 * Download Orienteer artifacts to target folder.
 * @param oArtifacts - artifacts for download modules
 */
public void downloadOArtifacts(List<OArtifact> oArtifacts){
  for (  OArtifact module : oArtifacts) {
    File jar=module.getArtifactReference().getFile();
    if (jar == null || !jar.exists()) {
      Optional<Artifact> artifactOptional=OrienteerClassLoaderUtil.downloadArtifact(module.getArtifactReference().toAetherArtifact());
      if (artifactOptional.isPresent()) {
        module.setArtifact(OArtifactReference.valueOf(artifactOptional.get()));
      }
 else {
        module.setLoad(false);
      }
    }
  }
}","/** 
 * Download Orienteer artifacts to target folder.
 * @param oArtifacts - artifacts for download modules
 */
public void downloadOArtifacts(List<OArtifact> oArtifacts){
  for (  OArtifact module : oArtifacts) {
    File jar=module.getArtifactReference().getFile();
    if (jar == null || !jar.exists()) {
      Optional<Artifact> artifactOptional=OrienteerClassLoaderUtil.downloadArtifact(module.getArtifactReference().toAetherArtifact());
      if (artifactOptional.isPresent()) {
        module.setArtifactReference(OArtifactReference.valueOf(artifactOptional.get()));
      }
 else {
        module.setLoad(false);
      }
    }
  }
}",0.9772191673212884
117329,"private Optional<OArtifact> getOArtifact(String groupArtifactVersion,Path pathToJar){
  Optional<OArtifactReference> mainArtifact=pathToJar != null ? getArtifactReference(groupArtifactVersion,pathToJar) : resolveAndGetArtifactReference(groupArtifactVersion);
  if (!mainArtifact.isPresent())   return Optional.absent();
  List<Artifact> artifacts=resolveDependenciesInArtifacts(groupArtifactVersion);
  OArtifact moduleMetadata=new OArtifact();
  moduleMetadata.setLoad(false).setArtifact(mainArtifact.get()).setDependencies(toOArtifactDependencies(artifacts));
  return Optional.of(moduleMetadata);
}","private Optional<OArtifact> getOArtifact(String groupArtifactVersion,Path pathToJar){
  Optional<OArtifactReference> mainArtifact=pathToJar != null ? getArtifactReference(groupArtifactVersion,pathToJar) : resolveAndGetArtifactReference(groupArtifactVersion);
  if (!mainArtifact.isPresent())   return Optional.absent();
  List<Artifact> artifacts=resolveDependenciesInArtifacts(groupArtifactVersion);
  OArtifact moduleMetadata=new OArtifact();
  moduleMetadata.setLoad(false).setArtifactReference(mainArtifact.get()).setDependencies(toOArtifactDependencies(artifacts));
  return Optional.of(moduleMetadata);
}",0.9925681255161024
117330,"/** 
 * Parse mainElement and get   {@link OArtifact} from it.
 * @param mainElement - {@link Element}t for parse
 * @return {@link OArtifact} from mainElement
 */
@SuppressWarnings(""String_Node_Str"") private OArtifact getOoArtifact(Element mainElement){
  OArtifact module=new OArtifact();
  NodeList nodeList=mainElement.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < nodeList.getLength(); i++) {
    Node node=nodeList.item(i);
    if (node.getNodeType() == Node.ELEMENT_NODE) {
      Element element=(Element)node;
      MetadataTag tag=MetadataTag.getByName(element.getTagName());
switch (tag) {
case LOAD:
        module.setLoad(Boolean.valueOf(element.getTextContent()));
      break;
case TRUSTED:
    module.setTrusted(Boolean.valueOf(element.getTextContent()));
  break;
case DEPENDENCY:
module.setArtifact(getMavenDependency(element));
break;
}
}
}
return module;
}","/** 
 * Parse mainElement and get   {@link OArtifact} from it.
 * @param mainElement - {@link Element}t for parse
 * @return {@link OArtifact} from mainElement
 */
@SuppressWarnings(""String_Node_Str"") private OArtifact getOoArtifact(Element mainElement){
  OArtifact module=new OArtifact();
  NodeList nodeList=mainElement.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < nodeList.getLength(); i++) {
    Node node=nodeList.item(i);
    if (node.getNodeType() == Node.ELEMENT_NODE) {
      Element element=(Element)node;
      MetadataTag tag=MetadataTag.getByName(element.getTagName());
switch (tag) {
case LOAD:
        module.setLoad(Boolean.valueOf(element.getTextContent()));
      break;
case TRUSTED:
    module.setTrusted(Boolean.valueOf(element.getTextContent()));
  break;
case DEPENDENCY:
module.setArtifactReference(getMavenDependency(element));
break;
}
}
}
return module;
}",0.994969256567915
117331,"/** 
 * Parse   {@link Element} element and get {@link OArtifact} from it.
 * @param element {@link Element} for parse
 * @return {@link OArtifact} from element
 */
private OArtifact getArtifact(Element element){
  Element groupElement=(Element)element.getElementsByTagName(MetadataTag.GROUP_ID.get()).item(0);
  Element artifactElement=(Element)element.getElementsByTagName(MetadataTag.ARTIFACT_ID.get()).item(0);
  Element versionElement=(Element)element.getElementsByTagName(MetadataTag.VERSION.get()).item(0);
  Element descriptionElement=(Element)element.getElementsByTagName(MetadataTag.DESCRIPTION.get()).item(0);
  String groupId=groupElement != null ? groupElement.getTextContent() : null;
  String artifactId=artifactElement != null ? artifactElement.getTextContent() : null;
  String version=versionElement != null ? versionElement.getTextContent() : null;
  String description=descriptionElement != null ? descriptionElement.getTextContent() : null;
  OArtifact module=new OArtifact();
  return module.setArtifact(new OArtifactReference(groupId,artifactId,version,description));
}","/** 
 * Parse   {@link Element} element and get {@link OArtifact} from it.
 * @param element {@link Element} for parse
 * @return {@link OArtifact} from element
 */
private OArtifact getArtifact(Element element){
  Element groupElement=(Element)element.getElementsByTagName(MetadataTag.GROUP_ID.get()).item(0);
  Element artifactElement=(Element)element.getElementsByTagName(MetadataTag.ARTIFACT_ID.get()).item(0);
  Element versionElement=(Element)element.getElementsByTagName(MetadataTag.VERSION.get()).item(0);
  Element descriptionElement=(Element)element.getElementsByTagName(MetadataTag.DESCRIPTION.get()).item(0);
  String groupId=groupElement != null ? groupElement.getTextContent() : null;
  String artifactId=artifactElement != null ? artifactElement.getTextContent() : null;
  String version=versionElement != null ? versionElement.getTextContent() : null;
  String description=descriptionElement != null ? descriptionElement.getTextContent() : null;
  OArtifact module=new OArtifact();
  return module.setArtifactReference(new OArtifactReference(groupId,artifactId,version,description));
}",0.9958960328317372
117332,"@SuppressWarnings(""String_Node_Str"") public static Collection<Artifact> getAvailableArtifacts(ClassLoader classLoader){
  Collection<Artifact> ret=new HashSet<>();
  try {
    Enumeration<URL> urls=classLoader.getResources(""String_Node_Str"");
    while (urls.hasMoreElements()) {
      URL url=(URL)urls.nextElement();
      try (InputStream is=url.openStream()){
        Manifest manifest=new Manifest(is);
        Attributes attrs=manifest.getMainAttributes();
        String groupId=attrs.getValue(Name.IMPLEMENTATION_VENDOR_ID);
        String artifactId=attrs.getValue(Name.IMPLEMENTATION_TITLE);
        String version=attrs.getValue(Name.IMPLEMENTATION_VERSION);
        if (!Strings.isEmpty(groupId) && !Strings.isEmpty(artifactId) && !Strings.isEmpty(version)) {
          try {
            ret.add(new DefaultArtifact(String.format(""String_Node_Str"",groupId,artifactId,version)));
          }
 catch (          IllegalArgumentException e) {
          }
        }
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"" + url,e);
      }
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return ret;
}","@SuppressWarnings(""String_Node_Str"") public static Collection<Artifact> getAvailableArtifacts(ClassLoader classLoader){
  Collection<Artifact> ret=new HashSet<>();
  try {
    Enumeration<URL> urls=classLoader.getResources(""String_Node_Str"");
    while (urls.hasMoreElements()) {
      URL url=(URL)urls.nextElement();
      try (InputStream is=url.openStream()){
        Manifest manifest=new Manifest(is);
        Attributes attrs=manifest.getMainAttributes();
        String groupId=attrs.getValue(Name.IMPLEMENTATION_VENDOR_ID);
        String artifactId=attrs.getValue(Name.IMPLEMENTATION_TITLE);
        String version=attrs.getValue(Name.IMPLEMENTATION_VERSION);
        if (!Strings.isNullOrEmpty(groupId) && !Strings.isNullOrEmpty(artifactId) && !Strings.isNullOrEmpty(version)) {
          try {
            ret.add(new DefaultArtifact(String.format(""String_Node_Str"",groupId,artifactId,version)));
          }
 catch (          IllegalArgumentException e) {
          }
        }
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"" + url,e);
      }
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return ret;
}",0.9922879177377892
117333,"/** 
 * Delete artifact jar file
 * @param oArtifact {@link OArtifact} artifact which jar file will be delete
 * @throws IllegalArgumentException if oArtifact is null
 * @throws IllegalStateException if jar file of oArtifact is null
 */
public static void deleteOArtifactArtifactFile(OArtifact oArtifact){
  Args.notNull(oArtifact,""String_Node_Str"");
  try {
    File file=oArtifact.getArtifactReference().getFile();
    if (file == null)     throw new IllegalStateException(""String_Node_Str"" + oArtifact);
    Files.deleteIfExists(file.toPath());
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",oArtifact,e);
  }
}","/** 
 * Delete artifact jar file
 * @param oArtifact {@link OArtifact} artifact which jar file will be delete
 * @throws IllegalArgumentException if oArtifact is null
 */
public static void deleteOArtifactArtifactFile(OArtifact oArtifact){
  Args.notNull(oArtifact,""String_Node_Str"");
  try {
    File file=oArtifact.getArtifactReference().getFile();
    if (file != null) {
      Files.deleteIfExists(file.toPath());
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",oArtifact,e);
  }
}",0.8186619718309859
117334,"public AddOArtifactCommand(OrienteerDataTable<OArtifact,?> table,WebPage page,IOArtifactsUpdater updater){
  super(new ResourceModel(ADD_BUT),table);
  this.modalWindowPage=page;
  this.table=table;
  this.updater=updater;
}","public AddOArtifactCommand(OrienteerDataTable<OArtifact,?> table,OArtifactsModalWindowPage page,IOArtifactsUpdater updater){
  super(new ResourceModel(ADD_BUT),table);
  this.modalWindowPage=page;
  this.table=table;
  this.updater=updater;
}",0.9527896995708156
117335,"@SuppressWarnings(""String_Node_Str"") @Override protected void initializeContent(ModalWindow modal){
  modal.setOutputMarkupPlaceholderTag(true);
  modal.setTitle(new ResourceModel(MODAL_WINDOW_TITLE));
  modal.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      return modalWindowPage;
    }
  }
);
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    AjaxRequestTarget target){
      updater.notifyAboutNewArtifacts();
      target.add(table);
    }
  }
);
  modal.setAutoSize(true);
  modal.setMinimalWidth(800);
  modal.setMinimalHeight(600);
}","@SuppressWarnings(""String_Node_Str"") @Override protected void initializeContent(ModalWindow modal){
  modal.setOutputMarkupPlaceholderTag(true);
  modal.setTitle(new ResourceModel(MODAL_WINDOW_TITLE));
  modal.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      return modalWindowPage;
    }
  }
);
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    AjaxRequestTarget target){
      updater.notifyAboutNewArtifacts();
      target.add(table);
    }
  }
);
  modal.setAutoSize(true);
  modal.setMinimalWidth(800);
  modal.setMinimalHeight(600);
  modalWindowPage.setModalWindow(modal);
}",0.9691497366440932
117336,"public void loadMethods(){
  AbstractWidget<?> widget=externalList.findParent(AbstractWidget.class);
  methods=MethodManager.get().getMethods(new MethodBaseData(displayObjectModel,widget,place));
  for (  IMethod method : methods) {
    Component component=method.getDisplayComponent(externalList.newChildId());
    if (component instanceof IBootstrapAware && bootstrapTypeOverriden) {
      ((IBootstrapAware)component).setBootstrapType(bootstrapType);
    }
    externalList.add(component);
  }
}","public void loadMethods(){
  AbstractWidget<?> widget=externalList.findParent(AbstractWidget.class);
  methods=MethodManager.get().getMethods(new MethodBaseData(displayObjectModel,widget,place));
  for (  IMethod method : methods) {
    Component component=method.getDisplayComponent(externalList.newChildId());
    if (component != null) {
      if (component instanceof IBootstrapAware && bootstrapTypeOverriden) {
        ((IBootstrapAware)component).setBootstrapType(bootstrapType);
      }
      externalList.add(component);
    }
  }
}",0.958614051973051
117337,"@Override protected void onConfigure(){
  super.onConfigure();
  IVisitor<Component,Boolean> visitor=new IVisitor<Component,Boolean>(){
    public void component(    Component component,    IVisit<Boolean> visit){
      component.configure();
      if (component.determineVisibility()) {
        visit.stop(true);
      }
 else {
        visit.dontGoDeeper();
      }
    }
  }
;
  Boolean ret=commands.visitChildren(visitor);
  if (ret == null || ret == false) {
    ret=methods.visitChildren(visitor);
  }
  setVisible(ret != null ? ret : false);
}","@Override protected void onConfigure(){
  super.onConfigure();
  IVisitor<Component,Boolean> visitor=new IVisitor<Component,Boolean>(){
    public void component(    Component component,    IVisit<Boolean> visit){
      component.configure();
      if (component.determineVisibility()) {
        visit.stop(true);
      }
 else {
        visit.dontGoDeeper();
      }
    }
  }
;
  Boolean ret=commands.visitChildren(visitor);
  if (ret == null || !ret) {
    ret=methods.visitChildren(visitor);
  }
  setVisible(ret != null ? ret : false);
}",0.8388278388278388
117338,"@Override protected void onConfigure(){
  super.onConfigure();
  IVisitor<Component,Boolean> visitor=new IVisitor<Component,Boolean>(){
    public void component(    Component component,    IVisit<Boolean> visit){
      component.configure();
      if (component.determineVisibility()) {
        visit.stop(true);
      }
 else {
        visit.dontGoDeeper();
      }
    }
  }
;
  Boolean ret=commands.visitChildren(visitor);
  if (ret == null || ret == false) {
    ret=methods.visitChildren(visitor);
  }
  setVisible(ret != null ? ret : false);
}","@Override protected void onConfigure(){
  super.onConfigure();
  IVisitor<Component,Boolean> visitor=new IVisitor<Component,Boolean>(){
    public void component(    Component component,    IVisit<Boolean> visit){
      component.configure();
      if (component.determineVisibility()) {
        visit.stop(true);
      }
 else {
        visit.dontGoDeeper();
      }
    }
  }
;
  Boolean ret=commands.visitChildren(visitor);
  if (ret == null || !ret) {
    ret=methods.visitChildren(visitor);
  }
  setVisible(ret != null ? ret : false);
}",0.8388278388278388
117339,"@Override public String getDocumentName(ODocument doc,OProperty nameProp){
  if (doc == null)   return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
 else {
    if (nameProp == null)     nameProp=getNameProperty(doc.getSchemaClass());
    if (nameProp != null) {
      Object value=doc.field(nameProp.getName());
      if (value == null)       return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
      OType type=nameProp.getType();
      Locale locale=OrienteerWebSession.get().getLocale();
switch (type) {
case DATE:
        return OrienteerWebApplication.DATE_CONVERTER.convertToString((Date)value,locale);
case DATETIME:
      return OrienteerWebApplication.DATE_TIME_CONVERTER.convertToString((Date)value,locale);
case LINK:
    return getDocumentName((ODocument)value);
case EMBEDDEDMAP:
  Map<String,Object> localizations=(Map<String,Object>)value;
Object localized=CommonUtils.localizeByMap(localizations,true,locale.getLanguage(),Locale.getDefault().getLanguage());
if (localized != null) return localized.toString();
default :
return value.toString();
}
}
 else {
return doc.toString();
}
}
}","@Override public String getDocumentName(ODocument doc,OProperty nameProp){
  if (doc == null)   return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
 else {
    if (nameProp == null)     nameProp=getNameProperty(doc.getSchemaClass());
    if (nameProp != null) {
      Object value=doc.field(nameProp.getName());
      if (value == null)       return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
      OType type=nameProp.getType();
      Locale locale=OrienteerWebSession.get().getLocale();
switch (type) {
case DATE:
        return OrienteerWebApplication.DATE_CONVERTER.convertToString((Date)value,locale);
case DATETIME:
      return OrienteerWebApplication.DATE_TIME_CONVERTER.convertToString((Date)value,locale);
case LINK:
    return value instanceof ODocument ? getDocumentName((ODocument)value) : null;
case EMBEDDEDMAP:
  Map<String,Object> localizations=(Map<String,Object>)value;
Object localized=CommonUtils.localizeByMap(localizations,true,locale.getLanguage(),Locale.getDefault().getLanguage());
if (localized != null) return localized.toString();
default :
return value.toString();
}
}
 else {
return doc.toString();
}
}
}",0.9851116625310172
117340,"private OModuleMetadata getModule(Element mainElement){
  OModuleMetadata module=new OModuleMetadata();
  List<Element> elements=mainElement.elements();
  for (  Element element : elements) {
switch (element.getName()) {
case ID:
      module.setId(Integer.valueOf(element.getText()));
    break;
case INITIALIZER:
  module.setInitializerName(element.getText());
break;
case LOAD:
module.setLoad(Boolean.valueOf(element.getText()));
break;
case MAVEN:
Artifact mainDependency=getMavenDependency(element.element(MAIN_DEPENDENCY));
List<Artifact> dependencies=getDependencies(element.elements(DEPENDENCIES));
module.setMainArtifact(mainDependency).setDependencies(dependencies);
break;
}
}
return module;
}","private OModuleMetadata getModule(Element mainElement){
  OModuleMetadata module=new OModuleMetadata();
  List<Element> elements=mainElement.elements();
  for (  Element element : elements) {
switch (element.getName()) {
case ID:
      module.setId(Integer.valueOf(element.getText()));
    break;
case INITIALIZER:
  module.setInitializerName(element.getText());
break;
case LOAD:
module.setLoad(Boolean.valueOf(element.getText()));
break;
case MAVEN:
Artifact mainDependency=getMavenDependency(element.element(MAIN_DEPENDENCY));
List<Artifact> dependencies=getDependencies(element.element(DEPENDENCIES));
module.setMainArtifact(mainDependency).setDependencies(dependencies);
break;
}
}
return module;
}",0.9992892679459844
117341,"private List<Artifact> getDependencies(List<Element> elements){
  List<Artifact> dependencies=Lists.newArrayList();
  for (  Element element : elements) {
    dependencies.add(getMavenDependency(element.element(DEPENDENCY)));
  }
  return dependencies;
}","private List<Artifact> getDependencies(Element dependenciesElement){
  List<Artifact> dependencies=Lists.newArrayList();
  List<Element> elements=dependenciesElement.elements(DEPENDENCY);
  for (  Element element : elements) {
    if (element.getName().equals(DEPENDENCY)) {
      dependencies.add(getMavenDependency(element));
    }
  }
  return dependencies;
}",0.5974025974025974
117342,"void update(List<OModuleMetadata> modulesForWrite){
  Document document=readFromFile();
  if (document == null)   throw new UnsupportedOperationException(""String_Node_Str"");
  Element rootElement=document.getRootElement();
  List<Node> modules=rootElement.elements(MODULE);
  List<OModuleMetadata> updatedModules=Lists.newArrayList();
  for (  Node node : modules) {
    Element element=(Element)node;
    Element idElement=(Element)element.elements(ID).get(0);
    OModuleMetadata module=containsInModulesList(Integer.valueOf(idElement.getText()),modulesForWrite);
    if (module != null) {
      Iterator iterator=element.elementIterator();
      changeModule(iterator,module);
      updatedModules.add(module);
    }
  }
  if (updatedModules.size() != modulesForWrite.size()) {
    addModules(difference(updatedModules,modulesForWrite),rootElement);
  }
  writeToFile(document);
}","void update(List<OModuleMetadata> modulesForWrite){
  Document document=readFromFile();
  if (document == null)   throw new UnsupportedOperationException(""String_Node_Str"");
  Element rootElement=document.getRootElement();
  List<Node> modules=rootElement.elements(MODULE);
  List<OModuleMetadata> updatedModules=Lists.newArrayList();
  int id=0;
  for (  Node node : modules) {
    Element element=(Element)node;
    Element idElement=(Element)element.elements(ID).get(0);
    int currentId=Integer.valueOf(idElement.getText());
    if (id < currentId)     id=currentId;
    OModuleMetadata module=containsInModulesList(currentId,modulesForWrite);
    if (module != null) {
      Iterator iterator=element.elementIterator();
      changeModule(iterator,module);
      updatedModules.add(module);
    }
  }
  if (updatedModules.size() != modulesForWrite.size()) {
    setIdForModules(modulesForWrite,++id);
    addModules(difference(updatedModules,modulesForWrite),rootElement);
  }
  writeToFile(document);
}",0.8868921775898521
117343,"private static List<OModuleMetadata> getModulesForLoad(){
  Map<Path,OModuleMetadata> modules=MetadataUtil.readModulesForLoadAsMap();
  List<Path> jars=readModulesInFolder(modulesFolder);
  if (modules.isEmpty()) {
    List<OModuleMetadata> newModules=getModulesMetadata(jars);
    MetadataUtil.createMetadata(newModules);
    return newModules;
  }
 else {
    List<Path> modulesForWrite=Lists.newArrayList();
    for (    Path pathToModule : jars) {
      if (!modules.keySet().contains(pathToModule.toAbsolutePath())) {
        modulesForWrite.add(pathToModule);
      }
    }
    List<OModuleMetadata> modulesForAdd=getModulesMetadata(modulesForWrite);
    MetadataUtil.addModulesToMetadata(modulesForAdd);
    modulesForAdd.addAll(modules.values());
    return Collections.unmodifiableList(modulesForAdd);
  }
}","private static List<OModuleMetadata> getModulesForLoad(){
  Map<Path,OModuleMetadata> modules=MetadataUtil.readModulesForLoadAsMap();
  List<Path> jars=readModulesInFolder(modulesFolder);
  if (modules.isEmpty()) {
    LOADED_MODULES.clear();
    OLoaderStorage.clear();
    List<OModuleMetadata> newModules=getModulesMetadata(jars);
    MetadataUtil.createMetadata(newModules);
    return newModules;
  }
 else {
    List<Path> modulesForWrite=Lists.newArrayList();
    for (    Path pathToModule : jars) {
      if (!modules.keySet().contains(pathToModule.toAbsolutePath())) {
        modulesForWrite.add(pathToModule);
      }
    }
    List<OModuleMetadata> modulesForAdd=getModulesMetadata(modulesForWrite);
    MetadataUtil.addModulesToMetadata(modulesForAdd);
    modulesForAdd.addAll(modules.values());
    return Collections.unmodifiableList(modulesForAdd);
  }
}",0.966824644549763
117344,"private static void reload(){
  OrienteerFilter orienteerFilter=injector.getInstance(OrienteerFilter.class);
  ScheduledThreadPoolExecutor executor=new ScheduledThreadPoolExecutor(5);
  executor.schedule(new Reload(orienteerFilter),1,TimeUnit.SECONDS);
}","private static void reload(){
  OrienteerFilter orienteerFilter=injector.getInstance(OrienteerFilter.class);
  ScheduledThreadPoolExecutor executor=new ScheduledThreadPoolExecutor(10);
  executor.schedule(new Reload(orienteerFilter),1,TimeUnit.SECONDS);
}",0.9941060903732808
117345,"@Override public String getDocumentName(ODocument doc,OProperty nameProp){
  if (doc == null)   return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
 else {
    if (nameProp == null)     nameProp=getNameProperty(doc.getSchemaClass());
    if (nameProp != null) {
      Object value=doc.field(nameProp.getName());
      if (value == null)       return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
      OType type=nameProp.getType();
      Locale locale=OrienteerWebSession.get().getLocale();
switch (type) {
case DATE:
        return OrienteerWebApplication.DATE_CONVERTER.convertToString((Date)value,locale);
case DATETIME:
      return OrienteerWebApplication.DATE_TIME_CONVERTER.convertToString((Date)value,locale);
case LINK:
    return getDocumentName((ODocument)value);
case EMBEDDEDMAP:
  Map<String,Object> localizations=(Map<String,Object>)value;
Object localized=CommonUtils.localizeByMap(localizations,true,locale.getLanguage(),Locale.getDefault().getLanguage());
if (localized != null) return localized.toString();
default :
return value.toString();
}
}
 else {
return doc.toString();
}
}
}","@Override public String getDocumentName(ODocument doc,OProperty nameProp){
  if (doc == null)   return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
 else {
    if (nameProp == null)     nameProp=getNameProperty(doc.getSchemaClass());
    if (nameProp != null) {
      Object value=doc.field(nameProp.getName());
      if (value == null)       return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
      OType type=nameProp.getType();
      Locale locale=OrienteerWebSession.get().getLocale();
switch (type) {
case DATE:
        return OrienteerWebApplication.DATE_CONVERTER.convertToString((Date)value,locale);
case DATETIME:
      return OrienteerWebApplication.DATE_TIME_CONVERTER.convertToString((Date)value,locale);
case LINK:
    return value instanceof ODocument ? getDocumentName((ODocument)value) : null;
case EMBEDDEDMAP:
  Map<String,Object> localizations=(Map<String,Object>)value;
Object localized=CommonUtils.localizeByMap(localizations,true,locale.getLanguage(),Locale.getDefault().getLanguage());
if (localized != null) return localized.toString();
default :
return value.toString();
}
}
 else {
return doc.toString();
}
}
}",0.9851116625310172
117346,"private static Set<Artifact> differenceWithCoreDependencies(Set<Artifact> dependencies){
  Set<Artifact> artifacts=Sets.newHashSet();
  for (  Artifact d : dependencies) {
    for (    Artifact core : coreDependencies) {
      if (d.getGroupId().equals(core.getGroupId()) && d.getArtifactId().equals(core.getArtifactId()) && d.getVersion().equals(core.getVersion())) {
        continue;
      }
 else {
        artifacts.add(d);
        break;
      }
    }
  }
  return artifacts;
}","private static Set<Artifact> differenceWithCoreDependencies(Set<Artifact> dependencies){
  Set<Artifact> artifacts=Sets.newHashSet();
  for (  Artifact d : dependencies) {
    if (!containsInCoreDependencies(d)) {
      artifacts.add(d);
    }
  }
  return artifacts;
}",0.5478723404255319
117347,"private void mountOrUnmountPages(String packageName,ClassLoader classLoader,boolean mount){
  ClassPath classPath;
  try {
    classPath=ClassPath.from(classLoader);
  }
 catch (  IOException e) {
    throw new WicketRuntimeException(""String_Node_Str"",e);
  }
  if (!mount && !ThreadContext.exists())   return;
  for (  ClassInfo classInfo : classPath.getTopLevelClassesRecursive(packageName)) {
    Class<?> clazz=classInfo.load();
    MountPath mountPath=clazz.getAnnotation(MountPath.class);
    if (mountPath != null) {
      if (!IRequestablePage.class.isAssignableFrom(clazz))       throw new WicketRuntimeException(""String_Node_Str"" + MountPath.class.getSimpleName() + ""String_Node_Str"");
      Class<? extends IRequestablePage> pageClass=(Class<? extends IRequestablePage>)clazz;
      String mainPath=mountPath.value();
      String[] alt=mountPath.alt();
      for (int i=alt.length - 1; i >= -1; i--) {
        String path=i < 0 ? mainPath : alt[i];
        if (mount) {
          if (""String_Node_Str"".equals(path)) {
            mount(new HomePageMapper(pageClass));
          }
          mount(new MountedMapper(path,pageClass));
        }
 else {
          unmount(path);
        }
      }
    }
  }
}","private void mountOrUnmountPages(String packageName,ClassLoader classLoader,boolean mount){
  ClassPath classPath;
  try {
    classPath=ClassPath.from(classLoader);
  }
 catch (  IOException e) {
    throw new WicketRuntimeException(""String_Node_Str"",e);
  }
  for (  ClassInfo classInfo : classPath.getTopLevelClassesRecursive(packageName)) {
    Class<?> clazz=classInfo.load();
    MountPath mountPath=clazz.getAnnotation(MountPath.class);
    if (mountPath != null) {
      if (!IRequestablePage.class.isAssignableFrom(clazz))       throw new WicketRuntimeException(""String_Node_Str"" + MountPath.class.getSimpleName() + ""String_Node_Str"");
      Class<? extends IRequestablePage> pageClass=(Class<? extends IRequestablePage>)clazz;
      String mainPath=mountPath.value();
      String[] alt=mountPath.alt();
      for (int i=alt.length - 1; i >= -1; i--) {
        String path=i < 0 ? mainPath : alt[i];
        if (mount) {
          if (""String_Node_Str"".equals(path)) {
            mount(new HomePageMapper(pageClass));
          }
          mount(new MountedMapper(path,pageClass));
        }
 else {
          unmount(path);
        }
      }
    }
  }
}",0.9785804283914322
117348,"public static synchronized void registerModules(){
  LOG.info(""String_Node_Str"");
  Set<Path> jarsInFolder=readModulesInFolder(modulesFolder);
  showAlreadyLoaded();
  for (  Path jarFile : Sets.difference(jarsInFolder,LOADED)) {
    manager.setModulePath(jarFile);
    Optional<String> className=getInitClass(jarFile);
    if (className.isPresent()) {
      FlexyClassLoader moduleLoader=executeInitClass(className.get());
      if (moduleLoader != null) {
        LOG.info(""String_Node_Str"" + className.get() + ""String_Node_Str""+ jarFile);
        OLoaderStorage.addModuleLoader(className.get(),moduleLoader);
        LOADED.add(jarFile);
      }
    }
 else     LOG.warn(""String_Node_Str"" + jarFile);
  }
  OLoaderStorage.updateRootLoader();
  LOG.info(""String_Node_Str"");
}","public static synchronized void registerModules(){
  LOG.info(""String_Node_Str"");
  Set<Path> jarsInFolder=readModulesInFolder(modulesFolder);
  showAlreadyLoaded();
  int i=0;
  for (  Path jarFile : Sets.difference(jarsInFolder,LOADED)) {
    manager.setModulePath(jarFile);
    Optional<String> className=getInitClass(jarFile);
    if (className.isPresent()) {
      FlexyClassLoader moduleLoader=executeInitClass(className.get());
      if (moduleLoader != null) {
        LOG.info(""String_Node_Str"" + className.get() + ""String_Node_Str""+ jarFile);
        OLoaderStorage.addModuleLoader(className.get(),moduleLoader);
        LOADED.add(jarFile);
        i++;
      }
    }
 else     LOG.warn(""String_Node_Str"" + jarFile);
  }
  OLoaderStorage.updateRootLoader();
  LOG.info(""String_Node_Str"");
  if (i > 0) {
    reload();
  }
}",0.9646182495344506
117349,"private static IInitializer load(String fullClassName) throws Exception {
  ODependencyLoader loader=injector.getInstance(ODependencyLoader.class);
  Object obj=loader.newInstance(fullClassName);
  return obj != null ? (IInitializer)obj : null;
}","private static Object load(String fullClassName) throws Exception {
  ODependencyLoader loader=injector.getInstance(ODependencyLoader.class);
  return loader.newInstance(fullClassName);
}",0.8221709006928406
117350,"public static void loadModules(Application app){
  LOG.info(""String_Node_Str"");
  loadJars();
  Set<String> classNames=getModulesClassNames();
  for (  String fullClassName : classNames) {
    IInitializer initializer;
    try {
      initializer=load(fullClassName);
      if (initializer != null)       initializer.init(app);
 else       throw new NullPointerException();
      LOG.info(fullClassName + ""String_Node_Str"" + initializer);
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + fullClassName);
      e.printStackTrace();
    }
  }
  LOG.info(""String_Node_Str"");
}","public static void loadModules(Application app){
  LOG.info(""String_Node_Str"");
  loadJars();
  Set<String> classNames=getModulesClassNames();
  Thread.currentThread().setContextClassLoader(injector.getInstance(JarClassLoader.class));
  for (  String fullClassName : classNames) {
    IInitializer initializer;
    try {
      initializer=(IInitializer)load(fullClassName);
      if (initializer != null)       initializer.init(app);
 else       throw new NullPointerException();
      LOG.info(fullClassName + ""String_Node_Str"" + initializer);
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + fullClassName);
      e.printStackTrace();
    }
  }
  LOG.info(""String_Node_Str"");
}",0.9179566563467492
117351,"@Override public void run(){
  LOG.debug(""String_Node_Str"");
  timeout(3000);
  reload();
  LOG.debug(""String_Node_Str"");
}","@Override public void run(){
  LOG.debug(""String_Node_Str"");
  timeout(2000);
  reload();
  LOG.debug(""String_Node_Str"");
}",0.991869918699187
117352,"public void reload() throws ServletException {
  if (filter == null)   return;
  reload(filter.getFilterConfig());
}","protected void reload() throws ServletException {
  if (filter == null)   return;
  reload(filter.getFilterConfig());
}",0.9531914893617022
117353,"public static Injector getInjector(){
  return injector != null ? injector : Guice.createInjector(new DependencyLoaderInitModule(),new ReloadOrienteerInitModule());
}","protected static Injector getInjector(){
  return injector != null ? injector : Guice.createInjector(new ReloadOrienteerInitModule());
}",0.8543046357615894
117354,"@Override protected void configureServlets(){
  bind(InterceptContentFilter.class).asEagerSingleton();
  filter(""String_Node_Str"").through(InterceptContentFilter.class);
  bind(WicketFilter.class).in(Singleton.class);
  filter(""String_Node_Str"").through(ReloadFilter.class);
  bind(ReloadFilter.class).in(Singleton.class);
  filter(""String_Node_Str"").through(WicketFilter.class);
  bind(FilterConfigProvider.class).in(Singleton.class);
  bind(FilterConfig.class).toProvider(FilterConfigProvider.class);
  Properties properties=retrieveProperties();
  Names.bindProperties(binder(),properties);
  bindOrientDbProperties(properties);
  String applicationClass=properties.getProperty(""String_Node_Str"");
  Class<? extends OrienteerWebApplication> appClass=OrienteerWebApplication.class;
  if (applicationClass != null) {
    try {
      Class<?> customAppClass=Class.forName(applicationClass);
      if (OrienteerWebApplication.class.isAssignableFrom(appClass)) {
        appClass=(Class<? extends OrienteerWebApplication>)customAppClass;
      }
 else {
        LOG.error(""String_Node_Str"" + applicationClass + ""String_Node_Str""+ OrienteerWebApplication.class+ ""String_Node_Str"");
      }
    }
 catch (    ClassNotFoundException e) {
      LOG.error(""String_Node_Str"" + applicationClass + ""String_Node_Str"");
    }
  }
  bind(appClass);
  Provider<? extends OrienteerWebApplication> appProvider=binder().getProvider(appClass);
  if (!OrienteerWebApplication.class.equals(appClass)) {
    bind(OrienteerWebApplication.class).toProvider(appProvider);
  }
  bind(OrientDbWebApplication.class).toProvider(appProvider);
  bind(WebApplication.class).toProvider(appProvider);
  bind(Properties.class).annotatedWith(Orienteer.class).toInstance(properties);
  install(loadFromClasspath(new OrienteerModule()));
}","@Override protected void configureServlets(){
  bind(InterceptContentFilter.class).asEagerSingleton();
  filter(""String_Node_Str"").through(InterceptContentFilter.class);
  initResources();
  initClassLoader();
  initFilter();
  initApplication();
}",0.1863414634146341
117355,"private Object fromMap(Object input){
  if (input instanceof Map) {
    Map<?,?> objMap=(Map<?,?>)input;
    String rid=(String)(objMap.remove(ODocumentHelper.ATTRIBUTE_RID));
    String clazz=(String)(objMap.remove(ODocumentHelper.ATTRIBUTE_CLASS));
    if (rid != null || clazz != null) {
      ODocument result=null;
      if (rid != null && clazz != null && objMap.isEmpty()) {
        result=new ODocument(clazz,new ORecordId(rid));
      }
 else       if (clazz != null && (rid == null || ((OrientDBEndpoint)getEndpoint()).isMakeNew())) {
        result=new ODocument(clazz);
      }
 else       if (rid != null && clazz != null) {
        result=new ODocument(clazz,new ORecordId(rid));
      }
 else       if (rid != null) {
        result=new ODocument(new ORecordId(rid));
      }
      for (      Entry<?,?> entry : objMap.entrySet()) {
        result.field((String)entry.getKey(),fromMap(entry.getValue()));
      }
      return result;
    }
 else {
      Map<String,Object> result=new HashMap<String,Object>();
      for (      Entry<?,?> entry : objMap.entrySet()) {
        result.put((String)entry.getKey(),fromMap(entry.getValue()));
      }
      return result;
    }
  }
 else   if (input instanceof Iterable) {
    ArrayList<Object> result=new ArrayList<Object>();
    for (    Object item : ((Iterable<?>)input)) {
      result.add(fromMap(item));
    }
    return result;
  }
  return input;
}","private Object fromMap(Object input){
  if (input instanceof Map) {
    Map<?,?> objMap=(Map<?,?>)input;
    String rid=(String)(objMap.remove(ODocumentHelper.ATTRIBUTE_RID));
    String clazz=(String)(objMap.remove(ODocumentHelper.ATTRIBUTE_CLASS));
    if (rid != null || clazz != null) {
      ODocument result=null;
      if (rid != null && clazz != null && objMap.isEmpty()) {
        result=new ODocument(clazz,new ORecordId(rid));
      }
 else       if (clazz != null && (rid == null || ((OrientDBEndpoint)getEndpoint()).isMakeNew())) {
        result=new ODocument(clazz);
      }
 else       if (rid != null && clazz != null) {
        result=new ODocument(clazz,new ORecordId(rid));
      }
 else       if (rid != null) {
        result=new ODocument(new ORecordId(rid));
      }
      for (      Entry<?,?> entry : objMap.entrySet()) {
        Object value=fromMap(entry.getValue());
        if (value instanceof String && Strings.isEmpty((String)value)) {
          value=null;
        }
        result.field((String)entry.getKey(),value);
      }
      return result;
    }
 else {
      Map<String,Object> result=new HashMap<String,Object>();
      for (      Entry<?,?> entry : objMap.entrySet()) {
        result.put((String)entry.getKey(),fromMap(entry.getValue()));
      }
      return result;
    }
  }
 else   if (input instanceof Iterable) {
    ArrayList<Object> result=new ArrayList<Object>();
    for (    Object item : ((Iterable<?>)input)) {
      result.add(fromMap(item));
    }
    return result;
  }
  return input;
}",0.927487352445194
117356,"@SuppressWarnings(""String_Node_Str"") private Object processSingleObject(Object input,OrientDBEndpoint endpoint,ODatabaseDocument db) throws Exception {
  ODocument inputDocument=null;
  if (input instanceof Map) {
    inputDocument=(ODocument)fromMap(input);
  }
 else   if (input instanceof ODocument) {
    inputDocument=fromObject((ODocument)input,endpoint,db);
  }
 else   if (input instanceof String && isJsonObject((String)input)) {
    inputDocument=fromJSON((String)input,endpoint,db);
  }
  if (inputDocument != null) {
    if (!Strings.isEmpty(endpoint.getInputAsOClass())) {
      inputDocument.setClassName(endpoint.getInputAsOClass());
    }
    if (endpoint.isMakeNew()) {
      inputDocument.getIdentity().reset();
    }
    if (endpoint.isPreload()) {
      inputDocument.save();
    }
    if (!Strings.isEmpty(endpoint.getSQLQuery())) {
      Object dbResult=db.command(new OCommandSQL(endpoint.getSQLQuery())).execute(inputDocument.toMap());
      return dbResult;
    }
    return inputDocument;
  }
 else {
    if (!Strings.isEmpty(endpoint.getSQLQuery())) {
      if (input instanceof List) {
        convertLinks((List<Object>)input);
        Object dbResult=db.command(new OCommandSQL(endpoint.getSQLQuery())).execute(((List<?>)input).toArray());
        return dbResult;
      }
 else {
        Object dbResult=db.command(new OCommandSQL(endpoint.getSQLQuery())).execute(input);
        return dbResult;
      }
    }
  }
  return input;
}","@SuppressWarnings(""String_Node_Str"") private Object processSingleObject(Object input,OrientDBEndpoint endpoint,ODatabaseDocument db) throws Exception {
  ODocument inputDocument=null;
  if (input instanceof Map) {
    if (!Strings.isEmpty(endpoint.getInputAsOClass())) {
      ((Map<Object,Object>)input).put(ODocumentHelper.ATTRIBUTE_CLASS,endpoint.getInputAsOClass());
    }
    inputDocument=(ODocument)fromMap(input);
  }
 else   if (input instanceof ODocument) {
    inputDocument=fromObject((ODocument)input,endpoint,db);
  }
 else   if (input instanceof String && isJsonObject((String)input)) {
    inputDocument=fromJSON((String)input,endpoint,db);
  }
  if (inputDocument != null) {
    if (!Strings.isEmpty(endpoint.getInputAsOClass())) {
      inputDocument.setClassName(endpoint.getInputAsOClass());
    }
    if (endpoint.isMakeNew()) {
      inputDocument.getIdentity().reset();
    }
    if (endpoint.isPreload()) {
      inputDocument.save();
    }
    if (!Strings.isEmpty(endpoint.getSQLQuery())) {
      Object dbResult=db.command(new OCommandSQL(endpoint.getSQLQuery())).execute(inputDocument.toMap());
      return dbResult;
    }
    return inputDocument;
  }
 else {
    if (!Strings.isEmpty(endpoint.getSQLQuery())) {
      if (input instanceof List) {
        convertLinks((List<Object>)input);
        Object dbResult=db.command(new OCommandSQL(endpoint.getSQLQuery())).execute(((List<?>)input).toArray());
        return dbResult;
      }
 else {
        Object dbResult=db.command(new OCommandSQL(endpoint.getSQLQuery())).execute(input);
        return dbResult;
      }
    }
  }
  return input;
}",0.9472321139527357
117357,"public ODocument updateOnlineUser(OUser user,final boolean online){
  final ODocument document=user.getDocument();
  return new DBClosure<ODocument>(){
    @Override protected ODocument execute(    ODatabaseDocument oDatabaseDocument){
      document.field(ONLINE_FIELD,online);
      document.save();
      return document;
    }
  }
.execute();
}","public ODocument updateOnlineUser(final OUser user,final boolean online){
  return new DBClosure<ODocument>(){
    @Override protected ODocument execute(    ODatabaseDocument oDatabaseDocument){
      final ODocument document=user.reload().getDocument();
      document.field(ONLINE_FIELD,online);
      document.save();
      return document;
    }
  }
.execute();
}",0.8419580419580419
117358,"public void updateSessionUser(OUser user,final String sessionId){
  if (user != null) {
    final ODocument document=user.getDocument();
    new DBClosure<ODocument>(){
      @Override protected ODocument execute(      ODatabaseDocument oDatabaseDocument){
        document.field(LAST_SESSION_FIELD,sessionId);
        document.save();
        return document;
      }
    }
.execute();
  }
}","public void updateSessionUser(final OUser user,final String sessionId){
  if (user != null) {
    new DBClosure<ODocument>(){
      @Override protected ODocument execute(      ODatabaseDocument oDatabaseDocument){
        final ODocument document=user.reload().getDocument();
        document.field(LAST_SESSION_FIELD,sessionId);
        document.save();
        return document;
      }
    }
.execute();
  }
}",0.6774595267745953
117359,"@Override public void onInitialize(OrienteerWebApplication app,ODatabaseDocument db){
  super.onInitialize(app,db);
  app.getSessionListeners().add(new ISessionListener(){
    @Override public void onCreated(    Session session){
    }
    @Override public void onUnbound(    final String sessionId){
      new DBClosure<Void>(){
        @Override protected Void execute(        ODatabaseDocument db){
          db.command(new OSQLSynchQuery<Void>(""String_Node_Str"" + OCLASS_USER + ""String_Node_Str""+ ONLINE_FIELD+ ""String_Node_Str""+ LAST_SESSION_FIELD+ ""String_Node_Str""+ sessionId+ ""String_Node_Str""));
          return null;
        }
      }
.execute();
    }
  }
);
}","@Override public void onInitialize(OrienteerWebApplication app,ODatabaseDocument db){
  super.onInitialize(app,db);
  app.getSessionListeners().add(new ISessionListener(){
    @Override public void onCreated(    Session session){
    }
    @Override public void onUnbound(    final String sessionId){
      new DBClosure<Void>(){
        @Override protected Void execute(        ODatabaseDocument db){
          db.command(new OCommandSQL(""String_Node_Str"" + OCLASS_USER + ""String_Node_Str""+ ONLINE_FIELD+ ""String_Node_Str""+ LAST_SESSION_FIELD+ ""String_Node_Str"")).execute(sessionId);
          return null;
        }
      }
.execute();
    }
  }
);
}",0.9441087613293052
117360,"@Override public void onUnbound(final String sessionId){
  new DBClosure<Void>(){
    @Override protected Void execute(    ODatabaseDocument db){
      db.command(new OSQLSynchQuery<Void>(""String_Node_Str"" + OCLASS_USER + ""String_Node_Str""+ ONLINE_FIELD+ ""String_Node_Str""+ LAST_SESSION_FIELD+ ""String_Node_Str""+ sessionId+ ""String_Node_Str""));
      return null;
    }
  }
.execute();
}","@Override public void onUnbound(final String sessionId){
  new DBClosure<Void>(){
    @Override protected Void execute(    ODatabaseDocument db){
      db.command(new OCommandSQL(""String_Node_Str"" + OCLASS_USER + ""String_Node_Str""+ ONLINE_FIELD+ ""String_Node_Str""+ LAST_SESSION_FIELD+ ""String_Node_Str"")).execute(sessionId);
      return null;
    }
  }
.execute();
}",0.9018567639257294
117361,"@Override protected ODocument execute(ODatabaseDocument oDatabaseDocument){
  document.field(LAST_SESSION_FIELD,sessionId);
  document.save();
  return document;
}","@Override protected ODocument execute(ODatabaseDocument oDatabaseDocument){
  final ODocument document=user.reload().getDocument();
  document.field(LAST_SESSION_FIELD,sessionId);
  document.save();
  return document;
}",0.8534031413612565
117362,"@Override protected void doStart() throws Exception {
  LOG.info(Thread.currentThread().getName());
  if (taskSession == null) {
    taskSession=new OCamelTaskSession();
    taskSession.setCallback(callback);
    taskSession.setDeleteOnFinish(false);
    taskSession.setConfig(configId);
    taskSession.setFinalProgress(context.getRoutes().size());
    taskSession.start();
  }
  super.doStart();
}","@Override protected void doStart() throws Exception {
  LOG.info(Thread.currentThread().getName());
  taskSession=new OCamelTaskSession();
  taskSession.setCallback(callback);
  taskSession.setDeleteOnFinish(false);
  taskSession.setConfig(configId);
  taskSession.setFinalProgress(context.getRoutes().size());
  taskSession.start();
  super.doStart();
}",0.8871181938911022
117363,"@Override public boolean isDeleteOnFinish(){
  return getField(Field.DELETE_ON_FINISH);
}","@Override public boolean isDeleteOnFinish(){
  return getField(Field.DELETE_ON_FINISH,false);
}",0.967391304347826
117364,"@Override public OTaskSessionRuntime finish(){
  getOTaskSessionPersisted().getDocument().field(Field.FINISH_TIMESTAMP.fieldName(),new Date());
  setStatus(Status.FINISHED);
  return this;
}","@Override public OTaskSessionRuntime finish(){
  if (isDeleteOnFinish()) {
    delSelf();
  }
 else {
    getOTaskSessionPersisted().getDocument().field(Field.FINISH_TIMESTAMP.fieldName(),new Date());
    setStatus(Status.FINISHED);
  }
  return this;
}",0.8577878103837472
117365,"@Override public OTaskSessionRuntime startNewSession(){
  final OConsoleTaskSession otaskSession=new OConsoleTaskSession();
  final String input=(String)getField(Field.INPUT);
  otaskSession.setInput(input);
  otaskSession.setDeleteOnFinish((boolean)getField(OTask.Field.AUTODELETE_SESSIONS));
  try {
    Thread innerThread=new Thread(new Runnable(){
      @Override public void run(){
        otaskSession.start();
        String charset=Charset.defaultCharset().displayName();
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          if (Charset.isSupported(""String_Node_Str"")) {
            charset=""String_Node_Str"";
          }
        }
        try {
          final Process innerProcess=Runtime.getRuntime().exec(input);
          otaskSession.setCallback(new ITaskSessionCallback(){
            @Override public void interrupt() throws Exception {
              try {
                innerProcess.exitValue();
              }
 catch (              IllegalThreadStateException e) {
                innerProcess.destroy();
              }
            }
          }
);
          BufferedReader reader=new BufferedReader(new InputStreamReader(innerProcess.getInputStream(),charset));
          String curOutString=""String_Node_Str"";
          while ((curOutString=reader.readLine()) != null) {
            otaskSession.incrementCurrentProgress();
            otaskSession.appendOut(curOutString);
          }
        }
 catch (        IOException e) {
          otaskSession.appendOut(e.getMessage());
        }
        otaskSession.finish();
      }
    }
);
    innerThread.start();
  }
 catch (  Exception e) {
    otaskSession.finish();
  }
  return otaskSession;
}","@Override public OTaskSessionRuntime startNewSession(){
  final OConsoleTaskSession otaskSession=new OConsoleTaskSession();
  final String input=(String)getField(Field.INPUT);
  otaskSession.setInput(input);
  otaskSession.setDeleteOnFinish((boolean)getField(OTask.Field.AUTODELETE_SESSIONS));
  otaskSession.setOTask(this);
  try {
    Thread innerThread=new Thread(new Runnable(){
      @Override public void run(){
        otaskSession.start();
        String charset=Charset.defaultCharset().displayName();
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          if (Charset.isSupported(""String_Node_Str"")) {
            charset=""String_Node_Str"";
          }
        }
        try {
          final Process innerProcess=Runtime.getRuntime().exec(input);
          otaskSession.setCallback(new ITaskSessionCallback(){
            @Override public void interrupt() throws Exception {
              try {
                innerProcess.exitValue();
              }
 catch (              IllegalThreadStateException e) {
                innerProcess.destroy();
              }
            }
          }
);
          BufferedReader reader=new BufferedReader(new InputStreamReader(innerProcess.getInputStream(),charset));
          String curOutString=""String_Node_Str"";
          while ((curOutString=reader.readLine()) != null) {
            otaskSession.incrementCurrentProgress();
            otaskSession.appendOut(curOutString);
          }
        }
 catch (        IOException e) {
          otaskSession.appendOut(e.getMessage());
        }
        otaskSession.finish();
      }
    }
);
    innerThread.start();
  }
 catch (  Exception e) {
    otaskSession.finish();
  }
  return otaskSession;
}",0.99101709649377
117366,"@Override protected AbstractLink newLink(String id){
  return new AjaxSubmitLink(id){
    /** 
 */
    private static final long serialVersionUID=1L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      AjaxFormCommand.this.onSubmit(target,form);
      trySendActionPerformed();
    }
  }
;
}","@Override protected AbstractLink newLink(String id){
  AjaxSubmitLink link=new AjaxSubmitLink(id){
    /** 
 */
    private static final long serialVersionUID=1L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      AjaxFormCommand.this.onSubmit(target,form);
      trySendActionPerformed();
    }
  }
;
  if (defaultFormProcessing != null)   link.setDefaultFormProcessing(defaultFormProcessing);
  return link;
}",0.8275862068965517
117367,"public EmbeddedMapEditPanel(String id,final IModel<ODocument> documentModel,final IModel<OProperty> propertyModel){
  super(id,new DynamicPropertyValueModel<Map<String,V>>(documentModel,propertyModel));
  setOutputMarkupId(true);
  final DefaultVisualizer visualizer=DefaultVisualizer.INSTANCE;
  final OType linkedType=propertyModel.getObject().getLinkedType();
  final OType oType=linkedType != null ? linkedType : OType.ANY;
  listView=new ListView<Pair<V>>(""String_Node_Str"",new PropertyModel<List<Pair<V>>>(this,""String_Node_Str"")){
    @Override protected void populateItem(    final ListItem<Pair<V>> item){
      item.add(getKeyEditComponent(item));
      item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,new PropertyModel<V>(item.getModel(),""String_Node_Str"")));
      item.add(new AjaxFormCommand<Object>(""String_Node_Str"",""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          getData().remove(item.getIndex());
          target.add(EmbeddedMapEditPanel.this);
          listView.removeAll();
        }
      }
.setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
    }
    @Override protected ListItem<Pair<V>> newItem(    int index,    IModel<Pair<V>> itemModel){
      return new ListItem<Pair<V>>(index,itemModel){
        @Override public IMarkupFragment getMarkup(        Component child){
          if (child == null || !child.getId().equals(""String_Node_Str""))           return super.getMarkup(child);
          IMarkupFragment ret=markupProvider.provideMarkup(child);
          return ret != null ? ret : super.getMarkup(child);
        }
      }
;
    }
  }
;
  listView.setReuseItems(true);
  add(listView);
  add(new AjaxFormCommand(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().add(new Pair<V>());
      target.add(EmbeddedMapEditPanel.this);
      listView.removeAll();
    }
  }
.setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.PRIMARY).setIcon((String)null));
}","public EmbeddedMapEditPanel(String id,final IModel<ODocument> documentModel,final IModel<OProperty> propertyModel){
  super(id,new DynamicPropertyValueModel<Map<String,V>>(documentModel,propertyModel));
  setOutputMarkupId(true);
  final DefaultVisualizer visualizer=DefaultVisualizer.INSTANCE;
  final OType linkedType=propertyModel.getObject().getLinkedType();
  final OType oType=linkedType != null ? linkedType : OType.ANY;
  listView=new ListView<Pair<V>>(""String_Node_Str"",new PropertyModel<List<Pair<V>>>(this,""String_Node_Str"")){
    @Override protected void populateItem(    final ListItem<Pair<V>> item){
      item.add(getKeyEditComponent(item));
      item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,new PropertyModel<V>(item.getModel(),""String_Node_Str"")));
      item.add(new AjaxFormCommand<Object>(""String_Node_Str"",""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          getData().remove(item.getIndex());
          target.add(EmbeddedMapEditPanel.this);
          listView.removeAll();
        }
      }
.setDefaultFormProcessing(false).setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
    }
    @Override protected ListItem<Pair<V>> newItem(    int index,    IModel<Pair<V>> itemModel){
      return new ListItem<Pair<V>>(index,itemModel){
        @Override public IMarkupFragment getMarkup(        Component child){
          if (child == null || !child.getId().equals(""String_Node_Str""))           return super.getMarkup(child);
          IMarkupFragment ret=markupProvider.provideMarkup(child);
          return ret != null ? ret : super.getMarkup(child);
        }
      }
;
    }
  }
;
  listView.setReuseItems(true);
  add(listView);
  add(new AjaxFormCommand(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().add(new Pair<V>());
      target.add(EmbeddedMapEditPanel.this);
      listView.removeAll();
    }
  }
.setDefaultFormProcessing(false).setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.PRIMARY).setIcon((String)null));
}",0.9855920756416028
117368,"@Override protected void populateItem(final ListItem<Pair<V>> item){
  item.add(getKeyEditComponent(item));
  item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,new PropertyModel<V>(item.getModel(),""String_Node_Str"")));
  item.add(new AjaxFormCommand<Object>(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().remove(item.getIndex());
      target.add(EmbeddedMapEditPanel.this);
      listView.removeAll();
    }
  }
.setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
}","@Override protected void populateItem(final ListItem<Pair<V>> item){
  item.add(getKeyEditComponent(item));
  item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,new PropertyModel<V>(item.getModel(),""String_Node_Str"")));
  item.add(new AjaxFormCommand<Object>(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().remove(item.getIndex());
      target.add(EmbeddedMapEditPanel.this);
      listView.removeAll();
    }
  }
.setDefaultFormProcessing(false).setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
}",0.97667638483965
117369,"@Override public void configure(IOLoggerConfiguration configuration){
  super.configure(configuration);
  if (!Strings.isEmpty(collectorUrl)) {
    Url url=Url.parse(collectorUrl);
    if (Strings.isEmpty(url.getPath())) {
      collectorUrl=(collectorUrl.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
  }
}","@Override public void configure(IOLoggerConfiguration configuration){
  super.configure(configuration);
  if (!Strings.isEmpty(collectorUrl)) {
    Url url=Url.parse(collectorUrl);
    if (Strings.isEmpty(url.getPath())) {
      collectorUrl=collectorUrl + (collectorUrl.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
  }
}",0.9794238683127572
117370,"public AbstractLinkViewPanel(String id){
  super(id);
  add(link=newLink(""String_Node_Str""));
}","public AbstractLinkViewPanel(String id){
  super(id);
}",0.7333333333333333
117371,"public OClassViewPanel(String id,IModel<OClass> model,boolean localizeClassName){
  super(id,model);
  ((OClassPageLink)link).setClassNameAsBody(localizeClassName);
}","public OClassViewPanel(String id,IModel<OClass> model,boolean localizeClassName){
  super(id,model);
  this.localizeClassName=localizeClassName;
}",0.8012820512820513
117372,"@Override protected <V>AbstractMetaPanel<ODocument,OProperty,V> newMetaPanel(String componentId,IModel<OProperty> criteryModel,IModel<ODocument> rowModel){
  return new ODocumentMetaPanel<V>(componentId,getModeModel(),rowModel,criteryModel){
    @Override protected Component resolveComponent(    String id,    DisplayMode mode,    OProperty property){
      if (property == null) {
        return new LinkViewPanel(id,getEntityModel(),getValueModel());
      }
      return DisplayMode.VIEW.equals(mode) ? new LinkViewPanel(id,getEntityModel(),getValueModel()) : super.resolveComponent(id,mode,property);
    }
  }
;
}","@Override protected <V>AbstractMetaPanel<ODocument,OProperty,V> newMetaPanel(String componentId,IModel<OProperty> criteryModel,IModel<ODocument> rowModel){
  return new ODocumentMetaPanel<V>(componentId,getModeModel(),rowModel,criteryModel){
    @Override protected Component resolveComponent(    String id,    DisplayMode mode,    OProperty property){
      return DisplayMode.VIEW.equals(mode) || property == null ? new LinkViewPanel(id,getEntityModel(),getValueModel()) : super.resolveComponent(id,mode,property);
    }
  }
;
}",0.8877284595300261
117373,"@Override protected Component resolveComponent(String id,DisplayMode mode,OProperty property){
  if (property == null) {
    return new LinkViewPanel(id,getEntityModel(),getValueModel());
  }
  return DisplayMode.VIEW.equals(mode) ? new LinkViewPanel(id,getEntityModel(),getValueModel()) : super.resolveComponent(id,mode,property);
}","@Override protected Component resolveComponent(String id,DisplayMode mode,OProperty property){
  return DisplayMode.VIEW.equals(mode) || property == null ? new LinkViewPanel(id,getEntityModel(),getValueModel()) : super.resolveComponent(id,mode,property);
}",0.801358234295416
117374,"@Override protected <V>AbstractMetaPanel<ODocument,OProperty,V> newMetaPanel(String componentId,IModel<OProperty> criteryModel,IModel<ODocument> rowModel){
  return new ODocumentMetaPanel<V>(componentId,getModeModel(),rowModel,criteryModel){
    @Override protected Component resolveComponent(    String id,    DisplayMode mode,    OProperty property){
      return DisplayMode.VIEW.equals(mode) || property == null ? new LinkViewPanel(id,getEntityModel(),getValueModel()) : super.resolveComponent(id,mode,property);
    }
  }
;
}","@Override protected <V>AbstractMetaPanel<ODocument,OProperty,V> newMetaPanel(String componentId,IModel<OProperty> criteryModel,IModel<ODocument> rowModel){
  return new ODocumentMetaPanel<V>(componentId,getModeModel(),rowModel,criteryModel){
    @Override protected Component resolveComponent(    String id,    DisplayMode mode,    OProperty property){
      if (DisplayMode.VIEW.equals(mode) || property == null)       return new LinkViewPanel(id,getEntityModel(),new ODocumentNameModel(getEntityModel(),getCriteryModel()));
 else       return super.resolveComponent(id,mode,property);
    }
  }
;
}",0.8955752212389381
117375,"@Override protected Component resolveComponent(String id,DisplayMode mode,OProperty property){
  return DisplayMode.VIEW.equals(mode) || property == null ? new LinkViewPanel(id,getEntityModel(),getValueModel()) : super.resolveComponent(id,mode,property);
}","@Override protected Component resolveComponent(String id,DisplayMode mode,OProperty property){
  if (DisplayMode.VIEW.equals(mode) || property == null)   return new LinkViewPanel(id,getEntityModel(),new ODocumentNameModel(getEntityModel(),getCriteryModel()));
 else   return super.resolveComponent(id,mode,property);
}",0.8083623693379791
117376,"@Override protected String load(){
  OIdentifiable id=documentModel != null ? documentModel.getObject() : null;
  ORecord doc=id != null ? id.getRecord() : null;
  return doc != null && doc instanceof ODocument ? OrienteerWebApplication.get().getOClassIntrospector().getDocumentName((ODocument)doc) : null;
}","@Override protected String load(){
  OIdentifiable id=documentModel != null ? documentModel.getObject() : null;
  ORecord doc=id != null ? id.getRecord() : null;
  return doc != null && doc instanceof ODocument ? OrienteerWebApplication.get().getOClassIntrospector().getDocumentName((ODocument)doc,namePropertyModel != null ? namePropertyModel.getObject() : null) : null;
}",0.9045521292217328
117377,"public ODocumentNameModel(IModel<? extends OIdentifiable> documentModel){
  this.documentModel=documentModel;
}","public ODocumentNameModel(IModel<? extends OIdentifiable> documentModel,IModel<OProperty> namePropertyModel){
  this.documentModel=documentModel;
  this.namePropertyModel=namePropertyModel;
}",0.7350993377483444
117378,"@Override public void onDetach(){
  if (documentModel != null)   documentModel.detach();
}","@Override public void onDetach(){
  if (documentModel != null)   documentModel.detach();
  if (namePropertyModel != null)   namePropertyModel.detach();
}",0.7407407407407407
117379,public String getDocumentName(ODocument doc);,"public String getDocumentName(ODocument doc,OProperty nameProperty);",0.7964601769911505
117380,"@Override public String getDocumentName(ODocument doc){
  if (doc == null)   return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
 else {
    OProperty nameProp=getNameProperty(doc.getSchemaClass());
    if (nameProp != null) {
      Object value=doc.field(nameProp.getName());
      if (value == null)       return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
      OType type=nameProp.getType();
      Locale locale=OrienteerWebSession.get().getLocale();
switch (type) {
case DATE:
        return OrienteerWebApplication.DATE_CONVERTER.convertToString((Date)value,locale);
case DATETIME:
      return OrienteerWebApplication.DATE_TIME_CONVERTER.convertToString((Date)value,locale);
case LINK:
    return getDocumentName((ODocument)value);
case EMBEDDEDMAP:
  Map<String,Object> localizations=(Map<String,Object>)value;
Object localized=CommonUtils.localizeByMap(localizations,true,locale.getLanguage(),Locale.getDefault().getLanguage());
if (localized != null) return localized.toString();
default :
return value.toString();
}
}
 else {
return doc.toString();
}
}
}","@Override public String getDocumentName(ODocument doc,OProperty nameProp){
  if (doc == null)   return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
 else {
    if (nameProp == null)     nameProp=getNameProperty(doc.getSchemaClass());
    if (nameProp != null) {
      Object value=doc.field(nameProp.getName());
      if (value == null)       return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
      OType type=nameProp.getType();
      Locale locale=OrienteerWebSession.get().getLocale();
switch (type) {
case DATE:
        return OrienteerWebApplication.DATE_CONVERTER.convertToString((Date)value,locale);
case DATETIME:
      return OrienteerWebApplication.DATE_TIME_CONVERTER.convertToString((Date)value,locale);
case LINK:
    return getDocumentName((ODocument)value);
case EMBEDDEDMAP:
  Map<String,Object> localizations=(Map<String,Object>)value;
Object localized=CommonUtils.localizeByMap(localizations,true,locale.getLanguage(),Locale.getDefault().getLanguage());
if (localized != null) return localized.toString();
default :
return value.toString();
}
}
 else {
return doc.toString();
}
}
}",0.9808265871325096
117381,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(JobDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",ProcessDefinitionEntityHandler.OCLASS_NAME);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricDetailEventEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricJobLogEventEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",UserOperationLogEntryEventEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(JobDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",ProcessDefinitionEntityHandler.OCLASS_NAME);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricIncidentEventEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricJobLogEventEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",UserOperationLogEntryEventEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.98841059602649
117382,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",TaskEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricEventHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricVariableInstanceEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",TaskEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricEventHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricVariableInstanceEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricProcessInstanceEventEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.8567774936061381
117383,"@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).markDisplayable().markAsDocumentName().notNull(true).oProperty(""String_Node_Str"",OType.STRING,30).notNull(true).markDisplayable().oProperty(""String_Node_Str"",OType.STRING,35).oProperty(""String_Node_Str"",OType.STRING,40).markDisplayable().oProperty(""String_Node_Str"",OType.LINK,60).assignVisualization(""String_Node_Str"").markDisplayable().markAsLinkToParent().oProperty(""String_Node_Str"",OType.LINKLIST,70).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.INTEGER,80).defaultValue(""String_Node_Str"").notNull().oProperty(""String_Node_Str"",OType.LINKLIST,90).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.LINKLIST,100).assignTab(""String_Node_Str"").assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.LINKLIST,110).assignVisualization(""String_Node_Str"");
}","@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).markDisplayable().markAsDocumentName().notNull(true).oProperty(""String_Node_Str"",OType.STRING,30).notNull(true).markDisplayable().oProperty(""String_Node_Str"",OType.STRING,35).oProperty(""String_Node_Str"",OType.STRING,40).markDisplayable().oProperty(""String_Node_Str"",OType.LINK,60).assignVisualization(""String_Node_Str"").markDisplayable().markAsLinkToParent().oProperty(""String_Node_Str"",OType.LINKLIST,70).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.INTEGER,80).defaultValue(""String_Node_Str"").notNull().oProperty(""String_Node_Str"",OType.LINKLIST,90).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.LINKLIST,100).assignTab(""String_Node_Str"").assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.LINKLIST,110).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.LINKLIST,120).assignVisualization(""String_Node_Str"");
}",0.9568238213399504
117384,"@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oClass(OCLASS_NAME,HistoricEventHandler.OCLASS_NAME).oProperty(""String_Node_Str"",OType.DATETIME,10).oProperty(""String_Node_Str"",OType.STRING,20).oProperty(""String_Node_Str"",OType.DATETIME,30).oProperty(""String_Node_Str"",OType.INTEGER,40).oProperty(""String_Node_Str"",OType.LONG,50).oProperty(""String_Node_Str"",OType.STRING,60).oProperty(""String_Node_Str"",OType.STRING,70).oProperty(""String_Node_Str"",OType.INTEGER,80).oProperty(""String_Node_Str"",OType.STRING,90).oProperty(""String_Node_Str"",OType.STRING,100).oProperty(""String_Node_Str"",OType.STRING,110).oProperty(""String_Node_Str"",OType.STRING,120).oProperty(""String_Node_Str"",OType.STRING,170).oProperty(""String_Node_Str"",OType.STRING,180);
}","@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oClass(OCLASS_NAME,HistoricEventHandler.OCLASS_NAME).oProperty(""String_Node_Str"",OType.DATETIME,10).oProperty(""String_Node_Str"",OType.STRING,20).oProperty(""String_Node_Str"",OType.DATETIME,30).oProperty(""String_Node_Str"",OType.INTEGER,40).oProperty(""String_Node_Str"",OType.LONG,50).oProperty(""String_Node_Str"",OType.STRING,60).oProperty(""String_Node_Str"",OType.STRING,70).oProperty(""String_Node_Str"",OType.INTEGER,80).oProperty(""String_Node_Str"",OType.LINK,90).oProperty(""String_Node_Str"",OType.STRING,100).oProperty(""String_Node_Str"",OType.STRING,110).oProperty(""String_Node_Str"",OType.STRING,120).oProperty(""String_Node_Str"",OType.STRING,170).oProperty(""String_Node_Str"",OType.STRING,180);
}",0.9936548223350252
117385,"public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(HistoricProcessInstanceEventEntityHandler.OCLASS_NAME,""String_Node_Str"",ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",TaskEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",TaskEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.9380530973451328
117386,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricVariableInstanceEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME);
}",0.7552986512524085
117387,"@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).oProperty(""String_Node_Str"",OType.BINARY,20).oProperty(""String_Node_Str"",OType.LINK,30).oProperty(""String_Node_Str"",OType.LINKLIST,40).assignVisualization(""String_Node_Str"");
}","@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).oProperty(""String_Node_Str"",OType.BINARY,20).oProperty(""String_Node_Str"",OType.LINK,30);
}",0.8424908424908425
117388,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",CaseDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",CaseExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",TaskEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ByteArrayEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",CaseDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",CaseExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",TaskEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ByteArrayEntityHandler.OCLASS_NAME);
}",0.9896551724137932
117389,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(ByteArrayEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME);
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",HistoricVariableInstanceEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.7232472324723247
117390,"@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).oProperty(""String_Node_Str"",OType.BINARY,20).oProperty(""String_Node_Str"",OType.LINK,30);
}","@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).oProperty(""String_Node_Str"",OType.BINARY,20).oProperty(""String_Node_Str"",OType.LINK,30).oProperty(""String_Node_Str"",OType.LINKLIST,40).assignVisualization(""String_Node_Str"");
}",0.8424908424908425
117391,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",CaseDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",CaseExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",TaskEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ExecutionEntityHandler.OCLASS_NAME);
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",CaseDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",CaseExecutionEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",TaskEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(OCLASS_NAME,""String_Node_Str"",ByteArrayEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.9319562575941676
117392,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(ByteArrayEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.linkedClass(ByteArrayEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.9401709401709402
117393,"@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).oProperty(""String_Node_Str"",OType.BINARY,20).oProperty(""String_Node_Str"",OType.STRING,30);
}","@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).oProperty(""String_Node_Str"",OType.BINARY,20).oProperty(""String_Node_Str"",OType.LINK,30);
}",0.987012987012987
117394,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(CaseDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.linkedClass(CaseDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.9414225941422594
117395,"@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).oProperty(""String_Node_Str"",OType.STRING,0).oProperty(""String_Node_Str"",OType.STRING,20).oProperty(""String_Node_Str"",OType.INTEGER,30).oProperty(""String_Node_Str"",OType.STRING,40).oProperty(""String_Node_Str"",OType.STRING,50).oProperty(""String_Node_Str"",OType.STRING,60);
}","@Override public void applySchema(OSchemaHelper helper){
  super.applySchema(helper);
  helper.oProperty(""String_Node_Str"",OType.STRING,10).oProperty(""String_Node_Str"",OType.STRING,0).oProperty(""String_Node_Str"",OType.STRING,20).oProperty(""String_Node_Str"",OType.INTEGER,30).oProperty(""String_Node_Str"",OType.LINK,40).oProperty(""String_Node_Str"",OType.STRING,50).oProperty(""String_Node_Str"",OType.STRING,60);
}",0.9878345498783456
117396,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(ResourceEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(ByteArrayEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(ProcessDefinitionEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
  helper.setupRelationship(ResourceEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.8482142857142857
117397,"@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.setupRelationship(JobEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
}","@Override public void applyRelationships(OSchemaHelper helper){
  super.applyRelationships(helper);
  helper.linkedClass(JobEntityHandler.OCLASS_NAME,""String_Node_Str"",DeploymentEntityHandler.OCLASS_NAME,""String_Node_Str"");
}",0.9385964912280702
117398,"@Override public void onClick(AjaxRequestTarget target){
  table.visitChildren(OrienteerDataTable.MetaContextItem.class,new IVisitor<OrienteerDataTable.MetaContextItem<ODocument,?>,Void>(){
    @Override public void component(    MetaContextItem<ODocument,?> rowItem,    IVisit<Void> visit){
      rowItem.getModelObject().save();
      visit.dontGoDeeper();
    }
  }
);
  super.onClick(target);
}","@Override public void onClick(AjaxRequestTarget target){
  table.visitChildren(OrienteerDataTable.MetaContextItem.class,new IVisitor<OrienteerDataTable.MetaContextItem<ODocument,?>,Void>(){
    @Override public void component(    MetaContextItem<ODocument,?> rowItem,    IVisit<Void> visit){
      ODocument doc=rowItem.getModelObject();
      if (doc.isDirty())       doc.save();
      visit.dontGoDeeper();
    }
  }
);
  super.onClick(target);
}",0.9243498817966904
117399,"@Override public void component(MetaContextItem<ODocument,?> rowItem,IVisit<Void> visit){
  rowItem.getModelObject().save();
  visit.dontGoDeeper();
}","@Override public void component(MetaContextItem<ODocument,?> rowItem,IVisit<Void> visit){
  ODocument doc=rowItem.getModelObject();
  if (doc.isDirty())   doc.save();
  visit.dontGoDeeper();
}",0.8771929824561403
117400,"@Override public void onRecordAfterUpdate(ODocument iDocument){
  OrienteerWebApplication app=OrienteerWebApplication.lookupApplication();
  if (app != null) {
    String moduleName=iDocument.field(IOrienteerModule.OMODULE_NAME);
    IOrienteerModule module=app.getModuleByName(moduleName);
    if (module != null) {
      ODatabaseDocument db=iDocument.getDatabase();
      if (!Objects.isEqual(iDocument.getOriginalValue(IOrienteerModule.OMODULE_ACTIVATE),iDocument.field(IOrienteerModule.OMODULE_ACTIVATE))) {
        Object activated=iDocument.field(IOrienteerModule.OMODULE_ACTIVATE);
        if (activated == null || Boolean.TRUE.equals(activated))         module.onInitialize(app,db,iDocument);
 else         module.onDestroy(app,db,iDocument);
      }
      module.onConfigurationChange(app,db,iDocument);
    }
  }
}","@Override public void onRecordAfterUpdate(ODocument iDocument){
  OrienteerWebApplication app=OrienteerWebApplication.lookupApplication();
  if (app != null) {
    String moduleName=iDocument.field(IOrienteerModule.OMODULE_NAME);
    IOrienteerModule module=app.getModuleByName(moduleName);
    if (module != null) {
      ODatabaseDocument db=iDocument.getDatabase();
      Object previousActivate=iDocument.getOriginalValue(IOrienteerModule.OMODULE_ACTIVATE);
      if (previousActivate != null && !previousActivate.equals(iDocument.field(IOrienteerModule.OMODULE_ACTIVATE))) {
        Object activated=iDocument.field(IOrienteerModule.OMODULE_ACTIVATE);
        if (activated == null || Boolean.TRUE.equals(activated))         module.onInitialize(app,db,iDocument);
 else         module.onDestroy(app,db,iDocument);
      }
      module.onConfigurationChange(app,db,iDocument);
    }
  }
}",0.943506115317414
117401,"@Override public void onClick(AjaxRequestTarget target){
  OClass oClass=classModel.getObject();
  Collection<OClass> subClasses=oClass.getSubclasses();
  if (subClasses == null || subClasses.isEmpty()) {
    redirectToCreateODocumentPage(null,oClass);
  }
 else {
    target.appendJavaScript(""String_Node_Str"");
    modal.show(target);
  }
}","@Override public void onClick(AjaxRequestTarget target){
  OClass oClass=classModel.getObject();
  Collection<OClass> subClasses=oClass.getSubclasses();
  if (subClasses == null || subClasses.isEmpty()) {
    redirectToCreateODocumentPage(null,oClass);
  }
 else {
    modal.show(target);
  }
}",0.9245283018867924
117402,"public SelectSubOClassDialogPage(ModalWindow modal,IModel<OClass> model){
  super(modal.getContentId(),model);
  this.modal=modal;
  Form<Object> form=new Form<Object>(""String_Node_Str"");
  IModel<DisplayMode> displayModeModel=DisplayMode.VIEW.asModel();
  List<IColumn<OClass,String>> columns=new ArrayList<IColumn<OClass,String>>();
  columns.add(new OClassColumn(OClassPrototyper.NAME,displayModeModel));
  columns.add(new OClassMetaColumn(OClassPrototyper.SUPER_CLASSES,displayModeModel));
  columns.add(new AbstractColumn<OClass,String>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=1L;
    @Override public void populateItem(    Item<ICellPopulator<OClass>> cellItem,    String componentId,    final IModel<OClass> rowModel){
      cellItem.add(new AjaxCommand<OClass>(componentId,new ResourceModel(""String_Node_Str""),rowModel){
        @Override public void onClick(        AjaxRequestTarget target){
          SelectSubOClassDialogPage.this.modal.close(target);
          onSelect(target,getModelObject());
        }
      }
.setIcon(FAIconType.plus).setBootstrapType(BootstrapType.INFO));
    }
  }
);
  SortableDataProvider<OClass,String> provider=new OClassesDataProvider(new PropertyModel<Collection<OClass>>(this,""String_Node_Str""));
  OrienteerDataTable<OClass,String> table=new OrienteerDataTable<OClass,String>(""String_Node_Str"",columns,provider,20);
  form.add(table);
  add(form);
}","public SelectSubOClassDialogPage(ModalWindow modal,IModel<OClass> model){
  super(modal.getContentId(),model);
  this.modal=modal;
  Form<Object> form=new Form<Object>(""String_Node_Str"");
  IModel<DisplayMode> displayModeModel=DisplayMode.VIEW.asModel();
  List<IColumn<OClass,String>> columns=new ArrayList<IColumn<OClass,String>>();
  columns.add(new OClassColumn(OClassPrototyper.NAME,displayModeModel));
  columns.add(new OClassMetaColumn(OClassPrototyper.SUPER_CLASSES,displayModeModel));
  columns.add(new AbstractColumn<OClass,String>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=1L;
    @Override public void populateItem(    Item<ICellPopulator<OClass>> cellItem,    String componentId,    final IModel<OClass> rowModel){
      cellItem.add(new AjaxCommand<OClass>(componentId,new ResourceModel(""String_Node_Str""),rowModel){
        @Override public void onClick(        AjaxRequestTarget target){
          SelectSubOClassDialogPage.this.modal.close(target);
          SelectSubOClassDialogPage.this.modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
            @Override public void onClose(            AjaxRequestTarget target){
              onSelect(target,getModelObject());
            }
          }
);
        }
      }
.setIcon(FAIconType.plus).setBootstrapType(BootstrapType.INFO));
    }
  }
);
  SortableDataProvider<OClass,String> provider=new OClassesDataProvider(new PropertyModel<Collection<OClass>>(this,""String_Node_Str""));
  OrienteerDataTable<OClass,String> table=new OrienteerDataTable<OClass,String>(""String_Node_Str"",columns,provider,20);
  form.add(table);
  add(form);
}",0.9075684380032206
117403,"@Override public void onClick(AjaxRequestTarget target){
  SelectSubOClassDialogPage.this.modal.close(target);
  onSelect(target,getModelObject());
}","@Override public void onClick(AjaxRequestTarget target){
  SelectSubOClassDialogPage.this.modal.close(target);
  SelectSubOClassDialogPage.this.modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    AjaxRequestTarget target){
      onSelect(target,getModelObject());
    }
  }
);
}",0.6169772256728778
117404,"@Override public void populateItem(Item<ICellPopulator<OClass>> cellItem,String componentId,final IModel<OClass> rowModel){
  cellItem.add(new AjaxCommand<OClass>(componentId,new ResourceModel(""String_Node_Str""),rowModel){
    @Override public void onClick(    AjaxRequestTarget target){
      SelectSubOClassDialogPage.this.modal.close(target);
      onSelect(target,getModelObject());
    }
  }
.setIcon(FAIconType.plus).setBootstrapType(BootstrapType.INFO));
}","@Override public void populateItem(Item<ICellPopulator<OClass>> cellItem,String componentId,final IModel<OClass> rowModel){
  cellItem.add(new AjaxCommand<OClass>(componentId,new ResourceModel(""String_Node_Str""),rowModel){
    @Override public void onClick(    AjaxRequestTarget target){
      SelectSubOClassDialogPage.this.modal.close(target);
      SelectSubOClassDialogPage.this.modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
        @Override public void onClose(        AjaxRequestTarget target){
          onSelect(target,getModelObject());
        }
      }
);
    }
  }
.setIcon(FAIconType.plus).setBootstrapType(BootstrapType.INFO));
}",0.8187444739168878
117405,"public OClassConfigurationWidget(String id,IModel<OClass> model,IModel<ODocument> widgetDocumentModel){
  super(id,model,widgetDocumentModel);
  Form<OClass> form=new TransactionlessForm<OClass>(""String_Node_Str"");
  structureTable=new OrienteerStructureTable<OClass,String>(""String_Node_Str"",getModel(),OClassMetaPanel.OCLASS_ATTRS){
    @Override protected Component getValueComponent(    String id,    final IModel<String> rowModel){
      return new OClassMetaPanel<Object>(id,getModeModel(),OClassConfigurationWidget.this.getModel(),rowModel);
    }
  }
;
  structureTable.addCommand(new EditSchemaCommand<OClass>(structureTable,getModeModel()));
  structureTable.addCommand(new SaveSchemaCommand<OClass>(structureTable,getModeModel(),getModel()));
  form.add(structureTable);
  add(form);
  addCommand(new BookmarkablePageLinkCommand<OClass>(newCommandId(),""String_Node_Str"",BrowseOClassPage.class){
    @Override public PageParameters getPageParameters(){
      return BrowseOClassPage.preparePageParameters(OClassConfigurationWidget.this.getModelObject(),DisplayMode.VIEW);
    }
  }
);
}","public OClassConfigurationWidget(String id,IModel<OClass> model,IModel<ODocument> widgetDocumentModel){
  super(id,model,widgetDocumentModel);
  Form<OClass> form=new TransactionlessForm<OClass>(""String_Node_Str"");
  structureTable=new OrienteerStructureTable<OClass,String>(""String_Node_Str"",getModel(),OClassMetaPanel.OCLASS_ATTRS){
    @Override protected Component getValueComponent(    String id,    final IModel<String> rowModel){
      return new OClassMetaPanel<Object>(id,getModeModel(),OClassConfigurationWidget.this.getModel(),rowModel);
    }
  }
;
  structureTable.addCommand(new EditSchemaCommand<OClass>(structureTable,getModeModel()));
  structureTable.addCommand(new SaveSchemaCommand<OClass>(structureTable,getModeModel(),getModel()));
  form.add(structureTable);
  add(form);
  addCommand(new BookmarkablePageLinkCommand<OClass>(newCommandId(),""String_Node_Str"",BrowseOClassPage.class){
    @Override public PageParameters getPageParameters(){
      return BrowseOClassPage.preparePageParameters(OClassConfigurationWidget.this.getModelObject(),DisplayMode.VIEW);
    }
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(OSchemaUtils.isNotNullOrPrototype(OClassConfigurationWidget.this.getModelObject()));
    }
  }
);
}",0.9245044285111768
117406,"protected void installWidgetsSchemaV2(ODatabaseDocument db){
  OSchemaHelper helper=OSchemaHelper.bind(db);
  helper.oClass(AbstractHtmlJsPaneWidget.WIDGET_OCLASS_NAME,OCLASS_WIDGET).oProperty(""String_Node_Str"",OType.STRING,0).oProperty(""String_Node_Str"",OType.STRING,10).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.STRING,20).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.EMBEDDEDLIST,30).linkedType(OType.STRING);
  helper.oClass(ExternalPageWidget.WIDGET_OCLASS_NAME,OCLASS_WIDGET).oProperty(""String_Node_Str"",OType.STRING,0).oProperty(""String_Node_Str"",OType.STRING,10);
  helper.oClass(CalculatedDocumentsWidget.WIDGET_OCLASS_NAME,OCLASS_WIDGET).oProperty(""String_Node_Str"",OType.STRING,0).assignVisualization(""String_Node_Str"");
}","protected void installWidgetsSchemaV2(ODatabaseDocument db){
  OSchemaHelper helper=OSchemaHelper.bind(db);
  helper.oClass(AbstractHtmlJsPaneWidget.WIDGET_OCLASS_NAME,OCLASS_WIDGET).oProperty(""String_Node_Str"",OType.STRING,10).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.STRING,20).assignVisualization(""String_Node_Str"").oProperty(""String_Node_Str"",OType.EMBEDDEDLIST,30).linkedType(OType.STRING);
  if (!helper.getOClass().existsProperty(""String_Node_Str""))   helper.oProperty(""String_Node_Str"",OType.STRING,0);
  helper.oClass(ExternalPageWidget.WIDGET_OCLASS_NAME,OCLASS_WIDGET).oProperty(""String_Node_Str"",OType.STRING,0).oProperty(""String_Node_Str"",OType.STRING,10);
  helper.oClass(CalculatedDocumentsWidget.WIDGET_OCLASS_NAME,OCLASS_WIDGET).oProperty(""String_Node_Str"",OType.STRING,0).assignVisualization(""String_Node_Str"");
}",0.90392749244713
117407,"@Override public String getCacheKey(MarkupContainer container,Class<?> containerClass){
  if (container.getClass().equals(containerClass)) {
    ODocument pageDoc=pageDocumentModel.getObject();
    return ""String_Node_Str"" + pageDoc.getIdentity().toString() + ""String_Node_Str""+ pageDoc.getVersion();
  }
 else {
    return DEFAULT_MARKUP_CACHKEY_PROVIDER.getCacheKey(container,containerClass);
  }
}","@Override public String getCacheKey(MarkupContainer container,Class<?> containerClass){
  ODocument pageDoc=pageDocumentModel.getObject();
  return DEFAULT_MARKUP_CACHKEY_PROVIDER.getCacheKey(container,containerClass) + ""String_Node_Str"" + pageDoc.getIdentity().toString()+ ""String_Node_Str""+ pageDoc.getVersion();
}",0.6145251396648045
117408,"public IResourceStream getMarkupResourceStream(MarkupContainer container,Class<?> containerClass,String wrapTag){
  if (container.getClass().equals(containerClass)) {
    String content=(String)pageDocumentModel.getObject().field(PagesModule.OPROPERTY_CONTENT);
    if (!Strings.isEmpty(wrapTag))     content=""String_Node_Str"" + wrapTag + ""String_Node_Str""+ content+ ""String_Node_Str""+ wrapTag+ ""String_Node_Str"";
    return new StringResourceStream(content,""String_Node_Str"");
  }
 else {
    return DEFAULT_MARKUP_PROVIDER.getMarkupResourceStream(container,containerClass);
  }
}","public IResourceStream getMarkupResourceStream(MarkupContainer container,Class<?> containerClass,String wrapTag){
  if (container.getClass().equals(containerClass)) {
    return new OPageResourceStream(pageDocumentModel.getObject(),wrapTag);
  }
 else {
    return DEFAULT_MARKUP_PROVIDER.getMarkupResourceStream(container,containerClass);
  }
}",0.6630669546436285
117409,"public SelectDialogPanel(String id,final ModalWindow modal,OClass initialClass,boolean canChangeClass,boolean isMultiValue){
  super(id,Model.of(""String_Node_Str""));
  this.modal=modal;
  this.isMultiValue=isMultiValue;
  this.modal.setMinimalHeight(400);
  this.canChangeClass=canChangeClass || initialClass == null;
  this.selectedClassModel=new OClassModel(initialClass != null ? initialClass : getClasses().get(0));
  Form<String> form=new Form<String>(""String_Node_Str"",getModel());
  queryField=new TextField<String>(""String_Node_Str"",getModel());
  queryField.setOutputMarkupId(true);
  form.add(queryField);
  form.add(new AjaxButton(""String_Node_Str""){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      super.onSubmit(target,form);
      target.add(resultsContainer);
    }
  }
);
  form.add(new TabsPanel<OClass>(""String_Node_Str"",selectedClassModel,new PropertyModel<List<OClass>>(this,""String_Node_Str"")){
    @Override public void onTabClick(    AjaxRequestTarget target){
      prepareResults();
      target.add(resultsContainer);
    }
  }
.setVisible(canChangeClass));
  resultsContainer=new WebMarkupContainer(""String_Node_Str""){
{
      setOutputMarkupPlaceholderTag(true);
    }
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(!Strings.isEmpty(SelectDialogPanel.this.getModelObject()));
    }
  }
;
  prepareResults();
  form.add(resultsContainer);
  add(form);
}","public SelectDialogPanel(String id,final ModalWindow modal,OClass initialClass,boolean canChangeClass,boolean isMultiValue){
  super(id,Model.of(""String_Node_Str""));
  this.modal=modal;
  this.isMultiValue=isMultiValue;
  this.modal.setMinimalHeight(400);
  this.canChangeClass=canChangeClass || initialClass == null;
  this.selectedClassModel=new OClassModel(initialClass != null ? initialClass : getClasses().get(0));
  Form<String> form=new Form<String>(""String_Node_Str"",getModel());
  queryField=new TextField<String>(""String_Node_Str"",getModel(),String.class);
  queryField.setOutputMarkupId(true);
  form.add(queryField);
  form.add(new AjaxButton(""String_Node_Str""){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      super.onSubmit(target,form);
      target.add(resultsContainer);
    }
  }
);
  form.add(new TabsPanel<OClass>(""String_Node_Str"",selectedClassModel,new PropertyModel<List<OClass>>(this,""String_Node_Str"")){
    @Override public void onTabClick(    AjaxRequestTarget target){
      prepareResults();
      target.add(resultsContainer);
    }
  }
.setVisible(canChangeClass));
  resultsContainer=new WebMarkupContainer(""String_Node_Str""){
{
      setOutputMarkupPlaceholderTag(true);
    }
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(!Strings.isEmpty(SelectDialogPanel.this.getModelObject()));
    }
  }
;
  prepareResults();
  form.add(resultsContainer);
  add(form);
}",0.9955827387020048
117410,"public DeleteEdgeCommand(ResourceModel labelModel,OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentModel){
  super(labelModel,table);
  this.documentModel=documentModel;
  this.classModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
}","public DeleteEdgeCommand(OrienteerDataTable<ODocument,?> table,IModel<ODocument> documentModel){
  super(new ResourceModel(""String_Node_Str""),table);
  this.documentModel=documentModel;
  this.classModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
}",0.8582834331337326
117411,"@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  super.performMultiAction(target,objects);
  OrientGraph tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
  tx.commit();
  for (  ODocument doc : objects) {
    ORID id=doc.getIdentity();
    OrientVertex vertex=tx.getVertex(id);
    removeEdges(tx,vertex);
  }
  tx.begin();
  setResponsePage(new ODocumentPage(documentModel.getObject()).setModeObject(DisplayMode.VIEW));
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  super.performMultiAction(target,objects);
  OrientGraph tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
  tx.commit();
  for (  ODocument doc : objects) {
    ORID id=doc.getIdentity();
    OrientEdge edge=tx.getEdge(id);
    tx.removeEdge(edge);
  }
  tx.begin();
  setResponsePage(new ODocumentPage(documentModel.getObject()).setModeObject(DisplayMode.VIEW));
}",0.9022082018927444
117412,"public GraphEdgesWidget(String id,IModel<ODocument> model,IModel<ODocument> widgetDocumentModel){
  super(id,model,widgetDocumentModel);
  IModel<DisplayMode> modeModel=DisplayMode.VIEW.asModel();
  Form<ODocument> form=new Form<ODocument>(""String_Node_Str"");
  VertexEdgesDataProvider vertexEdgesDataProvider=new VertexEdgesDataProvider(getModel());
  OClass commonParent=vertexEdgesDataProvider.probeOClass(20);
  List<IColumn<ODocument,String>> columns=oClassIntrospector.getColumnsFor(commonParent,true,modeModel);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",columns,vertexEdgesDataProvider,20);
  table.addCommand(new EditODocumentsCommand(table,modeModel,commonParent));
  table.addCommand(new SaveODocumentsCommand(table,modeModel));
  table.addCommand(new DeleteEdgeCommand(new ResourceModel(""String_Node_Str""),table,getModel()));
  form.add(table);
  add(form);
}","public GraphEdgesWidget(String id,IModel<ODocument> model,IModel<ODocument> widgetDocumentModel){
  super(id,model,widgetDocumentModel);
  IModel<DisplayMode> modeModel=DisplayMode.VIEW.asModel();
  Form<ODocument> form=new Form<ODocument>(""String_Node_Str"");
  VertexEdgesDataProvider vertexEdgesDataProvider=new VertexEdgesDataProvider(getModel());
  OClass commonParent=vertexEdgesDataProvider.probeOClass(20);
  List<IColumn<ODocument,String>> columns=oClassIntrospector.getColumnsFor(commonParent,true,modeModel);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",columns,vertexEdgesDataProvider,20);
  table.addCommand(new EditODocumentsCommand(table,modeModel,commonParent));
  table.addCommand(new SaveODocumentsCommand(table,modeModel));
  table.addCommand(new DeleteEdgeCommand(table,getModel()));
  form.add(table);
  add(form);
}",0.9797482211275316
117413,"public GraphNeighborsWidget(String id,IModel<ODocument> model,IModel<ODocument> widgetDocumentModel){
  super(id,model,widgetDocumentModel);
  IModel<DisplayMode> modeModel=DisplayMode.VIEW.asModel();
  Form<ODocument> form=new Form<ODocument>(""String_Node_Str"");
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<ODocument>(""String_Node_Str"" + getModelObject().getIdentity());
  OClass commonParent=provider.probeOClass(20);
  List<IColumn<ODocument,String>> columns=oClassIntrospector.getColumnsFor(commonParent,true,modeModel);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",columns,provider,20);
  table.addCommand(new CreateVertexCommand(table,getModel()));
  table.addCommand(new CreateEdgeCommand(table,getModel()));
  table.addCommand(new DeleteEdgeCommand(table,getModel()));
  table.addCommand(new DeleteVertexCommand(table,getModel()));
  table.addCommand(new EditODocumentsCommand(table,modeModel,commonParent));
  table.addCommand(new SaveODocumentsCommand(table,modeModel));
  form.add(table);
  add(form);
}","public GraphNeighborsWidget(String id,IModel<ODocument> model,IModel<ODocument> widgetDocumentModel){
  super(id,model,widgetDocumentModel);
  IModel<DisplayMode> modeModel=DisplayMode.VIEW.asModel();
  Form<ODocument> form=new Form<ODocument>(""String_Node_Str"");
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<ODocument>(""String_Node_Str"" + getModelObject().getIdentity());
  OClass commonParent=provider.probeOClass(20);
  List<IColumn<ODocument,String>> columns=oClassIntrospector.getColumnsFor(commonParent,true,modeModel);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",columns,provider,20);
  table.addCommand(new CreateVertexCommand(table,getModel()));
  table.addCommand(new CreateEdgeCommand(table,getModel()));
  table.addCommand(new UnlinkVertexCommand(table,getModel()));
  table.addCommand(new DeleteVertexCommand(table,getModel()));
  table.addCommand(new EditODocumentsCommand(table,modeModel,commonParent));
  table.addCommand(new SaveODocumentsCommand(table,modeModel));
  form.add(table);
  add(form);
}",0.8418647166361974
117414,"@Override public void onClose(AjaxRequestTarget target){
  target.add(getPage());
}","@Override public void onClose(AjaxRequestTarget target){
  setResponsePage(new ODocumentPage(new ODocumentModel(documentModel.getObject())).setModeObject(DisplayMode.VIEW));
}",0.5891472868217055
117415,"private void createVertex(OClass vertexClass,OClass edgeClass){
  OrientGraph tx=null;
  try {
    tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
    OrientVertex newVertex=tx.addVertex(vertexClass.getName(),(String)null);
    OrientVertex vertex=tx.getVertex(documentModel.getObject().getIdentity());
    tx.addEdge(null,vertex,newVertex,edgeClass.getName());
  }
  finally {
    if (tx != null)     tx.shutdown();
  }
}","private void createVertex(OClass vertexClass,OClass edgeClass){
  OrientGraph tx=new OrientGraphFactory(getDatabase().getURL()).getTx();
  OrientVertex newVertex=tx.addVertex(vertexClass.getName(),(String)null);
  OrientVertex vertex=tx.getVertex(documentModel.getObject().getIdentity());
  tx.addEdge(null,vertex,newVertex,edgeClass.getName());
}",0.8897435897435897
117416,"@Override protected void initializeContent(final ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setAutoSize(true);
  modal.setMinimalWidth(300);
  SelectSubOClassDialogPage selectVertexClassDialog=new SelectSubOClassDialogPage(modal,new OClassModel(GraphModule.VERTEX_CLASS_NAME)){
    @Override protected void onSelect(    AjaxRequestTarget target,    final OClass selectedOVertexClass){
      modal.setTitle(new ResourceModel(""String_Node_Str""));
      OClassModel edgeOClassModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
      modal.setContent(new SelectSubOClassDialogPage(modal,edgeOClassModel){
        @Override protected void onSelect(        AjaxRequestTarget target,        final OClass selectedOEdgeClass){
          createVertex(selectedOVertexClass,selectedOEdgeClass);
          modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
            private static final long serialVersionUID=1L;
            @Override public void onClose(            AjaxRequestTarget target){
              target.add(getPage());
            }
          }
);
        }
      }
);
      modal.show(target);
    }
  }
;
  modal.setContent(selectVertexClassDialog);
}","@Override protected void initializeContent(final ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setAutoSize(true);
  modal.setMinimalWidth(300);
  SelectSubOClassDialogPage selectVertexClassDialog=new SelectSubOClassDialogPage(modal,new OClassModel(GraphModule.VERTEX_CLASS_NAME)){
    @Override protected void onSelect(    AjaxRequestTarget target,    final OClass selectedOVertexClass){
      modal.setTitle(new ResourceModel(""String_Node_Str""));
      OClassModel edgeOClassModel=new OClassModel(GraphModule.EDGE_CLASS_NAME);
      modal.setContent(new SelectSubOClassDialogPage(modal,edgeOClassModel){
        @Override protected void onSelect(        AjaxRequestTarget target,        final OClass selectedOEdgeClass){
          createVertex(selectedOVertexClass,selectedOEdgeClass);
          modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
            private static final long serialVersionUID=1L;
            @Override public void onClose(            AjaxRequestTarget target){
              setResponsePage(new ODocumentPage(new ODocumentModel(documentModel.getObject())).setModeObject(DisplayMode.VIEW));
            }
          }
);
        }
      }
);
      modal.show(target);
    }
  }
;
  modal.setContent(selectVertexClassDialog);
}",0.9492868462757528
117417,"@Override protected void onSelect(AjaxRequestTarget target,final OClass selectedOEdgeClass){
  createVertex(selectedOVertexClass,selectedOEdgeClass);
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=1L;
    @Override public void onClose(    AjaxRequestTarget target){
      target.add(getPage());
    }
  }
);
}","@Override protected void onSelect(AjaxRequestTarget target,final OClass selectedOEdgeClass){
  createVertex(selectedOVertexClass,selectedOEdgeClass);
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=1L;
    @Override public void onClose(    AjaxRequestTarget target){
      setResponsePage(new ODocumentPage(new ODocumentModel(documentModel.getObject())).setModeObject(DisplayMode.VIEW));
    }
  }
);
}",0.8501170960187353
117418,"@Override public void onClick(AjaxRequestTarget target){
  getData().add(new Pair<V>());
  target.add(EmbeddedMapEditPanel.this);
}","@Override public void onClick(AjaxRequestTarget target){
  getData().add(new Pair<V>());
  target.add(EmbeddedMapEditPanel.this);
  listView.removeAll();
}",0.916083916083916
117419,"public EmbeddedMapEditPanel(String id,final IModel<ODocument> documentModel,final IModel<OProperty> propertyModel){
  super(id,new DynamicPropertyValueModel<Map<String,V>>(documentModel,propertyModel));
  setOutputMarkupId(true);
  final DefaultVisualizer visualizer=DefaultVisualizer.INSTANCE;
  final OType linkedType=propertyModel.getObject().getLinkedType();
  final OType oType=linkedType != null ? linkedType : OType.ANY;
  ListView<Pair<V>> listView=new ListView<Pair<V>>(""String_Node_Str"",new PropertyModel<List<Pair<V>>>(this,""String_Node_Str"")){
    @Override protected void populateItem(    final ListItem<Pair<V>> item){
      item.add(getKeyEditComponent(item));
      item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,new PropertyModel<V>(item.getModel(),""String_Node_Str"")));
      item.add(new AjaxFormCommand<Object>(""String_Node_Str"",""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          getData().remove(item.getIndex());
          target.add(EmbeddedMapEditPanel.this);
        }
      }
.setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
    }
    @Override protected ListItem<Pair<V>> newItem(    int index,    IModel<Pair<V>> itemModel){
      return new ListItem<Pair<V>>(index,itemModel){
        @Override public IMarkupFragment getMarkup(        Component child){
          if (child == null || !child.getId().equals(""String_Node_Str""))           return super.getMarkup(child);
          IMarkupFragment ret=markupProvider.provideMarkup(child);
          return ret != null ? ret : super.getMarkup(child);
        }
      }
;
    }
  }
;
  listView.setReuseItems(true);
  add(listView);
  add(new AjaxFormCommand(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().add(new Pair<V>());
      target.add(EmbeddedMapEditPanel.this);
    }
  }
.setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.PRIMARY).setIcon((String)null));
}","public EmbeddedMapEditPanel(String id,final IModel<ODocument> documentModel,final IModel<OProperty> propertyModel){
  super(id,new DynamicPropertyValueModel<Map<String,V>>(documentModel,propertyModel));
  setOutputMarkupId(true);
  final DefaultVisualizer visualizer=DefaultVisualizer.INSTANCE;
  final OType linkedType=propertyModel.getObject().getLinkedType();
  final OType oType=linkedType != null ? linkedType : OType.ANY;
  listView=new ListView<Pair<V>>(""String_Node_Str"",new PropertyModel<List<Pair<V>>>(this,""String_Node_Str"")){
    @Override protected void populateItem(    final ListItem<Pair<V>> item){
      item.add(getKeyEditComponent(item));
      item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,new PropertyModel<V>(item.getModel(),""String_Node_Str"")));
      item.add(new AjaxCommand<Object>(""String_Node_Str"",""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          getData().remove(item.getIndex());
          target.add(EmbeddedMapEditPanel.this);
          listView.removeAll();
        }
      }
.setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
    }
    @Override protected ListItem<Pair<V>> newItem(    int index,    IModel<Pair<V>> itemModel){
      return new ListItem<Pair<V>>(index,itemModel){
        @Override public IMarkupFragment getMarkup(        Component child){
          if (child == null || !child.getId().equals(""String_Node_Str""))           return super.getMarkup(child);
          IMarkupFragment ret=markupProvider.provideMarkup(child);
          return ret != null ? ret : super.getMarkup(child);
        }
      }
;
    }
  }
;
  listView.setReuseItems(true);
  add(listView);
  add(new AjaxCommand(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().add(new Pair<V>());
      target.add(EmbeddedMapEditPanel.this);
      listView.removeAll();
    }
  }
.setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.PRIMARY).setIcon((String)null));
}",0.9701353243117126
117420,"@Override protected void populateItem(final ListItem<Pair<V>> item){
  item.add(getKeyEditComponent(item));
  item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,new PropertyModel<V>(item.getModel(),""String_Node_Str"")));
  item.add(new AjaxFormCommand<Object>(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().remove(item.getIndex());
      target.add(EmbeddedMapEditPanel.this);
    }
  }
.setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
}","@Override protected void populateItem(final ListItem<Pair<V>> item){
  item.add(getKeyEditComponent(item));
  item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,new PropertyModel<V>(item.getModel(),""String_Node_Str"")));
  item.add(new AjaxCommand<Object>(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().remove(item.getIndex());
      target.add(EmbeddedMapEditPanel.this);
      listView.removeAll();
    }
  }
.setAutoNotify(false).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
}",0.9588189588189588
117421,"public List<Pair<V>> getData(){
  if (data == null) {
    this.data=new ArrayList<Pair<V>>();
    Map<String,V> data=getModelObject();
    if (data != null) {
      for (      Map.Entry<String,V> entry : data.entrySet()) {
        this.data.add(new Pair<V>(entry));
      }
    }
  }
  return data;
}","public List<Pair<V>> getData(){
  if (data == null) {
    this.data=new ArrayList<Pair<V>>();
    Map<String,V> data=getConvertedInput();
    if (data == null)     data=getModelObject();
    if (data != null) {
      for (      Map.Entry<String,V> entry : data.entrySet()) {
        this.data.add(new Pair<V>(entry));
      }
    }
  }
  return data;
}",0.9202453987730062
117422,"public OrienteerDataTable(String id,List<? extends IColumn<T,S>> columns,ISortableDataProvider<T,S> dataProvider,int rowsPerPage){
  super(id,columns,dataProvider,rowsPerPage);
  addTopToolbar(commandsToolbar=new DataTableCommandsToolbar<T>(this));
  addTopToolbar(headersToolbar=new AjaxFallbackHeadersToolbar<S>(this,dataProvider));
  addBottomToolbar(navigationToolbar=new OrienteerNavigationToolbar(this));
  addBottomToolbar(noRecordsToolbar=new NoRecordsToolbar(this));
  setOutputMarkupPlaceholderTag(true);
}","public OrienteerDataTable(String id,List<? extends IColumn<T,S>> columns,ISortableDataProvider<T,S> dataProvider,int rowsPerPage){
  super(id,columns,dataProvider,rowsPerPage);
  addTopToolbar(commandsToolbar=new DataTableCommandsToolbar<T>(this));
  addTopToolbar(headersToolbar=new AjaxFallbackHeadersToolbar<S>(this,dataProvider));
  addBottomToolbar(navigationToolbar=new OrienteerNavigationToolbar(this));
  addBottomToolbar(noRecordsToolbar=new NoRecordsToolbar(this));
  setOutputMarkupPlaceholderTag(true);
  setItemReuseStrategy(ReuseIfModelsEqualStrategy.getInstance());
}",0.9398907103825136
117423,"private void prepareResults(OClass oClass){
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<ODocument>(""String_Node_Str"" + oClass.getName() + ""String_Node_Str"");
  provider.setParameter(""String_Node_Str"",getModel());
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",oClassIntrospector.getColumnsFor(oClass,true,DisplayMode.VIEW.asModel()),provider,20);
  table.addCommand(new AbstractCheckBoxEnabledCommand<ODocument>(new ResourceModel(""String_Node_Str""),table){
{
      setBootstrapType(BootstrapType.SUCCESS);
      setIcon(FAIconType.hand_o_right);
    }
    @Override protected void performMultiAction(    AjaxRequestTarget target,    List<ODocument> objects){
      if (onSelect(target,objects,false))       modal.close(target);
    }
  }
);
  if (isMultiValue) {
    table.addCommand(new AbstractCheckBoxEnabledCommand<ODocument>(new ResourceModel(""String_Node_Str""),table){
{
        setBootstrapType(BootstrapType.SUCCESS);
        setIcon(FAIconType.hand_o_right);
      }
      @Override protected void performMultiAction(      AjaxRequestTarget target,      List<ODocument> objects){
        if (onSelect(target,objects,true))         target.focusComponent(queryField);
      }
    }
);
  }
  resultsContainer.addOrReplace(table);
}","private void prepareResults(OClass oClass){
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<ODocument>(""String_Node_Str"" + oClass.getName() + ""String_Node_Str"");
  provider.setParameter(""String_Node_Str"",getModel());
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",oClassIntrospector.getColumnsFor(oClass,true,DisplayMode.VIEW.asModel()),provider,20);
  table.addCommand(new AbstractCheckBoxEnabledCommand<ODocument>(new ResourceModel(""String_Node_Str""),table){
{
      setBootstrapType(BootstrapType.SUCCESS);
      setIcon(FAIconType.hand_o_right);
      setAutoNotify(false);
    }
    @Override protected void performMultiAction(    AjaxRequestTarget target,    List<ODocument> objects){
      if (onSelect(target,objects,false))       modal.close(target);
    }
  }
);
  if (isMultiValue) {
    table.addCommand(new AbstractCheckBoxEnabledCommand<ODocument>(new ResourceModel(""String_Node_Str""),table){
{
        setBootstrapType(BootstrapType.SUCCESS);
        setIcon(FAIconType.hand_o_right);
        setAutoNotify(false);
      }
      @Override protected void performMultiAction(      AjaxRequestTarget target,      List<ODocument> objects){
        if (onSelect(target,objects,true))         target.focusComponent(queryField);
      }
    }
);
  }
  resultsContainer.addOrReplace(table);
}",0.9784065524944154
117424,"@Override protected void installData(OrientDbWebApplication application,ODatabaseDocument database){
  OrienteerWebApplication app=(OrienteerWebApplication)application;
  ODatabaseDocument db=(ODatabaseDocument)database;
  OSchema schema=db.getMetadata().getSchema();
  OClass oModuleClass=schema.getClass(OMODULE_CLASS);
  if (oModuleClass == null) {
    oModuleClass=schema.createClass(OMODULE_CLASS);
  }
  if (!oModuleClass.existsProperty(OMODULE_NAME)) {
    OProperty nameProperty=oModuleClass.createProperty(OMODULE_NAME,OType.STRING);
    CustomAttributes.PROP_NAME.setValue(oModuleClass,nameProperty);
  }
  if (!oModuleClass.existsProperty(OMODULE_VERSION)) {
    oModuleClass.createProperty(OMODULE_VERSION,OType.INTEGER);
  }
  Map<String,Integer> installedModules=new HashMap<String,Integer>();
  for (  ODocument doc : db.browseClass(OMODULE_CLASS)) {
    installedModules.put((String)doc.field(OMODULE_NAME),(Integer)doc.field(OMODULE_VERSION,Integer.class));
  }
  for (  Map.Entry<String,IOrienteerModule> entry : app.getRegisteredModules().entrySet()) {
    String name=entry.getKey();
    IOrienteerModule module=entry.getValue();
    int version=module.getVersion();
    Integer oldVersion=installedModules.get(name);
    if (oldVersion == null) {
      module.onInstall(app,db);
      ODocument moduleDoc=new ODocument(oModuleClass);
      moduleDoc.field(OMODULE_NAME,module.getName());
      moduleDoc.field(OMODULE_VERSION,module.getVersion());
      moduleDoc.save();
    }
 else     if (!oldVersion.equals(version)) {
      module.onUpdate(app,db,oldVersion,version);
    }
    module.onInitialize(app,db);
  }
}","@Override protected void installData(OrientDbWebApplication application,ODatabaseDocument database){
  OrienteerWebApplication app=(OrienteerWebApplication)application;
  ODatabaseDocument db=(ODatabaseDocument)database;
  OSchema schema=db.getMetadata().getSchema();
  OClass oModuleClass=schema.getClass(OMODULE_CLASS);
  if (oModuleClass == null) {
    oModuleClass=schema.createClass(OMODULE_CLASS);
  }
  if (!oModuleClass.existsProperty(OMODULE_NAME)) {
    OProperty nameProperty=oModuleClass.createProperty(OMODULE_NAME,OType.STRING);
    CustomAttributes.PROP_NAME.setValue(oModuleClass,nameProperty);
  }
  if (!oModuleClass.existsProperty(OMODULE_VERSION)) {
    oModuleClass.createProperty(OMODULE_VERSION,OType.INTEGER);
  }
  Map<String,ODocument> installedModules=new HashMap<String,ODocument>();
  for (  ODocument doc : db.browseClass(OMODULE_CLASS)) {
    installedModules.put((String)doc.field(OMODULE_NAME),doc);
  }
  for (  Map.Entry<String,IOrienteerModule> entry : app.getRegisteredModules().entrySet()) {
    String name=entry.getKey();
    IOrienteerModule module=entry.getValue();
    int version=module.getVersion();
    ODocument moduleDoc=installedModules.get(name);
    Integer oldVersion=moduleDoc != null ? (Integer)moduleDoc.field(OMODULE_VERSION,Integer.class) : null;
    if (moduleDoc == null || oldVersion == null) {
      module.onInstall(app,db);
      moduleDoc=new ODocument(oModuleClass);
      moduleDoc.field(OMODULE_NAME,module.getName());
      moduleDoc.field(OMODULE_VERSION,module.getVersion());
      moduleDoc.save();
    }
 else     if (oldVersion < version) {
      module.onUpdate(app,db,oldVersion,version);
      moduleDoc.field(OMODULE_VERSION,version);
      moduleDoc.save();
    }
    module.onInitialize(app,db);
  }
}",0.7454651843183148
117425,"private void convertNameProperty(OrienteerWebApplication app,ODatabaseDocument db,String className){
  boolean wasInTransacton=db.getTransaction().isActive();
  db.commit();
  for (  ODocument doc : db.browseClass(className)) {
    doc.field(""String_Node_Str"",doc.field(""String_Node_Str""));
    doc.field(""String_Node_Str"",(String)null);
    doc.save();
  }
  OClass oClass=db.getMetadata().getSchema().getClass(className);
  oClass.dropProperty(""String_Node_Str"");
  OProperty nameProperty=oClass.createProperty(""String_Node_Str"",OType.EMBEDDEDMAP);
  CustomAttributes.VISUALIZATION_TYPE.setValue(nameProperty,""String_Node_Str"");
  for (  ODocument doc : db.browseClass(className)) {
    doc.field(""String_Node_Str"",CommonUtils.toMap(""String_Node_Str"",doc.field(""String_Node_Str"")));
    doc.removeField(""String_Node_Str"");
    doc.save();
  }
  if (wasInTransacton)   db.begin();
}","private void convertNameProperty(OrienteerWebApplication app,ODatabaseDocument db,String className){
  boolean wasInTransacton=db.getTransaction().isActive();
  db.commit();
  for (  ODocument doc : db.browseClass(className)) {
    Object value=doc.field(""String_Node_Str"");
    if (value instanceof String) {
      doc.field(""String_Node_Str"",doc.field(""String_Node_Str""));
      doc.field(""String_Node_Str"",(String)null);
      doc.save();
    }
  }
  OClass oClass=db.getMetadata().getSchema().getClass(className);
  oClass.dropProperty(""String_Node_Str"");
  OProperty nameProperty=oClass.createProperty(""String_Node_Str"",OType.EMBEDDEDMAP);
  CustomAttributes.VISUALIZATION_TYPE.setValue(nameProperty,""String_Node_Str"");
  for (  ODocument doc : db.browseClass(className)) {
    if (doc.containsField(""String_Node_Str"")) {
      doc.field(""String_Node_Str"",CommonUtils.toMap(""String_Node_Str"",doc.field(""String_Node_Str"")));
      doc.removeField(""String_Node_Str"");
      doc.save();
    }
  }
  if (wasInTransacton)   db.begin();
}",0.9197916666666668
117426,"@Override public String getDocumentName(ODocument doc){
  if (doc == null)   return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
 else {
    OProperty nameProp=getNameProperty(doc.getSchemaClass());
    if (nameProp != null) {
      Object value=doc.field(nameProp.getName());
      if (value == null)       return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
      OType type=nameProp.getType();
      Locale locale=OrienteerWebSession.get().getLocale();
switch (type) {
case DATE:
        return OrienteerWebApplication.DATE_CONVERTER.convertToString((Date)value,locale);
case DATETIME:
      return OrienteerWebApplication.DATE_TIME_CONVERTER.convertToString((Date)value,locale);
case LINK:
    return getDocumentName((ODocument)value);
case EMBEDDEDMAP:
  Map<String,String> localizations=(Map<String,String>)value;
if (localizations != null) {
  String localization=localizations.get(locale.getLanguage());
  if (localization == null) {
    localization=localizations.get(Locale.getDefault().getLanguage());
    if (localization == null && localizations.size() > 0) {
      localization=localizations.values().iterator().next();
    }
  }
  if (localization != null) {
    return localization;
  }
}
default :
return value.toString();
}
}
 else {
return doc.toString();
}
}
}","@Override public String getDocumentName(ODocument doc){
  if (doc == null)   return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
 else {
    OProperty nameProp=getNameProperty(doc.getSchemaClass());
    if (nameProp != null) {
      Object value=doc.field(nameProp.getName());
      if (value == null)       return Application.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",null);
      OType type=nameProp.getType();
      Locale locale=OrienteerWebSession.get().getLocale();
switch (type) {
case DATE:
        return OrienteerWebApplication.DATE_CONVERTER.convertToString((Date)value,locale);
case DATETIME:
      return OrienteerWebApplication.DATE_TIME_CONVERTER.convertToString((Date)value,locale);
case LINK:
    return getDocumentName((ODocument)value);
case EMBEDDEDMAP:
  Map<String,Object> localizations=(Map<String,Object>)value;
Object localized=CommonUtils.localizeByMap(localizations,true,locale.getLanguage(),Locale.getDefault().getLanguage());
if (localized != null) return localized.toString();
default :
return value.toString();
}
}
 else {
return doc.toString();
}
}
}",0.7323832145684878
117427,"@Override public void onClick(){
  OrienteerWebSession.get().setPerspecive(getModelObject());
  OrienteerBasePage.this.info(getLocalizer().getString(""String_Node_Str"",this,new ODocumentPropertyModel<String>(getModel(),""String_Node_Str"")));
}","@Override public void onClick(){
  OrienteerWebSession.get().setPerspecive(getModelObject());
  OrienteerBasePage.this.info(getLocalizer().getString(""String_Node_Str"",this,new ODocumentNameModel(getModel())));
}",0.915929203539823
117428,"@Override public void initialize(){
  super.initialize();
  add(new BookmarkablePageLink<T>(""String_Node_Str"",getApplication().getHomePage()));
  add(newPageHeaderComponent(""String_Node_Str""));
  final AttributeAppender highlightActivePerspective=new AttributeAppender(""String_Node_Str"",""String_Node_Str""){
    @Override public boolean isEnabled(    Component component){
      return Objects.isEqual(getPerspective(),component.getDefaultModelObject());
    }
  }
;
  add(new ListView<ODocument>(""String_Node_Str"",new OQueryModel<ODocument>(""String_Node_Str"" + PerspectivesModule.OCLASS_PERSPECTIVE)){
    @Override protected void populateItem(    ListItem<ODocument> item){
      IModel<ODocument> itemModel=item.getModel();
      Link<ODocument> link=new Link<ODocument>(""String_Node_Str"",itemModel){
        @Override public void onClick(){
          OrienteerWebSession.get().setPerspecive(getModelObject());
          OrienteerBasePage.this.info(getLocalizer().getString(""String_Node_Str"",this,new ODocumentPropertyModel<String>(getModel(),""String_Node_Str"")));
        }
      }
;
      link.add(new FAIcon(""String_Node_Str"",new ODocumentPropertyModel<String>(itemModel,""String_Node_Str"")),new Label(""String_Node_Str"",new ODocumentNameModel(item.getModel())).setRenderBodyOnly(true));
      item.add(link);
      item.add(highlightActivePerspective);
    }
  }
);
  boolean signedIn=OrientDbWebSession.get().isSignedIn();
  add(new BookmarkablePageLink<Object>(""String_Node_Str"",LoginPage.class).setVisible(!signedIn));
  add(new BookmarkablePageLink<Object>(""String_Node_Str"",LogoutPage.class).setVisible(signedIn));
  IModel<ODocument> perspectiveModel=new PropertyModel<ODocument>(this,""String_Node_Str"");
  add(new ListView<ODocument>(""String_Node_Str"",new ODocumentPropertyModel<List<ODocument>>(perspectiveModel,""String_Node_Str"")){
    @Override protected void populateItem(    ListItem<ODocument> item){
      IModel<ODocument> itemModel=item.getModel();
      ExternalLink link=new ExternalLink(""String_Node_Str"",new ODocumentPropertyModel<String>(itemModel,""String_Node_Str"")).setContextRelative(true);
      link.add(new FAIcon(""String_Node_Str"",new ODocumentPropertyModel<String>(itemModel,""String_Node_Str"")),new Label(""String_Node_Str"",new ODocumentNameModel(item.getModel())).setRenderBodyOnly(true));
      item.add(link);
    }
  }
);
  add(feedbacks=new OrienteerFeedbackPanel(""String_Node_Str""));
  add(new ODocumentPageLink(""String_Node_Str"",new PropertyModel<ODocument>(this,""String_Node_Str"")));
  final IModel<String> queryModel=Model.of();
  Form<String> searchForm=new Form<String>(""String_Node_Str"",queryModel){
    @Override protected void onSubmit(){
      setResponsePage(new SearchPage(queryModel));
    }
  }
;
  searchForm.add(new TextField<String>(""String_Node_Str"",queryModel));
  searchForm.add(new AjaxButton(""String_Node_Str""){
  }
);
  add(searchForm);
}","@Override public void initialize(){
  super.initialize();
  add(new BookmarkablePageLink<T>(""String_Node_Str"",getApplication().getHomePage()));
  add(newPageHeaderComponent(""String_Node_Str""));
  final AttributeAppender highlightActivePerspective=new AttributeAppender(""String_Node_Str"",""String_Node_Str""){
    @Override public boolean isEnabled(    Component component){
      return Objects.isEqual(getPerspective(),component.getDefaultModelObject());
    }
  }
;
  add(new ListView<ODocument>(""String_Node_Str"",new OQueryModel<ODocument>(""String_Node_Str"" + PerspectivesModule.OCLASS_PERSPECTIVE)){
    @Override protected void populateItem(    ListItem<ODocument> item){
      IModel<ODocument> itemModel=item.getModel();
      Link<ODocument> link=new Link<ODocument>(""String_Node_Str"",itemModel){
        @Override public void onClick(){
          OrienteerWebSession.get().setPerspecive(getModelObject());
          OrienteerBasePage.this.info(getLocalizer().getString(""String_Node_Str"",this,new ODocumentNameModel(getModel())));
        }
      }
;
      link.add(new FAIcon(""String_Node_Str"",new ODocumentPropertyModel<String>(itemModel,""String_Node_Str"")),new Label(""String_Node_Str"",new ODocumentNameModel(item.getModel())).setRenderBodyOnly(true));
      item.add(link);
      item.add(highlightActivePerspective);
    }
  }
);
  boolean signedIn=OrientDbWebSession.get().isSignedIn();
  add(new BookmarkablePageLink<Object>(""String_Node_Str"",LoginPage.class).setVisible(!signedIn));
  add(new BookmarkablePageLink<Object>(""String_Node_Str"",LogoutPage.class).setVisible(signedIn));
  IModel<ODocument> perspectiveModel=new PropertyModel<ODocument>(this,""String_Node_Str"");
  add(new ListView<ODocument>(""String_Node_Str"",new ODocumentPropertyModel<List<ODocument>>(perspectiveModel,""String_Node_Str"")){
    @Override protected void populateItem(    ListItem<ODocument> item){
      IModel<ODocument> itemModel=item.getModel();
      ExternalLink link=new ExternalLink(""String_Node_Str"",new ODocumentPropertyModel<String>(itemModel,""String_Node_Str"")).setContextRelative(true);
      link.add(new FAIcon(""String_Node_Str"",new ODocumentPropertyModel<String>(itemModel,""String_Node_Str"")),new Label(""String_Node_Str"",new ODocumentNameModel(item.getModel())).setRenderBodyOnly(true));
      item.add(link);
    }
  }
);
  add(feedbacks=new OrienteerFeedbackPanel(""String_Node_Str""));
  add(new ODocumentPageLink(""String_Node_Str"",new PropertyModel<ODocument>(this,""String_Node_Str"")));
  final IModel<String> queryModel=Model.of();
  Form<String> searchForm=new Form<String>(""String_Node_Str"",queryModel){
    @Override protected void onSubmit(){
      setResponsePage(new SearchPage(queryModel));
    }
  }
;
  searchForm.add(new TextField<String>(""String_Node_Str"",queryModel));
  searchForm.add(new AjaxButton(""String_Node_Str""){
  }
);
  add(searchForm);
}",0.9878598681928548
117429,"@Override public OProperty virtualizeField(ODocument doc,String field){
  OProperty property=OPropertyPrototyper.newPrototype(doc.getClassName());
  property.setName(field);
  OType oType=doc.fieldType(field);
  property.setType(oType);
switch (oType) {
case LINK:
    ODocument link=doc.field(field);
  if (link != null)   property.setLinkedClass(link.getSchemaClass());
break;
case LINKBAG:
OCollection<OIdentifiable> bag=doc.field(field);
if (bag != null && bag.size() > 0) {
OIdentifiable linkIdentifiable=bag.iterator().next();
ORecord record=linkIdentifiable != null ? linkIdentifiable.getRecord() : null;
if (record != null && record instanceof ODocument) property.setLinkedClass(((ODocument)record).getSchemaClass());
}
break;
case LINKLIST:
case LINKSET:
Collection<ODocument> collection=doc.field(field);
if (collection != null && !collection.isEmpty()) {
link=collection.iterator().next();
if (link != null) property.setLinkedClass(link.getSchemaClass());
}
break;
case LINKMAP:
Map<String,ODocument> map=doc.field(field);
if (map != null && !map.isEmpty()) {
link=map.values().iterator().next();
if (link != null) property.setLinkedClass(link.getSchemaClass());
}
break;
case EMBEDDED:
Object value=doc.field(field);
OType linkedType=OType.getTypeByValue(value);
if (OType.EMBEDDED.equals(linkedType)) property.setLinkedClass(((ODocument)value).getSchemaClass());
 else property.setLinkedType(linkedType);
break;
case EMBEDDEDSET:
case EMBEDDEDLIST:
Collection<Object> objectCollection=doc.field(field);
if (objectCollection != null && !objectCollection.isEmpty()) {
value=objectCollection.iterator().next();
property.setLinkedType(OType.getTypeByValue(value));
}
break;
case EMBEDDEDMAP:
Map<String,Object> objectMap=doc.field(field);
if (objectMap != null && !objectMap.isEmpty()) {
value=objectMap.values().iterator().next();
property.setLinkedType(OType.getTypeByValue(value));
}
break;
default :
break;
}
return property;
}","@Override public OProperty virtualizeField(ODocument doc,String field){
  OProperty property=OPropertyPrototyper.newPrototype(doc.getClassName());
  property.setName(field);
  OType oType=doc.fieldType(field);
  if (oType == null)   oType=OType.ANY;
  property.setType(oType);
switch (oType) {
case LINK:
    ODocument link=doc.field(field);
  if (link != null)   property.setLinkedClass(link.getSchemaClass());
break;
case LINKBAG:
OCollection<OIdentifiable> bag=doc.field(field);
if (bag != null && bag.size() > 0) {
OIdentifiable linkIdentifiable=bag.iterator().next();
ORecord record=linkIdentifiable != null ? linkIdentifiable.getRecord() : null;
if (record != null && record instanceof ODocument) property.setLinkedClass(((ODocument)record).getSchemaClass());
}
break;
case LINKLIST:
case LINKSET:
Collection<ODocument> collection=doc.field(field);
if (collection != null && !collection.isEmpty()) {
link=collection.iterator().next();
if (link != null) property.setLinkedClass(link.getSchemaClass());
}
break;
case LINKMAP:
Map<String,ODocument> map=doc.field(field);
if (map != null && !map.isEmpty()) {
link=map.values().iterator().next();
if (link != null) property.setLinkedClass(link.getSchemaClass());
}
break;
case EMBEDDED:
Object value=doc.field(field);
OType linkedType=OType.getTypeByValue(value);
if (OType.EMBEDDED.equals(linkedType)) property.setLinkedClass(((ODocument)value).getSchemaClass());
 else property.setLinkedType(linkedType);
break;
case EMBEDDEDSET:
case EMBEDDEDLIST:
Collection<Object> objectCollection=doc.field(field);
if (objectCollection != null && !objectCollection.isEmpty()) {
value=objectCollection.iterator().next();
property.setLinkedType(OType.getTypeByValue(value));
}
break;
case EMBEDDEDMAP:
Map<String,Object> objectMap=doc.field(field);
if (objectMap != null && !objectMap.isEmpty()) {
value=objectMap.values().iterator().next();
property.setLinkedType(OType.getTypeByValue(value));
}
break;
default :
break;
}
return property;
}",0.9897959183673468
117430,"@SuppressWarnings(""String_Node_Str"") @Override protected void configure(){
  Properties properties=retrieveProperties();
  Names.bindProperties(binder(),properties);
  bindOrientDbProperties(properties);
  String applicationClass=properties.getProperty(""String_Node_Str"");
  Class<? extends OrienteerWebApplication> appClass=OrienteerWebApplication.class;
  if (applicationClass != null) {
    try {
      Class<?> customAppClass=Class.forName(applicationClass);
      if (OrienteerWebApplication.class.isAssignableFrom(appClass)) {
        appClass=(Class<? extends OrienteerWebApplication>)customAppClass;
      }
 else {
        LOG.error(""String_Node_Str"" + applicationClass + ""String_Node_Str""+ OrienteerWebApplication.class+ ""String_Node_Str"");
      }
    }
 catch (    ClassNotFoundException e) {
      LOG.error(""String_Node_Str"" + applicationClass + ""String_Node_Str"");
    }
  }
  bind(appClass).asEagerSingleton();
  Provider<? extends OrienteerWebApplication> appProvider=binder().getProvider(appClass);
  if (!OrienteerWebApplication.class.equals(appClass)) {
    bind(OrienteerWebApplication.class).toProvider(appProvider);
  }
  bind(OrientDbWebApplication.class).toProvider(appProvider);
  bind(WebApplication.class).toProvider(appProvider);
  bind(Properties.class).annotatedWith(Orienteer.class).toInstance(properties);
  bind(IOrientDbSettings.class).to(GuiceOrientDbSettings.class);
  bind(IOClassIntrospector.class).to(OClassIntrospector.class);
  bind(UIVisualizersRegistry.class).asEagerSingleton();
  bind(IWebjarsSettings.class).to(OrienteerWebjarsSettings.class).asEagerSingleton();
}","@SuppressWarnings(""String_Node_Str"") @Override protected void configure(){
  Properties properties=retrieveProperties();
  Names.bindProperties(binder(),properties);
  bindOrientDbProperties(properties);
  String applicationClass=properties.getProperty(""String_Node_Str"");
  Class<? extends OrienteerWebApplication> appClass=OrienteerWebApplication.class;
  if (applicationClass != null) {
    try {
      Class<?> customAppClass=Class.forName(applicationClass);
      if (OrienteerWebApplication.class.isAssignableFrom(appClass)) {
        appClass=(Class<? extends OrienteerWebApplication>)customAppClass;
      }
 else {
        LOG.error(""String_Node_Str"" + applicationClass + ""String_Node_Str""+ OrienteerWebApplication.class+ ""String_Node_Str"");
      }
    }
 catch (    ClassNotFoundException e) {
      LOG.error(""String_Node_Str"" + applicationClass + ""String_Node_Str"");
    }
  }
  bind(appClass).asEagerSingleton();
  Provider<? extends OrienteerWebApplication> appProvider=binder().getProvider(appClass);
  if (!OrienteerWebApplication.class.equals(appClass)) {
    bind(OrienteerWebApplication.class).toProvider(appProvider);
  }
  bind(OrientDbWebApplication.class).toProvider(appProvider);
  bind(WebApplication.class).toProvider(appProvider);
  bind(Properties.class).annotatedWith(Orienteer.class).toInstance(properties);
  bind(IOrientDbSettings.class).to(GuiceOrientDbSettings.class).asEagerSingleton();
  bind(IOClassIntrospector.class).to(OClassIntrospector.class);
  bind(UIVisualizersRegistry.class).asEagerSingleton();
  bind(IWebjarsSettings.class).to(OrienteerWebjarsSettings.class).asEagerSingleton();
}",0.994137611848195
117431,"public HomePage(){
  ODocument perspective=getPerspective();
  String homeUrl=perspective.field(""String_Node_Str"");
  throw new RedirectToUrlException(homeUrl);
}","public HomePage(){
  ODocument perspective=getPerspective();
  String homeUrl=perspective.field(""String_Node_Str"");
  if (Strings.isEmpty(homeUrl))   homeUrl=""String_Node_Str"";
  if (!OrienteerWebSession.get().isSignedIn()) {
    if (homeUrl.indexOf('?') >= 0)     homeUrl+='&';
 else     homeUrl+='?';
    homeUrl+=FROM_HOME_PARAM + ""String_Node_Str"";
  }
  throw new RedirectToUrlException(homeUrl);
}",0.5734513274336284
117432,"@Override public Statement apply(final Statement base,final FrameworkMethod method,final Object target){
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      Injector injector=injectorProvider.get();
      injector.injectMembers(target);
    }
  }
;
}","@Override public Statement apply(final Statement base,final FrameworkMethod method,final Object target){
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      Injector injector=injectorProvider.get();
      injector.injectMembers(target);
      base.evaluate();
    }
  }
;
}",0.961344537815126
117433,"@Override public void evaluate() throws Throwable {
  Injector injector=injectorProvider.get();
  injector.injectMembers(target);
}","@Override public void evaluate() throws Throwable {
  Injector injector=injectorProvider.get();
  injector.injectMembers(target);
  base.evaluate();
}",0.9323843416370108
117434,"@Override protected String load(){
  return OrienteerWebApplication.get().getOClassIntrospector().getDocumentName(documentModel.getObject());
}","@Override protected String load(){
  ODocument doc=documentModel != null ? documentModel.getObject() : null;
  return doc != null ? OrienteerWebApplication.get().getOClassIntrospector().getDocumentName(doc) : null;
}",0.6350974930362117
117435,"@Override public void detach(){
  documentModel.detach();
}","@Override public void detach(){
  if (documentModel != null)   documentModel.detach();
}",0.8027210884353742
117436,"@Override public Object getDisplayValue(ODocument object){
  return oClassIntrospector.getDocumentName(object);
}","@Override public Object getDisplayValue(ODocument object){
  return getOClassIntrospector().getDocumentName(object);
}",0.9696969696969696
117437,"public ODocument getDocument(){
  return getDocumentModel().getObject();
}","public ODocument getDocument(){
  IModel<ODocument> documentModel=getDocumentModel();
  return documentModel != null ? documentModel.getObject() : null;
}",0.6228070175438597
117438,"public TabsPanel(String id,IModel<T> model,IModel<? extends List<? extends T>> tabsModel){
  super(id,model);
  setOutputMarkupPlaceholderTag(true);
  tabs=new ListView<T>(""String_Node_Str"",tabsModel){
    @Override protected void populateItem(    final ListItem<T> item){
      item.add(new AttributeAppender(""String_Node_Str"",""String_Node_Str""){
        @Override public boolean isEnabled(        Component component){
          return super.isEnabled(component) && Objects.equals(item.getModelObject(),TabsPanel.this.getModelObject());
        }
      }
);
      item.add(new AjaxLink<T>(""String_Node_Str"",item.getModel()){
        @Override public void onClick(        AjaxRequestTarget target){
          TabsPanel.this.setModelObject(item.getModelObject());
          onTabClick(target);
          target.add(TabsPanel.this);
        }
      }
.setBody(newTabNameModel(item.getModel())));
    }
  }
;
  add(tabs);
}","public TabsPanel(String id,IModel<T> model,IModel<? extends List<? extends T>> tabsModel){
  super(id,model);
  setOutputMarkupPlaceholderTag(true);
  tabs=new ListView<T>(""String_Node_Str"",tabsModel){
    @Override protected void populateItem(    final ListItem<T> item){
      item.add(new AttributeAppender(""String_Node_Str"",""String_Node_Str""){
        @Override public boolean isEnabled(        Component component){
          return super.isEnabled(component) && Objects.equals(item.getModelObject(),TabsPanel.this.getModelObject());
        }
      }
);
      item.add(new AjaxLink<T>(""String_Node_Str"",item.getModel()){
        @Override public void onClick(        AjaxRequestTarget target){
          TabsPanel.this.setModelObject(item.getModelObject());
          onTabClick(target);
          target.add(TabsPanel.this);
        }
      }
.setBody(newTabNameModel(item.getModel())));
    }
    @Override protected void onConfigure(){
      T tab=TabsPanel.this.getModelObject();
      if (!getModelObject().contains(tab)) {
        T defaultTab=getDefaultTab();
        if (defaultTab != null && getModelObject().contains(defaultTab)) {
          tab=defaultTab;
        }
 else {
          List<T> tabs=getModelObject();
          tab=tabs != null && tabs.size() > 0 ? tabs.get(0) : null;
        }
        TabsPanel.this.setModelObject(tab);
      }
      super.onConfigure();
    }
  }
;
  add(tabs);
}",0.7753530166880617
117439,"@Override protected void onConfigure(){
  super.onConfigure();
  if (DisplayMode.EDIT.equals(displayMode.getObject())) {
    saveODocumentCommand.configure();
    if (!saveODocumentCommand.determineVisibility()) {
      displayMode.setObject(DisplayMode.VIEW);
    }
  }
  if (tabModel.getObject() == null)   tabModel.setObject(CustomAttributes.TAB.<String>getValue(getDocument().getSchemaClass(),IOClassIntrospector.DEFAULT_TAB));
}","@Override protected void onConfigure(){
  super.onConfigure();
  if (DisplayMode.EDIT.equals(displayMode.getObject())) {
    saveODocumentCommand.configure();
    if (!saveODocumentCommand.determineVisibility()) {
      displayMode.setObject(DisplayMode.VIEW);
    }
  }
}",0.7716312056737589
117440,"public DocumentPage(PageParameters parameters){
  super(parameters);
  DisplayMode mode=DisplayMode.parse(parameters.get(""String_Node_Str"").toOptionalString());
  if (mode != null)   displayMode.setObject(mode);
}","public DocumentPage(PageParameters parameters){
  super(parameters);
  DisplayMode mode=DisplayMode.parse(parameters.get(""String_Node_Str"").toOptionalString());
  if (mode != null)   displayMode.setObject(mode);
  String tab=parameters.get(""String_Node_Str"").toOptionalString();
  tabModel.setObject(tab);
}",0.8192307692307692
117441,"@Override protected void onInitialize(){
  super.onInitialize();
  propertiesStructureTable.addCommand(new EditODocumentCommand(propertiesStructureTable,displayMode));
  propertiesStructureTable.addCommand(saveODocumentCommand=new SaveODocumentCommand(propertiesStructureTable,displayMode));
}","@Override protected void onInitialize(){
  super.onInitialize();
  String defaultTab=CustomAttributes.TAB.<String>getValue(getDocument().getSchemaClass(),IOClassIntrospector.DEFAULT_TAB);
  tabsPanel.setDefaultTabModel(Model.of(defaultTab));
  propertiesStructureTable.addCommand(new EditODocumentCommand(propertiesStructureTable,displayMode));
  propertiesStructureTable.addCommand(saveODocumentCommand=new SaveODocumentCommand(propertiesStructureTable,displayMode));
}",0.7680209698558322
117442,"@Override public void initialize(){
  super.initialize();
  tabModel=Model.of();
  tabsPanel=new TabsPanel(""String_Node_Str"",tabModel,new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return oClassIntrospector.listTabs(getDocument().getSchemaClass());
    }
  }
){
    private static final long serialVersionUID=1L;
    @Override public void onTabClick(    AjaxRequestTarget target){
      target.add(propertiesStructureTable);
      target.add(extendedPropertiesContainer);
    }
  }
;
  add(tabsPanel);
  Form<ODocument> form=new Form<ODocument>(""String_Node_Str"",getModel());
  IModel<List<? extends OProperty>> propertiesModel=new LoadableDetachableModel<List<? extends OProperty>>(){
    @Override protected List<? extends OProperty> load(){
      return oClassIntrospector.listProperties(getDocument().getSchemaClass(),tabModel.getObject(),false);
    }
  }
;
  propertiesStructureTable=new OrienteerStructureTable<ODocument,OProperty>(""String_Node_Str"",getModel(),propertiesModel){
    @Override protected Component getValueComponent(    String id,    IModel<OProperty> rowModel){
      return new ODocumentMetaPanel<Object>(id,displayMode,getDocumentModel(),rowModel);
    }
  }
;
  form.add(propertiesStructureTable);
  add(form);
  propertiesModel=new LoadableDetachableModel<List<? extends OProperty>>(){
    @Override protected List<? extends OProperty> load(){
      return oClassIntrospector.listProperties(getDocument().getSchemaClass(),tabModel.getObject(),true);
    }
  }
;
  extendedPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  extendedPropertiesContainer.setOutputMarkupPlaceholderTag(true);
  ListView<OProperty> extendedPropertiesListView=new ListView<OProperty>(""String_Node_Str"",propertiesModel){
    @Override protected void populateItem(    ListItem<OProperty> item){
      Form<?> form=new Form<Object>(""String_Node_Str"");
      OProperty oProperty=item.getModelObject();
      String component=CustomAttributes.VISUALIZATION_TYPE.getValue(oProperty);
      form.add(OrienteerWebApplication.get().getUIVisualizersRegistry().getComponentFactory(oProperty.getType(),component).createComponent(""String_Node_Str"",DisplayMode.VIEW,getDocumentModel(),item.getModel(),new DynamicPropertyValueModel<Object>(getDocumentModel(),item.getModel())));
      item.add(form);
    }
  }
;
  extendedPropertiesContainer.add(extendedPropertiesListView);
  add(extendedPropertiesContainer);
}","@Override public void initialize(){
  super.initialize();
  tabModel=Model.of();
  tabsPanel=new TabsPanel<String>(""String_Node_Str"",tabModel,new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return oClassIntrospector.listTabs(getDocument().getSchemaClass());
    }
  }
){
    private static final long serialVersionUID=1L;
    @Override public void onTabClick(    AjaxRequestTarget target){
      target.add(propertiesStructureTable);
      target.add(extendedPropertiesContainer);
    }
  }
;
  add(tabsPanel);
  Form<ODocument> form=new Form<ODocument>(""String_Node_Str"",getModel());
  IModel<List<? extends OProperty>> propertiesModel=new LoadableDetachableModel<List<? extends OProperty>>(){
    @Override protected List<? extends OProperty> load(){
      return oClassIntrospector.listProperties(getDocument().getSchemaClass(),tabModel.getObject(),false);
    }
  }
;
  propertiesStructureTable=new OrienteerStructureTable<ODocument,OProperty>(""String_Node_Str"",getModel(),propertiesModel){
    @Override protected Component getValueComponent(    String id,    IModel<OProperty> rowModel){
      return new ODocumentMetaPanel<Object>(id,displayMode,getDocumentModel(),rowModel);
    }
  }
;
  form.add(propertiesStructureTable);
  add(form);
  propertiesModel=new LoadableDetachableModel<List<? extends OProperty>>(){
    @Override protected List<? extends OProperty> load(){
      return oClassIntrospector.listProperties(getDocument().getSchemaClass(),tabModel.getObject(),true);
    }
  }
;
  extendedPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  extendedPropertiesContainer.setOutputMarkupPlaceholderTag(true);
  ListView<OProperty> extendedPropertiesListView=new ListView<OProperty>(""String_Node_Str"",propertiesModel){
    @Override protected void populateItem(    ListItem<OProperty> item){
      Form<?> form=new Form<Object>(""String_Node_Str"");
      OProperty oProperty=item.getModelObject();
      String component=CustomAttributes.VISUALIZATION_TYPE.getValue(oProperty);
      form.add(OrienteerWebApplication.get().getUIVisualizersRegistry().getComponentFactory(oProperty.getType(),component).createComponent(""String_Node_Str"",DisplayMode.VIEW,getDocumentModel(),item.getModel(),new DynamicPropertyValueModel<Object>(getDocumentModel(),item.getModel())));
      item.add(form);
    }
  }
;
  extendedPropertiesContainer.add(extendedPropertiesListView);
  add(extendedPropertiesContainer);
}",0.9983799108950993
117443,"@Override protected void onConfigure(){
  super.onConfigure();
  if (DisplayMode.EDIT.equals(displayMode.getObject())) {
    saveODocumentCommand.configure();
    if (!saveODocumentCommand.determineVisibility()) {
      displayMode.setObject(DisplayMode.VIEW);
    }
  }
}","@Override protected void onConfigure(){
  super.onConfigure();
  if (DisplayMode.EDIT.equals(displayMode.getObject())) {
    saveODocumentCommand.configure();
    if (!saveODocumentCommand.determineVisibility()) {
      displayMode.setObject(DisplayMode.VIEW);
    }
  }
  if (tabModel.getObject() == null)   tabModel.setObject(CustomAttributes.TAB.<String>getValue(getDocument().getSchemaClass(),IOClassIntrospector.DEFAULT_TAB));
}",0.7716312056737589
117444,"@Override public void initialize(){
  super.initialize();
  String classDefaultTab=CustomAttributes.TAB.getValue(getDocument().getSchemaClass());
  tabModel=Model.of(classDefaultTab != null ? classDefaultTab : IOClassIntrospector.DEFAULT_TAB);
  tabsPanel=new TabsPanel(""String_Node_Str"",tabModel,new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return oClassIntrospector.listTabs(getDocument().getSchemaClass());
    }
  }
){
    private static final long serialVersionUID=1L;
    @Override public void onTabClick(    AjaxRequestTarget target){
      target.add(propertiesStructureTable);
      target.add(extendedPropertiesContainer);
    }
  }
;
  add(tabsPanel);
  Form<ODocument> form=new Form<ODocument>(""String_Node_Str"",getModel());
  IModel<List<? extends OProperty>> propertiesModel=new LoadableDetachableModel<List<? extends OProperty>>(){
    @Override protected List<? extends OProperty> load(){
      return oClassIntrospector.listProperties(getDocument().getSchemaClass(),tabModel.getObject(),false);
    }
  }
;
  propertiesStructureTable=new OrienteerStructureTable<ODocument,OProperty>(""String_Node_Str"",getModel(),propertiesModel){
    @Override protected Component getValueComponent(    String id,    IModel<OProperty> rowModel){
      return new ODocumentMetaPanel<Object>(id,displayMode,getDocumentModel(),rowModel);
    }
  }
;
  form.add(propertiesStructureTable);
  add(form);
  propertiesModel=new LoadableDetachableModel<List<? extends OProperty>>(){
    @Override protected List<? extends OProperty> load(){
      return oClassIntrospector.listProperties(getDocument().getSchemaClass(),tabModel.getObject(),true);
    }
  }
;
  extendedPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  extendedPropertiesContainer.setOutputMarkupPlaceholderTag(true);
  ListView<OProperty> extendedPropertiesListView=new ListView<OProperty>(""String_Node_Str"",propertiesModel){
    @Override protected void populateItem(    ListItem<OProperty> item){
      Form<?> form=new Form<Object>(""String_Node_Str"");
      OProperty oProperty=item.getModelObject();
      String component=CustomAttributes.VISUALIZATION_TYPE.getValue(oProperty);
      form.add(OrienteerWebApplication.get().getUIVisualizersRegistry().getComponentFactory(oProperty.getType(),component).createComponent(""String_Node_Str"",DisplayMode.VIEW,getDocumentModel(),item.getModel(),new DynamicPropertyValueModel<Object>(getDocumentModel(),item.getModel())));
      item.add(form);
    }
  }
;
  extendedPropertiesContainer.add(extendedPropertiesListView);
  add(extendedPropertiesContainer);
}","@Override public void initialize(){
  super.initialize();
  tabModel=Model.of();
  tabsPanel=new TabsPanel(""String_Node_Str"",tabModel,new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return oClassIntrospector.listTabs(getDocument().getSchemaClass());
    }
  }
){
    private static final long serialVersionUID=1L;
    @Override public void onTabClick(    AjaxRequestTarget target){
      target.add(propertiesStructureTable);
      target.add(extendedPropertiesContainer);
    }
  }
;
  add(tabsPanel);
  Form<ODocument> form=new Form<ODocument>(""String_Node_Str"",getModel());
  IModel<List<? extends OProperty>> propertiesModel=new LoadableDetachableModel<List<? extends OProperty>>(){
    @Override protected List<? extends OProperty> load(){
      return oClassIntrospector.listProperties(getDocument().getSchemaClass(),tabModel.getObject(),false);
    }
  }
;
  propertiesStructureTable=new OrienteerStructureTable<ODocument,OProperty>(""String_Node_Str"",getModel(),propertiesModel){
    @Override protected Component getValueComponent(    String id,    IModel<OProperty> rowModel){
      return new ODocumentMetaPanel<Object>(id,displayMode,getDocumentModel(),rowModel);
    }
  }
;
  form.add(propertiesStructureTable);
  add(form);
  propertiesModel=new LoadableDetachableModel<List<? extends OProperty>>(){
    @Override protected List<? extends OProperty> load(){
      return oClassIntrospector.listProperties(getDocument().getSchemaClass(),tabModel.getObject(),true);
    }
  }
;
  extendedPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  extendedPropertiesContainer.setOutputMarkupPlaceholderTag(true);
  ListView<OProperty> extendedPropertiesListView=new ListView<OProperty>(""String_Node_Str"",propertiesModel){
    @Override protected void populateItem(    ListItem<OProperty> item){
      Form<?> form=new Form<Object>(""String_Node_Str"");
      OProperty oProperty=item.getModelObject();
      String component=CustomAttributes.VISUALIZATION_TYPE.getValue(oProperty);
      form.add(OrienteerWebApplication.get().getUIVisualizersRegistry().getComponentFactory(oProperty.getType(),component).createComponent(""String_Node_Str"",DisplayMode.VIEW,getDocumentModel(),item.getModel(),new DynamicPropertyValueModel<Object>(getDocumentModel(),item.getModel())));
      item.add(form);
    }
  }
;
  extendedPropertiesContainer.add(extendedPropertiesListView);
  add(extendedPropertiesContainer);
}",0.9613194580797172
117445,"@Override protected void convertInput(){
  M converted;
  List<T> storedData=getData();
  if (finalType.isInstance(storedData))   converted=(M)storedData;
 else {
    try {
      converted=(M)finalType.newInstance();
      converted.addAll(storedData);
    }
 catch (    InstantiationException e) {
      throw new WicketRuntimeException(""String_Node_Str"" + finalType.getName(),e);
    }
catch (    IllegalAccessException e) {
      throw new WicketRuntimeException(""String_Node_Str"" + finalType.getName(),e);
    }
  }
  setConvertedInput(converted);
}","@Override protected void convertInput(){
  M converted;
  List<T> storedData=getData();
  visitFormComponentsPostOrder(this,new IVisitor<FormComponent<Object>,Void>(){
    @Override public void component(    FormComponent<Object> object,    IVisit<Void> visit){
      if (!(EmbeddedCollectionEditPanel.this.equals(object))) {
        object.updateModel();
        visit.dontGoDeeper();
      }
    }
  }
);
  if (finalType.isInstance(storedData))   converted=(M)storedData;
 else {
    try {
      converted=(M)finalType.newInstance();
      converted.addAll(storedData);
    }
 catch (    InstantiationException e) {
      throw new WicketRuntimeException(""String_Node_Str"" + finalType.getName(),e);
    }
catch (    IllegalAccessException e) {
      throw new WicketRuntimeException(""String_Node_Str"" + finalType.getName(),e);
    }
  }
  setConvertedInput(converted);
}",0.776140350877193
117446,"public EmbeddedCollectionEditPanel(String id,final IModel<ODocument> documentModel,final IModel<OProperty> propertyModel,Class<?> finalType){
  super(id,new DynamicPropertyValueModel<M>(documentModel,propertyModel));
  setOutputMarkupId(true);
  this.finalType=finalType;
  final DefaultVisualizer visualizer=DefaultVisualizer.INSTANCE;
  final OType oType=propertyModel.getObject().getLinkedType();
  ListView<T> listView=new ListView<T>(""String_Node_Str"",new PropertyModel<List<T>>(this,""String_Node_Str"")){
    @Override protected void populateItem(    final ListItem<T> item){
      item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,item.getModel()));
      item.add(new AjaxFormCommand<Object>(""String_Node_Str"",""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          getData().remove(item.getIndex());
          target.add(EmbeddedCollectionEditPanel.this);
        }
      }
.setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
    }
    @Override protected ListItem<T> newItem(    int index,    IModel<T> itemModel){
      return new ListItem<T>(index,itemModel){
        @Override public IMarkupFragment getMarkup(        Component child){
          if (child == null || !child.getId().equals(""String_Node_Str""))           return super.getMarkup(child);
          IMarkupFragment ret=markupProvider.provideMarkup(child);
          return ret != null ? ret : super.getMarkup(child);
        }
      }
;
    }
  }
;
  add(listView);
  add(new AjaxFormCommand(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().add(null);
      target.add(EmbeddedCollectionEditPanel.this);
    }
  }
.setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.PRIMARY).setIcon((String)null));
}","public EmbeddedCollectionEditPanel(String id,final IModel<ODocument> documentModel,final IModel<OProperty> propertyModel,Class<?> finalType){
  super(id,new DynamicPropertyValueModel<M>(documentModel,propertyModel));
  setOutputMarkupId(true);
  this.finalType=finalType;
  final DefaultVisualizer visualizer=DefaultVisualizer.INSTANCE;
  final OType oType=propertyModel.getObject().getLinkedType();
  ListView<T> listView=new ListView<T>(""String_Node_Str"",new PropertyModel<List<T>>(this,""String_Node_Str"")){
    @Override protected void populateItem(    final ListItem<T> item){
      item.add(visualizer.createComponent(""String_Node_Str"",DisplayMode.EDIT,documentModel,propertyModel,oType,item.getModel()));
      item.add(new AjaxFormCommand<Object>(""String_Node_Str"",""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          getData().remove(item.getIndex());
          target.add(EmbeddedCollectionEditPanel.this);
        }
      }
.setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.DANGER).setIcon((String)null));
    }
    @Override protected ListItem<T> newItem(    int index,    IModel<T> itemModel){
      return new ListItem<T>(index,itemModel){
        @Override public IMarkupFragment getMarkup(        Component child){
          if (child == null || !child.getId().equals(""String_Node_Str""))           return super.getMarkup(child);
          IMarkupFragment ret=markupProvider.provideMarkup(child);
          return ret != null ? ret : super.getMarkup(child);
        }
      }
;
    }
  }
;
  listView.setReuseItems(true);
  add(listView);
  add(new AjaxFormCommand(""String_Node_Str"",""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      getData().add(null);
      target.add(EmbeddedCollectionEditPanel.this);
    }
  }
.setBootstrapSize(BootstrapSize.EXTRA_SMALL).setBootstrapType(BootstrapType.PRIMARY).setIcon((String)null));
}",0.9917568263781557
117447,"public LinksCollectionEditPanel(String id,final IModel<ODocument> documentModel,OProperty property){
  super(id,new DynamicPropertyValueModel<M>(documentModel,new OPropertyModel(property)));
  OQueryDataProvider<ODocument> provider=oClassIntrospector.prepareDataProviderForProperty(property,documentModel);
  final String propertyName=property.getName();
  List<IColumn<ODocument,String>> columns=new ArrayList<IColumn<ODocument,String>>();
  columns.add(new OEntityColumn(property.getLinkedClass(),DisplayMode.VIEW.asModel()));
  columns.add(new AbstractColumn<ODocument,String>(null){
    @Override public void populateItem(    Item<ICellPopulator<ODocument>> cellItem,    String componentId,    final IModel<ODocument> rowModel){
      cellItem.add(new AjaxFormCommand<Object>(componentId,new ResourceModel(""String_Node_Str"")){
{
          setBootstrapType(BootstrapType.WARNING);
          setBootstrapSize(BootstrapSize.EXTRA_SMALL);
        }
        @Override public void onClick(        AjaxRequestTarget target){
          ODocument doc=documentModel.getObject();
          Collection<ODocument> values=doc.field(propertyName);
          if (values != null) {
            values.remove(rowModel.getObject());
          }
          doc.save();
          send(LinksCollectionEditPanel.this,Broadcast.BUBBLE,target);
        }
      }
);
    }
  }
);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",columns,provider,10);
  table.getHeadersToolbar().setVisibilityAllowed(false);
  table.getNoRecordsToolbar().setVisibilityAllowed(false);
  table.addCommand(new SelectODocumentCommand(table,documentModel,new OPropertyModel(property)).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setIcon((String)null));
  add(table);
}","public LinksCollectionEditPanel(String id,final IModel<ODocument> documentModel,OProperty property){
  super(id,new DynamicPropertyValueModel<M>(documentModel,new OPropertyModel(property)));
  ISortableDataProvider<ODocument,String> provider=oClassIntrospector.prepareDataProviderForProperty(property,documentModel);
  final String propertyName=property.getName();
  List<IColumn<ODocument,String>> columns=new ArrayList<IColumn<ODocument,String>>();
  columns.add(new OEntityColumn(property.getLinkedClass(),DisplayMode.VIEW.asModel()));
  columns.add(new AbstractColumn<ODocument,String>(null){
    @Override public void populateItem(    Item<ICellPopulator<ODocument>> cellItem,    String componentId,    final IModel<ODocument> rowModel){
      cellItem.add(new AjaxFormCommand<Object>(componentId,new ResourceModel(""String_Node_Str"")){
{
          setBootstrapType(BootstrapType.WARNING);
          setBootstrapSize(BootstrapSize.EXTRA_SMALL);
        }
        @Override public void onClick(        AjaxRequestTarget target){
          ODocument doc=documentModel.getObject();
          Collection<ODocument> values=doc.field(propertyName);
          if (values != null) {
            values.remove(rowModel.getObject());
          }
          doc.save();
          send(LinksCollectionEditPanel.this,Broadcast.BUBBLE,target);
        }
      }
);
    }
  }
);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",columns,provider,10);
  table.getHeadersToolbar().setVisibilityAllowed(false);
  table.getNoRecordsToolbar().setVisibilityAllowed(false);
  table.addCommand(new SelectODocumentCommand(table,documentModel,new OPropertyModel(property)).setBootstrapSize(BootstrapSize.EXTRA_SMALL).setIcon((String)null));
  add(table);
}",0.9938306225462704
117448,"public LinksCollectionViewPanel(String id,IModel<ODocument> documentModel,OProperty property){
  super(id,new DynamicPropertyValueModel<M>(documentModel,new OPropertyModel(property)));
  OQueryDataProvider<ODocument> provider=oClassIntrospector.prepareDataProviderForProperty(property,documentModel);
  List<IColumn<ODocument,String>> columns=new ArrayList<IColumn<ODocument,String>>();
  columns.add(new OEntityColumn(property.getLinkedClass(),DisplayMode.VIEW.asModel()));
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",columns,provider,10);
  table.getHeadersToolbar().setVisibilityAllowed(false);
  table.getNoRecordsToolbar().setVisibilityAllowed(false);
  add(table);
}","public LinksCollectionViewPanel(String id,IModel<ODocument> documentModel,OProperty property){
  super(id,new DynamicPropertyValueModel<M>(documentModel,new OPropertyModel(property)));
  ISortableDataProvider<ODocument,String> provider=oClassIntrospector.prepareDataProviderForProperty(property,documentModel);
  List<IColumn<ODocument,String>> columns=new ArrayList<IColumn<ODocument,String>>();
  columns.add(new OEntityColumn(property.getLinkedClass(),DisplayMode.VIEW.asModel()));
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",columns,provider,10);
  table.getHeadersToolbar().setVisibilityAllowed(false);
  table.getNoRecordsToolbar().setVisibilityAllowed(false);
  add(table);
}",0.9850746268656716
117449,"public LinksPropertyDataTablePanel(String id,IModel<ODocument> documentModel,OProperty property){
  super(id,documentModel);
  OClass linkedClass=property.getLinkedClass();
  boolean isCalculable=CustomAttributes.CALCULABLE.getValue(property,false);
  IModel<DisplayMode> modeModel=DisplayMode.VIEW.asModel();
  OQueryDataProvider<ODocument> provider=oClassIntrospector.prepareDataProviderForProperty(property,documentModel);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",oClassIntrospector.getColumnsFor(linkedClass,true,modeModel),provider,20);
  table.setCaptionModel(new OPropertyNamingModel(property));
  SecurityBehavior securityBehaviour=new SecurityBehavior(documentModel,OrientPermission.UPDATE);
  if (!isCalculable) {
    OPropertyModel propertyModel=new OPropertyModel(property);
    table.addCommand(new CreateODocumentCommand(table,documentModel,propertyModel).add(securityBehaviour));
    table.addCommand(new EditODocumentsCommand(table,modeModel,linkedClass).add(securityBehaviour));
    table.addCommand(new SaveODocumentsCommand(table,modeModel).add(securityBehaviour));
    table.addCommand(new DeleteODocumentCommand(table,linkedClass).add(securityBehaviour));
    table.addCommand(new SelectODocumentCommand(table,documentModel,propertyModel).add(securityBehaviour));
    table.addCommand(new ReleaseODocumentCommand(table,documentModel,propertyModel).add(securityBehaviour));
  }
 else {
    table.addCommand(new EditODocumentsCommand(table,modeModel,linkedClass).add(securityBehaviour));
    table.addCommand(new SaveODocumentsCommand(table,modeModel).add(securityBehaviour));
  }
  add(table);
}","public LinksPropertyDataTablePanel(String id,IModel<ODocument> documentModel,OProperty property){
  super(id,documentModel);
  OClass linkedClass=property.getLinkedClass();
  boolean isCalculable=CustomAttributes.CALCULABLE.getValue(property,false);
  IModel<DisplayMode> modeModel=DisplayMode.VIEW.asModel();
  ISortableDataProvider<ODocument,String> provider=oClassIntrospector.prepareDataProviderForProperty(property,documentModel);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",oClassIntrospector.getColumnsFor(linkedClass,true,modeModel),provider,20);
  table.setCaptionModel(new OPropertyNamingModel(property));
  SecurityBehavior securityBehaviour=new SecurityBehavior(documentModel,OrientPermission.UPDATE);
  if (!isCalculable) {
    OPropertyModel propertyModel=new OPropertyModel(property);
    table.addCommand(new CreateODocumentCommand(table,documentModel,propertyModel).add(securityBehaviour));
    table.addCommand(new EditODocumentsCommand(table,modeModel,linkedClass).add(securityBehaviour));
    table.addCommand(new SaveODocumentsCommand(table,modeModel).add(securityBehaviour));
    table.addCommand(new DeleteODocumentCommand(table,linkedClass).add(securityBehaviour));
    table.addCommand(new SelectODocumentCommand(table,documentModel,propertyModel).add(securityBehaviour));
    table.addCommand(new ReleaseODocumentCommand(table,documentModel,propertyModel).add(securityBehaviour));
  }
 else {
    table.addCommand(new EditODocumentsCommand(table,modeModel,linkedClass).add(securityBehaviour));
    table.addCommand(new SaveODocumentsCommand(table,modeModel).add(securityBehaviour));
  }
  add(table);
}",0.9934640522875816
117450,"public OQueryDataProvider<ODocument> prepareDataProviderForProperty(OProperty property,IModel<ODocument> documentModel);","public ISortableDataProvider<ODocument,String> prepareDataProviderForProperty(OProperty property,IModel<ODocument> documentModel);",0.92
117451,"@Override public OQueryDataProvider<ODocument> prepareDataProviderForProperty(OProperty property,IModel<ODocument> documentModel){
  String sql;
  if (CustomAttributes.CALCULABLE.getValue(property,false)) {
    sql=CustomAttributes.CALC_SCRIPT.getValue(property);
    sql=sql.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    sql=""String_Node_Str"" + property.getName() + ""String_Node_Str""+ property.getOwnerClass().getName()+ ""String_Node_Str"";
  }
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<ODocument>(sql);
  provider.setParameter(""String_Node_Str"",documentModel);
  return provider;
}","@Override public ISortableDataProvider<ODocument,String> prepareDataProviderForProperty(OProperty property,IModel<ODocument> documentModel){
  if (CustomAttributes.CALCULABLE.getValue(property,false)) {
    String sql=CustomAttributes.CALC_SCRIPT.getValue(property);
    sql=sql.replace(""String_Node_Str"",""String_Node_Str"");
    OQueryDataProvider<ODocument> provider=new OQueryDataProvider<ODocument>(sql);
    provider.setParameter(""String_Node_Str"",documentModel);
    return provider;
  }
 else {
    return new ODocumentLinksDataProvider(documentModel,property);
  }
}",0.6521374685666387
117452,"public LoginPage(){
  super();
  add(new SignInPanel(""String_Node_Str"",false));
}","public LoginPage(){
  super();
  SignInPanel signInPanel=new SignInPanel(""String_Node_Str"",true);
  signInPanel.setRememberMe(false);
  add(signInPanel);
}",0.6610169491525424
117453,"public LogoutPage(){
  OrientDbWebSession session=OrientDbWebSession.get();
  if (session.isSignedIn()) {
    session.signOut();
  }
  setResponsePage(OrienteerWebApplication.get().getHomePage());
}","public LogoutPage(){
  OrientDbWebSession.get().invalidate();
  setResponsePage(OrienteerWebApplication.get().getHomePage());
}",0.7384615384615385
117454,"@Override public void onRecordAfterUpdate(ODocument doc){
  if (enter()) {
    try {
      OClass thisOClass=doc.getSchemaClass();
      if (thisOClass == null)       return;
      Collection<OProperty> refProperties=getCache().get(thisOClass);
      if (refProperties != null && refProperties.size() > 0) {
        String[] changedFields=doc.getDirtyFields();
        for (        String field : changedFields) {
          OProperty changedProperty=thisOClass.getProperty(field);
          if (refProperties.contains(changedProperty)) {
            OProperty inverseProperty=CustomAttributes.PROP_INVERSE.getValue(changedProperty);
            if (changedProperty.getType().isMultiValue()) {
              OMultiValueChangeTimeLine<Object,Object> timeline=doc.getCollectionTimeLine(field);
              List<OMultiValueChangeEvent<Object,Object>> events=timeline.getMultiValueChangeEvents();
              for (              OMultiValueChangeEvent<Object,Object> event : events) {
                OIdentifiable toAddTo=null;
                OIdentifiable toRemoveFrom=null;
switch (event.getChangeType()) {
case ADD:
                  toAddTo=(OIdentifiable)event.getValue();
                break;
case UPDATE:
              toAddTo=(OIdentifiable)event.getValue();
            toRemoveFrom=(OIdentifiable)event.getOldValue();
          break;
case REMOVE:
        toRemoveFrom=(OIdentifiable)event.getOldValue();
      break;
  }
  if (toAddTo != null)   addLink((ODocument)toAddTo.getRecord(),inverseProperty,doc);
  if (toRemoveFrom != null)   removeLink((ODocument)toRemoveFrom.getRecord(),inverseProperty,doc);
}
}
 else {
Object original=doc.getOriginalValue(field);
Object current=doc.field(field);
if (original != null && original instanceof OIdentifiable) removeLink((ODocument)((OIdentifiable)original).getRecord(),inverseProperty,doc);
if (current != null && current instanceof OIdentifiable) addLink((ODocument)((OIdentifiable)current).getRecord(),inverseProperty,doc);
}
}
}
}
}
 catch (ExecutionException e) {
LOG.error(""String_Node_Str"",e);
}
 finally {
exit();
}
}
}","@Override public void onRecordAfterUpdate(ODocument doc){
  if (enter()) {
    try {
      OClass thisOClass=doc.getSchemaClass();
      if (thisOClass == null)       return;
      Collection<OProperty> refProperties=getCache().get(thisOClass);
      if (refProperties != null && refProperties.size() > 0) {
        String[] changedFields=doc.getDirtyFields();
        for (        String field : changedFields) {
          OProperty changedProperty=thisOClass.getProperty(field);
          if (refProperties.contains(changedProperty)) {
            OProperty inverseProperty=CustomAttributes.PROP_INVERSE.getValue(changedProperty);
            if (changedProperty.getType().isMultiValue()) {
              OMultiValueChangeTimeLine<Object,Object> timeline=doc.getCollectionTimeLine(field);
              if (timeline != null) {
                List<OMultiValueChangeEvent<Object,Object>> events=timeline.getMultiValueChangeEvents();
                for (                OMultiValueChangeEvent<Object,Object> event : events) {
                  OIdentifiable toAddTo=null;
                  OIdentifiable toRemoveFrom=null;
switch (event.getChangeType()) {
case ADD:
                    toAddTo=(OIdentifiable)event.getValue();
                  break;
case UPDATE:
                toAddTo=(OIdentifiable)event.getValue();
              toRemoveFrom=(OIdentifiable)event.getOldValue();
            break;
case REMOVE:
          toRemoveFrom=(OIdentifiable)event.getOldValue();
        break;
    }
    if (toAddTo != null)     addLink((ODocument)toAddTo.getRecord(),inverseProperty,doc);
    if (toRemoveFrom != null)     removeLink((ODocument)toRemoveFrom.getRecord(),inverseProperty,doc);
  }
}
 else {
  Object original=doc.getOriginalValue(field);
  Object current=doc.field(field);
  if (original != null && original instanceof Iterable) {
    for (    Object originaIdentifiable : (Iterable<?>)original) {
      if (originaIdentifiable != null && originaIdentifiable instanceof OIdentifiable)       removeLink((ODocument)((OIdentifiable)originaIdentifiable).getRecord(),inverseProperty,doc);
    }
  }
  if (current != null && current instanceof Iterable) {
    for (    Object currentIdentifiable : (Iterable<?>)current) {
      if (currentIdentifiable != null && currentIdentifiable instanceof OIdentifiable)       addLink((ODocument)((OIdentifiable)currentIdentifiable).getRecord(),inverseProperty,doc);
    }
  }
}
}
 else {
Object original=doc.getOriginalValue(field);
Object current=doc.field(field);
if (original != null && original instanceof OIdentifiable) removeLink((ODocument)((OIdentifiable)original).getRecord(),inverseProperty,doc);
if (current != null && current instanceof OIdentifiable) addLink((ODocument)((OIdentifiable)current).getRecord(),inverseProperty,doc);
}
}
}
}
}
 catch (ExecutionException e) {
LOG.error(""String_Node_Str"",e);
}
 finally {
exit();
}
}
}",0.8254925613188581
117455,"@Test public void testReferencesHook() throws Exception {
  assertTrue(OrientDbWebSession.get().signIn(""String_Node_Str"",""String_Node_Str""));
  ODatabaseDocument db=OrientDbWebSession.get().getDatabase();
  OSchema schema=db.getMetadata().getSchema();
  assertFalse(db.isClosed());
  db.commit();
  if (schema.existsClass(TEST_CLASS_A))   schema.dropClass(TEST_CLASS_A);
  OClass classA=schema.createClass(TEST_CLASS_A);
  try {
    OProperty parent=classA.createProperty(""String_Node_Str"",OType.LINK);
    OProperty child=classA.createProperty(""String_Node_Str"",OType.LINKLIST);
    CustomAttributes.PROP_INVERSE.setValue(parent,child);
    CustomAttributes.PROP_INVERSE.setValue(child,parent);
    ODocument rootDoc=new ODocument(classA);
    rootDoc.save();
    ODocument child1Doc=new ODocument(classA);
    child1Doc.field(""String_Node_Str"",rootDoc);
    child1Doc.save();
    rootDoc.reload();
    Collection<OIdentifiable> childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(1,childCollection.size());
    assertTrue(childCollection.contains(child1Doc));
    ODocument child2Doc=new ODocument(classA);
    child2Doc.field(""String_Node_Str"",rootDoc);
    child2Doc.save();
    rootDoc.reload();
    childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(2,childCollection.size());
    assertTrue(childCollection.contains(child1Doc));
    assertTrue(childCollection.contains(child2Doc));
    child1Doc.reload();
    child1Doc.delete();
    rootDoc.reload();
    childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(1,childCollection.size());
    assertTrue(childCollection.contains(child2Doc));
    ODocument child3Doc=new ODocument(classA);
    child3Doc.save();
    childCollection.add(child3Doc);
    rootDoc.field(""String_Node_Str"",childCollection);
    rootDoc.save();
    rootDoc.reload();
    childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(2,childCollection.size());
    assertTrue(childCollection.contains(child2Doc));
    assertTrue(childCollection.contains(child3Doc));
    child3Doc.reload();
    assertNotNull(""String_Node_Str"",child3Doc.field(""String_Node_Str""));
    OIdentifiable rootId=child3Doc.field(""String_Node_Str"");
    assertEquals(rootDoc,rootId.getRecord());
    child2Doc.field(""String_Node_Str"",(Object)null);
    child2Doc.save();
    rootDoc.reload();
    childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(1,childCollection.size());
    assertTrue(childCollection.contains(child3Doc));
    childCollection.clear();
    rootDoc.field(""String_Node_Str"",childCollection);
    rootDoc.save();
    child3Doc.reload();
    assertNull(child3Doc.field(""String_Node_Str""));
  }
  finally {
    schema.dropClass(TEST_CLASS_A);
    OrientDbWebSession.get().signOut();
  }
}","@Test public void testReferencesHook() throws Exception {
  assertTrue(OrientDbWebSession.get().signIn(""String_Node_Str"",""String_Node_Str""));
  ODatabaseDocument db=OrientDbWebSession.get().getDatabase();
  OSchema schema=db.getMetadata().getSchema();
  assertFalse(db.isClosed());
  db.commit();
  if (schema.existsClass(TEST_CLASS_A))   schema.dropClass(TEST_CLASS_A);
  OClass classA=schema.createClass(TEST_CLASS_A);
  try {
    OProperty parent=classA.createProperty(""String_Node_Str"",OType.LINK);
    OProperty child=classA.createProperty(""String_Node_Str"",OType.LINKLIST);
    CustomAttributes.PROP_INVERSE.setValue(parent,child);
    CustomAttributes.PROP_INVERSE.setValue(child,parent);
    ODocument rootDoc=new ODocument(classA);
    rootDoc.save();
    ODocument child1Doc=new ODocument(classA);
    child1Doc.field(""String_Node_Str"",rootDoc);
    child1Doc.save();
    rootDoc.reload();
    Collection<OIdentifiable> childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(1,childCollection.size());
    assertTrue(childCollection.contains(child1Doc));
    ODocument child2Doc=new ODocument(classA);
    child2Doc.field(""String_Node_Str"",rootDoc);
    child2Doc.save();
    rootDoc.reload();
    childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(2,childCollection.size());
    assertTrue(childCollection.contains(child1Doc));
    assertTrue(childCollection.contains(child2Doc));
    child1Doc.reload();
    child1Doc.delete();
    rootDoc.reload();
    childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(1,childCollection.size());
    assertTrue(childCollection.contains(child2Doc));
    ODocument child3Doc=new ODocument(classA);
    child3Doc.save();
    childCollection.add(child3Doc);
    rootDoc.field(""String_Node_Str"",childCollection);
    rootDoc.save();
    rootDoc.reload();
    childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(2,childCollection.size());
    assertTrue(childCollection.contains(child2Doc));
    assertTrue(childCollection.contains(child3Doc));
    child3Doc.reload();
    assertNotNull(""String_Node_Str"",child3Doc.field(""String_Node_Str""));
    OIdentifiable rootId=child3Doc.field(""String_Node_Str"");
    assertEquals(rootDoc,rootId.getRecord());
    child2Doc.field(""String_Node_Str"",(Object)null);
    child2Doc.save();
    rootDoc.reload();
    childCollection=rootDoc.field(""String_Node_Str"");
    assertEquals(1,childCollection.size());
    assertTrue(childCollection.contains(child3Doc));
    childCollection.clear();
    rootDoc.field(""String_Node_Str"",childCollection);
    rootDoc.save();
    child3Doc.reload();
    assertNull(child3Doc.field(""String_Node_Str""));
    ODocument root2Doc=new ODocument(classA);
    root2Doc.save();
    ODocument childTestForNull=new ODocument(classA);
    childTestForNull.save();
    assertNull(root2Doc.field(""String_Node_Str""));
    root2Doc.field(""String_Node_Str"",Arrays.asList(childTestForNull));
    root2Doc.save();
    childTestForNull.reload();
    childCollection=root2Doc.field(""String_Node_Str"");
    assertEquals(1,childCollection.size());
    assertTrue(childCollection.contains(childTestForNull));
    assertEquals(root2Doc,childTestForNull.field(""String_Node_Str""));
  }
  finally {
    schema.dropClass(TEST_CLASS_A);
    OrientDbWebSession.get().signOut();
  }
}",0.9093591214554992
117456,"@Override public void onClick(){
  setResponsePage(new OPropertyPage(new OPropertyModel(OPropertyPrototyper.newPrototype(classModel.getObject().getName()))).setDisplayMode(DisplayMode.EDIT));
}","@Override public void onClick(){
  OClass oClass=classModel.getObject();
  OProperty newProperty=OPropertyPrototyper.newPrototype(oClass.getName());
  CustomAttributes.ORDER.setValue(newProperty,findMaxOrder(oClass) + 10);
  setResponsePage(new OPropertyPage(new OPropertyModel(newProperty)).setDisplayMode(DisplayMode.EDIT));
}",0.4107485604606526
117457,"public OClassMetaColumn(String sortProperty,IModel<String> criteryModel){
  super(sortProperty,criteryModel);
}","public OClassMetaColumn(String sortParam,String critery){
  super(sortParam,Model.of(critery));
}",0.7884615384615384
117458,"public OIndexMetaColumn(String sortProperty,IModel<String> criteryModel){
  super(sortProperty,criteryModel);
}","public OIndexMetaColumn(String sortParam,String critery){
  super(sortParam,Model.of(critery));
}",0.7884615384615384
117459,"public OPropertyMetaColumn(String sortProperty,IModel<String> criteryModel){
  super(sortProperty,criteryModel);
}","public OPropertyMetaColumn(String sortParam,String critery){
  super(sortParam,Model.of(critery));
}",0.794392523364486
117460,"public OrienteerDataTable(String id,List<? extends IColumn<T,S>> columns,ISortableDataProvider<T,S> dataProvider,int rowsPerPage){
  super(id,columns,dataProvider,rowsPerPage);
  addTopToolbar(commandsToolbar=new DataTableCommandsToolbar<T>(this));
  addTopToolbar(headersToolbar=new HeadersToolbar<S>(this,dataProvider));
  addBottomToolbar(new NavigationToolbar(this));
  addBottomToolbar(noRecordsToolbar=new NoRecordsToolbar(this));
  setOutputMarkupPlaceholderTag(true);
}","public OrienteerDataTable(String id,List<? extends IColumn<T,S>> columns,ISortableDataProvider<T,S> dataProvider,int rowsPerPage){
  super(id,columns,dataProvider,rowsPerPage);
  addTopToolbar(commandsToolbar=new DataTableCommandsToolbar<T>(this));
  addTopToolbar(headersToolbar=new AjaxFallbackHeadersToolbar<S>(this,dataProvider));
  addBottomToolbar(navigationToolbar=new AjaxNavigationToolbar(this));
  addBottomToolbar(noRecordsToolbar=new NoRecordsToolbar(this));
  setOutputMarkupPlaceholderTag(true);
}",0.9655870445344128
117461,"@Override public void initialize(){
  super.initialize();
  Form<?> form=new Form<Object>(""String_Node_Str"");
  List<IColumn<OClass,String>> columns=new ArrayList<IColumn<OClass,String>>();
  columns.add(new CheckBoxColumn<OClass,String,String>(null,OClassClassNameConverter.INSTANCE));
  columns.add(new OClassColumn<OClass>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new OClassMetaColumn(OClassPrototyper.SUPER_CLASS + ""String_Node_Str"",OClassPrototyper.SUPER_CLASS));
  columns.add(new OClassMetaColumn(OClassPrototyper.ABSTRACT,OClassPrototyper.ABSTRACT));
  columns.add(new OClassMetaColumn(OClassPrototyper.STRICT_MODE,OClassPrototyper.STRICT_MODE));
  columns.add(new PropertyColumn<OClass,String>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn<OClass,String>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<OClass,String>(new ResourceModel(""String_Node_Str"")){
    /** 
 */
    private static final long serialVersionUID=1L;
    @Override public void populateItem(    Item<ICellPopulator<OClass>> cellItem,    String componentId,    final IModel<OClass> rowModel){
      cellItem.add(new Command<OClass>(componentId,""String_Node_Str""){
        /** 
 */
        private static final long serialVersionUID=1L;
        @Override protected AbstractLink newLink(        String id){
          return new OClassPageLink(id,rowModel,BrowseClassPage.class,DisplayMode.VIEW.asModel());
        }
        @Override public void onClick(){
        }
      }
.setIcon(FAIconType.angle_double_down).setBootstrapType(BootstrapType.INFO));
    }
  }
);
  OClassesDataProvider provider=new OClassesDataProvider();
  provider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  OrienteerDataTable<OClass,String> table=new OrienteerDataTable<OClass,String>(""String_Node_Str"",columns,provider,20);
  table.addCommand(new CreateOClassCommand(table));
  table.addCommand(new DeleteOClassCommand(table));
  table.addCommand(new ReloadOMetadataCommand(table));
  table.addCommand(new ExportOSchemaCommand(table));
  table.addCommand(new ImportOSchemaCommand(table));
  table.addCommand(new ViewUMLCommand(table));
  form.add(table);
  add(form);
}","@Override public void initialize(){
  super.initialize();
  Form<?> form=new Form<Object>(""String_Node_Str"");
  List<IColumn<OClass,String>> columns=new ArrayList<IColumn<OClass,String>>();
  columns.add(new CheckBoxColumn<OClass,String,String>(null,OClassClassNameConverter.INSTANCE));
  columns.add(new OClassColumn<OClass>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new OClassMetaColumn(OClassPrototyper.SUPER_CLASS));
  columns.add(new OClassMetaColumn(OClassPrototyper.ABSTRACT));
  columns.add(new OClassMetaColumn(OClassPrototyper.STRICT_MODE));
  columns.add(new PropertyColumn<OClass,String>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<OClass,String>(new ResourceModel(""String_Node_Str"")){
    /** 
 */
    private static final long serialVersionUID=1L;
    @Override public void populateItem(    Item<ICellPopulator<OClass>> cellItem,    String componentId,    final IModel<OClass> rowModel){
      cellItem.add(new Command<OClass>(componentId,""String_Node_Str""){
        /** 
 */
        private static final long serialVersionUID=1L;
        @Override protected AbstractLink newLink(        String id){
          return new OClassPageLink(id,rowModel,BrowseClassPage.class,DisplayMode.VIEW.asModel());
        }
        @Override public void onClick(){
        }
      }
.setIcon(FAIconType.angle_double_down).setBootstrapType(BootstrapType.INFO));
    }
  }
);
  OClassesDataProvider provider=new OClassesDataProvider();
  provider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  OrienteerDataTable<OClass,String> table=new OrienteerDataTable<OClass,String>(""String_Node_Str"",columns,provider,20);
  table.addCommand(new CreateOClassCommand(table));
  table.addCommand(new DeleteOClassCommand(table));
  table.addCommand(new ReloadOMetadataCommand(table));
  table.addCommand(new ExportOSchemaCommand(table));
  table.addCommand(new ImportOSchemaCommand(table));
  table.addCommand(new ViewUMLCommand(table));
  form.add(table);
  add(form);
}",0.9478021978021978
117462,"@Override protected void onInitialize(){
  super.onInitialize();
  Form<OClass> form=new Form<OClass>(""String_Node_Str"");
  structureTable=new OrienteerStructureTable<OClass,String>(""String_Node_Str"",getModel(),OClassMetaPanel.OCLASS_ATTRS){
    @Override protected Component getValueComponent(    String id,    final IModel<String> rowModel){
      return new OClassMetaPanel<Object>(id,modeModel,OClassPage.this.getModel(),rowModel);
    }
    @Override public void onAjaxUpdate(    AjaxRequestTarget target){
      OClassPage.this.onConfigure();
      target.add(pTable,iTable,sTable);
    }
  }
;
  structureTable.addCommand(new EditSchemaCommand<OClass>(structureTable,modeModel));
  structureTable.addCommand(new SaveSchemaCommand<OClass>(structureTable,modeModel,getModel()));
  form.add(structureTable);
  List<IColumn<OProperty,String>> pColumns=new ArrayList<IColumn<OProperty,String>>();
  pColumns.add(new CheckBoxColumn<OProperty,String,String>(null,OPropertyFullNameConverter.INSTANCE));
  pColumns.add(new OPropertyDefinitionColumn<OProperty>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.TYPE));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.LINKED_TYPE));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.LINKED_CLASS));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.NOT_NULL));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MANDATORY));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.READONLY));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.DISPLAYABLE.getName()));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.CALCULABLE.getName()));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MIN));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MAX));
  OPropertiesDataProvider pProvider=new OPropertiesDataProvider(getModel(),showParentPropertiesModel);
  pProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  pTable=new OrienteerDataTable<OProperty,String>(""String_Node_Str"",pColumns,pProvider,20);
  pTable.addCommand(new CreateOPropertyCommand(pTable,getModel()));
  pTable.addCommand(new ShowHideParentsCommand<OProperty>(getModel(),pTable,showParentPropertiesModel));
  pTable.addCommand(new DeleteOPropertyCommand(pTable));
  pTable.addCommand(new CreateOIndexFromOPropertiesCommand(pTable,getModel()));
  pTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  form.add(pTable);
  List<IColumn<OIndex<?>,String>> iColumns=new ArrayList<IColumn<OIndex<?>,String>>();
  iColumns.add(new CheckBoxColumn<OIndex<?>,String,String>(null,OIndexNameConverter.INSTANCE));
  iColumns.add(new OIndexDefinitionColumn<OIndex<?>>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.TYPE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_FIELDS));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_COLLATE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_NULLS_IGNORED));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.SIZE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.KEY_SIZE));
  OIndexiesDataProvider iProvider=new OIndexiesDataProvider(getModel(),showParentIndexesModel);
  iProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  iTable=new OrienteerDataTable<OIndex<?>,String>(""String_Node_Str"",iColumns,iProvider,20);
  iTable.addCommand(new ShowHideParentsCommand<OIndex<?>>(getModel(),iTable,showParentIndexesModel));
  iTable.addCommand(new DeleteOIndexCommand(iTable));
  iTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  form.add(iTable);
  add(form);
  Form<OClass> sForm=new Form<OClass>(""String_Node_Str"");
  List<IColumn<ORole,String>> sColumns=new ArrayList<IColumn<ORole,String>>();
  sColumns.add(new OEntityColumn<ORole>(""String_Node_Str"",""String_Node_Str""));
  sColumns.add(new SecurityRightsColumn(OrientPermission.CREATE));
  sColumns.add(new SecurityRightsColumn(OrientPermission.READ));
  sColumns.add(new SecurityRightsColumn(OrientPermission.UPDATE));
  sColumns.add(new SecurityRightsColumn(OrientPermission.DELETE));
  OQueryDataProvider<ORole> sProvider=new OQueryDataProvider<ORole>(""String_Node_Str"",ORole.class);
  sProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  sTable=new OrienteerDataTable<ORole,String>(""String_Node_Str"",sColumns,sProvider,20);
  Command<ORole> saveCommand=new AbstractSaveCommand<ORole>(sTable,null);
  OSecurityHelper.secureComponent(saveCommand,OSecurityHelper.requireOClass(""String_Node_Str"",OrientPermission.UPDATE));
  sTable.addCommand(saveCommand);
  sTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  sForm.add(sTable);
  add(sForm);
}","@Override protected void onInitialize(){
  super.onInitialize();
  Form<OClass> form=new Form<OClass>(""String_Node_Str"");
  structureTable=new OrienteerStructureTable<OClass,String>(""String_Node_Str"",getModel(),OClassMetaPanel.OCLASS_ATTRS){
    @Override protected Component getValueComponent(    String id,    final IModel<String> rowModel){
      return new OClassMetaPanel<Object>(id,modeModel,OClassPage.this.getModel(),rowModel);
    }
    @Override public void onAjaxUpdate(    AjaxRequestTarget target){
      OClassPage.this.onConfigure();
      target.add(pTable,iTable,sTable);
    }
  }
;
  structureTable.addCommand(new EditSchemaCommand<OClass>(structureTable,modeModel));
  structureTable.addCommand(new SaveSchemaCommand<OClass>(structureTable,modeModel,getModel()));
  form.add(structureTable);
  List<IColumn<OProperty,String>> pColumns=new ArrayList<IColumn<OProperty,String>>();
  pColumns.add(new CheckBoxColumn<OProperty,String,String>(null,OPropertyFullNameConverter.INSTANCE));
  pColumns.add(new OPropertyDefinitionColumn<OProperty>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.TYPE));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.LINKED_TYPE));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.LINKED_CLASS));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.NOT_NULL));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MANDATORY));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.READONLY));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.DISPLAYABLE));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.CALCULABLE));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.ORDER));
  ExtendedOPropertiesDataProvider pProvider=new ExtendedOPropertiesDataProvider(getModel(),showParentPropertiesModel);
  pProvider.setSort(CustomAttributes.ORDER.getName(),SortOrder.ASCENDING);
  pTable=new OrienteerDataTable<OProperty,String>(""String_Node_Str"",pColumns,pProvider,20);
  pTable.addCommand(new CreateOPropertyCommand(pTable,getModel()));
  pTable.addCommand(new ShowHideParentsCommand<OProperty>(getModel(),pTable,showParentPropertiesModel));
  pTable.addCommand(new DeleteOPropertyCommand(pTable));
  pTable.addCommand(new CreateOIndexFromOPropertiesCommand(pTable,getModel()));
  pTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  form.add(pTable);
  List<IColumn<OIndex<?>,String>> iColumns=new ArrayList<IColumn<OIndex<?>,String>>();
  iColumns.add(new CheckBoxColumn<OIndex<?>,String,String>(null,OIndexNameConverter.INSTANCE));
  iColumns.add(new OIndexDefinitionColumn<OIndex<?>>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.TYPE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_FIELDS));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_COLLATE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_NULLS_IGNORED));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.SIZE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.KEY_SIZE));
  OIndexiesDataProvider iProvider=new OIndexiesDataProvider(getModel(),showParentIndexesModel);
  iProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  iTable=new OrienteerDataTable<OIndex<?>,String>(""String_Node_Str"",iColumns,iProvider,20);
  iTable.addCommand(new ShowHideParentsCommand<OIndex<?>>(getModel(),iTable,showParentIndexesModel));
  iTable.addCommand(new DeleteOIndexCommand(iTable));
  iTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  form.add(iTable);
  add(form);
  Form<OClass> sForm=new Form<OClass>(""String_Node_Str"");
  List<IColumn<ORole,String>> sColumns=new ArrayList<IColumn<ORole,String>>();
  sColumns.add(new OEntityColumn<ORole>(""String_Node_Str"",""String_Node_Str""));
  sColumns.add(new SecurityRightsColumn(OrientPermission.CREATE));
  sColumns.add(new SecurityRightsColumn(OrientPermission.READ));
  sColumns.add(new SecurityRightsColumn(OrientPermission.UPDATE));
  sColumns.add(new SecurityRightsColumn(OrientPermission.DELETE));
  OQueryDataProvider<ORole> sProvider=new OQueryDataProvider<ORole>(""String_Node_Str"",ORole.class);
  sProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  sTable=new OrienteerDataTable<ORole,String>(""String_Node_Str"",sColumns,sProvider,20);
  Command<ORole> saveCommand=new AbstractSaveCommand<ORole>(sTable,null);
  OSecurityHelper.secureComponent(saveCommand,OSecurityHelper.requireOClass(""String_Node_Str"",OrientPermission.UPDATE));
  sTable.addCommand(saveCommand);
  sTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  sForm.add(sTable);
  add(sForm);
}",0.945638432364096
117463,"public SelectDialogPanel(String id,final ModalWindow modal,IModel<OClass> oClassModel){
  super(id,Model.of(""String_Node_Str""));
  this.modal=modal;
  canChangeClass=oClassModel == null;
  this.selectedClassModel=canChangeClass ? new OClassModel(getClasses().get(0)) : oClassModel;
  Form<String> form=new Form<String>(""String_Node_Str"",getModel());
  form.add(new TextField<String>(""String_Node_Str"",getModel()));
  form.add(new AjaxButton(""String_Node_Str""){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      super.onSubmit(target,form);
      target.add(resultsContainer);
    }
  }
);
  form.add(new TabsPanel<OClass>(""String_Node_Str"",selectedClassModel,new PropertyModel<List<OClass>>(this,""String_Node_Str"")){
    @Override public void onTabClick(    AjaxRequestTarget target){
      prepareResults();
      target.add(resultsContainer);
    }
  }
.setVisible(canChangeClass));
  resultsContainer=new WebMarkupContainer(""String_Node_Str""){
{
      setOutputMarkupPlaceholderTag(true);
    }
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(!Strings.isEmpty(SelectDialogPanel.this.getModelObject()));
    }
  }
;
  prepareResults();
  form.add(resultsContainer);
  add(form);
}","public SelectDialogPanel(String id,final ModalWindow modal,OClass initialClass,boolean canChangeClass){
  super(id,Model.of(""String_Node_Str""));
  this.modal=modal;
  this.canChangeClass=canChangeClass || initialClass == null;
  this.selectedClassModel=new OClassModel(initialClass != null ? initialClass : getClasses().get(0));
  Form<String> form=new Form<String>(""String_Node_Str"",getModel());
  form.add(new TextField<String>(""String_Node_Str"",getModel()));
  form.add(new AjaxButton(""String_Node_Str""){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      super.onSubmit(target,form);
      target.add(resultsContainer);
    }
  }
);
  form.add(new TabsPanel<OClass>(""String_Node_Str"",selectedClassModel,new PropertyModel<List<OClass>>(this,""String_Node_Str"")){
    @Override public void onTabClick(    AjaxRequestTarget target){
      prepareResults();
      target.add(resultsContainer);
    }
  }
.setVisible(canChangeClass));
  resultsContainer=new WebMarkupContainer(""String_Node_Str""){
{
      setOutputMarkupPlaceholderTag(true);
    }
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(!Strings.isEmpty(SelectDialogPanel.this.getModelObject()));
    }
  }
;
  prepareResults();
  form.add(resultsContainer);
  add(form);
}",0.920388349514563
117464,"public Command(String commandId,IModel<?> labelModel){
  super(commandId);
  link=newLink(""String_Node_Str"");
  link.setOutputMarkupId(true);
  link.add(new AttributeAppender(""String_Node_Str"",new PropertyModel<String>(this,""String_Node_Str""),""String_Node_Str""));
  link.add(new AttributeAppender(""String_Node_Str"",new PropertyModel<String>(this,""String_Node_Str""),""String_Node_Str""));
  link.add(new Label(""String_Node_Str"",labelModel).setRenderBodyOnly(true));
  link.add(new FAIcon(""String_Node_Str"",new PropertyModel<String>(this,""String_Node_Str"")));
  add(link);
}","public Command(String commandId,IModel<?> labelModel){
  super(commandId);
  link=newLink(""String_Node_Str"");
  link.setOutputMarkupId(true);
  link.add(new AttributeAppender(""String_Node_Str"",new PropertyModel<String>(this,""String_Node_Str""),""String_Node_Str""));
  link.add(new AttributeAppender(""String_Node_Str"",new PropertyModel<String>(this,""String_Node_Str""),""String_Node_Str""));
  link.add(new Label(""String_Node_Str"",labelModel).setRenderBodyOnly(true));
  link.add(new FAIcon(""String_Node_Str"",new PropertyModel<String>(this,""String_Node_Str"")));
  link.add(DISABLED_LINK_BEHAVIOR);
  add(link);
}",0.9693877551020408
117465,"@Override public void onEvent(IEvent<?> event){
  if (event.getPayload() instanceof AjaxRequestTarget && Broadcast.BUBBLE.equals(event.getType())) {
    ((AjaxRequestTarget)event.getPayload()).add(this);
    event.stop();
  }
}","@Override public void onEvent(IEvent<?> event){
  if (event.getPayload() instanceof AjaxRequestTarget && Broadcast.BUBBLE.equals(event.getType())) {
    AjaxRequestTarget target=((AjaxRequestTarget)event.getPayload());
    target.add(this);
    onAjaxUpdate(target);
    event.stop();
  }
}",0.8704061895551257
117466,"@Override protected void onInitialize(){
  super.onInitialize();
  Form<OClass> form=new Form<OClass>(""String_Node_Str"");
  structureTable=new OrienteerStructureTable<OClass,String>(""String_Node_Str"",getModel(),OClassMetaPanel.OCLASS_ATTRS){
    @Override protected Component getValueComponent(    String id,    final IModel<String> rowModel){
      return new OClassMetaPanel<Object>(id,modeModel,OClassPage.this.getModel(),rowModel);
    }
  }
;
  structureTable.addCommand(new EditSchemaCommand<OClass>(structureTable,modeModel));
  structureTable.addCommand(new SaveSchemaCommand<OClass>(structureTable,modeModel,getModel()));
  form.add(structureTable);
  List<IColumn<OProperty,String>> pColumns=new ArrayList<IColumn<OProperty,String>>();
  pColumns.add(new CheckBoxColumn<OProperty,String,String>(null,OPropertyFullNameConverter.INSTANCE));
  pColumns.add(new OPropertyDefinitionColumn<OProperty>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.TYPE));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.LINKED_TYPE));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.LINKED_CLASS));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.NOT_NULL));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MANDATORY));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.READONLY));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.DISPLAYABLE.getName()));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.CALCULABLE.getName()));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MIN));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MAX));
  OPropertiesDataProvider pProvider=new OPropertiesDataProvider(getModel(),showParentPropertiesModel);
  pProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  OrienteerDataTable<OProperty,String> pTable=new OrienteerDataTable<OProperty,String>(""String_Node_Str"",pColumns,pProvider,20);
  pTable.addCommand(new CreateOPropertyCommand(pTable,getModel()));
  pTable.addCommand(new ShowHideParentsCommand<OProperty>(getModel(),pTable,showParentPropertiesModel));
  pTable.addCommand(new DeleteOPropertyCommand(pTable));
  pTable.addCommand(new CreateOIndexFromOPropertiesCommand(pTable,getModel()));
  pTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  form.add(pTable);
  List<IColumn<OIndex<?>,String>> iColumns=new ArrayList<IColumn<OIndex<?>,String>>();
  iColumns.add(new CheckBoxColumn<OIndex<?>,String,String>(null,OIndexNameConverter.INSTANCE));
  iColumns.add(new OIndexDefinitionColumn<OIndex<?>>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.TYPE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_FIELDS));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_COLLATE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_NULLS_IGNORED));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.SIZE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.KEY_SIZE));
  OIndexiesDataProvider iProvider=new OIndexiesDataProvider(getModel(),showParentIndexesModel);
  iProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  OrienteerDataTable<OIndex<?>,String> iTable=new OrienteerDataTable<OIndex<?>,String>(""String_Node_Str"",iColumns,iProvider,20);
  iTable.addCommand(new ShowHideParentsCommand<OIndex<?>>(getModel(),iTable,showParentIndexesModel));
  iTable.addCommand(new DeleteOIndexCommand(iTable));
  iTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  form.add(iTable);
  add(form);
  Form<OClass> sForm=new Form<OClass>(""String_Node_Str"");
  List<IColumn<ORole,String>> sColumns=new ArrayList<IColumn<ORole,String>>();
  sColumns.add(new OEntityColumn<ORole>(""String_Node_Str"",""String_Node_Str""));
  sColumns.add(new SecurityRightsColumn(OrientPermission.CREATE));
  sColumns.add(new SecurityRightsColumn(OrientPermission.READ));
  sColumns.add(new SecurityRightsColumn(OrientPermission.UPDATE));
  sColumns.add(new SecurityRightsColumn(OrientPermission.DELETE));
  OQueryDataProvider<ORole> sProvider=new OQueryDataProvider<ORole>(""String_Node_Str"",ORole.class);
  sProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  OrienteerDataTable<ORole,String> sTable=new OrienteerDataTable<ORole,String>(""String_Node_Str"",sColumns,sProvider,20);
  Command<ORole> saveCommand=new AbstractSaveCommand<ORole>(sTable,null);
  OSecurityHelper.secureComponent(saveCommand,OSecurityHelper.requireOClass(""String_Node_Str"",OrientPermission.UPDATE));
  sTable.addCommand(saveCommand);
  sTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  sForm.add(sTable);
  add(sForm);
}","@Override protected void onInitialize(){
  super.onInitialize();
  Form<OClass> form=new Form<OClass>(""String_Node_Str"");
  structureTable=new OrienteerStructureTable<OClass,String>(""String_Node_Str"",getModel(),OClassMetaPanel.OCLASS_ATTRS){
    @Override protected Component getValueComponent(    String id,    final IModel<String> rowModel){
      return new OClassMetaPanel<Object>(id,modeModel,OClassPage.this.getModel(),rowModel);
    }
    @Override public void onAjaxUpdate(    AjaxRequestTarget target){
      OClassPage.this.onConfigure();
      target.add(pTable,iTable,sTable);
    }
  }
;
  structureTable.addCommand(new EditSchemaCommand<OClass>(structureTable,modeModel));
  structureTable.addCommand(new SaveSchemaCommand<OClass>(structureTable,modeModel,getModel()));
  form.add(structureTable);
  List<IColumn<OProperty,String>> pColumns=new ArrayList<IColumn<OProperty,String>>();
  pColumns.add(new CheckBoxColumn<OProperty,String,String>(null,OPropertyFullNameConverter.INSTANCE));
  pColumns.add(new OPropertyDefinitionColumn<OProperty>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.TYPE));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.LINKED_TYPE));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.LINKED_CLASS));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.NOT_NULL));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MANDATORY));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.READONLY));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.DISPLAYABLE.getName()));
  pColumns.add(new OPropertyMetaColumn(CustomAttributes.CALCULABLE.getName()));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MIN));
  pColumns.add(new OPropertyMetaColumn(OPropertyPrototyper.MAX));
  OPropertiesDataProvider pProvider=new OPropertiesDataProvider(getModel(),showParentPropertiesModel);
  pProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  pTable=new OrienteerDataTable<OProperty,String>(""String_Node_Str"",pColumns,pProvider,20);
  pTable.addCommand(new CreateOPropertyCommand(pTable,getModel()));
  pTable.addCommand(new ShowHideParentsCommand<OProperty>(getModel(),pTable,showParentPropertiesModel));
  pTable.addCommand(new DeleteOPropertyCommand(pTable));
  pTable.addCommand(new CreateOIndexFromOPropertiesCommand(pTable,getModel()));
  pTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  form.add(pTable);
  List<IColumn<OIndex<?>,String>> iColumns=new ArrayList<IColumn<OIndex<?>,String>>();
  iColumns.add(new CheckBoxColumn<OIndex<?>,String,String>(null,OIndexNameConverter.INSTANCE));
  iColumns.add(new OIndexDefinitionColumn<OIndex<?>>(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.TYPE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_FIELDS));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_COLLATE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.DEF_NULLS_IGNORED));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.SIZE));
  iColumns.add(new OIndexMetaColumn(OIndexPrototyper.KEY_SIZE));
  OIndexiesDataProvider iProvider=new OIndexiesDataProvider(getModel(),showParentIndexesModel);
  iProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  iTable=new OrienteerDataTable<OIndex<?>,String>(""String_Node_Str"",iColumns,iProvider,20);
  iTable.addCommand(new ShowHideParentsCommand<OIndex<?>>(getModel(),iTable,showParentIndexesModel));
  iTable.addCommand(new DeleteOIndexCommand(iTable));
  iTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  form.add(iTable);
  add(form);
  Form<OClass> sForm=new Form<OClass>(""String_Node_Str"");
  List<IColumn<ORole,String>> sColumns=new ArrayList<IColumn<ORole,String>>();
  sColumns.add(new OEntityColumn<ORole>(""String_Node_Str"",""String_Node_Str""));
  sColumns.add(new SecurityRightsColumn(OrientPermission.CREATE));
  sColumns.add(new SecurityRightsColumn(OrientPermission.READ));
  sColumns.add(new SecurityRightsColumn(OrientPermission.UPDATE));
  sColumns.add(new SecurityRightsColumn(OrientPermission.DELETE));
  OQueryDataProvider<ORole> sProvider=new OQueryDataProvider<ORole>(""String_Node_Str"",ORole.class);
  sProvider.setSort(""String_Node_Str"",SortOrder.ASCENDING);
  sTable=new OrienteerDataTable<ORole,String>(""String_Node_Str"",sColumns,sProvider,20);
  Command<ORole> saveCommand=new AbstractSaveCommand<ORole>(sTable,null);
  OSecurityHelper.secureComponent(saveCommand,OSecurityHelper.requireOClass(""String_Node_Str"",OrientPermission.UPDATE));
  sTable.addCommand(saveCommand);
  sTable.setCaptionModel(new ResourceModel(""String_Node_Str""));
  sForm.add(sTable);
  add(sForm);
}",0.972637339507472
117467,"@Override protected void onConfigure(){
  super.onConfigure();
  if (getModelObject() == null)   throw new AbortWithHttpErrorCodeException(HttpServletResponse.SC_NOT_FOUND);
}","@Override protected void onConfigure(){
  super.onConfigure();
  if (getModelObject() == null)   throw new AbortWithHttpErrorCodeException(HttpServletResponse.SC_NOT_FOUND);
  boolean isExistingClass=!(getModelObject() instanceof IPrototype);
  pTable.setEnabled(isExistingClass);
  iTable.setEnabled(isExistingClass);
  sTable.setEnabled(isExistingClass);
}",0.6566604127579737
117468,"public static String resolveNameProperty(OClass oClass){
  if (oClass == null)   return null;
  String ret=SchemaHelper.getCustomAttr(oClass,CustomAttributes.PROP_NAME);
  if (ret == null || !oClass.existsProperty(ret)) {
    if (oClass.existsProperty(""String_Node_Str"")) {
      ret=""String_Node_Str"";
    }
 else {
      for (      OProperty p : oClass.properties()) {
        if (OType.STRING.equals(p.getType())) {
          ret=p.getName();
          break;
        }
 else         if (!p.getType().isMultiValue()) {
          ret=p.getName();
        }
      }
    }
  }
  return ret;
}","public static String resolveNameProperty(OClass oClass){
  if (oClass == null)   return null;
  OProperty property=CustomAttributes.PROP_NAME.getValue(oClass);
  String ret=property != null ? property.getName() : null;
  if (ret == null || oClass.getProperty(ret) == null) {
    if (oClass.getProperty(""String_Node_Str"") != null) {
      ret=""String_Node_Str"";
    }
 else {
      for (      OProperty p : oClass.properties()) {
        if (OType.STRING.equals(p.getType())) {
          ret=p.getName();
          break;
        }
 else         if (!p.getType().isMultiValue()) {
          ret=p.getName();
        }
      }
    }
  }
  return ret;
}",0.8470209339774557
117469,"@Override protected String execute(ODatabaseRecord db){
  OSQLSynchQuery<ODocument> query=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + OCLASS_LOCALIZATION + ""String_Node_Str""+ OPROPERTY_KEY+ ""String_Node_Str"");
  List<ODocument> result=db.command(query).execute(key);
  if (result == null || result.isEmpty()) {
    registerStringResourceRequest(key,language,style,variation);
    return null;
  }
  ODocument bestCandidate=null;
  int bestCandidateScore=-1;
  boolean fullMatchPresent=false;
  for (  ODocument candidate : result) {
    int score=0;
    if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_LANG)))     score|=1 << 3;
    if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_STYLE)))     score|=1 << 2;
    if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_VARIATION)))     score|=1;
    if (score == 7)     fullMatchPresent=true;
    Boolean active=candidate.field(OPROPERTY_ACTIVE);
    if (active == null || active)     score=-1;
    if (score > bestCandidateScore) {
      bestCandidate=candidate;
      bestCandidateScore=score;
    }
  }
  if (!fullMatchPresent) {
    registerStringResourceRequest(key,language,style,variation);
  }
  return bestCandidate != null ? (String)bestCandidate.field(OPROPERTY_VALUE) : null;
}","@Override protected String execute(ODatabaseRecord db){
  OSQLSynchQuery<ODocument> query=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + OCLASS_LOCALIZATION + ""String_Node_Str""+ OPROPERTY_KEY+ ""String_Node_Str"");
  List<ODocument> result=db.command(query).execute(key);
  if (result == null || result.isEmpty()) {
    registerStringResourceRequest(key,language,style,variation);
    return null;
  }
  ODocument bestCandidate=null;
  int bestCandidateScore=-1;
  boolean fullMatchPresent=false;
  for (  ODocument candidate : result) {
    int score=0;
    if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_LANG)))     score|=1 << 2;
    if (Strings.isEqual(style,(String)candidate.field(OPROPERTY_STYLE)))     score|=1 << 1;
    if (Strings.isEqual(variation,(String)candidate.field(OPROPERTY_VARIATION)))     score|=1;
    if (score == 7)     fullMatchPresent=true;
    Boolean active=candidate.field(OPROPERTY_ACTIVE);
    if (active == null || active)     score=-1;
    if (score > bestCandidateScore) {
      bestCandidate=candidate;
      bestCandidateScore=score;
    }
  }
  if (!fullMatchPresent) {
    registerStringResourceRequest(key,language,style,variation);
  }
  return bestCandidate != null ? (String)bestCandidate.field(OPROPERTY_VALUE) : null;
}",0.9875097580015612
117470,"public String loadStringResource(final String key,Locale locale,final String style,final String variation){
  final String language=locale != null ? locale.getLanguage() : null;
  return new DBClosure<String>(){
    @Override protected String execute(    ODatabaseRecord db){
      OSQLSynchQuery<ODocument> query=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + OCLASS_LOCALIZATION + ""String_Node_Str""+ OPROPERTY_KEY+ ""String_Node_Str"");
      List<ODocument> result=db.command(query).execute(key);
      if (result == null || result.isEmpty()) {
        registerStringResourceRequest(key,language,style,variation);
        return null;
      }
      ODocument bestCandidate=null;
      int bestCandidateScore=-1;
      boolean fullMatchPresent=false;
      for (      ODocument candidate : result) {
        int score=0;
        if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_LANG)))         score|=1 << 3;
        if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_STYLE)))         score|=1 << 2;
        if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_VARIATION)))         score|=1;
        if (score == 7)         fullMatchPresent=true;
        Boolean active=candidate.field(OPROPERTY_ACTIVE);
        if (active == null || active)         score=-1;
        if (score > bestCandidateScore) {
          bestCandidate=candidate;
          bestCandidateScore=score;
        }
      }
      if (!fullMatchPresent) {
        registerStringResourceRequest(key,language,style,variation);
      }
      return bestCandidate != null ? (String)bestCandidate.field(OPROPERTY_VALUE) : null;
    }
  }
.execute();
}","public String loadStringResource(final String key,Locale locale,final String style,final String variation){
  final String language=locale != null ? locale.getLanguage() : null;
  return new DBClosure<String>(){
    @Override protected String execute(    ODatabaseRecord db){
      OSQLSynchQuery<ODocument> query=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + OCLASS_LOCALIZATION + ""String_Node_Str""+ OPROPERTY_KEY+ ""String_Node_Str"");
      List<ODocument> result=db.command(query).execute(key);
      if (result == null || result.isEmpty()) {
        registerStringResourceRequest(key,language,style,variation);
        return null;
      }
      ODocument bestCandidate=null;
      int bestCandidateScore=-1;
      boolean fullMatchPresent=false;
      for (      ODocument candidate : result) {
        int score=0;
        if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_LANG)))         score|=1 << 2;
        if (Strings.isEqual(style,(String)candidate.field(OPROPERTY_STYLE)))         score|=1 << 1;
        if (Strings.isEqual(variation,(String)candidate.field(OPROPERTY_VARIATION)))         score|=1;
        if (score == 7)         fullMatchPresent=true;
        Boolean active=candidate.field(OPROPERTY_ACTIVE);
        if (active == null || active)         score=-1;
        if (score > bestCandidateScore) {
          bestCandidate=candidate;
          bestCandidateScore=score;
        }
      }
      if (!fullMatchPresent) {
        registerStringResourceRequest(key,language,style,variation);
      }
      return bestCandidate != null ? (String)bestCandidate.field(OPROPERTY_VALUE) : null;
    }
  }
.execute();
}",0.9903089036947303
117471,"@Override public void onSubmit(AjaxRequestTarget target,Form<?> form){
  performMultiAction(checkboxColumn.getSelected());
  checkboxColumn.resetSelection();
  this.send(this,Broadcast.BUBBLE,target);
}","@Override public void onSubmit(AjaxRequestTarget target,Form<?> form){
  performMultiAction(target,checkboxColumn.getSelected());
  checkboxColumn.resetSelection();
  this.send(this,Broadcast.BUBBLE,target);
}",0.9829683698296836
117472,"protected void performMultiAction(List<T> objects){
  for (  T object : objects) {
    perfromSingleAction(object);
  }
}","protected void performMultiAction(AjaxRequestTarget target,List<T> objects){
  for (  T object : objects) {
    perfromSingleAction(target,object);
  }
}",0.8832116788321168
117473,"protected void perfromSingleAction(T object){
}","protected void perfromSingleAction(AjaxRequestTarget target,T object){
}",0.7899159663865546
117474,"public Command(String commandId,IModel<?> labelModel){
  super(commandId);
  initialize(commandId,labelModel);
}","public Command(String commandId,IModel<?> labelModel){
  super(commandId);
  link=newLink(""String_Node_Str"");
  link.setOutputMarkupId(true);
  link.add(new AttributeAppender(""String_Node_Str"",new PropertyModel<String>(this,""String_Node_Str""),""String_Node_Str""));
  link.add(new Label(""String_Node_Str"",labelModel).setRenderBodyOnly(true));
  link.add(new FAIcon(""String_Node_Str"",new PropertyModel<String>(this,""String_Node_Str"")));
  add(link);
}",0.2964285714285714
117475,"@Override protected void performMultiAction(List<OProperty> objects){
  if (objects == null || objects.size() == 0) {
    error(OrienteerWebApplication.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",this));
    return;
  }
 else {
    List<String> fields=Lists.newArrayList(Lists.transform(objects,new Function<OProperty,String>(){
      @Override public String apply(      OProperty input){
        return input.getName();
      }
    }
));
    OClass oClass=classModel != null ? classModel.getObject() : null;
    if (oClass == null)     oClass=objects.get(0).getOwnerClass();
    setResponsePage(new OIndexPage(new OIndexModel(OIndexPrototyper.newPrototype(oClass.getName(),fields))).setDisplayMode(DisplayMode.EDIT));
  }
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<OProperty> objects){
  if (objects == null || objects.size() == 0) {
    error(OrienteerWebApplication.get().getResourceSettings().getLocalizer().getString(""String_Node_Str"",this));
    return;
  }
 else {
    List<String> fields=Lists.newArrayList(Lists.transform(objects,new Function<OProperty,String>(){
      @Override public String apply(      OProperty input){
        return input.getName();
      }
    }
));
    OClass oClass=classModel != null ? classModel.getObject() : null;
    if (oClass == null)     oClass=objects.get(0).getOwnerClass();
    setResponsePage(new OIndexPage(new OIndexModel(OIndexPrototyper.newPrototype(oClass.getName(),fields))).setDisplayMode(DisplayMode.EDIT));
  }
}",0.9836280288146692
117476,"@Override protected void performMultiAction(List<OClass> objects){
  getDatabase().commit();
  super.performMultiAction(objects);
  getDatabase().begin();
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<OClass> objects){
  getDatabase().commit();
  super.performMultiAction(target,objects);
  getDatabase().begin();
}",0.9069767441860463
117477,"@Override protected void perfromSingleAction(OClass object){
  getSchema().dropClass(object.getName());
}","@Override protected void perfromSingleAction(AjaxRequestTarget target,OClass object){
  getSchema().dropClass(object.getName());
}",0.8936170212765957
117478,"@Override protected void performMultiAction(List<ODocument> objects){
  super.performMultiAction(objects);
  getDatabase().commit(true);
  getDatabase().begin();
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  super.performMultiAction(target,objects);
  getDatabase().commit(true);
  getDatabase().begin();
}",0.9106145251396648
117479,"@Override protected void perfromSingleAction(ODocument object){
  object.delete();
}","@Override protected void perfromSingleAction(AjaxRequestTarget target,ODocument object){
  object.delete();
}",0.8704663212435233
117480,"@Override protected void performMultiAction(List<OIndex<?>> objects){
  getDatabase().commit();
  super.performMultiAction(objects);
  getDatabase().begin();
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<OIndex<?>> objects){
  getDatabase().commit();
  super.performMultiAction(target,objects);
  getDatabase().begin();
}",0.9085714285714286
117481,"@Override protected void perfromSingleAction(OIndex<?> object){
  getIndexManager().dropIndex(object.getName());
}","@Override protected void perfromSingleAction(AjaxRequestTarget target,OIndex<?> object){
  getIndexManager().dropIndex(object.getName());
}",0.9011857707509882
117482,"@Override protected void performMultiAction(List<OProperty> objects){
  getDatabase().commit();
  super.performMultiAction(objects);
  getDatabase().begin();
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<OProperty> objects){
  getDatabase().commit();
  super.performMultiAction(target,objects);
  getDatabase().begin();
}",0.9085714285714286
117483,"@Override protected void perfromSingleAction(OProperty object){
  object.getOwnerClass().dropProperty(object.getName());
}","@Override protected void perfromSingleAction(AjaxRequestTarget target,OProperty object){
  object.getOwnerClass().dropProperty(object.getName());
}",0.9070631970260224
117484,"@Override protected void initializeContent(ModalWindow modal){
  modal.setContent(new ImportDialogPanel(modal.getContentId(),modal));
}","@Override protected void initializeContent(ModalWindow modal){
  modal.setTitle(new ResourceModel(""String_Node_Str""));
  modal.setContent(new ImportDialogPanel(modal.getContentId(),modal));
}",0.8282208588957055
117485,"@Override protected void performMultiAction(List<ODocument> objects){
  if (objects == null || objects.isEmpty())   return;
  ODocument doc=documentModel.getObject();
  if (doc != null) {
    OProperty property=propertyModel.getObject();
    if (property != null) {
      Collection<ODocument> collection=doc.field(property.getName());
      for (      ODocument oDocument : objects) {
        collection.remove(oDocument);
      }
      doc.save();
    }
  }
}","@Override protected void performMultiAction(AjaxRequestTarget target,List<ODocument> objects){
  if (objects == null || objects.isEmpty())   return;
  ODocument doc=documentModel.getObject();
  if (doc != null) {
    OProperty property=propertyModel.getObject();
    if (property != null) {
      Collection<ODocument> collection=doc.field(property.getName());
      for (      ODocument oDocument : objects) {
        collection.remove(oDocument);
      }
      doc.save();
    }
  }
}",0.9736008447729672
117486,"public LinksPropertyDataTablePanel(String id,IModel<ODocument> documentModel,OProperty property){
  super(id,documentModel);
  String sql;
  OClass linkedClass=property.getLinkedClass();
  boolean isCalculable=CustomAttributes.CALCULABLE.getValue(property,false);
  if (isCalculable) {
    sql=CustomAttributes.CALC_SCRIPT.getValue(property);
    sql=sql.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    sql=""String_Node_Str"" + property.getName() + ""String_Node_Str""+ property.getOwnerClass().getName()+ ""String_Node_Str"";
  }
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<ODocument>(sql);
  provider.setParameter(""String_Node_Str"",documentModel);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",oClassIntrospector.getColumnsFor(linkedClass),provider,20);
  table.setCaptionModel(new OPropertyNamingModel(property));
  if (!isCalculable) {
    table.addCommand(new CreateODocumentCommand(table,documentModel,new OPropertyModel(property)));
    table.addCommand(new DeleteODocumentCommand(table,linkedClass));
  }
  add(table);
}","public LinksPropertyDataTablePanel(String id,IModel<ODocument> documentModel,OProperty property){
  super(id,documentModel);
  String sql;
  OClass linkedClass=property.getLinkedClass();
  boolean isCalculable=CustomAttributes.CALCULABLE.getValue(property,false);
  if (isCalculable) {
    sql=CustomAttributes.CALC_SCRIPT.getValue(property);
    sql=sql.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    sql=""String_Node_Str"" + property.getName() + ""String_Node_Str""+ property.getOwnerClass().getName()+ ""String_Node_Str"";
  }
  OQueryDataProvider<ODocument> provider=new OQueryDataProvider<ODocument>(sql);
  provider.setParameter(""String_Node_Str"",documentModel);
  OrienteerDataTable<ODocument,String> table=new OrienteerDataTable<ODocument,String>(""String_Node_Str"",oClassIntrospector.getColumnsFor(linkedClass),provider,20);
  table.setCaptionModel(new OPropertyNamingModel(property));
  if (!isCalculable) {
    table.addCommand(new CreateODocumentCommand(table,documentModel,new OPropertyModel(property)));
    table.addCommand(new DeleteODocumentCommand(table,linkedClass));
    table.addCommand(new ReleaseODocumentCommand(table,documentModel,new OPropertyModel(property)));
  }
  add(table);
}",0.9566709566709568
117487,"@Override public void onEvent(IEvent<?> event){
  if (event.getPayload() instanceof AjaxRequestTarget && Broadcast.BUBBLE.equals(event.getType())) {
    ((AjaxRequestTarget)event.getPayload()).add(this);
  }
}","@Override public void onEvent(IEvent<?> event){
  if (event.getPayload() instanceof AjaxRequestTarget && Broadcast.BUBBLE.equals(event.getType())) {
    ((AjaxRequestTarget)event.getPayload()).add(this);
    event.stop();
  }
}",0.9587155963302753
117488,"@Override public void onEvent(IEvent<?> event){
  if (event.getPayload() instanceof AjaxRequestTarget && Broadcast.BUBBLE.equals(event.getType())) {
    ((AjaxRequestTarget)event.getPayload()).add(this);
  }
}","@Override public void onEvent(IEvent<?> event){
  if (event.getPayload() instanceof AjaxRequestTarget && Broadcast.BUBBLE.equals(event.getType())) {
    ((AjaxRequestTarget)event.getPayload()).add(this);
    event.stop();
  }
}",0.9587155963302753
117489,"@Override public void onInitialize(OrienteerWebApplication app,ODatabaseDocument db){
  app.getResourceSettings().getStringResourceLoaders().add(new OrienteerStringResourceLoader());
}","@Override public void onInitialize(OrienteerWebApplication app,ODatabaseDocument db){
  app.getResourceSettings().getStringResourceLoaders().add(new OrienteerStringResourceLoader());
  app.getOrientDbSettings().getORecordHooks().add(new ODocumentHookAbstract(){
{
      setIncludeClasses(OCLASS_LOCALIZATION);
    }
    private void invalidateCache(){
      OrienteerWebApplication app=OrienteerWebApplication.lookupApplication();
      if (app != null) {
        app.getResourceSettings().getLocalizer().clearCache();
      }
    }
    @Override public void onRecordAfterCreate(    ODocument iDocument){
      invalidateCache();
    }
    @Override public void onRecordAfterUpdate(    ODocument iDocument){
      invalidateCache();
    }
    @Override public void onRecordAfterDelete(    ODocument iDocument){
      invalidateCache();
    }
    @Override public DISTRIBUTED_EXECUTION_MODE getDistributedExecutionMode(){
      return DISTRIBUTED_EXECUTION_MODE.BOTH;
    }
  }
);
}",0.3158798283261803
117490,"@Override protected String execute(ODatabaseDocument db){
  OSQLSynchQuery<ODocument> query=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + OCLASS_LOCALIZATION + ""String_Node_Str""+ OPROPERTY_KEY+ ""String_Node_Str"");
  List<ODocument> result=db.command(query).execute(key);
  if (result == null || result.isEmpty()) {
    registerStringResourceRequest(key,language,style,variation);
    return null;
  }
  ODocument bestCandidate=null;
  int bestCandidateScore=-1;
  boolean fullMatchPresent=false;
  for (  ODocument candidate : result) {
    int score=0;
    if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_LANG)))     score|=1 << 2;
    if (Strings.isEqual(style,(String)candidate.field(OPROPERTY_STYLE)))     score|=1 << 1;
    if (Strings.isEqual(variation,(String)candidate.field(OPROPERTY_VARIATION)))     score|=1;
    if (score == 7)     fullMatchPresent=true;
    Boolean active=candidate.field(OPROPERTY_ACTIVE);
    if (active == null || active)     score=-1;
    if (score > bestCandidateScore) {
      bestCandidate=candidate;
      bestCandidateScore=score;
    }
  }
  if (!fullMatchPresent) {
    registerStringResourceRequest(key,language,style,variation);
  }
  return bestCandidate != null ? (String)bestCandidate.field(OPROPERTY_VALUE) : null;
}","@Override protected String execute(ODatabaseDocument db){
  OSQLSynchQuery<ODocument> query=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + OCLASS_LOCALIZATION + ""String_Node_Str""+ OPROPERTY_KEY+ ""String_Node_Str"");
  List<ODocument> result=db.command(query).execute(key);
  if (result == null || result.isEmpty()) {
    registerStringResourceRequest(key,language,style,variation);
    return null;
  }
  ODocument bestCandidate=null;
  int bestCandidateScore=-1;
  boolean fullMatchPresent=false;
  for (  ODocument candidate : result) {
    int score=0;
    if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_LANG)))     score|=1 << 2;
    if (Strings.isEqual(style,(String)candidate.field(OPROPERTY_STYLE)))     score|=1 << 1;
    if (Strings.isEqual(variation,(String)candidate.field(OPROPERTY_VARIATION)))     score|=1;
    if (score == 7)     fullMatchPresent=true;
    Boolean active=candidate.field(OPROPERTY_ACTIVE);
    if (active == null || !active)     score=-1;
    if (score > bestCandidateScore) {
      bestCandidate=candidate;
      bestCandidateScore=score;
    }
  }
  if (!fullMatchPresent) {
    registerStringResourceRequest(key,language,style,variation);
  }
  return bestCandidate != null ? (String)bestCandidate.field(OPROPERTY_VALUE) : null;
}",0.9996101364522416
117491,"public String loadStringResource(final String key,Locale locale,final String style,final String variation){
  final String language=locale != null ? locale.getLanguage() : null;
  return new DBClosure<String>(){
    @Override protected String execute(    ODatabaseDocument db){
      OSQLSynchQuery<ODocument> query=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + OCLASS_LOCALIZATION + ""String_Node_Str""+ OPROPERTY_KEY+ ""String_Node_Str"");
      List<ODocument> result=db.command(query).execute(key);
      if (result == null || result.isEmpty()) {
        registerStringResourceRequest(key,language,style,variation);
        return null;
      }
      ODocument bestCandidate=null;
      int bestCandidateScore=-1;
      boolean fullMatchPresent=false;
      for (      ODocument candidate : result) {
        int score=0;
        if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_LANG)))         score|=1 << 2;
        if (Strings.isEqual(style,(String)candidate.field(OPROPERTY_STYLE)))         score|=1 << 1;
        if (Strings.isEqual(variation,(String)candidate.field(OPROPERTY_VARIATION)))         score|=1;
        if (score == 7)         fullMatchPresent=true;
        Boolean active=candidate.field(OPROPERTY_ACTIVE);
        if (active == null || active)         score=-1;
        if (score > bestCandidateScore) {
          bestCandidate=candidate;
          bestCandidateScore=score;
        }
      }
      if (!fullMatchPresent) {
        registerStringResourceRequest(key,language,style,variation);
      }
      return bestCandidate != null ? (String)bestCandidate.field(OPROPERTY_VALUE) : null;
    }
  }
.execute();
}","public String loadStringResource(final String key,Locale locale,final String style,final String variation){
  final String language=locale != null ? locale.getLanguage() : null;
  return new DBClosure<String>(){
    @Override protected String execute(    ODatabaseDocument db){
      OSQLSynchQuery<ODocument> query=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + OCLASS_LOCALIZATION + ""String_Node_Str""+ OPROPERTY_KEY+ ""String_Node_Str"");
      List<ODocument> result=db.command(query).execute(key);
      if (result == null || result.isEmpty()) {
        registerStringResourceRequest(key,language,style,variation);
        return null;
      }
      ODocument bestCandidate=null;
      int bestCandidateScore=-1;
      boolean fullMatchPresent=false;
      for (      ODocument candidate : result) {
        int score=0;
        if (Strings.isEqual(language,(String)candidate.field(OPROPERTY_LANG)))         score|=1 << 2;
        if (Strings.isEqual(style,(String)candidate.field(OPROPERTY_STYLE)))         score|=1 << 1;
        if (Strings.isEqual(variation,(String)candidate.field(OPROPERTY_VARIATION)))         score|=1;
        if (score == 7)         fullMatchPresent=true;
        Boolean active=candidate.field(OPROPERTY_ACTIVE);
        if (active == null || !active)         score=-1;
        if (score > bestCandidateScore) {
          bestCandidate=candidate;
          bestCandidateScore=score;
        }
      }
      if (!fullMatchPresent) {
        registerStringResourceRequest(key,language,style,variation);
      }
      return bestCandidate != null ? (String)bestCandidate.field(OPROPERTY_VALUE) : null;
    }
  }
.execute();
}",0.999697428139183
117492,"@SuppressWarnings(""String_Node_Str"") public V getEnteredValue(){
  if (component instanceof FormComponent) {
    return ((FormComponent<V>)component).getConvertedInput();
  }
 else {
    return getValueObject();
  }
}","@SuppressWarnings(""String_Node_Str"") public V getEnteredValue(){
  if (component instanceof FormComponent && ((FormComponent<V>)component).hasRawInput()) {
    FormComponent<V> formComponent=(FormComponent<V>)component;
    convertInput(formComponent);
    return formComponent.getConvertedInput();
  }
 else {
    return getValueObject();
  }
}",0.701067615658363
117493,"@SuppressWarnings(""String_Node_Str"") @Override protected Component resolveComponent(String id,DisplayMode mode,String critery){
  if (DisplayMode.VIEW.equals(mode)) {
    if (""String_Node_Str"".equals(critery)) {
      return new OClassViewPanel(id,(IModel<OClass>)getModel());
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new Label(id,getModel());
    }
 else {
      return new Label(id,getModel());
    }
  }
 else   if (DisplayMode.EDIT.equals(mode)) {
    if (""String_Node_Str"".equals(critery)) {
      return new TextField<V>(id,getModel()).setType(String.class).add((IValidator<V>)OSchemaNamesValidator.INSTANCE).setRequired(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OType>(id,(IModel<OType>)getModel(),Arrays.asList(OType.values())).setRequired(true).add(new OnChangeAjaxBehavior(){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          target.add(OPropertyMetaPanel.this.getMetaContext().getContextComponent());
        }
      }
);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OType>(id,(IModel<OType>)getModel(),Arrays.asList(OType.values())).setNullValid(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OClass>(id,(IModel<OClass>)getModel(),new ListClassesModel(),new IChoiceRenderer<OClass>(){
        /** 
 */
        private static final long serialVersionUID=1L;
        @Override public Object getDisplayValue(        OClass object){
          return new OClassNamingModel(object).getObject();
        }
        @Override public String getIdValue(        OClass object,        int index){
          return object.getName();
        }
      }
).setNullValid(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<String>(id,(IModel<String>)getModel(),Lists.newArrayList(OSQLEngine.getCollateNames()));
    }
 else     if (""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery)) {
      return new CheckBox(id,(IModel<Boolean>)getModel());
    }
 else     if (""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery)) {
      return new TextField<V>(id,getModel());
    }
 else {
      final CustomAttributes customAttr=CustomAttributes.fromString(critery);
      if (customAttr != null) {
switch (customAttr) {
case CALCULABLE:
case DISPLAYABLE:
          return new CheckBox(id,(IModel<Boolean>)getModel());
case CALC_SCRIPT:
        return new TextArea<V>(id,getModel());
case ORDER:
      return new TextField<V>(id,getModel()).setType(Integer.class);
case TAB:
    return new TextField<V>(id,getModel());
case VISUALIZATION_TYPE:
  return new DropDownChoice<String>(id,(IModel<String>)getModel(),new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      OType type=getMetaComponentEnteredValue(OPropertyPrototyper.TYPE);
      UIComponentsRegistry registry=OrienteerWebApplication.get().getUIComponentsRegistry();
      return registry.getComponentsOptions(type);
    }
  }
){
    private static final long serialVersionUID=1L;
    @Override protected void onConfigure(){
      super.onConfigure();
      List<?> choices=getChoices();
      setVisible(choices != null && choices.size() > 0);
    }
  }
;
}
}
return resolveComponent(id,DisplayMode.VIEW,critery);
}
}
 else return null;
}","@SuppressWarnings(""String_Node_Str"") @Override protected Component resolveComponent(String id,DisplayMode mode,String critery){
  if (DisplayMode.VIEW.equals(mode)) {
    if (""String_Node_Str"".equals(critery)) {
      return new OClassViewPanel(id,(IModel<OClass>)getModel());
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new Label(id,getModel());
    }
 else {
      return new Label(id,getModel());
    }
  }
 else   if (DisplayMode.EDIT.equals(mode)) {
    if (""String_Node_Str"".equals(critery)) {
      return new TextField<V>(id,getModel()).setType(String.class).add((IValidator<V>)OSchemaNamesValidator.INSTANCE).setRequired(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OType>(id,(IModel<OType>)getModel(),Arrays.asList(OType.values())).setRequired(true).add(new AjaxFormSubmitBehavior(""String_Node_Str""){
        @Override protected void onSubmit(        AjaxRequestTarget target){
          target.add(OPropertyMetaPanel.this.getMetaContext().getContextComponent());
        }
        @Override public boolean getDefaultProcessing(){
          return false;
        }
      }
);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OType>(id,(IModel<OType>)getModel(),Arrays.asList(OType.values())).setNullValid(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OClass>(id,(IModel<OClass>)getModel(),new ListClassesModel(),new IChoiceRenderer<OClass>(){
        /** 
 */
        private static final long serialVersionUID=1L;
        @Override public Object getDisplayValue(        OClass object){
          return new OClassNamingModel(object).getObject();
        }
        @Override public String getIdValue(        OClass object,        int index){
          return object.getName();
        }
      }
).setNullValid(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<String>(id,(IModel<String>)getModel(),Lists.newArrayList(OSQLEngine.getCollateNames()));
    }
 else     if (""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery)) {
      return new CheckBox(id,(IModel<Boolean>)getModel());
    }
 else     if (""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery)) {
      return new TextField<V>(id,getModel());
    }
 else {
      final CustomAttributes customAttr=CustomAttributes.fromString(critery);
      if (customAttr != null) {
switch (customAttr) {
case CALCULABLE:
case DISPLAYABLE:
          return new CheckBox(id,(IModel<Boolean>)getModel());
case CALC_SCRIPT:
        return new TextArea<V>(id,getModel());
case ORDER:
      return new TextField<V>(id,getModel()).setType(Integer.class);
case TAB:
    return new TextField<V>(id,getModel());
case VISUALIZATION_TYPE:
  return new DropDownChoice<String>(id,(IModel<String>)getModel(),new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      OType type=getMetaComponentEnteredValue(OPropertyPrototyper.TYPE);
      UIComponentsRegistry registry=OrienteerWebApplication.get().getUIComponentsRegistry();
      return registry.getComponentsOptions(type);
    }
  }
){
    private static final long serialVersionUID=1L;
    @Override protected void onConfigure(){
      super.onConfigure();
      List<?> choices=getChoices();
      setVisible(choices != null && choices.size() > 0);
    }
  }
;
}
}
return resolveComponent(id,DisplayMode.VIEW,critery);
}
}
 else return null;
}",0.9803418803418804
117494,"private void registerStringResourceRequest(String key,String language,String style,String variation){
  ODocument doc=new ODocument(OCLASS_LOCALIZATION);
  doc.field(OPROPERTY_KEY,key);
  doc.field(OPROPERTY_LANG,language);
  doc.field(OPROPERTY_STYLE,style);
  doc.field(OPROPERTY_VARIATION,variation);
  doc.field(OPROPERTY_ACTIVE,false);
}","private void registerStringResourceRequest(String key,String language,String style,String variation){
  ODocument doc=new ODocument(OCLASS_LOCALIZATION);
  doc.field(OPROPERTY_KEY,key);
  doc.field(OPROPERTY_LANG,language);
  doc.field(OPROPERTY_STYLE,style);
  doc.field(OPROPERTY_VARIATION,variation);
  doc.field(OPROPERTY_ACTIVE,false);
  doc.save();
}",0.9799426934097422
117495,"@Override public void onInstall(OrienteerWebApplication app,ODatabaseDocument db){
  OSchema schema=app.getDatabase().getMetadata().getSchema();
  OClass oClass=mergeOClass(schema,OCLASS_LOCALIZATION);
  mergeOProperty(oClass,OPROPERTY_KEY,OType.STRING);
  mergeOProperty(oClass,OPROPERTY_LANG,OType.STRING);
  mergeOProperty(oClass,OPROPERTY_STYLE,OType.STRING);
  mergeOProperty(oClass,OPROPERTY_VARIATION,OType.STRING);
  mergeOProperty(oClass,OPROPERTY_ACTIVE,OType.BOOLEAN);
  mergeOProperty(oClass,OPROPERTY_VALUE,OType.STRING);
  mergeOIndex(oClass,""String_Node_Str"",INDEX_TYPE.NOTUNIQUE,""String_Node_Str"");
}","@Override public void onInstall(OrienteerWebApplication app,ODatabaseDocument db){
  OSchema schema=db.getMetadata().getSchema();
  OClass oClass=mergeOClass(schema,OCLASS_LOCALIZATION);
  mergeOProperty(oClass,OPROPERTY_KEY,OType.STRING);
  mergeOProperty(oClass,OPROPERTY_LANG,OType.STRING);
  mergeOProperty(oClass,OPROPERTY_STYLE,OType.STRING);
  mergeOProperty(oClass,OPROPERTY_VARIATION,OType.STRING);
  mergeOProperty(oClass,OPROPERTY_ACTIVE,OType.BOOLEAN);
  mergeOProperty(oClass,OPROPERTY_VALUE,OType.STRING);
  mergeOIndex(oClass,""String_Node_Str"",INDEX_TYPE.NOTUNIQUE,""String_Node_Str"");
}",0.9860312243221035
117496,"@Override public void onConfigure(Component component){
  super.onConfigure(component);
  sourceComponent.configure();
  component.setVisibilityAllowed(component.isVisibilityAllowed() && sourceComponent.determineVisibility());
}","@Override public void onConfigure(Component component){
  super.onConfigure(component);
  sourceComponent.configure();
  component.setVisible(sourceComponent.determineVisibility());
}",0.8905109489051095
117497,"@SuppressWarnings(""String_Node_Str"") @Override protected Component resolveComponent(String id,DisplayMode mode,String critery){
  if (DisplayMode.VIEW.equals(mode)) {
    if (""String_Node_Str"".equals(critery)) {
      return new OClassViewPanel(id,(IModel<OClass>)getModel());
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new Label(id,getModel());
    }
 else {
      return new Label(id,getModel());
    }
  }
 else   if (DisplayMode.EDIT.equals(mode)) {
    if (""String_Node_Str"".equals(critery)) {
      return new TextField<V>(id,getModel()).setType(String.class).add((IValidator<V>)OSchemaNamesValidator.INSTANCE).setRequired(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OType>(id,(IModel<OType>)getModel(),Arrays.asList(OType.values())).setRequired(true).add(new OnChangeAjaxBehavior(){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          target.add(OPropertyMetaPanel.this.getMetaContext().getContextComponent());
        }
        @Override protected boolean getUpdateModel(){
          return false;
        }
      }
);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OType>(id,(IModel<OType>)getModel(),Arrays.asList(OType.values())).setNullValid(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OClass>(id,(IModel<OClass>)getModel(),new ListClassesModel(),new IChoiceRenderer<OClass>(){
        /** 
 */
        private static final long serialVersionUID=1L;
        @Override public Object getDisplayValue(        OClass object){
          return new OClassNamingModel(object).getObject();
        }
        @Override public String getIdValue(        OClass object,        int index){
          return object.getName();
        }
      }
).setNullValid(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<String>(id,(IModel<String>)getModel(),Lists.newArrayList(OSQLEngine.getCollateNames()));
    }
 else     if (""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery)) {
      return new CheckBox(id,(IModel<Boolean>)getModel());
    }
 else     if (""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery)) {
      return new TextField<V>(id,getModel());
    }
 else {
      CustomAttributes customAttr=CustomAttributes.fromString(critery);
      if (customAttr != null) {
switch (customAttr) {
case CALCULABLE:
case DISPLAYABLE:
          return new CheckBox(id,(IModel<Boolean>)getModel());
case CALC_SCRIPT:
        return new TextArea<V>(id,getModel());
case ORDER:
      return new TextField<V>(id,getModel()).setType(Integer.class);
case TAB:
    return new TextField<V>(id,getModel());
}
}
return resolveComponent(id,DisplayMode.VIEW,critery);
}
}
 else return null;
}","@SuppressWarnings(""String_Node_Str"") @Override protected Component resolveComponent(String id,DisplayMode mode,String critery){
  if (DisplayMode.VIEW.equals(mode)) {
    if (""String_Node_Str"".equals(critery)) {
      return new OClassViewPanel(id,(IModel<OClass>)getModel());
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new Label(id,getModel());
    }
 else {
      return new Label(id,getModel());
    }
  }
 else   if (DisplayMode.EDIT.equals(mode)) {
    if (""String_Node_Str"".equals(critery)) {
      return new TextField<V>(id,getModel()).setType(String.class).add((IValidator<V>)OSchemaNamesValidator.INSTANCE).setRequired(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OType>(id,(IModel<OType>)getModel(),Arrays.asList(OType.values())).setRequired(true).add(new OnChangeAjaxBehavior(){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          target.add(OPropertyMetaPanel.this.getMetaContext().getContextComponent());
        }
      }
);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OType>(id,(IModel<OType>)getModel(),Arrays.asList(OType.values())).setNullValid(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<OClass>(id,(IModel<OClass>)getModel(),new ListClassesModel(),new IChoiceRenderer<OClass>(){
        /** 
 */
        private static final long serialVersionUID=1L;
        @Override public Object getDisplayValue(        OClass object){
          return new OClassNamingModel(object).getObject();
        }
        @Override public String getIdValue(        OClass object,        int index){
          return object.getName();
        }
      }
).setNullValid(true);
    }
 else     if (""String_Node_Str"".equals(critery)) {
      return new DropDownChoice<String>(id,(IModel<String>)getModel(),Lists.newArrayList(OSQLEngine.getCollateNames()));
    }
 else     if (""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery)) {
      return new CheckBox(id,(IModel<Boolean>)getModel());
    }
 else     if (""String_Node_Str"".equals(critery) || ""String_Node_Str"".equals(critery)) {
      return new TextField<V>(id,getModel());
    }
 else {
      CustomAttributes customAttr=CustomAttributes.fromString(critery);
      if (customAttr != null) {
switch (customAttr) {
case CALCULABLE:
case DISPLAYABLE:
          return new CheckBox(id,(IModel<Boolean>)getModel());
case CALC_SCRIPT:
        return new TextArea<V>(id,getModel());
case ORDER:
      return new TextField<V>(id,getModel()).setType(Integer.class);
case TAB:
    return new TextField<V>(id,getModel());
}
}
return resolveComponent(id,DisplayMode.VIEW,critery);
}
}
 else return null;
}",0.984593837535014
117498,"private static void startSparkIfNeeded() throws PigException {
  if (sparkContext == null) {
    String master=System.getenv(""String_Node_Str"");
    if (master == null) {
      LOG.info(""String_Node_Str"");
      master=""String_Node_Str"";
    }
    String sparkHome=System.getenv(""String_Node_Str"");
    String sparkJarsSetting=System.getenv(""String_Node_Str"");
    String pigJar=System.getenv(""String_Node_Str"");
    if (pigJar == null) {
      pigJar=""String_Node_Str"";
    }
    String[] sparkJars=sparkJarsSetting == null ? new String[]{} : sparkJarsSetting.split(""String_Node_Str"");
    List<String> jars=Lists.asList(pigJar,sparkJars);
    if (!master.startsWith(""String_Node_Str"") && !master.equals(""String_Node_Str"")) {
      if (sparkHome == null) {
        System.err.println(""String_Node_Str"");
        throw new PigException(""String_Node_Str"");
      }
    }
    if (System.getenv(""String_Node_Str"") != null) {
      int maxCores=32;
      maxCores=Integer.parseInt(System.getenv(""String_Node_Str""));
      System.setProperty(""String_Node_Str"",""String_Node_Str"" + maxCores);
    }
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
    JavaSparkContext javaContext=new JavaSparkContext(master,""String_Node_Str"",sparkHome,jars.toArray(new String[jars.size()]));
    sparkContext=javaContext.sc();
    sparkContext.addSparkListener(new StatsReportListener());
    sparkContext.addSparkListener(new JobLogger());
    cacheConverter=new CacheConverter();
  }
}","private static void startSparkIfNeeded() throws PigException {
  if (sparkContext == null) {
    String master=System.getenv(""String_Node_Str"");
    if (master == null) {
      LOG.info(""String_Node_Str"");
      master=""String_Node_Str"";
    }
    String sparkHome=System.getenv(""String_Node_Str"");
    String sparkJarsSetting=System.getenv(""String_Node_Str"");
    String pigJar=System.getenv(""String_Node_Str"");
    if (pigJar == null) {
      pigJar=""String_Node_Str"";
    }
    String[] sparkJars=sparkJarsSetting == null ? new String[]{} : sparkJarsSetting.split(""String_Node_Str"");
    List<String> jars=Lists.asList(pigJar,sparkJars);
    if (!master.startsWith(""String_Node_Str"") && !master.equals(""String_Node_Str"")) {
      if (sparkHome == null) {
        System.err.println(""String_Node_Str"");
        throw new PigException(""String_Node_Str"");
      }
    }
    if (System.getenv(""String_Node_Str"") != null) {
      int maxCores=32;
      maxCores=Integer.parseInt(System.getenv(""String_Node_Str""));
      System.setProperty(""String_Node_Str"",""String_Node_Str"" + maxCores);
    }
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    JavaSparkContext javaContext=new JavaSparkContext(master,""String_Node_Str"",sparkHome,jars.toArray(new String[jars.size()]));
    sparkContext=javaContext.sc();
    sparkContext.addSparkListener(new StatsReportListener());
    sparkContext.addSparkListener(new JobLogger());
    cacheConverter=new CacheConverter();
  }
}",0.9445286450439528
117499,"@Override public Tuple call(Tuple2<Object,Seq<Seq<Tuple>>> input){
  try {
    LOG.debug(""String_Node_Str"" + input);
    final Object key=input._1();
    Seq<Seq<Tuple>> bags=input._2();
    Iterable<Seq<Tuple>> bagsList=JavaConversions.asJavaIterable(bags);
    int i=0;
    List<Iterator<Tuple>> tupleIterators=new ArrayList();
    for (    Seq<Tuple> bag : bagsList) {
      Iterator<Tuple> iterator=JavaConversions.asJavaCollection(bag).iterator();
      final int index=i;
      tupleIterators.add(new IteratorTransform<Tuple,Tuple>(iterator){
        @Override protected Tuple transform(        Tuple next){
          try {
            Tuple tuple=tf.newTuple(3);
            tuple.set(0,index);
            tuple.set(1,key);
            tuple.set(2,next);
            return tuple;
          }
 catch (          ExecException e) {
            throw new RuntimeException(e);
          }
        }
      }
);
      ++i;
    }
    Tuple out=tf.newTuple(2);
    out.set(0,key);
    out.set(1,new IteratorUnion<Tuple>(tupleIterators.iterator()));
    LOG.debug(""String_Node_Str"" + out);
    return out;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public Tuple call(Tuple2<Object,Seq<Seq<Tuple>>> input){
  try {
    final Object key=input._1();
    Seq<Seq<Tuple>> bags=input._2();
    Iterable<Seq<Tuple>> bagsList=JavaConversions.asJavaIterable(bags);
    int i=0;
    List<Iterator<Tuple>> tupleIterators=new ArrayList();
    for (    Seq<Tuple> bag : bagsList) {
      Iterator<Tuple> iterator=JavaConversions.asJavaCollection(bag).iterator();
      final int index=i;
      tupleIterators.add(new IteratorTransform<Tuple,Tuple>(iterator){
        @Override protected Tuple transform(        Tuple next){
          try {
            Tuple tuple=tf.newTuple(3);
            tuple.set(0,index);
            tuple.set(1,key);
            tuple.set(2,next);
            return tuple;
          }
 catch (          ExecException e) {
            throw new RuntimeException(e);
          }
        }
      }
);
      ++i;
    }
    Tuple out=tf.newTuple(2);
    out.set(0,key);
    out.set(1,new IteratorUnion<Tuple>(tupleIterators.iterator()));
    return out;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9638128861429832
117500,"private void readNext(){
  try {
    if (result != null && !returned) {
      return;
    }
    if (result == null) {
      if (!input.hasNext()) {
        finished=true;
        return;
      }
      Tuple v1=input.next();
      attach(v1);
    }
    result=getNextResult();
    returned=false;
switch (result.returnStatus) {
case POStatus.STATUS_OK:
      returned=false;
    break;
case POStatus.STATUS_NULL:
  returned=true;
readNext();
break;
case POStatus.STATUS_EOP:
finished=!input.hasNext();
if (!finished) {
result=null;
readNext();
}
break;
case POStatus.STATUS_ERR:
throw new RuntimeException(""String_Node_Str"" + result);
}
}
 catch (ExecException e) {
throw new RuntimeException(e);
}
}","private void readNext(){
  try {
    if (result != null && !returned) {
      return;
    }
    if (result == null) {
      if (!input.hasNext()) {
        finished=true;
        return;
      }
      vt=input.next();
      attach(vt);
    }
    result=getNextResult();
    returned=false;
switch (result.returnStatus) {
case POStatus.STATUS_OK:
      returned=false;
    break;
case POStatus.STATUS_NULL:
  returned=true;
readNext();
break;
case POStatus.STATUS_EOP:
finished=!input.hasNext();
if (!finished) {
result=null;
readNext();
}
break;
case POStatus.STATUS_ERR:
throw new RuntimeException(""String_Node_Str"" + result);
}
}
 catch (ExecException e) {
throw new RuntimeException(e);
}
}",0.9525862068965516
117501,"protected static SchemaTupleFactory newSchemaTupleFactory(int id){
  if (stb == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return stb.internalNewSchemaTupleFactory(id);
}","protected static SchemaTupleFactory newSchemaTupleFactory(int id){
  LOG.info(""String_Node_Str"" + stb);
  if (stb == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return stb.internalNewSchemaTupleFactory(id);
}",0.9121140142517816
117502,"public static void initialize(Configuration jConf,PigContext pigContext,boolean isLocal) throws IOException {
  if (stb != null) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    SchemaTupleFrontend.lazyReset(pigContext);
    SchemaTupleFrontend.reset();
    SchemaTupleBackend stbInstance=new SchemaTupleBackend(jConf,isLocal);
    stbInstance.copyAndResolve();
    stb=stbInstance;
  }
}","public static void initialize(Configuration jConf,PigContext pigContext,boolean isLocal) throws IOException {
  if (stb != null) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    SchemaTupleFrontend.lazyReset(pigContext);
    SchemaTupleFrontend.reset();
    SchemaTupleBackend stbInstance=new SchemaTupleBackend(jConf,isLocal);
    stbInstance.copyAndResolve();
    stb=stbInstance;
  }
  LOG.info(""String_Node_Str"" + stb);
}",0.9547123623011016
117503,"/** 
 * The only information this class needs is a directory of generated code to resolve classes in.
 * @param jConf
 * @param directory of generated code
 */
private SchemaTupleBackend(Configuration jConf,boolean isLocal){
  if (isLocal) {
    String localCodeDir=jConf.get(PigConstants.LOCAL_CODE_DIR);
    if (localCodeDir == null) {
      LOG.debug(""String_Node_Str"");
      abort=true;
      return;
    }
    codeDir=new File(jConf.get(PigConstants.LOCAL_CODE_DIR));
  }
 else {
    codeDir=Files.createTempDir();
    codeDir.deleteOnExit();
  }
  try {
    classLoader=new URLClassLoader(new URL[]{codeDir.toURI().toURL()});
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""String_Node_Str"" + codeDir.getAbsolutePath());
  }
  this.jConf=jConf;
  this.isLocal=isLocal;
}","/** 
 * The only information this class needs is a directory of generated code to resolve classes in.
 * @param jConf
 * @param directory of generated code
 */
private SchemaTupleBackend(Configuration jConf,boolean isLocal){
  if (isLocal) {
    String localCodeDir=jConf.get(PigConstants.LOCAL_CODE_DIR);
    if (localCodeDir == null) {
      LOG.debug(""String_Node_Str"");
      abort=true;
      return;
    }
    codeDir=new File(jConf.get(PigConstants.LOCAL_CODE_DIR));
  }
 else {
    codeDir=Files.createTempDir();
    codeDir.deleteOnExit();
  }
  try {
    classLoader=new URLClassLoader(new URL[]{codeDir.toURI().toURL()});
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""String_Node_Str"" + codeDir.getAbsolutePath());
  }
  SchemaTupleBackend.jConf=jConf;
  this.isLocal=isLocal;
}",0.9876390605686032
117504,"static int run(String args[],PigProgressNotificationListener listener){
  int rc=1;
  boolean verbose=false;
  boolean gruntCalled=false;
  String logFileName=null;
  try {
    Configuration conf=new Configuration(false);
    GenericOptionsParser parser=new GenericOptionsParser(conf,args);
    conf=parser.getConfiguration();
    Properties properties=new Properties();
    PropertiesUtil.loadDefaultProperties(properties);
    properties.putAll(ConfigurationUtil.toProperties(conf));
    if (listener == null) {
      listener=makeListener(properties);
    }
    String[] pigArgs=parser.getRemainingArgs();
    boolean userSpecifiedLog=false;
    boolean checkScriptOnly=false;
    BufferedReader pin=null;
    boolean debug=false;
    boolean dryrun=false;
    boolean embedded=false;
    List<String> params=new ArrayList<String>();
    List<String> paramFiles=new ArrayList<String>();
    HashSet<String> disabledOptimizerRules=new HashSet<String>();
    CmdLineParser opts=new CmdLineParser(pigArgs);
    opts.registerOpt('4',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('b',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('c',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('d',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('e',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('f',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('g',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('h',""String_Node_Str"",CmdLineParser.ValueExpected.OPTIONAL);
    opts.registerOpt('i',""String_Node_Str"",CmdLineParser.ValueExpected.OPTIONAL);
    opts.registerOpt('l',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('m',""String_Node_Str"",CmdLineParser.ValueExpected.OPTIONAL);
    opts.registerOpt('p',""String_Node_Str"",CmdLineParser.ValueExpected.OPTIONAL);
    opts.registerOpt('r',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('t',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('v',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('w',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('x',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('F',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('M',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('P',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    ExecMode mode=ExecMode.UNKNOWN;
    String file=null;
    String engine=null;
    ExecType execType=ExecType.MAPREDUCE;
    String execTypeString=properties.getProperty(""String_Node_Str"");
    if (execTypeString != null && execTypeString.length() > 0) {
      execType=ExecType.fromString(execTypeString);
    }
    UDFContext.getUDFContext().setClientSystemProps(properties);
    char opt;
    while ((opt=opts.getNextOpt()) != CmdLineParser.EndOfOpts) {
switch (opt) {
case '4':
        String log4jconf=opts.getValStr();
      if (log4jconf != null) {
        properties.setProperty(LOG4J_CONF,log4jconf);
      }
    break;
case 'b':
  properties.setProperty(BRIEF,""String_Node_Str"");
break;
case 'c':
checkScriptOnly=true;
break;
case 'd':
String logLevel=opts.getValStr();
if (logLevel != null) {
properties.setProperty(DEBUG,logLevel);
}
debug=true;
break;
case 'e':
mode=ExecMode.STRING;
break;
case 'f':
mode=ExecMode.FILE;
file=opts.getValStr();
break;
case 'g':
embedded=true;
engine=opts.getValStr();
break;
case 'F':
properties.setProperty(""String_Node_Str"",""String_Node_Str"" + true);
break;
case 'h':
String topic=opts.getValStr();
if (topic != null) if (topic.equalsIgnoreCase(""String_Node_Str"")) printProperties();
 else {
System.out.println(""String_Node_Str"" + topic);
usage();
}
 else usage();
return ReturnCode.SUCCESS;
case 'i':
System.out.println(getVersionString());
return ReturnCode.SUCCESS;
case 'l':
String logFileParameter=opts.getValStr();
if (logFileParameter != null && logFileParameter.length() > 0) {
logFileName=validateLogFile(logFileParameter,null);
}
 else {
logFileName=validateLogFile(logFileName,null);
}
userSpecifiedLog=true;
properties.setProperty(""String_Node_Str"",(logFileName == null ? ""String_Node_Str"" : logFileName));
break;
case 'm':
paramFiles.add(opts.getValStr());
break;
case 'M':
properties.setProperty(""String_Node_Str"",""String_Node_Str"" + false);
break;
case 'p':
params.add(opts.getValStr());
break;
case 'r':
dryrun=true;
break;
case 't':
disabledOptimizerRules.add(opts.getValStr());
break;
case 'v':
properties.setProperty(VERBOSE,""String_Node_Str"" + true);
verbose=true;
break;
case 'w':
properties.setProperty(""String_Node_Str"",""String_Node_Str"" + false);
break;
case 'x':
try {
execType=ExecType.fromString(opts.getValStr());
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"",e);
}
break;
case 'P':
{
InputStream inputStream=null;
try {
FileLocalizer.FetchFileRet localFileRet=FileLocalizer.fetchFile(properties,opts.getValStr());
inputStream=new BufferedInputStream(new FileInputStream(localFileRet.file));
properties.load(inputStream);
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"" + opts.getValStr() + ""String_Node_Str"");
}
 finally {
if (inputStream != null) {
try {
inputStream.close();
}
 catch (IOException e) {
}
}
}
}
break;
default :
{
Character cc=Character.valueOf(opt);
throw new AssertionError(""String_Node_Str"" + cc.toString());
}
}
}
PigContext pigContext=new PigContext(execType,properties);
String commandLine=LoadFunc.join((AbstractList<String>)Arrays.asList(args),""String_Node_Str"");
ScriptState scriptState=ScriptState.start(commandLine,pigContext);
if (listener != null) {
scriptState.registerListener(listener);
}
pigContext.getProperties().setProperty(""String_Node_Str"",commandLine);
if (logFileName == null && !userSpecifiedLog) {
logFileName=validateLogFile(properties.getProperty(""String_Node_Str""),null);
}
pigContext.getProperties().setProperty(""String_Node_Str"",(logFileName == null ? ""String_Node_Str"" : logFileName));
configureLog4J(properties,pigContext);
log.info(getVersionString().replace(""String_Node_Str"",""String_Node_Str""));
if (logFileName != null) {
System.out.println(""String_Node_Str"");
log.info(""String_Node_Str"" + logFileName);
}
if (!Boolean.valueOf(properties.getProperty(PROP_FILT_SIMPL_OPT,""String_Node_Str""))) {
disabledOptimizerRules.add(""String_Node_Str"");
}
pigContext.getProperties().setProperty(PigImplConstants.PIG_OPTIMIZER_RULES_KEY,ObjectSerializer.serialize(disabledOptimizerRules));
PigContext.setClassLoader(pigContext.createCl(null));
Grunt grunt=null;
BufferedReader in;
String substFile=null;
paramFiles=fetchRemoteParamFiles(paramFiles,properties);
pigContext.setParams(params);
pigContext.setParamFiles(paramFiles);
switch (mode) {
case FILE:
{
String remainders[]=opts.getRemainingArgs();
if (remainders != null) {
pigContext.getProperties().setProperty(PigContext.PIG_CMD_ARGS_REMAINDERS,ObjectSerializer.serialize(remainders));
}
FileLocalizer.FetchFileRet localFileRet=FileLocalizer.fetchFile(properties,file);
if (localFileRet.didFetch) {
properties.setProperty(""String_Node_Str"",""String_Node_Str"");
}
scriptState.setFileName(file);
if (embedded) {
return runEmbeddedScript(pigContext,localFileRet.file.getPath(),engine);
}
 else {
SupportedScriptLang type=determineScriptType(localFileRet.file.getPath());
if (type != null) {
return runEmbeddedScript(pigContext,localFileRet.file.getPath(),type.name().toLowerCase());
}
}
in=new BufferedReader(new InputStreamReader(Utils.getCompositeStream(new FileInputStream(localFileRet.file),properties)));
substFile=file + ""String_Node_Str"";
pin=runParamPreprocessor(pigContext,in,substFile,debug || dryrun || checkScriptOnly);
if (dryrun) {
if (dryrun(substFile,pigContext)) {
log.info(""String_Node_Str"" + substFile + ""String_Node_Str""+ file+ ""String_Node_Str"");
}
 else {
log.info(""String_Node_Str"" + substFile);
}
return ReturnCode.SUCCESS;
}
logFileName=validateLogFile(logFileName,file);
pigContext.getProperties().setProperty(""String_Node_Str"",logFileName);
pigContext.getProperties().setProperty(PigContext.JOB_NAME,""String_Node_Str"" + new File(file).getName());
if (!debug) {
new File(substFile).deleteOnExit();
}
scriptState.setScript(new File(file));
grunt=new Grunt(pin,pigContext);
gruntCalled=true;
if (checkScriptOnly) {
grunt.checkScript(substFile);
System.err.println(file + ""String_Node_Str"");
rc=ReturnCode.SUCCESS;
}
 else {
int results[]=grunt.exec();
rc=getReturnCodeForStats(results);
}
return rc;
}
case STRING:
{
if (checkScriptOnly) {
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
return ReturnCode.ILLEGAL_ARGS;
}
StringBuffer sb=new StringBuffer();
String remainders[]=opts.getRemainingArgs();
for (int i=0; i < remainders.length; i++) {
if (i != 0) sb.append(' ');
sb.append(remainders[i]);
}
sb.append('\n');
scriptState.setScript(sb.toString());
in=new BufferedReader(new StringReader(sb.toString()));
grunt=new Grunt(in,pigContext);
gruntCalled=true;
int results[]=grunt.exec();
return getReturnCodeForStats(results);
}
default :
break;
}
String remainders[]=opts.getRemainingArgs();
if (remainders == null) {
if (checkScriptOnly) {
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
return ReturnCode.ILLEGAL_ARGS;
}
mode=ExecMode.SHELL;
ConsoleReader reader=new ConsoleReader(Utils.getCompositeStream(System.in,properties),new OutputStreamWriter(System.out));
reader.setDefaultPrompt(""String_Node_Str"");
final String HISTORYFILE=""String_Node_Str"";
String historyFile=System.getProperty(""String_Node_Str"") + File.separator + HISTORYFILE;
reader.setHistory(new History(new File(historyFile)));
ConsoleReaderInputStream inputStream=new ConsoleReaderInputStream(reader);
grunt=new Grunt(new BufferedReader(new InputStreamReader(inputStream)),pigContext);
grunt.setConsoleReader(reader);
gruntCalled=true;
grunt.run();
return ReturnCode.SUCCESS;
}
 else {
pigContext.getProperties().setProperty(PigContext.PIG_CMD_ARGS_REMAINDERS,ObjectSerializer.serialize(remainders));
mode=ExecMode.FILE;
FileLocalizer.FetchFileRet localFileRet=FileLocalizer.fetchFile(properties,remainders[0]);
if (localFileRet.didFetch) {
properties.setProperty(""String_Node_Str"",""String_Node_Str"");
}
scriptState.setFileName(remainders[0]);
if (embedded) {
return runEmbeddedScript(pigContext,localFileRet.file.getPath(),engine);
}
 else {
SupportedScriptLang type=determineScriptType(localFileRet.file.getPath());
if (type != null) {
return runEmbeddedScript(pigContext,localFileRet.file.getPath(),type.name().toLowerCase());
}
}
InputStream seqInputStream=Utils.getCompositeStream(new FileInputStream(localFileRet.file),properties);
in=new BufferedReader(new InputStreamReader(seqInputStream));
substFile=remainders[0] + ""String_Node_Str"";
pin=runParamPreprocessor(pigContext,in,substFile,debug || dryrun || checkScriptOnly);
if (dryrun) {
if (dryrun(substFile,pigContext)) {
log.info(""String_Node_Str"" + substFile + ""String_Node_Str""+ remainders[0]+ ""String_Node_Str"");
}
 else {
log.info(""String_Node_Str"" + substFile);
}
return ReturnCode.SUCCESS;
}
logFileName=validateLogFile(logFileName,remainders[0]);
pigContext.getProperties().setProperty(""String_Node_Str"",logFileName);
if (!debug) {
new File(substFile).deleteOnExit();
}
pigContext.getProperties().setProperty(PigContext.JOB_NAME,""String_Node_Str"" + new File(remainders[0]).getName());
scriptState.setScript(localFileRet.file);
grunt=new Grunt(pin,pigContext);
gruntCalled=true;
if (checkScriptOnly) {
grunt.checkScript(substFile);
System.err.println(remainders[0] + ""String_Node_Str"");
rc=ReturnCode.SUCCESS;
}
 else {
int results[]=grunt.exec();
rc=getReturnCodeForStats(results);
}
return rc;
}
}
 catch (ParseException e) {
usage();
rc=ReturnCode.PARSE_EXCEPTION;
PigStatsUtil.setErrorMessage(e.getMessage());
}
catch (org.apache.pig.tools.parameters.ParseException e) {
rc=ReturnCode.PARSE_EXCEPTION;
PigStatsUtil.setErrorMessage(e.getMessage());
}
catch (IOException e) {
if (e instanceof PigException) {
PigException pe=(PigException)e;
rc=(pe.retriable()) ? ReturnCode.RETRIABLE_EXCEPTION : ReturnCode.PIG_EXCEPTION;
PigStatsUtil.setErrorMessage(pe.getMessage());
PigStatsUtil.setErrorCode(pe.getErrorCode());
}
 else {
rc=ReturnCode.IO_EXCEPTION;
PigStatsUtil.setErrorMessage(e.getMessage());
}
if (!gruntCalled) {
LogUtils.writeLog(e,logFileName,log,verbose,""String_Node_Str"");
}
}
catch (Throwable e) {
rc=ReturnCode.THROWABLE_EXCEPTION;
PigStatsUtil.setErrorMessage(e.getMessage());
if (!gruntCalled) {
LogUtils.writeLog(e,logFileName,log,verbose,""String_Node_Str"");
}
}
 finally {
FileLocalizer.deleteTempFiles();
PerformanceTimerFactory.getPerfTimerFactory().dumpTimers();
}
return rc;
}","static int run(String args[],PigProgressNotificationListener listener){
  int rc=1;
  boolean verbose=false;
  boolean gruntCalled=false;
  String logFileName=null;
  bcaster=new BroadCastServer();
  bcaster.startBroadcastServer(Integer.parseInt(System.getenv(""String_Node_Str"")));
  try {
    Configuration conf=new Configuration(false);
    GenericOptionsParser parser=new GenericOptionsParser(conf,args);
    conf=parser.getConfiguration();
    Properties properties=new Properties();
    PropertiesUtil.loadDefaultProperties(properties);
    properties.putAll(ConfigurationUtil.toProperties(conf));
    if (listener == null) {
      listener=makeListener(properties);
    }
    String[] pigArgs=parser.getRemainingArgs();
    boolean userSpecifiedLog=false;
    boolean checkScriptOnly=false;
    BufferedReader pin=null;
    boolean debug=false;
    boolean dryrun=false;
    boolean embedded=false;
    List<String> params=new ArrayList<String>();
    List<String> paramFiles=new ArrayList<String>();
    HashSet<String> disabledOptimizerRules=new HashSet<String>();
    CmdLineParser opts=new CmdLineParser(pigArgs);
    opts.registerOpt('4',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('b',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('c',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('d',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('e',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('f',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('g',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('h',""String_Node_Str"",CmdLineParser.ValueExpected.OPTIONAL);
    opts.registerOpt('i',""String_Node_Str"",CmdLineParser.ValueExpected.OPTIONAL);
    opts.registerOpt('l',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('m',""String_Node_Str"",CmdLineParser.ValueExpected.OPTIONAL);
    opts.registerOpt('p',""String_Node_Str"",CmdLineParser.ValueExpected.OPTIONAL);
    opts.registerOpt('r',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('t',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('v',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('w',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('x',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    opts.registerOpt('F',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('M',""String_Node_Str"",CmdLineParser.ValueExpected.NOT_ACCEPTED);
    opts.registerOpt('P',""String_Node_Str"",CmdLineParser.ValueExpected.REQUIRED);
    ExecMode mode=ExecMode.UNKNOWN;
    String file=null;
    String engine=null;
    ExecType execType=ExecType.MAPREDUCE;
    String execTypeString=properties.getProperty(""String_Node_Str"");
    if (execTypeString != null && execTypeString.length() > 0) {
      execType=ExecType.fromString(execTypeString);
    }
    UDFContext.getUDFContext().setClientSystemProps(properties);
    char opt;
    while ((opt=opts.getNextOpt()) != CmdLineParser.EndOfOpts) {
switch (opt) {
case '4':
        String log4jconf=opts.getValStr();
      if (log4jconf != null) {
        properties.setProperty(LOG4J_CONF,log4jconf);
      }
    break;
case 'b':
  properties.setProperty(BRIEF,""String_Node_Str"");
break;
case 'c':
checkScriptOnly=true;
break;
case 'd':
String logLevel=opts.getValStr();
if (logLevel != null) {
properties.setProperty(DEBUG,logLevel);
}
debug=true;
break;
case 'e':
mode=ExecMode.STRING;
break;
case 'f':
mode=ExecMode.FILE;
file=opts.getValStr();
break;
case 'g':
embedded=true;
engine=opts.getValStr();
break;
case 'F':
properties.setProperty(""String_Node_Str"",""String_Node_Str"" + true);
break;
case 'h':
String topic=opts.getValStr();
if (topic != null) if (topic.equalsIgnoreCase(""String_Node_Str"")) printProperties();
 else {
System.out.println(""String_Node_Str"" + topic);
usage();
}
 else usage();
return ReturnCode.SUCCESS;
case 'i':
System.out.println(getVersionString());
return ReturnCode.SUCCESS;
case 'l':
String logFileParameter=opts.getValStr();
if (logFileParameter != null && logFileParameter.length() > 0) {
logFileName=validateLogFile(logFileParameter,null);
}
 else {
logFileName=validateLogFile(logFileName,null);
}
userSpecifiedLog=true;
properties.setProperty(""String_Node_Str"",(logFileName == null ? ""String_Node_Str"" : logFileName));
break;
case 'm':
paramFiles.add(opts.getValStr());
break;
case 'M':
properties.setProperty(""String_Node_Str"",""String_Node_Str"" + false);
break;
case 'p':
params.add(opts.getValStr());
break;
case 'r':
dryrun=true;
break;
case 't':
disabledOptimizerRules.add(opts.getValStr());
break;
case 'v':
properties.setProperty(VERBOSE,""String_Node_Str"" + true);
verbose=true;
break;
case 'w':
properties.setProperty(""String_Node_Str"",""String_Node_Str"" + false);
break;
case 'x':
try {
execType=ExecType.fromString(opts.getValStr());
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"",e);
}
break;
case 'P':
{
InputStream inputStream=null;
try {
FileLocalizer.FetchFileRet localFileRet=FileLocalizer.fetchFile(properties,opts.getValStr());
inputStream=new BufferedInputStream(new FileInputStream(localFileRet.file));
properties.load(inputStream);
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"" + opts.getValStr() + ""String_Node_Str"");
}
 finally {
if (inputStream != null) {
try {
inputStream.close();
}
 catch (IOException e) {
}
}
}
}
break;
default :
{
Character cc=Character.valueOf(opt);
throw new AssertionError(""String_Node_Str"" + cc.toString());
}
}
}
PigContext pigContext=new PigContext(execType,properties);
String commandLine=LoadFunc.join((AbstractList<String>)Arrays.asList(args),""String_Node_Str"");
ScriptState scriptState=ScriptState.start(commandLine,pigContext);
if (listener != null) {
scriptState.registerListener(listener);
}
pigContext.getProperties().setProperty(""String_Node_Str"",commandLine);
if (logFileName == null && !userSpecifiedLog) {
logFileName=validateLogFile(properties.getProperty(""String_Node_Str""),null);
}
pigContext.getProperties().setProperty(""String_Node_Str"",(logFileName == null ? ""String_Node_Str"" : logFileName));
configureLog4J(properties,pigContext);
log.info(getVersionString().replace(""String_Node_Str"",""String_Node_Str""));
if (logFileName != null) {
System.out.println(""String_Node_Str"");
log.info(""String_Node_Str"" + logFileName);
}
if (!Boolean.valueOf(properties.getProperty(PROP_FILT_SIMPL_OPT,""String_Node_Str""))) {
disabledOptimizerRules.add(""String_Node_Str"");
}
pigContext.getProperties().setProperty(PigImplConstants.PIG_OPTIMIZER_RULES_KEY,ObjectSerializer.serialize(disabledOptimizerRules));
PigContext.setClassLoader(pigContext.createCl(null));
Grunt grunt=null;
BufferedReader in;
String substFile=null;
paramFiles=fetchRemoteParamFiles(paramFiles,properties);
pigContext.setParams(params);
pigContext.setParamFiles(paramFiles);
switch (mode) {
case FILE:
{
String remainders[]=opts.getRemainingArgs();
if (remainders != null) {
pigContext.getProperties().setProperty(PigContext.PIG_CMD_ARGS_REMAINDERS,ObjectSerializer.serialize(remainders));
}
FileLocalizer.FetchFileRet localFileRet=FileLocalizer.fetchFile(properties,file);
if (localFileRet.didFetch) {
properties.setProperty(""String_Node_Str"",""String_Node_Str"");
}
scriptState.setFileName(file);
if (embedded) {
return runEmbeddedScript(pigContext,localFileRet.file.getPath(),engine);
}
 else {
SupportedScriptLang type=determineScriptType(localFileRet.file.getPath());
if (type != null) {
return runEmbeddedScript(pigContext,localFileRet.file.getPath(),type.name().toLowerCase());
}
}
in=new BufferedReader(new InputStreamReader(Utils.getCompositeStream(new FileInputStream(localFileRet.file),properties)));
substFile=file + ""String_Node_Str"";
pin=runParamPreprocessor(pigContext,in,substFile,debug || dryrun || checkScriptOnly);
if (dryrun) {
if (dryrun(substFile,pigContext)) {
log.info(""String_Node_Str"" + substFile + ""String_Node_Str""+ file+ ""String_Node_Str"");
}
 else {
log.info(""String_Node_Str"" + substFile);
}
return ReturnCode.SUCCESS;
}
logFileName=validateLogFile(logFileName,file);
pigContext.getProperties().setProperty(""String_Node_Str"",logFileName);
pigContext.getProperties().setProperty(PigContext.JOB_NAME,""String_Node_Str"" + new File(file).getName());
if (!debug) {
new File(substFile).deleteOnExit();
}
scriptState.setScript(new File(file));
grunt=new Grunt(pin,pigContext);
gruntCalled=true;
if (checkScriptOnly) {
grunt.checkScript(substFile);
System.err.println(file + ""String_Node_Str"");
rc=ReturnCode.SUCCESS;
}
 else {
int results[]=grunt.exec();
rc=getReturnCodeForStats(results);
}
return rc;
}
case STRING:
{
if (checkScriptOnly) {
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
return ReturnCode.ILLEGAL_ARGS;
}
StringBuffer sb=new StringBuffer();
String remainders[]=opts.getRemainingArgs();
for (int i=0; i < remainders.length; i++) {
if (i != 0) sb.append(' ');
sb.append(remainders[i]);
}
sb.append('\n');
scriptState.setScript(sb.toString());
in=new BufferedReader(new StringReader(sb.toString()));
grunt=new Grunt(in,pigContext);
gruntCalled=true;
int results[]=grunt.exec();
return getReturnCodeForStats(results);
}
default :
break;
}
String remainders[]=opts.getRemainingArgs();
if (remainders == null) {
if (checkScriptOnly) {
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
return ReturnCode.ILLEGAL_ARGS;
}
mode=ExecMode.SHELL;
ConsoleReader reader=new ConsoleReader(Utils.getCompositeStream(System.in,properties),new OutputStreamWriter(System.out));
reader.setDefaultPrompt(""String_Node_Str"");
final String HISTORYFILE=""String_Node_Str"";
String historyFile=System.getProperty(""String_Node_Str"") + File.separator + HISTORYFILE;
reader.setHistory(new History(new File(historyFile)));
ConsoleReaderInputStream inputStream=new ConsoleReaderInputStream(reader);
grunt=new Grunt(new BufferedReader(new InputStreamReader(inputStream)),pigContext);
grunt.setConsoleReader(reader);
gruntCalled=true;
grunt.run();
return ReturnCode.SUCCESS;
}
 else {
pigContext.getProperties().setProperty(PigContext.PIG_CMD_ARGS_REMAINDERS,ObjectSerializer.serialize(remainders));
mode=ExecMode.FILE;
FileLocalizer.FetchFileRet localFileRet=FileLocalizer.fetchFile(properties,remainders[0]);
if (localFileRet.didFetch) {
properties.setProperty(""String_Node_Str"",""String_Node_Str"");
}
scriptState.setFileName(remainders[0]);
if (embedded) {
return runEmbeddedScript(pigContext,localFileRet.file.getPath(),engine);
}
 else {
SupportedScriptLang type=determineScriptType(localFileRet.file.getPath());
if (type != null) {
return runEmbeddedScript(pigContext,localFileRet.file.getPath(),type.name().toLowerCase());
}
}
InputStream seqInputStream=Utils.getCompositeStream(new FileInputStream(localFileRet.file),properties);
in=new BufferedReader(new InputStreamReader(seqInputStream));
substFile=remainders[0] + ""String_Node_Str"";
pin=runParamPreprocessor(pigContext,in,substFile,debug || dryrun || checkScriptOnly);
if (dryrun) {
if (dryrun(substFile,pigContext)) {
log.info(""String_Node_Str"" + substFile + ""String_Node_Str""+ remainders[0]+ ""String_Node_Str"");
}
 else {
log.info(""String_Node_Str"" + substFile);
}
return ReturnCode.SUCCESS;
}
logFileName=validateLogFile(logFileName,remainders[0]);
pigContext.getProperties().setProperty(""String_Node_Str"",logFileName);
if (!debug) {
new File(substFile).deleteOnExit();
}
pigContext.getProperties().setProperty(PigContext.JOB_NAME,""String_Node_Str"" + new File(remainders[0]).getName());
scriptState.setScript(localFileRet.file);
grunt=new Grunt(pin,pigContext);
gruntCalled=true;
if (checkScriptOnly) {
grunt.checkScript(substFile);
System.err.println(remainders[0] + ""String_Node_Str"");
rc=ReturnCode.SUCCESS;
}
 else {
int results[]=grunt.exec();
rc=getReturnCodeForStats(results);
}
return rc;
}
}
 catch (ParseException e) {
usage();
rc=ReturnCode.PARSE_EXCEPTION;
PigStatsUtil.setErrorMessage(e.getMessage());
}
catch (org.apache.pig.tools.parameters.ParseException e) {
rc=ReturnCode.PARSE_EXCEPTION;
PigStatsUtil.setErrorMessage(e.getMessage());
}
catch (IOException e) {
if (e instanceof PigException) {
PigException pe=(PigException)e;
rc=(pe.retriable()) ? ReturnCode.RETRIABLE_EXCEPTION : ReturnCode.PIG_EXCEPTION;
PigStatsUtil.setErrorMessage(pe.getMessage());
PigStatsUtil.setErrorCode(pe.getErrorCode());
}
 else {
rc=ReturnCode.IO_EXCEPTION;
PigStatsUtil.setErrorMessage(e.getMessage());
}
if (!gruntCalled) {
LogUtils.writeLog(e,logFileName,log,verbose,""String_Node_Str"");
}
}
catch (Throwable e) {
rc=ReturnCode.THROWABLE_EXCEPTION;
PigStatsUtil.setErrorMessage(e.getMessage());
if (!gruntCalled) {
LogUtils.writeLog(e,logFileName,log,verbose,""String_Node_Str"");
}
}
 finally {
FileLocalizer.deleteTempFiles();
PerformanceTimerFactory.getPerfTimerFactory().dumpTimers();
}
return rc;
}",0.9954967091335976
117505,"public void addResource(String reference,Object resource){
  storage.put(reference,resource);
}","public void addResource(String schema,String reference,Object resource){
  if (schema.equalsIgnoreCase(""String_Node_Str"")) {
    Stack<Object> tmp_stack=stack;
    Iterator<Object> iterator=tmp_stack.iterator();
    boolean found=false;
    while (iterator.hasNext()) {
      if (iterator.next().equals(resource)) {
        found=true;
      }
    }
    if (!found) {
      stack.push((Object)resource);
      storage.put(reference,resource);
    }
  }
}",0.3205828779599271
117506,"public void run(){
  while (true) {
    try {
      System.out.println(""String_Node_Str"" + serverSocket.getLocalPort() + ""String_Node_Str"");
      Socket server=serverSocket.accept();
      System.out.println(""String_Node_Str"" + server.getRemoteSocketAddress());
      DataInputStream in=new DataInputStream(server.getInputStream());
      String request=in.readUTF();
      System.out.println(""String_Node_Str"" + request);
      ObjectOutputStream out=new ObjectOutputStream(server.getOutputStream());
      if (storage.get(request) != null) {
        out.writeObject(storage.get(request));
      }
 else {
        out.writeObject(null);
      }
      server.close();
    }
 catch (    Exception s) {
      s.printStackTrace();
      break;
    }
  }
}","public void run(){
  while (true) {
    try {
      System.out.println(""String_Node_Str"" + serverSocket.getLocalPort() + ""String_Node_Str"");
      Socket server=serverSocket.accept();
      System.out.println(""String_Node_Str"" + server.getRemoteSocketAddress());
      DataInputStream in=new DataInputStream(server.getInputStream());
      String request=in.readUTF();
      System.out.println(""String_Node_Str"" + request);
      ObjectOutputStream out=new ObjectOutputStream(server.getOutputStream());
      if (request.equalsIgnoreCase(""String_Node_Str"")) {
        try {
          Object schema=stack.pop();
          System.out.println(""String_Node_Str"" + schema);
          out.writeObject(schema);
        }
 catch (        Exception e) {
          out.writeObject(storage.get(request));
        }
      }
 else {
        if (storage.get(request) != null) {
          out.writeObject(storage.get(request));
        }
 else {
          out.writeObject(null);
        }
      }
      server.close();
    }
 catch (    Exception s) {
      s.printStackTrace();
      break;
    }
  }
}",0.7039652362846279
117507,"public void startBroadcastServer(int port){
  try {
    storage=new HashMap<Object,Object>();
    Thread t=new BroadCastServer(port);
    t.start();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void startBroadcastServer(int port){
  try {
    storage=new HashMap<Object,Object>();
    stack=new Stack<Object>();
    Thread t=new BroadCastServer(port);
    t.start();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.930648769574944
117508,"@Override public PigStats launchPig(PhysicalPlan physicalPlan,String grpName,PigContext pigContext) throws Exception {
  LOG.info(""String_Node_Str"");
  LOG.debug(physicalPlan);
  Configuration c=SparkUtil.newJobConf(pigContext);
  c.set(PigConstants.LOCAL_CODE_DIR,System.getProperty(""String_Node_Str""));
  SchemaTupleBackend.initialize(c,pigContext);
  MRCompiler mrCompiler=new MRCompiler(physicalPlan,pigContext);
  mrCompiler.compile();
  MROperPlan plan=mrCompiler.getMRPlan();
  POPackageAnnotator pkgAnnotator=new POPackageAnnotator(plan);
  pkgAnnotator.visit();
  if (System.getenv(""String_Node_Str"").length() == 0 || System.getenv(""String_Node_Str"").length() == 0) {
    System.out.println(""String_Node_Str"");
    LOG.error(""String_Node_Str"");
    System.exit(1);
  }
  if (bcaster == null) {
    bcaster=new BroadCastServer();
    bcaster.startBroadcastServer(Integer.parseInt(System.getenv(""String_Node_Str"")));
    bcaster.addResource(""String_Node_Str"",PigStorage.required_fields);
  }
  startSparkIfNeeded();
  Map<Class<? extends PhysicalOperator>,POConverter> convertMap=new HashMap<Class<? extends PhysicalOperator>,POConverter>();
  convertMap.put(POLoad.class,new LoadConverter(pigContext,physicalPlan,sparkContext));
  convertMap.put(POStore.class,new StoreConverter(pigContext));
  convertMap.put(POForEach.class,new ForEachConverter());
  convertMap.put(POFilter.class,new FilterConverter());
  convertMap.put(POPackage.class,new PackageConverter());
  convertMap.put(POCache.class,cacheConverter);
  convertMap.put(POLocalRearrange.class,new LocalRearrangeConverter());
  convertMap.put(POGlobalRearrange.class,new GlobalRearrangeConverter());
  convertMap.put(POLimit.class,new LimitConverter());
  convertMap.put(PODistinct.class,new DistinctConverter());
  convertMap.put(POUnion.class,new UnionConverter(sparkContext));
  convertMap.put(POSort.class,new SortConverter());
  convertMap.put(POSplit.class,new SplitConverter());
  Map<OperatorKey,RDD<Tuple>> rdds=new HashMap<OperatorKey,RDD<Tuple>>();
  SparkStats stats=new SparkStats();
  LinkedList<POStore> stores=PlanHelper.getPhysicalOperators(physicalPlan,POStore.class);
  for (  POStore poStore : stores) {
    physicalToRDD(physicalPlan,poStore,rdds,convertMap);
    stats.addOutputInfo(poStore,1,1,true,c);
  }
  return stats;
}","@Override public PigStats launchPig(PhysicalPlan physicalPlan,String grpName,PigContext pigContext) throws Exception {
  LOG.info(""String_Node_Str"");
  LOG.debug(physicalPlan);
  Configuration c=SparkUtil.newJobConf(pigContext);
  c.set(PigConstants.LOCAL_CODE_DIR,System.getProperty(""String_Node_Str""));
  SchemaTupleBackend.initialize(c,pigContext);
  MRCompiler mrCompiler=new MRCompiler(physicalPlan,pigContext);
  mrCompiler.compile();
  MROperPlan plan=mrCompiler.getMRPlan();
  POPackageAnnotator pkgAnnotator=new POPackageAnnotator(plan);
  pkgAnnotator.visit();
  if (System.getenv(""String_Node_Str"").length() == 0 || System.getenv(""String_Node_Str"").length() == 0) {
    System.out.println(""String_Node_Str"");
    LOG.error(""String_Node_Str"");
    System.exit(1);
  }
  if (bcaster == null) {
    bcaster=Main.bcaster;
    bcaster.addResource(""String_Node_Str"",PigStorage.required_fields);
  }
  startSparkIfNeeded();
  Map<Class<? extends PhysicalOperator>,POConverter> convertMap=new HashMap<Class<? extends PhysicalOperator>,POConverter>();
  convertMap.put(POLoad.class,new LoadConverter(pigContext,physicalPlan,sparkContext));
  convertMap.put(POStore.class,new StoreConverter(pigContext));
  convertMap.put(POForEach.class,new ForEachConverter());
  convertMap.put(POFilter.class,new FilterConverter());
  convertMap.put(POPackage.class,new PackageConverter());
  convertMap.put(POCache.class,cacheConverter);
  convertMap.put(POLocalRearrange.class,new LocalRearrangeConverter());
  convertMap.put(POGlobalRearrange.class,new GlobalRearrangeConverter());
  convertMap.put(POLimit.class,new LimitConverter());
  convertMap.put(PODistinct.class,new DistinctConverter());
  convertMap.put(POUnion.class,new UnionConverter(sparkContext));
  convertMap.put(POSort.class,new SortConverter());
  convertMap.put(POSplit.class,new SplitConverter());
  Map<OperatorKey,RDD<Tuple>> rdds=new HashMap<OperatorKey,RDD<Tuple>>();
  SparkStats stats=new SparkStats();
  LinkedList<POStore> stores=PlanHelper.getPhysicalOperators(physicalPlan,POStore.class);
  for (  POStore poStore : stores) {
    physicalToRDD(physicalPlan,poStore,rdds,convertMap);
    stats.addOutputInfo(poStore,1,1,true,c);
  }
  return stats;
}",0.9768365320979484
117509,"@SuppressWarnings(""String_Node_Str"") public void prepareToRead(RecordReader reader,PigSplit split) throws IOException {
  this.reader=reader;
  UDFContext udfc=UDFContext.getUDFContext();
  Properties p=udfc.getUDFProperties(this.getClass(),new String[]{udfcSignature});
  String strSchema=p.getProperty(SCHEMA_SIGNATURE);
  if (strSchema == null) {
    BroadCastClient bc=new BroadCastClient(System.getenv(""String_Node_Str""),Integer.parseInt(System.getenv(""String_Node_Str"")));
    p=(Properties)bc.getBroadCastMessage(""String_Node_Str"");
    strSchema=p.getProperty(SCHEMA_SIGNATURE);
  }
  schema=new ResourceSchema(Utils.getSchemaFromString(strSchema));
  jsonFactory=new JsonFactory();
}","@SuppressWarnings(""String_Node_Str"") public void prepareToRead(RecordReader reader,PigSplit split) throws IOException {
  this.reader=reader;
  UDFContext udfc=UDFContext.getUDFContext();
  Properties p=udfc.getUDFProperties(this.getClass(),new String[]{udfcSignature});
  String strSchema=p.getProperty(SCHEMA_SIGNATURE);
  if (strSchema == null) {
    BroadCastClient bc=new BroadCastClient(System.getenv(""String_Node_Str""),Integer.parseInt(System.getenv(""String_Node_Str"")));
    p=(Properties)bc.getBroadCastMessage(""String_Node_Str"");
    p=(Properties)bc.getBroadCastMessage(""String_Node_Str"");
    strSchema=p.getProperty(SCHEMA_SIGNATURE);
  }
  schema=new ResourceSchema(Utils.getSchemaFromString(strSchema));
  jsonFactory=new JsonFactory();
}",0.9577854671280276
117510,"public ResourceSchema getSchema(String location,Job job) throws IOException {
  ResourceSchema s;
  if (schema != null) {
    s=schema;
  }
 else {
    s=(new JsonMetadata()).getSchema(location,job,true);
    if (s == null) {
      throw new IOException(""String_Node_Str"" + location);
    }
  }
  UDFContext udfc=UDFContext.getUDFContext();
  Properties p=udfc.getUDFProperties(this.getClass(),new String[]{udfcSignature});
  p.setProperty(SCHEMA_SIGNATURE,s.toString());
  try {
    if (SparkLauncher.bcaster != null) {
      SparkLauncher.bcaster.addResource(""String_Node_Str"",p);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return s;
}","public ResourceSchema getSchema(String location,Job job) throws IOException {
  ResourceSchema s;
  if (schema != null) {
    s=schema;
  }
 else {
    s=(new JsonMetadata()).getSchema(location,job,true);
    if (s == null) {
      throw new IOException(""String_Node_Str"" + location);
    }
  }
  UDFContext udfc=UDFContext.getUDFContext();
  Properties p=udfc.getUDFProperties(this.getClass(),new String[]{udfcSignature});
  p.setProperty(SCHEMA_SIGNATURE,s.toString());
  try {
    if (SparkLauncher.bcaster != null) {
      SparkLauncher.bcaster.addResource(""String_Node_Str"",""String_Node_Str"",p);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return s;
}",0.9865470852017936
117511,"@Override public void prepareToWrite(RecordWriter writer) throws IOException {
  this.writer=writer;
  UDFContext udfc=UDFContext.getUDFContext();
  Properties p=udfc.getUDFProperties(this.getClass(),new String[]{udfcSignature});
  String strSchema=p.getProperty(SCHEMA_SIGNATURE);
  if (strSchema == null) {
    throw new IOException(""String_Node_Str"");
  }
  schema=new ResourceSchema(Utils.getSchemaFromString(strSchema));
  jsonFactory=new JsonFactory();
}","@Override public void prepareToWrite(RecordWriter writer) throws IOException {
  this.writer=writer;
  UDFContext udfc=UDFContext.getUDFContext();
  Properties p=udfc.getUDFProperties(this.getClass(),new String[]{udfcSignature});
  String strSchema=p.getProperty(SCHEMA_SIGNATURE);
  if (strSchema == null) {
    BroadCastClient bc=new BroadCastClient(System.getenv(""String_Node_Str""),Integer.parseInt(System.getenv(""String_Node_Str"")));
    p=(Properties)bc.getBroadCastMessage(""String_Node_Str"");
    strSchema=p.getProperty(SCHEMA_SIGNATURE);
  }
  schema=new ResourceSchema(Utils.getSchemaFromString(strSchema));
  jsonFactory=new JsonFactory();
}",0.7632763276327633
117512,"@Override public void checkSchema(ResourceSchema s) throws IOException {
  UDFContext udfc=UDFContext.getUDFContext();
  Properties p=udfc.getUDFProperties(this.getClass(),new String[]{udfcSignature});
  p.setProperty(SCHEMA_SIGNATURE,s.toString());
}","@Override public void checkSchema(ResourceSchema s) throws IOException {
  UDFContext udfc=UDFContext.getUDFContext();
  Properties p=udfc.getUDFProperties(this.getClass(),new String[]{udfcSignature});
  p.setProperty(SCHEMA_SIGNATURE,s.toString());
  try {
    if (SparkLauncher.bcaster != null) {
      SparkLauncher.bcaster.addResource(""String_Node_Str"",p);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.741506646971935
117513,"@Override public RDD<Tuple> convert(List<RDD<Tuple>> predecessors,POGlobalRearrange physicalOperator) throws IOException {
  SparkUtil.assertPredecessorSizeGreaterThan(predecessors,physicalOperator,0);
  int parallelism=SparkUtil.getParallelism(predecessors,physicalOperator);
  String reducers=System.getenv(""String_Node_Str"");
  if (reducers != null) {
    parallelism=Integer.parseInt(reducers);
  }
  LOG.info(""String_Node_Str"" + parallelism);
  if (predecessors.size() == 1) {
    return predecessors.get(0).groupBy(GET_KEY_FUNCTION,parallelism,SparkUtil.getManifest(Object.class)).map(GROUP_TUPLE_FUNCTION,SparkUtil.getManifest(Tuple.class));
  }
 else {
    ClassTag<Tuple2<Object,Tuple>> tuple2ClassManifest=SparkUtil.<Object,Tuple>getTuple2Manifest();
    List<RDD<Tuple2<Object,Tuple>>> rddPairs=new ArrayList();
    for (    RDD<Tuple> rdd : predecessors) {
      RDD<Tuple2<Object,Tuple>> rddPair=rdd.map(TO_KEY_VALUE_FUNCTION,tuple2ClassManifest);
      rddPairs.add(rddPair);
    }
    CoGroupedRDD<Object> coGroupedRDD=new CoGroupedRDD<Object>((Seq<RDD<? extends Product2<Object,?>>>)(Object)(JavaConversions.asScalaBuffer(rddPairs).toSeq()),new HashPartitioner(parallelism));
    RDD<Tuple2<Object,Seq<Seq<Tuple>>>> rdd=(RDD<Tuple2<Object,Seq<Seq<Tuple>>>>)(Object)coGroupedRDD;
    return rdd.map(TO_GROUP_KEY_VALUE_FUNCTION,SparkUtil.getManifest(Tuple.class));
  }
}","@Override public RDD<Tuple> convert(List<RDD<Tuple>> predecessors,POGlobalRearrange physicalOperator) throws IOException {
  SparkUtil.assertPredecessorSizeGreaterThan(predecessors,physicalOperator,0);
  int parallelism=SparkUtil.getParallelism(predecessors,physicalOperator);
  parallelism=100;
  String reducers=System.getenv(""String_Node_Str"");
  if (reducers != null) {
    parallelism=Integer.parseInt(reducers);
  }
  LOG.info(""String_Node_Str"" + parallelism);
  if (predecessors.size() == 1) {
    return predecessors.get(0).groupBy(GET_KEY_FUNCTION,parallelism,SparkUtil.getManifest(Object.class)).map(GROUP_TUPLE_FUNCTION,SparkUtil.getManifest(Tuple.class));
  }
 else {
    ClassTag<Tuple2<Object,Tuple>> tuple2ClassManifest=SparkUtil.<Object,Tuple>getTuple2Manifest();
    List<RDD<Tuple2<Object,Tuple>>> rddPairs=new ArrayList();
    for (    RDD<Tuple> rdd : predecessors) {
      RDD<Tuple2<Object,Tuple>> rddPair=rdd.map(TO_KEY_VALUE_FUNCTION,tuple2ClassManifest);
      rddPairs.add(rddPair);
    }
    CoGroupedRDD<Object> coGroupedRDD=new CoGroupedRDD<Object>((Seq<RDD<? extends Product2<Object,?>>>)(Object)(JavaConversions.asScalaBuffer(rddPairs).toSeq()),new HashPartitioner(parallelism));
    RDD<Tuple2<Object,Seq<Seq<Tuple>>>> rdd=(RDD<Tuple2<Object,Seq<Seq<Tuple>>>>)(Object)coGroupedRDD;
    return rdd.map(TO_GROUP_KEY_VALUE_FUNCTION,SparkUtil.getManifest(Tuple.class));
  }
}",0.9931826336562612
117514,"@Override public Tuple apply(Tuple t){
  Result result;
  try {
    physicalOperator.setInputs(null);
    physicalOperator.attachInput(t);
    result=physicalOperator.getNextTuple();
    if (result == null) {
      throw new RuntimeException(""String_Node_Str"" + t);
    }
switch (result.returnStatus) {
case POStatus.STATUS_OK:
      Tuple resultTuple=(Tuple)result.result;
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"" + resultTuple);
  return resultTuple;
default :
throw new RuntimeException(""String_Node_Str"" + physicalOperator + ""String_Node_Str""+ result);
}
}
 catch (ExecException e) {
throw new RuntimeException(""String_Node_Str"" + t,e);
}
}","@Override public Tuple apply(Tuple t){
  Result result;
  try {
    physicalOperator.setInputs(null);
    physicalOperator.attachInput(t);
    result=physicalOperator.getNextTuple();
    if (result == null) {
      throw new RuntimeException(""String_Node_Str"" + t);
    }
switch (result.returnStatus) {
case POStatus.STATUS_OK:
      Tuple resultTuple=(Tuple)result.result;
    return resultTuple;
default :
  throw new RuntimeException(""String_Node_Str"" + physicalOperator + ""String_Node_Str""+ result);
}
}
 catch (ExecException e) {
throw new RuntimeException(""String_Node_Str"" + t,e);
}
}",0.9028662420382164
117515,"@Override public RDD<Tuple> convert(List<RDD<Tuple>> predecessors,POLocalRearrange physicalOperator) throws IOException {
  SparkUtil.assertPredecessorSize(predecessors,physicalOperator,1);
  RDD<Tuple> rdd=predecessors.get(0);
  return rdd.map(new LocalRearrangeFunction(physicalOperator),SparkUtil.getManifest(Tuple.class));
}","@Override public RDD<Tuple> convert(List<RDD<Tuple>> predecessors,POLocalRearrange physicalOperator) throws IOException {
  SparkUtil.assertPredecessorSize(predecessors,physicalOperator,1);
  RDD<Tuple> rdd=predecessors.get(0).repartition(100);
  return rdd.map(new LocalRearrangeFunction(physicalOperator),SparkUtil.getManifest(Tuple.class));
}",0.974739970282318
117516,"@Override public Tuple apply(final Tuple t){
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"" + t);
  Result result;
  try {
    PigNullableWritable key=new PigNullableWritable(){
      public Object getValueAsPigType(){
        try {
          Object keyTuple=t.get(0);
          return keyTuple;
        }
 catch (        ExecException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    final Iterator<Tuple> bagIterator=(Iterator<Tuple>)t.get(1);
    Iterator<NullableTuple> iterator=new Iterator<NullableTuple>(){
      public boolean hasNext(){
        return bagIterator.hasNext();
      }
      public NullableTuple next(){
        try {
          Tuple next=bagIterator.next();
          NullableTuple nullableTuple=new NullableTuple((Tuple)next.get(2));
          nullableTuple.setIndex(((Number)next.get(0)).byteValue());
          return nullableTuple;
        }
 catch (        ExecException e) {
          throw new RuntimeException(e);
        }
      }
      public void remove(){
        throw new UnsupportedOperationException();
      }
    }
;
    physicalOperator.setInputs(null);
    physicalOperator.attachInput(key,iterator);
    result=physicalOperator.getNextTuple();
  }
 catch (  ExecException e) {
    throw new RuntimeException(""String_Node_Str"" + t,e);
  }
  if (result == null) {
    throw new RuntimeException(""String_Node_Str"" + t);
  }
  Tuple out;
switch (result.returnStatus) {
case POStatus.STATUS_OK:
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"" + result.result);
  out=(Tuple)result.result;
break;
case POStatus.STATUS_NULL:
out=null;
break;
default :
throw new RuntimeException(""String_Node_Str"" + physicalOperator + ""String_Node_Str""+ result+ ""String_Node_Str""+ result.returnStatus);
}
if (LOG.isDebugEnabled()) LOG.debug(""String_Node_Str"" + out);
return out;
}","@Override public Tuple apply(final Tuple t){
  Result result;
  try {
    PigNullableWritable key=new PigNullableWritable(){
      public Object getValueAsPigType(){
        try {
          Object keyTuple=t.get(0);
          return keyTuple;
        }
 catch (        ExecException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    final Iterator<Tuple> bagIterator=(Iterator<Tuple>)t.get(1);
    Iterator<NullableTuple> iterator=new Iterator<NullableTuple>(){
      public boolean hasNext(){
        return bagIterator.hasNext();
      }
      public NullableTuple next(){
        try {
          Tuple next=bagIterator.next();
          NullableTuple nullableTuple=new NullableTuple((Tuple)next.get(2));
          nullableTuple.setIndex(((Number)next.get(0)).byteValue());
          return nullableTuple;
        }
 catch (        ExecException e) {
          throw new RuntimeException(e);
        }
      }
      public void remove(){
        throw new UnsupportedOperationException();
      }
    }
;
    physicalOperator.setInputs(null);
    physicalOperator.attachInput(key,iterator);
    result=physicalOperator.getNextTuple();
  }
 catch (  ExecException e) {
    throw new RuntimeException(""String_Node_Str"" + t,e);
  }
  if (result == null) {
    throw new RuntimeException(""String_Node_Str"" + t);
  }
  Tuple out;
switch (result.returnStatus) {
case POStatus.STATUS_OK:
    out=(Tuple)result.result;
  break;
case POStatus.STATUS_NULL:
out=null;
break;
default :
throw new RuntimeException(""String_Node_Str"" + physicalOperator + ""String_Node_Str""+ result+ ""String_Node_Str""+ result.returnStatus);
}
return out;
}",0.9269406392694064
117517,"@Override public PigStats launchPig(PhysicalPlan physicalPlan,String grpName,PigContext pigContext) throws Exception {
  LOG.info(""String_Node_Str"");
  LOG.debug(physicalPlan);
  Configuration c=SparkUtil.newJobConf(pigContext);
  c.set(PigConstants.LOCAL_CODE_DIR,System.getProperty(""String_Node_Str""));
  SchemaTupleBackend.initialize(c,pigContext);
  MRCompiler mrCompiler=new MRCompiler(physicalPlan,pigContext);
  mrCompiler.compile();
  MROperPlan plan=mrCompiler.getMRPlan();
  POPackageAnnotator pkgAnnotator=new POPackageAnnotator(plan);
  pkgAnnotator.visit();
  startSparkIfNeeded();
  Map<Class<? extends PhysicalOperator>,POConverter> convertMap=new HashMap<Class<? extends PhysicalOperator>,POConverter>();
  convertMap.put(POLoad.class,new LoadConverter(pigContext,physicalPlan,sparkContext));
  convertMap.put(POStore.class,new StoreConverter(pigContext));
  convertMap.put(POForEach.class,new ForEachConverter());
  convertMap.put(POFilter.class,new FilterConverter());
  convertMap.put(POPackage.class,new PackageConverter());
  convertMap.put(POCache.class,cacheConverter);
  convertMap.put(POLocalRearrange.class,new LocalRearrangeConverter());
  convertMap.put(POGlobalRearrange.class,new GlobalRearrangeConverter());
  convertMap.put(POLimit.class,new LimitConverter());
  convertMap.put(PODistinct.class,new DistinctConverter());
  convertMap.put(POUnion.class,new UnionConverter(sparkContext));
  convertMap.put(POSort.class,new SortConverter());
  convertMap.put(POSplit.class,new SplitConverter());
  Map<OperatorKey,RDD<Tuple>> rdds=new HashMap<OperatorKey,RDD<Tuple>>();
  SparkStats stats=new SparkStats();
  LinkedList<POStore> stores=PlanHelper.getPhysicalOperators(physicalPlan,POStore.class);
  for (  POStore poStore : stores) {
    physicalToRDD(physicalPlan,poStore,rdds,convertMap);
    stats.addOutputInfo(poStore,1,1,true,c);
  }
  return stats;
}","@Override public PigStats launchPig(PhysicalPlan physicalPlan,String grpName,PigContext pigContext) throws Exception {
  LOG.info(""String_Node_Str"");
  LOG.debug(physicalPlan);
  Configuration c=SparkUtil.newJobConf(pigContext);
  c.set(PigConstants.LOCAL_CODE_DIR,System.getProperty(""String_Node_Str""));
  SchemaTupleBackend.initialize(c,pigContext);
  MRCompiler mrCompiler=new MRCompiler(physicalPlan,pigContext);
  mrCompiler.compile();
  MROperPlan plan=mrCompiler.getMRPlan();
  POPackageAnnotator pkgAnnotator=new POPackageAnnotator(plan);
  pkgAnnotator.visit();
  if (System.getenv(""String_Node_Str"").length() == 0 || System.getenv(""String_Node_Str"").length() == 0) {
    System.out.println(""String_Node_Str"");
    LOG.error(""String_Node_Str"");
    System.exit(1);
  }
  bcaster=new BroadCastServer();
  bcaster.startBroadcastServer(Integer.parseInt(System.getenv(""String_Node_Str"")));
  bcaster.addResource(""String_Node_Str"",PigStorage.required_fields);
  startSparkIfNeeded();
  Map<Class<? extends PhysicalOperator>,POConverter> convertMap=new HashMap<Class<? extends PhysicalOperator>,POConverter>();
  convertMap.put(POLoad.class,new LoadConverter(pigContext,physicalPlan,sparkContext));
  convertMap.put(POStore.class,new StoreConverter(pigContext));
  convertMap.put(POForEach.class,new ForEachConverter());
  convertMap.put(POFilter.class,new FilterConverter());
  convertMap.put(POPackage.class,new PackageConverter());
  convertMap.put(POCache.class,cacheConverter);
  convertMap.put(POLocalRearrange.class,new LocalRearrangeConverter());
  convertMap.put(POGlobalRearrange.class,new GlobalRearrangeConverter());
  convertMap.put(POLimit.class,new LimitConverter());
  convertMap.put(PODistinct.class,new DistinctConverter());
  convertMap.put(POUnion.class,new UnionConverter(sparkContext));
  convertMap.put(POSort.class,new SortConverter());
  convertMap.put(POSplit.class,new SplitConverter());
  Map<OperatorKey,RDD<Tuple>> rdds=new HashMap<OperatorKey,RDD<Tuple>>();
  SparkStats stats=new SparkStats();
  LinkedList<POStore> stores=PlanHelper.getPhysicalOperators(physicalPlan,POStore.class);
  for (  POStore poStore : stores) {
    physicalToRDD(physicalPlan,poStore,rdds,convertMap);
    stats.addOutputInfo(poStore,1,1,true,c);
  }
  return stats;
}",0.9056422569027612
117518,"@Override public RequiredFieldResponse pushProjection(RequiredFieldList requiredFieldList) throws FrontendException {
  if (requiredFieldList == null)   return null;
  if (requiredFieldList.getFields() != null) {
    int lastColumn=-1;
    for (    RequiredField rf : requiredFieldList.getFields()) {
      if (rf.getIndex() > lastColumn) {
        lastColumn=rf.getIndex();
      }
    }
    mRequiredColumns=new boolean[lastColumn + 1];
    for (    RequiredField rf : requiredFieldList.getFields()) {
      if (rf.getIndex() != -1)       mRequiredColumns[rf.getIndex()]=true;
    }
    Properties p=UDFContext.getUDFContext().getUDFProperties(this.getClass());
    try {
      p.setProperty(signature,ObjectSerializer.serialize(mRequiredColumns));
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return new RequiredFieldResponse(true);
}","@Override public RequiredFieldResponse pushProjection(RequiredFieldList requiredFieldList) throws FrontendException {
  if (requiredFieldList == null)   return null;
  if (requiredFieldList.getFields() != null) {
    int lastColumn=-1;
    for (    RequiredField rf : requiredFieldList.getFields()) {
      if (rf.getIndex() > lastColumn) {
        lastColumn=rf.getIndex();
      }
    }
    mRequiredColumns=new boolean[lastColumn + 1];
    for (    RequiredField rf : requiredFieldList.getFields()) {
      if (rf.getIndex() != -1)       mRequiredColumns[rf.getIndex()]=true;
    }
    try {
      required_fields=mRequiredColumns;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    Properties p=UDFContext.getUDFContext().getUDFProperties(this.getClass());
    try {
      p.setProperty(signature,ObjectSerializer.serialize(mRequiredColumns));
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return new RequiredFieldResponse(true);
}",0.938818565400844
117519,"@Override public Tuple getNext() throws IOException {
  mProtoTuple=new ArrayList<Object>();
  if (!mRequiredColumnsInitialized) {
    if (signature != null) {
      Properties p=UDFContext.getUDFContext().getUDFProperties(this.getClass());
      mRequiredColumns=(boolean[])ObjectSerializer.deserialize(p.getProperty(signature));
    }
    mRequiredColumnsInitialized=true;
  }
  if (tagFile) {
    mProtoTuple.add(new DataByteArray(sourcePath.getName()));
  }
 else   if (tagPath) {
    mProtoTuple.add(new DataByteArray(sourcePath.toString()));
  }
  try {
    boolean notDone=in.nextKeyValue();
    if (!notDone) {
      return null;
    }
    Text value=(Text)in.getCurrentValue();
    byte[] buf=value.getBytes();
    int len=value.getLength();
    int start=0;
    int fieldID=0;
    for (int i=0; i < len; i++) {
      if (buf[i] == fieldDel) {
        if (mRequiredColumns == null || (mRequiredColumns.length > fieldID && mRequiredColumns[fieldID]))         addTupleValue(mProtoTuple,buf,start,i);
        start=i + 1;
        fieldID++;
      }
    }
    if (start <= len && (mRequiredColumns == null || (mRequiredColumns.length > fieldID && mRequiredColumns[fieldID]))) {
      addTupleValue(mProtoTuple,buf,start,len);
    }
    Tuple t=mTupleFactory.newTupleNoCopy(mProtoTuple);
    return dontLoadSchema ? t : applySchema(t);
  }
 catch (  InterruptedException e) {
    int errCode=6018;
    String errMsg=""String_Node_Str"";
    throw new ExecException(errMsg,errCode,PigException.REMOTE_ENVIRONMENT,e);
  }
}","@Override public Tuple getNext() throws IOException {
  mProtoTuple=new ArrayList<Object>();
  if (!mRequiredColumnsInitialized) {
    if (signature != null) {
      Properties p=UDFContext.getUDFContext().getUDFProperties(this.getClass());
      mRequiredColumns=(boolean[])ObjectSerializer.deserialize(p.getProperty(signature));
      if (mRequiredColumns == null) {
        try {
          BroadCastClient bcc=new BroadCastClient(System.getenv(""String_Node_Str""),Integer.parseInt(System.getenv(""String_Node_Str"")));
          boolean[] response=(boolean[])bcc.getBroadCastMessage(""String_Node_Str"");
          mRequiredColumns=response;
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    mRequiredColumnsInitialized=true;
  }
  if (tagFile) {
    mProtoTuple.add(new DataByteArray(sourcePath.getName()));
  }
 else   if (tagPath) {
    mProtoTuple.add(new DataByteArray(sourcePath.toString()));
  }
  try {
    boolean notDone=in.nextKeyValue();
    if (!notDone) {
      return null;
    }
    Text value=(Text)in.getCurrentValue();
    byte[] buf=value.getBytes();
    int len=value.getLength();
    int start=0;
    int fieldID=0;
    for (int i=0; i < len; i++) {
      if (buf[i] == fieldDel) {
        if (mRequiredColumns == null || (mRequiredColumns.length > fieldID && mRequiredColumns[fieldID]))         addTupleValue(mProtoTuple,buf,start,i);
        start=i + 1;
        fieldID++;
      }
    }
    if (start <= len && (mRequiredColumns == null || (mRequiredColumns.length > fieldID && mRequiredColumns[fieldID]))) {
      addTupleValue(mProtoTuple,buf,start,len);
    }
    Tuple t=mTupleFactory.newTupleNoCopy(mProtoTuple);
    return dontLoadSchema ? t : applySchema(t);
  }
 catch (  InterruptedException e) {
    int errCode=6018;
    String errMsg=""String_Node_Str"";
    throw new ExecException(errMsg,errCode,PigException.REMOTE_ENVIRONMENT,e);
  }
}",0.8841799709724238
117520,"public String buildCacheOp(SourceLocation loc,LOCache cacheOp,String inputAlias) throws ParserValidationException {
  String newAlias=newOperatorKey();
  String alias=buildOp(loc,cacheOp,newAlias,inputAlias,null);
  operators.remove(newAlias);
  putOperator(inputAlias,cacheOp);
  return alias;
}","public String buildCacheOp(SourceLocation loc,LOCache cacheOp,String inputAlias) throws ParserValidationException {
  String newAlias=newOperatorKey();
  String alias=buildOp(loc,cacheOp,newAlias,inputAlias,null);
  operators.remove(newAlias);
  cacheOp.setAlias(inputAlias);
  putOperator(inputAlias,cacheOp);
  return alias;
}",0.9487179487179488
117521,"@Test public void testMergeSchemaErrorMessage() throws IOException {
  try {
    pigServer.registerQuery(""String_Node_Str"");
    pigServer.registerQuery(""String_Node_Str"");
    pigServer.registerQuery(""String_Node_Str"");
    pigServer.openIterator(""String_Node_Str"");
  }
 catch (  Exception e) {
    PigException pe=LogUtils.getPigException(e);
    Util.checkStrContainsSubStr(pe.getMessage(),""String_Node_Str"");
    Util.checkStrContainsSubStr(pe.getMessage(),""String_Node_Str"");
    return;
  }
  Assert.fail();
}","@Test public void testMergeSchemaErrorMessage() throws IOException {
  try {
    pigServer.registerQuery(""String_Node_Str"");
    pigServer.registerQuery(""String_Node_Str"");
    pigServer.registerQuery(""String_Node_Str"");
    pigServer.openIterator(""String_Node_Str"");
  }
 catch (  Exception e) {
    PigException pe=LogUtils.getPigException(e);
    Util.checkStrContainsSubStr(pe.getMessage(),""String_Node_Str"");
    return;
  }
  Assert.fail();
}",0.8734439834024896
117522,"@Test public void testErrorLogFile2() throws Exception {
  PrintWriter w=new PrintWriter(new FileWriter(PIG_FILE));
  w.println(""String_Node_Str"" + INPUT_FILE + ""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.println(""String_Node_Str"" + OUTPUT_FILE + ""String_Node_Str"");
  w.close();
  try {
    String[] args={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PIG_FILE};
    PigStats stats=PigRunner.run(args,null);
    assertTrue(!stats.isSuccessful());
    Properties props=stats.getPigProperties();
    String logfile=props.getProperty(""String_Node_Str"");
    File f=new File(logfile);
    assertTrue(f.exists());
  }
  finally {
    new File(PIG_FILE).delete();
  }
}","@Test public void testErrorLogFile2() throws Exception {
  PrintWriter w=new PrintWriter(new FileWriter(PIG_FILE));
  w.println(""String_Node_Str"" + INPUT_FILE + ""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.println(""String_Node_Str"" + OUTPUT_FILE + ""String_Node_Str"");
  w.close();
  try {
    String[] args={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",PIG_FILE};
    PigStats stats=PigRunner.run(args,null);
    assertTrue(!stats.isSuccessful());
    Properties props=stats.getPigProperties();
    if (props != null) {
      String logfile=props.getProperty(""String_Node_Str"");
      File f=new File(logfile);
      assertTrue(f.exists());
    }
  }
  finally {
    new File(PIG_FILE).delete();
  }
}",0.9551601423487543
117523,"@Override public void execute(SensorContext context){
  if (!hasActiveFindbugsRules() && !hasActiveFbContribRules() && !hasActiveFindSecBugsRules()&& !hasActiveFindSecBugsJspRules()) {
    return;
  }
  Collection<ReportedBug> collection=executor.execute(hasActiveFbContribRules(),hasActiveFindSecBugsRules() || hasActiveFindSecBugsJspRules());
  Set<String> locationReported=new HashSet<>();
  for (  ReportedBug bugInstance : collection) {
    try {
      String[] repos={FindbugsRulesDefinition.REPOSITORY_KEY,FbContribRulesDefinition.REPOSITORY_KEY,FindSecurityBugsRulesDefinition.REPOSITORY_KEY,FindSecurityBugsJspRulesDefinition.REPOSITORY_KEY};
      ActiveRule rule=null;
      for (      String repoKey : repos) {
        rule=ruleFinder.findByInternalKey(repoKey,bugInstance.getType());
        if (rule != null) {
          break;
        }
      }
      if (rule == null) {
        LOG.warn(""String_Node_Str"",bugInstance.getType());
        continue;
      }
      String className=bugInstance.getClassName();
      String longMessage=bugInstance.getMessage();
      int line=bugInstance.getStartLine();
      InputFile resource=null;
      resource=byteCodeResourceLocator.findJavaClassFile(className,this.fs);
      if (resource != null) {
        insertIssue(rule,resource,line,longMessage);
        continue;
      }
      File classFile=findOriginalClassForBug(bugInstance.getClassName());
      if (classFile != null) {
        SmapParser.SmapLocation location=byteCodeResourceLocator.extractSmapLocation(className,line,classFile);
        if (location != null) {
          if (!location.isPrimaryFile)           continue;
          resource=byteCodeResourceLocator.buildInputFile(location.fileInfo.path,fs);
          if (resource != null) {
            insertIssue(rule,resource,location.line,longMessage);
            continue;
          }
        }
 else {
          resource=byteCodeResourceLocator.findTemplateFile(className,this.fs);
          if (resource != null) {
            insertIssue(rule,resource,line,longMessage);
            continue;
          }
        }
      }
      LOG.warn(""String_Node_Str"" + className + ""String_Node_Str"");
    }
 catch (    Exception e) {
      String bugInstanceDebug=String.format(""String_Node_Str"",bugInstance.getType(),bugInstance.getStartLine());
      LOG.warn(""String_Node_Str"" + bugInstanceDebug,e);
    }
  }
}","@Override public void execute(SensorContext context){
  if (!hasActiveFindbugsRules() && !hasActiveFbContribRules() && !hasActiveFindSecBugsRules()&& !hasActiveFindSecBugsJspRules()) {
    return;
  }
  Collection<ReportedBug> collection=executor.execute(hasActiveFbContribRules(),hasActiveFindSecBugsRules() || hasActiveFindSecBugsJspRules());
  Set<String> locationReported=new HashSet<>();
  for (  ReportedBug bugInstance : collection) {
    try {
      String[] repos={FindbugsRulesDefinition.REPOSITORY_KEY,FbContribRulesDefinition.REPOSITORY_KEY,FindSecurityBugsRulesDefinition.REPOSITORY_KEY,FindSecurityBugsJspRulesDefinition.REPOSITORY_KEY};
      ActiveRule rule=null;
      for (      String repoKey : repos) {
        rule=ruleFinder.findByInternalKey(repoKey,bugInstance.getType());
        if (rule != null) {
          break;
        }
      }
      if (rule == null) {
        LOG.warn(""String_Node_Str"",bugInstance.getType());
        continue;
      }
      String className=bugInstance.getClassName();
      String longMessage=bugInstance.getMessage();
      int line=bugInstance.getStartLine();
      InputFile resource=null;
      resource=byteCodeResourceLocator.findJavaClassFile(className,this.fs);
      if (resource != null) {
        insertIssue(rule,resource,line,longMessage);
        continue;
      }
      File classFile=findOriginalClassForBug(bugInstance.getClassName());
      resource=byteCodeResourceLocator.findJavaOuterClassFile(className,classFile,this.fs);
      if (resource != null) {
        insertIssue(rule,resource,line,longMessage);
        continue;
      }
      if (classFile != null) {
        SmapParser.SmapLocation location=byteCodeResourceLocator.extractSmapLocation(className,line,classFile);
        if (location != null) {
          if (!location.isPrimaryFile)           continue;
          resource=byteCodeResourceLocator.buildInputFile(location.fileInfo.path,fs);
          if (resource != null) {
            insertIssue(rule,resource,location.line,longMessage);
            continue;
          }
        }
 else {
          resource=byteCodeResourceLocator.findTemplateFile(className,this.fs);
          if (resource != null) {
            insertIssue(rule,resource,line,longMessage);
            continue;
          }
        }
      }
      LOG.warn(""String_Node_Str"" + className + ""String_Node_Str"");
    }
 catch (    Exception e) {
      String bugInstanceDebug=String.format(""String_Node_Str"",bugInstance.getType(),bugInstance.getStartLine());
      LOG.warn(""String_Node_Str"" + bugInstanceDebug,e);
    }
  }
}",0.9595166163141994
117524,"public InputFile buildInputFile(String fileName,FileSystem fs){
  for (  String sourceDir : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    Iterable<InputFile> files=fs.inputFiles(fs.predicates().hasRelativePath(sourceDir + fileName));
    for (    InputFile f : files) {
      return f;
    }
  }
  return null;
}","public InputFile buildInputFile(String fileName,FileSystem fs){
  for (  String sourceDir : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + sourceDir + ""String_Node_Str""+ fileName);
    Iterable<InputFile> files=fs.inputFiles(fs.predicates().hasRelativePath(sourceDir + ""String_Node_Str"" + fileName));
    for (    InputFile f : files) {
      return f;
    }
  }
  return null;
}",0.8727272727272727
117525,"/** 
 * Map Java line number to JSP line number based on SMAP The smap can be either embedded in the class file or alternatively place in separate file.
 * @param className Class name
 * @param originalLine Line of code of the auto-generated Java line (.jsp -> .java -> .class)
 * @param classFile (Optional)
 * @return JSP line number
 */
public SmapParser.SmapLocation extractSmapLocation(String className,int originalLine,File classFile){
  try (InputStream in=new FileInputStream(classFile)){
    DebugExtensionExtractor debug=new DebugExtensionExtractor();
    return getJspLineNumberFromSmap(debug.getDebugExtFromClass(in),originalLine);
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + classFile.getPath());
  }
  LOG.debug(""String_Node_Str"" + className);
  File smapFile=new File(classFile.getPath() + ""String_Node_Str"");
  if (smapFile.exists()) {
    try (InputStream smapInputStream=new FileInputStream(smapFile)){
      return getJspLineNumberFromSmap(IOUtils.toString(smapInputStream),originalLine);
    }
 catch (    IOException e) {
      LOG.debug(""String_Node_Str"" + smapFile.getAbsolutePath());
      throw new RuntimeException(e);
    }
  }
  LOG.debug(""String_Node_Str"");
  return null;
}","/** 
 * Map Java line number to JSP line number based on SMAP The smap can be either embedded in the class file or alternatively place in separate file.
 * @param className Class name
 * @param originalLine Line of code of the auto-generated Java line (.jsp -> .java -> .class)
 * @param classFile (Optional)
 * @return JSP line number
 */
public SmapParser.SmapLocation extractSmapLocation(String className,int originalLine,File classFile){
  try (InputStream in=new FileInputStream(classFile)){
    DebugExtensionExtractor debug=new DebugExtensionExtractor();
    return getJspLineNumberFromSmap(debug.getDebugExtFromClass(in),originalLine);
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + classFile.getPath());
  }
  LOG.debug(""String_Node_Str"" + className);
  File smapFile=new File(classFile.getPath() + ""String_Node_Str"");
  if (smapFile.exists()) {
    try (InputStream smapInputStream=new FileInputStream(smapFile)){
      return getJspLineNumberFromSmap(IOUtils.toString(smapInputStream),originalLine);
    }
 catch (    IOException e) {
      LOG.debug(""String_Node_Str"" + smapFile.getAbsolutePath());
    }
  }
 else {
    LOG.debug(""String_Node_Str"");
  }
  return null;
}",0.9789517127527858
117526,"/** 
 * Find the file system location of a given class name.<br/> (ie : <code>test.SomeClass</code> ->  <code>src/main/java/test/SomeClass.java</code>)
 * @param className Class name to look for
 * @param fs File system
 * @return Java source file that conrespond to the class name specified.
 */
public InputFile findJavaClassFile(String className,FileSystem fs){
  int indexDollarSign=className.indexOf(""String_Node_Str"");
  if (indexDollarSign != -1) {
    className=className.substring(0,indexDollarSign);
  }
  Iterable<InputFile> files=fs.inputFiles(fs.predicates().hasRelativePath(""String_Node_Str"" + className.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
  for (  InputFile f : files) {
    return f;
  }
  return null;
}","/** 
 * Find the file system location of a given class name.<br/> (ie : <code>test.SomeClass</code> ->  <code>src/main/java/test/SomeClass.java</code>)
 * @param className Class name to look for
 * @param fs File system
 * @return Java source file that conrespond to the class name specified.
 */
public InputFile findJavaClassFile(String className,FileSystem fs){
  int indexDollarSign=className.indexOf(""String_Node_Str"");
  if (indexDollarSign != -1) {
    className=className.substring(0,indexDollarSign);
  }
  return buildInputFile(className.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",fs);
}",0.8031953522149601
117527,"@Test public void findTemplateFile_jasperFileName(){
  String prefixSource=""String_Node_Str"";
  String[] pages={""String_Node_Str"",""String_Node_Str""};
  for (  String jspPage : pages) {
    String name=""String_Node_Str"" + JspUtils.makeJavaPackage(jspPage);
    System.out.println(name);
    ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
    when(fs.inputFiles(Matchers.<FilePredicate>any())).thenReturn(new ArrayList<InputFile>());
    locator.findTemplateFile(name,fs);
    System.out.println(""String_Node_Str"" + prefixSource + jspPage);
    verify(predicates,times(1)).hasRelativePath(prefixSource + jspPage);
  }
}","@Test public void findTemplateFile_jasperFileName(){
  String prefixSource=""String_Node_Str"";
  String[] pages={""String_Node_Str"",""String_Node_Str""};
  for (  String jspPage : pages) {
    String name=""String_Node_Str"" + JspUtils.makeJavaPackage(jspPage);
    System.out.println(""String_Node_Str"" + name);
    ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
    locator.findTemplateFile(name,fsEmpty);
    System.out.println(""String_Node_Str"" + prefixSource + jspPage);
    verify(predicatesEmpty,times(1)).hasRelativePath(prefixSource + jspPage);
  }
}",0.6178184845961698
117528,"@Test public void findJavaClassFile_withInnerClass(){
  when(fs.inputFiles(Matchers.<FilePredicate>any())).thenReturn(new ArrayList<InputFile>());
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findJavaClassFile(""String_Node_Str"",fs);
  verify(predicates,times(1)).hasRelativePath(""String_Node_Str"");
}","@Test public void findJavaClassFile_withInnerClass(){
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findJavaClassFile(""String_Node_Str"",fsEmpty);
  verify(predicatesEmpty,times(1)).hasRelativePath(""String_Node_Str"");
}",0.3986135181975737
117529,"@Before public void setUp(){
  fs=mock(FileSystem.class);
  predicates=mock(FilePredicates.class);
  when(fs.predicates()).thenReturn(predicates);
}","@Before public void setUp(){
  fsEmpty=mock(FileSystem.class);
  predicatesEmpty=mock(FilePredicates.class);
  when(fsEmpty.predicates()).thenReturn(predicatesEmpty);
  when(fsEmpty.inputFiles(any(FilePredicate.class))).thenReturn(new ArrayList<InputFile>());
}",0.7237163814180929
117530,"@Test public void findJavaClassFile_normalClassName(){
  when(fs.inputFiles(Matchers.<FilePredicate>any())).thenReturn(new ArrayList<InputFile>());
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findJavaClassFile(""String_Node_Str"",fs);
  verify(predicates,times(1)).hasRelativePath(""String_Node_Str"");
}","@Test public void findJavaClassFile_normalClassName(){
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findJavaClassFile(""String_Node_Str"",fsEmpty);
  verify(predicatesEmpty,times(1)).hasRelativePath(""String_Node_Str"");
}",0.4006908462867012
117531,"@Test public void findTemplateFile_weblogicFileName(){
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  when(fs.inputFiles(Matchers.<FilePredicate>any())).thenReturn(new ArrayList<InputFile>());
  locator.findTemplateFile(""String_Node_Str"",fs);
  verify(predicates,times(1)).hasRelativePath(""String_Node_Str"");
}","@Test public void findTemplateFile_weblogicFileName(){
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findTemplateFile(""String_Node_Str"",fsEmpty);
  verify(predicatesEmpty,times(1)).hasRelativePath(""String_Node_Str"");
}",0.682842287694974
117532,"@Override public void execute(SensorContext context){
  if (!hasActiveFindbugsRules() && !hasActiveFbContribRules() && !hasActiveFindSecBugsRules()&& !hasActiveFindSecBugsJspRules()) {
    return;
  }
  Collection<ReportedBug> collection=executor.execute(hasActiveFbContribRules(),hasActiveFindSecBugsRules() || hasActiveFindSecBugsJspRules());
  Set<String> locationReported=new HashSet<>();
  for (  ReportedBug bugInstance : collection) {
    try {
      String[] repos={FindbugsRulesDefinition.REPOSITORY_KEY,FbContribRulesDefinition.REPOSITORY_KEY,FindSecurityBugsRulesDefinition.REPOSITORY_KEY,FindSecurityBugsJspRulesDefinition.REPOSITORY_KEY};
      ActiveRule rule=null;
      for (      String repoKey : repos) {
        rule=ruleFinder.findByInternalKey(repoKey,bugInstance.getType());
        if (rule != null) {
          break;
        }
      }
      if (rule == null) {
        LOG.warn(""String_Node_Str"",bugInstance.getType());
        continue;
      }
      String className=bugInstance.getClassName();
      String longMessage=bugInstance.getMessage();
      int line=bugInstance.getStartLine();
      InputFile resource=null;
      resource=byteCodeResourceLocator.findJavaClassFile(className,this.fs);
      if (resource != null) {
        insertIssue(rule,resource,line,longMessage);
        continue;
      }
      File classFile=findOriginalClassForBug(bugInstance.getClassName());
      if (classFile != null) {
        SmapParser.SmapLocation location=byteCodeResourceLocator.extractSmapLocation(className,line,classFile);
        if (location != null) {
          if (!location.isPrimaryFile)           continue;
          resource=byteCodeResourceLocator.buildInputFile(location.fileInfo.path,fs);
          if (resource != null) {
            insertIssue(rule,resource,location.line,longMessage);
            continue;
          }
        }
 else {
          resource=byteCodeResourceLocator.findTemplateFile(className,this.fs);
          if (resource != null) {
            insertIssue(rule,resource,line,longMessage);
            continue;
          }
        }
      }
      LOG.warn(""String_Node_Str"" + className + ""String_Node_Str"");
    }
 catch (    Exception e) {
      String bugInstanceDebug=String.format(""String_Node_Str"",bugInstance.getType(),bugInstance.getStartLine());
      LOG.warn(""String_Node_Str"" + bugInstanceDebug,e);
    }
  }
}","@Override public void execute(SensorContext context){
  if (!hasActiveFindbugsRules() && !hasActiveFbContribRules() && !hasActiveFindSecBugsRules()&& !hasActiveFindSecBugsJspRules()) {
    return;
  }
  Collection<ReportedBug> collection=executor.execute(hasActiveFbContribRules(),hasActiveFindSecBugsRules() || hasActiveFindSecBugsJspRules());
  Set<String> locationReported=new HashSet<>();
  for (  ReportedBug bugInstance : collection) {
    try {
      String[] repos={FindbugsRulesDefinition.REPOSITORY_KEY,FbContribRulesDefinition.REPOSITORY_KEY,FindSecurityBugsRulesDefinition.REPOSITORY_KEY,FindSecurityBugsJspRulesDefinition.REPOSITORY_KEY};
      ActiveRule rule=null;
      for (      String repoKey : repos) {
        rule=ruleFinder.findByInternalKey(repoKey,bugInstance.getType());
        if (rule != null) {
          break;
        }
      }
      if (rule == null) {
        LOG.warn(""String_Node_Str"",bugInstance.getType());
        continue;
      }
      String className=bugInstance.getClassName();
      String longMessage=bugInstance.getMessage();
      int line=bugInstance.getStartLine();
      InputFile resource=null;
      resource=byteCodeResourceLocator.findJavaClassFile(className,this.fs);
      if (resource != null) {
        insertIssue(rule,resource,line,longMessage);
        continue;
      }
      File classFile=findOriginalClassForBug(bugInstance.getClassName());
      resource=byteCodeResourceLocator.findJavaOuterClassFile(className,classFile,this.fs);
      if (resource != null) {
        insertIssue(rule,resource,line,longMessage);
        continue;
      }
      if (classFile != null) {
        SmapParser.SmapLocation location=byteCodeResourceLocator.extractSmapLocation(className,line,classFile);
        if (location != null) {
          if (!location.isPrimaryFile)           continue;
          resource=byteCodeResourceLocator.buildInputFile(location.fileInfo.path,fs);
          if (resource != null) {
            insertIssue(rule,resource,location.line,longMessage);
            continue;
          }
        }
 else {
          resource=byteCodeResourceLocator.findTemplateFile(className,this.fs);
          if (resource != null) {
            insertIssue(rule,resource,line,longMessage);
            continue;
          }
        }
      }
      LOG.warn(""String_Node_Str"" + className + ""String_Node_Str"");
    }
 catch (    Exception e) {
      String bugInstanceDebug=String.format(""String_Node_Str"",bugInstance.getType(),bugInstance.getStartLine());
      LOG.warn(""String_Node_Str"" + bugInstanceDebug,e);
    }
  }
}",0.9595166163141994
117533,"public InputFile buildInputFile(String fileName,FileSystem fs){
  for (  String sourceDir : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    Iterable<InputFile> files=fs.inputFiles(fs.predicates().hasRelativePath(sourceDir + fileName));
    for (    InputFile f : files) {
      return f;
    }
  }
  return null;
}","public InputFile buildInputFile(String fileName,FileSystem fs){
  for (  String sourceDir : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    System.out.println(""String_Node_Str"" + sourceDir + ""String_Node_Str""+ fileName);
    Iterable<InputFile> files=fs.inputFiles(fs.predicates().hasRelativePath(sourceDir + ""String_Node_Str"" + fileName));
    for (    InputFile f : files) {
      return f;
    }
  }
  return null;
}",0.8727272727272727
117534,"/** 
 * Map Java line number to JSP line number based on SMAP The smap can be either embedded in the class file or alternatively place in separate file.
 * @param className Class name
 * @param originalLine Line of code of the auto-generated Java line (.jsp -> .java -> .class)
 * @param classFile (Optional)
 * @return JSP line number
 */
public SmapParser.SmapLocation extractSmapLocation(String className,int originalLine,File classFile){
  try (InputStream in=new FileInputStream(classFile)){
    DebugExtensionExtractor debug=new DebugExtensionExtractor();
    return getJspLineNumberFromSmap(debug.getDebugExtFromClass(in),originalLine);
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + classFile.getPath());
  }
  LOG.debug(""String_Node_Str"" + className);
  File smapFile=new File(classFile.getPath() + ""String_Node_Str"");
  if (smapFile.exists()) {
    try (InputStream smapInputStream=new FileInputStream(smapFile)){
      return getJspLineNumberFromSmap(IOUtils.toString(smapInputStream),originalLine);
    }
 catch (    IOException e) {
      LOG.debug(""String_Node_Str"" + smapFile.getAbsolutePath());
      throw new RuntimeException(e);
    }
  }
  LOG.debug(""String_Node_Str"");
  return null;
}","/** 
 * Map Java line number to JSP line number based on SMAP The smap can be either embedded in the class file or alternatively place in separate file.
 * @param className Class name
 * @param originalLine Line of code of the auto-generated Java line (.jsp -> .java -> .class)
 * @param classFile (Optional)
 * @return JSP line number
 */
public SmapParser.SmapLocation extractSmapLocation(String className,int originalLine,File classFile){
  try (InputStream in=new FileInputStream(classFile)){
    DebugExtensionExtractor debug=new DebugExtensionExtractor();
    return getJspLineNumberFromSmap(debug.getDebugExtFromClass(in),originalLine);
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + classFile.getPath());
  }
  LOG.debug(""String_Node_Str"" + className);
  File smapFile=new File(classFile.getPath() + ""String_Node_Str"");
  if (smapFile.exists()) {
    try (InputStream smapInputStream=new FileInputStream(smapFile)){
      return getJspLineNumberFromSmap(IOUtils.toString(smapInputStream),originalLine);
    }
 catch (    IOException e) {
      LOG.debug(""String_Node_Str"" + smapFile.getAbsolutePath());
    }
  }
 else {
    LOG.debug(""String_Node_Str"");
  }
  return null;
}",0.9789517127527858
117535,"/** 
 * Find the file system location of a given class name.<br/> (ie : <code>test.SomeClass</code> ->  <code>src/main/java/test/SomeClass.java</code>)
 * @param className Class name to look for
 * @param fs File system
 * @return Java source file that conrespond to the class name specified.
 */
public InputFile findJavaClassFile(String className,FileSystem fs){
  int indexDollarSign=className.indexOf(""String_Node_Str"");
  if (indexDollarSign != -1) {
    className=className.substring(0,indexDollarSign);
  }
  Iterable<InputFile> files=fs.inputFiles(fs.predicates().hasRelativePath(""String_Node_Str"" + className.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
  for (  InputFile f : files) {
    return f;
  }
  return null;
}","/** 
 * Find the file system location of a given class name.<br/> (ie : <code>test.SomeClass</code> ->  <code>src/main/java/test/SomeClass.java</code>)
 * @param className Class name to look for
 * @param fs File system
 * @return Java source file that conrespond to the class name specified.
 */
public InputFile findJavaClassFile(String className,FileSystem fs){
  int indexDollarSign=className.indexOf(""String_Node_Str"");
  if (indexDollarSign != -1) {
    className=className.substring(0,indexDollarSign);
  }
  return buildInputFile(className.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",fs);
}",0.8031953522149601
117536,"@Test public void findTemplateFile_jasperFileName(){
  String prefixSource=""String_Node_Str"";
  String[] pages={""String_Node_Str"",""String_Node_Str""};
  for (  String jspPage : pages) {
    String name=""String_Node_Str"" + JspUtils.makeJavaPackage(jspPage);
    System.out.println(name);
    ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
    when(fs.inputFiles(Matchers.<FilePredicate>any())).thenReturn(new ArrayList<InputFile>());
    locator.findTemplateFile(name,fs);
    System.out.println(""String_Node_Str"" + prefixSource + jspPage);
    verify(predicates,times(1)).hasRelativePath(prefixSource + jspPage);
  }
}","@Test public void findTemplateFile_jasperFileName(){
  String prefixSource=""String_Node_Str"";
  String[] pages={""String_Node_Str"",""String_Node_Str""};
  for (  String jspPage : pages) {
    String name=""String_Node_Str"" + JspUtils.makeJavaPackage(jspPage);
    System.out.println(""String_Node_Str"" + name);
    ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
    locator.findTemplateFile(name,fsEmpty);
    System.out.println(""String_Node_Str"" + prefixSource + jspPage);
    verify(predicatesEmpty,times(1)).hasRelativePath(prefixSource + jspPage);
  }
}",0.6178184845961698
117537,"@Test public void findJavaClassFile_withInnerClass(){
  when(fs.inputFiles(Matchers.<FilePredicate>any())).thenReturn(new ArrayList<InputFile>());
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findJavaClassFile(""String_Node_Str"",fs);
  verify(predicates,times(1)).hasRelativePath(""String_Node_Str"");
}","@Test public void findJavaClassFile_withInnerClass(){
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findJavaClassFile(""String_Node_Str"",fsEmpty);
  verify(predicatesEmpty,times(1)).hasRelativePath(""String_Node_Str"");
}",0.3986135181975737
117538,"@Before public void setUp(){
  fs=mock(FileSystem.class);
  predicates=mock(FilePredicates.class);
  when(fs.predicates()).thenReturn(predicates);
}","@Before public void setUp(){
  fsEmpty=mock(FileSystem.class);
  predicatesEmpty=mock(FilePredicates.class);
  when(fsEmpty.predicates()).thenReturn(predicatesEmpty);
  when(fsEmpty.inputFiles(any(FilePredicate.class))).thenReturn(new ArrayList<InputFile>());
}",0.7237163814180929
117539,"@Test public void findJavaClassFile_normalClassName(){
  when(fs.inputFiles(Matchers.<FilePredicate>any())).thenReturn(new ArrayList<InputFile>());
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findJavaClassFile(""String_Node_Str"",fs);
  verify(predicates,times(1)).hasRelativePath(""String_Node_Str"");
}","@Test public void findJavaClassFile_normalClassName(){
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findJavaClassFile(""String_Node_Str"",fsEmpty);
  verify(predicatesEmpty,times(1)).hasRelativePath(""String_Node_Str"");
}",0.4006908462867012
117540,"@Test public void findTemplateFile_weblogicFileName(){
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  when(fs.inputFiles(Matchers.<FilePredicate>any())).thenReturn(new ArrayList<InputFile>());
  locator.findTemplateFile(""String_Node_Str"",fs);
  verify(predicates,times(1)).hasRelativePath(""String_Node_Str"");
}","@Test public void findTemplateFile_weblogicFileName(){
  ByteCodeResourceLocator locator=new ByteCodeResourceLocator();
  locator.findTemplateFile(""String_Node_Str"",fsEmpty);
  verify(predicatesEmpty,times(1)).hasRelativePath(""String_Node_Str"");
}",0.682842287694974
117541,"public edu.umd.cs.findbugs.Project getFindbugsProject() throws IOException {
  edu.umd.cs.findbugs.Project findbugsProject=new edu.umd.cs.findbugs.Project();
  for (  File file : getSourceFiles()) {
    findbugsProject.addFile(file.getAbsolutePath());
  }
  Collection<File> classFilesToAnalyze=javaResourceLocator.classFilesToAnalyze();
  for (  File classToAnalyze : classFilesToAnalyze) {
    findbugsProject.addFile(classToAnalyze.getCanonicalPath());
  }
  for (  File file : javaResourceLocator.classpath()) {
    findbugsProject.addAuxClasspathEntry(file.getAbsolutePath());
  }
  copyLibs();
  if (annotationsLib != null) {
    findbugsProject.addAuxClasspathEntry(annotationsLib.getAbsolutePath());
    findbugsProject.addAuxClasspathEntry(jsr305Lib.getAbsolutePath());
  }
  findbugsProject.setCurrentWorkingDirectory(fileSystem.workDir());
  return findbugsProject;
}","public edu.umd.cs.findbugs.Project getFindbugsProject() throws IOException {
  edu.umd.cs.findbugs.Project findbugsProject=new edu.umd.cs.findbugs.Project();
  for (  File file : getSourceFiles()) {
    findbugsProject.addFile(file.getCanonicalPath());
  }
  Collection<File> classFilesToAnalyze=javaResourceLocator.classFilesToAnalyze();
  for (  File classToAnalyze : classFilesToAnalyze) {
    findbugsProject.addFile(classToAnalyze.getCanonicalPath());
  }
  for (  File file : javaResourceLocator.classpath()) {
    findbugsProject.addAuxClasspathEntry(file.getCanonicalPath());
  }
  copyLibs();
  if (annotationsLib != null) {
    findbugsProject.addAuxClasspathEntry(annotationsLib.getCanonicalPath());
    findbugsProject.addAuxClasspathEntry(jsr305Lib.getCanonicalPath());
  }
  findbugsProject.setCurrentWorkingDirectory(fileSystem.workDir());
  return findbugsProject;
}",0.6397727272727273
117542,"@Override public void onStart(ConnectedNode connectedNode){
  geometry_msgs.Pose pose=connectedNode.getTopicMessageFactory().newFromType(geometry_msgs.Pose._TYPE);
  publisher=connectedNode.newPublisher(""String_Node_Str"",geometry_msgs.Pose._TYPE);
}","@Override public void onStart(ConnectedNode connectedNode){
  pose=connectedNode.getTopicMessageFactory().newFromType(geometry_msgs.Pose._TYPE);
  publisher=connectedNode.newPublisher(""String_Node_Str"",geometry_msgs.Pose._TYPE);
}",0.9603340292275574
117543,"@Override public void onStart(ConnectedNode node){
  mTangoOdomPublisher=new TangoOdomPublisher(node);
  mTangoPosePublisher=new TangoPosePublisher(node);
  node.executeCancellableLoop(new CancellableLoop(){
    @Override protected void loop() throws InterruptedException {
      Thread.sleep(30);
      final double[] posState=mVinsServiceHelper.getStateInFullStateFormat();
      final double[] rotState=mVinsServiceHelper.getStateInUnityFormat();
      updateTranslation(posState);
      Thread.sleep(50);
      updateRoataion(rotState);
      Thread.sleep(50);
      mTangoOdomPublisher.publishOdom();
      mTangoPosePublisher.publishPose();
    }
  }
);
}","@Override public void onStart(ConnectedNode node){
  mTangoOdomPublisher=new TangoOdomPublisher(node);
  mTangoPosePublisher=new TangoPosePublisher(node);
  mTangoTfPublisher=new TangoTfPublisher(node);
  node.executeCancellableLoop(new CancellableLoop(){
    @Override protected void loop() throws InterruptedException {
      Thread.sleep(30);
      final double[] posState=mVinsServiceHelper.getStateInFullStateFormat();
      final double[] rotState=mVinsServiceHelper.getStateInUnityFormat();
      updateTranslation(posState);
      Thread.sleep(30);
      updateRoataion(rotState);
      Thread.sleep(30);
      mTangoOdomPublisher.publishOdom();
      mTangoPosePublisher.publishPose();
      mTangoTfPublisher.publishTransforms();
    }
  }
);
}",0.9314487632508834
117544,"public void updateTranslation(double[] state){
  mTangoOdomPublisher.setPosePoint(state[5],-state[4],0x0);
  mTangoPosePublisher.setPoint(state[5],-state[4],0x0);
}","public void updateTranslation(double[] state){
  mTangoOdomPublisher.setPosePoint(state[5],-state[4],state[6]);
  mTangoPosePublisher.setPoint(state[5],-state[4],state[6]);
  mTangoTfPublisher.setTranslation(state[5],-state[4],state[6]);
}",0.7841191066997518
117545,"@Override protected void loop() throws InterruptedException {
  Thread.sleep(30);
  final double[] posState=mVinsServiceHelper.getStateInFullStateFormat();
  final double[] rotState=mVinsServiceHelper.getStateInUnityFormat();
  updateTranslation(posState);
  Thread.sleep(50);
  updateRoataion(rotState);
  Thread.sleep(50);
  mTangoOdomPublisher.publishOdom();
  mTangoPosePublisher.publishPose();
}","@Override protected void loop() throws InterruptedException {
  Thread.sleep(30);
  final double[] posState=mVinsServiceHelper.getStateInFullStateFormat();
  final double[] rotState=mVinsServiceHelper.getStateInUnityFormat();
  updateTranslation(posState);
  Thread.sleep(30);
  updateRoataion(rotState);
  Thread.sleep(30);
  mTangoOdomPublisher.publishOdom();
  mTangoPosePublisher.publishPose();
  mTangoTfPublisher.publishTransforms();
}",0.9464922711058265
117546,"public void updateRoataion(double[] state){
  mTangoOdomPublisher.setPoseQuat(-state[2],state[0],-state[1],state[3]);
  mTangoPosePublisher.setQuat(-state[2],state[0],-state[1],state[3]);
}","public void updateRoataion(double[] state){
  mTangoOdomPublisher.setPoseQuat(-state[2],state[0],-state[1],state[3]);
  mTangoPosePublisher.setQuat(-state[2],state[0],-state[1],state[3]);
  mTangoTfPublisher.setRotation(-state[2],state[0],-state[1],state[3]);
}",0.84
117547,"public Builder onPatch(final Patch patch){
  startTime=patch.getStartTime().getMillis();
  endTime=patch.getEndTime() == null ? null : patch.getEndTime().getMillis();
  return this;
}","public Builder onPatch(final Patch patch){
  startTime=patch.getStartTime().getMillis();
  endTime=patch.getEndTime() == null ? System.currentTimeMillis() : patch.getEndTime().getMillis();
  return this;
}",0.922680412371134
117548,"public Builder onPatch(final Patch patch){
  startTime=patch.getStartTime().getMillis();
  endTime=patch.getEndTime() == null ? null : patch.getEndTime().getMillis();
  return this;
}","public Builder onPatch(final Patch patch){
  startTime=patch.getStartTime().getMillis();
  endTime=patch.getEndTime() == null ? System.currentTimeMillis() : patch.getEndTime().getMillis();
  return this;
}",0.922680412371134
117549,"@Override public void run(){
synchronized (resetterLock) {
    if (!cancelled) {
      permitter.drainPermits();
synchronized (currentlyProcessingLock) {
        permitter.release(permits - currentlyProcessing);
      }
      resetter=null;
      drainer=null;
      timer.purge();
    }
  }
}","@Override public void run(){
synchronized (resetterLock) {
    if (!cancelled) {
      permitter.drainPermits();
synchronized (currentlyProcessingLock) {
        permitter.release(permits - currentlyProcessing);
      }
      if (drainer != null) {
        drainer.cancel();
      }
      resetter=null;
      drainer=null;
      timer.purge();
    }
  }
}",0.8258859784283513
117550,"@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case LIST_PROXY_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getPlatform() != null) {
    builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
  }
if (coreData.getSummonerId() != 0L) {
  builder.put(""String_Node_Str"",coreData.getSummonerId());
}
coreData=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.championmastery.ChampionMasteries.class,builder.build());
loadListProxyData(new Function<com.merakianalytics.orianna.types.data.championmastery.ChampionMastery,ChampionMastery>(){
@Override public ChampionMastery apply(final com.merakianalytics.orianna.types.data.championmastery.ChampionMastery data){
final ChampionMastery mastery=new ChampionMastery(data);
mastery.markAsGhostLoaded(ChampionMastery.CHAMPION_MASTERY_LOAD_GROUP);
return mastery;
}
}
);
break;
default :
break;
}
}","@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case LIST_PROXY_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getPlatform() != null) {
    builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
  }
if (coreData.getSummonerId() != 0L) {
  builder.put(""String_Node_Str"",coreData.getSummonerId());
}
final com.merakianalytics.orianna.types.data.championmastery.ChampionMasteries data=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.championmastery.ChampionMasteries.class,builder.build());
if (data != null) {
coreData=data;
}
loadListProxyData(new Function<com.merakianalytics.orianna.types.data.championmastery.ChampionMastery,ChampionMastery>(){
@Override public ChampionMastery apply(final com.merakianalytics.orianna.types.data.championmastery.ChampionMastery data){
final ChampionMastery mastery=new ChampionMastery(data);
mastery.markAsGhostLoaded(ChampionMastery.CHAMPION_MASTERY_LOAD_GROUP);
return mastery;
}
}
);
break;
default :
break;
}
}",0.9409486931268152
117551,"public boolean isChestGranted(){
  load(CHAMPION_MASTERY_LOAD_GROUP);
  return coreData.isChestGranted();
}","public boolean isChestGranted(){
  if (coreData.isChestGranted()) {
    load(CHAMPION_MASTERY_LOAD_GROUP);
  }
  return coreData.isChestGranted();
}",0.8392156862745098
117552,"public int getTokens(){
  load(CHAMPION_MASTERY_LOAD_GROUP);
  return coreData.getTokens();
}","public int getTokens(){
  if (coreData.getTokens() == 0) {
    load(CHAMPION_MASTERY_LOAD_GROUP);
  }
  return coreData.getTokens();
}",0.8193832599118943
117553,"@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case CHAMPION_MASTERY_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getSummonerId() != 0L) {
    builder.put(""String_Node_Str"",coreData.getSummonerId());
  }
if (coreData.getChampionId() != 0) {
  builder.put(""String_Node_Str"",coreData.getChampionId());
}
if (coreData.getPlatform() != null) {
builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
}
coreData=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.championmastery.ChampionMastery.class,builder.build());
break;
default :
break;
}
}","@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case CHAMPION_MASTERY_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getSummonerId() != 0L) {
    builder.put(""String_Node_Str"",coreData.getSummonerId());
  }
if (coreData.getChampionId() != 0) {
  builder.put(""String_Node_Str"",coreData.getChampionId());
}
if (coreData.getPlatform() != null) {
builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
}
final com.merakianalytics.orianna.types.data.championmastery.ChampionMastery data=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.championmastery.ChampionMastery.class,builder.build());
if (data != null) {
coreData=data;
}
break;
default :
break;
}
}",0.9183673469387756
117554,"public int getPointsUntilNextLevel(){
  load(CHAMPION_MASTERY_LOAD_GROUP);
  return coreData.getPointsUntilNextLevel();
}","public int getPointsUntilNextLevel(){
  if (coreData.getPointsUntilNextLevel() == 0) {
    load(CHAMPION_MASTERY_LOAD_GROUP);
  }
  return coreData.getPointsUntilNextLevel();
}",0.8148148148148148
117555,"public int getLevel(){
  load(CHAMPION_MASTERY_LOAD_GROUP);
  return coreData.getLevel();
}","public int getLevel(){
  if (coreData.getLevel() == 0) {
    load(CHAMPION_MASTERY_LOAD_GROUP);
  }
  return coreData.getLevel();
}",0.8198198198198198
117556,"public int getPointsSinceLastLevel(){
  load(CHAMPION_MASTERY_LOAD_GROUP);
  return coreData.getPointsSinceLastLevel();
}","public int getPointsSinceLastLevel(){
  if (coreData.getPointsSinceLastLevel() == 0) {
    load(CHAMPION_MASTERY_LOAD_GROUP);
  }
  return coreData.getPointsSinceLastLevel();
}",0.8148148148148148
117557,"public DateTime getLastPlayed(){
  load(CHAMPION_MASTERY_LOAD_GROUP);
  return coreData.getLastPlayed();
}","public DateTime getLastPlayed(){
  if (coreData.getLastPlayed() == null) {
    load(CHAMPION_MASTERY_LOAD_GROUP);
  }
  return coreData.getLastPlayed();
}",0.8153846153846154
117558,"public int getPoints(){
  load(CHAMPION_MASTERY_LOAD_GROUP);
  return coreData.getPoints();
}","public int getPoints(){
  if (coreData.getPoints() == 0) {
    load(CHAMPION_MASTERY_LOAD_GROUP);
  }
  return coreData.getPoints();
}",0.8193832599118943
117559,"@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case CHAMPION_MASTERY_SCORE_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getSummonerId() != 0L) {
    builder.put(""String_Node_Str"",coreData.getSummonerId());
  }
if (coreData.getPlatform() != null) {
  builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
}
coreData=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.championmastery.ChampionMasteryScore.class,builder.build());
break;
default :
break;
}
}","@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case CHAMPION_MASTERY_SCORE_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getSummonerId() != 0L) {
    builder.put(""String_Node_Str"",coreData.getSummonerId());
  }
if (coreData.getPlatform() != null) {
  builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
}
final com.merakianalytics.orianna.types.data.championmastery.ChampionMasteryScore data=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.championmastery.ChampionMasteryScore.class,builder.build());
if (data != null) {
coreData=data;
}
break;
default :
break;
}
}",0.9042145593869731
117560,"public int getScore(){
  load(CHAMPION_MASTERY_SCORE_LOAD_GROUP);
  return coreData.getScore();
}","public int getScore(){
  if (coreData.getScore() == 0) {
    load(CHAMPION_MASTERY_SCORE_LOAD_GROUP);
  }
  return coreData.getScore();
}",0.8290598290598291
117561,"@Searchable({String.class}) public String getName(){
  load(LIST_PROXY_LOAD_GROUP);
  return coreData.getName();
}","@Searchable({String.class}) public String getName(){
  if (coreData.getName() == null) {
    load(LIST_PROXY_LOAD_GROUP);
  }
  return coreData.getName();
}",0.8444444444444444
117562,"@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case LIST_PROXY_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getPlatform() != null) {
    builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
  }
if (coreData.getId() != null) {
  builder.put(""String_Node_Str"",coreData.getId());
}
if (coreData.getTier() != null) {
builder.put(""String_Node_Str"",Tier.valueOf(coreData.getTier()));
}
if (coreData.getQueue() != null) {
builder.put(""String_Node_Str"",Queue.valueOf(coreData.getQueue()));
}
coreData=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.league.League.class,builder.build());
loadListProxyData(new Function<com.merakianalytics.orianna.types.data.league.LeagueEntry,LeagueEntry>(){
@Override public LeagueEntry apply(final com.merakianalytics.orianna.types.data.league.LeagueEntry data){
return new LeagueEntry(data);
}
}
);
break;
default :
break;
}
}","@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case LIST_PROXY_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getPlatform() != null) {
    builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
  }
if (coreData.getId() != null) {
  builder.put(""String_Node_Str"",coreData.getId());
}
if (coreData.getTier() != null) {
builder.put(""String_Node_Str"",Tier.valueOf(coreData.getTier()));
}
if (coreData.getQueue() != null) {
builder.put(""String_Node_Str"",Queue.valueOf(coreData.getQueue()));
}
final com.merakianalytics.orianna.types.data.league.League data=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.league.League.class,builder.build());
if (data != null) {
coreData=data;
}
loadListProxyData(new Function<com.merakianalytics.orianna.types.data.league.LeagueEntry,LeagueEntry>(){
@Override public LeagueEntry apply(final com.merakianalytics.orianna.types.data.league.LeagueEntry data){
return new LeagueEntry(data);
}
}
);
break;
default :
break;
}
}",0.9511961722488038
117563,"@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case LIST_PROXY_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getPlatform() != null) {
    builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
  }
if (coreData.getSummonerId() != 0L) {
  builder.put(""String_Node_Str"",coreData.getSummonerId());
}
coreData=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.league.LeaguePositions.class,builder.build());
loadListProxyData(new Function<com.merakianalytics.orianna.types.data.league.LeaguePosition,LeaguePosition>(){
@Override public LeaguePosition apply(final com.merakianalytics.orianna.types.data.league.LeaguePosition data){
return new LeaguePosition(data);
}
}
);
break;
default :
break;
}
}","@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case LIST_PROXY_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getPlatform() != null) {
    builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
  }
if (coreData.getSummonerId() != 0L) {
  builder.put(""String_Node_Str"",coreData.getSummonerId());
}
final com.merakianalytics.orianna.types.data.league.LeaguePositions data=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.league.LeaguePositions.class,builder.build());
if (data != null) {
coreData=data;
}
loadListProxyData(new Function<com.merakianalytics.orianna.types.data.league.LeaguePosition,LeaguePosition>(){
@Override public LeaguePosition apply(final com.merakianalytics.orianna.types.data.league.LeaguePosition data){
return new LeaguePosition(data);
}
}
);
break;
default :
break;
}
}",0.9371104815864024
117564,"public Duration getDuration(){
  load(MATCH_LOAD_GROUP);
  return coreData.getDuration();
}","public Duration getDuration(){
  if (coreData.getDuration() == null) {
    load(MATCH_LOAD_GROUP);
  }
  return coreData.getDuration();
}",0.7982456140350878
117565,"public GameMode getMode(){
  load(MATCH_LOAD_GROUP);
  return GameMode.valueOf(coreData.getMode());
}","public GameMode getMode(){
  if (coreData.getMode() == null) {
    load(MATCH_LOAD_GROUP);
  }
  return GameMode.valueOf(coreData.getMode());
}",0.8278688524590164
117566,"public Map getMap(){
  load(MATCH_LOAD_GROUP);
  return Map.withId(coreData.getMap());
}","public Map getMap(){
  if (coreData.getMap() == 0) {
    load(MATCH_LOAD_GROUP);
  }
  return Map.withId(coreData.getMap());
}",0.822429906542056
117567,"public GameType getType(){
  load(MATCH_LOAD_GROUP);
  return GameType.valueOf(coreData.getType());
}","public GameType getType(){
  if (coreData.getType() == null) {
    load(MATCH_LOAD_GROUP);
  }
  return GameType.valueOf(coreData.getType());
}",0.8278688524590164
117568,"@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case MATCH_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getPlatform() != null) {
    builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
  }
if (coreData.getId() != 0L) {
  builder.put(""String_Node_Str"",coreData.getId());
}
if (coreData.getTournamentCode() != null) {
builder.put(""String_Node_Str"",coreData.getTournamentCode());
}
if (!fromReference) {
coreData=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.match.Match.class,builder.build());
}
 else {
final com.merakianalytics.orianna.types.data.match.Match data=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.match.Match.class,builder.build());
final com.merakianalytics.orianna.types.data.match.Participant fromReference=coreData.getParticipants().get(0);
final Iterator<com.merakianalytics.orianna.types.data.match.Participant> iterator=data.getParticipants().iterator();
while (iterator.hasNext()) {
final com.merakianalytics.orianna.types.data.match.Participant participant=iterator.next();
if (participant.getCurrentAccountId() == fromReference.getCurrentAccountId()) {
  replaceData(participant,fromReference);
  iterator.remove();
  break;
}
}
data.getParticipants().add(0,fromReference);
coreData=data;
}
break;
default :
break;
}
}","@Override protected void loadCoreData(final String group){
  ImmutableMap.Builder<String,Object> builder;
switch (group) {
case MATCH_LOAD_GROUP:
    builder=ImmutableMap.builder();
  if (coreData.getPlatform() != null) {
    builder.put(""String_Node_Str"",Platform.withTag(coreData.getPlatform()));
  }
if (coreData.getId() != 0L) {
  builder.put(""String_Node_Str"",coreData.getId());
}
if (coreData.getTournamentCode() != null) {
builder.put(""String_Node_Str"",coreData.getTournamentCode());
}
if (!fromReference) {
final com.merakianalytics.orianna.types.data.match.Match data=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.match.Match.class,builder.build());
if (data != null) {
coreData=data;
}
}
 else {
final com.merakianalytics.orianna.types.data.match.Match data=Orianna.getSettings().getPipeline().get(com.merakianalytics.orianna.types.data.match.Match.class,builder.build());
if (data != null) {
final com.merakianalytics.orianna.types.data.match.Participant fromReference=coreData.getParticipants().get(0);
final Iterator<com.merakianalytics.orianna.types.data.match.Participant> iterator=data.getParticipants().iterator();
while (iterator.hasNext()) {
  final com.merakianalytics.orianna.types.data.match.Participant participant=iterator.next();
  if (participant.getCurrentAccountId() == fromReference.getCurrentAccountId()) {
    replaceData(participant,fromReference);
    iterator.remove();
    break;
  }
}
data.getParticipants().add(0,fromReference);
coreData=data;
}
}
break;
default :
break;
}
}",0.9548213081591368
117569,"public String getVersion(){
  load(MATCH_LOAD_GROUP);
  return coreData.getVersion();
}","public String getVersion(){
  if (coreData.getVersion() == null) {
    load(MATCH_LOAD_GROUP);
  }
  return coreData.getVersion();
}",0.7945205479452054
117570,"@Override public void call(final Runnable runnable,final long timeout,final TimeUnit unit) throws InterruptedException {
  if (!acquire(timeout,unit)) {
    throw new TimeoutException(""String_Node_Str"",TimeoutException.Type.RATE_LIMITER);
  }
  permitsIssued.incrementAndGet();
  try {
    runnable.run();
  }
  finally {
    release();
  }
}","@Override public void call(final Runnable runnable,final long timeout,final TimeUnit unit) throws InterruptedException {
  if (!acquire(timeout,unit)) {
    throw new TimeoutException(""String_Node_Str"",TimeoutException.Type.RATE_LIMITER);
  }
  try {
    runnable.run();
  }
  finally {
    release();
  }
}",0.785824345146379
117571,"@Override public ReservedPermit reserve(final long timeout,final TimeUnit unit) throws InterruptedException {
  if (!permitter.tryAcquire(timeout,unit)) {
    return null;
  }
synchronized (currentlyProcessingLock) {
    currentlyProcessing+=1;
  }
  return new ReservedPermit(){
    @Override public void acquire(){
      if (drainer == null) {
synchronized (resetterLock) {
          if (drainer == null) {
            drainer=new Drainer();
            timer.schedule(drainer,epochUnit.toMillis(epoch));
          }
        }
      }
    }
    @Override public void cancel(){
synchronized (currentlyProcessingLock) {
        currentlyProcessing-=1;
        permitter.release();
      }
    }
  }
;
}","@Override public ReservedPermit reserve(final long timeout,final TimeUnit unit) throws InterruptedException {
  if (!permitter.tryAcquire(timeout,unit)) {
    return null;
  }
  permitsIssued.decrementAndGet();
synchronized (currentlyProcessingLock) {
    currentlyProcessing+=1;
  }
  return new ReservedPermit(){
    @Override public void acquire(){
      permitsIssued.incrementAndGet();
      if (drainer == null) {
synchronized (resetterLock) {
          if (drainer == null) {
            drainer=new Drainer();
            timer.schedule(drainer,epochUnit.toMillis(epoch));
          }
        }
      }
    }
    @Override public void cancel(){
synchronized (currentlyProcessingLock) {
        currentlyProcessing-=1;
        permitter.release();
      }
    }
  }
;
}",0.9499323410013532
117572,"@Override public void acquire(){
  if (drainer == null) {
synchronized (resetterLock) {
      if (drainer == null) {
        drainer=new Drainer();
        timer.schedule(drainer,epochUnit.toMillis(epoch));
      }
    }
  }
}","@Override public void acquire(){
  permitsIssued.incrementAndGet();
  if (drainer == null) {
synchronized (resetterLock) {
      if (drainer == null) {
        drainer=new Drainer();
        timer.schedule(drainer,epochUnit.toMillis(epoch));
      }
    }
  }
}",0.9281314168377824
117573,"@Override public void call(final Runnable runnable,final long timeout,final TimeUnit unit) throws InterruptedException {
  if (!acquire(timeout,unit)) {
    throw new TimeoutException(""String_Node_Str"",TimeoutException.Type.RATE_LIMITER);
  }
  permitsIssued.incrementAndGet();
  try {
    runnable.run();
  }
  finally {
    release();
  }
}","@Override public void call(final Runnable runnable,final long timeout,final TimeUnit unit) throws InterruptedException {
  if (!acquire(timeout,unit)) {
    throw new TimeoutException(""String_Node_Str"",TimeoutException.Type.RATE_LIMITER);
  }
  try {
    runnable.run();
  }
  finally {
    release();
  }
}",0.785824345146379
117574,"@Override public boolean acquire(final long timeout,final TimeUnit unit) throws InterruptedException {
  final long deadline=System.currentTimeMillis() + unit.toMillis(timeout);
  final Set<ReservedPermit> reservations=new HashSet<>();
  for (  final RateLimiter limiter : limiters.values()) {
    final long left=deadline - System.currentTimeMillis();
    try {
      final ReservedPermit reservation=limiter.reserve(left,TimeUnit.MILLISECONDS);
      if (reservation == null) {
        for (        final ReservedPermit permit : reservations) {
          permit.cancel();
        }
        return false;
      }
 else {
        reservations.add(reservation);
      }
    }
 catch (    final InterruptedException e) {
      for (      final ReservedPermit permit : reservations) {
        permit.cancel();
      }
      throw e;
    }
  }
  for (  final ReservedPermit permit : reservations) {
    permit.acquire();
  }
  return true;
}","@Override public boolean acquire(final long timeout,final TimeUnit unit) throws InterruptedException {
  if (timeout <= 0L) {
    acquire();
    return true;
  }
  final long deadline=System.currentTimeMillis() + unit.toMillis(timeout);
  final Set<ReservedPermit> reservations=new HashSet<>();
  for (  final RateLimiter limiter : limiters.values()) {
    final long left=deadline - System.currentTimeMillis();
    try {
      final ReservedPermit reservation=limiter.reserve(left,TimeUnit.MILLISECONDS);
      if (reservation == null) {
        for (        final ReservedPermit permit : reservations) {
          permit.cancel();
        }
        return false;
      }
 else {
        reservations.add(reservation);
      }
    }
 catch (    final InterruptedException e) {
      for (      final ReservedPermit permit : reservations) {
        permit.cancel();
      }
      throw e;
    }
  }
  for (  final ReservedPermit permit : reservations) {
    permit.acquire();
  }
  permitsIssued.incrementAndGet();
  return true;
}",0.9522357723577236
117575,"private MultiRateLimiter newRateLimiter(final List<Long> epochsInSeconds,final List<Integer> limits,final long windowLowerBound,final long windowUpperBound){
  final Map<String,AbstractRateLimiter> limiters=new HashMap<>();
  for (int i=0; i < epochsInSeconds.size(); i++) {
    try {
      final AbstractRateLimiter limiter=limitingType.getLimiterClass().getConstructor(int.class,long.class,TimeUnit.class).newInstance(limits.get(i),epochsInSeconds.get(i),TimeUnit.SECONDS);
      final long windowLockoutIn=Math.max(0,TimeUnit.SECONDS.toMillis(epochsInSeconds.get(i)) + windowLowerBound - System.currentTimeMillis());
      limiter.restrict(windowLockoutIn,TimeUnit.MILLISECONDS,windowUpperBound - windowLowerBound,TimeUnit.MILLISECONDS);
      limiter.acquire();
      limiter.release();
      limiters.put(epochsInSeconds.get(i).toString(),limiter);
    }
 catch (    InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException|InterruptedException e) {
      LOGGER.error(""String_Node_Str"" + limitingType + ""String_Node_Str"",e);
      throw new OriannaException(""String_Node_Str"" + limitingType + ""String_Node_Str"",e);
    }
  }
  return new MultiRateLimiter(limiters);
}","private MultiRateLimiter newRateLimiter(final List<Long> epochsInSeconds,final List<Integer> limits,final long windowLowerBound,final long windowUpperBound){
  final Map<String,AbstractRateLimiter> limiters=new HashMap<>();
  for (int i=0; i < epochsInSeconds.size(); i++) {
    try {
      final AbstractRateLimiter limiter=limitingType.getLimiterClass().getConstructor(int.class,long.class,TimeUnit.class).newInstance(limits.get(i),epochsInSeconds.get(i),TimeUnit.SECONDS);
      final long windowLockoutIn=Math.max(0,TimeUnit.SECONDS.toMillis(epochsInSeconds.get(i)) + windowLowerBound - System.currentTimeMillis());
      limiter.restrict(windowLockoutIn,TimeUnit.MILLISECONDS,windowUpperBound - windowLowerBound,TimeUnit.MILLISECONDS);
      limiters.put(epochsInSeconds.get(i).toString(),limiter);
    }
 catch (    InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {
      LOGGER.error(""String_Node_Str"" + limitingType + ""String_Node_Str"",e);
      throw new OriannaException(""String_Node_Str"" + limitingType + ""String_Node_Str"",e);
    }
  }
  return new MultiRateLimiter(limiters);
}",0.9708418891170432
117576,"private <T extends DataObject>T get(final RequestContext<T> context){
  context.attemptCount+=1;
  final String host=context.platform.getTag().toLowerCase() + ""String_Node_Str"";
  Response response=null;
  MultiRateLimiter limiter=getRateLimiter(context.platform,context.rateLimiterName);
  try {
    if (limiter == null) {
synchronized (getCreateRateLimiterLock(context.platform,context.rateLimiterName)) {
        limiter=getRateLimiter(context.platform,context.rateLimiterName);
        if (limiter == null) {
          final long timeBefore=System.currentTimeMillis();
          response=client.get(host,context.endpoint,context.parameters,defaultHeaders,null);
          final long timeAfter=System.currentTimeMillis();
          createRateLimiter(context.platform,context.rateLimiterName,response,timeBefore,timeAfter);
        }
      }
    }
    if (limiter != null) {
      response=client.get(host,context.endpoint,context.parameters,defaultHeaders,limiter);
    }
  }
 catch (  final TimeoutException e) {
    LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
    return Type.RATE_LIMITER == e.getType() ? limiterTimeoutStrategy.onFailedRequest(this,context,null,e) : httpTimeoutStrategy.onFailedRequest(this,context,null,e);
  }
catch (  final IOException e) {
    LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
    throw new OriannaException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
  }
  if (limiter != null) {
    adjustRateLimitsIfNecessary(limiter,response);
  }
switch (response.getStatusCode()) {
case 400:
    LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
  throw new BadRequestException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 401:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new UnauthorizedException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 403:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new ForbiddenException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 404:
LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http404Strategy.onFailedRequest(this,context,response,new NotFoundException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 415:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new UnsupportedMediaTypeException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 429:
LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http429Strategy.onFailedRequest(this,context,response,new RateLimitExceededException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 500:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http500Strategy.onFailedRequest(this,context,response,new InternalServerErrorException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 503:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http503Strategy.onFailedRequest(this,context,response,new ServiceUnavailableException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
default :
if (response.getStatusCode() >= 400) {
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""+ response.getStatusCode()+ ""String_Node_Str""+ response.getBody());
throw new OriannaException(""String_Node_Str"" + response.getStatusCode() + ""String_Node_Str""+ response.getBody());
}
break;
}
return DataObject.fromJSON(context.type,response.getBody());
}","private <T extends DataObject>T get(final RequestContext<T> context){
  context.attemptCount+=1;
  final String host=context.platform.getTag().toLowerCase() + ""String_Node_Str"";
  Response response=null;
  MultiRateLimiter limiter=getRateLimiter(context.platform,context.rateLimiterName);
  try {
    if (limiter == null) {
synchronized (getCreateRateLimiterLock(context.platform,context.rateLimiterName)) {
        limiter=getRateLimiter(context.platform,context.rateLimiterName);
        if (limiter == null) {
          final long timeBefore=System.currentTimeMillis();
          response=client.get(host,context.endpoint,context.parameters,defaultHeaders,null);
          final long timeAfter=System.currentTimeMillis();
          createRateLimiter(context.platform,context.rateLimiterName,response,timeBefore,timeAfter);
          final MultiRateLimiter decrement=getRateLimiter(context.platform,context.rateLimiterName);
          decrement.acquire();
          decrement.release();
        }
      }
    }
    if (limiter != null) {
      response=client.get(host,context.endpoint,context.parameters,defaultHeaders,limiter);
    }
  }
 catch (  final TimeoutException e) {
    LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
    return Type.RATE_LIMITER == e.getType() ? limiterTimeoutStrategy.onFailedRequest(this,context,null,e) : httpTimeoutStrategy.onFailedRequest(this,context,null,e);
  }
catch (  final IOException e) {
    LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
    throw new OriannaException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
  }
catch (  final InterruptedException e) {
    LOGGER.error(""String_Node_Str"",e);
    throw new OriannaException(""String_Node_Str"",e);
  }
  if (limiter != null) {
    adjustRateLimitsIfNecessary(limiter,response);
  }
switch (response.getStatusCode()) {
case 400:
    LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
  throw new BadRequestException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 401:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new UnauthorizedException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 403:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new ForbiddenException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 404:
LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http404Strategy.onFailedRequest(this,context,response,new NotFoundException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 415:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new UnsupportedMediaTypeException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 429:
LOGGER.info(""String_Node_Str"" + response.getHeaders().get(""String_Node_Str"") + ""String_Node_Str""+ host+ ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http429Strategy.onFailedRequest(this,context,response,new RateLimitExceededException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""+ response.getHeaders().get(""String_Node_Str"")+ ""String_Node_Str""));
case 500:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http500Strategy.onFailedRequest(this,context,response,new InternalServerErrorException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 503:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http503Strategy.onFailedRequest(this,context,response,new ServiceUnavailableException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
default :
if (response.getStatusCode() >= 400) {
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""+ response.getStatusCode()+ ""String_Node_Str""+ response.getBody());
throw new OriannaException(""String_Node_Str"" + response.getStatusCode() + ""String_Node_Str""+ response.getBody());
}
break;
}
return DataObject.fromJSON(context.type,response.getBody());
}",0.7246107366953288
117577,"@Transform(from=Participant.class,to=com.merakianalytics.orianna.types.dto.match.Participant.class) public com.merakianalytics.orianna.types.dto.match.Participant transformToParticipant(final Participant item,final PipelineContext context){
  final Object previousParticipant=context.put(""String_Node_Str"",item.getParticipantId());
  final Object previousLane=context.put(""String_Node_Str"",item.getLane());
  final Object previousRole=context.put(""String_Node_Str"",item.getRole());
  final Object previousItems=context.put(""String_Node_Str"",item.getItems());
  final Object previousRuneStats=context.put(""String_Node_Str"",item.getRuneStats());
  final Object previousPrimaryRunePath=context.put(""String_Node_Str"",item.getPrimaryRunePath());
  final Object previousSecondaryRunePath=context.put(""String_Node_Str"",item.getSecondaryRunePath());
  final com.merakianalytics.orianna.types.dto.match.Participant participant=new com.merakianalytics.orianna.types.dto.match.Participant();
  participant.setChampionId(item.getChampionId());
  participant.setHighestAchievedSeasonTier(item.getHighestTierInSeason().toString());
  participant.setParticipantId(item.getParticipantId());
  participant.setSpell1Id(item.getSummonerSpellDId());
  participant.setSpell2Id(item.getSummonerSpellFId());
  participant.setStats(transform(item.getStats(),context));
  participant.setTeamId(item.getTeam());
  participant.setTimeline(transform(item.getTimeline(),context));
  context.put(""String_Node_Str"",previousParticipant);
  context.put(""String_Node_Str"",previousLane);
  context.put(""String_Node_Str"",previousRole);
  context.put(""String_Node_Str"",previousItems);
  context.put(""String_Node_Str"",previousRuneStats);
  context.put(""String_Node_Str"",previousPrimaryRunePath);
  context.put(""String_Node_Str"",previousSecondaryRunePath);
  return participant;
}","@Transform(from=Participant.class,to=com.merakianalytics.orianna.types.dto.match.Participant.class) public com.merakianalytics.orianna.types.dto.match.Participant transformToParticipant(final Participant item,final PipelineContext context){
  final Object previousParticipant=context.put(""String_Node_Str"",item.getParticipantId());
  final Object previousLane=context.put(""String_Node_Str"",item.getLane());
  final Object previousRole=context.put(""String_Node_Str"",item.getRole());
  final Object previousItems=context.put(""String_Node_Str"",item.getItems());
  final Object previousRuneStats=context.put(""String_Node_Str"",item.getRuneStats());
  final Object previousPrimaryRunePath=context.put(""String_Node_Str"",item.getPrimaryRunePath());
  final Object previousSecondaryRunePath=context.put(""String_Node_Str"",item.getSecondaryRunePath());
  final com.merakianalytics.orianna.types.dto.match.Participant participant=new com.merakianalytics.orianna.types.dto.match.Participant();
  participant.setChampionId(item.getChampionId());
  participant.setHighestAchievedSeasonTier(item.getHighestTierInSeason().toString());
  participant.setParticipantId(item.getParticipantId());
  participant.setSpell1Id(item.getSummonerSpellDId());
  participant.setSpell2Id(item.getSummonerSpellFId());
  participant.setStats(transform(item.getStats(),context));
  participant.setTeamId(item.getTeam());
  if (item.getTimeline() != null) {
    participant.setTimeline(transform(item.getTimeline(),context));
  }
  context.put(""String_Node_Str"",previousParticipant);
  context.put(""String_Node_Str"",previousLane);
  context.put(""String_Node_Str"",previousRole);
  context.put(""String_Node_Str"",previousItems);
  context.put(""String_Node_Str"",previousRuneStats);
  context.put(""String_Node_Str"",previousPrimaryRunePath);
  context.put(""String_Node_Str"",previousSecondaryRunePath);
  return participant;
}",0.9817400644468314
117578,"public static int forCurrentGameInfoDto(final CurrentGameInfo game){
  return Arrays.hashCode(new Object[]{CurrentGameInfo.class.getCanonicalName(),game.getPlatformId(),game.getGameId()});
}","public static int forCurrentGameInfoDto(final CurrentGameInfo game){
  return Arrays.hashCode(new Object[]{CurrentGameInfo.class.getCanonicalName(),game.getPlatformId(),game.getSummonerId()});
}",0.9791666666666666
117579,"@SuppressWarnings(""String_Node_Str"") public static int forChampionListDtoQuery(final java.util.Map<String,Object> query){
  return Arrays.hashCode(new Object[]{ChampionList.class.getCanonicalName(),((Platform)query.get(""String_Node_Str"")).getTag(),(String)query.get(""String_Node_Str""),(String)query.get(""String_Node_Str""),(Set<String>)query.get(""String_Node_Str"")});
}","@SuppressWarnings(""String_Node_Str"") public static int forChampionListDtoQuery(final java.util.Map<String,Object> query){
  return Arrays.hashCode(new Object[]{ChampionList.class.getCanonicalName(),((Platform)query.get(""String_Node_Str"")).getTag(),(String)query.get(""String_Node_Str""),(String)query.get(""String_Node_Str""),(Set<String>)query.get(""String_Node_Str""),(Boolean)query.get(""String_Node_Str"")});
}",0.9509043927648578
117580,"public static int forChampionListDto(final ChampionList champions){
  return Arrays.hashCode(new Object[]{ChampionList.class.getCanonicalName(),champions.getPlatform(),champions.getVersion(),champions.getLocale(),champions.getIncludedData()});
}","public static int forChampionListDto(final ChampionList champions){
  return Arrays.hashCode(new Object[]{ChampionList.class.getCanonicalName(),champions.getPlatform(),champions.getVersion(),champions.getLocale(),champions.getIncludedData(),champions.isDataById()});
}",0.9551656920077972
117581,"@SuppressWarnings(""String_Node_Str"") public static Iterator<Integer> forManyChampionListDtoQuery(final java.util.Map<String,Object> query){
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return new Iterator<Integer>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Integer next(){
      return Arrays.hashCode(new Object[]{ChampionList.class.getCanonicalName(),((Platform)query.get(""String_Node_Str"")).getTag(),iterator.next(),(String)query.get(""String_Node_Str""),(Set<String>)query.get(""String_Node_Str"")});
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@SuppressWarnings(""String_Node_Str"") public static Iterator<Integer> forManyChampionListDtoQuery(final java.util.Map<String,Object> query){
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return new Iterator<Integer>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Integer next(){
      return Arrays.hashCode(new Object[]{ChampionList.class.getCanonicalName(),((Platform)query.get(""String_Node_Str"")).getTag(),iterator.next(),(String)query.get(""String_Node_Str""),(Set<String>)query.get(""String_Node_Str""),(Boolean)query.get(""String_Node_Str"")});
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.9755784061696658
117582,"/** 
 * @param defaultPlatform the defaultPlatform to set
 */
public void setDefaultPlatform(final Platform defaultPlatform){
  this.defaultPlatform=defaultPlatform;
}","/** 
 * Sets the default platform. If this is not set or is set to null, platforms must be provided for all API queries.
 * @param defaultPlatform
 */
public static void setDefaultPlatform(final Platform defaultPlatform){
  settings.setDefaultPlatform(defaultPlatform);
}",0.4840182648401826
117583,"private Settings(final Configuration config){
  pipeline=PipelineConfiguration.toPipeline(config.getPipeline());
  defaultPlatform=config.getDefaultPlatform();
  defaultLocale=config.getDefaultLocale();
  final Supplier<String> supplier=new Supplier<String>(){
    @Override public String get(){
      return pipeline.get(com.merakianalytics.orianna.types.dto.staticdata.Realm.class,ImmutableMap.<String,Object>of(""String_Node_Str"",defaultPlatform)).getV();
    }
  }
;
  final ExpirationPeriod period=config.getCurrentVersionExpiration();
  if (period.getPeriod() == 0) {
    currentVersion=supplier;
  }
 else   if (period.getPeriod() < 0) {
    currentVersion=Suppliers.memoize(supplier);
  }
 else {
    currentVersion=Suppliers.memoizeWithExpiration(supplier,period.getPeriod(),period.getUnit());
  }
}","private Settings(final Configuration config){
  pipeline=newPipelineSupplier();
  configuration=config;
  currentVersion=newVersionSupplier();
}",0.2607781282860147
117584,"@Override public String get(){
  return pipeline.get(com.merakianalytics.orianna.types.dto.staticdata.Realm.class,ImmutableMap.<String,Object>of(""String_Node_Str"",defaultPlatform)).getV();
}","@Override public String get(){
  return pipeline.get().get(com.merakianalytics.orianna.types.dto.staticdata.Realm.class,ImmutableMap.<String,Object>of(""String_Node_Str"",getDefaultPlatform())).getV();
}",0.9667519181585678
117585,"/** 
 * @return the defaultLocale
 */
public String getDefaultLocale(){
  return defaultLocale;
}","/** 
 * @return the defaultLocale
 */
public String getDefaultLocale(){
  return configuration.getDefaultLocale();
}",0.9014084507042254
117586,"/** 
 * @return the defaultPlatform
 */
public Platform getDefaultPlatform(){
  return defaultPlatform;
}","/** 
 * @return the defaultPlatform
 */
public Platform getDefaultPlatform(){
  if (configuration.getDefaultPlatform() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return configuration.getDefaultPlatform();
}",0.4985337243401759
117587,"/** 
 * @return the pipeline
 */
public DataPipeline getPipeline(){
  return pipeline;
}","/** 
 * @return the pipeline
 */
public DataPipeline getPipeline(){
  return pipeline.get();
}",0.967032967032967
117588,"/** 
 * @param defaultLocale the defaultLocale to set
 */
public void setDefaultLocale(final String defaultLocale){
  this.defaultLocale=defaultLocale;
}","/** 
 * Sets the default locale. The default locale will be used for locale-aware information from the Static Data API like champion names and descriptions. The default locale starts null, and if it is set to null the default locale for the region/platform the data is from will be used.
 * @param defaultLocale the default locale
 */
public static void setDefaultLocale(final String defaultLocale){
  settings.setDefaultLocale(defaultLocale);
}",0.451505016722408
117589,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + (APIKey == null ? 0 : APIKey.hashCode());
  result=prime * result + (http404Strategy == null ? 0 : http404Strategy.hashCode());
  result=prime * result + (http429Strategy == null ? 0 : http429Strategy.hashCode());
  result=prime * result + (http500Strategy == null ? 0 : http500Strategy.hashCode());
  result=prime * result + (http503Strategy == null ? 0 : http503Strategy.hashCode());
  result=prime * result + (httpTimeoutStrategy == null ? 0 : httpTimeoutStrategy.hashCode());
  long temp;
  temp=Double.doubleToLongBits(limitingShare);
  result=prime * result + (int)(temp ^ temp >>> 32);
  result=prime * result + (limitingType == null ? 0 : limitingType.hashCode());
  result=prime * result + (rateLimiterTimeoutStrategy == null ? 0 : rateLimiterTimeoutStrategy.hashCode());
  result=prime * result + (requests == null ? 0 : requests.hashCode());
  result=prime * result + (services == null ? 0 : services.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + (apiKey == null ? 0 : apiKey.hashCode());
  result=prime * result + (http404Strategy == null ? 0 : http404Strategy.hashCode());
  result=prime * result + (http429Strategy == null ? 0 : http429Strategy.hashCode());
  result=prime * result + (http500Strategy == null ? 0 : http500Strategy.hashCode());
  result=prime * result + (http503Strategy == null ? 0 : http503Strategy.hashCode());
  result=prime * result + (httpTimeoutStrategy == null ? 0 : httpTimeoutStrategy.hashCode());
  long temp;
  temp=Double.doubleToLongBits(limitingShare);
  result=prime * result + (int)(temp ^ temp >>> 32);
  result=prime * result + (limitingType == null ? 0 : limitingType.hashCode());
  result=prime * result + (rateLimiterTimeoutStrategy == null ? 0 : rateLimiterTimeoutStrategy.hashCode());
  result=prime * result + (requests == null ? 0 : requests.hashCode());
  result=prime * result + (services == null ? 0 : services.hashCode());
  return result;
}",0.9942307692307693
117590,"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Configuration other=(Configuration)obj;
  if (APIKey == null) {
    if (other.APIKey != null) {
      return false;
    }
  }
 else   if (!APIKey.equals(other.APIKey)) {
    return false;
  }
  if (http404Strategy == null) {
    if (other.http404Strategy != null) {
      return false;
    }
  }
 else   if (!http404Strategy.equals(other.http404Strategy)) {
    return false;
  }
  if (http429Strategy == null) {
    if (other.http429Strategy != null) {
      return false;
    }
  }
 else   if (!http429Strategy.equals(other.http429Strategy)) {
    return false;
  }
  if (http500Strategy == null) {
    if (other.http500Strategy != null) {
      return false;
    }
  }
 else   if (!http500Strategy.equals(other.http500Strategy)) {
    return false;
  }
  if (http503Strategy == null) {
    if (other.http503Strategy != null) {
      return false;
    }
  }
 else   if (!http503Strategy.equals(other.http503Strategy)) {
    return false;
  }
  if (httpTimeoutStrategy == null) {
    if (other.httpTimeoutStrategy != null) {
      return false;
    }
  }
 else   if (!httpTimeoutStrategy.equals(other.httpTimeoutStrategy)) {
    return false;
  }
  if (Double.doubleToLongBits(limitingShare) != Double.doubleToLongBits(other.limitingShare)) {
    return false;
  }
  if (limitingType != other.limitingType) {
    return false;
  }
  if (rateLimiterTimeoutStrategy == null) {
    if (other.rateLimiterTimeoutStrategy != null) {
      return false;
    }
  }
 else   if (!rateLimiterTimeoutStrategy.equals(other.rateLimiterTimeoutStrategy)) {
    return false;
  }
  if (requests == null) {
    if (other.requests != null) {
      return false;
    }
  }
 else   if (!requests.equals(other.requests)) {
    return false;
  }
  if (services == null) {
    if (other.services != null) {
      return false;
    }
  }
 else   if (!services.equals(other.services)) {
    return false;
  }
  return true;
}","@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Configuration other=(Configuration)obj;
  if (apiKey == null) {
    if (other.apiKey != null) {
      return false;
    }
  }
 else   if (!apiKey.equals(other.apiKey)) {
    return false;
  }
  if (http404Strategy == null) {
    if (other.http404Strategy != null) {
      return false;
    }
  }
 else   if (!http404Strategy.equals(other.http404Strategy)) {
    return false;
  }
  if (http429Strategy == null) {
    if (other.http429Strategy != null) {
      return false;
    }
  }
 else   if (!http429Strategy.equals(other.http429Strategy)) {
    return false;
  }
  if (http500Strategy == null) {
    if (other.http500Strategy != null) {
      return false;
    }
  }
 else   if (!http500Strategy.equals(other.http500Strategy)) {
    return false;
  }
  if (http503Strategy == null) {
    if (other.http503Strategy != null) {
      return false;
    }
  }
 else   if (!http503Strategy.equals(other.http503Strategy)) {
    return false;
  }
  if (httpTimeoutStrategy == null) {
    if (other.httpTimeoutStrategy != null) {
      return false;
    }
  }
 else   if (!httpTimeoutStrategy.equals(other.httpTimeoutStrategy)) {
    return false;
  }
  if (Double.doubleToLongBits(limitingShare) != Double.doubleToLongBits(other.limitingShare)) {
    return false;
  }
  if (limitingType != other.limitingType) {
    return false;
  }
  if (rateLimiterTimeoutStrategy == null) {
    if (other.rateLimiterTimeoutStrategy != null) {
      return false;
    }
  }
 else   if (!rateLimiterTimeoutStrategy.equals(other.rateLimiterTimeoutStrategy)) {
    return false;
  }
  if (requests == null) {
    if (other.requests != null) {
      return false;
    }
  }
 else   if (!requests.equals(other.requests)) {
    return false;
  }
  if (services == null) {
    if (other.services != null) {
      return false;
    }
  }
 else   if (!services.equals(other.services)) {
    return false;
  }
  return true;
}",0.994296577946768
117591,"private static Map<String,String> getDefaultHeaders(final Configuration config){
  return ImmutableMap.of(""String_Node_Str"",config.getAPIKey());
}","private static Map<String,String> getDefaultHeaders(final Configuration config){
  if (config.getApiKey() != null) {
    return ImmutableMap.of(""String_Node_Str"",config.getApiKey());
  }
  return ImmutableMap.of();
}",0.7734806629834254
117592,"private <T extends DataObject>T get(final RequestContext<T> context){
  context.attemptCount+=1;
  final String host=context.platform.getTag().toLowerCase() + ""String_Node_Str"";
  Response response=null;
  MultiRateLimiter limiter=getRateLimiter(context.platform,context.rateLimiterName);
  try {
    if (limiter == null) {
synchronized (getCreateRateLimiterLock(context.platform,context.rateLimiterName)) {
        limiter=getRateLimiter(context.platform,context.rateLimiterName);
        if (limiter == null) {
          final long timeBefore=System.currentTimeMillis();
          response=client.get(host,context.endpoint,context.parameters,defaultHeaders,null);
          final long timeAfter=System.currentTimeMillis();
          createRateLimiter(context.platform,context.rateLimiterName,response,timeBefore,timeAfter);
        }
      }
    }
    if (limiter != null) {
      response=client.get(host,context.endpoint,context.parameters,defaultHeaders,limiter);
    }
  }
 catch (  final TimeoutException e) {
    LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
    return Type.RATE_LIMITER == e.getType() ? limiterTimeoutStrategy.onFailedRequest(this,context,null,e) : httpTimeoutStrategy.onFailedRequest(this,context,null,e);
  }
catch (  final IOException e) {
    LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
    throw new OriannaException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
  }
  if (limiter != null) {
    adjustRateLimitsIfNecessary(limiter,response);
  }
switch (response.getStatusCode()) {
case 400:
    LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
  throw new BadRequestException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 403:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new ForbiddenException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 404:
LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http404Strategy.onFailedRequest(this,context,response,new NotFoundException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 415:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new UnsupportedMediaTypeException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 429:
LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http429Strategy.onFailedRequest(this,context,response,new RateLimitExceededException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 500:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http500Strategy.onFailedRequest(this,context,response,new InternalServerErrorException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 503:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http503Strategy.onFailedRequest(this,context,response,new ServiceUnavailableException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
default :
if (response.getStatusCode() >= 400) {
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""+ response.getStatusCode()+ ""String_Node_Str""+ response.getBody());
throw new OriannaException(""String_Node_Str"" + response.getStatusCode() + ""String_Node_Str""+ response.getBody());
}
break;
}
return DataObject.fromJSON(context.type,response.getBody());
}","private <T extends DataObject>T get(final RequestContext<T> context){
  context.attemptCount+=1;
  final String host=context.platform.getTag().toLowerCase() + ""String_Node_Str"";
  Response response=null;
  MultiRateLimiter limiter=getRateLimiter(context.platform,context.rateLimiterName);
  try {
    if (limiter == null) {
synchronized (getCreateRateLimiterLock(context.platform,context.rateLimiterName)) {
        limiter=getRateLimiter(context.platform,context.rateLimiterName);
        if (limiter == null) {
          final long timeBefore=System.currentTimeMillis();
          response=client.get(host,context.endpoint,context.parameters,defaultHeaders,null);
          final long timeAfter=System.currentTimeMillis();
          createRateLimiter(context.platform,context.rateLimiterName,response,timeBefore,timeAfter);
        }
      }
    }
    if (limiter != null) {
      response=client.get(host,context.endpoint,context.parameters,defaultHeaders,limiter);
    }
  }
 catch (  final TimeoutException e) {
    LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
    return Type.RATE_LIMITER == e.getType() ? limiterTimeoutStrategy.onFailedRequest(this,context,null,e) : httpTimeoutStrategy.onFailedRequest(this,context,null,e);
  }
catch (  final IOException e) {
    LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
    throw new OriannaException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"",e);
  }
  if (limiter != null) {
    adjustRateLimitsIfNecessary(limiter,response);
  }
switch (response.getStatusCode()) {
case 400:
    LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
  throw new BadRequestException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 401:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new UnauthorizedException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 403:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new ForbiddenException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 404:
LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http404Strategy.onFailedRequest(this,context,response,new NotFoundException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 415:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
throw new UnsupportedMediaTypeException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
case 429:
LOGGER.info(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http429Strategy.onFailedRequest(this,context,response,new RateLimitExceededException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 500:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http500Strategy.onFailedRequest(this,context,response,new InternalServerErrorException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
case 503:
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str"");
return http503Strategy.onFailedRequest(this,context,response,new ServiceUnavailableException(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""));
default :
if (response.getStatusCode() >= 400) {
LOGGER.error(""String_Node_Str"" + host + ""String_Node_Str""+ context.endpoint+ ""String_Node_Str""+ response.getStatusCode()+ ""String_Node_Str""+ response.getBody());
throw new OriannaException(""String_Node_Str"" + response.getStatusCode() + ""String_Node_Str""+ response.getBody());
}
break;
}
return DataObject.fromJSON(context.type,response.getBody());
}",0.8092543694203446
117593,"public static void main(final String[] args){
  final Summoner summoner=Summoner.withAccountId(36321079).withRegion(Region.NORTH_AMERICA).get();
  final MatchHistory matchHistory=MatchHistory.forSummoner(summoner).get();
  final Map<Integer,String> championIdToNameMapping=new HashMap<>();
  for (  final Champion champion : Champions.withRegion(Region.NORTH_AMERICA).get()) {
    championIdToNameMapping.put(champion.getId(),champion.getName());
  }
  final Map<String,Integer> playedChampions=new HashMap<>();
  for (  final Match match : matchHistory) {
    final Integer championId=match.getParticipants().find(summoner).getChampion().getId();
    final String championName=championIdToNameMapping.get(championId);
    Integer count=playedChampions.get(championName);
    if (count == null) {
      count=0;
      playedChampions.put(championName,count);
    }
    playedChampions.put(championName,playedChampions.get(championName) + 1);
  }
  System.out.println(""String_Node_Str"" + matchHistory.size());
  playedChampions.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2) -> e1,LinkedHashMap::new));
  System.out.println(""String_Node_Str"" + summoner.getName() + ""String_Node_Str"");
  for (  final String championName : playedChampions.keySet()) {
    final Integer count=playedChampions.get(championName);
    System.out.println(championName + ""String_Node_Str"" + count);
  }
  System.out.println(""String_Node_Str"");
  final Match match=matchHistory.get(0);
  System.out.println(""String_Node_Str"" + match.getId());
  final Participant participant=match.getParticipants().find(summoner);
  System.out.println(""String_Node_Str"");
  System.out.println(participant.getSummoner().getName() + ""String_Node_Str"" + participant.getChampion().getName());
  System.out.println(""String_Node_Str"");
  for (  final Participant p : match.getParticipants()) {
    System.out.println(p.getSummoner().getName() + ""String_Node_Str"" + p.getChampion().getName());
  }
  System.out.println(""String_Node_Str"");
  for (  final Participant p : match.getParticipants()) {
    System.out.println(p.getSummoner().getName() + ""String_Node_Str"" + p.getChampion().getName());
  }
  System.out.println(""String_Node_Str"" + match.getBlueTeam().isWinner());
  System.out.println(""String_Node_Str"" + match.getRedTeam().isWinner());
  System.out.println(""String_Node_Str"");
  for (  final Participant p : match.getBlueTeam().getParticipants()) {
    System.out.println(p.getSummoner().getName());
  }
}","public static void main(final String[] args){
  final Summoner summoner=Summoner.withAccountId(36321079).withRegion(Region.NORTH_AMERICA).get();
  final MatchHistory matchHistory=MatchHistory.forSummoner(summoner).get();
  final Map<Integer,String> championIdToNameMapping=new HashMap<>();
  for (  final Champion champion : Champions.withRegion(Region.NORTH_AMERICA).get()) {
    championIdToNameMapping.put(champion.getId(),champion.getName());
  }
  final Map<String,Integer> playedChampions=new HashMap<>();
  for (  final Match match : matchHistory) {
    final Integer championId=match.getParticipants().find(summoner).getChampion().getId();
    final String championName=championIdToNameMapping.get(championId);
    Integer count=playedChampions.get(championName);
    if (count == null) {
      count=0;
      playedChampions.put(championName,count);
    }
    playedChampions.put(championName,playedChampions.get(championName) + 1);
  }
  System.out.println(""String_Node_Str"" + matchHistory.size());
  List<Entry<String,Integer>> entries=new ArrayList<>(playedChampions.entrySet());
  entries.sort((  Entry<String,Integer> e0,  Entry<String,Integer> e1) -> Integer.compare(e1.getValue(),e0.getValue()));
  for (int i=0; i < 10 && i < entries.size(); i++) {
    String championName=entries.get(i).getKey();
    int count=entries.get(i).getValue();
    System.out.println(championName + ""String_Node_Str"" + count);
  }
  System.out.println(""String_Node_Str"");
  final Match match=matchHistory.get(0);
  System.out.println(""String_Node_Str"" + match.getId());
  final Participant participant=match.getParticipants().find(summoner);
  System.out.println(""String_Node_Str"");
  System.out.println(participant.getSummoner().getName() + ""String_Node_Str"" + participant.getChampion().getName());
  System.out.println(""String_Node_Str"");
  for (  final Participant p : match.getParticipants()) {
    System.out.println(p.getSummoner().getName() + ""String_Node_Str"" + p.getChampion().getName());
  }
  System.out.println(""String_Node_Str"");
  for (  final Participant p : match.getParticipants()) {
    System.out.println(p.getSummoner().getName() + ""String_Node_Str"" + p.getChampion().getName());
  }
  System.out.println(""String_Node_Str"" + match.getBlueTeam().isWinner());
  System.out.println(""String_Node_Str"" + match.getRedTeam().isWinner());
  System.out.println(""String_Node_Str"");
  for (  final Participant p : match.getBlueTeam().getParticipants()) {
    System.out.println(p.getSummoner().getName());
  }
}",0.45032589373889
117594,"@Override public SummonerSpell next(){
  final com.merakianalytics.orianna.types.data.staticdata.SummonerSpell data=new com.merakianalytics.orianna.types.data.staticdata.SummonerSpell();
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  if (ids != null) {
    data.setId((Integer)iterator.next());
  }
 else   if (names != null) {
    data.setName((String)iterator.next());
  }
 else {
    return null;
  }
  return new SummonerSpell(data);
}","@Override public VerificationString next(){
  final com.merakianalytics.orianna.types.data.thirdpartycode.VerificationString data=new com.merakianalytics.orianna.types.data.thirdpartycode.VerificationString();
  data.setPlatform(platform.getTag());
  data.setSummonerId(iterator.next().longValue());
  return new VerificationString(data);
}",0.0924855491329479
117595,"private Settings(final Configuration config){
  pipeline=PipelineConfiguration.toPipeline(config.getPipeline());
  defaultPlatform=config.getDefaultPlatform();
  defaultLocale=config.getDefaultLocale();
  currentVersion=Suppliers.memoizeWithExpiration(new Supplier<String>(){
    @Override public String get(){
      return pipeline.get(com.merakianalytics.orianna.types.dto.staticdata.Realm.class,ImmutableMap.<String,Object>of(""String_Node_Str"",defaultPlatform)).getV();
    }
  }
,config.getCurrentVersionExpiration().getPeriod(),config.getCurrentVersionExpiration().getUnit());
}","private Settings(final Configuration config){
  pipeline=PipelineConfiguration.toPipeline(config.getPipeline());
  defaultPlatform=config.getDefaultPlatform();
  defaultLocale=config.getDefaultLocale();
  final Supplier<String> supplier=new Supplier<String>(){
    @Override public String get(){
      return pipeline.get(com.merakianalytics.orianna.types.dto.staticdata.Realm.class,ImmutableMap.<String,Object>of(""String_Node_Str"",defaultPlatform)).getV();
    }
  }
;
  final ExpirationPeriod period=config.getCurrentVersionExpiration();
  if (period.getPeriod() == 0) {
    currentVersion=supplier;
  }
 else   if (period.getPeriod() < 0) {
    currentVersion=Suppliers.memoize(supplier);
  }
 else {
    currentVersion=Suppliers.memoizeWithExpiration(supplier,period.getPeriod(),period.getUnit());
  }
}",0.7136690647482015
117596,"@SuppressWarnings(""String_Node_Str"") @Get(Item.class) public Item getItem(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? Collections.<String>emptySet() : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Item data=DataObject.fromJSON(Item.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String itemId=ids.next();
        final ObjectNode item=(ObjectNode)temp.get(itemId);
        final String itemName=item.get(""String_Node_Str"").asText();
        if (id != null && id.intValue() == Integer.parseInt(itemId) || name.equals(itemName)) {
          item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
          INCLUDED_DATA_PROCESSOR.apply(item);
          return item;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(Item.class) public Item getItem(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? Collections.<String>emptySet() : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Item data=DataObject.fromJSON(Item.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String itemId=ids.next();
        final ObjectNode item=(ObjectNode)temp.get(itemId);
        final String itemName=item.get(""String_Node_Str"").asText();
        if (id != null && id.intValue() == Integer.parseInt(itemId) || name != null && name.equals(itemName)) {
          item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
          INCLUDED_DATA_PROCESSOR.apply(item);
          return item;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.9962825278810408
117597,"@SuppressWarnings(""String_Node_Str"") @Get(Rune.class) public Rune getRune(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? Collections.<String>emptySet() : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Rune data=DataObject.fromJSON(Rune.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String runeId=ids.next();
        final ObjectNode rune=(ObjectNode)temp.get(runeId);
        final String runeName=rune.get(""String_Node_Str"").asText();
        if (id != null && id.intValue() == Integer.parseInt(runeId) || name.equals(runeName)) {
          rune.set(""String_Node_Str"",new IntNode(Integer.parseInt(runeId)));
          INCLUDED_DATA_PROCESSOR.apply(rune);
          return rune;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(Rune.class) public Rune getRune(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? Collections.<String>emptySet() : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Rune data=DataObject.fromJSON(Rune.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String runeId=ids.next();
        final ObjectNode rune=(ObjectNode)temp.get(runeId);
        final String runeName=rune.get(""String_Node_Str"").asText();
        if (id != null && id.intValue() == Integer.parseInt(runeId) || name != null && name.equals(runeName)) {
          rune.set(""String_Node_Str"",new IntNode(Integer.parseInt(runeId)));
          INCLUDED_DATA_PROCESSOR.apply(rune);
          return rune;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.9962825278810408
117598,"@SuppressWarnings(""String_Node_Str"") @Get(Mastery.class) public Mastery getMastery(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? Collections.<String>emptySet() : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Mastery data=DataObject.fromJSON(Mastery.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      for (      final JsonNode mastery : temp) {
        final JsonNode idNode=mastery.get(""String_Node_Str"");
        final String masteryName=mastery.get(""String_Node_Str"").asText();
        if (id != null && idNode != null && id.intValue() == idNode.asInt() || name.equals(masteryName)) {
          INCLUDED_DATA_PROCESSOR.apply(mastery);
          return mastery;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(Mastery.class) public Mastery getMastery(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? Collections.<String>emptySet() : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Mastery data=DataObject.fromJSON(Mastery.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      for (      final JsonNode mastery : temp) {
        final JsonNode idNode=mastery.get(""String_Node_Str"");
        final String masteryName=mastery.get(""String_Node_Str"").asText();
        if (id != null && idNode != null && id.intValue() == idNode.asInt() || name != null && name.equals(masteryName)) {
          INCLUDED_DATA_PROCESSOR.apply(mastery);
          return mastery;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.9960899315738024
117599,"@SuppressWarnings(""String_Node_Str"") @Get(SummonerSpell.class) public SummonerSpell getSummonerSpell(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? Collections.<String>emptySet() : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final SummonerSpell data=DataObject.fromJSON(SummonerSpell.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return null;
      }
      for (      final JsonNode spell : data) {
        final JsonNode idNode=spell.get(""String_Node_Str"");
        final String spellName=spell.get(""String_Node_Str"").asText();
        if (id != null && idNode != null && id.intValue() == idNode.asInt() || name.equals(spellName)) {
          INCLUDED_DATA_PROCESSOR.apply(spell);
          CHAMPION_PROCESSOR.apply(spell);
          return spell;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(SummonerSpell.class) public SummonerSpell getSummonerSpell(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? Collections.<String>emptySet() : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final SummonerSpell data=DataObject.fromJSON(SummonerSpell.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return null;
      }
      for (      final JsonNode spell : data) {
        final JsonNode idNode=spell.get(""String_Node_Str"");
        final String spellName=spell.get(""String_Node_Str"").asText();
        if (id != null && idNode != null && id.intValue() == idNode.asInt() || name != null && name.equals(spellName)) {
          INCLUDED_DATA_PROCESSOR.apply(spell);
          CHAMPION_PROCESSOR.apply(spell);
          return spell;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.9962370649106302
117600,"@Override public long calculateExpiryTime(final Integer key,final Object value,final long loadTime,final CacheEntry<Integer,Object> oldEntry){
  return loadTime + expirationPeriods.get(value.getClass()).longValue();
}","@Override public long calculateExpiryTime(final Integer key,final Object value,final long loadTime,final CacheEntry<Integer,Object> oldEntry){
  final Long period=expirationPeriods.get(value.getClass());
  if (period != null && period > 0L) {
    return loadTime + period.longValue();
  }
  return ExpiryTimeValues.ETERNAL;
}",0.7343173431734318
117601,"@Get(MatchTimeline.class) public MatchTimeline getMatchTimeline(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Number matchId=(Number)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",matchId,""String_Node_Str"");
  final String endpoint=""String_Node_Str"" + matchId;
  final MatchTimeline data=get(MatchTimeline.class,endpoint,platform,""String_Node_Str"");
  data.setPlatform(platform.getTag());
  data.setMatchId(matchId.longValue());
  return data;
}","@Get(MatchTimeline.class) public MatchTimeline getMatchTimeline(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",id,""String_Node_Str"");
  final String endpoint=""String_Node_Str"" + id;
  final MatchTimeline data=get(MatchTimeline.class,endpoint,platform,""String_Node_Str"");
  data.setPlatform(platform.getTag());
  data.setMatchId(id.longValue());
  return data;
}",0.4385026737967914
117602,"@SuppressWarnings(""String_Node_Str"") @GetMany(LeagueList.class) public CloseableIterator<LeagueList> getManyLeagueList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Tier tier=(Tier)query.get(""String_Node_Str"");
  final Iterable<Queue> queues=(Iterable<Queue>)query.get(""String_Node_Str"");
  final Iterable<String> leagueIds=(Iterable<String>)query.get(""String_Node_Str"");
  if (leagueIds == null && (tier == null || queues == null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (leagueIds != null && !LEAGUE_LIST_ENDPOINTS.containsKey(tier)) {
    return CloseableIterators.empty();
  }
  final Iterator<?> iterator=leagueIds == null ? queues.iterator() : leagueIds.iterator();
  return CloseableIterators.from(new Iterator<LeagueList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public LeagueList next(){
      LeagueList data;
      if (leagueIds == null) {
        final Queue queue=(Queue)iterator.next();
        if (!Queue.RANKED.contains(queue)) {
          return null;
        }
        final String endpoint=LEAGUE_LIST_ENDPOINTS.get(tier) + queue;
        data=get(LeagueList.class,endpoint,platform,LEAGUE_LIST_ENDPOINTS.get(tier) + ""String_Node_Str"");
      }
 else {
        final String leagueId=(String)iterator.next();
        final String endpoint=""String_Node_Str"" + leagueId;
        data=get(LeagueList.class,endpoint,platform,""String_Node_Str"");
      }
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(LeagueList.class) public CloseableIterator<LeagueList> getManyLeagueList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Tier tier=(Tier)query.get(""String_Node_Str"");
  final Iterable<Queue> queues=(Iterable<Queue>)query.get(""String_Node_Str"");
  final Iterable<String> leagueIds=(Iterable<String>)query.get(""String_Node_Str"");
  if (leagueIds == null) {
    if (tier == null || queues == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (!LEAGUE_LIST_ENDPOINTS.containsKey(tier)) {
      return CloseableIterators.empty();
    }
  }
  final Iterator<?> iterator=leagueIds == null ? queues.iterator() : leagueIds.iterator();
  return CloseableIterators.from(new Iterator<LeagueList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public LeagueList next(){
      LeagueList data;
      if (leagueIds == null) {
        final Queue queue=(Queue)iterator.next();
        if (!Queue.RANKED.contains(queue)) {
          return null;
        }
        final String endpoint=LEAGUE_LIST_ENDPOINTS.get(tier) + queue;
        data=get(LeagueList.class,endpoint,platform,LEAGUE_LIST_ENDPOINTS.get(tier) + ""String_Node_Str"");
      }
 else {
        final String leagueId=(String)iterator.next();
        final String endpoint=""String_Node_Str"" + leagueId;
        data=get(LeagueList.class,endpoint,platform,""String_Node_Str"");
      }
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9816124469589816
117603,"@Get(LeagueList.class) public LeagueList getLeagueList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Tier tier=(Tier)query.get(""String_Node_Str"");
  final Queue queue=(Queue)query.get(""String_Node_Str"");
  final String leagueId=(String)query.get(""String_Node_Str"");
  if (leagueId == null && (tier == null || queue == null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (leagueId == null && !LEAGUE_LIST_ENDPOINTS.containsKey(tier)) {
    return null;
  }
  if (leagueId == null && !Queue.RANKED.contains(queue)) {
    return null;
  }
  LeagueList data;
  if (leagueId == null) {
    final String endpoint=LEAGUE_LIST_ENDPOINTS.get(tier) + queue;
    data=get(LeagueList.class,endpoint,platform,LEAGUE_LIST_ENDPOINTS.get(tier) + ""String_Node_Str"");
  }
 else {
    final String endpoint=""String_Node_Str"" + leagueId;
    data=get(LeagueList.class,endpoint,platform,""String_Node_Str"");
  }
  data.setPlatform(platform.getTag());
  return data;
}","@Get(LeagueList.class) public LeagueList getLeagueList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Tier tier=(Tier)query.get(""String_Node_Str"");
  final Queue queue=(Queue)query.get(""String_Node_Str"");
  final String leagueId=(String)query.get(""String_Node_Str"");
  if (leagueId == null) {
    if (tier == null || queue == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (!LEAGUE_LIST_ENDPOINTS.containsKey(tier) || !Queue.RANKED.contains(queue)) {
      return null;
    }
  }
  LeagueList data;
  if (leagueId == null) {
    final String endpoint=LEAGUE_LIST_ENDPOINTS.get(tier) + queue;
    data=get(LeagueList.class,endpoint,platform,LEAGUE_LIST_ENDPOINTS.get(tier) + ""String_Node_Str"");
  }
 else {
    final String endpoint=""String_Node_Str"" + leagueId;
    data=get(LeagueList.class,endpoint,platform,""String_Node_Str"");
  }
  data.setPlatform(platform.getTag());
  return data;
}",0.9355870260392872
117604,"@Override public Versions next(){
  final Platform platform=iterator.next();
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"",null,null);
  final Versions data=DataObject.fromJSON(Versions.class,content);
  data.setPlatform(platform.getTag());
  return data;
}","@Override public Versions next(){
  final Platform platform=iterator.next();
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"",null,null);
  final Versions data=DataObject.fromJSON(Versions.class,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  return data;
}",0.9351432880844646
117605,"@SuppressWarnings(""String_Node_Str"") @Get(ItemList.class) public ItemList getItemList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ItemList data=DataObject.fromJSON(ItemList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String itemId=ids.next();
        final ObjectNode item=(ObjectNode)temp.get(itemId);
        item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
        INCLUDED_DATA_PROCESSOR.apply(item);
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Item item : data.getData().values()) {
    item.setPlatform(platform.getTag());
    item.setVersion(data.getVersion());
    item.setLocale(locale);
    item.setIncludedData(includedData);
  }
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(ItemList.class) public ItemList getItemList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ItemList data=DataObject.fromJSON(ItemList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String itemId=ids.next();
        final ObjectNode item=(ObjectNode)temp.get(itemId);
        item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
        INCLUDED_DATA_PROCESSOR.apply(item);
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Item item : data.getData().values()) {
    item.setPlatform(platform.getTag());
    item.setVersion(data.getVersion());
    item.setLocale(locale);
    item.setIncludedData(includedData);
  }
  return data;
}",0.9888572168955688
117606,"@SuppressWarnings(""String_Node_Str"") @Get(Mastery.class) public Mastery getMastery(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",id,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Mastery data=DataObject.fromJSON(Mastery.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      for (      final JsonNode mastery : temp) {
        final JsonNode idNode=mastery.get(""String_Node_Str"");
        if (idNode != null && id.intValue() == idNode.asInt()) {
          INCLUDED_DATA_PROCESSOR.apply(mastery);
          return mastery;
        }
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(Mastery.class) public Mastery getMastery(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",id,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Mastery data=DataObject.fromJSON(Mastery.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      for (      final JsonNode mastery : temp) {
        final JsonNode idNode=mastery.get(""String_Node_Str"");
        if (idNode != null && id.intValue() == idNode.asInt()) {
          INCLUDED_DATA_PROCESSOR.apply(mastery);
          return mastery;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.9812482507696614
117607,"@SuppressWarnings(""String_Node_Str"") @Get(SummonerSpellList.class) public SummonerSpellList getSummonerSpellList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final SummonerSpellList data=DataObject.fromJSON(SummonerSpellList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode spell : data) {
        INCLUDED_DATA_PROCESSOR.apply(spell);
        SPELL_PROCESSOR.apply(spell);
        if (dataById) {
          final String key=spell.get(""String_Node_Str"").asText();
          final int id=spell.get(""String_Node_Str"").asInt();
          data.remove(key);
          data.set(Integer.toString(id),spell);
        }
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final SummonerSpell spell : data.getData().values()) {
    spell.setPlatform(platform.getTag());
    spell.setVersion(data.getVersion());
    spell.setLocale(locale);
    spell.setIncludedData(includedData);
  }
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(SummonerSpellList.class) public SummonerSpellList getSummonerSpellList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final SummonerSpellList data=DataObject.fromJSON(SummonerSpellList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode spell : data) {
        INCLUDED_DATA_PROCESSOR.apply(spell);
        SPELL_PROCESSOR.apply(spell);
        if (dataById) {
          final String key=spell.get(""String_Node_Str"").asText();
          final int id=spell.get(""String_Node_Str"").asInt();
          data.remove(key);
          data.set(Integer.toString(id),spell);
        }
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final SummonerSpell spell : data.getData().values()) {
    spell.setPlatform(platform.getTag());
    spell.setVersion(data.getVersion());
    spell.setLocale(locale);
    spell.setIncludedData(includedData);
  }
  return data;
}",0.990220604957926
117608,"@SuppressWarnings(""String_Node_Str"") @GetMany(Realm.class) public CloseableIterator<Realm> getManyRealm(final Map<String,Object> query,final PipelineContext context){
  final Iterable<Platform> platforms=(Iterable<Platform>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platforms,""String_Node_Str"");
  final Iterator<Platform> iterator=platforms.iterator();
  return CloseableIterators.from(new Iterator<Realm>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Realm next(){
      final Platform platform=iterator.next();
      final String content=get(""String_Node_Str"" + platform.getRegion().getTag().toLowerCase(),null,null);
      final Realm data=DataObject.fromJSON(Realm.class,content);
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(Realm.class) public CloseableIterator<Realm> getManyRealm(final Map<String,Object> query,final PipelineContext context){
  final Iterable<Platform> platforms=(Iterable<Platform>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platforms,""String_Node_Str"");
  final Iterator<Platform> iterator=platforms.iterator();
  return CloseableIterators.from(new Iterator<Realm>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Realm next(){
      final Platform platform=iterator.next();
      final String content=get(""String_Node_Str"" + platform.getRegion().getTag().toLowerCase(),null,null);
      final Realm data=DataObject.fromJSON(Realm.class,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9710678590215676
117609,"@Get(Languages.class) public Languages getLanguages(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"",null,null);
  final Languages data=DataObject.fromJSON(Languages.class,content);
  data.setPlatform(platform.getTag());
  return data;
}","@Get(Languages.class) public Languages getLanguages(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"",null,null);
  final Languages data=DataObject.fromJSON(Languages.class,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  return data;
}",0.9508571428571428
117610,"@SuppressWarnings(""String_Node_Str"") @GetMany(Champion.class) public CloseableIterator<Champion> getManyChampion(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  final Iterable<String> names=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(ids,""String_Node_Str"",names,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ChampionList data=DataObject.fromJSON(ChampionList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_CHAMPION_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode champion : data) {
        INCLUDED_DATA_PROCESSOR.apply(champion);
        CHAMPION_PROCESSOR.apply(champion);
        final String key=champion.get(""String_Node_Str"").asText();
        final int id=champion.get(""String_Node_Str"").asInt();
        data.remove(key);
        data.set(Integer.toString(id),champion);
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  final Map<String,Champion> byName=ids == null ? new HashMap<String,Champion>() : null;
  for (  final Champion champion : data.getData().values()) {
    champion.setPlatform(platform.getTag());
    champion.setVersion(data.getVersion());
    champion.setLocale(locale);
    champion.setIncludedData(includedData);
    if (ids == null) {
      byName.put(champion.getName(),champion);
    }
  }
  final Iterator<?> iterator=ids == null ? names.iterator() : ids.iterator();
  return CloseableIterators.from(new Iterator<Champion>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Champion next(){
      if (ids != null) {
        final Number id=(Number)iterator.next();
        return data.getData().get(id.toString());
      }
 else {
        final String name=(String)iterator.next();
        return byName.get(name);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(Champion.class) public CloseableIterator<Champion> getManyChampion(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  final Iterable<String> names=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(ids,""String_Node_Str"",names,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ChampionList data=DataObject.fromJSON(ChampionList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_CHAMPION_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode champion : data) {
        INCLUDED_DATA_PROCESSOR.apply(champion);
        CHAMPION_PROCESSOR.apply(champion);
        final String key=champion.get(""String_Node_Str"").asText();
        final int id=champion.get(""String_Node_Str"").asInt();
        data.remove(key);
        data.set(Integer.toString(id),champion);
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  final Map<String,Champion> byName=ids == null ? new HashMap<String,Champion>() : null;
  for (  final Champion champion : data.getData().values()) {
    champion.setPlatform(platform.getTag());
    champion.setVersion(data.getVersion());
    champion.setLocale(locale);
    champion.setIncludedData(includedData);
    if (ids == null) {
      byName.put(champion.getName(),champion);
    }
  }
  final Iterator<?> iterator=ids == null ? names.iterator() : ids.iterator();
  return CloseableIterators.from(new Iterator<Champion>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Champion next(){
      if (ids != null) {
        final Number id=(Number)iterator.next();
        return data.getData().get(id.toString());
      }
 else {
        final String name=(String)iterator.next();
        return byName.get(name);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9929078014184396
117611,"@SuppressWarnings(""String_Node_Str"") @Get(Item.class) public Item getItem(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Item data=DataObject.fromJSON(Item.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String itemId=ids.next();
        final ObjectNode item=(ObjectNode)temp.get(itemId);
        final String itemName=item.get(""String_Node_Str"").asText();
        if (id != null && id.intValue() == Integer.parseInt(itemId) || name.equals(itemName)) {
          item.set(""String_Node_Str"",new IntNode(id.intValue()));
          INCLUDED_DATA_PROCESSOR.apply(item);
          return item;
        }
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(Item.class) public Item getItem(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Item data=DataObject.fromJSON(Item.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String itemId=ids.next();
        final ObjectNode item=(ObjectNode)temp.get(itemId);
        final String itemName=item.get(""String_Node_Str"").asText();
        if (id != null && id.intValue() == Integer.parseInt(itemId) || name.equals(itemName)) {
          item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
          INCLUDED_DATA_PROCESSOR.apply(item);
          return item;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.975954738330976
117612,"@SuppressWarnings(""String_Node_Str"") @GetMany(ProfileIconData.class) public CloseableIterator<ProfileIconData> getManyProfileIconData(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<ProfileIconData>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public ProfileIconData next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final ProfileIconData data=DataObject.fromJSON(ProfileIconData.class,content);
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      for (      final ProfileIconDetails icon : data.getData().values()) {
        icon.setPlatform(platform.getTag());
        icon.setVersion(data.getVersion());
        icon.setLocale(locale);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(ProfileIconData.class) public CloseableIterator<ProfileIconData> getManyProfileIconData(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<ProfileIconData>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public ProfileIconData next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final ProfileIconData data=DataObject.fromJSON(ProfileIconData.class,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      for (      final ProfileIconDetails icon : data.getData().values()) {
        icon.setPlatform(platform.getTag());
        icon.setVersion(data.getVersion());
        icon.setLocale(locale);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9806949806949808
117613,"@Get(Realm.class) public Realm getRealm(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"" + platform.getRegion().getTag().toLowerCase(),null,null);
  final Realm data=DataObject.fromJSON(Realm.class,content);
  data.setPlatform(platform.getTag());
  return data;
}","@Get(Realm.class) public Realm getRealm(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"" + platform.getRegion().getTag().toLowerCase(),null,null);
  final Realm data=DataObject.fromJSON(Realm.class,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  return data;
}",0.95361380798274
117614,"@SuppressWarnings(""String_Node_Str"") @GetMany(RuneList.class) public CloseableIterator<RuneList> getManyRuneList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<RuneList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public RuneList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final RuneList data=DataObject.fromJSON(RuneList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final JsonNode temp=tree.get(""String_Node_Str"");
          if (temp == null) {
            return tree;
          }
          final Iterator<String> ids=temp.fieldNames();
          while (ids.hasNext()) {
            final String runeId=ids.next();
            final ObjectNode rune=(ObjectNode)temp.get(runeId);
            rune.set(""String_Node_Str"",new IntNode(Integer.parseInt(runeId)));
            INCLUDED_DATA_PROCESSOR.apply(rune);
          }
          return tree;
        }
      }
,content);
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final Rune rune : data.getData().values()) {
        rune.setPlatform(platform.getTag());
        rune.setVersion(data.getVersion());
        rune.setLocale(locale);
        rune.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(RuneList.class) public CloseableIterator<RuneList> getManyRuneList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<RuneList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public RuneList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final RuneList data=DataObject.fromJSON(RuneList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final JsonNode temp=tree.get(""String_Node_Str"");
          if (temp == null) {
            return tree;
          }
          final Iterator<String> ids=temp.fieldNames();
          while (ids.hasNext()) {
            final String runeId=ids.next();
            final ObjectNode rune=(ObjectNode)temp.get(runeId);
            rune.set(""String_Node_Str"",new IntNode(Integer.parseInt(runeId)));
            INCLUDED_DATA_PROCESSOR.apply(rune);
          }
          return tree;
        }
      }
,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final Rune rune : data.getData().values()) {
        rune.setPlatform(platform.getTag());
        rune.setVersion(data.getVersion());
        rune.setLocale(locale);
        rune.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9887502556760074
117615,"@Get(ProfileIconData.class) public ProfileIconData getProfileIconData(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ProfileIconData data=DataObject.fromJSON(ProfileIconData.class,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  for (  final ProfileIconDetails icon : data.getData().values()) {
    icon.setPlatform(platform.getTag());
    icon.setVersion(data.getVersion());
    icon.setLocale(locale);
  }
  return data;
}","@Get(ProfileIconData.class) public ProfileIconData getProfileIconData(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ProfileIconData data=DataObject.fromJSON(ProfileIconData.class,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  for (  final ProfileIconDetails icon : data.getData().values()) {
    icon.setPlatform(platform.getTag());
    icon.setVersion(data.getVersion());
    icon.setLocale(locale);
  }
  return data;
}",0.977284733227681
117616,"@SuppressWarnings(""String_Node_Str"") @Get(ChampionList.class) public ChampionList getChampionList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ChampionList data=DataObject.fromJSON(ChampionList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_CHAMPION_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode champion : data) {
        INCLUDED_DATA_PROCESSOR.apply(champion);
        CHAMPION_PROCESSOR.apply(champion);
        if (dataById) {
          final String key=champion.get(""String_Node_Str"").asText();
          final int id=champion.get(""String_Node_Str"").asInt();
          data.remove(key);
          data.set(Integer.toString(id),champion);
        }
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Champion champion : data.getData().values()) {
    champion.setPlatform(platform.getTag());
    champion.setVersion(data.getVersion());
    champion.setLocale(locale);
    champion.setIncludedData(includedData);
  }
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(ChampionList.class) public ChampionList getChampionList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ChampionList data=DataObject.fromJSON(ChampionList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_CHAMPION_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode champion : data) {
        INCLUDED_DATA_PROCESSOR.apply(champion);
        CHAMPION_PROCESSOR.apply(champion);
        if (dataById) {
          final String key=champion.get(""String_Node_Str"").asText();
          final int id=champion.get(""String_Node_Str"").asInt();
          data.remove(key);
          data.set(Integer.toString(id),champion);
        }
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Champion champion : data.getData().values()) {
    champion.setPlatform(platform.getTag());
    champion.setVersion(data.getVersion());
    champion.setLocale(locale);
    champion.setIncludedData(includedData);
  }
  return data;
}",0.990220604957926
117617,"@SuppressWarnings(""String_Node_Str"") @GetMany(Rune.class) public CloseableIterator<Rune> getManyRune(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",ids,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final RuneList data=DataObject.fromJSON(RuneList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String runeId=ids.next();
        final ObjectNode rune=(ObjectNode)temp.get(runeId);
        rune.set(""String_Node_Str"",new IntNode(Integer.parseInt(runeId)));
        INCLUDED_DATA_PROCESSOR.apply(rune);
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Rune rune : data.getData().values()) {
    rune.setPlatform(platform.getTag());
    rune.setVersion(data.getVersion());
    rune.setLocale(locale);
    rune.setIncludedData(includedData);
  }
  final Iterator<Number> iterator=ids.iterator();
  return CloseableIterators.from(new Iterator<Rune>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Rune next(){
      final Number id=iterator.next();
      return data.getData().get(id.toString());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(Rune.class) public CloseableIterator<Rune> getManyRune(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",ids,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final RuneList data=DataObject.fromJSON(RuneList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String runeId=ids.next();
        final ObjectNode rune=(ObjectNode)temp.get(runeId);
        rune.set(""String_Node_Str"",new IntNode(Integer.parseInt(runeId)));
        INCLUDED_DATA_PROCESSOR.apply(rune);
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Rune rune : data.getData().values()) {
    rune.setPlatform(platform.getTag());
    rune.setVersion(data.getVersion());
    rune.setLocale(locale);
    rune.setIncludedData(includedData);
  }
  final Iterator<Number> iterator=ids.iterator();
  return CloseableIterators.from(new Iterator<Rune>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Rune next(){
      final Number id=iterator.next();
      return data.getData().get(id.toString());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9911794871794872
117618,"@Get(MapData.class) public MapData getMapData(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final MapData data=DataObject.fromJSON(MapData.class,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  for (  final MapDetails map : data.getData().values()) {
    map.setPlatform(platform.getTag());
    map.setVersion(data.getVersion());
    map.setLocale(locale);
  }
  return data;
}","@Get(MapData.class) public MapData getMapData(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final MapData data=DataObject.fromJSON(MapData.class,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  for (  final MapDetails map : data.getData().values()) {
    map.setPlatform(platform.getTag());
    map.setVersion(data.getVersion());
    map.setLocale(locale);
  }
  return data;
}",0.975964225824483
117619,"@SuppressWarnings(""String_Node_Str"") @GetMany(LanguageStrings.class) public CloseableIterator<LanguageStrings> getManyLanguageStrings(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> locales=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",locales,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final Iterator<String> iterator=locales.iterator();
  return CloseableIterators.from(new Iterator<LanguageStrings>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public LanguageStrings next(){
      final String locale=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final LanguageStrings data=DataObject.fromJSON(LanguageStrings.class,content);
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(LanguageStrings.class) public CloseableIterator<LanguageStrings> getManyLanguageStrings(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> locales=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",locales,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final Iterator<String> iterator=locales.iterator();
  return CloseableIterators.from(new Iterator<LanguageStrings>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public LanguageStrings next(){
      final String locale=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final LanguageStrings data=DataObject.fromJSON(LanguageStrings.class,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9775418538178848
117620,"@Get(Versions.class) public Versions getVersions(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"",null,null);
  final Versions data=DataObject.fromJSON(Versions.class,content);
  data.setPlatform(platform.getTag());
  return data;
}","@Get(Versions.class) public Versions getVersions(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"",null,null);
  final Versions data=DataObject.fromJSON(Versions.class,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  return data;
}",0.9502890173410404
117621,"@Get(LanguageStrings.class) public LanguageStrings getLanguageStrings(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final LanguageStrings data=DataObject.fromJSON(LanguageStrings.class,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  return data;
}","@Get(LanguageStrings.class) public LanguageStrings getLanguageStrings(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final LanguageStrings data=DataObject.fromJSON(LanguageStrings.class,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  return data;
}",0.9719137818419332
117622,"@SuppressWarnings(""String_Node_Str"") @GetMany(Languages.class) public CloseableIterator<Languages> getManyLanguages(final Map<String,Object> query,final PipelineContext context){
  final Iterable<Platform> platforms=(Iterable<Platform>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platforms,""String_Node_Str"");
  final Iterator<Platform> iterator=platforms.iterator();
  return CloseableIterators.from(new Iterator<Languages>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Languages next(){
      final Platform platform=iterator.next();
      final String content=get(""String_Node_Str"",null,null);
      final Languages data=DataObject.fromJSON(Languages.class,content);
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(Languages.class) public CloseableIterator<Languages> getManyLanguages(final Map<String,Object> query,final PipelineContext context){
  final Iterable<Platform> platforms=(Iterable<Platform>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platforms,""String_Node_Str"");
  final Iterator<Platform> iterator=platforms.iterator();
  return CloseableIterators.from(new Iterator<Languages>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Languages next(){
      final Platform platform=iterator.next();
      final String content=get(""String_Node_Str"",null,null);
      final Languages data=DataObject.fromJSON(Languages.class,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.970509383378016
117623,"@SuppressWarnings(""String_Node_Str"") @GetMany(ChampionList.class) public CloseableIterator<ChampionList> getManyChampionList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final Multimap<String,String> parameters=HashMultimap.create();
  parameters.put(""String_Node_Str"",locale);
  parameters.putAll(""String_Node_Str"",includedData);
  parameters.put(""String_Node_Str"",dataById.toString());
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<ChampionList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public ChampionList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final ChampionList data=DataObject.fromJSON(ChampionList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_CHAMPION_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
          if (data == null) {
            return tree;
          }
          for (          final JsonNode champion : data) {
            INCLUDED_DATA_PROCESSOR.apply(champion);
            CHAMPION_PROCESSOR.apply(champion);
            if (dataById) {
              final String key=champion.get(""String_Node_Str"").asText();
              final int id=champion.get(""String_Node_Str"").asInt();
              data.remove(key);
              data.set(Integer.toString(id),champion);
            }
          }
          return tree;
        }
      }
,content);
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final Champion champion : data.getData().values()) {
        champion.setPlatform(platform.getTag());
        champion.setVersion(data.getVersion());
        champion.setLocale(locale);
        champion.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(ChampionList.class) public CloseableIterator<ChampionList> getManyChampionList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final Multimap<String,String> parameters=HashMultimap.create();
  parameters.put(""String_Node_Str"",locale);
  parameters.putAll(""String_Node_Str"",includedData);
  parameters.put(""String_Node_Str"",dataById.toString());
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<ChampionList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public ChampionList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final ChampionList data=DataObject.fromJSON(ChampionList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_CHAMPION_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
          if (data == null) {
            return tree;
          }
          for (          final JsonNode champion : data) {
            INCLUDED_DATA_PROCESSOR.apply(champion);
            CHAMPION_PROCESSOR.apply(champion);
            if (dataById) {
              final String key=champion.get(""String_Node_Str"").asText();
              final int id=champion.get(""String_Node_Str"").asInt();
              data.remove(key);
              data.set(Integer.toString(id),champion);
            }
          }
          return tree;
        }
      }
,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final Champion champion : data.getData().values()) {
        champion.setPlatform(platform.getTag());
        champion.setVersion(data.getVersion());
        champion.setLocale(locale);
        champion.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9907016060862216
117624,"@SuppressWarnings(""String_Node_Str"") @GetMany(MapData.class) public CloseableIterator<MapData> getManyMapData(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<MapData>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public MapData next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final MapData data=DataObject.fromJSON(MapData.class,content);
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      for (      final MapDetails map : data.getData().values()) {
        map.setPlatform(platform.getTag());
        map.setVersion(data.getVersion());
        map.setLocale(locale);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(MapData.class) public CloseableIterator<MapData> getManyMapData(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<MapData>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public MapData next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final MapData data=DataObject.fromJSON(MapData.class,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      for (      final MapDetails map : data.getData().values()) {
        map.setPlatform(platform.getTag());
        map.setVersion(data.getVersion());
        map.setLocale(locale);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9797272392185772
117625,"@SuppressWarnings(""String_Node_Str"") @Get(MasteryList.class) public MasteryList getMasteryList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final MasteryList data=DataObject.fromJSON(MasteryList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      for (      final JsonNode mastery : temp) {
        INCLUDED_DATA_PROCESSOR.apply(mastery);
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Mastery mastery : data.getData().values()) {
    mastery.setPlatform(platform.getTag());
    mastery.setVersion(data.getVersion());
    mastery.setLocale(locale);
    mastery.setIncludedData(includedData);
  }
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(MasteryList.class) public MasteryList getMasteryList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final MasteryList data=DataObject.fromJSON(MasteryList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      for (      final JsonNode mastery : temp) {
        INCLUDED_DATA_PROCESSOR.apply(mastery);
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Mastery mastery : data.getData().values()) {
    mastery.setPlatform(platform.getTag());
    mastery.setVersion(data.getVersion());
    mastery.setLocale(locale);
    mastery.setIncludedData(includedData);
  }
  return data;
}",0.9877944933295488
117626,"@SuppressWarnings(""String_Node_Str"") @Get(SummonerSpell.class) public SummonerSpell getSummonerSpell(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",id,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final SummonerSpell data=DataObject.fromJSON(SummonerSpell.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode spell : data) {
        final JsonNode idNode=spell.get(""String_Node_Str"");
        if (idNode != null && id.intValue() == idNode.asInt()) {
          INCLUDED_DATA_PROCESSOR.apply(spell);
          CHAMPION_PROCESSOR.apply(spell);
          return spell;
        }
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(SummonerSpell.class) public SummonerSpell getSummonerSpell(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",id,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final SummonerSpell data=DataObject.fromJSON(SummonerSpell.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return null;
      }
      for (      final JsonNode spell : data) {
        final JsonNode idNode=spell.get(""String_Node_Str"");
        if (idNode != null && id.intValue() == idNode.asInt()) {
          INCLUDED_DATA_PROCESSOR.apply(spell);
          CHAMPION_PROCESSOR.apply(spell);
          return spell;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.982109479305741
117627,"@SuppressWarnings(""String_Node_Str"") @GetMany(MasteryList.class) public CloseableIterator<MasteryList> getManyMasteryList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<MasteryList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public MasteryList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final MasteryList data=DataObject.fromJSON(MasteryList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final JsonNode temp=tree.get(""String_Node_Str"");
          if (temp == null) {
            return tree;
          }
          for (          final JsonNode mastery : temp) {
            INCLUDED_DATA_PROCESSOR.apply(mastery);
          }
          return tree;
        }
      }
,content);
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final Mastery mastery : data.getData().values()) {
        mastery.setPlatform(platform.getTag());
        mastery.setVersion(data.getVersion());
        mastery.setLocale(locale);
        mastery.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(MasteryList.class) public CloseableIterator<MasteryList> getManyMasteryList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<MasteryList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public MasteryList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final MasteryList data=DataObject.fromJSON(MasteryList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final JsonNode temp=tree.get(""String_Node_Str"");
          if (temp == null) {
            return tree;
          }
          for (          final JsonNode mastery : temp) {
            INCLUDED_DATA_PROCESSOR.apply(mastery);
          }
          return tree;
        }
      }
,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final Mastery mastery : data.getData().values()) {
        mastery.setPlatform(platform.getTag());
        mastery.setVersion(data.getVersion());
        mastery.setLocale(locale);
        mastery.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9878881303677604
117628,"@SuppressWarnings(""String_Node_Str"") @GetMany(ItemList.class) public CloseableIterator<ItemList> getManyItemList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<ItemList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public ItemList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final ItemList data=DataObject.fromJSON(ItemList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final JsonNode temp=tree.get(""String_Node_Str"");
          if (temp == null) {
            return tree;
          }
          final Iterator<String> ids=temp.fieldNames();
          while (ids.hasNext()) {
            final String itemId=ids.next();
            final ObjectNode item=(ObjectNode)temp.get(itemId);
            item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
            INCLUDED_DATA_PROCESSOR.apply(item);
          }
          return tree;
        }
      }
,content);
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final Item item : data.getData().values()) {
        item.setPlatform(platform.getTag());
        item.setVersion(data.getVersion());
        item.setLocale(locale);
        item.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(ItemList.class) public CloseableIterator<ItemList> getManyItemList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<ItemList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public ItemList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final ItemList data=DataObject.fromJSON(ItemList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final JsonNode temp=tree.get(""String_Node_Str"");
          if (temp == null) {
            return tree;
          }
          final Iterator<String> ids=temp.fieldNames();
          while (ids.hasNext()) {
            final String itemId=ids.next();
            final ObjectNode item=(ObjectNode)temp.get(itemId);
            item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
            INCLUDED_DATA_PROCESSOR.apply(item);
          }
          return tree;
        }
      }
,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final Item item : data.getData().values()) {
        item.setPlatform(platform.getTag());
        item.setVersion(data.getVersion());
        item.setLocale(locale);
        item.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9887502556760074
117629,"@SuppressWarnings(""String_Node_Str"") @Get(Champion.class) public Champion getChampion(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Champion data=DataObject.fromJSON(Champion.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_CHAMPION_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      for (      final JsonNode champion : temp) {
        final JsonNode idNode=champion.get(""String_Node_Str"");
        final JsonNode nameNode=champion.get(""String_Node_Str"");
        if (id != null && idNode != null && id.intValue() == idNode.asInt() || name != null && nameNode != null && name.equals(nameNode.asText())) {
          INCLUDED_DATA_PROCESSOR.apply(champion);
          CHAMPION_PROCESSOR.apply(champion);
          return champion;
        }
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(Champion.class) public Champion getChampion(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Champion data=DataObject.fromJSON(Champion.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_CHAMPION_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      for (      final JsonNode champion : temp) {
        final JsonNode idNode=champion.get(""String_Node_Str"");
        final JsonNode nameNode=champion.get(""String_Node_Str"");
        if (id != null && idNode != null && id.intValue() == idNode.asInt() || name != null && nameNode != null && name.equals(nameNode.asText())) {
          INCLUDED_DATA_PROCESSOR.apply(champion);
          CHAMPION_PROCESSOR.apply(champion);
          return champion;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.98411945958758
117630,"@SuppressWarnings(""String_Node_Str"") @GetMany(SummonerSpell.class) public CloseableIterator<SummonerSpell> getManySummonerSpell(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",ids,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final SummonerSpellList data=DataObject.fromJSON(SummonerSpellList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode spell : data) {
        INCLUDED_DATA_PROCESSOR.apply(spell);
        SPELL_PROCESSOR.apply(spell);
        if (dataById) {
          final String key=spell.get(""String_Node_Str"").asText();
          final int id=spell.get(""String_Node_Str"").asInt();
          data.remove(key);
          data.set(Integer.toString(id),spell);
        }
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final SummonerSpell spell : data.getData().values()) {
    spell.setPlatform(platform.getTag());
    spell.setVersion(data.getVersion());
    spell.setLocale(locale);
    spell.setIncludedData(includedData);
  }
  final Iterator<Number> iterator=ids.iterator();
  return CloseableIterators.from(new Iterator<SummonerSpell>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public SummonerSpell next(){
      final Number id=iterator.next();
      return data.getData().get(id.toString());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(SummonerSpell.class) public CloseableIterator<SummonerSpell> getManySummonerSpell(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",ids,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final SummonerSpellList data=DataObject.fromJSON(SummonerSpellList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
      if (data == null) {
        return tree;
      }
      for (      final JsonNode spell : data) {
        INCLUDED_DATA_PROCESSOR.apply(spell);
        SPELL_PROCESSOR.apply(spell);
        if (dataById) {
          final String key=spell.get(""String_Node_Str"").asText();
          final int id=spell.get(""String_Node_Str"").asInt();
          data.remove(key);
          data.set(Integer.toString(id),spell);
        }
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final SummonerSpell spell : data.getData().values()) {
    spell.setPlatform(platform.getTag());
    spell.setVersion(data.getVersion());
    spell.setLocale(locale);
    spell.setIncludedData(includedData);
  }
  final Iterator<Number> iterator=ids.iterator();
  return CloseableIterators.from(new Iterator<SummonerSpell>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public SummonerSpell next(){
      final Number id=iterator.next();
      return data.getData().get(id.toString());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.992108643787851
117631,"@SuppressWarnings(""String_Node_Str"") @Get(RuneList.class) public RuneList getRuneList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=(String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final RuneList data=DataObject.fromJSON(RuneList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String runeId=ids.next();
        final ObjectNode rune=(ObjectNode)temp.get(runeId);
        rune.set(""String_Node_Str"",new IntNode(Integer.parseInt(runeId)));
        INCLUDED_DATA_PROCESSOR.apply(rune);
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Rune rune : data.getData().values()) {
    rune.setPlatform(platform.getTag());
    rune.setVersion(data.getVersion());
    rune.setLocale(locale);
    rune.setIncludedData(includedData);
  }
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(RuneList.class) public RuneList getRuneList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String version=(String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final RuneList data=DataObject.fromJSON(RuneList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String runeId=ids.next();
        final ObjectNode rune=(ObjectNode)temp.get(runeId);
        rune.set(""String_Node_Str"",new IntNode(Integer.parseInt(runeId)));
        INCLUDED_DATA_PROCESSOR.apply(rune);
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Rune rune : data.getData().values()) {
    rune.setPlatform(platform.getTag());
    rune.setVersion(data.getVersion());
    rune.setLocale(locale);
    rune.setIncludedData(includedData);
  }
  return data;
}",0.9883940620782726
117632,"@SuppressWarnings(""String_Node_Str"") @GetMany(Mastery.class) public CloseableIterator<Mastery> getManyMastery(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",ids,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final MasteryList data=DataObject.fromJSON(MasteryList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      for (      final JsonNode mastery : temp) {
        INCLUDED_DATA_PROCESSOR.apply(mastery);
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Mastery mastery : data.getData().values()) {
    mastery.setPlatform(platform.getTag());
    mastery.setVersion(data.getVersion());
    mastery.setLocale(locale);
    mastery.setIncludedData(includedData);
  }
  final Iterator<Number> iterator=ids.iterator();
  return CloseableIterators.from(new Iterator<Mastery>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Mastery next(){
      final Number id=iterator.next();
      return data.getData().get(id.toString());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(Mastery.class) public CloseableIterator<Mastery> getManyMastery(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",ids,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final MasteryList data=DataObject.fromJSON(MasteryList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_MASTERY_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      for (      final JsonNode mastery : temp) {
        INCLUDED_DATA_PROCESSOR.apply(mastery);
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  for (  final Mastery mastery : data.getData().values()) {
    mastery.setPlatform(platform.getTag());
    mastery.setVersion(data.getVersion());
    mastery.setLocale(locale);
    mastery.setIncludedData(includedData);
  }
  final Iterator<Number> iterator=ids.iterator();
  return CloseableIterators.from(new Iterator<Mastery>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Mastery next(){
      final Number id=iterator.next();
      return data.getData().get(id.toString());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.990551527136893
117633,"@SuppressWarnings(""String_Node_Str"") @Get(Rune.class) public Rune getRune(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",id,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Rune data=DataObject.fromJSON(Rune.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String runeId=ids.next();
        final int idValue=Integer.parseInt(runeId);
        if (idValue == id.intValue()) {
          final ObjectNode rune=(ObjectNode)temp.get(runeId);
          rune.set(""String_Node_Str"",new IntNode(idValue));
          INCLUDED_DATA_PROCESSOR.apply(rune);
          return rune;
        }
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}","@SuppressWarnings(""String_Node_Str"") @Get(Rune.class) public Rune getRune(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Number id=(Number)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",id,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final Rune data=DataObject.fromJSON(Rune.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_RUNE_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return null;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return null;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String runeId=ids.next();
        final int idValue=Integer.parseInt(runeId);
        if (idValue == id.intValue()) {
          final ObjectNode rune=(ObjectNode)temp.get(runeId);
          rune.set(""String_Node_Str"",new IntNode(idValue));
          INCLUDED_DATA_PROCESSOR.apply(rune);
          return rune;
        }
      }
      return null;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setVersion(version);
  data.setLocale(locale);
  data.setIncludedData(includedData);
  return data;
}",0.9825657038771792
117634,"@SuppressWarnings(""String_Node_Str"") @GetMany(SummonerSpellList.class) public CloseableIterator<SummonerSpellList> getManySummonerSpellList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<SummonerSpellList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public SummonerSpellList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final SummonerSpellList data=DataObject.fromJSON(SummonerSpellList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
          if (data == null) {
            return tree;
          }
          for (          final JsonNode spell : data) {
            INCLUDED_DATA_PROCESSOR.apply(spell);
            SPELL_PROCESSOR.apply(spell);
            if (dataById) {
              final String key=spell.get(""String_Node_Str"").asText();
              final int id=spell.get(""String_Node_Str"").asInt();
              data.remove(key);
              data.set(Integer.toString(id),spell);
            }
          }
          return tree;
        }
      }
,content);
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final SummonerSpell spell : data.getData().values()) {
        spell.setPlatform(platform.getTag());
        spell.setVersion(data.getVersion());
        spell.setLocale(locale);
        spell.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(SummonerSpellList.class) public CloseableIterator<SummonerSpellList> getManySummonerSpellList(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  final Iterable<String> versions=(Iterable<String>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"",versions,""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final Boolean dataById=query.get(""String_Node_Str"") == null ? Boolean.FALSE : (Boolean)query.get(""String_Node_Str"");
  final Iterator<String> iterator=versions.iterator();
  return CloseableIterators.from(new Iterator<SummonerSpellList>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public SummonerSpellList next(){
      final String version=iterator.next();
      final String content=get(""String_Node_Str"",version,locale);
      final SummonerSpellList data=DataObject.fromJSON(SummonerSpellList.class,new Function<JsonNode,JsonNode>(){
        private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_SUMMONER_SPELL_TAGS));
        @Override public JsonNode apply(        final JsonNode tree){
          if (tree == null) {
            return tree;
          }
          final ObjectNode data=(ObjectNode)tree.get(""String_Node_Str"");
          if (data == null) {
            return tree;
          }
          for (          final JsonNode spell : data) {
            INCLUDED_DATA_PROCESSOR.apply(spell);
            SPELL_PROCESSOR.apply(spell);
            if (dataById) {
              final String key=spell.get(""String_Node_Str"").asText();
              final int id=spell.get(""String_Node_Str"").asInt();
              data.remove(key);
              data.set(Integer.toString(id),spell);
            }
          }
          return tree;
        }
      }
,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      data.setLocale(locale);
      data.setIncludedData(includedData);
      for (      final SummonerSpell spell : data.getData().values()) {
        spell.setPlatform(platform.getTag());
        spell.setVersion(data.getVersion());
        spell.setLocale(locale);
        spell.setIncludedData(includedData);
      }
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9899909008189264
117635,"@SuppressWarnings(""String_Node_Str"") @GetMany(Versions.class) public CloseableIterator<Versions> getManyVersions(final Map<String,Object> query,final PipelineContext context){
  final Iterable<Platform> platforms=(Iterable<Platform>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platforms,""String_Node_Str"");
  final Iterator<Platform> iterator=platforms.iterator();
  return CloseableIterators.from(new Iterator<Versions>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Versions next(){
      final Platform platform=iterator.next();
      Utilities.checkNotNull(platform,""String_Node_Str"");
      final String content=get(""String_Node_Str"",null,null);
      final Versions data=DataObject.fromJSON(Versions.class,content);
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(Versions.class) public CloseableIterator<Versions> getManyVersions(final Map<String,Object> query,final PipelineContext context){
  final Iterable<Platform> platforms=(Iterable<Platform>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platforms,""String_Node_Str"");
  final Iterator<Platform> iterator=platforms.iterator();
  return CloseableIterators.from(new Iterator<Versions>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Versions next(){
      final Platform platform=iterator.next();
      Utilities.checkNotNull(platform,""String_Node_Str"");
      final String content=get(""String_Node_Str"",null,null);
      final Versions data=DataObject.fromJSON(Versions.class,content);
      if (data == null) {
        return null;
      }
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9720386375190646
117636,"@SuppressWarnings(""String_Node_Str"") @GetMany(Item.class) public CloseableIterator<Item> getManyItem(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  final Iterable<String> names=(Iterable<String>)query.get(""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ItemList data=DataObject.fromJSON(ItemList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String itemId=ids.next();
        final ObjectNode item=(ObjectNode)temp.get(itemId);
        item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
        INCLUDED_DATA_PROCESSOR.apply(item);
      }
      return tree;
    }
  }
,content);
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  final Map<String,Item> byName=ids == null ? new HashMap<String,Item>() : null;
  for (  final Item item : data.getData().values()) {
    item.setPlatform(platform.getTag());
    item.setVersion(data.getVersion());
    item.setLocale(locale);
    item.setIncludedData(includedData);
    if (ids == null) {
      byName.put(item.getName(),item);
    }
  }
  final Iterator<?> iterator=ids == null ? names.iterator() : ids.iterator();
  return CloseableIterators.from(new Iterator<Item>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Item next(){
      if (ids != null) {
        final Number id=(Number)iterator.next();
        return data.getData().get(id.toString());
      }
 else {
        final String name=(String)iterator.next();
        return byName.get(name);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(Item.class) public CloseableIterator<Item> getManyItem(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Iterable<Number> ids=(Iterable<Number>)query.get(""String_Node_Str"");
  final Iterable<String> names=(Iterable<String>)query.get(""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final String content=get(""String_Node_Str"",version,locale);
  final ItemList data=DataObject.fromJSON(ItemList.class,new Function<JsonNode,JsonNode>(){
    private final Function<JsonNode,JsonNode> INCLUDED_DATA_PROCESSOR=new IncludedDataProcessor(Sets.union(includedData,IncludedDataProcessor.DEFAULT_ITEM_TAGS));
    @Override public JsonNode apply(    final JsonNode tree){
      if (tree == null) {
        return tree;
      }
      final JsonNode temp=tree.get(""String_Node_Str"");
      if (temp == null) {
        return tree;
      }
      final Iterator<String> ids=temp.fieldNames();
      while (ids.hasNext()) {
        final String itemId=ids.next();
        final ObjectNode item=(ObjectNode)temp.get(itemId);
        item.set(""String_Node_Str"",new IntNode(Integer.parseInt(itemId)));
        INCLUDED_DATA_PROCESSOR.apply(item);
      }
      return tree;
    }
  }
,content);
  if (data == null) {
    return null;
  }
  data.setPlatform(platform.getTag());
  data.setLocale(locale);
  data.setIncludedData(includedData);
  final Map<String,Item> byName=ids == null ? new HashMap<String,Item>() : null;
  for (  final Item item : data.getData().values()) {
    item.setPlatform(platform.getTag());
    item.setVersion(data.getVersion());
    item.setLocale(locale);
    item.setIncludedData(includedData);
    if (ids == null) {
      byName.put(item.getName(),item);
    }
  }
  final Iterator<?> iterator=ids == null ? names.iterator() : ids.iterator();
  return CloseableIterators.from(new Iterator<Item>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Item next(){
      if (ids != null) {
        final Number id=(Number)iterator.next();
        return data.getData().get(id.toString());
      }
 else {
        final String name=(String)iterator.next();
        return byName.get(name);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.9923664122137404
117637,"@Override public void call(){
  putChampion(champion,null);
}","@Override public void call(){
  putItem(item,null);
}",0.8245614035087719
117638,"@SuppressWarnings(""String_Node_Str"") @Get(Champion.class) public Champion getChampion(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Integer id=(Integer)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final ChampionData data=new ChampionData(id == null ? 0 : id.intValue(),name,platform,version,locale,includedData);
  return new Champion(data);
}","@SuppressWarnings(""String_Node_Str"") @Get(Champion.class) public Champion getChampion(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Integer id=(Integer)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final ChampionData data=new ChampionData();
  data.getChampion().setId(id == null ? 0 : id.intValue());
  data.getStatus().setId(id == null ? 0 : id.intValue());
  data.getChampion().setName(name);
  data.getChampion().setPlatform(platform);
  data.getStatus().setPlatform(platform);
  data.getChampion().setVersion(version);
  data.getChampion().setLocale(locale);
  data.getChampion().setIncludedData(includedData);
  return new Champion(data);
}",0.7981418918918919
117639,"@SuppressWarnings(""String_Node_Str"") @GetMany(Realm.class) public CloseableIterator<Realm> getManyRealm(final Map<String,Object> query,final PipelineContext context){
  final Iterable<Platform> platforms=(Iterable<Platform>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platforms,""String_Node_Str"");
  final Iterator<Platform> iterator=platforms.iterator();
  return CloseableIterators.from(new Iterator<Realm>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Realm next(){
      final Platform platform=iterator.next();
      final String content=get(""String_Node_Str"" + platform.getRegion().getTag(),null,null);
      final Realm data=DataObject.fromJSON(Realm.class,content);
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @GetMany(Realm.class) public CloseableIterator<Realm> getManyRealm(final Map<String,Object> query,final PipelineContext context){
  final Iterable<Platform> platforms=(Iterable<Platform>)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platforms,""String_Node_Str"");
  final Iterator<Platform> iterator=platforms.iterator();
  return CloseableIterators.from(new Iterator<Realm>(){
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public Realm next(){
      final Platform platform=iterator.next();
      final String content=get(""String_Node_Str"" + platform.getRegion().getTag().toLowerCase(),null,null);
      final Realm data=DataObject.fromJSON(Realm.class,content);
      data.setPlatform(platform.getTag());
      return data;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}",0.99235807860262
117640,"@Get(Realm.class) public Realm getRealm(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"" + platform.getRegion().getTag(),null,null);
  final Realm data=DataObject.fromJSON(Realm.class,content);
  data.setPlatform(platform.getTag());
  return data;
}","@Get(Realm.class) public Realm getRealm(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final String content=get(""String_Node_Str"" + platform.getRegion().getTag().toLowerCase(),null,null);
  final Realm data=DataObject.fromJSON(Realm.class,content);
  data.setPlatform(platform.getTag());
  return data;
}",0.9839080459770116
117641,"@Get(Champion.class) public Champion getChampion(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Integer id=(Integer)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final ChampionData data=new ChampionData(id == null ? 0 : id.intValue(),name,platform,version,locale);
  return new Champion(data);
}","@SuppressWarnings(""String_Node_Str"") @Get(Champion.class) public Champion getChampion(final Map<String,Object> query,final PipelineContext context){
  final Platform platform=(Platform)query.get(""String_Node_Str"");
  Utilities.checkNotNull(platform,""String_Node_Str"");
  final Integer id=(Integer)query.get(""String_Node_Str"");
  final String name=(String)query.get(""String_Node_Str"");
  Utilities.checkAtLeastOneNotNull(id,""String_Node_Str"",name,""String_Node_Str"");
  final String version=query.get(""String_Node_Str"") == null ? getCurrentVersion(platform,context) : (String)query.get(""String_Node_Str"");
  final String locale=query.get(""String_Node_Str"") == null ? platform.getDefaultLocale() : (String)query.get(""String_Node_Str"");
  final Set<String> includedData=query.get(""String_Node_Str"") == null ? ImmutableSet.of(""String_Node_Str"") : (Set<String>)query.get(""String_Node_Str"");
  final ChampionData data=new ChampionData(id == null ? 0 : id.intValue(),name,platform,version,locale,includedData);
  return new Champion(data);
}",0.8916309012875536
117642,"public Response get(final String host,final String url,final Multimap<String,String> parameters,final Map<String,String> headers,final RateLimiter rateLimiter) throws IOException {
  HttpUrl.Builder urlBuilder=new HttpUrl.Builder().scheme(""String_Node_Str"").host(host).addPathSegments(url);
  if (parameters != null && !parameters.isEmpty()) {
    for (    final String key : parameters.keySet()) {
      for (      final String value : parameters.get(key)) {
        urlBuilder=urlBuilder.addQueryParameter(key,value);
      }
    }
  }
  final HttpUrl httpURL=urlBuilder.build();
  Request.Builder requestBuilder=new Request.Builder().url(httpURL);
  if (headers != null && !headers.isEmpty()) {
    requestBuilder=requestBuilder.headers(Headers.of(headers));
  }
  final Request request=requestBuilder.build();
  final Callable<Response> requestor=new Callable<Response>(){
    @Override public Response call() throws IOException {
      LOGGER.info(""String_Node_Str"" + httpURL);
      String body=null;
      byte[] bytes=null;
      int statusCode;
      Headers responseHeaders;
      try (okhttp3.Response response=client.newCall(request).execute()){
        statusCode=response.code();
        responseHeaders=response.headers();
        try (ResponseBody responseBody=response.body()){
          if (JSON_MEDIA_TYPE.type().equals(responseBody.contentType().type()) && JSON_MEDIA_TYPE.subtype().equals(responseBody.contentType().subtype())) {
            body=responseBody.string();
          }
 else {
            bytes=responseBody.bytes();
          }
        }
       }
 catch (      final SocketTimeoutException e) {
        throw new TimeoutException(""String_Node_Str"",Type.HTTP);
      }
      ImmutableListMultimap.Builder<String,String> mapBuilder=ImmutableListMultimap.<String,String>builder();
      for (      final String key : responseHeaders.names()) {
        mapBuilder=mapBuilder.putAll(key,responseHeaders.get(key));
      }
      if (body != null) {
        return new Response(body,statusCode,mapBuilder.build());
      }
 else {
        return new Response(bytes,statusCode,mapBuilder.build());
      }
    }
  }
;
  if (rateLimiter == null) {
    try {
      return requestor.call();
    }
 catch (    TimeoutException|IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new RuntimeException(e);
    }
  }
 else {
    try {
      return rateLimiter.call(requestor,rateLimiterTimeout,rateLimiterTimeoutUnit);
    }
 catch (    final TimeoutException e) {
      throw e;
    }
catch (    final Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new RuntimeException(e);
    }
  }
}","public Response get(final String host,final String url,final Multimap<String,String> parameters,final Map<String,String> headers,final RateLimiter rateLimiter) throws IOException {
  HttpUrl.Builder urlBuilder=new HttpUrl.Builder().scheme(""String_Node_Str"").host(host).addPathSegments(removeLeadingSlashes(url));
  if (parameters != null && !parameters.isEmpty()) {
    for (    final String key : parameters.keySet()) {
      for (      final String value : parameters.get(key)) {
        urlBuilder=urlBuilder.addQueryParameter(key,value);
      }
    }
  }
  final HttpUrl httpURL=urlBuilder.build();
  Request.Builder requestBuilder=new Request.Builder().url(httpURL);
  if (headers != null && !headers.isEmpty()) {
    requestBuilder=requestBuilder.headers(Headers.of(headers));
  }
  final Request request=requestBuilder.build();
  final Callable<Response> requestor=new Callable<Response>(){
    @Override public Response call() throws IOException {
      LOGGER.info(""String_Node_Str"" + httpURL);
      String body=null;
      byte[] bytes=null;
      int statusCode;
      Headers responseHeaders;
      try (okhttp3.Response response=client.newCall(request).execute()){
        statusCode=response.code();
        responseHeaders=response.headers();
        try (ResponseBody responseBody=response.body()){
          if (JSON_MEDIA_TYPE.type().equals(responseBody.contentType().type()) && JSON_MEDIA_TYPE.subtype().equals(responseBody.contentType().subtype())) {
            body=responseBody.string();
          }
 else {
            bytes=responseBody.bytes();
          }
        }
       }
 catch (      final SocketTimeoutException e) {
        throw new TimeoutException(""String_Node_Str"",Type.HTTP);
      }
      ImmutableListMultimap.Builder<String,String> mapBuilder=ImmutableListMultimap.<String,String>builder();
      for (      final String key : responseHeaders.names()) {
        mapBuilder=mapBuilder.putAll(key,responseHeaders.get(key));
      }
      if (body != null) {
        return new Response(body,statusCode,mapBuilder.build());
      }
 else {
        return new Response(bytes,statusCode,mapBuilder.build());
      }
    }
  }
;
  if (rateLimiter == null) {
    try {
      return requestor.call();
    }
 catch (    TimeoutException|IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new RuntimeException(e);
    }
  }
 else {
    try {
      return rateLimiter.call(requestor,rateLimiterTimeout,rateLimiterTimeoutUnit);
    }
 catch (    final TimeoutException e) {
      throw e;
    }
catch (    final Exception e) {
      LOGGER.error(""String_Node_Str"",e);
      throw new RuntimeException(e);
    }
  }
}",0.9948320413436692
117643,"protected void load(final String group){
  Boolean loaded=groups.get(group);
  if (loaded == null || !loaded) {
    Object lock=groupLocks.get(group);
    if (lock == null) {
synchronized (groupLocks) {
        lock=groupLocks.get(group);
        if (lock == null) {
          lock=new Object();
          groupLocks.put(group,lock);
        }
      }
    }
    boolean callHooks=false;
synchronized (lock) {
      loaded=groups.get(group);
      if (loaded == null || !loaded) {
        loadCoreData(group);
        groups.put(group,Boolean.TRUE);
        callHooks=true;
      }
    }
    if (callHooks) {
synchronized (loadHookLock) {
        for (        final LoadHook hook : loadHooks.get(group)) {
          hook.call();
        }
        loadHooks.remove(group);
        if (loadHooks.isEmpty()) {
          loadHooks=null;
        }
      }
    }
  }
}","protected void load(final String group){
  Boolean loaded=groups.get(group);
  if (loaded == null || !loaded) {
    Object lock=groupLocks.get(group);
    if (lock == null) {
synchronized (groupLocks) {
        lock=groupLocks.get(group);
        if (lock == null) {
          lock=new Object();
          groupLocks.put(group,lock);
        }
      }
    }
    boolean callHooks=false;
synchronized (lock) {
      loaded=groups.get(group);
      if (loaded == null || !loaded) {
        loadCoreData(group);
        groups.put(group,Boolean.TRUE);
        callHooks=true;
      }
    }
    if (callHooks) {
synchronized (loadHookLock) {
        if (loadHooks != null) {
          for (          final LoadHook hook : loadHooks.get(group)) {
            hook.call();
          }
          loadHooks.remove(group);
          if (loadHooks.isEmpty()) {
            loadHooks=null;
          }
        }
      }
    }
  }
}",0.93542953396968
117644,"public Champion(final String name,final Platform platform,final String version,final String locale){
  super(new ChampionData(name,platform,version,locale),2);
}","public Champion(final ChampionData coreData){
  super(coreData,2);
}",0.4104803493449782
117645,"public ChampionData(final String name,final Platform platform,final String version,final String locale){
  this(0,name,platform,version,locale);
}","public ChampionData(final int id,final String name,final Platform platform,final String version,final String locale,final Set<String> includedData){
  champion=new com.merakianalytics.orianna.types.data.staticdata.Champion();
  champion.setId(id);
  champion.setName(name);
  champion.setPlatform(platform);
  champion.setVersion(version);
  champion.setLocale(locale);
  champion.setIncludedData(ImmutableSet.copyOf(includedData));
  status=new ChampionStatus();
  status.setId(id);
  status.setPlatform(platform);
}",0.3559577677224736
117646,"/** 
 * @param < T > the type to iterate
 * @param iterator the non-closeable iterator to wrap
 * @return a wrapped version of the iterator
 */
public static <T>CloseableIterator<T> fromIterator(final Iterator<T> iterator){
  return new CloseableIterator<T>(){
    @Override public void close() throws Exception {
    }
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public T next(){
      return iterator.next();
    }
  }
;
}","/** 
 * @param < T > the type to iterate
 * @param iterator the non-closeable iterator to wrap
 * @return a wrapped version of the iterator
 */
public static <T>CloseableIterator<T> fromIterator(final Iterator<T> iterator){
  return new CloseableIterator<T>(){
    @Override public void close() throws Exception {
    }
    @Override public boolean hasNext(){
      return iterator.hasNext();
    }
    @Override public T next(){
      return iterator.next();
    }
    @Override public void remove(){
      iterator.remove();
    }
  }
;
}",0.9338598223099704
117647,"@Override public void waitForCall(){
  semaphore.acquireUninterruptibly();
}","@Override public void waitForCall(){
  semaphore.acquireUninterruptibly();
  current++;
}",0.9212121212121211
117648,"@Override public void run(){
  try {
    Thread.sleep(millisPerEpoch);
    semaphore.drainPermits();
    semaphore.release(limit);
    needToWait=true;
  }
 catch (  final InterruptedException e) {
    throw new OriannaException(""String_Node_Str"");
  }
}","@Override public void run(){
  semaphore.drainPermits();
  resetRunning=false;
  semaphore.release(limit - current);
}",0.4731182795698925
117649,"@Override public synchronized void registerCall(){
  if (needToWait) {
    needToWait=false;
    final Thread t=new Thread(new ResetThread());
    t.setDaemon(true);
    t.start();
  }
}","@Override public synchronized void registerCall(){
  if (!resetRunning) {
    timer.schedule(new ResetTask(),millisPerEpoch);
    resetRunning=true;
  }
  current--;
}",0.6118980169971672
117650,"/** 
 * Total damate taken
 * @return total damate taken
 */
public int getTotalDamageTaken(){
  return super.getInteger(data.getTotalDamageTaken());
}","/** 
 * Total damage taken
 * @return total damage taken
 */
public int getTotalDamageTaken(){
  return super.getInteger(data.getTotalDamageTaken());
}",0.9867549668874172
117651,"/** 
 * Gets all stored team IDs for batch lookup
 * @return the team IDs
 */
public Set<String> getTeamIDs(){
  final Set<String> set=new HashSet<>();
  if (participantId != null) {
    try {
      Long.parseLong(participantId);
    }
 catch (    final NumberFormatException e) {
      set.add(participantId);
    }
    for (    final LeagueEntry entry : entries) {
      try {
        Long.parseLong(entry.getPlayerOrTeamId());
      }
 catch (      final NumberFormatException e) {
        set.add(participantId);
      }
    }
  }
  return set;
}","/** 
 * Gets all stored team IDs for batch lookup
 * @return the team IDs
 */
public Set<String> getTeamIDs(){
  final Set<String> set=new HashSet<>();
  if (participantId != null) {
    try {
      Long.parseLong(participantId);
    }
 catch (    final NumberFormatException e) {
      set.add(participantId);
    }
  }
  for (  final LeagueEntry entry : entries) {
    try {
      Long.parseLong(entry.getPlayerOrTeamId());
    }
 catch (    final NumberFormatException e) {
      set.add(participantId);
    }
  }
  return set;
}",0.966728280961183
117652,"/** 
 * Gets all stored summoner IDs for batch lookup
 * @return the summoner IDs
 */
public Set<Long> getSummonerIDs(){
  final Set<Long> set=new HashSet<>();
  if (participantId != null) {
    Long ID;
    try {
      ID=Long.parseLong(participantId);
      set.add(ID);
    }
 catch (    final NumberFormatException e) {
    }
    for (    final LeagueEntry entry : entries) {
      try {
        ID=Long.parseLong(entry.getPlayerOrTeamId());
        set.add(ID);
      }
 catch (      final NumberFormatException e) {
      }
    }
  }
  return set;
}","/** 
 * Gets all stored summoner IDs for batch lookup
 * @return the summoner IDs
 */
public Set<Long> getSummonerIDs(){
  final Set<Long> set=new HashSet<>();
  long ID;
  if (participantId != null) {
    try {
      ID=Long.parseLong(participantId);
      set.add(ID);
    }
 catch (    final NumberFormatException e) {
    }
  }
  for (  final LeagueEntry entry : entries) {
    try {
      ID=Long.parseLong(entry.getPlayerOrTeamId());
      set.add(ID);
    }
 catch (    final NumberFormatException e) {
    }
  }
  return set;
}",0.906422018348624
117653,"/** 
 * Gets all stored team IDs for batch lookup
 * @return the team IDs
 */
public Set<String> getTeamIDs(){
  final Set<String> set=new HashSet<>();
  if (participantId != null) {
    try {
      Long.parseLong(participantId);
    }
 catch (    final NumberFormatException e) {
      set.add(participantId);
    }
  }
  for (  final LeagueEntry entry : entries) {
    try {
      Long.parseLong(entry.getPlayerOrTeamId());
    }
 catch (    final NumberFormatException e) {
      set.add(participantId);
    }
  }
  return set;
}","/** 
 * Gets all stored team IDs for batch lookup
 * @return the team IDs
 */
public Set<String> getTeamIDs(){
  final Set<String> set=new HashSet<>();
  if (participantId != null) {
    try {
      Long.parseLong(participantId);
    }
 catch (    final NumberFormatException e) {
      set.add(participantId);
    }
  }
  for (  final LeagueEntry entry : entries) {
    if (entry.getPlayerOrTeamId() != null) {
      try {
        Long.parseLong(entry.getPlayerOrTeamId());
      }
 catch (      final NumberFormatException e) {
        set.add(entry.getPlayerOrTeamId());
      }
    }
  }
  return set;
}",0.9007901668129938
117654,"/** 
 * Gets all stored summoner IDs for batch lookup
 * @return the summoner IDs
 */
public Set<Long> getSummonerIDs(){
  final Set<Long> set=new HashSet<>();
  long ID;
  if (participantId != null) {
    try {
      ID=Long.parseLong(participantId);
      set.add(ID);
    }
 catch (    final NumberFormatException e) {
    }
  }
  for (  final LeagueEntry entry : entries) {
    try {
      ID=Long.parseLong(entry.getPlayerOrTeamId());
      set.add(ID);
    }
 catch (    final NumberFormatException e) {
    }
  }
  return set;
}","/** 
 * Gets all stored summoner IDs for batch lookup
 * @return the summoner IDs
 */
public Set<Long> getSummonerIDs(){
  final Set<Long> set=new HashSet<>();
  long ID;
  if (participantId != null) {
    try {
      ID=Long.parseLong(participantId);
      set.add(ID);
    }
 catch (    final NumberFormatException e) {
    }
  }
  for (  final LeagueEntry entry : entries) {
    if (entry.getPlayerOrTeamId() != null) {
      try {
        ID=Long.parseLong(entry.getPlayerOrTeamId());
        set.add(ID);
      }
 catch (      final NumberFormatException e) {
      }
    }
  }
  return set;
}",0.8826125330979699
117655,"/** 
 * @param API the API to get the data with
 * @param champions which champions to limit this search to
 * @param rankedQueues which queues to limit this search to. Any queues other than RANKED_SOLO_5x5, RANKED_TEAM_5x5, and RANKED_TEAM_3x3 will be ignored.
 * @param beginIndex the begin index to use for fetching games. No more than 15 games will be fetched.
 * @param endIndex the end index to use for fetching games. No more than 15 games will be fetched.
 * @return the summoner's match history
 * @see <a href=""https://developer.riotgames.com/api/methods#!/805/2847"">LoL
     *      API Specification</a>
 */
public List<MatchSummary> getMatchHistory(final RiotAPI API,final List<Champion> champions,final List<QueueType> rankedQueues,final Integer beginIndex,final Integer endIndex){
  return getMatchHistory(API,champions,rankedQueues,beginIndex,endIndex);
}","/** 
 * @param API the API to get the data with
 * @param champions which champions to limit this search to
 * @param rankedQueues which queues to limit this search to. Any queues other than RANKED_SOLO_5x5, RANKED_TEAM_5x5, and RANKED_TEAM_3x3 will be ignored.
 * @param beginIndex the begin index to use for fetching games. No more than 15 games will be fetched.
 * @param endIndex the end index to use for fetching games. No more than 15 games will be fetched.
 * @return the summoner's match history
 * @see <a href=""https://developer.riotgames.com/api/methods#!/805/2847"">LoL
     *      API Specification</a>
 */
public List<MatchSummary> getMatchHistory(final RiotAPI API,final List<Champion> champions,final List<QueueType> rankedQueues,final Integer beginIndex,final Integer endIndex){
  return API.getMatchHistory(this,champions,rankedQueues,beginIndex,endIndex);
}",0.9936962750716332
117656,"@Override public boolean onLongClick(View v){
  String url=mPreferences.getString(PreferenceConstants.SAVE_URL,null);
  if (url != null) {
    newTab(true,url);
    Toast.makeText(mContext,R.string.deleted_tab,Toast.LENGTH_SHORT).show();
  }
  mEditPrefs.putString(PreferenceConstants.SAVE_URL,null);
  return false;
}","@Override public boolean onLongClick(View v){
  String url=mPreferences.getString(PreferenceConstants.SAVE_URL,null);
  if (url != null) {
    newTab(true,url);
    Toast.makeText(mContext,R.string.deleted_tab,Toast.LENGTH_SHORT).show();
  }
  mEditPrefs.putString(PreferenceConstants.SAVE_URL,null).apply();
  return true;
}",0.942457231726283
117657,"private synchronized void initialize(){
  mClickHandler=new ClickHandler(this);
  mParentBackground=(RelativeLayout)findViewById(R.id.background);
  mUrlBar=(RelativeLayout)findViewById(R.id.urlBar);
  mNewTab=(LinearLayout)findViewById(R.id.action_new_tab);
  mBack=(ImageView)findViewById(R.id.back);
  mForward=(ImageView)findViewById(R.id.forward);
  mOptions=(ImageView)findViewById(R.id.options);
  mTabLayout=(LinearLayout)findViewById(R.id.TabLayout);
  mBrowserFrame=(FrameLayout)findViewById(R.id.holder);
  mTabScrollView=(HorizontalScrollView)findViewById(R.id.tabScroll);
  mSearch=(AutoCompleteTextView)findViewById(R.id.enterUrl);
  mDeleteIcon=getResources().getDrawable(R.drawable.ic_action_delete);
  mDeleteIcon.setBounds(0,0,Utils.convertToDensityPixels(mContext,24),Utils.convertToDensityPixels(mContext,24));
  mRefreshIcon=getResources().getDrawable(R.drawable.ic_action_refresh);
  mRefreshIcon.setBounds(0,0,Utils.convertToDensityPixels(mContext,24),Utils.convertToDensityPixels(mContext,24));
  mIcon=mRefreshIcon;
  mProgressBar=(ProgressBar)findViewById(R.id.progressBar);
  if (mWebViewList != null) {
    mWebViewList.clear();
  }
 else {
    mWebViewList=new ArrayList<LightningView>();
  }
  if (mTabList != null) {
    mTabList.clear();
  }
 else {
    mTabList=new ArrayList<TextView>();
  }
  if (mIdList != null) {
    mIdList.clear();
  }
 else {
    mIdList=new ArrayList<Integer>();
  }
  mHomepage=mPreferences.getString(PreferenceConstants.HOMEPAGE,Constants.HOMEPAGE);
  mSystemBrowser=getSystemBrowser();
  mMenu=new PopupMenu(mContext,mOptions);
  mMenu.setOnMenuItemClickListener(new OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
switch (item.getItemId()) {
case R.id.action_new_tab:
        newTab(true,null);
      return true;
case R.id.action_incognito:
    startActivity(new Intent(mContext,IncognitoActivity.class));
  return true;
case R.id.action_share:
if (!mCurrentView.getUrl().startsWith(Constants.FILE)) {
  Intent shareIntent=new Intent(android.content.Intent.ACTION_SEND);
  shareIntent.setType(""String_Node_Str"");
  shareIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,mCurrentView.getTitle());
  String shareMessage=mCurrentView.getUrl();
  shareIntent.putExtra(android.content.Intent.EXTRA_TEXT,shareMessage);
  startActivity(Intent.createChooser(shareIntent,getResources().getString(R.string.dialog_title_share)));
}
return true;
case R.id.action_bookmarks:
openBookmarkPage(mCurrentView.getWebView());
return true;
case R.id.action_copy:
if (mCurrentView != null) {
if (!mCurrentView.getUrl().startsWith(Constants.FILE)) {
ClipboardManager clipboard=(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
ClipData clip=ClipData.newPlainText(""String_Node_Str"",mCurrentView.getUrl().toString());
clipboard.setPrimaryClip(clip);
Utils.showToast(mContext,mContext.getResources().getString(R.string.message_link_copied));
}
}
return true;
case R.id.action_settings:
startActivity(new Intent(mContext,SettingsActivity.class));
return true;
case R.id.action_history:
openHistory();
return true;
case R.id.action_add_bookmark:
if (!mCurrentView.getUrl().startsWith(Constants.FILE)) {
addBookmark(mContext,mCurrentView.getTitle(),mCurrentView.getUrl());
}
return true;
case R.id.action_find:
findInPage();
return true;
default :
return true;
}
}
}
);
mMenuInflater=mMenu.getMenuInflater();
mMenuInflater.inflate(getMenu(),mMenu.getMenu());
OnTouchListener drag=null;
if (API > 18) {
drag=mMenu.getDragToOpenListener();
}
if (drag != null) {
mOptions.setOnTouchListener(drag);
}
mOptions.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mMenu.show();
}
}
);
mBack.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
if (mCurrentView.canGoBack()) {
mCurrentView.goBack();
}
 else {
deleteTab(mCurrentView.getId());
}
}
}
);
mForward.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
if (mCurrentView.canGoForward()) {
mCurrentView.goForward();
}
}
}
);
mNewTab.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
newTab(true,null);
}
}
);
mNewTab.setOnLongClickListener(new OnLongClickListener(){
@Override public boolean onLongClick(View v){
String url=mPreferences.getString(PreferenceConstants.SAVE_URL,null);
if (url != null) {
newTab(true,url);
Toast.makeText(mContext,R.string.deleted_tab,Toast.LENGTH_SHORT).show();
}
mEditPrefs.putString(PreferenceConstants.SAVE_URL,null);
return false;
}
}
);
mSearch.setOnFocusChangeListener(new View.OnFocusChangeListener(){
@Override public void onFocusChange(View v,boolean hasFocus){
if (!hasFocus && mCurrentView != null) {
if (mCurrentView != null) {
if (mCurrentView.getProgress() < 100) {
setIsLoading();
}
 else {
setIsFinishedLoading();
}
}
updateUrl(mCurrentView.getUrl());
}
 else if (hasFocus) {
}
}
}
);
mSearch.setOnKeyListener(new OnKeyListener(){
@Override public boolean onKey(View arg0,int arg1,KeyEvent arg2){
switch (arg1) {
case KeyEvent.KEYCODE_ENTER:
InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
imm.hideSoftInputFromWindow(mSearch.getWindowToken(),0);
searchTheWeb(mSearch.getText().toString());
if (mCurrentView != null) {
mCurrentView.requestFocus();
}
return true;
default :
break;
}
return false;
}
}
);
mSearch.setOnTouchListener(new OnTouchListener(){
@SuppressLint(""String_Node_Str"") @Override public boolean onTouch(View v,MotionEvent event){
if (mSearch.getCompoundDrawables()[2] != null) {
boolean tappedX=event.getX() > (mSearch.getWidth() - mSearch.getPaddingRight() - mIcon.getIntrinsicWidth());
if (tappedX) {
if (event.getAction() == MotionEvent.ACTION_UP) {
refreshOrStop();
}
return true;
}
}
return false;
}
}
);
mSearch.setOnEditorActionListener(new OnEditorActionListener(){
@Override public boolean onEditorAction(TextView arg0,int actionId,KeyEvent arg2){
if (actionId == EditorInfo.IME_ACTION_GO || actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_NEXT || actionId == EditorInfo.IME_ACTION_SEND || actionId == EditorInfo.IME_ACTION_SEARCH || (arg2.getAction() == KeyEvent.KEYCODE_ENTER)) {
InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
imm.hideSoftInputFromWindow(mSearch.getWindowToken(),0);
searchTheWeb(mSearch.getText().toString());
if (mCurrentView != null) {
mCurrentView.requestFocus();
}
return true;
}
return false;
}
}
);
mAddTab=AnimationUtils.loadAnimation(mContext,R.anim.up);
mSlideDownAnimation=AnimationUtils.loadAnimation(mContext,R.anim.slide_down);
mSlideUpAnimation=AnimationUtils.loadAnimation(mContext,R.anim.slide_up);
mSlideDownAnimation.setAnimationListener(new AnimationListener(){
@Override public void onAnimationEnd(Animation animation){
}
@Override public void onAnimationRepeat(Animation animation){
}
@Override public void onAnimationStart(Animation animation){
mUrlBar.setVisibility(View.VISIBLE);
}
}
);
mSlideUpAnimation.setAnimationListener(new AnimationListener(){
@Override public void onAnimationEnd(Animation animation){
mUrlBar.setVisibility(View.INVISIBLE);
}
@Override public void onAnimationRepeat(Animation animation){
}
@Override public void onAnimationStart(Animation animation){
}
}
);
if (mHistoryHandler == null) {
mHistoryHandler=new DatabaseHandler(this);
}
 else if (!mHistoryHandler.isOpen()) {
mHistoryHandler=new DatabaseHandler(this);
}
mHistoryDatabase=mHistoryHandler.getReadableDatabase();
if (API < 19) {
WebIconDatabase.getInstance().open(getDir(""String_Node_Str"",MODE_PRIVATE).getPath());
}
initializeSearchSuggestions(mSearch);
initializeTabs();
mPreferences.getBoolean(PreferenceConstants.USE_PROXY,false);
checkForTor();
}","private synchronized void initialize(){
  mClickHandler=new ClickHandler(this);
  mParentBackground=(RelativeLayout)findViewById(R.id.background);
  mUrlBar=(RelativeLayout)findViewById(R.id.urlBar);
  mNewTab=(LinearLayout)findViewById(R.id.action_new_tab);
  mBack=(ImageView)findViewById(R.id.back);
  mForward=(ImageView)findViewById(R.id.forward);
  mOptions=(ImageView)findViewById(R.id.options);
  mTabLayout=(LinearLayout)findViewById(R.id.TabLayout);
  mBrowserFrame=(FrameLayout)findViewById(R.id.holder);
  mTabScrollView=(HorizontalScrollView)findViewById(R.id.tabScroll);
  mSearch=(AutoCompleteTextView)findViewById(R.id.enterUrl);
  mDeleteIcon=getResources().getDrawable(R.drawable.ic_action_delete);
  mDeleteIcon.setBounds(0,0,Utils.convertToDensityPixels(mContext,24),Utils.convertToDensityPixels(mContext,24));
  mRefreshIcon=getResources().getDrawable(R.drawable.ic_action_refresh);
  mRefreshIcon.setBounds(0,0,Utils.convertToDensityPixels(mContext,24),Utils.convertToDensityPixels(mContext,24));
  mIcon=mRefreshIcon;
  mProgressBar=(ProgressBar)findViewById(R.id.progressBar);
  if (mWebViewList != null) {
    mWebViewList.clear();
  }
 else {
    mWebViewList=new ArrayList<LightningView>();
  }
  if (mTabList != null) {
    mTabList.clear();
  }
 else {
    mTabList=new ArrayList<TextView>();
  }
  if (mIdList != null) {
    mIdList.clear();
  }
 else {
    mIdList=new ArrayList<Integer>();
  }
  mHomepage=mPreferences.getString(PreferenceConstants.HOMEPAGE,Constants.HOMEPAGE);
  mSystemBrowser=getSystemBrowser();
  mMenu=new PopupMenu(mContext,mOptions);
  mMenu.setOnMenuItemClickListener(new OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
switch (item.getItemId()) {
case R.id.action_new_tab:
        newTab(true,null);
      return true;
case R.id.action_incognito:
    startActivity(new Intent(mContext,IncognitoActivity.class));
  return true;
case R.id.action_share:
if (!mCurrentView.getUrl().startsWith(Constants.FILE)) {
  Intent shareIntent=new Intent(android.content.Intent.ACTION_SEND);
  shareIntent.setType(""String_Node_Str"");
  shareIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,mCurrentView.getTitle());
  String shareMessage=mCurrentView.getUrl();
  shareIntent.putExtra(android.content.Intent.EXTRA_TEXT,shareMessage);
  startActivity(Intent.createChooser(shareIntent,getResources().getString(R.string.dialog_title_share)));
}
return true;
case R.id.action_bookmarks:
openBookmarkPage(mCurrentView.getWebView());
return true;
case R.id.action_copy:
if (mCurrentView != null) {
if (!mCurrentView.getUrl().startsWith(Constants.FILE)) {
ClipboardManager clipboard=(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
ClipData clip=ClipData.newPlainText(""String_Node_Str"",mCurrentView.getUrl().toString());
clipboard.setPrimaryClip(clip);
Utils.showToast(mContext,mContext.getResources().getString(R.string.message_link_copied));
}
}
return true;
case R.id.action_settings:
startActivity(new Intent(mContext,SettingsActivity.class));
return true;
case R.id.action_history:
openHistory();
return true;
case R.id.action_add_bookmark:
if (!mCurrentView.getUrl().startsWith(Constants.FILE)) {
addBookmark(mContext,mCurrentView.getTitle(),mCurrentView.getUrl());
}
return true;
case R.id.action_find:
findInPage();
return true;
default :
return true;
}
}
}
);
mMenuInflater=mMenu.getMenuInflater();
mMenuInflater.inflate(getMenu(),mMenu.getMenu());
OnTouchListener drag=null;
if (API > 18) {
drag=mMenu.getDragToOpenListener();
}
if (drag != null) {
mOptions.setOnTouchListener(drag);
}
mOptions.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
mMenu.show();
}
}
);
mBack.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
if (mCurrentView.canGoBack()) {
mCurrentView.goBack();
}
 else {
deleteTab(mCurrentView.getId());
}
}
}
);
mForward.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
if (mCurrentView.canGoForward()) {
mCurrentView.goForward();
}
}
}
);
mNewTab.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
newTab(true,null);
}
}
);
mNewTab.setOnLongClickListener(new OnLongClickListener(){
@Override public boolean onLongClick(View v){
String url=mPreferences.getString(PreferenceConstants.SAVE_URL,null);
if (url != null) {
newTab(true,url);
Toast.makeText(mContext,R.string.deleted_tab,Toast.LENGTH_SHORT).show();
}
mEditPrefs.putString(PreferenceConstants.SAVE_URL,null).apply();
return true;
}
}
);
mSearch.setOnFocusChangeListener(new View.OnFocusChangeListener(){
@Override public void onFocusChange(View v,boolean hasFocus){
if (!hasFocus && mCurrentView != null) {
if (mCurrentView != null) {
if (mCurrentView.getProgress() < 100) {
setIsLoading();
}
 else {
setIsFinishedLoading();
}
}
updateUrl(mCurrentView.getUrl());
}
 else if (hasFocus) {
}
}
}
);
mSearch.setOnKeyListener(new OnKeyListener(){
@Override public boolean onKey(View arg0,int arg1,KeyEvent arg2){
switch (arg1) {
case KeyEvent.KEYCODE_ENTER:
InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
imm.hideSoftInputFromWindow(mSearch.getWindowToken(),0);
searchTheWeb(mSearch.getText().toString());
if (mCurrentView != null) {
mCurrentView.requestFocus();
}
return true;
default :
break;
}
return false;
}
}
);
mSearch.setOnTouchListener(new OnTouchListener(){
@SuppressLint(""String_Node_Str"") @Override public boolean onTouch(View v,MotionEvent event){
if (mSearch.getCompoundDrawables()[2] != null) {
boolean tappedX=event.getX() > (mSearch.getWidth() - mSearch.getPaddingRight() - mIcon.getIntrinsicWidth());
if (tappedX) {
if (event.getAction() == MotionEvent.ACTION_UP) {
refreshOrStop();
}
return true;
}
}
return false;
}
}
);
mSearch.setOnEditorActionListener(new OnEditorActionListener(){
@Override public boolean onEditorAction(TextView arg0,int actionId,KeyEvent arg2){
if (actionId == EditorInfo.IME_ACTION_GO || actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_NEXT || actionId == EditorInfo.IME_ACTION_SEND || actionId == EditorInfo.IME_ACTION_SEARCH || (arg2.getAction() == KeyEvent.KEYCODE_ENTER)) {
InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
imm.hideSoftInputFromWindow(mSearch.getWindowToken(),0);
searchTheWeb(mSearch.getText().toString());
if (mCurrentView != null) {
mCurrentView.requestFocus();
}
return true;
}
return false;
}
}
);
mAddTab=AnimationUtils.loadAnimation(mContext,R.anim.up);
mSlideDownAnimation=AnimationUtils.loadAnimation(mContext,R.anim.slide_down);
mSlideUpAnimation=AnimationUtils.loadAnimation(mContext,R.anim.slide_up);
mSlideDownAnimation.setAnimationListener(new AnimationListener(){
@Override public void onAnimationEnd(Animation animation){
}
@Override public void onAnimationRepeat(Animation animation){
}
@Override public void onAnimationStart(Animation animation){
mUrlBar.setVisibility(View.VISIBLE);
}
}
);
mSlideUpAnimation.setAnimationListener(new AnimationListener(){
@Override public void onAnimationEnd(Animation animation){
mUrlBar.setVisibility(View.INVISIBLE);
}
@Override public void onAnimationRepeat(Animation animation){
}
@Override public void onAnimationStart(Animation animation){
}
}
);
if (mHistoryHandler == null) {
mHistoryHandler=new DatabaseHandler(this);
}
 else if (!mHistoryHandler.isOpen()) {
mHistoryHandler=new DatabaseHandler(this);
}
mHistoryDatabase=mHistoryHandler.getReadableDatabase();
if (API < 19) {
WebIconDatabase.getInstance().open(getDir(""String_Node_Str"",MODE_PRIVATE).getPath());
}
initializeSearchSuggestions(mSearch);
initializeTabs();
mPreferences.getBoolean(PreferenceConstants.USE_PROXY,false);
checkForTor();
}",0.997864768683274
117658,"@SuppressWarnings(""String_Node_Str"") public LightningView(Activity activity,String url){
  mActivity=activity;
  mWebView=new WebView(activity);
  mAdBlock=new AdBlock(activity);
  mTitle=new Title(activity);
  activity.getPackageName();
  mWebpageBitmap=BitmapFactory.decodeResource(activity.getResources(),R.drawable.ic_webpage);
  try {
    mBrowserController=(BrowserController)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
  mIntentUtils=new IntentUtils(mBrowserController);
  mWebView.setDrawingCacheBackgroundColor(0x00000000);
  mWebView.setFocusableInTouchMode(true);
  mWebView.setFocusable(true);
  mWebView.setAnimationCacheEnabled(false);
  mWebView.setDrawingCacheEnabled(true);
  mWebView.setBackgroundColor(activity.getResources().getColor(android.R.color.white));
  if (API > 15) {
    mWebView.getRootView().setBackground(null);
  }
 else {
    mWebView.getRootView().setBackgroundDrawable(null);
  }
  mWebView.setWillNotCacheDrawing(false);
  mWebView.setAlwaysDrawnWithCacheEnabled(true);
  mWebView.setScrollbarFadingEnabled(true);
  mWebView.setSaveEnabled(true);
  mWebView.setWebChromeClient(new LightningChromeClient(activity));
  mWebView.setWebViewClient(new LightningWebClient(activity));
  mWebView.setDownloadListener(new LightningDownloadListener(activity));
  mGestureDetector=new GestureDetector(activity,new CustomGestureListener());
  mWebView.setOnTouchListener(new OnTouchListener(){
    float mLocation=0;
    float mY=0;
    int mAction=0;
    @SuppressLint(""String_Node_Str"") @Override public boolean onTouch(    View view,    MotionEvent arg1){
      if (view != null && !view.hasFocus()) {
        view.requestFocus();
      }
      mAction=arg1.getAction();
      mY=arg1.getY();
      if (mAction == MotionEvent.ACTION_DOWN) {
        mLocation=mY;
      }
 else       if (mAction == MotionEvent.ACTION_UP) {
        if ((mY - mLocation) > 10) {
          if (mWebView.getScrollY() < 5 && mBrowserController.isActionBarShown()) {
            mBrowserController.hideActionBar();
          }
 else {
            mBrowserController.showActionBar();
          }
        }
 else         if ((mY - mLocation) < -10) {
          mBrowserController.hideActionBar();
        }
        mLocation=0;
      }
      mGestureDetector.onTouchEvent(arg1);
      return false;
    }
  }
);
  mDefaultUserAgent=mWebView.getSettings().getUserAgentString();
  mSettings=mWebView.getSettings();
  initializeSettings(mWebView.getSettings(),activity);
  initializePreferences(activity);
  if (url != null && !url.trim().isEmpty()) {
    mWebView.loadUrl(url);
  }
 else {
    if (mHomepage.startsWith(""String_Node_Str"")) {
      mSettings.setUseWideViewPort(false);
      mWebView.loadUrl(getHomepage());
    }
 else     if (mHomepage.startsWith(""String_Node_Str"")) {
      mBrowserController.openBookmarkPage(mWebView);
    }
 else {
      mWebView.loadUrl(mHomepage);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public LightningView(Activity activity,String url){
  mActivity=activity;
  mWebView=new WebView(activity);
  mAdBlock=new AdBlock(activity);
  mTitle=new Title(activity);
  activity.getPackageName();
  mWebpageBitmap=BitmapFactory.decodeResource(activity.getResources(),R.drawable.ic_webpage);
  try {
    mBrowserController=(BrowserController)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
  mIntentUtils=new IntentUtils(mBrowserController);
  mWebView.setDrawingCacheBackgroundColor(0x00000000);
  mWebView.setFocusableInTouchMode(true);
  mWebView.setFocusable(true);
  mWebView.setAnimationCacheEnabled(false);
  mWebView.setDrawingCacheEnabled(true);
  mWebView.setBackgroundColor(activity.getResources().getColor(android.R.color.white));
  if (API > 15) {
    mWebView.getRootView().setBackground(null);
  }
 else {
    mWebView.getRootView().setBackgroundDrawable(null);
  }
  mWebView.setWillNotCacheDrawing(false);
  mWebView.setAlwaysDrawnWithCacheEnabled(true);
  mWebView.setScrollbarFadingEnabled(true);
  mWebView.setSaveEnabled(true);
  mWebView.setWebChromeClient(new LightningChromeClient(activity));
  mWebView.setWebViewClient(new LightningWebClient(activity));
  mWebView.setDownloadListener(new LightningDownloadListener(activity));
  mGestureDetector=new GestureDetector(activity,new CustomGestureListener());
  mWebView.setOnTouchListener(new OnTouchListener(){
    float mLocation=0;
    float mY=0;
    int mAction=0;
    @SuppressLint(""String_Node_Str"") @Override public boolean onTouch(    View view,    MotionEvent arg1){
      if (view != null && !view.hasFocus()) {
        view.requestFocus();
      }
      mAction=arg1.getAction();
      mY=arg1.getY();
      if (mAction == MotionEvent.ACTION_DOWN) {
        mLocation=mY;
      }
 else       if (mAction == MotionEvent.ACTION_UP) {
        if ((mY - mLocation) > 10) {
          if (mWebView.getScrollY() < 5 && mBrowserController.isActionBarShown()) {
            mBrowserController.hideActionBar();
          }
 else {
            mBrowserController.showActionBar();
          }
        }
 else         if ((mY - mLocation) < -10) {
          mBrowserController.hideActionBar();
        }
        mLocation=0;
      }
      mGestureDetector.onTouchEvent(arg1);
      return false;
    }
  }
);
  mDefaultUserAgent=mWebView.getSettings().getUserAgentString();
  mSettings=mWebView.getSettings();
  initializeSettings(mWebView.getSettings(),activity);
  initializePreferences(activity);
  if (url != null) {
    if (!url.trim().isEmpty()) {
      mWebView.loadUrl(url);
    }
 else {
    }
  }
 else {
    if (mHomepage.startsWith(""String_Node_Str"")) {
      mSettings.setUseWideViewPort(false);
      mWebView.loadUrl(getHomepage());
    }
 else     if (mHomepage.startsWith(""String_Node_Str"")) {
      mBrowserController.openBookmarkPage(mWebView);
    }
 else {
      mWebView.loadUrl(mHomepage);
    }
  }
}",0.9936645548516172
117659,"private synchronized void animateTabRemoval(final TextView view,final int position,final LightningView reference,final boolean isShown){
  mRemoveTab.setAnimationListener(new AnimationListener(){
    @Override public void onAnimationEnd(    Animation animation){
      new Handler().post(new Runnable(){
        @Override public void run(){
          mTabLayout.removeView(view);
          mWebViewList.remove(position);
          mIdList.remove(position);
          reference.onDestroy();
          if (mIsNewIntent && isShown) {
            mIsNewIntent=false;
            moveTaskToBack(true);
          }
        }
      }
);
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
    @Override public void onAnimationStart(    Animation animation){
    }
  }
);
  view.post(new Runnable(){
    @Override public void run(){
      view.startAnimation(mRemoveTab);
    }
  }
);
}","private synchronized void animateTabRemoval(final TextView view,final int position,final LightningView reference,final boolean isShown){
  mRemoveTab.setAnimationListener(new AnimationListener(){
    @Override public void onAnimationEnd(    Animation animation){
      mTabLayout.post(new Runnable(){
        public void run(){
          mActivity.runOnUiThread(new Runnable(){
            public void run(){
              mTabLayout.removeView(view);
              viewIsAnimating=false;
            }
          }
);
        }
      }
);
      if (mIsNewIntent && isShown) {
        mIsNewIntent=false;
        moveTaskToBack(true);
      }
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
    @Override public void onAnimationStart(    Animation animation){
      viewIsAnimating=true;
    }
  }
);
  view.startAnimation(mRemoveTab);
}",0.4173228346456692
117660,"public synchronized void initializeTabs(){
  mIdGenerator=0;
  String url=null;
  if (getIntent() != null) {
    url=getIntent().getDataString();
    if (url != null) {
      if (url.startsWith(Constants.FILE)) {
        Utils.showToast(this,getResources().getString(R.string.message_blocked_local));
        url=null;
      }
    }
  }
  if (mPreferences.getBoolean(PreferenceConstants.RESTORE_LOST_TABS,true)) {
    String mem=mPreferences.getString(PreferenceConstants.URL_MEMORY,""String_Node_Str"");
    mEditPrefs.putString(PreferenceConstants.URL_MEMORY,""String_Node_Str"");
    String[] array=getArray(mem);
    int count=0;
    for (int n=0; n < array.length; n++) {
      if (array[n].length() > 0) {
        newTab(true,array[n]);
        count++;
      }
    }
    if (url != null) {
      newTab(true,url);
    }
 else     if (count == 0) {
      newTab(true,null);
    }
  }
 else {
    newTab(true,url);
  }
}","public synchronized void initializeTabs(){
  String url=null;
  if (getIntent() != null) {
    url=getIntent().getDataString();
    if (url != null) {
      if (url.startsWith(Constants.FILE)) {
        Utils.showToast(this,getResources().getString(R.string.message_blocked_local));
        url=null;
      }
    }
  }
  if (mPreferences.getBoolean(PreferenceConstants.RESTORE_LOST_TABS,true)) {
    String mem=mPreferences.getString(PreferenceConstants.URL_MEMORY,""String_Node_Str"");
    mEditPrefs.putString(PreferenceConstants.URL_MEMORY,""String_Node_Str"");
    String[] array=getArray(mem);
    int count=0;
    for (int n=0; n < array.length; n++) {
      if (array[n].length() > 0) {
        newTab(true,array[n]);
        count++;
      }
    }
    if (url != null) {
      newTab(true,url);
    }
 else     if (count == 0) {
      newTab(true,null);
    }
  }
 else {
    newTab(true,url);
  }
}",0.9901315789473684
117661,"@Override public synchronized void onBackPressed(){
  mTabLayout.clearDisappearingChildren();
  showActionBar();
  if (mCurrentView.canGoBack()) {
    if (!mCurrentView.isShown()) {
      onHideCustomView();
    }
 else {
      mCurrentView.goBack();
    }
  }
 else {
    deleteTab(mCurrentView.getId());
  }
}","@Override public synchronized void onBackPressed(){
  showActionBar();
  if (mCurrentView.canGoBack()) {
    if (!mCurrentView.isShown()) {
      onHideCustomView();
    }
 else {
      mCurrentView.goBack();
    }
  }
 else {
    if (!mCurrentView.isDestroyed())     deleteTab(mCurrentView.getId());
  }
}",0.8719611021069692
117662,"@Override public void showSelectedTab(int id){
  mIsNewIntent=false;
  int index=mIdList.indexOf(id);
  showTab(mWebViewList.get(index));
}","@Override public synchronized void showSelectedTab(int id){
  mIsNewIntent=false;
  int index=mIdList.indexOf(id);
  if (index == -1) {
    return;
  }
  showTab(mWebViewList.get(index));
}",0.8475609756097561
117663,"@Override public synchronized void deleteTab(int id){
  mTabLayout.clearDisappearingChildren();
  int position=mIdList.indexOf(id);
  if (position >= mWebViewList.size()) {
    return;
  }
  mTabScrollView.smoothScrollTo(mCurrentView.getTitleView().getLeft(),0);
  int current=mIdList.indexOf(mCurrentView.getId());
  if (current == -1) {
    return;
  }
  LightningView reference=mWebViewList.get(position);
  if (reference == null) {
    return;
  }
  final boolean isShown=reference.isShown();
  if (current > position) {
    if (reference.isShown()) {
      showTab(mWebViewList.get(position - 1));
    }
    animateTabRemoval(mWebViewList.get(position).getTitleView(),position,reference,isShown);
  }
 else   if (mWebViewList.size() > position + 1) {
    if (reference.isShown()) {
      showTab(mWebViewList.get(position + 1));
    }
    animateTabRemoval(mWebViewList.get(position).getTitleView(),position,reference,isShown);
  }
 else   if (mWebViewList.size() > 1) {
    if (reference.isShown()) {
      showTab(mWebViewList.get(position - 1));
    }
    animateTabRemoval(mWebViewList.get(position).getTitleView(),position,reference,isShown);
  }
 else {
    if (mCurrentView.getUrl().startsWith(Constants.FILE) || mCurrentView.getUrl().equals(mHomepage)) {
      moveTaskToBack(true);
    }
 else {
      mWebViewList.remove(position);
      mIdList.remove(position);
      if (mPreferences.getBoolean(PreferenceConstants.CLEAR_CACHE_EXIT,false) && mCurrentView != null) {
        mCurrentView.clearCache(true);
      }
      if (reference != null) {
        reference.pauseTimers();
        reference.onDestroy();
      }
      mCurrentView=null;
      finish();
    }
  }
  Log.i(""String_Node_Str"",""String_Node_Str"");
}","@Override public synchronized void deleteTab(int id){
  if (viewIsAnimating) {
    return;
  }
  mTabLayout.clearDisappearingChildren();
  int position=mIdList.indexOf(id);
  if (position >= mWebViewList.size()) {
    return;
  }
  if (position == -1) {
    return;
  }
  int current=mIdList.indexOf(mCurrentView.getId());
  if (current == -1) {
    return;
  }
  LightningView reference=mWebViewList.get(position);
  if (reference == null) {
    return;
  }
  mTabScrollView.smoothScrollTo(mCurrentView.getTitleView().getLeft(),0);
  final boolean isShown=reference.isShown();
  if (current > position) {
    if (reference.isShown()) {
      showTab(mWebViewList.get(position - 1));
    }
    animateTabRemoval(mWebViewList.get(position).getTitleView(),position,reference,isShown);
    reference.onDestroy();
    mWebViewList.remove(position);
    mIdList.remove(position);
  }
 else   if (mWebViewList.size() > position + 1) {
    if (reference.isShown()) {
      showTab(mWebViewList.get(position + 1));
    }
    animateTabRemoval(mWebViewList.get(position).getTitleView(),position,reference,isShown);
    reference.onDestroy();
    mWebViewList.remove(position);
    mIdList.remove(position);
  }
 else   if (mWebViewList.size() > 1) {
    if (reference.isShown()) {
      showTab(mWebViewList.get(position - 1));
    }
    animateTabRemoval(mWebViewList.get(position).getTitleView(),position,reference,isShown);
    reference.onDestroy();
    mWebViewList.remove(position);
    mIdList.remove(position);
  }
 else {
    if (mCurrentView.getUrl().startsWith(Constants.FILE) || mCurrentView.getUrl().equals(mHomepage)) {
      moveTaskToBack(true);
    }
 else {
      mWebViewList.remove(position);
      mIdList.remove(position);
      if (mPreferences.getBoolean(PreferenceConstants.CLEAR_CACHE_EXIT,false) && mCurrentView != null) {
        mCurrentView.clearCache(true);
      }
      if (reference != null) {
        reference.pauseTimers();
        reference.onDestroy();
      }
      mCurrentView=null;
      finish();
    }
  }
  Log.i(""String_Node_Str"",""String_Node_Str"");
}",0.4726511384454331
117664,"@Override public void onClick(DialogInterface dialog,int id){
  callback.invoke(origin,false,remember);
}","@Override public void onClick(View v){
  if (!isShown() && !isDestroyed())   mBrowserController.showSelectedTab(mId);
}",0.4107142857142857
117665,"public synchronized void onDestroy(){
  if (mWebView != null) {
    mWebView.stopLoading();
    mWebView.onPause();
    mWebView.clearHistory();
    mWebView.setVisibility(View.GONE);
    mWebView.removeAllViews();
    mWebView.destroyDrawingCache();
    mWebView=null;
  }
}","public synchronized void onDestroy(){
  isDestroyed=true;
  if (mWebView != null) {
    mWebView.stopLoading();
    mWebView.onPause();
    mWebView.clearHistory();
    mWebView.setVisibility(View.GONE);
    mWebView.removeAllViews();
    mWebView.destroyDrawingCache();
    mWebView=null;
  }
}",0.9649122807017544
117666,"public Title(Context context){
  mDefaultIcon=BitmapFactory.decodeResource(context.getResources(),R.drawable.ic_webpage);
  mFavicon=mDefaultIcon;
  mTitle=mActivity.getString(R.string.action_new_tab);
  mContext=context;
  LayoutInflater inflater=LayoutInflater.from(context);
  mFaviconSize=context.getResources().getDrawable(R.drawable.ic_webpage).getMinimumWidth() / 2;
  mCloseIcon=context.getResources().getDrawable(R.drawable.ic_action_delete);
  mCloseIcon.setBounds(0,0,mFaviconSize * 4 / 3,mFaviconSize * 4 / 3);
  mTitleView=(TextView)inflater.inflate(R.layout.title,null);
  mTitleView.setPadding(Utils.convertToDensityPixels(mContext,20),0,Utils.convertToDensityPixels(mContext,15),0);
  mTitleView.setText(mContext.getResources().getString(R.string.action_new_tab));
  mTitleView.setText(mTitle);
  Drawable icon=new BitmapDrawable(null,mFavicon);
  icon.setBounds(0,0,mFaviconSize,mFaviconSize);
  mTitleView.setCompoundDrawables(icon,null,mCloseIcon,null);
  mTitleView.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (mTitleView.getCompoundDrawables()[2] != null) {
        boolean tappedX=event.getX() > (mTitleView.getWidth() - mTitleView.getPaddingRight() - mCloseIcon.getIntrinsicWidth());
        if (tappedX) {
          if (event.getAction() == MotionEvent.ACTION_UP) {
            mBrowserController.deleteTab(mId);
          }
          return true;
        }
 else {
          if (event.getAction() == MotionEvent.ACTION_UP) {
            Log.i(""String_Node_Str"",""String_Node_Str"");
            if (!isShown())             mBrowserController.showSelectedTab(mId);
          }
          return true;
        }
      }
      return false;
    }
  }
);
}","public Title(Context context){
  mDefaultIcon=BitmapFactory.decodeResource(context.getResources(),R.drawable.ic_webpage);
  mFavicon=mDefaultIcon;
  mTitle=mActivity.getString(R.string.action_new_tab);
  mContext=context;
  LayoutInflater inflater=LayoutInflater.from(context);
  mFaviconSize=context.getResources().getDrawable(R.drawable.ic_webpage).getMinimumWidth() / 2;
  mCloseIcon=context.getResources().getDrawable(R.drawable.ic_action_delete);
  mCloseIcon.setBounds(0,0,mFaviconSize * 4 / 3,mFaviconSize * 4 / 3);
  mTitleView=(TextView)inflater.inflate(R.layout.title,null);
  mTitleView.setPadding(Utils.convertToDensityPixels(mContext,20),0,Utils.convertToDensityPixels(mContext,15),0);
  mTitleView.setText(mContext.getResources().getString(R.string.action_new_tab));
  mTitleView.setText(mTitle);
  Drawable icon=new BitmapDrawable(null,mFavicon);
  icon.setBounds(0,0,mFaviconSize,mFaviconSize);
  mTitleView.setCompoundDrawables(icon,null,mCloseIcon,null);
  mTitleView.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      if (mTitleView.getCompoundDrawables()[2] != null) {
        boolean tappedX=event.getX() > (mTitleView.getWidth() - mTitleView.getPaddingRight() - mCloseIcon.getIntrinsicWidth());
        if (tappedX) {
          if (event.getAction() == MotionEvent.ACTION_UP) {
            mBrowserController.deleteTab(mId);
          }
          return true;
        }
 else {
          if (event.getAction() == MotionEvent.ACTION_UP) {
            Log.i(""String_Node_Str"",""String_Node_Str"");
            view.performClick();
          }
          return true;
        }
      }
      return false;
    }
  }
);
  mTitleView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!isShown() && !isDestroyed())       mBrowserController.showSelectedTab(mId);
    }
  }
);
}",0.9127114020731042
117667,"@Override public boolean onTouch(View view,MotionEvent event){
  if (mTitleView.getCompoundDrawables()[2] != null) {
    boolean tappedX=event.getX() > (mTitleView.getWidth() - mTitleView.getPaddingRight() - mCloseIcon.getIntrinsicWidth());
    if (tappedX) {
      if (event.getAction() == MotionEvent.ACTION_UP) {
        mBrowserController.deleteTab(mId);
      }
      return true;
    }
 else {
      if (event.getAction() == MotionEvent.ACTION_UP) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        if (!isShown())         mBrowserController.showSelectedTab(mId);
      }
      return true;
    }
  }
  return false;
}","@Override public boolean onTouch(View view,MotionEvent event){
  if (mTitleView.getCompoundDrawables()[2] != null) {
    boolean tappedX=event.getX() > (mTitleView.getWidth() - mTitleView.getPaddingRight() - mCloseIcon.getIntrinsicWidth());
    if (tappedX) {
      if (event.getAction() == MotionEvent.ACTION_UP) {
        mBrowserController.deleteTab(mId);
      }
      return true;
    }
 else {
      if (event.getAction() == MotionEvent.ACTION_UP) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        view.performClick();
      }
      return true;
    }
  }
  return false;
}",0.8466557911908646
117668,"@Override public void execute(Wandora admin,Context context){
  try {
    Map<Association,ArrayList<Topic>> associationsWithRoles=null;
    Topic role=null;
    Association a=null;
    StringBuilder pathString=new StringBuilder(""String_Node_Str"");
    otherRole=null;
    if (context instanceof AssociationContext) {
      AssociationTable associationTable=null;
      Object contextSource=context.getContextSource();
      if (contextSource instanceof AssociationTable) {
        associationTable=(AssociationTable)context.getContextSource();
      }
      if (associationTable != null) {
        associationsWithRoles=associationTable.getSelectedAssociationsWithSelectedRoles();
      }
      if (associationsWithRoles != null && associationsWithRoles.size() > 0) {
        Set<Association> associationSet=associationsWithRoles.keySet();
        Iterator<Association> associationIterator=associationSet.iterator();
        while (associationIterator.hasNext() && !forceStop()) {
          a=(Association)associationIterator.next();
          if (a != null) {
            ArrayList<Topic> roles=associationsWithRoles.get(a);
            Iterator<Topic> roleIterator=roles.iterator();
            if (roleIterator.hasNext() && !forceStop()) {
              role=roleIterator.next();
              if (role != null) {
                try {
                  Topic outRole=findOtherRole(a,role,admin);
                  if (outRole != null) {
                    Topic player=a.getPlayer(role);
                    ArrayList<Topic> topicPath=TopicTools.getSinglePath(player,a.getType(),role,outRole);
                    Topic pathTopic=null;
                    pathString.append(player.getBaseName());
                    for (Iterator<Topic> pathIter=topicPath.iterator(); pathIter.hasNext(); ) {
                      pathTopic=pathIter.next();
                      pathString.append(TopicToString.toString(pathTopic));
                      if (pathIter.hasNext())                       pathString.append(""String_Node_Str"");
                    }
                    pathString.append(""String_Node_Str"");
                  }
                }
 catch (                Exception e) {
                  singleLog(e);
                }
              }
            }
          }
        }
        ClipboardBox.setClipboard(pathString.toString());
      }
 else {
        singleLog(""String_Node_Str"");
      }
    }
 else {
      singleLog(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    singleLog(e);
  }
}","@Override public void execute(Wandora admin,Context context){
  try {
    Map<Association,ArrayList<Topic>> associationsWithRoles=null;
    Topic role=null;
    Association a=null;
    StringBuilder pathString=new StringBuilder(""String_Node_Str"");
    otherRole=null;
    if (context instanceof AssociationContext) {
      AssociationTable associationTable=null;
      Object contextSource=context.getContextSource();
      if (contextSource instanceof AssociationTable) {
        associationTable=(AssociationTable)context.getContextSource();
      }
      if (associationTable != null) {
        associationsWithRoles=associationTable.getSelectedAssociationsWithSelectedRoles();
      }
      if (associationsWithRoles != null && associationsWithRoles.size() > 0) {
        Set<Association> associationSet=associationsWithRoles.keySet();
        Iterator<Association> associationIterator=associationSet.iterator();
        while (associationIterator.hasNext() && !forceStop()) {
          a=(Association)associationIterator.next();
          if (a != null) {
            ArrayList<Topic> roles=associationsWithRoles.get(a);
            Iterator<Topic> roleIterator=roles.iterator();
            if (roleIterator.hasNext() && !forceStop()) {
              role=roleIterator.next();
              if (role != null) {
                try {
                  Topic outRole=findOtherRole(a,role,admin);
                  if (outRole != null) {
                    Topic player=a.getPlayer(role);
                    List<Topic> topicPath=TopicTools.getSinglePath(player,a.getType(),role,outRole);
                    Topic pathTopic=null;
                    pathString.append(player.getBaseName());
                    for (Iterator<Topic> pathIter=topicPath.iterator(); pathIter.hasNext(); ) {
                      pathTopic=pathIter.next();
                      pathString.append(TopicToString.toString(pathTopic));
                      if (pathIter.hasNext())                       pathString.append(""String_Node_Str"");
                    }
                    pathString.append(""String_Node_Str"");
                  }
                }
 catch (                Exception e) {
                  singleLog(e);
                }
              }
            }
          }
        }
        ClipboardBox.setClipboard(pathString.toString());
      }
 else {
        singleLog(""String_Node_Str"");
      }
    }
 else {
      singleLog(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    singleLog(e);
  }
}",0.9990053709966182
117669,"@Override public void execute(Wandora admin,Context context){
  try {
    Map<Association,ArrayList<Topic>> associationsWithRoles=null;
    Topic role=null;
    Association a=null;
    if (context instanceof AssociationContext) {
      AssociationTable associationTable=null;
      Object contextSource=context.getContextSource();
      if (contextSource instanceof AssociationTable) {
        associationTable=(AssociationTable)context.getContextSource();
      }
      if (associationTable != null) {
        associationsWithRoles=associationTable.getSelectedAssociationsWithSelectedRoles();
      }
      if (associationsWithRoles != null && associationsWithRoles.size() > 0) {
        Set<Association> associationSet=associationsWithRoles.keySet();
        Iterator<Association> associationIterator=associationSet.iterator();
        if (associationIterator.hasNext() && !forceStop()) {
          a=(Association)associationIterator.next();
          if (a != null) {
            ArrayList<Topic> roles=associationsWithRoles.get(a);
            Iterator<Topic> roleIterator=roles.iterator();
            if (roleIterator.hasNext() && !forceStop()) {
              role=roleIterator.next();
              if (role != null) {
                try {
                  Topic outRole=findOtherRole(a,role,admin);
                  if (outRole != null) {
                    Topic player=a.getPlayer(role);
                    setDefaultLogger();
                    log(""String_Node_Str"" + TopicToString.toString(a.getType()) + ""String_Node_Str"");
                    log(""String_Node_Str"" + TopicToString.toString(role) + ""String_Node_Str""+ TopicToString.toString(outRole)+ ""String_Node_Str"");
                    log(""String_Node_Str"" + TopicToString.toString(player) + ""String_Node_Str"");
                    ArrayList<ArrayList<Topic>> cycles=TopicTools.getCyclePaths(player,a.getType(),role,outRole);
                    if (cycles.isEmpty()) {
                      log(""String_Node_Str"");
                    }
 else {
                      if (cycles.size() == 1)                       log(""String_Node_Str"" + cycles.size() + ""String_Node_Str"");
 else                       log(""String_Node_Str"" + cycles.size() + ""String_Node_Str"");
                      for (int i=0; i < cycles.size(); i++) {
                        ArrayList<Topic> cycle=cycles.get(i);
                        log(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (cycle.size() - 1)+ ""String_Node_Str"");
                        for (                        Topic t : cycle) {
                          log(""String_Node_Str"" + TopicToString.toString(t));
                        }
                      }
                    }
                  }
                  log(""String_Node_Str"");
                  setState(WAIT);
                }
 catch (                Exception e) {
                  singleLog(e);
                }
              }
            }
          }
        }
      }
 else {
        singleLog(""String_Node_Str"");
      }
    }
 else {
      singleLog(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    singleLog(e);
  }
}","@Override public void execute(Wandora admin,Context context){
  try {
    Map<Association,ArrayList<Topic>> associationsWithRoles=null;
    Topic role=null;
    Association a=null;
    if (context instanceof AssociationContext) {
      AssociationTable associationTable=null;
      Object contextSource=context.getContextSource();
      if (contextSource instanceof AssociationTable) {
        associationTable=(AssociationTable)context.getContextSource();
      }
      if (associationTable != null) {
        associationsWithRoles=associationTable.getSelectedAssociationsWithSelectedRoles();
      }
      if (associationsWithRoles != null && associationsWithRoles.size() > 0) {
        Set<Association> associationSet=associationsWithRoles.keySet();
        Iterator<Association> associationIterator=associationSet.iterator();
        if (associationIterator.hasNext() && !forceStop()) {
          a=(Association)associationIterator.next();
          if (a != null) {
            ArrayList<Topic> roles=associationsWithRoles.get(a);
            Iterator<Topic> roleIterator=roles.iterator();
            if (roleIterator.hasNext() && !forceStop()) {
              role=roleIterator.next();
              if (role != null) {
                try {
                  Topic outRole=findOtherRole(a,role,admin);
                  if (outRole != null) {
                    Topic player=a.getPlayer(role);
                    setDefaultLogger();
                    log(""String_Node_Str"" + TopicToString.toString(a.getType()) + ""String_Node_Str"");
                    log(""String_Node_Str"" + TopicToString.toString(role) + ""String_Node_Str""+ TopicToString.toString(outRole)+ ""String_Node_Str"");
                    log(""String_Node_Str"" + TopicToString.toString(player) + ""String_Node_Str"");
                    List<List<Topic>> cycles=TopicTools.getCyclePaths(player,a.getType(),role,outRole);
                    if (cycles.isEmpty()) {
                      log(""String_Node_Str"");
                    }
 else {
                      if (cycles.size() == 1)                       log(""String_Node_Str"" + cycles.size() + ""String_Node_Str"");
 else                       log(""String_Node_Str"" + cycles.size() + ""String_Node_Str"");
                      for (int i=0; i < cycles.size(); i++) {
                        List<Topic> cycle=cycles.get(i);
                        log(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (cycle.size() - 1)+ ""String_Node_Str"");
                        for (                        Topic t : cycle) {
                          log(""String_Node_Str"" + TopicToString.toString(t));
                        }
                      }
                    }
                  }
                  log(""String_Node_Str"");
                  setState(WAIT);
                }
 catch (                Exception e) {
                  singleLog(e);
                }
              }
            }
          }
        }
      }
 else {
        singleLog(""String_Node_Str"");
      }
    }
 else {
      singleLog(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    singleLog(e);
  }
}",0.9975957685526526
117670,"public TopicMap process(TopicMap tm,Logger logger) throws TopicMapException {
  log(""String_Node_Str"");
  Topic fiLang=tm.getTopic(""String_Node_Str"");
  Topic swLang=tm.getTopic(""String_Node_Str"");
  Topic enLang=tm.getTopic(""String_Node_Str"");
  Topic work=tm.getTopic(""String_Node_Str"");
  Topic isAboutType=tm.getTopic(""String_Node_Str"");
  Topic isAboutRole=tm.getTopic(""String_Node_Str"");
  Topic requiredRole=tm.getTopic(""String_Node_Str"");
  Topic requiredPlayer=tm.getTopic(""String_Node_Str"");
  if (work == null || isAboutType == null || isAboutRole == null || requiredRole == null || requiredPlayer == null) {
    log(""String_Node_Str"");
    return tm;
  }
  Topic keywordClassTopic=tm.getTopic(""String_Node_Str"");
  if (keywordClassTopic == null) {
    keywordClassTopic=tm.createTopic();
    keywordClassTopic.setBaseName(""String_Node_Str"");
    keywordClassTopic.addSubjectIdentifier(new Locator(""String_Node_Str""));
  }
  int splitCounter=0;
  int createTopicCounter=0;
  int createAssociationCounter=0;
  Iterator iter=tm.getTopicsOfType(work).iterator();
  while (iter.hasNext()) {
    Topic t=(Topic)iter.next();
    Vector<Topic> keywords=TopicTools.getPlayers(t,isAboutType,isAboutRole,requiredRole,requiredPlayer);
    int s=keywords.size();
    for (int i=0; i < s; i++) {
      Topic keywordTopic=keywords.elementAt(i);
      if (keywordTopic != null) {
        hlog(""String_Node_Str"" + getTopicName(keywordTopic) + ""String_Node_Str"");
        StringTokenizer st=new StringTokenizer(keywordTopic.getBaseName(),""String_Node_Str"");
        while (st.hasMoreTokens()) {
          String token=st.nextToken();
          token=fixKeyword(token);
          if (token != null && token.length() > 0 && !token.startsWith(""String_Node_Str"") && !token.startsWith(""String_Node_Str"")) {
            String siString=""String_Node_Str"" + token;
            if (siString.length() > 255)             siString=siString.substring(0,255);
            Locator l=cleanDirtyLocator(new Locator(siString));
            Topic newKeyword=tm.getTopic(l);
            if (newKeyword == null) {
              newKeyword=tm.createTopic();
              newKeyword.setBaseName(token + ""String_Node_Str"");
              newKeyword.setDisplayName(""String_Node_Str"",token);
              newKeyword.addSubjectIdentifier(l);
              newKeyword.addType(keywordClassTopic);
              createTopicCounter++;
              log(""String_Node_Str"" + getTopicName(newKeyword) + ""String_Node_Str"");
            }
            Association a=tm.createAssociation(keywordClassTopic);
            a.addPlayer(newKeyword,keywordClassTopic);
            a.addPlayer(t,work);
            createAssociationCounter++;
          }
        }
      }
      try {
        for (Iterator assos=keywordTopic.getAssociations().iterator(); assos.hasNext(); ) {
          Association a=(Association)assos.next();
          if (a != null)           a.remove();
        }
        keywordTopic.remove();
        splitCounter++;
      }
 catch (      Exception e) {
        log(e);
      }
    }
  }
  log(""String_Node_Str"" + splitCounter + ""String_Node_Str"");
  log(""String_Node_Str"" + createAssociationCounter + ""String_Node_Str"");
  log(""String_Node_Str"" + createTopicCounter + ""String_Node_Str"");
  return tm;
}","public TopicMap process(TopicMap tm,Logger logger) throws TopicMapException {
  log(""String_Node_Str"");
  Topic fiLang=tm.getTopic(""String_Node_Str"");
  Topic swLang=tm.getTopic(""String_Node_Str"");
  Topic enLang=tm.getTopic(""String_Node_Str"");
  Topic work=tm.getTopic(""String_Node_Str"");
  Topic isAboutType=tm.getTopic(""String_Node_Str"");
  Topic isAboutRole=tm.getTopic(""String_Node_Str"");
  Topic requiredRole=tm.getTopic(""String_Node_Str"");
  Topic requiredPlayer=tm.getTopic(""String_Node_Str"");
  if (work == null || isAboutType == null || isAboutRole == null || requiredRole == null || requiredPlayer == null) {
    log(""String_Node_Str"");
    return tm;
  }
  Topic keywordClassTopic=tm.getTopic(""String_Node_Str"");
  if (keywordClassTopic == null) {
    keywordClassTopic=tm.createTopic();
    keywordClassTopic.setBaseName(""String_Node_Str"");
    keywordClassTopic.addSubjectIdentifier(new Locator(""String_Node_Str""));
  }
  int splitCounter=0;
  int createTopicCounter=0;
  int createAssociationCounter=0;
  Iterator iter=tm.getTopicsOfType(work).iterator();
  while (iter.hasNext()) {
    Topic t=(Topic)iter.next();
    List<Topic> keywords=TopicTools.getPlayers(t,isAboutType,isAboutRole,requiredRole,requiredPlayer);
    int s=keywords.size();
    for (int i=0; i < s; i++) {
      Topic keywordTopic=keywords.get(i);
      if (keywordTopic != null) {
        hlog(""String_Node_Str"" + getTopicName(keywordTopic) + ""String_Node_Str"");
        StringTokenizer st=new StringTokenizer(keywordTopic.getBaseName(),""String_Node_Str"");
        while (st.hasMoreTokens()) {
          String token=st.nextToken();
          token=fixKeyword(token);
          if (token != null && token.length() > 0 && !token.startsWith(""String_Node_Str"") && !token.startsWith(""String_Node_Str"")) {
            String siString=""String_Node_Str"" + token;
            if (siString.length() > 255)             siString=siString.substring(0,255);
            Locator l=cleanDirtyLocator(new Locator(siString));
            Topic newKeyword=tm.getTopic(l);
            if (newKeyword == null) {
              newKeyword=tm.createTopic();
              newKeyword.setBaseName(token + ""String_Node_Str"");
              newKeyword.setDisplayName(""String_Node_Str"",token);
              newKeyword.addSubjectIdentifier(l);
              newKeyword.addType(keywordClassTopic);
              createTopicCounter++;
              log(""String_Node_Str"" + getTopicName(newKeyword) + ""String_Node_Str"");
            }
            Association a=tm.createAssociation(keywordClassTopic);
            a.addPlayer(newKeyword,keywordClassTopic);
            a.addPlayer(t,work);
            createAssociationCounter++;
          }
        }
      }
      try {
        for (Iterator assos=keywordTopic.getAssociations().iterator(); assos.hasNext(); ) {
          Association a=(Association)assos.next();
          if (a != null)           a.remove();
        }
        keywordTopic.remove();
        splitCounter++;
      }
 catch (      Exception e) {
        log(e);
      }
    }
  }
  log(""String_Node_Str"" + splitCounter + ""String_Node_Str"");
  log(""String_Node_Str"" + createAssociationCounter + ""String_Node_Str"");
  log(""String_Node_Str"" + createTopicCounter + ""String_Node_Str"");
  return tm;
}",0.9969446990528568
117671,"public void info(Object arg0,Throwable arg1){
  if (logLevel >= LOG_INFO)   log.info(prefix + arg0,arg1);
}","public void info(Object arg0,Throwable arg1){
  if (logLevel <= LOG_INFO)   log.info(prefix + arg0,arg1);
}",0.9906542056074766
117672,"/** 
 * Creates new form InfoDialog
 */
public InfoDialog(Wandora wandora){
  super(wandora,true);
  this.history=new StringBuilder();
  this.wandora=wandora;
  initComponents();
  this.setSize(600,300);
  wandora.centerWindow(this);
  textArea.addMouseListener(this);
  textArea.setComponentPopupMenu(getCopyMenu());
  textArea.setText(""String_Node_Str"");
  textArea.setText(""String_Node_Str"");
  iconLabel.setIcon(UIBox.getIcon(""String_Node_Str""));
  setState(EXECUTE);
}","/** 
 * Creates new form InfoDialog
 */
public InfoDialog(Wandora wandora){
  super(wandora,true);
  this.history=new StringBuilder();
  this.wandora=wandora;
  initComponents();
  this.setSize(600,300);
  wandora.centerWindow(this);
  textArea.addMouseListener(this);
  textArea.setComponentPopupMenu(getCopyMenu());
  textArea.setText(""String_Node_Str"");
  textArea.setText(""String_Node_Str"");
  iconLabel.setIcon(UIBox.getIcon(""String_Node_Str""));
}",0.9772972972972972
117673,"public void waitUntilVisible(){
  int c=0;
  do {
    c++;
    try {
      Thread.sleep(40);
    }
 catch (    Exception e) {
    }
    ;
  }
 while (!isVisible() && c < 100);
}","private void waitUntilVisible(){
  int c=0;
  do {
    c++;
    try {
      Thread.sleep(200);
    }
 catch (    Exception e) {
    }
    ;
  }
 while (!isVisible() && c < 20);
}",0.9577464788732394
117674,"@Override public void setState(int state){
  if (this.state == state)   return;
  this.state=state;
switch (state) {
case EXECUTE:
{
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          startTime=System.currentTimeMillis();
          textArea.setText(""String_Node_Str"");
          progressBar.setIndeterminate(true);
          setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          containerPanel.removeAll();
          containerPanel.add(processPanel,BorderLayout.CENTER);
          containerPanel.revalidate();
          forceStop=false;
          open();
        }
      }
);
      waitUntilVisible();
      return;
    }
case WAIT:
{
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        endTime=System.currentTimeMillis();
        try {
          containerPanel.removeAll();
        }
 catch (        Exception e) {
        }
        containerPanel.add(waitPanel,BorderLayout.CENTER);
        String historyString=getHistory();
        logTextPane.setText(historyString);
        logTextPane.setCaretPosition(logTextPane.getDocument().getLength());
        containerPanel.revalidate();
      }
    }
);
    return;
  }
case CLOSE:
{
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      setVisible(false);
      logTextPane.setText(""String_Node_Str"");
      forceStop=false;
    }
  }
);
  return;
}
case INVISIBLE:
{
SwingUtilities.invokeLater(new Runnable(){
  @Override public void run(){
    setVisible(false);
  }
}
);
return;
}
case VISIBLE:
{
open();
waitUntilVisible();
return;
}
}
}","@Override public void setState(int state){
  if (this.state == state)   return;
  this.state=state;
switch (state) {
case EXECUTE:
{
      startTime=System.currentTimeMillis();
      textArea.setText(""String_Node_Str"");
      progressBar.setIndeterminate(true);
      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      containerPanel.removeAll();
      containerPanel.add(processPanel,BorderLayout.CENTER);
      containerPanel.revalidate();
      forceStop=false;
      open();
      waitUntilVisible();
      return;
    }
case WAIT:
{
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        endTime=System.currentTimeMillis();
        try {
          containerPanel.removeAll();
        }
 catch (        Exception e) {
        }
        containerPanel.add(waitPanel,BorderLayout.CENTER);
        String historyString=getHistory();
        logTextPane.setText(historyString);
        logTextPane.setCaretPosition(logTextPane.getDocument().getLength());
        containerPanel.revalidate();
      }
    }
);
    return;
  }
case CLOSE:
{
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      setVisible(false);
      logTextPane.setText(""String_Node_Str"");
      forceStop=false;
    }
  }
);
  return;
}
case INVISIBLE:
{
SwingUtilities.invokeLater(new Runnable(){
  @Override public void run(){
    setVisible(false);
  }
}
);
return;
}
case VISIBLE:
{
open();
waitUntilVisible();
return;
}
}
}",0.9557959814528594
117675,"public void open(){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      setVisible(true);
    }
  }
);
}","private void open(){
  if (!isVisible()) {
    dialogThread=new Thread(){
      @Override public void run(){
        setVisible(true);
      }
    }
;
    dialogThread.start();
  }
}",0.610062893081761
117676,"public WandoraToolLogger getDefaultLogger(){
  if (logger != null)   return logger;
  if (runAdmin != null)   return new InfoDialog(runAdmin);
  return null;
}","public WandoraToolLogger getDefaultLogger(){
  if (logger != null)   return logger;
  if (runAdmin != null) {
    InfoDialog infoDialog=new InfoDialog(runAdmin);
    infoDialog.setState(InfoDialog.EXECUTE);
    return infoDialog;
  }
  return null;
}",0.6699266503667481
117677,"public void stop(){
  if (currentPanel != null)   currentPanel.stop();
}","public void stop(){
  if (currentPanel != null) {
    System.out.println(""String_Node_Str"");
    currentPanel.stop();
  }
}",0.7384615384615385
117678,"public static PreviewWrapper getPreviewWrapper(Wandora wandora){
  return new PreviewWrapper(wandora);
}","public static PreviewWrapper getPreviewWrapper(){
  return new PreviewWrapper();
}",0.8817204301075269
117679,"/** 
 * Creates a new instance of PreviewWrapper
 */
public PreviewWrapper(Wandora admin){
  this.admin=admin;
  this.setLayout(new BorderLayout());
}","/** 
 * Creates a new instance of PreviewWrapper
 */
public PreviewWrapper(){
  this.wandora=Wandora.getWandora();
  this.setLayout(new BorderLayout());
}",0.8618421052631579
117680,"public static boolean canView(String url){
  boolean answer=false;
  if (url != null) {
    if (DataURL.isDataURL(url)) {
      try {
        DataURL dataURL=new DataURL(url);
        String mimeType=dataURL.getMimetype();
        if (mimeType != null) {
          String lowercaseMimeType=mimeType.toLowerCase();
          if (lowercaseMimeType.startsWith(""String_Node_Str"") || lowercaseMimeType.startsWith(""String_Node_Str"") || lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")) {
            answer=true;
          }
        }
      }
 catch (      Exception e) {
      }
    }
 else {
      if (endsWithAny(url.toLowerCase(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
        answer=true;
      }
    }
  }
  return answer && hasJavaFX();
}","public static boolean canView(String url){
  boolean answer=false;
  if (url != null) {
    if (DataURL.isDataURL(url)) {
      try {
        DataURL dataURL=new DataURL(url);
        String mimeType=dataURL.getMimetype();
        if (mimeType != null) {
          String lowercaseMimeType=mimeType.toLowerCase();
          if (lowercaseMimeType.startsWith(""String_Node_Str"") || lowercaseMimeType.startsWith(""String_Node_Str"") || lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")|| lowercaseMimeType.startsWith(""String_Node_Str"")) {
            answer=true;
          }
        }
      }
 catch (      Exception e) {
      }
    }
 else {
      if (endsWithAny(url.toLowerCase(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
        answer=true;
      }
    }
  }
  return answer && hasJavaFX();
}",0.8814298169136879
117681,"@Override public void stop(){
  if (player != null)   player.stop();
}","@Override public void stop(){
  if (player != null) {
    Platform.runLater(new Runnable(){
      @Override public void run(){
        player.stop();
      }
    }
);
  }
}",0.5785123966942148
117682,"public void run(){
}","@Override public void run(){
  player.stop();
}",0.5970149253731343
117683,"@Override public void finish(){
  if (player != null)   player.stop();
}","@Override public void finish(){
  if (player != null) {
    Platform.runLater(new Runnable(){
      @Override public void run(){
        player.stop();
      }
    }
);
  }
}",0.5853658536585366
117684,"private void initialize(){
  fxPanel=new JFXPanel();
  this.setLayout(new BorderLayout());
  this.add(fxPanel,BorderLayout.CENTER);
  Platform.runLater(new Runnable(){
    @Override public void run(){
      Group root=new Group();
      scene=new Scene(root);
      scene.setCursor(Cursor.HAND);
      scene.setFill(Color.rgb(255,255,255,0.0));
      Media media=getMediaFor(mediaUrlString);
      player=getMediaPlayerFor(media);
      if (player != null) {
        slider=new Slider();
        slider.valueChangingProperty().addListener(new ChangeListener<Boolean>(){
          @Override public void changed(          ObservableValue<? extends Boolean> obs,          Boolean wasChanging,          Boolean isNowChanging){
            if (!isNowChanging) {
              player.seek(Duration.seconds(slider.getValue()));
            }
          }
        }
);
        sliderBox=new VBox();
        sliderBox.visibleProperty().set(false);
        sliderBox.getChildren().add(slider);
        mediaView=new MediaView(player);
        root.getChildren().add(mediaView);
        root.getChildren().add(sliderBox);
      }
      fxPanel.setScene(scene);
    }
  }
);
}","private void initialize(){
  fxPanel=new JFXPanel();
  this.setLayout(new BorderLayout());
  this.add(fxPanel,BorderLayout.CENTER);
  Platform.runLater(new Runnable(){
    @Override public void run(){
      Group root=new Group();
      scene=new Scene(root);
      scene.setCursor(Cursor.HAND);
      scene.setFill(Color.rgb(255,255,255,0.0));
      Media media=getMediaFor(mediaUrlString);
      player=getMediaPlayerFor(media);
      if (player != null) {
        slider=new Slider();
        slider.valueChangingProperty().addListener(new ChangeListener<Boolean>(){
          @Override public void changed(          ObservableValue<? extends Boolean> obs,          Boolean wasChanging,          final Boolean isNowChanging){
            if (!isNowChanging) {
              player.seek(Duration.seconds(slider.getValue()));
            }
          }
        }
);
        sliderBox=new VBox();
        sliderBox.visibleProperty().set(false);
        sliderBox.getChildren().add(slider);
        mediaView=new MediaView(player);
        root.getChildren().add(mediaView);
        root.getChildren().add(sliderBox);
      }
      fxPanel.setScene(scene);
    }
  }
);
}",0.997427101200686
117685,"public FXMediaPlayer(String mediaUrlString){
  this.mediaUrlString=mediaUrlString;
  initialize();
}","public FXMediaPlayer(String mediaUrlString){
  Platform.setImplicitExit(false);
  this.mediaUrlString=mediaUrlString;
  initialize();
}",0.851063829787234
117686,"private void openFileChooser(){
  JFileChooser chooser=new JFileChooser();
  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setDialogTitle(""String_Node_Str"");
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    saveFolder=chooser.getCurrentDirectory();
    saveFolderField.setText(saveFolder.getAbsolutePath());
  }
}","private void openFileChooser(){
  JFileChooser chooser=new JFileChooser();
  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setDialogTitle(""String_Node_Str"");
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    saveFolder=chooser.getSelectedFile();
    saveFolderField.setText(saveFolder.getAbsolutePath());
  }
 else   if (saveFolder == null) {
    saveToggle.setSelected(false);
    saveButton.setEnabled(false);
  }
}",0.8527808069792803
117687,"/** 
 * Creates new form PingerPanel
 * @param tm
 */
public PingerPanel(TopicMap tm){
  this.tm=tm;
  isRunning=false;
  try {
    maybeTargetButton=new GetTopicButton();
    maybeSourceButton=new GetTopicButton();
  }
 catch (  Exception e) {
    return;
  }
  initComponents();
  InputVerifier verifier=new InputVerifier(){
    @Override public boolean verify(    JComponent input){
      JFormattedTextField tf=(JFormattedTextField)input;
      int v=Integer.parseInt(tf.getText());
      return v > 0;
    }
  }
;
  yearField.setInputVerifier(verifier);
  monthField.setInputVerifier(verifier);
  dayField.setInputVerifier(verifier);
  hoursField.setInputVerifier(verifier);
  minutesField.setInputVerifier(verifier);
  secondsField.setInputVerifier(verifier);
  delayField.setInputVerifier(verifier);
  toggleExpirationFieldEnabled();
}","/** 
 * Creates new form PingerPanel
 * @param tm
 */
public PingerPanel(TopicMap tm){
  this.tm=tm;
  isRunning=false;
  try {
    maybeTargetButton=new GetTopicButton();
    maybeSourceButton=new GetTopicButton();
  }
 catch (  Exception e) {
    return;
  }
  initComponents();
  InputVerifier verifier=new InputVerifier(){
    @Override public boolean verify(    JComponent input){
      JFormattedTextField tf=(JFormattedTextField)input;
      int v=Integer.parseInt(tf.getText());
      return v > 0;
    }
  }
;
  yearField.setInputVerifier(verifier);
  monthField.setInputVerifier(verifier);
  dayField.setInputVerifier(verifier);
  hoursField.setInputVerifier(verifier);
  minutesField.setInputVerifier(verifier);
  secondsField.setInputVerifier(verifier);
  delayField.setInputVerifier(verifier);
  toggleExpirationFieldEnabled();
  setSetupEnabled(isRunning);
}",0.9824970828471412
117688,"private void saveToggleActionPerformed(java.awt.event.ActionEvent evt){
  boolean selected=saveToggle.isSelected();
  saveFolderField.setEnabled(selected);
  saveButton.setEnabled(selected);
}","private void saveToggleActionPerformed(java.awt.event.ActionEvent evt){
  boolean selected=saveToggle.isSelected();
  saveFolderField.setEnabled(selected);
  saveButton.setEnabled(selected);
  if (selected && saveFolder == null)   openFileChooser();
}",0.8668171557562077
117689,"public void setDetailsText(String text){
  if (text == null)   text=""String_Node_Str"";
  if (!text.isEmpty()) {
    text=text.replace(""String_Node_Str"",""String_Node_Str"");
    text=text.replace(""String_Node_Str"",""String_Node_Str"");
    text=text.replace(""String_Node_Str"",""String_Node_Str"");
    text=""String_Node_Str"" + text + ""String_Node_Str"";
  }
  detailsLabel.setText(text);
  this.setSize(this.getPreferredSize());
}","public void setDetailsText(String text){
  if (text == null)   text=""String_Node_Str"";
  if (!text.isEmpty()) {
    text=text.replace(""String_Node_Str"",""String_Node_Str"");
    text=text.replace(""String_Node_Str"",""String_Node_Str"");
    text=text.replace(""String_Node_Str"",""String_Node_Str"");
    text=""String_Node_Str"" + text + ""String_Node_Str"";
  }
  detailsLabel.setText(text);
  this.setSize(this.getPreferredSize());
  this.repaint();
}",0.9791666666666666
117690,"@Override public boolean setFrom(ConnectorAnchor from){
  ConnectorAnchor oldFromAnchor=getFrom();
  DirectivePanel oldFrom=DirectivePanel.findDirectivePanel(oldFromAnchor.getComponent());
  directiveConnectionRemoved(oldFrom);
  boolean ret=super.setFrom(from);
  if (from == null) {
synchronized (paramAnchors) {
      paramAnchors.remove(info);
      updateParamAnchors();
    }
  }
  return ret;
}","@Override public boolean setFrom(ConnectorAnchor from){
  ConnectorAnchor oldFromAnchor=getFrom();
  DirectivePanel oldFrom=DirectivePanel.findDirectivePanel(oldFromAnchor.getComponent());
  directiveConnectionRemoved(oldFrom);
  boolean ret=super.setFrom(from);
  if (from == null) {
synchronized (paramAnchors) {
      paramAnchors.remove(info);
      updateParamAnchors();
      updateDetailsText();
    }
  }
  return ret;
}",0.9674306393244874
117691,"/** 
 * Sets directive parameters but does not connect connectors, or panel dimensions, only stores the parameters variable.
 * @param params 
 */
public void saveDirectiveParameters(DirectiveParameters params){
  this.directiveParameters=params;
  setDetailsText(buildDetailsText());
}","/** 
 * Sets directive parameters but does not connect connectors, or panel dimensions, only stores the parameters variable.
 * @param params 
 */
public void saveDirectiveParameters(DirectiveParameters params){
  this.directiveParameters=params;
  updateDetailsText();
}",0.9551166965888688
117692,"public ConnectorAnchor connectParamAnchor(ConnectorAnchor from,String ordering){
synchronized (paramAnchors) {
    final JPanel anchorComp=new JPanel();
    final ParamAnchorInfo info=new ParamAnchorInfo(null,anchorComp,ordering);
    ComponentConnectorAnchor anchor=new ComponentConnectorAnchor(anchorComp,ConnectorAnchor.Direction.DOWN,true,false){
      @Override public boolean setFrom(      ConnectorAnchor from){
        ConnectorAnchor oldFromAnchor=getFrom();
        DirectivePanel oldFrom=DirectivePanel.findDirectivePanel(oldFromAnchor.getComponent());
        directiveConnectionRemoved(oldFrom);
        boolean ret=super.setFrom(from);
        if (from == null) {
synchronized (paramAnchors) {
            paramAnchors.remove(info);
            updateParamAnchors();
          }
        }
        return ret;
      }
    }
;
    info.anchor=anchor;
    paramAnchors.add(info);
    from.setTo(anchor);
    updateParamAnchors();
    return anchor;
  }
}","public ConnectorAnchor connectParamAnchor(ConnectorAnchor from,String ordering){
synchronized (paramAnchors) {
    final JPanel anchorComp=new JPanel();
    final ParamAnchorInfo info=new ParamAnchorInfo(null,anchorComp,ordering);
    ComponentConnectorAnchor anchor=new ComponentConnectorAnchor(anchorComp,ConnectorAnchor.Direction.DOWN,true,false){
      @Override public boolean setFrom(      ConnectorAnchor from){
        ConnectorAnchor oldFromAnchor=getFrom();
        DirectivePanel oldFrom=DirectivePanel.findDirectivePanel(oldFromAnchor.getComponent());
        directiveConnectionRemoved(oldFrom);
        boolean ret=super.setFrom(from);
        if (from == null) {
synchronized (paramAnchors) {
            paramAnchors.remove(info);
            updateParamAnchors();
            updateDetailsText();
          }
        }
        return ret;
      }
    }
;
    info.anchor=anchor;
    paramAnchors.add(info);
    from.setTo(anchor);
    updateParamAnchors();
    getEditor().applyInspectorChanges();
    updateDetailsText();
    return anchor;
  }
}",0.9512074913750616
117693,"public void openStoredQuery(StoredQuery query){
  HashMap<String,DirectivePanel> directiveMap=new HashMap<>();
  for (  DirectiveParameters params : query.directiveParameters) {
    try {
      Class cls=Class.forName(params.cls);
      DirectivePanel panel=null;
      if (!Directive.class.isAssignableFrom(cls))       throw new ClassCastException(""String_Node_Str"");
      if (cls.equals(FinalResultDirective.class)) {
        panel=finalResultPanel;
      }
 else {
        DirectiveUIHints hints=DirectiveUIHints.getDirectiveUIHints(cls);
        panel=addDirective(hints);
      }
      directiveMap.put(params.id,panel);
    }
 catch (    ClassNotFoundException|ClassCastException e) {
      Wandora.getWandora().handleError(e);
    }
  }
  for (  DirectiveParameters params : query.directiveParameters) {
    params.resolveDirectiveValues(directiveMap);
  }
  for (  DirectiveParameters params : query.directiveParameters) {
    DirectivePanel panel=directiveMap.get(params.id);
    panel.setDirectiveParams(params);
  }
}","public void openStoredQuery(StoredQuery query){
  HashMap<String,DirectivePanel> directiveMap=new HashMap<>();
  for (  DirectiveParameters params : query.directiveParameters) {
    try {
      Class cls=Class.forName(params.cls);
      DirectivePanel panel=null;
      if (!Directive.class.isAssignableFrom(cls))       throw new ClassCastException(""String_Node_Str"");
      if (cls.equals(FinalResultDirective.class)) {
        panel=finalResultPanel;
      }
 else {
        DirectiveUIHints hints=DirectiveUIHints.getDirectiveUIHints(cls);
        panel=addDirective(hints);
      }
      directiveMap.put(params.id,panel);
    }
 catch (    ClassNotFoundException|ClassCastException e) {
      Wandora.getWandora().handleError(e);
    }
  }
  for (  DirectiveParameters params : query.directiveParameters) {
    params.resolveDirectiveValues(directiveMap);
  }
  for (  DirectiveParameters params : query.directiveParameters) {
    DirectivePanel panel=directiveMap.get(params.id);
    panel.setDirectiveParams(params);
  }
  updatePanelSize();
}",0.98989898989899
117694,"public void panelMoved(DirectivePanel panel){
  Rectangle rect=panel.getBounds();
  if (rect.x < 0) {
    changePanelSize(queryGraphPanel.getWidth() - rect.x,queryGraphPanel.getHeight(),-rect.x,0);
    rect=panel.getBounds();
  }
  if (rect.y < 0) {
    changePanelSize(queryGraphPanel.getWidth(),queryGraphPanel.getHeight() - rect.y,0,-rect.y);
    rect=panel.getBounds();
  }
  int width=Math.max(rect.x + rect.width,queryGraphPanel.getWidth());
  int height=Math.max(rect.y + rect.height,queryGraphPanel.getHeight());
  if (width != this.getWidth() || height != this.getHeight()) {
    changePanelSize(width,height,0,0);
  }
  queryGraphPanel.invalidate();
  queryGraphPanel.repaint();
}","public void panelMoved(DirectivePanel panel){
  Rectangle rect=panel.getBounds();
  if (rect.x < 0) {
    changePanelSize(queryGraphPanel.getWidth() - rect.x,queryGraphPanel.getHeight(),-rect.x,0);
    rect=panel.getBounds();
  }
  if (rect.y < 0) {
    changePanelSize(queryGraphPanel.getWidth(),queryGraphPanel.getHeight() - rect.y,0,-rect.y);
    rect=panel.getBounds();
  }
  updatePanelSize();
  queryGraphPanel.invalidate();
  queryGraphPanel.repaint();
}",0.6811468288444831
117695,"@Override public boolean setFrom(ConnectorAnchor from){
  boolean ret=super.setFrom(from);
  if (from == null) {
synchronized (paramAnchors) {
      paramAnchors.remove(info);
      updateParamAnchors();
    }
  }
  return ret;
}","@Override public boolean setFrom(ConnectorAnchor from){
  ConnectorAnchor oldFromAnchor=getFrom();
  DirectivePanel oldFrom=DirectivePanel.findDirectivePanel(oldFromAnchor.getComponent());
  directiveConnectionRemoved(oldFrom);
  boolean ret=super.setFrom(from);
  if (from == null) {
synchronized (paramAnchors) {
      paramAnchors.remove(info);
      updateParamAnchors();
    }
  }
  return ret;
}",0.726984126984127
117696,"public ConnectorAnchor connectParamAnchor(ConnectorAnchor from,String ordering){
synchronized (paramAnchors) {
    final JPanel anchorComp=new JPanel();
    final ParamAnchorInfo info=new ParamAnchorInfo(null,anchorComp,ordering);
    ComponentConnectorAnchor anchor=new ComponentConnectorAnchor(anchorComp,ConnectorAnchor.Direction.DOWN,true,false){
      @Override public boolean setFrom(      ConnectorAnchor from){
        boolean ret=super.setFrom(from);
        if (from == null) {
synchronized (paramAnchors) {
            paramAnchors.remove(info);
            updateParamAnchors();
          }
        }
        return ret;
      }
    }
;
    info.anchor=anchor;
    paramAnchors.add(info);
    from.setTo(anchor);
    updateParamAnchors();
    return anchor;
  }
}","public ConnectorAnchor connectParamAnchor(ConnectorAnchor from,String ordering){
synchronized (paramAnchors) {
    final JPanel anchorComp=new JPanel();
    final ParamAnchorInfo info=new ParamAnchorInfo(null,anchorComp,ordering);
    ComponentConnectorAnchor anchor=new ComponentConnectorAnchor(anchorComp,ConnectorAnchor.Direction.DOWN,true,false){
      @Override public boolean setFrom(      ConnectorAnchor from){
        ConnectorAnchor oldFromAnchor=getFrom();
        DirectivePanel oldFrom=DirectivePanel.findDirectivePanel(oldFromAnchor.getComponent());
        directiveConnectionRemoved(oldFrom);
        boolean ret=super.setFrom(from);
        if (from == null) {
synchronized (paramAnchors) {
            paramAnchors.remove(info);
            updateParamAnchors();
          }
        }
        return ret;
      }
    }
;
    info.anchor=anchor;
    paramAnchors.add(info);
    from.setTo(anchor);
    updateParamAnchors();
    return anchor;
  }
}",0.8908045977011494
117697,"/** 
 * Creates new form DirectiveParameterPanel
 */
public DirectiveParameterPanel(Parameter parameter,DirectivePanel panel){
  super(parameter,panel);
  initComponents();
  disconnectButton.setVisible(false);
  connectorAnchor=new ComponentConnectorAnchor(directiveAnchor,Direction.RIGHT,true,false);
  DnDTools.addDropTargetHandler(directiveAnchor,DnDTools.directiveHintsDataFlavor,new DnDTools.DropTargetCallback<DirectiveUIHints>(){
    @Override public boolean callback(    JComponent component,    DirectiveUIHints hints,    TransferHandler.TransferSupport support){
      if (directiveType != null && !directiveType.isAssignableFrom(hints.getClass()))       return false;
      DirectivePanel directivePanel=getDirectivePanel();
      QueryEditorComponent editor=directivePanel.getEditor();
      DirectivePanel panel=editor.addDirective(hints);
      Point point=support.getDropLocation().getDropPoint();
      Rectangle rect=directivePanel.getBounds();
      panel.setBounds(rect.x + rect.width + 10,rect.y,panel.getWidth(),panel.getHeight());
      connectValue(panel);
      return true;
    }
  }
);
  DnDTools.addDropTargetHandler(directiveAnchor,DnDTools.directivePanelDataFlavor,new DnDTools.DropTargetCallback<DirectivePanel>(){
    @Override public boolean callback(    JComponent component,    DirectivePanel o,    TransferHandler.TransferSupport support){
      DirectivePanel directivePanel=getDirectivePanel();
      if (o == directivePanel)       return false;
      connectValue(o);
      return true;
    }
  }
);
}","/** 
 * Creates new form DirectiveParameterPanel
 */
public DirectiveParameterPanel(Parameter parameter,DirectivePanel panel){
  super(parameter,panel);
  initComponents();
  disconnectButton.setVisible(false);
  DnDTools.addDropTargetHandler(directiveAnchor,DnDTools.directiveHintsDataFlavor,new DnDTools.DropTargetCallback<DirectiveUIHints>(){
    @Override public boolean callback(    JComponent component,    DirectiveUIHints hints,    TransferHandler.TransferSupport support){
      if (directiveType != null && !directiveType.isAssignableFrom(hints.getClass()))       return false;
      DirectivePanel directivePanel=getDirectivePanel();
      QueryEditorComponent editor=directivePanel.getEditor();
      DirectivePanel panel=editor.addDirective(hints);
      Point point=support.getDropLocation().getDropPoint();
      Rectangle rect=directivePanel.getBounds();
      panel.setBounds(rect.x + rect.width + 10,rect.y,panel.getWidth(),panel.getHeight());
      connectValue(panel);
      return true;
    }
  }
);
  DnDTools.addDropTargetHandler(directiveAnchor,DnDTools.directivePanelDataFlavor,new DnDTools.DropTargetCallback<DirectivePanel>(){
    @Override public boolean callback(    JComponent component,    DirectivePanel o,    TransferHandler.TransferSupport support){
      DirectivePanel directivePanel=getDirectivePanel();
      if (o == directivePanel)       return false;
      connectValue(o);
      return true;
    }
  }
);
}",0.9692101740294512
117698,"public String buildScript(){
  applyInspectorChanges();
  DirectivePanel p=getRootPanel();
  if (p == null)   return null;
 else   return p.buildScript();
}","public String buildScript(){
  applyInspectorChanges();
  DirectivePanel p=getRootPanel();
  if (p == null)   return null;
 else   return ""String_Node_Str"" + p.buildScript();
}",0.9397590361445785
117699,"public static String debugStringInner(Directive directive,String indent){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  sb.append(""String_Node_Str"" + indent);
  sb.append(directive.debugString(indent + ""String_Node_Str""));
  sb.append(""String_Node_Str"" + indent);
  return sb.toString();
}","public static String debugStringInner(Directive directive,String indent){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"" + indent);
  if (directive == null)   sb.append(""String_Node_Str"");
 else   sb.append(directive.debugString(indent + ""String_Node_Str""));
  sb.append(""String_Node_Str"" + indent);
  return sb.toString();
}",0.3789473684210526
117700,"/** 
 * Creates new form SearchTopicsFrame
 */
public SearchTopicsFrame(){
  Wandora wandora=Wandora.getWandora();
  setAlwaysOnTop(false);
  setTitle(""String_Node_Str"");
  initComponents();
  searchPanels=new SearchTopicPanel();
  searchPanels.setUseResultScrollPanes(true);
  searchPanels.init();
  containerPanel.add(searchPanels.getGui(),BorderLayout.CENTER);
  setSize(850,600);
  if (wandora != null) {
    setIconImages(wandora.wandoraIcons);
    wandora.centerWindow(this);
  }
}","/** 
 * Creates new form SearchTopicsFrame
 */
public SearchTopicsFrame(){
  super(Wandora.getWandora(),false);
  Wandora wandora=Wandora.getWandora();
  setAlwaysOnTop(false);
  setTitle(""String_Node_Str"");
  initComponents();
  searchPanels=new SearchTopicPanel();
  searchPanels.setUseResultScrollPanes(true);
  searchPanels.init();
  containerPanel.add(searchPanels.getGui(),BorderLayout.CENTER);
  setSize(850,600);
  if (wandora != null) {
    setIconImages(wandora.wandoraIcons);
    wandora.centerWindow(this);
  }
}",0.963402571711177
117701,"protected JSONObject getRequestJSON(HttpServletRequest request) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(request.getInputStream(),""String_Node_Str""));
  StringBuilder sb=new StringBuilder();
  String str;
  while ((str=in.readLine()) != null) {
    sb.append(str);
  }
  in.close();
  if (str != null && str.length() > 0) {
    try {
      JSONObject requestJSON=new JSONObject(sb.toString());
      return requestJSON;
    }
 catch (    JSONException ex) {
      ex.printStackTrace();
    }
  }
  return null;
}","protected JSONObject getRequestJSON(HttpServletRequest request) throws IOException {
  BufferedReader in=new BufferedReader(new InputStreamReader(request.getInputStream(),""String_Node_Str""));
  StringBuilder sb=new StringBuilder();
  String str;
  while ((str=in.readLine()) != null) {
    sb.append(str);
  }
  in.close();
  if (sb.length() > 0) {
    try {
      JSONObject requestJSON=new JSONObject(sb.toString());
      return requestJSON;
    }
 catch (    JSONException ex) {
      ex.printStackTrace();
    }
  }
  return null;
}",0.98348623853211
117702,"@JsonIgnore private static String getScriptValue(Parameter parameter,Object value,boolean multipleComponent){
  if (value == null)   return ""String_Node_Str"";
  if (!multipleComponent && parameter.isMultiple()) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(parameter.getType().getName()).append(""String_Node_Str"");
    for (int i=0; i < Array.getLength(value); i++) {
      Object v=Array.get(value,i);
      sb.append(""String_Node_Str"");
      sb.append(getScriptValue(parameter,v,true));
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
 else   if (parameter.getType().equals(String.class))   return escapeString(value);
 else   if (Number.class.isAssignableFrom(parameter.getType()))   return value.toString();
 else   if (Topic.class.isAssignableFrom(parameter.getType())) {
    try {
      return escapeString(((Topic)value).getOneSubjectIdentifier());
    }
 catch (    TopicMapException tme) {
      Wandora.getWandora().handleError(tme);
      return null;
    }
  }
 else   if (TopicOperand.class.isAssignableFrom(parameter.getType())) {
    if (value instanceof DirectivePanel)     return ""String_Node_Str"" + ((DirectivePanel)value).buildScript() + ""String_Node_Str"";
 else     if (value instanceof Topic) {
      try {
        return ""String_Node_Str"" + escapeString(((Topic)value).getOneSubjectIdentifier()) + ""String_Node_Str"";
      }
 catch (      TopicMapException tme) {
        Wandora.getWandora().handleError(tme);
        return null;
      }
    }
 else     return escapeString(value);
  }
 else   if (Operand.class.isAssignableFrom(parameter.getType())) {
    if (value instanceof DirectivePanel)     return ""String_Node_Str"" + ((DirectivePanel)value).buildScript() + ""String_Node_Str"";
 else     return ""String_Node_Str"" + escapeString(value) + ""String_Node_Str"";
  }
 else   if (Directive.class.isAssignableFrom(parameter.getType())) {
    return ((DirectivePanel)value).buildScript();
  }
 else   throw new RuntimeException(""String_Node_Str"");
}","@JsonIgnore private static String getScriptValue(Parameter parameter,Object value,boolean multipleComponent){
  if (value == null)   return ""String_Node_Str"";
  if (!multipleComponent && parameter.isMultiple()) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"").append(parameter.getType().getName()).append(""String_Node_Str"");
    for (int i=0; i < Array.getLength(value); i++) {
      Object v=Array.get(value,i);
      sb.append(""String_Node_Str"");
      sb.append(getScriptValue(parameter,v,true));
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
 else   if (parameter.getType().equals(String.class))   return escapeString(value);
 else   if (Number.class.isAssignableFrom(parameter.getType()))   return value.toString();
 else   if (Topic.class.isAssignableFrom(parameter.getType())) {
    try {
      return escapeString(((Topic)value).getOneSubjectIdentifier());
    }
 catch (    TopicMapException tme) {
      Wandora.getWandora().handleError(tme);
      return null;
    }
  }
 else   if (TopicOperand.class.isAssignableFrom(parameter.getType())) {
    if (value instanceof DirectivePanel)     return ""String_Node_Str"" + ((DirectivePanel)value).buildScript() + ""String_Node_Str"";
 else     if (value instanceof Topic) {
      try {
        return ""String_Node_Str"" + escapeString(((Topic)value).getOneSubjectIdentifier()) + ""String_Node_Str"";
      }
 catch (      TopicMapException tme) {
        Wandora.getWandora().handleError(tme);
        return null;
      }
    }
 else     return ""String_Node_Str"" + escapeString(value) + ""String_Node_Str"";
  }
 else   if (Operand.class.isAssignableFrom(parameter.getType())) {
    if (value instanceof DirectivePanel)     return ""String_Node_Str"" + ((DirectivePanel)value).buildScript() + ""String_Node_Str"";
 else     return ""String_Node_Str"" + escapeString(value) + ""String_Node_Str"";
  }
 else   if (Directive.class.isAssignableFrom(parameter.getType())) {
    return ((DirectivePanel)value).buildScript();
  }
 else   throw new RuntimeException(""String_Node_Str"");
}",0.9813039309683604
117703,"protected void populateDirectiveList(){
  DefaultTreeModel treeModel=(DefaultTreeModel)directivesTree.getModel();
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(""String_Node_Str"");
  DefaultMutableTreeNode other=new DefaultMutableTreeNode(""String_Node_Str"");
  DirectiveManager directiveManager=DirectiveManager.getDirectiveManager();
  List<Class<? extends Directive>> directives=directiveManager.getDirectives();
  List<DirectiveUIHints> hints=new ArrayList<>();
  for (  Class<? extends Directive> dir : directives) {
    DirectiveUIHints h=DirectiveUIHints.getDirectiveUIHints(dir);
    hints.add(h);
  }
  Collections.sort(hints,new Comparator<DirectiveUIHints>(){
    @Override public int compare(    DirectiveUIHints o1,    DirectiveUIHints o2){
      String l1=o1.getLabel();
      String l2=o2.getLabel();
      if (l1 == null && l2 != null)       return -1;
 else       if (l1 != null && l2 == null)       return 1;
 else       if (l1 == null && l2 == null)       return 0;
 else       return l1.compareTo(l2);
    }
  }
);
  ArrayList<DefaultMutableTreeNode> categoryNodes=new ArrayList<>();
  categoryNodes.add(other);
  for (  DirectiveUIHints h : hints) {
    DefaultMutableTreeNode parent=other;
    String category=h.getCategory();
    if (category != null && category.trim().length() > 0 && !category.trim().equalsIgnoreCase(""String_Node_Str"")) {
      category=category.trim();
      for (      DefaultMutableTreeNode n : categoryNodes) {
        String name=n.toString();
        if (name != null && name.equalsIgnoreCase(category)) {
          parent=n;
          break;
        }
      }
      if (parent == other) {
        parent=new DefaultMutableTreeNode(category);
        categoryNodes.add(parent);
      }
    }
    DefaultMutableTreeNode node=new DefaultMutableTreeNode(h);
    parent.add(node);
  }
  Collections.sort(categoryNodes,new Comparator<DefaultMutableTreeNode>(){
    @Override public int compare(    DefaultMutableTreeNode o1,    DefaultMutableTreeNode o2){
      return o1.toString().compareTo(o2.toString());
    }
  }
);
  for (  DefaultMutableTreeNode n : categoryNodes) {
    root.add(n);
  }
  treeModel.setRoot(root);
}","protected void populateDirectiveList(){
  DefaultTreeModel treeModel=(DefaultTreeModel)directivesTree.getModel();
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(""String_Node_Str"");
  DefaultMutableTreeNode other=new DefaultMutableTreeNode(""String_Node_Str"");
  DirectiveManager directiveManager=DirectiveManager.getDirectiveManager();
  List<Class<? extends Directive>> directives=directiveManager.getDirectives();
  List<DirectiveUIHints> hints=new ArrayList<>();
  for (  Class<? extends Directive> dir : directives) {
    DirectiveUIHints h=DirectiveUIHints.getDirectiveUIHints(dir);
    hints.add(h);
  }
  Collections.sort(hints,new Comparator<DirectiveUIHints>(){
    @Override public int compare(    DirectiveUIHints o1,    DirectiveUIHints o2){
      String l1=o1.getLabel();
      String l2=o2.getLabel();
      if (l1 == null && l2 != null)       return -1;
 else       if (l1 != null && l2 == null)       return 1;
 else       if (l1 == null && l2 == null)       return 0;
 else       return l1.compareTo(l2);
    }
  }
);
  ArrayList<DefaultMutableTreeNode> categoryNodes=new ArrayList<>();
  categoryNodes.add(other);
  for (  DirectiveUIHints h : hints) {
    boolean added=false;
    String categoryAll=h.getCategory();
    if (categoryAll == null)     categoryAll=""String_Node_Str"";
    String[] categories=categoryAll.split(""String_Node_Str"");
    for (    String category : categories) {
      DefaultMutableTreeNode parent=null;
      if (category != null && category.trim().length() > 0) {
        category=category.trim();
        if (!category.equalsIgnoreCase(""String_Node_Str"")) {
          for (          DefaultMutableTreeNode n : categoryNodes) {
            String name=n.toString();
            if (name != null && name.equalsIgnoreCase(category)) {
              parent=n;
              break;
            }
          }
          if (parent == null) {
            parent=new DefaultMutableTreeNode(category);
            categoryNodes.add(parent);
          }
        }
      }
      if (parent != null) {
        DefaultMutableTreeNode node=new DefaultMutableTreeNode(h);
        parent.add(node);
        added=true;
      }
    }
    if (!added) {
      DefaultMutableTreeNode node=new DefaultMutableTreeNode(h);
      other.add(node);
    }
  }
  Collections.sort(categoryNodes,new Comparator<DefaultMutableTreeNode>(){
    @Override public int compare(    DefaultMutableTreeNode o1,    DefaultMutableTreeNode o2){
      return o1.toString().compareTo(o2.toString());
    }
  }
);
  for (  DefaultMutableTreeNode n : categoryNodes) {
    root.add(n);
  }
  treeModel.setRoot(root);
}",0.6998334721065779
117704,"@Override public synchronized void setValue(Object o){
  for (  Row row : rows) {
    row.panel.disconnect();
  }
  parametersPanel.removeAll();
  rows.clear();
  Object[] a=(Object[])o;
  for (  Object ao : a) {
    addParameter();
    Row row=rows.get(rows.size() - 1);
    row.panel.setValue(ao);
  }
}","@Override public synchronized void setValue(Object o){
  for (  Row row : rows) {
    row.panel.disconnect();
  }
  parametersPanel.removeAll();
  rows.clear();
  if (o != null) {
    Object[] a=(Object[])o;
    for (    Object ao : a) {
      addParameter();
      Row row=rows.get(rows.size() - 1);
      row.panel.setValue(ao);
    }
  }
}",0.9428129829984544
117705,"public static Addon[] getStandardAddonHints(Addon[] extras){
  ArrayList<Addon> addons=new ArrayList<Addon>();
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(String.class,false,""String_Node_Str""),new Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(String.class,true,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(Directive.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(TopicOperand.class,false,""String_Node_Str""),new Parameter(String.class,false,""String_Node_Str""),new Parameter(TopicOperand.class,false,""String_Node_Str"")},""String_Node_Str""));
  if (extras != null && extras.length > 0) {
    for (int i=0; i < extras.length; i++) {
      addons.add(extras[i]);
    }
  }
  return addons.toArray(new Addon[addons.size()]);
}","public static Addon[] getStandardAddonHints(Addon[] extras){
  ArrayList<Addon> addons=new ArrayList<Addon>();
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(String.class,false,""String_Node_Str""),new Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(String.class,true,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(Directive.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(Operand.class,false,""String_Node_Str""),new Parameter(String.class,false,""String_Node_Str""),new Parameter(Operand.class,false,""String_Node_Str"")},""String_Node_Str""));
  addons.add(new Addon(""String_Node_Str"",new Parameter[]{new Parameter(TopicOperand.class,false,""String_Node_Str""),new Parameter(String.class,false,""String_Node_Str""),new Parameter(TopicOperand.class,false,""String_Node_Str"")},""String_Node_Str""));
  if (extras != null && extras.length > 0) {
    for (int i=0; i < extras.length; i++) {
      addons.add(extras[i]);
    }
  }
  return addons.toArray(new Addon[addons.size()]);
}",0.9132186012449652
117706,"@Override public DirectiveUIHints getUIHints(){
  DirectiveUIHints ret=new DirectiveUIHints(Regex.class,new DirectiveUIHints.Constructor[]{new DirectiveUIHints.Constructor(new DirectiveUIHints.Parameter[]{new DirectiveUIHints.Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str"")},Directive.getStandardAddonHints(),""String_Node_Str"",""String_Node_Str"");
  return ret;
}","@Override public DirectiveUIHints getUIHints(){
  DirectiveUIHints ret=new DirectiveUIHints(Regex.class,new DirectiveUIHints.Constructor[]{new DirectiveUIHints.Constructor(new DirectiveUIHints.Parameter[]{new DirectiveUIHints.Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str""),new DirectiveUIHints.Constructor(new DirectiveUIHints.Parameter[]{new DirectiveUIHints.Parameter(String.class,false,""String_Node_Str""),new DirectiveUIHints.Parameter(Integer.class,false,""String_Node_Str"")},""String_Node_Str""),new DirectiveUIHints.Constructor(new DirectiveUIHints.Parameter[]{new DirectiveUIHints.Parameter(String.class,false,""String_Node_Str""),new DirectiveUIHints.Parameter(String.class,false,""String_Node_Str"")},""String_Node_Str""),new DirectiveUIHints.Constructor(new DirectiveUIHints.Parameter[]{new DirectiveUIHints.Parameter(Operand.class,false,""String_Node_Str""),new DirectiveUIHints.Parameter(Operand.class,false,""String_Node_Str""),new DirectiveUIHints.Parameter(Integer.class,false,""String_Node_Str"")},""String_Node_Str"")},Directive.getStandardAddonHints(),""String_Node_Str"",""String_Node_Str"");
  return ret;
}",0.5062955599734924
117707,"@JsonIgnore private static String getScriptValue(Parameter parameter,Object value,boolean multipleComponent){
  if (value == null)   return ""String_Node_Str"";
  if (!multipleComponent && parameter.isMultiple()) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(parameter.getType().getSimpleName());
    sb.append(""String_Node_Str"");
    boolean first=true;
    for (int i=0; i < Array.getLength(value); i++) {
      if (!first)       sb.append(""String_Node_Str"");
 else       first=false;
      Object v=Array.get(value,i);
      sb.append(getScriptValue(parameter,v,true));
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
 else   if (parameter.getType().equals(String.class))   return ""String_Node_Str"" + value + ""String_Node_Str"";
 else   if (Number.class.isAssignableFrom(parameter.getType()))   return value.toString();
 else   if (Topic.class.isAssignableFrom(parameter.getType())) {
    try {
      return ""String_Node_Str"" + (((Topic)value).getOneSubjectIdentifier()) + ""String_Node_Str"";
    }
 catch (    TopicMapException tme) {
      Wandora.getWandora().handleError(tme);
      return null;
    }
  }
 else   if (Directive.class.isAssignableFrom(parameter.getType())) {
    return ((DirectivePanel)value).buildScript();
  }
 else   throw new RuntimeException(""String_Node_Str"");
}","@JsonIgnore private static String getScriptValue(Parameter parameter,Object value,boolean multipleComponent){
  if (value == null)   return ""String_Node_Str"";
  if (!multipleComponent && parameter.isMultiple()) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(parameter.getType().getSimpleName());
    sb.append(""String_Node_Str"");
    boolean first=true;
    for (int i=0; i < Array.getLength(value); i++) {
      if (!first)       sb.append(""String_Node_Str"");
 else       first=false;
      Object v=Array.get(value,i);
      sb.append(getScriptValue(parameter,v,true));
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
 else   if (parameter.getType().equals(String.class))   return escapeString(value);
 else   if (Number.class.isAssignableFrom(parameter.getType()))   return value.toString();
 else   if (Topic.class.isAssignableFrom(parameter.getType())) {
    try {
      return escapeString(((Topic)value).getOneSubjectIdentifier());
    }
 catch (    TopicMapException tme) {
      Wandora.getWandora().handleError(tme);
      return null;
    }
  }
 else   if (TopicOperand.class.isAssignableFrom(parameter.getType())) {
    if (value instanceof DirectivePanel)     return ((DirectivePanel)value).buildScript();
 else     if (value instanceof Topic) {
      try {
        return escapeString(((Topic)value).getOneSubjectIdentifier());
      }
 catch (      TopicMapException tme) {
        Wandora.getWandora().handleError(tme);
        return null;
      }
    }
 else     return escapeString(value);
  }
 else   if (Operand.class.isAssignableFrom(parameter.getType())) {
    if (value instanceof DirectivePanel)     return ((DirectivePanel)value).buildScript();
 else     return escapeString(value);
  }
 else   if (Directive.class.isAssignableFrom(parameter.getType())) {
    return ((DirectivePanel)value).buildScript();
  }
 else   throw new RuntimeException(""String_Node_Str"");
}",0.4633484162895928
117708,"public void save(String name){
  QueryEditorComponent graph=findGraph();
  StoredQuery query=graph.getStoredQuery();
  if (query == null)   return;
  query.name=name;
synchronized (storedQueries) {
    boolean saved=false;
    for (int i=0; i < storedQueries.size(); i++) {
      StoredQuery q=storedQueries.get(i);
      if (q.name != null && q.name.equals(name)) {
        saved=true;
        storedQueries.set(i,query);
        break;
      }
    }
    if (!saved) {
      storedQueries.add(query);
      DefaultListModel model=(DefaultListModel)queryList.getModel();
      model.addElement(query);
    }
  }
  writeQueries(Wandora.getWandora().getOptions());
}","public void save(String name){
  QueryEditorComponent graph=findGraph();
  StoredQuery query=graph.getStoredQuery();
  if (query == null)   return;
  query.name=name;
synchronized (storedQueries) {
    boolean saved=false;
    for (int i=0; i < storedQueries.size(); i++) {
      StoredQuery q=storedQueries.get(i);
      if (q.name != null && q.name.equals(name)) {
        saved=true;
        storedQueries.set(i,query);
        break;
      }
    }
    if (!saved) {
      storedQueries.add(query);
      DefaultListModel model=(DefaultListModel)queryList.getModel();
      model.addElement(query);
    }
  }
  writeQueries(Wandora.getWandora().getOptions());
  readQueries(Wandora.getWandora().getOptions());
}",0.9637155297532656
117709,"private Topic parseAccount(JSONObject account,HashMap<String,Topic> thingTypes,TopicMap tm) throws JSONException, TopicMapException {
  if (forceStop()) {
    return null;
  }
  JSONObject accountData=account.getJSONObject(""String_Node_Str"");
  String kind=account.getString(""String_Node_Str"");
  String id=accountData.getString(""String_Node_Str"");
  log(""String_Node_Str"" + id);
  Topic accountTopic=getOrCreateTopic(tm,SI_ROOT + id);
  accountTopic.setDisplayName(""String_Node_Str"",id);
  accountTopic.setBaseName(id);
  addAccountOccurenceData(tm,accountData,accountTopic);
  accountTopic.addType(thingTypes.get(kind));
  if (CRAWL_SETTINGS.get(""String_Node_Str"")) {
    ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
      @Override public void run(      HttpResponse<JsonNode> response){
        try {
          JSONObject respObj=response.getBody().getObject();
          parseThing(respObj,tm,thingTypes);
        }
 catch (        Exception e) {
        }
      }
    }
;
    requester.doRequest(Unirest.get(apiRoot + ""String_Node_Str"" + id+ ""String_Node_Str""),callback);
  }
  if (CRAWL_SETTINGS.get(""String_Node_Str"")) {
    ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
      @Override public void run(      HttpResponse<JsonNode> response){
        try {
          JSONObject respObj=response.getBody().getObject();
          parseThing(respObj,tm,thingTypes);
        }
 catch (        Exception e) {
        }
      }
    }
;
    requester.doRequest(Unirest.get(apiRoot + ""String_Node_Str"" + id+ ""String_Node_Str""),callback);
  }
  return accountTopic;
}","private Topic parseAccount(JSONObject account,HashMap<String,Topic> thingTypes,TopicMap tm) throws JSONException, TopicMapException {
  if (forceStop()) {
    return null;
  }
  JSONObject accountData=account.getJSONObject(""String_Node_Str"");
  String kind=account.getString(""String_Node_Str"");
  String id=accountData.getString(""String_Node_Str"");
  log(""String_Node_Str"" + id);
  Topic accountTopic=getOrCreateTopic(tm,SI_ROOT + id);
  accountTopic.setDisplayName(""String_Node_Str"",id);
  accountTopic.setBaseName(id);
  addAccountOccurenceData(tm,accountData,accountTopic);
  accountTopic.addType(thingTypes.get(kind));
  if (CRAWL_SETTINGS.get(""String_Node_Str"")) {
    ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
      @Override public void run(      HttpResponse<JsonNode> response){
        try {
          JSONObject respObj=response.getBody().getObject();
          parseThing(respObj,tm,thingTypes);
        }
 catch (        Exception e) {
          log(e.getMessage());
        }
      }
      @Override protected void error(      Exception e,      String body){
        log(e.getMessage());
        if (body != null) {
          log(""String_Node_Str"");
          log(body);
        }
      }
    }
;
    requester.doRequest(Unirest.get(apiRoot + ""String_Node_Str"" + id+ ""String_Node_Str""),callback);
  }
  if (CRAWL_SETTINGS.get(""String_Node_Str"")) {
    ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
      @Override public void run(      HttpResponse<JsonNode> response){
        try {
          JSONObject respObj=response.getBody().getObject();
          parseThing(respObj,tm,thingTypes);
        }
 catch (        Exception e) {
          log(e.getMessage());
        }
      }
      @Override protected void error(      Exception e,      String body){
        log(e.getMessage());
        if (body != null) {
          log(""String_Node_Str"");
          log(body);
        }
      }
    }
;
    requester.doRequest(Unirest.get(apiRoot + ""String_Node_Str"" + id+ ""String_Node_Str""),callback);
  }
  return accountTopic;
}",0.8734584450402145
117710,"private void parseMore(JSONObject commentData,JSONObject child,TopicMap tm,HashMap<String,Topic> thingTypes) throws JSONException, TopicMapException {
  if (forceStop()) {
    return;
  }
  String id=commentData.getString(""String_Node_Str"");
  String link_id=commentData.getString(""String_Node_Str"");
  StringBuilder childString=new StringBuilder();
  JSONArray children=child.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
  int count=children.length();
  for (int i=0; i < count; i++) {
    childString.append(children.getString(i));
    if (i < count - 1) {
      childString.append(""String_Node_Str"");
    }
  }
  MultipartBody r=Unirest.post(apiRoot + ""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",uaString).field(""String_Node_Str"",""String_Node_Str"").field(""String_Node_Str"",id).field(""String_Node_Str"",link_id).field(""String_Node_Str"",childString.toString());
  ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
    @Override public void run(    HttpResponse<JsonNode> response){
      try {
        JSONObject respJSON=response.getBody().getObject();
        if (respJSON.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"").length() == 0) {
          JSONArray things=respJSON.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
          for (int i=0; i < things.length(); i++) {
            parseThing(things.getJSONObject(i),tm,thingTypes);
          }
        }
      }
 catch (      Exception e) {
        log(e.getMessage());
      }
    }
  }
;
  requester.doRequest(r,callback);
}","private void parseMore(JSONObject commentData,JSONObject child,TopicMap tm,HashMap<String,Topic> thingTypes) throws JSONException, TopicMapException {
  if (forceStop()) {
    return;
  }
  String id=commentData.getString(""String_Node_Str"");
  String link_id=commentData.getString(""String_Node_Str"");
  StringBuilder childString=new StringBuilder();
  JSONArray children=child.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
  int count=children.length();
  for (int i=0; i < count; i++) {
    childString.append(children.getString(i));
    if (i < count - 1) {
      childString.append(""String_Node_Str"");
    }
  }
  MultipartBody r=Unirest.post(apiRoot + ""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",uaString).field(""String_Node_Str"",""String_Node_Str"").field(""String_Node_Str"",id).field(""String_Node_Str"",link_id).field(""String_Node_Str"",childString.toString());
  ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
    @Override public void run(    HttpResponse<JsonNode> response){
      try {
        JSONObject respJSON=response.getBody().getObject();
        if (respJSON.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"").length() == 0) {
          JSONArray things=respJSON.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
          for (int i=0; i < things.length(); i++) {
            parseThing(things.getJSONObject(i),tm,thingTypes);
          }
        }
      }
 catch (      Exception e) {
        log(e.getMessage());
      }
    }
    @Override protected void error(    Exception e,    String body){
      log(e.getMessage());
      if (body != null) {
        log(""String_Node_Str"");
        log(body);
      }
    }
  }
;
  requester.doRequest(r,callback);
}",0.9461560610423264
117711,"protected void parseThing(JSONObject thing,TopicMap tm,HashMap<String,Topic> thingTypes){
  progress=(progress + 1) % 100;
  getDefaultLogger().setProgress(progress);
  if (forceStop()) {
    return;
  }
  try {
    if (thing.has(""String_Node_Str"")) {
      Object error=thing.get(""String_Node_Str"");
      throw new JSONException(""String_Node_Str"" + statusToPhrase((int)error) + ""String_Node_Str"");
    }
    JSONObject data=thing.getJSONObject(""String_Node_Str"");
    String kind=thing.getString(""String_Node_Str"");
switch (kind) {
case THING_TYPE_COMMENT:
      parseComment(thing,thingTypes,tm);
    break;
case THING_TYPE_LINK:
  parseLink(thing,thingTypes,tm);
break;
case THING_TYPE_ACCOUNT:
parseAccount(thing,thingTypes,tm);
break;
case THING_TYPE_SUBREDDIT:
parseSubreddit(thing,thingTypes,tm);
break;
}
if (data.has(""String_Node_Str"")) {
JSONArray children=data.getJSONArray(""String_Node_Str"");
for (int i=0; i < children.length(); i++) {
try {
JSONObject child=children.getJSONObject(i);
if (child.getString(""String_Node_Str"").equals(THING_TYPE_MORE)) {
parseMore(data,child,tm,thingTypes);
}
 else {
parseThing(child,tm,thingTypes);
}
}
 catch (JSONException jse) {
}
}
}
}
 catch (JSONException jse) {
log(""String_Node_Str"" + jse.getMessage());
try {
log(""String_Node_Str"");
log(thing.toString(2));
}
 catch (JSONException jsee) {
log(""String_Node_Str"");
}
}
catch (TopicMapException tme) {
log(tme.getMessage());
}
}","protected void parseThing(JSONObject thing,TopicMap tm,HashMap<String,Topic> thingTypes){
  progress=(progress + 1) % 100;
  getDefaultLogger().setProgress(progress);
  if (forceStop()) {
    return;
  }
  try {
    if (thing.has(""String_Node_Str"")) {
      Object error=thing.get(""String_Node_Str"");
      throw new JSONException(""String_Node_Str"" + statusToPhrase((int)error) + ""String_Node_Str"");
    }
    JSONObject data=thing.getJSONObject(""String_Node_Str"");
    String kind=thing.getString(""String_Node_Str"");
switch (kind) {
case THING_TYPE_COMMENT:
      parseComment(thing,thingTypes,tm);
    break;
case THING_TYPE_LINK:
  parseLink(thing,thingTypes,tm);
break;
case THING_TYPE_ACCOUNT:
parseAccount(thing,thingTypes,tm);
break;
case THING_TYPE_SUBREDDIT:
parseSubreddit(thing,thingTypes,tm);
break;
}
if (data.has(""String_Node_Str"")) {
JSONArray children=data.getJSONArray(""String_Node_Str"");
for (int i=0; i < children.length(); i++) {
JSONObject child;
try {
child=children.getJSONObject(i);
}
 catch (JSONException jse) {
continue;
}
parseThing(child,tm,thingTypes);
}
}
}
 catch (JSONException jse) {
log(""String_Node_Str"" + jse.getMessage());
try {
log(""String_Node_Str"");
log(thing.toString(2));
}
 catch (JSONException jsee) {
log(""String_Node_Str"");
}
jse.printStackTrace();
}
catch (TopicMapException tme) {
log(tme.getMessage());
}
}",0.8144958736993183
117712,"private Topic parseSubreddit(JSONObject subreddit,HashMap<String,Topic> thingTypes,TopicMap tm) throws JSONException, TopicMapException {
  if (forceStop()) {
    return null;
  }
  JSONObject subredditData=subreddit.getJSONObject(""String_Node_Str"");
  String kind=subreddit.getString(""String_Node_Str"");
  String id=subredditData.getString(""String_Node_Str"");
  String disp=subredditData.getString(""String_Node_Str"");
  log(""String_Node_Str"" + disp);
  Topic subredditTopic=getOrCreateTopic(tm,SI_ROOT + id);
  subredditTopic.setDisplayName(""String_Node_Str"",disp);
  subredditTopic.setBaseName(disp + ""String_Node_Str"" + id+ ""String_Node_Str"");
  addSubredditOccurrenceData(tm,subredditData,subredditTopic);
  subredditTopic.addType(thingTypes.get(kind));
  if (CRAWL_SETTINGS.get(""String_Node_Str"")) {
    ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
      @Override public void run(      HttpResponse<JsonNode> response){
        try {
          JSONObject respObj=response.getBody().getObject();
          parseThing(respObj,tm,thingTypes);
        }
 catch (        Exception e) {
          log(e.getMessage());
        }
      }
    }
;
    requester.doRequest(Unirest.get(apiRoot + ""String_Node_Str"" + disp+ ""String_Node_Str""),callback);
  }
  return subredditTopic;
}","private Topic parseSubreddit(JSONObject subreddit,HashMap<String,Topic> thingTypes,TopicMap tm) throws JSONException, TopicMapException {
  if (forceStop()) {
    return null;
  }
  JSONObject subredditData=subreddit.getJSONObject(""String_Node_Str"");
  String kind=subreddit.getString(""String_Node_Str"");
  String id=subredditData.getString(""String_Node_Str"");
  String disp=subredditData.getString(""String_Node_Str"");
  log(""String_Node_Str"" + disp);
  Topic subredditTopic=getOrCreateTopic(tm,SI_ROOT + id);
  subredditTopic.setDisplayName(""String_Node_Str"",disp);
  subredditTopic.setBaseName(disp + ""String_Node_Str"" + id+ ""String_Node_Str"");
  addSubredditOccurrenceData(tm,subredditData,subredditTopic);
  subredditTopic.addType(thingTypes.get(kind));
  if (CRAWL_SETTINGS.get(""String_Node_Str"")) {
    ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
      @Override public void run(      HttpResponse<JsonNode> response){
        try {
          JSONObject respObj=response.getBody().getObject();
          parseThing(respObj,tm,thingTypes);
        }
 catch (        Exception e) {
          log(e.getMessage());
        }
      }
      @Override protected void error(      Exception e,      String body){
        log(e.getMessage());
        if (body != null) {
          log(""String_Node_Str"");
          log(body);
        }
      }
    }
;
    requester.doRequest(Unirest.get(apiRoot + ""String_Node_Str"" + disp+ ""String_Node_Str""),callback);
  }
  return subredditTopic;
}",0.9273307337823468
117713,"private Topic parseComment(JSONObject c,HashMap<String,Topic> thingTypes,TopicMap tm) throws JSONException, TopicMapException {
  if (forceStop()) {
    return null;
  }
  final JSONObject comment=c;
  JSONObject commentData=comment.getJSONObject(""String_Node_Str"");
  String kind=comment.getString(""String_Node_Str"");
  String id=commentData.getString(""String_Node_Str"");
  log(""String_Node_Str"" + id);
  Topic commentTopic=getOrCreateTopic(tm,SI_ROOT + id);
  commentTopic.setBaseName(""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str"");
  try {
    commentTopic.addType(thingTypes.get(kind));
  }
 catch (  Exception e) {
    log(""String_Node_Str"" + kind);
  }
  addCommentOccurenceData(tm,commentData,commentTopic);
  if (commentData.has(""String_Node_Str"")) {
    String author=commentData.getString(""String_Node_Str"");
    Topic account=tm.getTopic(SI_ROOT + author);
    if (account != null) {
      associateAccount(tm,comment,account,thingTypes);
    }
 else     if (!author.equals(""String_Node_Str"") && CRAWL_SETTINGS.get(""String_Node_Str"")) {
      log(""String_Node_Str"" + author);
      String authorUrl=apiRoot + ""String_Node_Str"" + author+ ""String_Node_Str"";
      ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
        @Override public void run(        HttpResponse<JsonNode> response){
          try {
            JSONObject respObject=response.getBody().getObject();
            if (respObject.has(""String_Node_Str"") && respObject.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
              Topic account=parseAccount(respObject,thingTypes,tm);
              associateAccount(tm,comment,account,thingTypes);
            }
          }
 catch (          JSONException|TopicMapException e) {
            log(e.getMessage());
          }
        }
      }
;
      requester.doRequest(Unirest.get(authorUrl),callback);
    }
  }
  if (commentData.has(""String_Node_Str"")) {
    String parentId=commentData.getString(""String_Node_Str"");
    Topic parentTopic=getOrCreateTopic(tm,SI_ROOT + parentId);
    associateParent(tm,commentTopic,parentTopic);
  }
  if (commentData.has(""String_Node_Str"")) {
    JSONArray children;
    try {
      children=commentData.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    }
 catch (    JSONException jse) {
      children=new JSONArray();
    }
    for (int i=0; i < children.length(); i++) {
      JSONObject childData=children.getJSONObject(i);
      String childKind=childData.getString(""String_Node_Str"");
      if (childKind.equals(THING_TYPE_MORE) && CRAWL_SETTINGS.get(""String_Node_Str"")) {
        parseMore(commentData,childData,tm,thingTypes);
      }
 else {
        parseThing(childData,tm,thingTypes);
      }
    }
  }
  if (commentData.has(""String_Node_Str"")) {
    String link_id=commentData.getString(""String_Node_Str"");
    Topic linkTopic=tm.getTopic(SI_ROOT + link_id);
    if (linkTopic == null && CRAWL_SETTINGS.get(""String_Node_Str"")) {
      ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
        @Override public void run(        HttpResponse<JsonNode> response){
          try {
            JSONObject respObj=response.getBody().getObject();
            parseThing(respObj,tm,thingTypes);
          }
 catch (          Exception e) {
          }
        }
      }
;
      requester.doRequest(Unirest.get(apiRoot + ""String_Node_Str"" + link_id),callback);
    }
  }
  return commentTopic;
}","private Topic parseComment(JSONObject c,HashMap<String,Topic> thingTypes,TopicMap tm) throws JSONException, TopicMapException {
  if (forceStop()) {
    return null;
  }
  final JSONObject comment=c;
  JSONObject commentData=comment.getJSONObject(""String_Node_Str"");
  String kind=comment.getString(""String_Node_Str"");
  String id=commentData.getString(""String_Node_Str"");
  log(""String_Node_Str"" + id);
  Topic commentTopic=getOrCreateTopic(tm,SI_ROOT + id);
  commentTopic.setBaseName(""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str"");
  try {
    commentTopic.addType(thingTypes.get(kind));
  }
 catch (  Exception e) {
    log(""String_Node_Str"" + kind);
  }
  addCommentOccurenceData(tm,commentData,commentTopic);
  if (commentData.has(""String_Node_Str"")) {
    String author=commentData.getString(""String_Node_Str"");
    Topic account=tm.getTopic(SI_ROOT + author);
    if (account != null) {
      associateAccount(tm,comment,account,thingTypes);
    }
 else     if (!author.equals(""String_Node_Str"") && CRAWL_SETTINGS.get(""String_Node_Str"")) {
      log(""String_Node_Str"" + author);
      String authorUrl=apiRoot + ""String_Node_Str"" + author+ ""String_Node_Str"";
      ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
        @Override public void run(        HttpResponse<JsonNode> response){
          try {
            JSONObject respObject=response.getBody().getObject();
            if (respObject.has(""String_Node_Str"") && respObject.getString(""String_Node_Str"").equals(THING_TYPE_ACCOUNT)) {
              Topic account=parseAccount(respObject,thingTypes,tm);
              associateAccount(tm,comment,account,thingTypes);
            }
          }
 catch (          JSONException|TopicMapException e) {
            log(e.getMessage());
          }
        }
        @Override protected void error(        Exception e,        String body){
          log(e.getMessage());
          if (body != null) {
            log(""String_Node_Str"");
            log(body);
          }
        }
      }
;
      requester.doRequest(Unirest.get(authorUrl),callback);
    }
  }
  if (commentData.has(""String_Node_Str"")) {
    String parentId=commentData.getString(""String_Node_Str"");
    Topic parentTopic=getOrCreateTopic(tm,SI_ROOT + parentId);
    associateParent(tm,commentTopic,parentTopic);
  }
  if (commentData.has(""String_Node_Str"")) {
    JSONArray children;
    try {
      children=commentData.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    }
 catch (    JSONException jse) {
      children=new JSONArray();
    }
    for (int i=0; i < children.length(); i++) {
      JSONObject childData=children.getJSONObject(i);
      String childKind=childData.getString(""String_Node_Str"");
      if (childKind.equals(THING_TYPE_MORE) && CRAWL_SETTINGS.get(""String_Node_Str"")) {
        parseMore(commentData,childData,tm,thingTypes);
      }
 else {
        parseThing(childData,tm,thingTypes);
      }
    }
  }
  if (commentData.has(""String_Node_Str"")) {
    String link_id=commentData.getString(""String_Node_Str"");
    Topic linkTopic=tm.getTopic(SI_ROOT + link_id);
    if (linkTopic == null && CRAWL_SETTINGS.get(""String_Node_Str"")) {
      ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
        @Override public void run(        HttpResponse<JsonNode> response){
          try {
            JSONObject respObj=response.getBody().getObject();
            parseThing(respObj,tm,thingTypes);
          }
 catch (          Exception e) {
          }
        }
        @Override protected void error(        Exception e,        String body){
          log(e.getMessage());
          if (body != null) {
            log(""String_Node_Str"");
            log(body);
          }
        }
      }
;
      requester.doRequest(Unirest.get(apiRoot + ""String_Node_Str"" + link_id),callback);
    }
  }
  return commentTopic;
}",0.9353581507861848
117714,"private Topic parseLink(JSONObject l,HashMap<String,Topic> thingTypes,TopicMap tm) throws JSONException, TopicMapException {
  if (forceStop()) {
    return null;
  }
  final JSONObject link=l;
  JSONObject linkData=link.getJSONObject(""String_Node_Str"");
  String kind=link.getString(""String_Node_Str"");
  String id=linkData.getString(""String_Node_Str"");
  String title=linkData.getString(""String_Node_Str"");
  log(""String_Node_Str"" + title);
  Topic linkTopic=getOrCreateTopic(tm,SI_ROOT + id);
  linkTopic.setDisplayName(""String_Node_Str"",title);
  linkTopic.setBaseName(title + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (!linkData.getBoolean(""String_Node_Str"")) {
    String linkUrl=linkData.getString(""String_Node_Str"");
    Topic destinationTopic=getOrCreateTopic(tm,linkUrl);
    destinationTopic.setSubjectLocator(new Locator(linkUrl));
    HashMap<String,Topic> assTypes=getAssociationTypes(tm);
    Association a=tm.createAssociation(assTypes.get(""String_Node_Str""));
    a.addPlayer(linkTopic,thingTypes.get(THING_TYPE_LINK));
    a.addPlayer(destinationTopic,assTypes.get(""String_Node_Str""));
  }
  linkTopic.addType(thingTypes.get(kind));
  addLinkOccurenceData(tm,linkData,linkTopic);
  if (linkData.has(""String_Node_Str"")) {
    final String author=linkData.getString(""String_Node_Str"");
    if (!extracted.contains(author) && CRAWL_SETTINGS.get(""String_Node_Str"")) {
      String authorUrl=apiRoot + ""String_Node_Str"" + author+ ""String_Node_Str"";
      ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
        @Override public void run(        HttpResponse<JsonNode> response){
          try {
            JSONObject respObject=response.getBody().getObject();
            Topic account=null;
            if (respObject.has(""String_Node_Str"") && respObject.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
              extracted.add(author);
              account=parseAccount(respObject,thingTypes,tm);
            }
            if (account != null) {
              associateAccount(tm,link,account,thingTypes);
            }
          }
 catch (          JSONException|TopicMapException e) {
            log(e.getMessage());
          }
        }
      }
;
      requester.doRequest(Unirest.get(authorUrl),callback);
    }
  }
  if (linkData.has(""String_Node_Str"")) {
    String subredditId=linkData.getString(""String_Node_Str"");
    Topic subredditTopic=tm.getTopic(SI_ROOT + subredditId);
    associateSubreddit(tm,link,subredditTopic,thingTypes);
    final String subreddit=linkData.getString(""String_Node_Str"");
    if (!extracted.contains(subreddit) && CRAWL_SETTINGS.get(""String_Node_Str"")) {
      String subredditUrl=apiRoot + ""String_Node_Str"" + subreddit+ ""String_Node_Str"";
      ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
        @Override public void run(        HttpResponse<JsonNode> response){
          try {
            JSONObject respObject=response.getBody().getObject();
            Topic subredditTopic=null;
            if (respObject.has(""String_Node_Str"") && respObject.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
              extracted.add(subreddit);
              subredditTopic=parseSubreddit(respObject,thingTypes,tm);
            }
            if (subredditTopic != null) {
              associateSubreddit(tm,link,subredditTopic,thingTypes);
            }
          }
 catch (          JSONException|TopicMapException e) {
            log(e.getMessage());
          }
        }
      }
;
      requester.doRequest(Unirest.get(subredditUrl),callback);
    }
  }
  if (CRAWL_SETTINGS.get(""String_Node_Str"")) {
    String commentUrl=apiRoot + ""String_Node_Str"" + linkData.getString(""String_Node_Str"");
    ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
      @Override public void run(      HttpResponse<JsonNode> response){
        try {
          JSONArray respArray=response.getBody().getArray();
          parseThing(respArray.getJSONObject(1),tm,thingTypes);
        }
 catch (        Exception e) {
        }
      }
    }
;
    requester.doRequest(Unirest.get(commentUrl),callback);
  }
  return linkTopic;
}","private Topic parseLink(JSONObject l,HashMap<String,Topic> thingTypes,TopicMap tm) throws JSONException, TopicMapException {
  if (forceStop()) {
    return null;
  }
  final JSONObject link=l;
  JSONObject linkData=link.getJSONObject(""String_Node_Str"");
  String kind=link.getString(""String_Node_Str"");
  String id=linkData.getString(""String_Node_Str"");
  String title=linkData.getString(""String_Node_Str"");
  log(""String_Node_Str"" + title);
  Topic linkTopic=getOrCreateTopic(tm,SI_ROOT + id);
  linkTopic.setDisplayName(""String_Node_Str"",title);
  linkTopic.setBaseName(title + ""String_Node_Str"" + id+ ""String_Node_Str"");
  if (!linkData.getBoolean(""String_Node_Str"")) {
    String linkUrl=linkData.getString(""String_Node_Str"");
    Topic destinationTopic=getOrCreateTopic(tm,linkUrl);
    destinationTopic.setSubjectLocator(new Locator(linkUrl));
    HashMap<String,Topic> assTypes=getAssociationTypes(tm);
    Association a=tm.createAssociation(assTypes.get(""String_Node_Str""));
    a.addPlayer(linkTopic,thingTypes.get(THING_TYPE_LINK));
    a.addPlayer(destinationTopic,assTypes.get(""String_Node_Str""));
  }
  linkTopic.addType(thingTypes.get(kind));
  addLinkOccurenceData(tm,linkData,linkTopic);
  if (linkData.has(""String_Node_Str"")) {
    final String author=linkData.getString(""String_Node_Str"");
    if (!extracted.contains(author) && CRAWL_SETTINGS.get(""String_Node_Str"")) {
      String authorUrl=apiRoot + ""String_Node_Str"" + author+ ""String_Node_Str"";
      ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
        @Override public void run(        HttpResponse<JsonNode> response){
          try {
            JSONObject respObject=response.getBody().getObject();
            Topic account=null;
            if (respObject.has(""String_Node_Str"") && respObject.getString(""String_Node_Str"").equals(THING_TYPE_ACCOUNT)) {
              extracted.add(author);
              account=parseAccount(respObject,thingTypes,tm);
            }
            if (account != null) {
              associateAccount(tm,link,account,thingTypes);
            }
          }
 catch (          JSONException|TopicMapException e) {
            log(e.getMessage());
          }
        }
        @Override protected void error(        Exception e,        String body){
          log(e.getMessage());
          if (body != null) {
            log(""String_Node_Str"");
            log(body);
          }
        }
      }
;
      requester.doRequest(Unirest.get(authorUrl),callback);
    }
  }
  try {
    if (linkData.has(""String_Node_Str"")) {
      String subredditId=linkData.getString(""String_Node_Str"");
      String subredditName=linkData.getString(""String_Node_Str"");
      Topic subredditTopic=getOrCreateTopic(tm,SI_ROOT + subredditId);
      associateSubreddit(tm,link,subredditTopic,thingTypes);
      final String subreddit=linkData.getString(""String_Node_Str"");
      if (!extracted.contains(subreddit) && CRAWL_SETTINGS.get(""String_Node_Str"")) {
        String subredditUrl=apiRoot + ""String_Node_Str"" + subreddit+ ""String_Node_Str"";
        ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
          @Override public void run(          HttpResponse<JsonNode> response){
            try {
              JSONObject respObject=response.getBody().getObject();
              Topic subredditTopic=null;
              if (respObject.has(""String_Node_Str"") && respObject.getString(""String_Node_Str"").equals(THING_TYPE_SUBREDDIT)) {
                extracted.add(subreddit);
                subredditTopic=parseSubreddit(respObject,thingTypes,tm);
              }
              if (subredditTopic != null) {
                associateSubreddit(tm,link,subredditTopic,thingTypes);
              }
            }
 catch (            JSONException|TopicMapException e) {
              log(e.getMessage());
            }
          }
          @Override protected void error(          Exception e,          String body){
            log(e.getMessage());
            if (body != null) {
              log(""String_Node_Str"");
              log(body);
            }
          }
        }
;
        requester.doRequest(Unirest.get(subredditUrl),callback);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (CRAWL_SETTINGS.get(""String_Node_Str"")) {
    String commentUrl=apiRoot + ""String_Node_Str"" + linkData.getString(""String_Node_Str"");
    ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(tm,thingTypes){
      @Override public void run(      HttpResponse<JsonNode> response){
        try {
          JSONArray respArray=response.getBody().getArray();
          parseThing(respArray.getJSONObject(1),tm,thingTypes);
        }
 catch (        Exception e) {
          log(e.getMessage());
        }
      }
      @Override protected void error(      Exception e,      String body){
        log(e.getMessage());
        if (body != null) {
          log(""String_Node_Str"");
          log(body);
        }
      }
    }
;
    System.out.println(""String_Node_Str"" + commentUrl);
    requester.doRequest(Unirest.get(commentUrl),callback);
  }
  return linkTopic;
}",0.8749731932232468
117715,"private void threadPopulationCallback(HttpResponse<JsonNode> response){
  DefaultListModel model=new DefaultListModel();
  try {
    JSONObject resJson=response.getBody().getObject();
    if (resJson.has(""String_Node_Str"")) {
      Object error=resJson.get(""String_Node_Str"");
      throw new JSONException(""String_Node_Str"" + statusToPhrase((int)error));
    }
    threadResults=resJson.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    JSONObject r;
    model=new DefaultListModel();
    for (int i=0; i < threadResults.length(); i++) {
      r=threadResults.getJSONObject(i).getJSONObject(""String_Node_Str"");
      StringBuilder titleBuilder=new StringBuilder();
      titleBuilder.append(""String_Node_Str"").append(r.getString(""String_Node_Str"")).append(""String_Node_Str"").append(r.getString(""String_Node_Str"")).append(""String_Node_Str"").append(r.getString(""String_Node_Str""));
      model.add(i,titleBuilder.toString());
    }
  }
 catch (  Exception e) {
    model.add(0,e.getMessage());
  }
 finally {
    threadResList.setModel(model);
    threadSearchSubmit.setText(""String_Node_Str"");
    threadSearchSubmit.setEnabled(true);
  }
}","private void threadPopulationCallback(HttpResponse<JsonNode> response){
  DefaultListModel model=new DefaultListModel();
  try {
    JSONObject resJson=response.getBody().getObject();
    if (resJson.has(""String_Node_Str"")) {
      Object error=resJson.get(""String_Node_Str"");
      throw new JSONException(""String_Node_Str"" + statusToPhrase((int)error));
    }
    threadResults=resJson.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    JSONObject r;
    model=new DefaultListModel();
    for (int i=0; i < threadResults.length(); i++) {
      r=threadResults.getJSONObject(i).getJSONObject(""String_Node_Str"");
      StringBuilder titleBuilder=new StringBuilder();
      titleBuilder.append(""String_Node_Str"").append(r.getString(""String_Node_Str"")).append(""String_Node_Str"").append(r.getString(""String_Node_Str"")).append(""String_Node_Str"").append(r.getInt(""String_Node_Str""));
      model.add(i,titleBuilder.toString());
    }
  }
 catch (  Exception e) {
    model.add(0,e.getMessage());
  }
 finally {
    threadResList.setModel(model);
    threadSearchSubmit.setText(""String_Node_Str"");
    threadSearchSubmit.setEnabled(true);
  }
}",0.9961156668105308
117716,"private void populateThreadSearch(){
  threadSearchSubmit.setText(""String_Node_Str"");
  threadSearchSubmit.setEnabled(false);
  String q=threadSearchField.getText();
  ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(){
    @Override public void run(    HttpResponse<JsonNode> response){
      threadPopulationCallback(response);
    }
  }
;
  AbstractRedditExtractor.getSubmissions(q,callback);
}","private void populateThreadSearch(){
  threadSearchSubmit.setText(""String_Node_Str"");
  threadSearchSubmit.setEnabled(false);
  String q=threadSearchField.getText();
  ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(){
    @Override public void run(    HttpResponse<JsonNode> response){
      threadPopulationCallback(response);
    }
    @Override protected void error(    Exception e,    String body){
      DefaultListModel model=new DefaultListModel();
      model.add(0,e.getMessage());
      threadResList.setModel(model);
      threadSearchSubmit.setText(""String_Node_Str"");
      threadSearchSubmit.setEnabled(true);
    }
  }
;
  AbstractRedditExtractor.getSubmissions(q,callback);
}",0.6983842010771992
117717,"private void populateSubredditSearch(){
  subredditSearchSubmit.setText(""String_Node_Str"");
  subredditSearchSubmit.setEnabled(false);
  String q=subredditSearchField.getText();
  ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(){
    @Override public void run(    HttpResponse<JsonNode> response){
      subredditPopulationCallback(response);
    }
  }
;
  AbstractRedditExtractor.getSubreddits(q,callback);
}","private void populateSubredditSearch(){
  subredditSearchSubmit.setText(""String_Node_Str"");
  subredditSearchSubmit.setEnabled(false);
  String q=subredditSearchField.getText();
  ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(){
    @Override public void run(    HttpResponse<JsonNode> response){
      subredditPopulationCallback(response);
    }
    @Override protected void error(    Exception e,    String body){
      DefaultListModel model=new DefaultListModel();
      model.add(0,e.getMessage());
      subredditResList.setModel(model);
      subredditSearchSubmit.setText(""String_Node_Str"");
      subredditSearchSubmit.setEnabled(true);
    }
  }
;
  AbstractRedditExtractor.getSubreddits(q,callback);
}",0.7002606429192006
117718,"@Override public boolean _extractTopicsFrom(String str,TopicMap tm) throws Exception {
  log(""String_Node_Str"" + str);
  ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(){
    @Override public void run(    HttpResponse<JsonNode> response){
      try {
        parse(response);
      }
 catch (      JSONException|TopicMapException e) {
        log(e.getMessage());
      }
    }
  }
;
  requester.doRequest(Unirest.get(str),callback);
  boolean shouldQuit=false;
  while (!shouldQuit) {
    Thread.sleep(1000);
    shouldQuit=forceStop() || !requester.hasJobs();
  }
  requester.cancel();
  return true;
}","@Override public boolean _extractTopicsFrom(String str,TopicMap tm) throws Exception {
  ParseCallback<JsonNode> callback=new ParseCallback<JsonNode>(){
    @Override public void run(    HttpResponse<JsonNode> response){
      try {
        parse(response);
      }
 catch (      JSONException|TopicMapException e) {
        log(e.getMessage());
      }
    }
    @Override protected void error(    Exception e,    String body){
      log(e.getMessage());
      if (body != null) {
        log(""String_Node_Str"");
        log(body);
      }
    }
  }
;
  requester.doRequest(Unirest.get(str),callback);
  boolean shouldQuit=false;
  while (!shouldQuit) {
    Thread.sleep(2000);
    shouldQuit=forceStop() || !requester.hasJobs();
  }
  requester.cancel();
  return true;
}",0.8411214953271028
117719,"@Override public boolean setFrom(ConnectorAnchor from){
  boolean ret=super.setFrom(from);
  if (from == null) {
    parameterDirectiveAnchors.remove(anchorComp);
    layout.setColumns(paramsConnectors.size() - 1);
synchronized (paramsConnectors) {
      paramsConnectors.remove(this);
    }
  }
  return ret;
}","@Override public boolean setFrom(ConnectorAnchor from){
  boolean ret=super.setFrom(from);
  if (from == null) {
synchronized (paramAnchors) {
      paramAnchors.remove(info);
      updateParamAnchors();
    }
  }
  return ret;
}",0.5333333333333333
117720,"public ConnectorAnchor connectParamAnchor(ConnectorAnchor from){
synchronized (paramsConnectors) {
    final JPanel anchorComp=new JPanel();
    final GridLayout layout=(GridLayout)parameterDirectiveAnchors.getLayout();
    layout.setColumns(paramsConnectors.size() + 1);
    parameterDirectiveAnchors.add(anchorComp);
    parameterDirectiveAnchors.revalidate();
    ComponentConnectorAnchor anchor=new ComponentConnectorAnchor(anchorComp,ConnectorAnchor.Direction.DOWN,true,false){
      @Override public boolean setFrom(      ConnectorAnchor from){
        boolean ret=super.setFrom(from);
        if (from == null) {
          parameterDirectiveAnchors.remove(anchorComp);
          layout.setColumns(paramsConnectors.size() - 1);
synchronized (paramsConnectors) {
            paramsConnectors.remove(this);
          }
        }
        return ret;
      }
    }
;
    paramsConnectors.add(anchor);
    from.setTo(anchor);
    return anchor;
  }
}","public ConnectorAnchor connectParamAnchor(ConnectorAnchor from,String ordering){
synchronized (paramAnchors) {
    final JPanel anchorComp=new JPanel();
    final ParamAnchorInfo info=new ParamAnchorInfo(null,anchorComp,ordering);
    ComponentConnectorAnchor anchor=new ComponentConnectorAnchor(anchorComp,ConnectorAnchor.Direction.DOWN,true,false){
      @Override public boolean setFrom(      ConnectorAnchor from){
        boolean ret=super.setFrom(from);
        if (from == null) {
synchronized (paramAnchors) {
            paramAnchors.remove(info);
            updateParamAnchors();
          }
        }
        return ret;
      }
    }
;
    info.anchor=anchor;
    paramAnchors.add(info);
    from.setTo(anchor);
    updateParamAnchors();
    return anchor;
  }
}",0.4820393974507532
117721,"public void connectValue(DirectivePanel p){
  if (p == null) {
    if (fromAnchor != null)     fromAnchor.setTo(null);
    disconnectButton.setVisible(false);
    directiveAnchor.setVisible(true);
    fromPanel=null;
    fromAnchor=null;
    return;
  }
  fromAnchor=p.getFromConnectorAnchor();
  fromPanel=p;
  getDirectivePanel().connectParamAnchor(fromAnchor);
  disconnectButton.setVisible(true);
  directiveAnchor.setVisible(false);
}","public void connectValue(DirectivePanel p){
  if (p == null) {
    if (fromAnchor != null)     fromAnchor.setTo(null);
    disconnectButton.setVisible(false);
    directiveAnchor.setVisible(true);
    fromPanel=null;
    fromAnchor=null;
    return;
  }
  fromAnchor=p.getFromConnectorAnchor();
  fromPanel=p;
  getDirectivePanel().connectParamAnchor(fromAnchor,this.orderingHint);
  disconnectButton.setVisible(true);
  directiveAnchor.setVisible(false);
}",0.9799107142857144
117722,"public synchronized void addParameter(){
  final AbstractTypePanel paramPanel;
  try {
    Constructor c=typeCls.getConstructor(Parameter.class,DirectivePanel.class);
    paramPanel=(AbstractTypePanel)c.newInstance(this.parameter,this.directivePanel);
  }
 catch (  IllegalAccessException|InstantiationException|NoSuchMethodException|IllegalArgumentException|InvocationTargetException|SecurityException e) {
    Wandora.getWandora().handleError(e);
    return;
  }
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridx=0;
  gbc.gridy=rows.size();
  JButton removeButton=new JButton();
  removeButton.setText(""String_Node_Str"");
  removeButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeParameter(paramPanel);
    }
  }
);
  parametersPanel.add(removeButton,gbc);
  gbc.gridx=1;
  gbc.weightx=1.0;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  paramPanel.setLabel(""String_Node_Str"");
  parametersPanel.add(paramPanel,gbc);
  this.revalidate();
  parametersPanel.repaint();
  rows.add(new Row(paramPanel,removeButton));
}","public synchronized void addParameter(){
  final AbstractTypePanel paramPanel;
  try {
    Constructor c=typeCls.getConstructor(Parameter.class,DirectivePanel.class);
    paramPanel=(AbstractTypePanel)c.newInstance(this.parameter,this.directivePanel);
  }
 catch (  IllegalAccessException|InstantiationException|NoSuchMethodException|IllegalArgumentException|InvocationTargetException|SecurityException e) {
    Wandora.getWandora().handleError(e);
    return;
  }
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridx=0;
  gbc.gridy=rows.size();
  JButton removeButton=new JButton();
  removeButton.setText(""String_Node_Str"");
  removeButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      removeParameter(paramPanel);
    }
  }
);
  parametersPanel.add(removeButton,gbc);
  gbc.gridx=1;
  gbc.weightx=1.0;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  paramPanel.setLabel(""String_Node_Str"");
  parametersPanel.add(paramPanel,gbc);
  if (this.orderingHint != null) {
    paramPanel.setOrderingHint(orderingHint + rows.size());
  }
  this.revalidate();
  parametersPanel.repaint();
  rows.add(new Row(paramPanel,removeButton));
}",0.91321412996075
117723,"protected boolean operandTypeChanged(){
  if (parameterPanel != null)   parameterPanel.disconnect();
  parameterPanel=null;
  Object o=operandTypeComboBox.getSelectedItem();
  if (o == null) {
    operandPanel.removeAll();
    this.revalidate();
    operandPanel.repaint();
    return true;
  }
  String type=o.toString();
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    operandPanel.removeAll();
    StringParameterPanel p=new StringParameterPanel(parameter,this.directivePanel);
    p.setLabel(""String_Node_Str"");
    operandPanel.add(p);
    this.revalidate();
    operandPanel.repaint();
    parameterPanel=p;
    return true;
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    operandPanel.removeAll();
    DirectiveParameterPanel p=new DirectiveParameterPanel(parameter,this.directivePanel);
    p.setLabel(""String_Node_Str"");
    operandPanel.add(p);
    this.revalidate();
    operandPanel.repaint();
    parameterPanel=p;
    return true;
  }
 else   return false;
}","protected boolean operandTypeChanged(){
  if (parameterPanel != null)   parameterPanel.disconnect();
  parameterPanel=null;
  Object o=operandTypeComboBox.getSelectedItem();
  if (o == null) {
    operandPanel.removeAll();
    this.revalidate();
    operandPanel.repaint();
    return true;
  }
  String type=o.toString();
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    operandPanel.removeAll();
    StringParameterPanel p=new StringParameterPanel(parameter,this.directivePanel);
    p.setLabel(""String_Node_Str"");
    p.setOrderingHint(this.orderingHint);
    operandPanel.add(p);
    this.revalidate();
    operandPanel.repaint();
    parameterPanel=p;
    return true;
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    operandPanel.removeAll();
    DirectiveParameterPanel p=new DirectiveParameterPanel(parameter,this.directivePanel);
    p.setLabel(""String_Node_Str"");
    p.setOrderingHint(this.orderingHint);
    operandPanel.add(p);
    this.revalidate();
    operandPanel.repaint();
    parameterPanel=p;
    return true;
  }
 else   return false;
}",0.9353281853281852
117724,"@Override protected boolean operandTypeChanged(){
  if (super.operandTypeChanged())   return true;
  Object o=operandTypeComboBox.getSelectedItem();
  if (o == null)   return false;
  String type=o.toString();
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    operandPanel.removeAll();
    TopicParameterPanel p=new TopicParameterPanel(parameter,this.directivePanel);
    p.setLabel(""String_Node_Str"");
    operandPanel.add(p);
    this.revalidate();
    operandPanel.repaint();
    parameterPanel=p;
    return true;
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    operandPanel.removeAll();
    StringParameterPanel p=new StringParameterPanel(parameter,this.directivePanel);
    p.setLabel(""String_Node_Str"");
    operandPanel.add(p);
    this.revalidate();
    operandPanel.repaint();
    parameterPanel=p;
    return true;
  }
 else   return false;
}","@Override protected boolean operandTypeChanged(){
  if (super.operandTypeChanged())   return true;
  Object o=operandTypeComboBox.getSelectedItem();
  if (o == null)   return false;
  String type=o.toString();
  if (type.equalsIgnoreCase(""String_Node_Str"")) {
    operandPanel.removeAll();
    TopicParameterPanel p=new TopicParameterPanel(parameter,this.directivePanel);
    p.setLabel(""String_Node_Str"");
    p.setOrderingHint(this.orderingHint);
    operandPanel.add(p);
    this.revalidate();
    operandPanel.repaint();
    parameterPanel=p;
    return true;
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    operandPanel.removeAll();
    StringParameterPanel p=new StringParameterPanel(parameter,this.directivePanel);
    p.setLabel(""String_Node_Str"");
    p.setOrderingHint(this.orderingHint);
    operandPanel.add(p);
    this.revalidate();
    operandPanel.repaint();
    parameterPanel=p;
    return true;
  }
 else   return false;
}",0.926775956284153
117725,"@Override public void keyReleased(java.awt.event.KeyEvent evt){
  if (evt.getKeyChar() == KeyEvent.VK_ENTER)   doSearch();
}","@Override public void keyReleased(java.awt.event.KeyEvent evt){
  if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
    doSearch();
  }
}",0.96875
117726,"/** 
 * Creates new form SimilarityPanel
 */
public SimilarityPanel(){
  initComponents();
  message=new SimpleLabel();
  message.setHorizontalAlignment(SimpleLabel.CENTER);
  message.setIcon(UIBox.getIcon(""String_Node_Str""));
  similarityTextField.setPreferredSize(new Dimension(200,26));
  similarityThresholdSlider.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  similarityTypeComboBox.removeAllItems();
  similarityTypeComboBox.setEditable(false);
  for (int i=0; i < similarityTypes.length; i++) {
    similarityTypeComboBox.addItem(similarityTypes[i].e1);
  }
  similarityTokenizerComboBox.removeAllItems();
  similarityTokenizerComboBox.setEditable(false);
  for (int i=0; i < similarityTokenizers.length; i++) {
    similarityTokenizerComboBox.addItem(similarityTokenizers[i].e1);
  }
  updateSimilarityOptions();
}","/** 
 * Creates new form SimilarityPanel
 */
public SimilarityPanel(){
  initComponents();
  message=new SimpleLabel();
  message.setHorizontalAlignment(SimpleLabel.CENTER);
  message.setIcon(UIBox.getIcon(""String_Node_Str""));
  similarityTextField.setPreferredSize(new Dimension(200,26));
  similarityThresholdSlider.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  similarityTypeComboBox.removeAllItems();
  similarityTypeComboBox.setEditable(false);
  for (int i=0; i < similarityTypes.length; i++) {
    similarityTypeComboBox.addItem(similarityTypes[i].e1);
  }
  similarityTokenizerComboBox.removeAllItems();
  similarityTokenizerComboBox.setEditable(false);
  for (int i=0; i < similarityTokenizers.length; i++) {
    similarityTokenizerComboBox.addItem(similarityTokenizers[i].e1);
  }
  updateSimilarityOptions();
  similarityTextField.addKeyListener(new java.awt.event.KeyAdapter(){
    @Override public void keyReleased(    java.awt.event.KeyEvent evt){
      if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        doSearch();
      }
    }
  }
);
}",0.8772298006295908
117727,"private void searchButtonActionPerformed(java.awt.event.ActionEvent evt){
  try {
    resultPanel.removeAll();
    Wandora wandora=Wandora.getWandora();
    TopicMap topicMap=wandora.getTopicMap();
    Collection<Topic> results=getSimilarTopics(topicMap);
    if (results != null && !results.isEmpty()) {
      resultsTable=new TopicTable(wandora);
      resultsTable.initialize(results);
      resultPanel.add(resultsTable,BorderLayout.NORTH);
    }
 else {
      resultsTable=null;
      message.setText(""String_Node_Str"");
      resultPanel.add(message,BorderLayout.CENTER);
    }
  }
 catch (  TopicMapException tme) {
    message.setText(""String_Node_Str"");
    resultPanel.add(message,BorderLayout.CENTER);
    tme.printStackTrace();
  }
catch (  Exception e) {
    message.setText(""String_Node_Str"");
    resultPanel.add(message,BorderLayout.CENTER);
    e.printStackTrace();
    return;
  }
  revalidate();
  repaint();
}","private void searchButtonActionPerformed(java.awt.event.ActionEvent evt){
  doSearch();
}",0.1728880157170923
117728,"@Override public Object[] getViewMenuStruct(){
  JMenu addMenu=new SimpleMenu(""String_Node_Str"",UIBox.getIcon(""String_Node_Str""));
  ArrayList<ArrayList> availableTopicPanels=wandora.topicPanelManager.getAvailableTopicPanels();
  ArrayList addTopicPanelMenuStruct=new ArrayList();
  for (  ArrayList panelData : availableTopicPanels) {
    try {
      Class panelClass=Class.forName((String)panelData.get(0));
      if (!this.getClass().equals(panelClass)) {
        addTopicPanelMenuStruct.add((String)panelData.get(1));
        addTopicPanelMenuStruct.add((Icon)panelData.get(2));
        addTopicPanelMenuStruct.add(new AddDockable(panelClass));
      }
    }
 catch (    Exception e) {
    }
  }
  UIBox.attachMenu(addMenu,addTopicPanelMenuStruct.toArray(new Object[]{}),wandora);
  ArrayList struct=new ArrayList();
  struct.add(addMenu);
  if (dockedTopicPanels != null && !dockedTopicPanels.isEmpty()) {
    struct.add(""String_Node_Str"");
    for (    Dockable dockable : dockedTopicPanels.keySet()) {
      TopicPanel tp=dockedTopicPanels.get(dockable);
      if (tp != null) {
        String label=tp.getName();
        label=label + getAdditionalLabel(tp);
        JMenu topicPanelMenu=new SimpleMenu(label,tp.getIcon());
        ArrayList subStruct=new ArrayList();
        subStruct.add(""String_Node_Str"");
        subStruct.add(UIBox.getIcon(""String_Node_Str""));
        subStruct.add(new SelectDockable(dockable));
        if (dockable.equals(station.getFullScreen())) {
          subStruct.add(""String_Node_Str"");
          subStruct.add(UIBox.getIcon(""String_Node_Str""));
        }
 else {
          subStruct.add(""String_Node_Str"");
          subStruct.add(UIBox.getIcon(""String_Node_Str""));
        }
        subStruct.add(new MaximizeDockable(dockable));
        subStruct.add(""String_Node_Str"");
        Object[] subMenuStruct=tp.getViewMenuStruct();
        if (subMenuStruct != null) {
          if (subMenuStruct.length > 0) {
            for (            Object subMenuItem : subMenuStruct) {
              subStruct.add(subMenuItem);
            }
            subStruct.add(""String_Node_Str"");
          }
        }
        subStruct.add(""String_Node_Str"");
        subStruct.add(UIBox.getIcon(""String_Node_Str""));
        subStruct.add(new DeleteDockable(dockable));
        UIBox.attachMenu(topicPanelMenu,subStruct.toArray(),wandora);
        struct.add(topicPanelMenu);
      }
    }
    struct.add(""String_Node_Str"");
    struct.add(""String_Node_Str"");
    struct.add(new DeleteCurrentDockable());
    struct.add(""String_Node_Str"");
    struct.add(new DeleteAllDockables());
  }
  return struct.toArray();
}","@Override public Object[] getViewMenuStruct(){
  JMenu addMenu=new SimpleMenu(""String_Node_Str"",UIBox.getIcon(""String_Node_Str""));
  ArrayList<ArrayList> availableTopicPanels=wandora.topicPanelManager.getAvailableTopicPanels();
  ArrayList addTopicPanelMenuStruct=new ArrayList();
  for (  ArrayList panelData : availableTopicPanels) {
    try {
      Class panelClass=Class.forName((String)panelData.get(0));
      if (!this.getClass().equals(panelClass)) {
        addTopicPanelMenuStruct.add((String)panelData.get(1));
        addTopicPanelMenuStruct.add((Icon)panelData.get(2));
        addTopicPanelMenuStruct.add(new AddDockable(panelClass));
      }
    }
 catch (    Exception e) {
    }
  }
  UIBox.attachMenu(addMenu,addTopicPanelMenuStruct.toArray(new Object[]{}),wandora);
  ArrayList struct=new ArrayList();
  struct.add(addMenu);
  if (dockedTopicPanels != null && !dockedTopicPanels.isEmpty()) {
    struct.add(""String_Node_Str"");
    for (    Dockable dockable : dockedTopicPanels.keySet()) {
      TopicPanel tp=dockedTopicPanels.get(dockable);
      if (tp != null) {
        String label=tp.getName();
        label=label + getAdditionalLabel(tp);
        JMenu topicPanelMenu=new SimpleMenu(label,tp.getIcon());
        ArrayList subStruct=new ArrayList();
        Object[] subMenuStruct=tp.getViewMenuStruct();
        if (subMenuStruct != null) {
          if (subMenuStruct.length > 0) {
            for (            Object subMenuItem : subMenuStruct) {
              subStruct.add(subMenuItem);
            }
            subStruct.add(""String_Node_Str"");
          }
        }
        subStruct.add(""String_Node_Str"");
        subStruct.add(UIBox.getIcon(""String_Node_Str""));
        subStruct.add(new SelectDockable(dockable));
        if (dockable.equals(station.getFullScreen())) {
          subStruct.add(""String_Node_Str"");
          subStruct.add(UIBox.getIcon(""String_Node_Str""));
        }
 else {
          subStruct.add(""String_Node_Str"");
          subStruct.add(UIBox.getIcon(""String_Node_Str""));
        }
        subStruct.add(new MaximizeDockable(dockable));
        subStruct.add(""String_Node_Str"");
        subStruct.add(UIBox.getIcon(""String_Node_Str""));
        subStruct.add(new DeleteDockable(dockable));
        UIBox.attachMenu(topicPanelMenu,subStruct.toArray(),wandora);
        struct.add(topicPanelMenu);
      }
    }
    struct.add(""String_Node_Str"");
    struct.add(""String_Node_Str"");
    struct.add(new DeleteCurrentDockable());
    struct.add(""String_Node_Str"");
    struct.add(new DeleteAllDockables());
  }
  return struct.toArray();
}",0.867737003058104
117729,"@Override public void open(Topic topic) throws TopicMapException, OpenTopicNotSupportedException {
  openedTopic=topic;
  if (currentDockable == null) {
    if (!dockedTopicPanels.isEmpty()) {
      currentDockable=dockedTopicPanels.keySet().iterator().next();
    }
  }
  if (currentDockable == null) {
    addDockable((TopicPanel)new TraditionalTopicPanel(),topic);
  }
 else {
    control.setFocusedDockable(currentDockable,true);
    TopicPanel currentTopicPanel=dockedTopicPanels.get(currentDockable);
    if (currentTopicPanel != null) {
      try {
        currentTopicPanel.open(topic);
        updateDockableTitle(currentTopicPanel);
      }
 catch (      OpenTopicNotSupportedException otnse) {
        ArrayList<TopicPanel> availableTopicPanels=new ArrayList();
        for (        Dockable dockable : dockedTopicPanels.keySet()) {
          TopicPanel availableTopicPanel=dockedTopicPanels.get(dockable);
          if (availableTopicPanel != null && availableTopicPanel.supportsOpenTopic()) {
            availableTopicPanels.add(availableTopicPanel);
          }
        }
        if (availableTopicPanels.isEmpty()) {
          addDockable((TopicPanel)new TraditionalTopicPanel(),topic);
        }
 else         if (availableTopicPanels.size() == 1) {
          TopicPanel alternativeTopicPanel=availableTopicPanels.get(0);
          alternativeTopicPanel.open(topic);
          updateDockableTitle(alternativeTopicPanel);
        }
 else {
          boolean askForATopicPanel=true;
          TopicPanel rememberedTargetTopicPanel=chainedTopicPanels.get(currentTopicPanel);
          if (rememberedTargetTopicPanel != null) {
            Dockable dockable=this.getDockableFor(rememberedTargetTopicPanel);
            if (dockable != null) {
              rememberedTargetTopicPanel.open(topic);
              updateDockableTitle(rememberedTargetTopicPanel);
              askForATopicPanel=false;
            }
 else {
              chainedTopicPanels.remove(currentTopicPanel);
            }
          }
          if (askForATopicPanel) {
            SelectTopicPanelPanel topicPanelSelector=new SelectTopicPanelPanel();
            topicPanelSelector.openInDialog(availableTopicPanels,wandora);
            if (topicPanelSelector.wasAccepted()) {
              TopicPanel userSelectedTopicPanel=topicPanelSelector.getSelectedTopicPanel();
              if (userSelectedTopicPanel != null) {
                userSelectedTopicPanel.open(topic);
                updateDockableTitle(userSelectedTopicPanel);
                if (topicPanelSelector.getRememberSelection()) {
                  chainedTopicPanels.put(currentTopicPanel,userSelectedTopicPanel);
                }
              }
            }
          }
        }
      }
    }
  }
  revalidate();
  repaint();
}","@Override public void open(Topic topic) throws TopicMapException, OpenTopicNotSupportedException {
  openedTopic=topic;
  if (currentDockable == null) {
    if (!dockedTopicPanels.isEmpty()) {
      currentDockable=dockedTopicPanels.keySet().iterator().next();
    }
  }
  if (currentDockable == null) {
    addDockable((TopicPanel)new TraditionalTopicPanel(),topic);
  }
 else {
    control.setFocusedDockable(currentDockable,true);
    TopicPanel currentTopicPanel=dockedTopicPanels.get(currentDockable);
    if (currentTopicPanel != null) {
      if (currentTopicPanel.supportsOpenTopic()) {
        currentTopicPanel.open(topic);
        updateDockableTitle(currentTopicPanel);
      }
 else {
        ArrayList<TopicPanel> availableTopicPanels=new ArrayList();
        for (        Dockable dockable : dockedTopicPanels.keySet()) {
          TopicPanel availableTopicPanel=dockedTopicPanels.get(dockable);
          if (availableTopicPanel != null && availableTopicPanel.supportsOpenTopic()) {
            availableTopicPanels.add(availableTopicPanel);
          }
        }
        if (availableTopicPanels.isEmpty()) {
          addDockable((TopicPanel)new TraditionalTopicPanel(),topic);
        }
 else         if (availableTopicPanels.size() == 1) {
          TopicPanel alternativeTopicPanel=availableTopicPanels.get(0);
          alternativeTopicPanel.open(topic);
          updateDockableTitle(alternativeTopicPanel);
        }
 else {
          boolean askForATopicPanel=true;
          TopicPanel rememberedTargetTopicPanel=chainedTopicPanels.get(currentTopicPanel);
          if (rememberedTargetTopicPanel != null) {
            Dockable dockable=this.getDockableFor(rememberedTargetTopicPanel);
            if (dockable != null) {
              rememberedTargetTopicPanel.open(topic);
              updateDockableTitle(rememberedTargetTopicPanel);
              askForATopicPanel=false;
            }
 else {
              chainedTopicPanels.remove(currentTopicPanel);
            }
          }
          if (askForATopicPanel) {
            SelectTopicPanelPanel topicPanelSelector=new SelectTopicPanelPanel();
            topicPanelSelector.openInDialog(availableTopicPanels,wandora);
            if (topicPanelSelector.wasAccepted()) {
              TopicPanel userSelectedTopicPanel=topicPanelSelector.getSelectedTopicPanel();
              if (userSelectedTopicPanel != null) {
                userSelectedTopicPanel.open(topic);
                updateDockableTitle(userSelectedTopicPanel);
                if (topicPanelSelector.getRememberSelection()) {
                  chainedTopicPanels.put(currentTopicPanel,userSelectedTopicPanel);
                }
              }
            }
          }
        }
      }
    }
  }
  revalidate();
  repaint();
}",0.982223020290896
117730,"public void refreshGraph(){
  if (model != null && projection != null) {
    projection.set(Projection.VIEW_WIDTH,this.getWidth());
    projection.set(Projection.VIEW_HEIGHT,this.getHeight());
  }
synchronized (this) {
    needsRefresh=false;
    TopicMap tm=tmModel.getTopicMap();
    VModel oldModel=model;
    TopicMapModel oldTMModel=tmModel;
    Topic oldRoot=rootTopic;
    ArrayList<VNode> oldNodes=oldModel.getNodes();
    ArrayList<VEdge> oldEdges=oldModel.getEdges();
    remakeModels(tm);
    try {
      for (      VNode vnode : oldNodes) {
        Node node=vnode.getNode();
        VNode nn=null;
        if (node instanceof TopicNode) {
          TopicNode tn=(TopicNode)node;
          Topic t=tn.getTopic();
          Topic nt=getNewTopicFor(t,tm);
          if (nt != null) {
            nn=model.addNode(tmModel.getNodeFor(nt));
          }
        }
 else         if (node instanceof AssociationNode) {
          AssociationNode an=(AssociationNode)node;
          Association a=an.getAssociation();
          Association na=getNewAssociationFor(a,tm);
          if (na != null) {
            if (na.getRoles().size() != 2) {
              nn=model.addNode(tmModel.getNodeFor(na));
            }
          }
        }
 else         if (node instanceof OccurrenceNode) {
          OccurrenceNode on=(OccurrenceNode)node;
          Topic carrier=on.getCarrier();
          Topic type=on.getType();
          Topic scope=on.getScope();
          String o=carrier.getData(type,scope);
          if (o != null) {
            nn=model.addNode(tmModel.getNodeFor(carrier,type,scope,o));
          }
        }
        if (nn != null) {
          nn.x=vnode.x;
          nn.y=vnode.y;
          nn.pinned=vnode.pinned;
          if (vnode.selected)           model.addSelection(nn);
        }
      }
      for (      VEdge vedge : oldEdges) {
        Edge edge=vedge.getEdge();
        VEdge ne=null;
        if (edge instanceof AssociationEdge) {
          AssociationEdge ae=(AssociationEdge)edge;
          Association a=ae.getAssociation();
          Association na=getNewAssociationFor(a,tm);
          if (na != null) {
            if (a.getRoles().size() == na.getRoles().size()) {
              if (a.getRoles().size() == 2) {
                ne=model.addEdge(tmModel.getEdgeFor(na));
              }
 else {
                AssociationNode an=tmModel.getNodeFor(na);
                VNode vn=model.addNode(an);
                model.openNode(vn);
              }
            }
          }
        }
 else         if (edge instanceof InstanceEdge) {
          InstanceEdge ie=(InstanceEdge)edge;
          Topic instance=ie.getInstance();
          Topic type=ie.getType();
          Topic ninstance=getNewTopicFor(instance,tm);
          Topic ntype=getNewTopicFor(type,tm);
          if (ninstance != null && ntype != null) {
            ne=model.addEdge(tmModel.getInstanceEdgeFor(ntype,ninstance));
          }
        }
 else         if (edge instanceof OccurrenceEdge) {
          OccurrenceEdge oe=(OccurrenceEdge)edge;
          Topic carrier=oe.getCarrier();
          Topic type=oe.getType();
          Topic scope=oe.getScope();
          String o=carrier.getData(type,scope);
          if (o != null) {
            ne=model.addEdge(tmModel.getOccurrenceEdgeFor(carrier,type,scope,o));
          }
        }
        if (ne != null) {
          if (vedge.selected) {
            model.setSelection(ne);
          }
          ne.mouseOver=vedge.mouseOver;
          ne.labelEdges=vedge.labelEdges;
          ne.curvature=vedge.curvature;
        }
      }
      rootTopic=getNewTopicFor(oldRoot,tm);
      followNode=null;
    }
 catch (    TopicMapException tme) {
      tme.printStackTrace();
    }
  }
}","public void refreshGraph(){
  if (model != null && projection != null) {
    projection.set(Projection.VIEW_WIDTH,this.getWidth());
    projection.set(Projection.VIEW_HEIGHT,this.getHeight());
  }
synchronized (this) {
    needsRefresh=false;
    TopicMap tm=tmModel.getTopicMap();
    VModel oldModel=model;
    TopicMapModel oldTMModel=tmModel;
    Topic oldRoot=rootTopic;
    ArrayList<VNode> oldNodes=oldModel.getNodes();
    ArrayList<VEdge> oldEdges=oldModel.getEdges();
    remakeModels(tm);
    try {
      for (      VNode vnode : oldNodes) {
        Node node=vnode.getNode();
        VNode nn=null;
        if (node instanceof TopicNode) {
          TopicNode tn=(TopicNode)node;
          Topic t=tn.getTopic();
          Topic nt=getNewTopicFor(t,tm);
          if (nt != null) {
            nn=model.addNode(tmModel.getNodeFor(nt));
          }
        }
 else         if (node instanceof AssociationNode) {
          AssociationNode an=(AssociationNode)node;
          Association a=an.getAssociation();
          Association na=getNewAssociationFor(a,tm);
          if (na != null) {
            if (na.getRoles().size() != 2) {
              nn=model.addNode(tmModel.getNodeFor(na));
            }
          }
        }
 else         if (node instanceof OccurrenceNode) {
          OccurrenceNode on=(OccurrenceNode)node;
          Topic carrier=on.getCarrier();
          Topic type=on.getType();
          Topic scope=on.getScope();
          Topic ncarrier=getNewTopicFor(carrier,tm);
          Topic ntype=getNewTopicFor(type,tm);
          Topic nscope=getNewTopicFor(scope,tm);
          if (ncarrier != null && ntype != null && nscope != null) {
            String o=ncarrier.getData(ntype,nscope);
            if (o != null) {
              nn=model.addNode(tmModel.getNodeFor(ncarrier,ntype,nscope,o));
            }
          }
        }
        if (nn != null) {
          nn.x=vnode.x;
          nn.y=vnode.y;
          nn.pinned=vnode.pinned;
          if (vnode.selected)           model.addSelection(nn);
        }
      }
      for (      VEdge vedge : oldEdges) {
        Edge edge=vedge.getEdge();
        VEdge ne=null;
        if (edge instanceof AssociationEdge) {
          AssociationEdge ae=(AssociationEdge)edge;
          Association a=ae.getAssociation();
          Association na=getNewAssociationFor(a,tm);
          if (na != null) {
            if (a.getRoles().size() == na.getRoles().size()) {
              if (a.getRoles().size() == 2) {
                ne=model.addEdge(tmModel.getEdgeFor(na));
              }
 else {
                AssociationNode an=tmModel.getNodeFor(na);
                VNode vn=model.addNode(an);
                model.openNode(vn);
              }
            }
          }
        }
 else         if (edge instanceof InstanceEdge) {
          InstanceEdge ie=(InstanceEdge)edge;
          Topic instance=ie.getInstance();
          Topic type=ie.getType();
          Topic ninstance=getNewTopicFor(instance,tm);
          Topic ntype=getNewTopicFor(type,tm);
          if (ninstance != null && ntype != null) {
            ne=model.addEdge(tmModel.getInstanceEdgeFor(ntype,ninstance));
          }
        }
 else         if (edge instanceof OccurrenceEdge) {
          OccurrenceEdge oe=(OccurrenceEdge)edge;
          Topic carrier=oe.getCarrier();
          Topic type=oe.getType();
          Topic scope=oe.getScope();
          Topic ncarrier=getNewTopicFor(carrier,tm);
          Topic ntype=getNewTopicFor(type,tm);
          Topic nscope=getNewTopicFor(scope,tm);
          if (ntype != null && nscope != null && ncarrier != null) {
            String o=ncarrier.getData(ntype,nscope);
            if (o != null) {
              ne=model.addEdge(tmModel.getOccurrenceEdgeFor(ncarrier,ntype,nscope,o));
            }
          }
        }
        if (ne != null) {
          if (vedge.selected) {
            model.setSelection(ne);
          }
          ne.mouseOver=vedge.mouseOver;
          ne.labelEdges=vedge.labelEdges;
          ne.curvature=vedge.curvature;
        }
      }
      rootTopic=getNewTopicFor(oldRoot,tm);
      followNode=null;
    }
 catch (    TopicMapException tme) {
      tme.printStackTrace();
    }
  }
}",0.9346569489821565
117731,"@Override public void init(){
  wandora=Wandora.getWandora();
  infoPanel=new JPanel();
  infoPanel.setLayout(new GridBagLayout());
  fieldLabels=new HashMap();
  initInfo();
}","@Override public void init(){
  wandora=Wandora.getWandora();
  infoPanel=new JPanel();
  infoPanel.setLayout(new GridBagLayout());
  fieldLabels=new HashMap();
  initInfo();
  refresher=new Thread(this);
  refresher.start();
}",0.8734491315136477
117732,"public void refreshInfo(){
  map=getCurrentTopicMap();
  int[] statOptions=TopicMapStatOptions.getAvailableOptions();
  stats=new StringBuilder();
  SimpleLabel statValue=null;
  String statString=""String_Node_Str"";
  String originalStatString=""String_Node_Str"";
  String layerName=getCurrentLayerName();
  SimpleLabel layerNameLabel=fieldLabels.get(""String_Node_Str"");
  if (layerNameLabel != null) {
    layerNameLabel.setText(layerName);
  }
  stats.append(layerName).append(""String_Node_Str"");
  boolean fillOriginalValues=false;
  if (originalValues == null) {
    originalValues=new HashMap();
    fillOriginalValues=true;
  }
  for (int i=0; i < statOptions.length; i++) {
    try {
      statString=""String_Node_Str"";
      try {
        if (map != null) {
          statString=map.getStatistics(new TopicMapStatOptions(statOptions[i])).toString();
          if (fillOriginalValues) {
            originalValues.put(statOptions[i],statString);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (trackChanges) {
        originalStatString=originalValues.get(statOptions[i]).toString();
        stats.append(""String_Node_Str"").append(originalStatString);
        SimpleLabel originalValue=fieldLabels.get(""String_Node_Str"" + statOptions[i]);
        if (originalValue != null) {
          originalValue.setText(originalStatString);
        }
      }
      Color statValueColor=Color.BLACK;
      if (trackChanges) {
        try {
          int statInt=Integer.parseInt(statString);
          int originalInt=Integer.parseInt(originalStatString);
          int delta=statInt - originalInt;
          statString=(delta > 0 ? ""String_Node_Str"" + delta : ""String_Node_Str"" + delta);
          if (delta > 0)           statValueColor=Color.green.darker();
 else           if (delta < 0)           statValueColor=Color.red.darker();
        }
 catch (        Exception e) {
        }
      }
      stats.append(""String_Node_Str"").append(statString);
      statValue=fieldLabels.get(statOptions[i]);
      if (statValue != null) {
        statValue.setForeground(statValueColor);
        statValue.setText(statString);
      }
      stats.append(""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void refreshInfo(){
  map=getCurrentTopicMap();
  int[] statOptions=TopicMapStatOptions.getAvailableOptions();
  stats=new StringBuilder();
  SimpleLabel statValue=null;
  String statString=""String_Node_Str"";
  String originalStatString=""String_Node_Str"";
  String layerName=getCurrentLayerName();
  SimpleLabel layerNameLabel=fieldLabels.get(""String_Node_Str"");
  if (layerNameLabel != null) {
    layerNameLabel.setText(layerName);
  }
  stats.append(layerName).append(""String_Node_Str"");
  boolean fillOriginalValues=false;
  if (originalValues == null) {
    originalValues=new HashMap();
    fillOriginalValues=true;
  }
  for (int i=0; i < statOptions.length; i++) {
    try {
      String statDescriptionString=TopicMapStatOptions.describeStatOption(statOptions[i]);
      stats.append(statDescriptionString);
      statString=""String_Node_Str"";
      try {
        if (map != null) {
          statString=map.getStatistics(new TopicMapStatOptions(statOptions[i])).toString();
          if (fillOriginalValues) {
            originalValues.put(statOptions[i],statString);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (trackChanges) {
        originalStatString=originalValues.get(statOptions[i]).toString();
        stats.append(""String_Node_Str"").append(originalStatString);
        SimpleLabel originalValue=fieldLabels.get(""String_Node_Str"" + statOptions[i]);
        if (originalValue != null) {
          originalValue.setText(originalStatString);
        }
      }
      Color statValueColor=Color.BLACK;
      if (trackChanges) {
        try {
          int statInt=Integer.parseInt(statString);
          int originalInt=Integer.parseInt(originalStatString);
          int delta=statInt - originalInt;
          statString=(delta > 0 ? ""String_Node_Str"" + delta : ""String_Node_Str"" + delta);
          if (delta > 0)           statValueColor=Color.green.darker();
 else           if (delta < 0)           statValueColor=Color.red.darker();
        }
 catch (        Exception e) {
        }
      }
      stats.append(""String_Node_Str"").append(statString);
      statValue=fieldLabels.get(statOptions[i]);
      if (statValue != null) {
        statValue.setForeground(statValueColor);
        statValue.setText(statString);
      }
      stats.append(""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9715860899067006
117733,"@Override public void refresh() throws TopicMapException {
  if (infoPanel != null) {
    refreshInfo();
    infoPanel.revalidate();
    infoPanel.repaint();
  }
}","@Override public void refresh() throws TopicMapException {
  if (infoPanel != null) {
    requiresRefresh=true;
  }
}",0.75
117734,"@Override public void stop(){
}","@Override public void stop(){
  refresher.interrupt();
}",0.7126436781609196
117735,"@Override public Object[] getViewMenuStruct(){
  return new Object[]{""String_Node_Str""};
}","@Override public Object[] getViewMenuStruct(){
  return new Object[]{};
}",0.8957055214723927
117736,"@Override public void init(){
  searchPanel=new SearchPanel();
  similarityPanel=new SimilarityPanel();
  queryPanel=new QueryPanel();
  tmqlPanel=new TMQLPanel();
  Wandora wandora=Wandora.getWandora();
  this.options=new Options(wandora.getOptions());
  initComponents();
  try {
    tabbedPane.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        setCurrentPanel(tabbedPane.getSelectedComponent());
      }
    }
);
    setCurrentPanel(searchContainerPanel);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void init(){
  searchPanel=new SearchPanel();
  similarityPanel=new SimilarityPanel();
  queryPanel=new QueryPanel();
  tmqlPanel=new TMQLPanel();
  JScrollPane searchResultScrollPanel=searchPanel.getResultScrollPane();
  MouseWheelListener[] mouseWheelListeners=searchResultScrollPanel.getMouseWheelListeners();
  for (  MouseWheelListener listener : mouseWheelListeners) {
    searchResultScrollPanel.removeMouseWheelListener(listener);
  }
  Wandora wandora=Wandora.getWandora();
  this.options=new Options(wandora.getOptions());
  initComponents();
  try {
    tabbedPane.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        setCurrentPanel(tabbedPane.getSelectedComponent());
      }
    }
);
    setCurrentPanel(searchContainerPanel);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.796423658872077
117737,"public void topicRemoved(Topic t) throws TopicMapException {
  if (topicMapListeners.size() > 0) {
    LayeredTopic lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicRemoved(lt);
    }
  }
  removeTopicFromIndex(t.getOneSubjectIdentifier());
}","public void topicRemoved(Topic t) throws TopicMapException {
  if (!topicMapListeners.isEmpty()) {
    LayeredTopic lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicRemoved(lt);
    }
  }
  removeTopicFromIndex(t.getOneSubjectIdentifier());
}",0.9665551839464884
117738,"public void associationRemoved(Association a) throws TopicMapException {
  if (topicMapListeners.size() > 0) {
    for (    TopicMapListener listener : topicMapListeners) {
      listener.associationRemoved(makeLayeredAssociation(a));
    }
  }
}","public void associationRemoved(Association a) throws TopicMapException {
  if (!topicMapListeners.isEmpty()) {
    for (    TopicMapListener listener : topicMapListeners) {
      listener.associationRemoved(makeLayeredAssociation(a));
    }
  }
}",0.959349593495935
117739,"public void topicDataChanged(Topic t,Topic type,Topic version,String newValue,String oldValue) throws TopicMapException {
  if (topicMapListeners.size() > 0) {
    LayeredTopic lt=makeLayeredTopic(t);
    LayeredTopic ltype=makeLayeredTopic(type);
    LayeredTopic lversion=makeLayeredTopic(version);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicDataChanged(lt,ltype,lversion,newValue,oldValue);
    }
  }
}","public void topicDataChanged(Topic t,Topic type,Topic version,String newValue,String oldValue) throws TopicMapException {
  if (!topicMapListeners.isEmpty()) {
    LayeredTopic lt=makeLayeredTopic(t);
    LayeredTopic ltype=makeLayeredTopic(type);
    LayeredTopic lversion=makeLayeredTopic(version);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicDataChanged(lt,ltype,lversion,newValue,oldValue);
    }
  }
}",0.9774774774774776
117740,"public void topicSubjectLocatorChanged(Topic t,Locator newLocator,Locator oldLocator) throws TopicMapException {
  for (  Locator l : t.getSubjectIdentifiers()) {
    removeTopicFromIndex(l);
  }
  if (topicMapListeners.size() > 0) {
    LayeredTopic lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicSubjectLocatorChanged(lt,newLocator,oldLocator);
    }
  }
}","public void topicSubjectLocatorChanged(Topic t,Locator newLocator,Locator oldLocator) throws TopicMapException {
  for (  Locator l : t.getSubjectIdentifiers()) {
    removeTopicFromIndex(l);
  }
  if (!topicMapListeners.isEmpty()) {
    LayeredTopic lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicSubjectLocatorChanged(lt,newLocator,oldLocator);
    }
  }
}",0.9760191846522782
117741,"/** 
 * Clears topicIndex.
 */
public void clearTopicIndex(){
  if (!useTopicIndex)   return;
synchronized (indexLock) {
    topicIndex=new HashMap<Locator,LayeredTopic>();
  }
}","/** 
 * Clears topicIndex.
 */
public void clearTopicIndex(){
  if (!useTopicIndex)   return;
synchronized (indexLock) {
    topicIndex=new LinkedHashMap<Locator,LayeredTopic>();
  }
}",0.9834254143646408
117742,"public Collection<Topic> search(String query,TopicMapSearchOptions options) throws TopicMapException {
  TopicMapSearchOptions options2=options.duplicate();
  options2.maxResults=-1;
  HashSet<Topic> searchResult=new HashSet<Topic>();
  HashSet<Topic> searchResultLayered=new HashSet<Topic>();
  Outer:   for (  Layer l : visibleLayers) {
    searchResult.clear();
    searchResult.addAll(l.getTopicMap().search(query,options2));
    for (    Topic t : searchResult) {
      searchResultLayered.add(this.getTopic(t.getOneSubjectIdentifier()));
      if (options.maxResults >= 0 && searchResultLayered.size() >= options.maxResults)       break Outer;
    }
  }
  return searchResultLayered;
}","public Collection<Topic> search(String query,TopicMapSearchOptions options) throws TopicMapException {
  TopicMapSearchOptions options2=options.duplicate();
  options2.maxResults=-1;
  HashSet<Topic> searchResult=new LinkedHashSet<Topic>();
  HashSet<Topic> searchResultLayered=new LinkedHashSet<Topic>();
  Outer:   for (  Layer l : visibleLayers) {
    searchResult.clear();
    searchResult.addAll(l.getTopicMap().search(query,options2));
    for (    Topic t : searchResult) {
      searchResultLayered.add(this.getTopic(t.getOneSubjectIdentifier()));
      if (options.maxResults >= 0 && searchResultLayered.size() >= options.maxResults)       break Outer;
    }
  }
  return searchResultLayered;
}",0.9913916786226684
117743,"/** 
 * Makes layered topics for all topics in the collection. Note that some topics in the collection may end up in the same layered topic and thus the returned collection may have less items than the collection used as the parameter.
 */
Collection<Topic> makeLayeredTopics(Collection<Topic> ts) throws TopicMapException {
  Vector<Topic> ret=new Vector<Topic>();
  Set<Topic> processed=new KeyedHashSet<Topic>(new TopicAndLayerKeyMaker());
  for (  Topic t : ts) {
    if (processed.contains(t))     continue;
    Set<Topic> collected=collectTopics(t);
    processed.addAll(collected);
    ret.add(new LayeredTopic(collected,this));
  }
  return ret;
}","/** 
 * Makes layered topics for all topics in the collection. Note that some topics in the collection may end up in the same layered topic and thus the returned collection may have less items than the collection used as the parameter.
 */
Collection<Topic> makeLayeredTopics(Collection<Topic> ts) throws TopicMapException {
  ArrayList<Topic> ret=new ArrayList<Topic>();
  Set<Topic> processed=new KeyedHashSet<Topic>(new TopicAndLayerKeyMaker());
  for (  Topic t : ts) {
    if (processed.contains(t))     continue;
    Set<Topic> collected=collectTopics(t);
    processed.addAll(collected);
    ret.add(new LayeredTopic(collected,this));
  }
  return ret;
}",0.9772036474164134
117744,"public void associationChanged(Association a) throws TopicMapException {
  if (topicMapListeners.size() > 0) {
    LayeredAssociation la=null;
    if (a instanceof LayeredAssociation && a.getTopicMap() == this)     la=(LayeredAssociation)a;
 else     la=makeLayeredAssociation(a);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.associationChanged(la);
    }
  }
}","public void associationChanged(Association a) throws TopicMapException {
  if (!topicMapListeners.isEmpty()) {
    LayeredAssociation la=null;
    if (a instanceof LayeredAssociation && a.getTopicMap() == this)     la=(LayeredAssociation)a;
 else     la=makeLayeredAssociation(a);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.associationChanged(la);
    }
  }
}",0.9745547073791349
117745,"public Topic getTopicWithBaseName(String name) throws TopicMapException {
  HashSet<Topic> collected=new HashSet<Topic>();
  for (  Layer l : visibleLayers) {
    Topic t=l.getTopicMap().getTopicWithBaseName(name);
    if (t != null)     return makeLayeredTopic(t);
  }
  return null;
}","public Topic getTopicWithBaseName(String name) throws TopicMapException {
  HashSet<Topic> collected=new LinkedHashSet<Topic>();
  for (  Layer l : visibleLayers) {
    Topic t=l.getTopicMap().getTopicWithBaseName(name);
    if (t != null)     return makeLayeredTopic(t);
  }
  return null;
}",0.9896193771626296
117746,"public void topicVariantChanged(Topic t,Collection<Topic> scope,String newName,String oldName) throws TopicMapException {
  if (topicMapListeners.size() > 0) {
    LayeredTopic lt=makeLayeredTopic(t);
    Collection<Topic> lscope=makeLayeredTopics(scope);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicVariantChanged(lt,lscope,newName,oldName);
    }
  }
}","public void topicVariantChanged(Topic t,Collection<Topic> scope,String newName,String oldName) throws TopicMapException {
  if (!topicMapListeners.isEmpty()) {
    LayeredTopic lt=makeLayeredTopic(t);
    Collection<Topic> lscope=makeLayeredTopics(scope);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicVariantChanged(lt,lscope,newName,oldName);
    }
  }
}",0.9744897959183674
117747,"public Topic getTopicBySubjectLocator(Locator sl) throws TopicMapException {
  HashSet<Topic> collected=new HashSet<Topic>();
  for (  Layer l : visibleLayers) {
    Topic t=l.getTopicMap().getTopicBySubjectLocator(sl);
    if (t != null)     return makeLayeredTopic(t);
  }
  return null;
}","public Topic getTopicBySubjectLocator(Locator sl) throws TopicMapException {
  HashSet<Topic> collected=new LinkedHashSet<Topic>();
  for (  Layer l : visibleLayers) {
    Topic t=l.getTopicMap().getTopicBySubjectLocator(sl);
    if (t != null)     return makeLayeredTopic(t);
  }
  return null;
}",0.9897959183673468
117748,"public void associationTypeChanged(Association a,Topic newType,Topic oldType) throws TopicMapException {
  if (topicMapListeners.size() > 0) {
    LayeredAssociation la=makeLayeredAssociation(a);
    LayeredTopic lNewType=makeLayeredTopic(newType);
    LayeredTopic lOldType=makeLayeredTopic(oldType);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.associationTypeChanged(la,lNewType,lOldType);
    }
  }
}","public void associationTypeChanged(Association a,Topic newType,Topic oldType) throws TopicMapException {
  if (!topicMapListeners.isEmpty()) {
    LayeredAssociation la=makeLayeredAssociation(a);
    LayeredTopic lNewType=makeLayeredTopic(newType);
    LayeredTopic lOldType=makeLayeredTopic(oldType);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.associationTypeChanged(la,lNewType,lOldType);
    }
  }
}",0.9770642201834864
117749,"public void topicBaseNameChanged(Topic t,String newName,String oldName) throws TopicMapException {
  for (  Locator l : t.getSubjectIdentifiers()) {
    removeTopicFromIndex(l);
  }
  removeTopicFromIndex(t.getOneSubjectIdentifier());
  if (topicMapListeners.size() > 0) {
    LayeredTopic lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicBaseNameChanged(lt,newName,oldName);
    }
  }
}","public void topicBaseNameChanged(Topic t,String newName,String oldName) throws TopicMapException {
  for (  Locator l : t.getSubjectIdentifiers()) {
    removeTopicFromIndex(l);
  }
  removeTopicFromIndex(t.getOneSubjectIdentifier());
  if (!topicMapListeners.isEmpty()) {
    LayeredTopic lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicBaseNameChanged(lt,newName,oldName);
    }
  }
}",0.9774774774774776
117750,"public Collection<Topic> getTopicsOfType(Topic type) throws TopicMapException {
  Set<Topic> processed=new KeyedHashSet<Topic>(new TopicAndLayerKeyMaker());
  Vector<Topic> ret=new Vector<Topic>();
  LayeredTopic lt=(LayeredTopic)type;
  for (  Layer l : visibleLayers) {
    for (    Topic typeIn : lt.getTopicsForLayer(l)) {
      Collection<Topic> c=l.getTopicMap().getTopicsOfType(typeIn);
      for (      Topic t : c) {
        if (processed.contains(t))         continue;
        Set<Topic> collected=collectTopics(t);
        processed.addAll(collected);
        LayeredTopic add=new LayeredTopic(collected,this);
        addTopicToIndex(add);
        ret.add(add);
      }
    }
  }
  return ret;
}","public Collection<Topic> getTopicsOfType(Topic type) throws TopicMapException {
  Set<Topic> processed=new KeyedHashSet<Topic>(new TopicAndLayerKeyMaker());
  ArrayList<Topic> ret=new ArrayList<Topic>();
  LayeredTopic lt=(LayeredTopic)type;
  for (  Layer l : visibleLayers) {
    for (    Topic typeIn : lt.getTopicsForLayer(l)) {
      Collection<Topic> c=l.getTopicMap().getTopicsOfType(typeIn);
      for (      Topic t : c) {
        if (processed.contains(t))         continue;
        Set<Topic> collected=collectTopics(t);
        processed.addAll(collected);
        LayeredTopic add=new LayeredTopic(collected,this);
        addTopicToIndex(add);
        ret.add(add);
      }
    }
  }
  return ret;
}",0.9788732394366196
117751,"public LayerStack(){
  layers=new Vector<Layer>();
  visibleLayers=new Vector<Layer>();
  layerIndex=new HashMap<TopicMap,Layer>();
  topicMapListeners=new ArrayList<TopicMapListener>();
  containerListener=new ContainerTopicMapListener(){
    public void layerAdded(    Layer l){
      notifyLayersChanged();
      fireLayerAdded(l);
    }
    public void layerChanged(    Layer oldLayer,    Layer newLayer){
      notifyLayersChanged();
      fireLayerChanged(oldLayer,newLayer);
    }
    public void layerRemoved(    Layer l){
      notifyLayersChanged();
      fireLayerRemoved(l);
    }
    public void layerStructureChanged(){
      notifyLayersChanged();
      fireLayerStructureChanged();
    }
    public void layerVisibilityChanged(    Layer l){
      notifyLayersChanged();
      fireLayerVisibilityChanged(l);
    }
  }
;
}","public LayerStack(){
  layers=new Vector<Layer>();
  visibleLayers=new Vector<Layer>();
  layerIndex=new LinkedHashMap<TopicMap,Layer>();
  topicMapListeners=new ArrayList<TopicMapListener>();
  containerListener=new ContainerTopicMapListener(){
    public void layerAdded(    Layer l){
      notifyLayersChanged();
      fireLayerAdded(l);
    }
    public void layerChanged(    Layer oldLayer,    Layer newLayer){
      notifyLayersChanged();
      fireLayerChanged(oldLayer,newLayer);
    }
    public void layerRemoved(    Layer l){
      notifyLayersChanged();
      fireLayerRemoved(l);
    }
    public void layerStructureChanged(){
      notifyLayersChanged();
      fireLayerStructureChanged();
    }
    public void layerVisibilityChanged(    Layer l){
      notifyLayersChanged();
      fireLayerVisibilityChanged(l);
    }
  }
;
}",0.99642431466031
117752,"public void associationPlayerChanged(Association a,Topic role,Topic newPlayer,Topic oldPlayer) throws TopicMapException {
  if (topicMapListeners.size() > 0) {
    LayeredAssociation la=makeLayeredAssociation(a);
    LayeredTopic lrole=makeLayeredTopic(role);
    LayeredTopic lNewPlayer=makeLayeredTopic(newPlayer);
    LayeredTopic lOldPlayer=makeLayeredTopic(oldPlayer);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.associationPlayerChanged(la,lrole,lNewPlayer,lOldPlayer);
    }
  }
}","public void associationPlayerChanged(Association a,Topic role,Topic newPlayer,Topic oldPlayer) throws TopicMapException {
  if (!topicMapListeners.isEmpty()) {
    LayeredAssociation la=makeLayeredAssociation(a);
    LayeredTopic lrole=makeLayeredTopic(role);
    LayeredTopic lNewPlayer=makeLayeredTopic(newPlayer);
    LayeredTopic lOldPlayer=makeLayeredTopic(oldPlayer);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.associationPlayerChanged(la,lrole,lNewPlayer,lOldPlayer);
    }
  }
}",0.9807692307692308
117753,"public void topicChanged(Topic t) throws TopicMapException {
  for (  Locator l : t.getSubjectIdentifiers()) {
    removeTopicFromIndex(l);
  }
  if (topicMapListeners.size() > 0) {
    LayeredTopic lt=null;
    if (t instanceof LayeredTopic && t.getTopicMap() == this)     lt=(LayeredTopic)t;
 else     lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicChanged(lt);
    }
  }
}","public void topicChanged(Topic t) throws TopicMapException {
  for (  Locator l : t.getSubjectIdentifiers()) {
    removeTopicFromIndex(l);
  }
  if (!topicMapListeners.isEmpty()) {
    LayeredTopic lt=null;
    if (t instanceof LayeredTopic && t.getTopicMap() == this)     lt=(LayeredTopic)t;
 else     lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicChanged(lt);
    }
  }
}",0.976958525345622
117754,"public void topicSubjectIdentifierChanged(Topic t,Locator added,Locator removed) throws TopicMapException {
  if (removed != null)   removeTopicFromIndex(removed);
  if (added != null)   removeTopicFromIndex(added);
  for (  Locator l : t.getSubjectIdentifiers()) {
    removeTopicFromIndex(l);
  }
  if (topicMapListeners.size() > 0) {
    LayeredTopic lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicSubjectIdentifierChanged(lt,added,removed);
    }
  }
}","public void topicSubjectIdentifierChanged(Topic t,Locator added,Locator removed) throws TopicMapException {
  if (removed != null)   removeTopicFromIndex(removed);
  if (added != null)   removeTopicFromIndex(added);
  for (  Locator l : t.getSubjectIdentifiers()) {
    removeTopicFromIndex(l);
  }
  if (!topicMapListeners.isEmpty()) {
    LayeredTopic lt=makeLayeredTopic(t);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicSubjectIdentifierChanged(lt,added,removed);
    }
  }
}",0.9805825242718448
117755,"public Collection<Association> getAssociationsOfType(Topic type) throws TopicMapException {
  LayeredTopic lt=(LayeredTopic)type;
  KeyedHashMap<Topic,LayeredTopic> layeredTopics=new KeyedHashMap<Topic,LayeredTopic>(new TopicAndLayerKeyMaker());
  HashSet<Association> associations=new HashSet<Association>();
  for (  Layer l : visibleLayers) {
    for (    Topic typeIn : lt.getTopicsForLayer(l)) {
      Collection<Association> c=l.getTopicMap().getAssociationsOfType(typeIn);
      for (      Association a : c) {
        LayeredAssociation la=new LayeredAssociation(this,lt);
        for (        Topic role : a.getRoles()) {
          LayeredTopic lrole=getLayeredTopic(role,layeredTopics);
          Topic player=a.getPlayer(role);
          LayeredTopic lplayer=getLayeredTopic(player,layeredTopics);
          la.addLayeredPlayer(lplayer,lrole);
        }
        associations.add(la);
      }
    }
  }
  return associations;
}","public Collection<Association> getAssociationsOfType(Topic type) throws TopicMapException {
  LayeredTopic lt=(LayeredTopic)type;
  KeyedHashMap<Topic,LayeredTopic> layeredTopics=new KeyedHashMap<Topic,LayeredTopic>(new TopicAndLayerKeyMaker());
  HashSet<Association> associations=new LinkedHashSet<Association>();
  for (  Layer l : visibleLayers) {
    for (    Topic typeIn : lt.getTopicsForLayer(l)) {
      Collection<Association> c=l.getTopicMap().getAssociationsOfType(typeIn);
      for (      Association a : c) {
        LayeredAssociation la=new LayeredAssociation(this,lt);
        for (        Topic role : a.getRoles()) {
          LayeredTopic lrole=getLayeredTopic(role,layeredTopics);
          Topic player=a.getPlayer(role);
          LayeredTopic lplayer=getLayeredTopic(player,layeredTopics);
          la.addLayeredPlayer(lplayer,lrole);
        }
        associations.add(la);
      }
    }
  }
  return associations;
}",0.996808510638298
117756,"public void topicTypeChanged(Topic t,Topic added,Topic removed) throws TopicMapException {
  if (topicMapListeners.size() > 0) {
    LayeredTopic lt=makeLayeredTopic(t);
    LayeredTopic ladded=makeLayeredTopic(added);
    LayeredTopic lremoved=makeLayeredTopic(removed);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicTypeChanged(lt,ladded,lremoved);
    }
  }
}","public void topicTypeChanged(Topic t,Topic added,Topic removed) throws TopicMapException {
  if (!topicMapListeners.isEmpty()) {
    LayeredTopic lt=makeLayeredTopic(t);
    LayeredTopic ladded=makeLayeredTopic(added);
    LayeredTopic lremoved=makeLayeredTopic(removed);
    for (    TopicMapListener listener : topicMapListeners) {
      listener.topicTypeChanged(lt,ladded,lremoved);
    }
  }
}",0.9748743718592964
117757,"@Override public boolean equals(Object o){
  if (!o.getClass().equals(this.getClass()))   return false;
  LinkedTopic lt=(LinkedTopic)o;
  if (lt.topicMap != topicMap)   return false;
  if (!lt.wrappedTopic.equals(wrappedTopic))   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (o == null)   return false;
  if (!o.getClass().equals(this.getClass()))   return false;
  LinkedTopic lt=(LinkedTopic)o;
  if (lt.topicMap != topicMap)   return false;
  if (!lt.wrappedTopic.equals(wrappedTopic))   return false;
  return true;
}",0.9405405405405406
117758,"public boolean handleException(PatchException e){
  pes.add(e);
  if (yesToAll[0])   return true;
  int c=WandoraOptionPane.showConfirmDialog(admin,""String_Node_Str"" + e.level + ""String_Node_Str""+ e.message,""String_Node_Str"",WandoraOptionPane.YES_TO_ALL_NO_OPTION);
  if (c == WandoraOptionPane.YES_TO_ALL_OPTION) {
    yesToAll[0]=true;
    return true;
  }
 else   if (c == WandoraOptionPane.YES_OPTION)   return true;
 else {
    aborted[0]=true;
    return false;
  }
}","public boolean handleException(PatchException e){
  pes.add(e);
  if (yesToAll[0])   return false;
  int c=WandoraOptionPane.showConfirmDialog(admin,""String_Node_Str"" + e.level + ""String_Node_Str""+ e.message,""String_Node_Str"",WandoraOptionPane.YES_TO_ALL_NO_OPTION);
  if (c == WandoraOptionPane.YES_TO_ALL_OPTION) {
    yesToAll[0]=true;
    return false;
  }
 else   if (c == WandoraOptionPane.YES_OPTION)   return true;
 else {
    aborted[0]=true;
    return true;
  }
}",0.9778247096092924
117759,"@Override public void execute(final Wandora admin,Context context) throws TopicMapException {
  JDialog dialog=new JDialog(admin,""String_Node_Str"",true);
  ApplyPatchToolConfigPanel configPanel=new ApplyPatchToolConfigPanel(admin,dialog);
  dialog.getContentPane().add(configPanel);
  dialog.setSize(440,240);
  GuiTools.centerWindow(dialog,admin);
  dialog.setVisible(true);
  if (configPanel.wasCancelled())   return;
  setDefaultLogger();
  String filename=null;
  try {
    TopicMap tm=null;
    int mode=configPanel.getMapMode();
    if (mode == ApplyPatchToolConfigPanel.MODE_FILE) {
      filename=configPanel.getMapValue();
      if (filename != null && !""String_Node_Str"".equals(filename)) {
        log(""String_Node_Str"");
        tm=openFile(filename);
      }
 else {
        log(""String_Node_Str"");
        log(""String_Node_Str"");
        setState(WAIT);
        return;
      }
    }
 else     if (mode == ApplyPatchToolConfigPanel.MODE_LAYER) {
      Layer l=admin.getTopicMap().getLayer(configPanel.getMapValue());
      if (l == null) {
        log(""String_Node_Str"");
        log(""String_Node_Str"");
        setState(WAIT);
        return;
      }
      tm=l.getTopicMap();
    }
 else     if (mode == ApplyPatchToolConfigPanel.MODE_PROJECT) {
      tm=admin.getTopicMap();
    }
    filename=configPanel.getPatchFile();
    Reader reader=new InputStreamReader(new FileInputStream(filename),""String_Node_Str"");
    ArrayList<DiffEntry> diff=null;
    try {
      PatchDiffParser parser=new PatchDiffParser(reader);
      log(""String_Node_Str"");
      diff=parser.parse();
    }
  finally {
      reader.close();
    }
    TopicMapDiff tmDiff=new TopicMapDiff();
    if (configPanel.getPatchReverse()) {
      log(""String_Node_Str"");
      diff=tmDiff.makeInverse(diff);
    }
    log(""String_Node_Str"");
    final ArrayList<PatchException> pes=new ArrayList<PatchException>();
    final Boolean[] yesToAll=new Boolean[]{false};
    final Boolean[] aborted=new Boolean[]{false};
    tmDiff.applyDiff(diff,tm,new PatchExceptionHandler(){
      public boolean handleException(      PatchException e){
        pes.add(e);
        if (yesToAll[0])         return true;
        int c=WandoraOptionPane.showConfirmDialog(admin,""String_Node_Str"" + e.level + ""String_Node_Str""+ e.message,""String_Node_Str"",WandoraOptionPane.YES_TO_ALL_NO_OPTION);
        if (c == WandoraOptionPane.YES_TO_ALL_OPTION) {
          yesToAll[0]=true;
          return true;
        }
 else         if (c == WandoraOptionPane.YES_OPTION)         return true;
 else {
          aborted[0]=true;
          return false;
        }
      }
    }
);
    if (pes.size() > 0) {
      log(""String_Node_Str"");
      for (      PatchException pe : pes) {
        log(pe.level + ""String_Node_Str"" + pe.message);
      }
    }
    if (aborted[0])     log(""String_Node_Str"");
    if (mode == ApplyPatchToolConfigPanel.MODE_FILE) {
      filename=configPanel.getMapValue();
      int ind=filename.lastIndexOf(""String_Node_Str"");
      if (ind == -1)       filename+=""String_Node_Str"";
 else       filename=filename.substring(0,ind) + ""String_Node_Str"" + filename.substring(ind);
      File f=new File(filename);
      if (f.exists()) {
        int r=WandoraOptionPane.showConfirmDialog(admin,""String_Node_Str"" + filename + ""String_Node_Str"");
        if (r != WandoraOptionPane.YES_OPTION) {
          log(""String_Node_Str"");
          setState(WAIT);
          return;
        }
      }
      log(""String_Node_Str"" + filename);
      tm.exportXTM(filename,getCurrentLogger());
      log(""String_Node_Str"" + filename);
    }
 else {
      log(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException fnfe) {
    log(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
catch (  IOException ioe) {
    log(ioe);
  }
catch (  java.text.ParseException pe) {
    log(""String_Node_Str"" + pe.getErrorOffset() + ""String_Node_Str""+ pe.getMessage());
  }
  setState(WAIT);
}","@Override public void execute(final Wandora admin,Context context) throws TopicMapException {
  JDialog dialog=new JDialog(admin,""String_Node_Str"",true);
  ApplyPatchToolConfigPanel configPanel=new ApplyPatchToolConfigPanel(admin,dialog);
  dialog.getContentPane().add(configPanel);
  dialog.setSize(440,240);
  GuiTools.centerWindow(dialog,admin);
  dialog.setVisible(true);
  if (configPanel.wasCancelled())   return;
  setDefaultLogger();
  String filename=null;
  try {
    TopicMap tm=null;
    int mode=configPanel.getMapMode();
    if (mode == ApplyPatchToolConfigPanel.MODE_FILE) {
      filename=configPanel.getMapValue();
      if (filename != null && !""String_Node_Str"".equals(filename)) {
        log(""String_Node_Str"");
        tm=openFile(filename);
      }
 else {
        log(""String_Node_Str"");
        log(""String_Node_Str"");
        setState(WAIT);
        return;
      }
    }
 else     if (mode == ApplyPatchToolConfigPanel.MODE_LAYER) {
      Layer l=admin.getTopicMap().getLayer(configPanel.getMapValue());
      if (l == null) {
        log(""String_Node_Str"");
        log(""String_Node_Str"");
        setState(WAIT);
        return;
      }
      tm=l.getTopicMap();
    }
 else     if (mode == ApplyPatchToolConfigPanel.MODE_PROJECT) {
      tm=admin.getTopicMap();
    }
    filename=configPanel.getPatchFile();
    Reader reader=new InputStreamReader(new FileInputStream(filename),""String_Node_Str"");
    ArrayList<DiffEntry> diff=null;
    try {
      PatchDiffParser parser=new PatchDiffParser(reader);
      log(""String_Node_Str"");
      diff=parser.parse();
    }
  finally {
      reader.close();
    }
    TopicMapDiff tmDiff=new TopicMapDiff();
    if (configPanel.getPatchReverse()) {
      log(""String_Node_Str"");
      diff=tmDiff.makeInverse(diff);
    }
    log(""String_Node_Str"");
    final ArrayList<PatchException> pes=new ArrayList<PatchException>();
    final Boolean[] yesToAll=new Boolean[]{false};
    final Boolean[] aborted=new Boolean[]{false};
    tmDiff.applyDiff(diff,tm,new PatchExceptionHandler(){
      public boolean handleException(      PatchException e){
        pes.add(e);
        if (yesToAll[0])         return false;
        int c=WandoraOptionPane.showConfirmDialog(admin,""String_Node_Str"" + e.level + ""String_Node_Str""+ e.message,""String_Node_Str"",WandoraOptionPane.YES_TO_ALL_NO_OPTION);
        if (c == WandoraOptionPane.YES_TO_ALL_OPTION) {
          yesToAll[0]=true;
          return false;
        }
 else         if (c == WandoraOptionPane.YES_OPTION)         return true;
 else {
          aborted[0]=true;
          return true;
        }
      }
    }
);
    if (pes.size() > 0) {
      log(""String_Node_Str"");
      for (      PatchException pe : pes) {
        log(pe.level + ""String_Node_Str"" + pe.message);
      }
    }
    if (aborted[0])     log(""String_Node_Str"");
    if (mode == ApplyPatchToolConfigPanel.MODE_FILE) {
      filename=configPanel.getMapValue();
      int ind=filename.lastIndexOf(""String_Node_Str"");
      if (ind == -1)       filename+=""String_Node_Str"";
 else       filename=filename.substring(0,ind) + ""String_Node_Str"" + filename.substring(ind);
      File f=new File(filename);
      if (f.exists()) {
        int r=WandoraOptionPane.showConfirmDialog(admin,""String_Node_Str"" + filename + ""String_Node_Str"");
        if (r != WandoraOptionPane.YES_OPTION) {
          log(""String_Node_Str"");
          setState(WAIT);
          return;
        }
      }
      log(""String_Node_Str"" + filename);
      tm.exportXTM(filename,getCurrentLogger());
      log(""String_Node_Str"" + filename);
    }
 else {
      log(""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException fnfe) {
    log(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
catch (  IOException ioe) {
    log(ioe);
  }
catch (  java.text.ParseException pe) {
    log(""String_Node_Str"" + pe.getErrorOffset() + ""String_Node_Str""+ pe.getMessage());
  }
  setState(WAIT);
}",0.9973394146712276
117760,"@Override public void afterTextChanged(Editable s){
  if (TextUtils.isEmpty(s)) {
    if (mLabel.getVisibility() == View.VISIBLE) {
      hideLabel();
    }
  }
 else {
    if (mLabel.getVisibility() != View.VISIBLE) {
      showLabel();
    }
  }
}","@Override public void afterTextChanged(Editable s){
  if (TextUtils.isEmpty(s)) {
    if (mLabel.getVisibility() == View.VISIBLE || isAnimating) {
      hideLabel();
    }
  }
 else {
    if (mLabel.getVisibility() != View.VISIBLE & !isAnimating) {
      showLabel();
    }
  }
}",0.9431818181818182
117761,"@Override public void onAnimationEnd(Animation animation){
  mLabel.setVisibility(View.GONE);
}","@Override public void onAnimationEnd(Animation animation){
  mLabel.setVisibility(View.GONE);
  isAnimating=false;
}",0.9004739336492891
117762,"private void setEditText(EditText editText){
  mEditText=editText;
  mEditText.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      if (TextUtils.isEmpty(s)) {
        if (mLabel.getVisibility() == View.VISIBLE) {
          hideLabel();
        }
      }
 else {
        if (mLabel.getVisibility() != View.VISIBLE) {
          showLabel();
        }
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  mEditText.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean focused){
      mLabel.setActivated(focused);
    }
  }
);
  mLabel.setText(mEditText.getHint());
}","private void setEditText(EditText editText){
  mEditText=editText;
  mEditText.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      if (TextUtils.isEmpty(s)) {
        if (mLabel.getVisibility() == View.VISIBLE || isAnimating) {
          hideLabel();
        }
      }
 else {
        if (mLabel.getVisibility() != View.VISIBLE & !isAnimating) {
          showLabel();
        }
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  mEditText.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean focused){
      mLabel.setActivated(focused);
    }
  }
);
  mLabel.setText(mEditText.getHint());
}",0.9832402234636872
117763,"@Override public void onAnimationStart(Animation animation){
}","@Override public void onAnimationStart(Animation animation){
  isAnimating=true;
}",0.8611111111111112
117764,"/** 
 * Sets the Spinners' time selection as integers considering only time.
 */
public void setSelectedTime(int hour,int minute){
  timeSpinner.setSelectedTime(hour,minute);
}","/** 
 * Sets the Spinners' time selection as integers considering only time.
 */
public void setSelectedTime(int hour,int minute){
  timeSpinner.setSelectedTime(hour,minute);
  shouldSelectDefault=false;
}",0.9238845144356956
117765,"@Override protected void onRestoreInstanceState(Parcelable state){
  super.onRestoreInstanceState(state);
  if (state != null)   restoringViewState=true;
}","@Override protected void onRestoreInstanceState(Parcelable state){
  super.onRestoreInstanceState(state);
  if (state != null)   shouldSelectDefault=false;
}",0.8653846153846154
117766,"/** 
 * Sets the Spinners' date selection as integers considering only day.
 */
public void setSelectedDate(int year,int month,int day){
  dateSpinner.setSelectedDate(new GregorianCalendar(year,month,day));
}","/** 
 * Sets the Spinners' date selection as integers considering only day.
 */
public void setSelectedDate(int year,int month,int day){
  dateSpinner.setSelectedDate(new GregorianCalendar(year,month,day));
  shouldSelectDefault=false;
}",0.9348314606741572
117767,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (!restoringViewState)   selectDefaultDate();
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (shouldSelectDefault)   selectDefaultDate();
}",0.8828125
117768,"/** 
 * Sets the time format to use for formatting Calendar objects to displayable strings.
 * @param timeFormat The new time format (as java.text.DateFormat), or null to use the default format.
 */
public void setTimeFormat(java.text.DateFormat timeFormat){
  this.timeFormat=timeFormat;
  initTimePickerDialog(getContext());
  final boolean moreTimeItems=isShowingMoreTimeItems();
  final boolean numbersInView=((PickerSpinnerAdapter)getAdapter()).isShowingSecondaryTextInView();
  final Calendar selection=getSelectedTime();
  initAdapter(getContext());
  this.showMoreTimeItems=false;
  setShowMoreTimeItems(moreTimeItems);
  setShowNumbersInView(numbersInView);
  setSelectedTime(selection.get(Calendar.HOUR_OF_DAY),selection.get(Calendar.MINUTE));
}","/** 
 * Sets the time format to use for formatting Calendar objects to displayable strings.
 * @param timeFormat The new time format (as java.text.DateFormat), or null to use the default format.
 */
public void setTimeFormat(java.text.DateFormat timeFormat){
  this.timeFormat=timeFormat;
  initTimePickerDialog(getContext());
  final PickerSpinnerAdapter adapter=((PickerSpinnerAdapter)getAdapter());
  final boolean moreTimeItems=isShowingMoreTimeItems();
  final boolean numbersInView=adapter.isShowingSecondaryTextInView();
  final Calendar selection=getSelectedTime();
  final boolean temporarySelected=getSelectedItemPosition() == adapter.getCount();
  initAdapter(getContext());
  setShowNumbersInView(numbersInView);
  this.showMoreTimeItems=false;
  if (temporarySelected) {
    setSelectedTime(selection.get(Calendar.HOUR_OF_DAY),selection.get(Calendar.MINUTE));
    setShowMoreTimeItems(moreTimeItems);
  }
 else {
    setShowMoreTimeItems(moreTimeItems);
    setSelectedTime(selection.get(Calendar.HOUR_OF_DAY),selection.get(Calendar.MINUTE));
  }
}",0.6101321585903083
117769,"/** 
 * The returned String may be passed to   {@link #fromString(String)} to save and recreate this object easily.
 * @return The elements of this object separated by \n
 */
@Override public String toString(){
  String sep=""String_Node_Str"";
  return label + sep + digitalTime+ sep+ hour+ sep+ minute;
}","/** 
 * The returned String may be passed to   {@link #fromString(String)} to save and recreate this object easily.
 * @return The elements of this object separated by \n
 */
@Override public String toString(){
  String sep=""String_Node_Str"";
  return nullToEmpty(label) + sep + nullToEmpty(digitalTime)+ sep+ hour+ sep+ minute;
}",0.8801261829652997
117770,"/** 
 * Constructs a new TimeItem from a String previously gotten from the   {@link #toString()} method.
 * @param code The string to parse from.
 * @return A new TimeItem, or null if there was an error.
 */
public static TimeItem fromString(String code){
  String[] items=code.split(""String_Node_Str"");
  if (items.length != 4)   return null;
  int hour, minute;
  try {
    hour=Integer.parseInt(items[2]);
    minute=Integer.parseInt(items[3]);
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
    return null;
  }
  return new TimeItem(items[0],items[1],hour,minute);
}","/** 
 * Constructs a new TimeItem from a String previously gotten from the   {@link #toString()} method.
 * @param code The string to parse from.
 * @return A new TimeItem, or null if there was an error.
 */
public static TimeItem fromString(String code){
  String[] items=code.split(""String_Node_Str"");
  if (items.length != 4)   return null;
  int hour, minute;
  try {
    hour=Integer.parseInt(items[2]);
    minute=Integer.parseInt(items[3]);
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
    return null;
  }
  return new TimeItem(emptyToNull(items[0]),emptyToNull(items[1]),hour,minute);
}",0.978441127694859
117771,"/** 
 * Construct a new PickerSpinner with the given context's theme, the supplied attribute set, and default style.
 * @param context The Context the view is running in, through which it can access the current theme, resources, etc.
 * @param attrs The attributes of the XML tag that is inflating the view.
 * @param defStyle The default style to apply to this view. If 0, no style will be applied (beyondwhat is included in the theme). This may either be an attribute resource, whose value will be retrieved from the current theme, or an explicit style resource.
 */
public PickerSpinner(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs);
  PickerSpinnerAdapter adapter=new PickerSpinnerAdapter(context,getSpinnerItems(),new TwinTextItem.Simple(getFooter(),null));
  setAdapter(adapter);
}","/** 
 * Construct a new PickerSpinner with the given context's theme, the supplied attribute set, and default style.
 * @param context The Context the view is running in, through which it can access the current theme, resources, etc.
 * @param attrs The attributes of the XML tag that is inflating the view.
 * @param defStyle The default style to apply to this view. If 0, no style will be applied (beyondwhat is included in the theme). This may either be an attribute resource, whose value will be retrieved from the current theme, or an explicit style resource.
 */
public PickerSpinner(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs);
  initAdapter(context);
}",0.9115103127079176
117772,"/** 
 * Construct a new TimeSpinner with the given context's theme, the supplied attribute set, and default style.
 * @param context The Context the view is running in, through which it can access the current theme, resources, etc.
 * @param attrs The attributes of the XML tag that is inflating the view. May contain a flags attribute.
 * @param defStyle The default style to apply to this view. If 0, no style will be applied (beyondwhat is included in the theme). This may either be an attribute resource, whose value will be retrieved from the current theme, or an explicit style resource.
 */
public TimeSpinner(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  if (context instanceof OnTimeSelectedListener)   setOnTimeSelectedListener((OnTimeSelectedListener)context);
  setOnItemSelectedListener(this);
  final Calendar calendar=Calendar.getInstance();
  timePickerDialog=TimePickerDialog.newInstance(new TimePickerDialog.OnTimeSetListener(){
    @Override public void onTimeSet(    RadialPickerLayout radialPickerLayout,    int hour,    int minute){
      setSelectedTime(hour,minute);
    }
  }
,calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),DateFormat.is24HourFormat(context),hasVibratePermission(context));
  try {
    fragmentManager=((FragmentActivity)context).getSupportFragmentManager();
  }
 catch (  ClassCastException e) {
    Log.d(getClass().getSimpleName(),""String_Node_Str"");
  }
  if (attrs != null) {
    TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.ReminderDatePicker);
    int flags=a.getInt(R.styleable.ReminderDatePicker_flags,ReminderDatePicker.MODE_GOOGLE);
    setFlags(flags);
  }
}","/** 
 * Construct a new TimeSpinner with the given context's theme, the supplied attribute set, and default style.
 * @param context The Context the view is running in, through which it can access the current theme, resources, etc.
 * @param attrs The attributes of the XML tag that is inflating the view. May contain a flags attribute.
 * @param defStyle The default style to apply to this view. If 0, no style will be applied (beyondwhat is included in the theme). This may either be an attribute resource, whose value will be retrieved from the current theme, or an explicit style resource.
 */
public TimeSpinner(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  if (context instanceof OnTimeSelectedListener)   setOnTimeSelectedListener((OnTimeSelectedListener)context);
  setOnItemSelectedListener(this);
  initTimePickerDialog(context);
  try {
    fragmentManager=((FragmentActivity)context).getSupportFragmentManager();
  }
 catch (  ClassCastException e) {
    Log.d(getClass().getSimpleName(),""String_Node_Str"");
  }
  if (attrs != null) {
    TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.ReminderDatePicker);
    int flags=a.getInt(R.styleable.ReminderDatePicker_flags,ReminderDatePicker.MODE_GOOGLE);
    setFlags(flags);
  }
}",0.8643384822028207
117773,"@Override public List<TwinTextItem> getSpinnerItems(){
  final Resources res=getResources();
  ArrayList<TwinTextItem> items=new ArrayList<TwinTextItem>(4);
  items.add(new TimeItem(res.getString(R.string.time_morning),9,0));
  items.add(new TimeItem(res.getString(R.string.time_afternoon),13,0));
  items.add(new TimeItem(res.getString(R.string.time_evening),17,0));
  items.add(new TimeItem(res.getString(R.string.time_night),20,0));
  return items;
}","@Override public List<TwinTextItem> getSpinnerItems(){
  final Resources res=getResources();
  ArrayList<TwinTextItem> items=new ArrayList<TwinTextItem>(4);
  items.add(new TimeItem(res.getString(R.string.time_morning),formatTime(9,0),9,0));
  items.add(new TimeItem(res.getString(R.string.time_afternoon),formatTime(13,0),13,0));
  items.add(new TimeItem(res.getString(R.string.time_evening),formatTime(17,0),17,0));
  items.add(new TimeItem(res.getString(R.string.time_night),formatTime(20,0),20,0));
  return items;
}",0.9311408016443988
117774,"/** 
 * Toggles showing more time items. If enabled, a noon and a late night time item are shown.
 * @param enable True to enable, false to disable more time items.
 */
public void setShowMoreTimeItems(boolean enable){
  if (enable && !showMoreTimeItems) {
    final Resources res=getResources();
    insertAdapterItem(new TimeItem(res.getString(R.string.time_afternoon_2),14,0),2);
    removeAdapterItemAt(1);
    insertAdapterItem(new TimeItem(res.getString(R.string.time_noon),12,0),1);
    addAdapterItem(new TimeItem(res.getString(R.string.time_late_night),23,0));
  }
 else   if (!enable && showMoreTimeItems) {
    insertAdapterItem(new TimeItem(getResources().getString(R.string.time_afternoon),13,0),3);
    removeAdapterItemAt(2);
    removeAdapterItemAt(1);
    removeAdapterItemAt(getLastItemPosition());
  }
  showMoreTimeItems=enable;
}","/** 
 * Toggles showing more time items. If enabled, a noon and a late night time item are shown.
 * @param enable True to enable, false to disable more time items.
 */
public void setShowMoreTimeItems(boolean enable){
  if (enable && !showMoreTimeItems) {
    final Resources res=getResources();
    insertAdapterItem(new TimeItem(res.getString(R.string.time_afternoon_2),formatTime(14,0),14,0),2);
    removeAdapterItemAt(1);
    insertAdapterItem(new TimeItem(res.getString(R.string.time_noon),formatTime(12,0),12,0),1);
    addAdapterItem(new TimeItem(res.getString(R.string.time_late_night),formatTime(23,0),23,0));
  }
 else   if (!enable && showMoreTimeItems) {
    insertAdapterItem(new TimeItem(getResources().getString(R.string.time_afternoon),formatTime(13,0),13,0),3);
    removeAdapterItemAt(2);
    removeAdapterItemAt(1);
    removeAdapterItemAt(getLastItemPosition());
  }
  showMoreTimeItems=enable;
}",0.9615384615384616
117775,"/** 
 * Sets the time format to use for formatting Calendar objects to displayable strings.
 * @param timeFormat The new time format (as java.text.DateFormat), or null to use the default format.
 */
public void setTimeFormat(java.text.DateFormat timeFormat){
  this.timeFormat=timeFormat;
}","/** 
 * Sets the time format to use for formatting Calendar objects to displayable strings.
 * @param timeFormat The new time format (as java.text.DateFormat), or null to use the default format.
 */
public void setTimeFormat(java.text.DateFormat timeFormat){
  this.timeFormat=timeFormat;
  initTimePickerDialog(getContext());
  initAdapter(getContext());
}",0.8964451313755796
117776,"/** 
 * Sets the Spinner's selection as date. If the date was not in the possible selections, a temporary item is created and passed to selectTemporary().
 * @param date The date to be selected.
 */
public void setSelectedDate(Calendar date){
  final int count=getAdapter().getCount() - 1;
  int itemPosition=-1;
  for (int i=0; i < count; i++) {
    if (getAdapter().getItem(i).equals(date)) {
      itemPosition=i;
      break;
    }
  }
  if (itemPosition >= 0)   setSelection(itemPosition);
 else {
    final long MILLIS_IN_DAY=1000 * 60 * 60* 24;
    final long dateDifference=(date.getTimeInMillis() / MILLIS_IN_DAY) - (Calendar.getInstance().getTimeInMillis() / MILLIS_IN_DAY);
    if (dateDifference > 0 && dateDifference <= 7) {
      final int day=date.get(Calendar.DAY_OF_WEEK);
      selectTemporary(new DateItem(getWeekDay(day,R.string.date_next_weekday),date));
    }
 else {
      selectTemporary(new DateItem(formatDate(date),date));
    }
  }
}","/** 
 * Sets the Spinner's selection as date. If the date was not in the possible selections, a temporary item is created and passed to selectTemporary().
 * @param date The date to be selected.
 */
public void setSelectedDate(Calendar date){
  final int count=getAdapter().getCount() - 1;
  int itemPosition=-1;
  for (int i=0; i < count; i++) {
    if (getAdapter().getItem(i).equals(date)) {
      itemPosition=i;
      break;
    }
  }
  if (itemPosition >= 0)   setSelection(itemPosition);
 else   if (showWeekdayNames) {
    final long MILLIS_IN_DAY=1000 * 60 * 60* 24;
    final long dateDifference=(date.getTimeInMillis() / MILLIS_IN_DAY) - (Calendar.getInstance().getTimeInMillis() / MILLIS_IN_DAY);
    if (dateDifference > 0 && dateDifference < 7) {
      final int day=date.get(Calendar.DAY_OF_WEEK);
      selectTemporary(new DateItem(getWeekDay(day,R.string.date_only_weekday),date));
    }
 else {
      selectTemporary(new DateItem(formatDate(date),date));
    }
  }
 else {
    selectTemporary(new DateItem(formatDate(date),date));
  }
}",0.9488833746898264
117777,"/** 
 * Set the flags to use for this date spinner.
 * @param modeOrFlags A mode of ReminderDatePicker.MODE_... or multiple ReminderDatePicker.FLAG_...combined with the | operator.
 */
public void setFlags(int modeOrFlags){
  setShowPastItems((modeOrFlags & ReminderDatePicker.FLAG_PAST) != 0);
  setShowMonthItem((modeOrFlags & ReminderDatePicker.FLAG_MONTH) != 0);
}","/** 
 * Set the flags to use for this date spinner.
 * @param modeOrFlags A mode of ReminderDatePicker.MODE_... or multiple ReminderDatePicker.FLAG_...combined with the | operator.
 */
public void setFlags(int modeOrFlags){
  setShowPastItems((modeOrFlags & ReminderDatePicker.FLAG_PAST) != 0);
  setShowMonthItem((modeOrFlags & ReminderDatePicker.FLAG_MONTH) != 0);
  setShowWeekdayNames((modeOrFlags & ReminderDatePicker.FLAG_WEEKDAY_NAMES) != 0);
}",0.8986568986568987
117778,"/** 
 * Toggles showing the month item. Month mode an item in exactly one month from now.
 * @param enable True to enable, false to disable month mode.
 */
public void setShowMonthItem(boolean enable){
  PickerSpinnerAdapter adapter=(PickerSpinnerAdapter)getAdapter();
  if (enable && !showMonthItem) {
    final Calendar date=Calendar.getInstance();
    date.add(Calendar.MONTH,1);
    adapter.add(new DateItem(formatDate(date),date));
  }
 else   if (!enable && showMonthItem) {
    int monthPosition=adapter.getCount() - 2;
    if (getSelectedItemPosition() == monthPosition)     setSelection(monthPosition - 1);
    adapter.remove(adapter.getItem(monthPosition));
  }
  if (enable != showMonthItem) {
    adapter.notifyDataSetChanged();
    showMonthItem=enable;
  }
}","/** 
 * Toggles showing the month item. Month mode an item in exactly one month from now.
 * @param enable True to enable, false to disable month mode.
 */
public void setShowMonthItem(boolean enable){
  if (enable && !showMonthItem) {
    final Calendar date=Calendar.getInstance();
    date.add(Calendar.MONTH,1);
    addAdapterItem(new DateItem(formatDate(date),date));
  }
 else   if (!enable && showMonthItem) {
    removeAdapterItemAt(getLastItemPosition());
  }
  showMonthItem=enable;
}",0.6729857819905213
117779,"/** 
 * Toggles showing the past items. Past mode shows the yesterday and last weekday item.
 * @param enable True to enable, false to disable past mode.
 */
public void setShowPastItems(boolean enable){
  PickerSpinnerAdapter adapter=(PickerSpinnerAdapter)getAdapter();
  if (enable && !showPastItems) {
    final Resources res=getResources();
    final Calendar date=Calendar.getInstance();
    date.add(Calendar.DAY_OF_YEAR,-1);
    adapter.insert(new DateItem(res.getString(R.string.date_yesterday),date),0);
    date.add(Calendar.DAY_OF_YEAR,-6);
    adapter.insert(new DateItem(getWeekDay(date.get(Calendar.DAY_OF_WEEK),R.string.date_last_weekday),date),0);
    setSelection(getSelectedItemPosition() + 2);
  }
 else   if (!enable && showPastItems) {
    int selection=getSelectedItemPosition();
    if (selection >= 2)     setSelection(selection - 2);
 else     setSelection(0);
    adapter.remove(adapter.getItem(0));
    adapter.remove(adapter.getItem(0));
  }
  if (enable != showPastItems) {
    adapter.notifyDataSetChanged();
    showPastItems=enable;
  }
}","/** 
 * Toggles showing the past items. Past mode shows the yesterday and last weekday item.
 * @param enable True to enable, false to disable past mode.
 */
public void setShowPastItems(boolean enable){
  if (enable && !showPastItems) {
    final Resources res=getResources();
    final Calendar date=Calendar.getInstance();
    date.add(Calendar.DAY_OF_YEAR,-1);
    insertAdapterItem(new DateItem(res.getString(R.string.date_yesterday),date),0);
    date.add(Calendar.DAY_OF_YEAR,-6);
    insertAdapterItem(new DateItem(getWeekDay(date.get(Calendar.DAY_OF_WEEK),R.string.date_last_weekday),date),0);
  }
 else   if (!enable && showPastItems) {
    removeAdapterItemAt(0);
    removeAdapterItemAt(0);
  }
  showPastItems=enable;
}",0.7003329633740288
117780,"@Override public void setSelection(int position){
  if (position == getCount() - 1)   onFooterClick();
 else {
    ((PickerSpinnerAdapter)getAdapter()).selectTemporary(null);
    super.setSelection(position);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setSelection(int position){
  if (position == getCount() - 1 && ((PickerSpinnerAdapter)getAdapter()).hasFooter())   onFooterClick();
 else {
    ((PickerSpinnerAdapter)getAdapter()).selectTemporary(null);
    super.setSelection(position);
  }
}",0.8221343873517787
117781,"/** 
 * Push an item to be selected, but not shown in the dropdown menu. This is similar to calling setText(item.toString()) if a Spinner had such a method.
 * @param item The item to select, or null to remove any temporary selection.
 */
public void selectTemporary(TwinTextItem item){
  ((PickerSpinnerAdapter)getAdapter()).selectTemporary(item);
  final int tempItemPosition=getCount();
  if (getSelectedItemPosition() == tempItemPosition) {
    interceptNextSelectionCallback=true;
    super.setSelection(0,false);
  }
  super.setSelection(tempItemPosition);
}","/** 
 * Push an item to be selected, but not shown in the dropdown menu. This is similar to calling setText(item.toString()) if a Spinner had such a method.
 * @param item The item to select, or null to remove any temporary selection.
 */
public void selectTemporary(TwinTextItem item){
  if (item == null) {
    setSelection(getLastItemPosition());
    return;
  }
  ((PickerSpinnerAdapter)getAdapter()).selectTemporary(item);
  final int tempItemPosition=getCount();
  if (getSelectedItemPosition() == tempItemPosition) {
    setSelectionQuietly(0);
  }
  super.setSelection(tempItemPosition);
}",0.8234280792420328
117782,"/** 
 * Toggles showing the past items. Past mode shows the yesterday and last weekday item.
 * @param enable True to enable, false to disable past mode.
 */
public void setShowPastItems(boolean enable){
  if (enable && !showPastItems) {
    final Resources res=getResources();
    final Calendar date=Calendar.getInstance();
    date.add(Calendar.DAY_OF_YEAR,-1);
    insertAdapterItem(new DateItem(res.getString(R.string.date_yesterday),date),0);
    date.add(Calendar.DAY_OF_YEAR,-6);
    insertAdapterItem(new DateItem(getWeekDay(date.get(Calendar.DAY_OF_WEEK),R.string.date_last_weekday),date),0);
  }
 else   if (!enable && showPastItems) {
    if (getSelectedItemPosition() == getCount())     setSelection(2);
    removeAdapterItemAt(0);
    removeAdapterItemAt(0);
  }
  showPastItems=enable;
}","/** 
 * Toggles showing the past items. Past mode shows the yesterday and last weekday item.
 * @param enable True to enable, false to disable past mode.
 */
public void setShowPastItems(boolean enable){
  if (enable && !showPastItems) {
    final Resources res=getResources();
    final Calendar date=Calendar.getInstance();
    date.add(Calendar.DAY_OF_YEAR,-1);
    insertAdapterItem(new DateItem(res.getString(R.string.date_yesterday),date),0);
    date.add(Calendar.DAY_OF_YEAR,-6);
    insertAdapterItem(new DateItem(getWeekDay(date.get(Calendar.DAY_OF_WEEK),R.string.date_last_weekday),date),0);
  }
 else   if (!enable && showPastItems) {
    removeAdapterItemAt(1);
    removeAdapterItemAt(0);
  }
  showPastItems=enable;
}",0.8526727509778357
117783,"@Override public void setOnItemSelectedListener(final OnItemSelectedListener listener){
  super.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!interceptNextSelectionCallback)       listener.onItemSelected(parent,view,position,id);
      interceptNextSelectionCallback=false;
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      listener.onNothingSelected(parent);
    }
  }
);
}","@Override public void setOnItemSelectedListener(final OnItemSelectedListener listener){
  super.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (interceptNextSelectionCallbacks > 0) {
        interceptNextSelectionCallbacks--;
        if (reselectTemporaryItem) {
          if (position != getAdapter().getCount())           setSelectionQuietly(getAdapter().getCount());
          reselectTemporaryItem=false;
        }
      }
 else       listener.onItemSelected(parent,view,position,id);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      listener.onNothingSelected(parent);
    }
  }
);
}",0.7217928902627512
117784,"/** 
 * Removes the specified item from the adapter and takes care of handling selection changes. Always call this method instead of getAdapter().remove().
 * @param index The index of the item to be removed.
 */
public void removeAdapterItemAt(int index){
  PickerSpinnerAdapter adapter=(PickerSpinnerAdapter)getAdapter();
  int count=adapter.getCount();
  int selection=getSelectedItemPosition();
  if (index == count)   selectTemporary(null);
 else   if (index == count - 1 && adapter.hasFooter()) {
    if (selection == count)     setSelectionQuietly(selection - 1);
    adapter.setFooter(null);
  }
 else {
    if (index == selection) {
      if (index == getLastItemPosition())       setSelection(selection - 1);
 else       setSelection(selection);
    }
 else     if (index < selection && selection != count)     setSelectionQuietly(selection - 1);
    adapter.remove(adapter.getItem(index));
    if (selection == count)     setSelectionQuietly(selection - 1);
  }
}","/** 
 * Removes the specified item from the adapter and takes care of handling selection changes. Always call this method instead of getAdapter().remove().
 * @param index The index of the item to be removed.
 */
public void removeAdapterItemAt(int index){
  PickerSpinnerAdapter adapter=(PickerSpinnerAdapter)getAdapter();
  int count=adapter.getCount();
  int selection=getSelectedItemPosition();
  if (index == count)   selectTemporary(null);
 else   if (index == count - 1 && adapter.hasFooter()) {
    if (selection == count)     setSelectionQuietly(selection - 1);
    adapter.setFooter(null);
  }
 else {
    if (index == selection) {
      if (index == getLastItemPosition())       setSelection(selection - 1);
 else {
        setSelectionQuietly(index == 0 && count > 1 ? 1 : 0);
        setSelection(selection);
      }
    }
 else     if (index < selection && selection != count)     setSelectionQuietly(selection - 1);
    adapter.remove(adapter.getItem(index));
    if (selection == count) {
      reselectTemporaryItem=true;
      setSelectionQuietly(selection - 1);
    }
  }
}",0.9012584704743466
117785,"/** 
 * Equivalent to   {@link #setSelection(int)}, but without calling any onItemSelectedListeners or checking for footer clicks.
 */
private void setSelectionQuietly(int position){
  interceptNextSelectionCallback=true;
  super.setSelection(position,false);
  interceptNextSelectionCallback=true;
  super.setSelection(position);
}","/** 
 * Equivalent to   {@link #setSelection(int)}, but without calling any onItemSelectedListeners or checking for footer clicks.
 */
private void setSelectionQuietly(int position){
  interceptNextSelectionCallbacks++;
  super.setSelection(position,false);
  super.setSelection(position);
}",0.8346709470304976
117786,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (!interceptNextSelectionCallback)   listener.onItemSelected(parent,view,position,id);
  interceptNextSelectionCallback=false;
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (interceptNextSelectionCallbacks > 0) {
    interceptNextSelectionCallbacks--;
    if (reselectTemporaryItem) {
      if (position != getAdapter().getCount())       setSelectionQuietly(getAdapter().getCount());
      reselectTemporaryItem=false;
    }
  }
 else   listener.onItemSelected(parent,view,position,id);
}",0.3867924528301887
117787,"/** 
 * {@inheritDoc}
 */
@Override public void setSelection(int position){
  if (position == getCount() - 1 && ((PickerSpinnerAdapter)getAdapter()).hasFooter())   onFooterClick();
 else {
    ((PickerSpinnerAdapter)getAdapter()).selectTemporary(null);
    super.setSelection(position);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setSelection(int position){
  if (position == getCount() - 1 && ((PickerSpinnerAdapter)getAdapter()).hasFooter())   onFooterClick();
 else {
    ((PickerSpinnerAdapter)getAdapter()).selectTemporary(null);
    interceptNextSelectionCallbacks=0;
    super.setSelection(position);
    super.setSelection(position,false);
  }
}",0.8808446455505279
117788,"/** 
 * Toggles showing more time items. If enabled, a noon and a late night time item are shown.
 * @param enable True to enable, false to disable more time items.
 */
public void setShowMoreTimeItems(boolean enable){
  if (enable && !showMoreTimeItems) {
    final Resources res=getResources();
    insertAdapterItem(new TimeItem(res.getString(R.string.time_afternoon_2),14,0),2);
    removeAdapterItemAt(1);
    insertAdapterItem(new TimeItem(res.getString(R.string.time_noon),12,0),1);
    addAdapterItem(new TimeItem(res.getString(R.string.time_late_night),23,0));
  }
 else   if (!enable && showMoreTimeItems) {
    removeAdapterItemAt(1);
    removeAdapterItemAt(getLastItemPosition());
    if (getCount() == getSelectedItemPosition())     setSelection(0);
    insertAdapterItem(new TimeItem(getResources().getString(R.string.time_afternoon),13,0),2);
    removeAdapterItemAt(1);
  }
  showMoreTimeItems=enable;
}","/** 
 * Toggles showing more time items. If enabled, a noon and a late night time item are shown.
 * @param enable True to enable, false to disable more time items.
 */
public void setShowMoreTimeItems(boolean enable){
  if (enable && !showMoreTimeItems) {
    final Resources res=getResources();
    insertAdapterItem(new TimeItem(res.getString(R.string.time_afternoon_2),14,0),2);
    removeAdapterItemAt(1);
    insertAdapterItem(new TimeItem(res.getString(R.string.time_noon),12,0),1);
    addAdapterItem(new TimeItem(res.getString(R.string.time_late_night),23,0));
  }
 else   if (!enable && showMoreTimeItems) {
    insertAdapterItem(new TimeItem(getResources().getString(R.string.time_afternoon),13,0),3);
    removeAdapterItemAt(2);
    removeAdapterItemAt(1);
    removeAdapterItemAt(getLastItemPosition());
  }
  showMoreTimeItems=enable;
}",0.8745762711864407
117789,"/** 
 * Invokes the super implemntation of a method like ""super.foo(o)"".
 * @param overridenMethod the method to generate the super impl invocation of.
 * @return the super implemntation of a method like ""super.foo(o)"".
 * @throws NotFoundException if a type is not found (like parameter types).
 */
public String invokeSuper(CtMethod method) throws NotFoundException {
  return ""String_Node_Str"" + method.getName() + ""String_Node_Str""+ extractParameters(method)+ ""String_Node_Str"";
}","/** 
 * Invokes the super implemntation of a method like ""super.foo(o)"".
 * @param method the method to generate the super impl invocation of.
 * @return the super implemntation of a method like ""super.foo(o)"".
 * @throws NotFoundException if a type is not found (like parameter types).
 */
public String invokeSuper(CtMethod method) throws NotFoundException {
  return ""String_Node_Str"" + method.getName() + ""String_Node_Str""+ extractParameters(method)+ ""String_Node_Str"";
}",0.9885297184567258
117790,"private void doInsertBodyInFullMethod(){
  if (fullMethod != null) {
    fullMethod=fullMethod.replace(InsertableMethod.BODY_TAG,body);
  }
}","private void doInsertBodyInFullMethod(){
  if (fullMethod != null) {
    if (!fullMethod.contains(InsertableMethod.BODY_TAG)) {
      log.fine(""String_Node_Str"" + InsertableMethod.BODY_TAG + ""String_Node_Str"");
    }
    fullMethod=fullMethod.replace(InsertableMethod.BODY_TAG,body);
  }
}",0.6558139534883721
117791,"@Override protected void applyTransformations(CtClass classToTransform) throws Exception {
  afterBurner.afterOverrideMethod(classToTransform,""String_Node_Str"",""String_Node_Str"");
  InsertableMethodBuilder builder=new InsertableMethodBuilder(afterBurner);
  builder.insertIntoClass(classToTransform).inMethodIfExists(""String_Node_Str"").beforeACallTo(""String_Node_Str"").withBody(""String_Node_Str"").elseCreateMethodIfNotExists(""String_Node_Str"").doIt();
}","@Override protected void applyTransformations(CtClass classToTransform) throws Exception {
  getLogger().debug(""String_Node_Str"" + classToTransform.getName());
  afterBurner.afterOverrideMethod(classToTransform,""String_Node_Str"",""String_Node_Str"");
  InsertableMethodBuilder builder=new InsertableMethodBuilder(afterBurner);
  builder.insertIntoClass(classToTransform).inMethodIfExists(""String_Node_Str"").beforeACallTo(""String_Node_Str"").withBody(""String_Node_Str"").elseCreateMethodIfNotExists(""String_Node_Str"").doIt();
}",0.9292307692307692
117792,"private static void matchContextForPrperties(Properties properties,IConnParamName param,String genericVariableName,String prefixName){
  for (  NamedThing nameThing : properties.getProperties()) {
    if (nameThing != null && nameThing instanceof Property) {
      Property property=(Property)nameThing;
      Object paramValue=property.getStoredValue();
      if (GenericTypeUtils.isListStringType(property) && paramValue != null) {
        String propertyValue=ContextParameterUtils.getNewScriptCode(prefixName + ConnectionContextHelper.LINE + ContextParameterUtils.getValidParameterName(property.getName()),LanguageManager.getCurrentLanguage());
        property.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,true);
        List<String> driverList=new ArrayList<String>();
        driverList.add(propertyValue);
        property.setValue(driverList);
      }
    }
  }
}","private static void matchContextForPrperties(Properties properties,IConnParamName param,String genericVariableName,String prefixName){
  for (  NamedThing nameThing : properties.getProperties()) {
    if (nameThing != null && nameThing instanceof Property) {
      Property property=(Property)nameThing;
      Object paramValue=property.getStoredValue();
      if (GenericTypeUtils.isListStringType(property) && paramValue != null) {
        String propertyValue=ContextParameterUtils.getNewScriptCode(genericVariableName,ECodeLanguage.JAVA);
        property.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,true);
        List<String> driverList=new ArrayList<String>();
        driverList.add(propertyValue);
        property.setValue(driverList);
      }
    }
  }
}",0.8979343863912516
117793,"public static void setPropertiesForContextMode(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  if (connection == null) {
    return;
  }
  ComponentProperties componentProperties=getComponentProperties(connection);
  String originalVariableName=prefixName + ConnectionContextHelper.LINE;
  String genericVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof GenericConnParamName) {
      GenericConnParamName genericParam=(GenericConnParamName)param;
      String paramVarName=genericParam.getContextVar();
      genericVariableName=originalVariableName + paramVarName;
      matchContextForAttribues(componentProperties,genericParam,genericVariableName,prefixName);
    }
  }
  updateComponentProperties(connection,componentProperties);
}","public static void setPropertiesForContextMode(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  if (connection == null) {
    return;
  }
  ComponentProperties componentProperties=getComponentProperties(connection);
  String originalVariableName=prefixName + ConnectionContextHelper.LINE;
  String genericVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof GenericConnParamName) {
      GenericConnParamName genericParam=(GenericConnParamName)param;
      String paramVarName=genericParam.getContextVar();
      genericVariableName=originalVariableName + paramVarName;
      matchContextForAttribues(componentProperties,genericParam,genericVariableName,prefixName,false);
    }
  }
  updateComponentProperties(connection,componentProperties);
}",0.99625468164794
117794,"public static void setPropertiesForExistContextMode(Connection connection,Set<IConnParamName> paramSet,Map<ContextItem,List<ConectionAdaptContextVariableModel>> adaptMap){
  if (connection == null) {
    return;
  }
  ComponentProperties componentProperties=getComponentProperties(connection);
  ContextItem currentContext=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof GenericConnParamName) {
      String genericVariableName=null;
      GenericConnParamName genericParam=(GenericConnParamName)param;
      if (adaptMap != null && adaptMap.size() > 0) {
        for (        Map.Entry<ContextItem,List<ConectionAdaptContextVariableModel>> entry : adaptMap.entrySet()) {
          currentContext=entry.getKey();
          List<ConectionAdaptContextVariableModel> modelList=entry.getValue();
          for (          ConectionAdaptContextVariableModel model : modelList) {
            if (model.getValue().equals(genericParam.getName())) {
              genericVariableName=model.getName();
              break;
            }
          }
        }
      }
      if (genericVariableName != null) {
        genericVariableName=getCorrectVariableName(currentContext,genericVariableName,genericParam);
        matchContextForAttribues(componentProperties,genericParam,genericVariableName,currentContext.getProperty().getLabel());
      }
    }
  }
  updateComponentProperties(connection,componentProperties);
}","public static void setPropertiesForExistContextMode(Connection connection,Set<IConnParamName> paramSet,Map<ContextItem,List<ConectionAdaptContextVariableModel>> adaptMap){
  if (connection == null) {
    return;
  }
  ComponentProperties componentProperties=getComponentProperties(connection);
  ContextItem currentContext=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof GenericConnParamName) {
      String genericVariableName=null;
      GenericConnParamName genericParam=(GenericConnParamName)param;
      if (adaptMap != null && adaptMap.size() > 0) {
        for (        Map.Entry<ContextItem,List<ConectionAdaptContextVariableModel>> entry : adaptMap.entrySet()) {
          currentContext=entry.getKey();
          List<ConectionAdaptContextVariableModel> modelList=entry.getValue();
          for (          ConectionAdaptContextVariableModel model : modelList) {
            if (model.getValue().equals(genericParam.getName())) {
              genericVariableName=model.getName();
              break;
            }
          }
        }
      }
      if (genericVariableName != null) {
        genericVariableName=getCorrectVariableName(currentContext,genericVariableName,genericParam);
        matchContextForAttribues(componentProperties,genericParam,genericVariableName,currentContext.getProperty().getLabel(),true);
      }
    }
  }
  updateComponentProperties(connection,componentProperties);
}",0.9982584465343086
117795,"private static void matchContextForAttribues(ComponentProperties componentProperties,IConnParamName param,String genericVariableName,String prefixName){
  GenericConnParamName genericParam=(GenericConnParamName)param;
  String paramName=genericParam.getName();
  Properties properties=componentProperties.getProperties(paramName);
  if (properties == null) {
    String paramValue=ContextParameterUtils.getNewScriptCode(genericVariableName,ECodeLanguage.JAVA);
    setPropertyValue(componentProperties,paramName,paramValue,true);
  }
 else {
    matchContextForPrperties(properties,param,genericVariableName,prefixName);
  }
}","private static void matchContextForAttribues(ComponentProperties componentProperties,IConnParamName param,String genericVariableName,String prefixName,boolean isReuse){
  GenericConnParamName genericParam=(GenericConnParamName)param;
  String paramName=genericParam.getName();
  Properties properties=componentProperties.getProperties(paramName);
  if (properties == null) {
    String paramValue=ContextParameterUtils.getNewScriptCode(genericVariableName,ECodeLanguage.JAVA);
    setPropertyValue(componentProperties,paramName,paramValue,true);
  }
 else {
    matchContextForPrperties(properties,param,genericVariableName,prefixName,isReuse);
  }
}",0.9811912225705328
117796,"private static void matchContextForPrperties(Properties properties,IConnParamName param,String genericVariableName,String prefixName){
  for (  NamedThing nameThing : properties.getProperties()) {
    if (nameThing != null && nameThing instanceof Property) {
      Property property=(Property)nameThing;
      Object paramValue=property.getStoredValue();
      if (GenericTypeUtils.isListStringType(property) && paramValue != null) {
        String propertyValue=ContextParameterUtils.getNewScriptCode(genericVariableName,ECodeLanguage.JAVA);
        property.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,true);
        List<String> driverList=new ArrayList<String>();
        driverList.add(propertyValue);
        property.setValue(driverList);
      }
    }
  }
}","private static void matchContextForPrperties(Properties properties,IConnParamName param,String genericVariableName,String prefixName,boolean isReuse){
  for (  NamedThing nameThing : properties.getProperties()) {
    if (nameThing != null && nameThing instanceof Property) {
      Property property=(Property)nameThing;
      Object paramValue=property.getStoredValue();
      if (GenericTypeUtils.isListStringType(property) && paramValue != null) {
        String propertyValue=""String_Node_Str"";
        if (isReuse) {
          propertyValue=ContextParameterUtils.getNewScriptCode(genericVariableName,ECodeLanguage.JAVA);
        }
 else {
          propertyValue=ContextParameterUtils.getNewScriptCode(prefixName + ConnectionContextHelper.LINE + ContextParameterUtils.getValidParameterName(property.getName()),LanguageManager.getCurrentLanguage());
        }
        property.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,true);
        List<String> driverList=new ArrayList<String>();
        driverList.add(propertyValue);
        property.setValue(driverList);
      }
    }
  }
}",0.8279569892473119
117797,"@Override public void syncAllRoutinesForLogOn() throws SystemException {
  syncRoutineItems(getRoutines(needSyncRefProject()),true);
}","@Override public void syncAllRoutinesForLogOn() throws SystemException {
  syncRoutineItems(getRoutines(true),true);
}",0.9126984126984128
117798,"@Override public void syncAllPigudfForLogOn() throws SystemException {
  syncRoutineItems(getAllPigudf(needSyncRefProject()),true);
}","@Override public void syncAllPigudfForLogOn() throws SystemException {
  syncRoutineItems(getAllPigudf(true),true);
}",0.912
117799,"private static void syncModule(Project project,File[] modules) throws SystemException {
  IRunProcessService service=CodeGeneratorActivator.getDefault().getRunProcessService();
  ITalendProcessJavaProject talenCodeJavaProject=service.getTalendCodeJavaProject(ERepositoryObjectType.ROUTINES,project);
  if (talenCodeJavaProject == null) {
    return;
  }
  final IFolder systemFolder=talenCodeJavaProject.getSrcSubFolder(null,JavaUtils.JAVA_ROUTINES_DIRECTORY + '/' + JavaUtils.JAVA_SYSTEM_DIRECTORY);
  syncModules(modules,systemFolder);
}","private static void syncModule(Project project,File[] modules) throws SystemException {
  IRunProcessService service=CodeGeneratorActivator.getDefault().getRunProcessService();
  ITalendProcessJavaProject talenCodeJavaProject=service.getTalendCodeJavaProject(ERepositoryObjectType.ROUTINES,project.getTechnicalLabel());
  if (talenCodeJavaProject == null) {
    return;
  }
  final IFolder systemFolder=talenCodeJavaProject.getSrcSubFolder(null,JavaUtils.JAVA_ROUTINES_DIRECTORY + '/' + JavaUtils.JAVA_SYSTEM_DIRECTORY);
  syncModules(modules,systemFolder);
}",0.9817850637522768
117800,"@Override public ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type,Project project){
  return TalendJavaProjectManager.getTalendCodeJavaProject(type,project);
}","@Override public ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type,String projectTechName){
  return TalendJavaProjectManager.getTalendCodeJavaProject(type,projectTechName);
}",0.8849104859335039
117801,"private void installRefCodeProject(ERepositoryObjectType codeType,AggregatorPomsHelper refHelper,Map<String,Object> argumentsMap,IProgressMonitor monitor) throws Exception, CoreException {
  if (!refHelper.getProjectRootPom().exists()) {
    return;
  }
  String projectTechName=refHelper.getProjectTechName();
  ITalendProcessJavaProject codeProject=TalendJavaProjectManager.getExistingTalendCodeProject(codeType,projectTechName);
  if (codeProject != null) {
    codeProject.buildModules(monitor,null,argumentsMap);
    codeProject.getProject().delete(false,true,monitor);
    TalendJavaProjectManager.removeFromCodeJavaProjects(codeType,projectTechName);
  }
 else {
    IFile pomFile=refHelper.getCodeFolder(codeType).getFile(TalendMavenConstants.POM_FILE_NAME);
    MavenPomCommandLauncher launcher=new MavenPomCommandLauncher(pomFile,TalendMavenConstants.GOAL_INSTALL);
    launcher.execute(monitor);
  }
}","private void installRefCodeProject(ERepositoryObjectType codeType,AggregatorPomsHelper refHelper,IProgressMonitor monitor) throws Exception, CoreException {
  if (!refHelper.getProjectRootPom().exists()) {
    return;
  }
  String projectTechName=refHelper.getProjectTechName();
  ITalendProcessJavaProject codeProject=TalendJavaProjectManager.getExistingTalendCodeProject(codeType,projectTechName);
  if (codeProject != null) {
    codeProject.buildWholeCodeProject();
    Map<String,Object> argumentsMap=new HashMap<>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,TalendMavenConstants.ARG_MAIN_SKIP);
    codeProject.buildModules(monitor,null,argumentsMap);
    codeProject.getProject().delete(false,true,monitor);
    TalendJavaProjectManager.removeFromCodeJavaProjects(codeType,projectTechName);
  }
}",0.2007596310363537
117802,"private void initRefPoms(Project refProject) throws Exception {
  for (  ProjectReference ref : refProject.getProjectReferenceList(true)) {
    initRefPoms(new Project(ref.getReferencedProject()));
  }
  AggregatorPomsHelper refHelper=new AggregatorPomsHelper(refProject.getTechnicalLabel());
  refHelper.installRootPom(true);
  Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
  IProgressMonitor monitor=new NullProgressMonitor();
  installRefCodeProject(ERepositoryObjectType.ROUTINES,refHelper,argumentsMap,monitor);
  if (ProcessUtils.isRequiredPigUDFs(null,refProject)) {
    installRefCodeProject(ERepositoryObjectType.PIG_UDF,refHelper,argumentsMap,monitor);
  }
  if (ProcessUtils.isRequiredBeans(null,refProject)) {
    installRefCodeProject(ERepositoryObjectType.valueOf(""String_Node_Str""),refHelper,argumentsMap,monitor);
  }
}","private void initRefPoms(Project refProject) throws Exception {
  for (  ProjectReference ref : refProject.getProjectReferenceList(true)) {
    initRefPoms(new Project(ref.getReferencedProject()));
  }
  AggregatorPomsHelper refHelper=new AggregatorPomsHelper(refProject.getTechnicalLabel());
  refHelper.installRootPom(true);
  IProgressMonitor monitor=new NullProgressMonitor();
  installRefCodeProject(ERepositoryObjectType.ROUTINES,refHelper,monitor);
  if (ProcessUtils.isRequiredPigUDFs(null,refProject)) {
    installRefCodeProject(ERepositoryObjectType.PIG_UDF,refHelper,monitor);
  }
  if (ProcessUtils.isRequiredBeans(null,refProject)) {
    installRefCodeProject(ERepositoryObjectType.valueOf(""String_Node_Str""),refHelper,monitor);
  }
}",0.8904761904761904
117803,"@Override public ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type,Project project){
  return delegateService.getTalendCodeJavaProject(type,project);
}","@Override public ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type,String projectTechName){
  return delegateService.getTalendCodeJavaProject(type,projectTechName);
}",0.9276139410187668
117804,"public static ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type,Project project){
  String codeProjectId=AggregatorPomsHelper.getCodeProjectId(type,project.getTechnicalLabel());
  ITalendProcessJavaProject talendCodeJavaProject=talendCodeJavaProjects.get(codeProjectId);
  if (talendCodeJavaProject == null || talendCodeJavaProject.getProject() == null || !talendCodeJavaProject.getProject().exists()) {
    try {
      IProgressMonitor monitor=new NullProgressMonitor();
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      AggregatorPomsHelper helper=new AggregatorPomsHelper(project.getTechnicalLabel());
      IFolder codeProjectFolder=helper.getProjectPomsFolder().getFolder(type.getFolder());
      IProject codeProject=root.getProject((project.getTechnicalLabel() + ""String_Node_Str"" + type.name()).toUpperCase());
      if (!codeProject.exists() || TalendCodeProjectUtil.needRecreate(monitor,codeProject)) {
        createMavenJavaProject(monitor,codeProject,null,codeProjectFolder,true);
      }
      IJavaProject javaProject=JavaCore.create(codeProject);
      if (!javaProject.isOpen()) {
        javaProject.open(monitor);
      }
      helper.updateCodeProjectPom(monitor,type,codeProject.getFile(TalendMavenConstants.POM_FILE_NAME));
      talendCodeJavaProject=new TalendProcessJavaProject(javaProject);
      talendCodeJavaProject.cleanMavenFiles(monitor);
      BuildCacheManager.getInstance().clearCodesCache(type);
      talendCodeJavaProjects.put(codeProjectId,talendCodeJavaProject);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  MavenPomSynchronizer.addChangeLibrariesListener();
  return talendCodeJavaProject;
}","public static ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type,String projectTechName){
  String codeProjectId=AggregatorPomsHelper.getCodeProjectId(type,projectTechName);
  ITalendProcessJavaProject talendCodeJavaProject=talendCodeJavaProjects.get(codeProjectId);
  if (talendCodeJavaProject == null || talendCodeJavaProject.getProject() == null || !talendCodeJavaProject.getProject().exists()) {
    try {
      IProgressMonitor monitor=new NullProgressMonitor();
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      AggregatorPomsHelper helper=new AggregatorPomsHelper(projectTechName);
      IFolder codeProjectFolder=helper.getProjectPomsFolder().getFolder(type.getFolder());
      IProject codeProject=root.getProject((projectTechName + ""String_Node_Str"" + type.name()).toUpperCase());
      if (!codeProject.exists() || TalendCodeProjectUtil.needRecreate(monitor,codeProject)) {
        createMavenJavaProject(monitor,codeProject,null,codeProjectFolder,true);
      }
      IJavaProject javaProject=JavaCore.create(codeProject);
      if (!javaProject.isOpen()) {
        javaProject.open(monitor);
      }
      helper.updateCodeProjectPom(monitor,type,codeProject.getFile(TalendMavenConstants.POM_FILE_NAME));
      talendCodeJavaProject=new TalendProcessJavaProject(javaProject);
      talendCodeJavaProject.cleanMavenFiles(monitor);
      BuildCacheManager.getInstance().clearCodesCache(type);
      talendCodeJavaProjects.put(codeProjectId,talendCodeJavaProject);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  MavenPomSynchronizer.addChangeLibrariesListener();
  return talendCodeJavaProject;
}",0.9715459078908772
117805,"private String getValueType(final String key) throws Exception {
  return getConfigTypeNode().getProperties().stream().map(SimplePropertyDefinition::getPath).filter(key::equals).findFirst().orElseThrow(() -> new IllegalArgumentException(""String_Node_Str"" + key));
}","private String getValueType(final ConfigTypeNode typeNode,final String key) throws Exception {
  return typeNode.getProperties().stream().filter(propertyDefinition -> TaCoKitUtil.equals(key,propertyDefinition.getPath())).map(SimplePropertyDefinition::getType).findFirst().orElseThrow(() -> new IllegalArgumentException(""String_Node_Str"" + key));
}",0.6699346405228758
117806,"private void refreshUi(final Map<String,String> result){
  Display.getDefault().asyncExec(() -> {
    final String dialogTitle=Messages.getString(""String_Node_Str"");
    if (OK.equals(result.get(STATUS))) {
      MessageDialog.openInformation(new Shell(),dialogTitle,result.get(MESSAGE));
    }
 else {
      MessageDialog.openError(new Shell(),dialogTitle,result.get(MESSAGE));
    }
  }
);
}","private void refreshUi(final Map<String,String> result){
  Display.getDefault().asyncExec(() -> {
    final String dialogTitle=Messages.getString(""String_Node_Str"");
    if (OK.equals(result.get(STATUS))) {
      MessageDialog.openInformation(DisplayUtils.getDefaultShell(),dialogTitle,result.get(MESSAGE));
    }
 else {
      MessageDialog.openError(DisplayUtils.getDefaultShell(),dialogTitle,result.get(MESSAGE));
    }
  }
);
}",0.9344660194174758
117807,"@SuppressWarnings(""String_Node_Str"") private void checkParameters(){
  boolean checkColumnExist=false;
  IMetadataTable metadataTable=null;
  List<IMetadataTable> tables=getMetadataList();
  if (tables != null && tables.size() == 1) {
    metadataTable=tables.get(0);
    checkColumnExist=true;
  }
  boolean checkPreColumnExist=false;
  IMetadataTable preMetadataTable=null;
  int preTableCount=0;
  List<? extends IConnection> incomingConnections=getIncomingConnections();
  if (incomingConnections != null && incomingConnections.size() > 0) {
    for (    IConnection incomingConnection : incomingConnections) {
      if (incomingConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        IMetadataTable schemaTable=incomingConnection.getMetadataTable();
        if (schemaTable != null) {
          ++preTableCount;
          if (preTableCount > 1) {
            break;
          }
          preMetadataTable=schemaTable;
        }
      }
    }
  }
  if (preTableCount == 1) {
    checkPreColumnExist=true;
  }
  List<String> currentColumns=new ArrayList<String>();
  if (checkColumnExist) {
    currentColumns=getColumnLabels(metadataTable);
  }
  List<String> preColumns=new ArrayList<String>();
  if (checkPreColumnExist) {
    preColumns=getColumnLabels(preMetadataTable);
  }
  for (  IElementParameter param : this.getElementParametersWithChildrens()) {
    if (param.getMaxlength() > 0) {
      String paramValue=param.getValue().toString();
      paramValue.length();
      String tmpValue;
      if (paramValue.startsWith(""String_Node_Str"") && paramValue.endsWith(""String_Node_Str"")) {
        tmpValue=paramValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        continue;
      }
      String factor=""String_Node_Str"";
      Pattern pattern=Pattern.compile(factor);
      Matcher matcher=pattern.matcher(tmpValue);
      int lenth=0;
      matcher.groupCount();
      while (matcher.find()) {
        lenth++;
      }
      String last=tmpValue.replaceAll(factor,""String_Node_Str"");
      last=last.replaceAll(""String_Node_Str"",""String_Node_Str"");
      int realLength=last.length() + lenth;
      if (realLength > param.getMaxlength()) {
        String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getMaxlength());
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (param.getFieldType() == EParameterFieldType.CLOSED_LIST) {
      String showIf=param.getShowIf();
      String notShowIf=param.getNotShowIf();
      IElementParameter dbTypeEle=this.getElementParameter(""String_Node_Str"");
      if (dbTypeEle != null && showIf != null && notShowIf == null) {
        String dbType=(String)dbTypeEle.getValue();
        boolean show=false;
        if (showIf.contains(dbType)) {
          show=true;
        }
        if (show && !ArrayUtils.contains(param.getListItemsValue(),param.getValue())) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"");
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName())) {
      }
 else {
        if (param.isShow(this.getElementParameters()) && !ArrayUtils.contains(param.getListItemsValue(),param.getValue()) && !param.isDynamicSettings()) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"" + param.getDisplayName() + ""String_Node_Str"");
        }
      }
    }
    if (param.getFieldType() == EParameterFieldType.TABLE) {
      Object[] tableItemsValue=param.getListItemsValue();
      List<Map<String,Object>> tableValues=(List<Map<String,Object>>)param.getValue();
      List<String> columnListParamNames=new ArrayList<String>();
      List<String> preColumnListParamNames=new ArrayList<String>();
      if (tableItemsValue != null && tableItemsValue.length > 0) {
        for (        Object tabItemValue : tableItemsValue) {
          if (tabItemValue instanceof IElementParameter) {
            IElementParameter itemParameter=(IElementParameter)tabItemValue;
            if (itemParameter.getFieldType() == EParameterFieldType.COLUMN_LIST) {
              columnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.PREV_COLUMN_LIST) {
              preColumnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.CONTEXT_PARAM_NAME_LIST && tableValues.size() > 0) {
              Object[] itemsValue=itemParameter.getListItemsValue();
              if (itemParameter.getListItemsDisplayName() == null || itemParameter.getListItemsDisplayName().length == 0) {
                itemsValue=getContextParamsFromProcess();
              }
              for (int index=0; index < tableValues.size(); index++) {
                Map<String,Object> tabMap=tableValues.get(index);
                Object value=tabMap.get(itemParameter.getName());
                if (itemParameter.getListItemsValue() != null && value != null) {
                  boolean found=false;
                  for (                  Object o : itemsValue) {
                    if (o.equals(value)) {
                      found=true;
                      break;
                    }
                  }
                  if (!found) {
                    String warnMessage=Messages.getString(""String_Node_Str"",value,index,itemParameter.getDisplayName());
                    Problems.add(ProblemStatus.WARNING,this,warnMessage);
                  }
                }
              }
            }
          }
        }
      }
      StringBuffer inexistentColumns=new StringBuffer();
      if (tableValues != null) {
        for (        Map<String,Object> tabMap : tableValues) {
          int row=tableValues.indexOf(tabMap) + 1;
          if (checkColumnExist) {
            for (            String paramName : columnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !currentColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          if (checkPreColumnExist) {
            for (            String paramName : preColumnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !preColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          Object type=tabMap.get(""String_Node_Str"");
          if (type != null && type.toString().equals(""String_Node_Str"")) {
            Object code=tabMap.get(""String_Node_Str"");
            IMetadataTable metaTable=this.getMetadataTable(code.toString());
            if (metaTable != null) {
              if (metaTable.getListColumns(true).size() > 1) {
                String warnMessage=Messages.getString(""String_Node_Str"",metaTable.getLabel());
                Problems.add(ProblemStatus.WARNING,this,warnMessage);
              }
            }
          }
        }
      }
      if (inexistentColumns.length() > 0) {
        inexistentColumns.deleteCharAt(inexistentColumns.length() - 1);
        String warnMessage=Messages.getString(""String_Node_Str"",inexistentColumns.toString(),param.getDisplayName());
        Problems.add(ProblemStatus.WARNING,this,warnMessage);
      }
    }
    if (param.getName().equals(EParameterName.COMMENT.getName())) {
      String infoValue=(String)param.getValue();
      if (infoValue != null && !infoValue.equals(""String_Node_Str"")) {
        Problems.add(ProblemStatus.INFO,this,infoValue);
      }
    }
    List<IElementParameter> emptyParamList=Collections.emptyList();
    Boolean noConditionOnShow=StringUtils.isEmpty(param.getShowIf()) && StringUtils.isEmpty(param.getNotShowIf());
    if (param.isRequired(getElementParameters()) && !param.isShow(emptyParamList) && noConditionOnShow&& this.externalNode != null) {
      if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
        if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
          checkFileOutputMSXML(param,tableValues);
        }
 else         if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"") && tableValues.size() != 0) {
          if (((Boolean)this.getElementParameter(""String_Node_Str"").getValue()) == true) {
            List<Map<String,String>> listGroup=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            List<Map<String,String>> listLoop=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            if (listGroup.size() == 0 || listLoop.size() == 0) {
              String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
        }
 else {
          if (tableValues == null || tableValues.size() == 0) {
            String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
            Problems.add(ProblemStatus.ERROR,this,errorMessage);
          }
        }
      }
    }
    if (param.isRequired() && param.isShow(getElementParameters())) {
      EParameterFieldType fieldType=param.getFieldType();
      String value;
      List multiSchemaDelimetedSeparaor=new ArrayList();
switch (fieldType) {
case TABLE:
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
      if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
        checkFileOutputMSXML(param,tableValues);
      }
 else {
        if (tableValues == null || tableValues.size() == 0) {
          String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
          Problems.add(ProblemStatus.ERROR,this,errorMessage);
        }
 else         if (this.getComponent().getName().equals(""String_Node_Str"")) {
          for (          Map<String,String> map : tableValues) {
            if (map != null) {
              if (""String_Node_Str"".equals(map.get(""String_Node_Str"")) || map.get(""String_Node_Str"") == null) {
                Problems.add(ProblemStatus.ERROR,this,Messages.getString(""String_Node_Str""));
              }
            }
          }
        }
      }
    break;
case CHECK:
  break;
case RADIO:
break;
case SCHEMA_TYPE:
break;
case SCHEMA_REFERENCE:
break;
case DCSCHEMA:
break;
case MEMO_SQL:
String errMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Object value2=param.getValue();
if (value2 == null) {
break;
}
String currentQuery=value2.toString();
if (CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_WARNING)) {
if (currentQuery.indexOf(COMPARE_STR1) != -1 || currentQuery.indexOf(COMPARE_STR2) != -1) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
if (!NodeQueryCheckUtil.checkQueryOK(this,currentQuery)) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
}
break;
case CLOSED_LIST:
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
if (param.getListItemsValue().length != 0) {
boolean found=false;
for (int i=0; i < param.getListItemsValue().length && !found; i++) {
if (param.getListItemsValue()[i].equals(value)) {
found=true;
}
}
if (!found) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),value);
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
break;
case COMPONENT_LIST:
if (param != null) {
String errorMessage;
boolean isContextMode=false;
if (param.getValue() == null || ""String_Node_Str"".equals(param.getValue())) {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
}
 else {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getValue());
isContextMode=param.isDynamicSettings();
}
if (!isContextMode && ((!hasUseExistingConnection(this)) || (isUseExistedConnetion(this)))) {
List<INode> list=(List<INode>)this.getProcess().getNodesOfType(param.getFilter());
if (list == null || list.size() == 0 || list.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
List<INode> nodeList=new ArrayList<INode>();
for (INode datanode : list) {
if (!datanode.isVirtualGenerateNode()) {
nodeList.add(datanode);
}
}
if (nodeList.size() == 0 || nodeList.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
break;
}
boolean foundValue=false;
for (INode datanode : nodeList) {
if (datanode.getUniqueName().equals(param.getValue())) {
foundValue=true;
break;
}
}
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
if (!foundValue) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
}
break;
default :
if (param.getValue() != null && !(param.getValue() instanceof String)) {
break;
}
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
if (this.getComponent() != null && ""String_Node_Str"".equals(this.getComponent().getName())) {
multiSchemaDelimetedSeparaor.add(param);
if (multiSchemaDelimetedSeparaor.size() == 2) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
 else {
if (getComponent() != null && ""String_Node_Str"".equals(getComponent().getName())) {
IElementParameter fromRepository=getElementParameter(""String_Node_Str"");
Object isFromRepository=fromRepository.getValue();
if (isFromRepository != null && ""String_Node_Str"".equals(isFromRepository.toString())) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
}
}
 else {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
checkDataprepRun(param);
}
}
checkValidationRule(param);
checktAggregateRow(param);
}
checkJobletConnections();
IElementParameter enableParallelizeParameter=getElementParameter(EParameterName.PARALLELIZE.getName());
if (enableParallelizeParameter != null && enableParallelizeParameter.getValue() != null) {
boolean x=(Boolean)enableParallelizeParameter.getValue();
if (x) {
addStatus(Process.PARALLEL_STATUS);
}
}
}","@SuppressWarnings(""String_Node_Str"") private void checkParameters(){
  boolean checkColumnExist=false;
  IMetadataTable metadataTable=null;
  List<IMetadataTable> tables=getMetadataList();
  if (tables != null && tables.size() == 1) {
    metadataTable=tables.get(0);
    checkColumnExist=true;
  }
  boolean checkPreColumnExist=false;
  IMetadataTable preMetadataTable=null;
  int preTableCount=0;
  List<? extends IConnection> incomingConnections=getIncomingConnections();
  if (incomingConnections != null && incomingConnections.size() > 0) {
    for (    IConnection incomingConnection : incomingConnections) {
      if (incomingConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        IMetadataTable schemaTable=incomingConnection.getMetadataTable();
        if (schemaTable != null) {
          ++preTableCount;
          if (preTableCount > 1) {
            break;
          }
          preMetadataTable=schemaTable;
        }
      }
    }
  }
  if (preTableCount == 1) {
    checkPreColumnExist=true;
  }
  List<String> currentColumns=new ArrayList<String>();
  if (checkColumnExist) {
    currentColumns=getColumnLabels(metadataTable);
  }
  List<String> preColumns=new ArrayList<String>();
  if (checkPreColumnExist) {
    preColumns=getColumnLabels(preMetadataTable);
  }
  for (  IElementParameter param : this.getElementParametersWithChildrens()) {
    if (param.getMaxlength() > 0) {
      String paramValue=param.getValue().toString();
      paramValue.length();
      String tmpValue;
      if (paramValue.startsWith(""String_Node_Str"") && paramValue.endsWith(""String_Node_Str"")) {
        tmpValue=paramValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        continue;
      }
      String factor=""String_Node_Str"";
      Pattern pattern=Pattern.compile(factor);
      Matcher matcher=pattern.matcher(tmpValue);
      int lenth=0;
      matcher.groupCount();
      while (matcher.find()) {
        lenth++;
      }
      String last=tmpValue.replaceAll(factor,""String_Node_Str"");
      last=last.replaceAll(""String_Node_Str"",""String_Node_Str"");
      int realLength=last.length() + lenth;
      if (realLength > param.getMaxlength()) {
        String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getMaxlength());
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (param.getFieldType() == EParameterFieldType.CLOSED_LIST) {
      String showIf=param.getShowIf();
      String notShowIf=param.getNotShowIf();
      IElementParameter dbTypeEle=this.getElementParameter(""String_Node_Str"");
      if (dbTypeEle != null && showIf != null && notShowIf == null) {
        String dbType=(String)dbTypeEle.getValue();
        boolean show=false;
        if (showIf.contains(dbType)) {
          show=true;
        }
        if (show && !ArrayUtils.contains(param.getListItemsValue(),param.getValue())) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"");
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName())) {
      }
 else {
        if (param.isShow(this.getElementParameters()) && !ArrayUtils.contains(param.getListItemsValue(),param.getValue()) && !param.isDynamicSettings()) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"" + param.getDisplayName() + ""String_Node_Str"");
        }
      }
    }
    if (param.getFieldType() == EParameterFieldType.TABLE) {
      Object[] tableItemsValue=param.getListItemsValue();
      List<Map<String,Object>> tableValues=(List<Map<String,Object>>)param.getValue();
      List<String> columnListParamNames=new ArrayList<String>();
      List<String> preColumnListParamNames=new ArrayList<String>();
      if (tableItemsValue != null && tableItemsValue.length > 0) {
        for (        Object tabItemValue : tableItemsValue) {
          if (tabItemValue instanceof IElementParameter) {
            IElementParameter itemParameter=(IElementParameter)tabItemValue;
            if (itemParameter.getFieldType() == EParameterFieldType.COLUMN_LIST) {
              columnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.PREV_COLUMN_LIST) {
              preColumnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.CONTEXT_PARAM_NAME_LIST && tableValues.size() > 0) {
              Object[] itemsValue=itemParameter.getListItemsValue();
              if (itemParameter.getListItemsDisplayName() == null || itemParameter.getListItemsDisplayName().length == 0) {
                itemsValue=getContextParamsFromProcess();
              }
              for (int index=0; index < tableValues.size(); index++) {
                Map<String,Object> tabMap=tableValues.get(index);
                Object value=tabMap.get(itemParameter.getName());
                if (itemParameter.getListItemsValue() != null && value != null) {
                  boolean found=false;
                  for (                  Object o : itemsValue) {
                    if (o.equals(value)) {
                      found=true;
                      break;
                    }
                  }
                  if (!found) {
                    String warnMessage=Messages.getString(""String_Node_Str"",value,index,itemParameter.getDisplayName());
                    Problems.add(ProblemStatus.WARNING,this,warnMessage);
                  }
                }
              }
            }
          }
        }
      }
      StringBuffer inexistentColumns=new StringBuffer();
      if (tableValues != null) {
        for (        Map<String,Object> tabMap : tableValues) {
          int row=tableValues.indexOf(tabMap) + 1;
          if (checkColumnExist) {
            for (            String paramName : columnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !currentColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          if (checkPreColumnExist) {
            for (            String paramName : preColumnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !preColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          Object type=tabMap.get(""String_Node_Str"");
          if (type != null && type.toString().equals(""String_Node_Str"")) {
            Object code=tabMap.get(""String_Node_Str"");
            IMetadataTable metaTable=this.getMetadataTable(code.toString());
            if (metaTable != null) {
              if (metaTable.getListColumns(true).size() > 1) {
                String warnMessage=Messages.getString(""String_Node_Str"",metaTable.getLabel());
                Problems.add(ProblemStatus.WARNING,this,warnMessage);
              }
            }
          }
        }
      }
      if (inexistentColumns.length() > 0) {
        inexistentColumns.deleteCharAt(inexistentColumns.length() - 1);
        String warnMessage=Messages.getString(""String_Node_Str"",inexistentColumns.toString(),param.getDisplayName());
        Problems.add(ProblemStatus.WARNING,this,warnMessage);
      }
    }
    if (param.getName().equals(EParameterName.COMMENT.getName())) {
      String infoValue=(String)param.getValue();
      if (infoValue != null && !infoValue.equals(""String_Node_Str"")) {
        Problems.add(ProblemStatus.INFO,this,infoValue);
      }
    }
    List<IElementParameter> emptyParamList=Collections.emptyList();
    Boolean noConditionOnShow=StringUtils.isEmpty(param.getShowIf()) && StringUtils.isEmpty(param.getNotShowIf());
    if (param.isRequired(getElementParameters()) && !param.isShow(emptyParamList) && noConditionOnShow&& this.externalNode != null) {
      if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
        if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
          checkFileOutputMSXML(param,tableValues);
        }
 else         if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"") && tableValues.size() != 0) {
          if (((Boolean)this.getElementParameter(""String_Node_Str"").getValue()) == true) {
            List<Map<String,String>> listGroup=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            List<Map<String,String>> listLoop=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            if (listGroup.size() == 0 || listLoop.size() == 0) {
              String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
        }
 else {
          if (tableValues == null || tableValues.size() == 0) {
            String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
            Problems.add(ProblemStatus.ERROR,this,errorMessage);
          }
        }
      }
    }
    if (param.isRequired() && param.isShow(getElementParameters())) {
      EParameterFieldType fieldType=param.getFieldType();
      String value;
      List multiSchemaDelimetedSeparaor=new ArrayList();
switch (fieldType) {
case TABLE:
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
      if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
        checkFileOutputMSXML(param,tableValues);
      }
 else {
        if (tableValues == null || tableValues.size() == 0) {
          String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
          Problems.add(ProblemStatus.ERROR,this,errorMessage);
        }
 else         if (this.getComponent().getName().equals(""String_Node_Str"")) {
          for (          Map<String,String> map : tableValues) {
            if (map != null) {
              if (""String_Node_Str"".equals(map.get(""String_Node_Str"")) || map.get(""String_Node_Str"") == null) {
                Problems.add(ProblemStatus.ERROR,this,Messages.getString(""String_Node_Str""));
              }
            }
          }
        }
      }
    break;
case CHECK:
  break;
case RADIO:
break;
case SCHEMA_TYPE:
break;
case SCHEMA_REFERENCE:
break;
case DCSCHEMA:
break;
case MEMO_SQL:
String errMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Object value2=param.getValue();
if (value2 == null) {
break;
}
String currentQuery=value2.toString();
if (CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_WARNING)) {
if (currentQuery.indexOf(COMPARE_STR1) != -1 || currentQuery.indexOf(COMPARE_STR2) != -1) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
if (!NodeQueryCheckUtil.checkQueryOK(this,currentQuery)) {
boolean show=true;
if (NodeQueryCheckUtil.isNeedMatchQuery()) {
String matchSql=NodeQueryCheckUtil.matchQueryComments(this,currentQuery);
NodeQueryCheckUtil.checkQueryOK(this,matchSql);
show=NodeQueryCheckUtil.isNeedMatchQuery();
}
if (show) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
}
break;
}
}
break;
case CLOSED_LIST:
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
if (param.getListItemsValue().length != 0) {
boolean found=false;
for (int i=0; i < param.getListItemsValue().length && !found; i++) {
if (param.getListItemsValue()[i].equals(value)) {
found=true;
}
}
if (!found) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),value);
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
break;
case COMPONENT_LIST:
if (param != null) {
String errorMessage;
boolean isContextMode=false;
if (param.getValue() == null || ""String_Node_Str"".equals(param.getValue())) {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
}
 else {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getValue());
isContextMode=param.isDynamicSettings();
}
if (!isContextMode && ((!hasUseExistingConnection(this)) || (isUseExistedConnetion(this)))) {
List<INode> list=(List<INode>)this.getProcess().getNodesOfType(param.getFilter());
if (list == null || list.size() == 0 || list.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
List<INode> nodeList=new ArrayList<INode>();
for (INode datanode : list) {
if (!datanode.isVirtualGenerateNode()) {
nodeList.add(datanode);
}
}
if (nodeList.size() == 0 || nodeList.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
break;
}
boolean foundValue=false;
for (INode datanode : nodeList) {
if (datanode.getUniqueName().equals(param.getValue())) {
foundValue=true;
break;
}
}
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
if (!foundValue) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
}
break;
default :
if (param.getValue() != null && !(param.getValue() instanceof String)) {
break;
}
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
if (this.getComponent() != null && ""String_Node_Str"".equals(this.getComponent().getName())) {
multiSchemaDelimetedSeparaor.add(param);
if (multiSchemaDelimetedSeparaor.size() == 2) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
 else {
if (getComponent() != null && ""String_Node_Str"".equals(getComponent().getName())) {
IElementParameter fromRepository=getElementParameter(""String_Node_Str"");
Object isFromRepository=fromRepository.getValue();
if (isFromRepository != null && ""String_Node_Str"".equals(isFromRepository.toString())) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
}
}
 else {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
checkDataprepRun(param);
}
}
checkValidationRule(param);
checktAggregateRow(param);
}
checkJobletConnections();
IElementParameter enableParallelizeParameter=getElementParameter(EParameterName.PARALLELIZE.getName());
if (enableParallelizeParameter != null && enableParallelizeParameter.getValue() != null) {
boolean x=(Boolean)enableParallelizeParameter.getValue();
if (x) {
addStatus(Process.PARALLEL_STATUS);
}
}
}",0.9918163672654692
117808,"/** 
 * DOC ggu Comment method ""checkQueryOK"".
 * @param node
 * @param sql
 * @return
 */
public static boolean checkQueryOK(Node node,String sql){
  if (sql == null) {
    return false;
  }
  if (sql.contains(""String_Node_Str"") || sql.contains(""String_Node_Str"")) {
    sql=sql.replaceAll(COMMENT_REGX_PATTERN,""String_Node_Str"");
  }
  sql=sql.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sql=sql.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sql=sql.trim();
  if (""String_Node_Str"".equals(sql)) {
    return false;
  }
  java.util.regex.Pattern sqlRegex=java.util.regex.Pattern.compile(SQL_REGX,REGX_FLAG);
  Matcher matcher=sqlRegex.matcher(sql);
  if (!matcher.find()) {
    return true;
  }
  matcher.lookingAt();
  String columns=matcher.group(4).trim();
  if (""String_Node_Str"".equals(columns)) {
    return false;
  }
  if (""String_Node_Str"".equals(columns)) {
    return true;
  }
  boolean match=apacheRegexMatch(SQL_FUNC_REGX,REGX_FLAG,columns);
  if (!match) {
    return compareNodeTableColumnsNoFunc(node,columns);
  }
 else {
    return compareNodeTableColumnsWithFunc(node,columns);
  }
}","/** 
 * DOC ggu Comment method ""checkQueryOK"".
 * @param node
 * @param sql
 * @return
 */
public static boolean checkQueryOK(Node node,String sql){
  setNeedMatchQuery(false);
  if (sql == null) {
    return false;
  }
  sql=sql.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sql=sql.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sql=sql.trim();
  if (""String_Node_Str"".equals(sql)) {
    return false;
  }
  java.util.regex.Pattern sqlRegex=java.util.regex.Pattern.compile(SQL_REGX,REGX_FLAG);
  Matcher matcher=sqlRegex.matcher(sql);
  if (!matcher.find()) {
    return true;
  }
  matcher.lookingAt();
  String columns=matcher.group(4).trim();
  if (""String_Node_Str"".equals(columns)) {
    return false;
  }
  if (""String_Node_Str"".equals(columns)) {
    return true;
  }
  boolean result=compareNodeTableColumns(node,columns);
  if (!result) {
    setNeedMatchQuery(!result);
  }
  return result;
}",0.7767373090192213
117809,"TableItem retrieveTableItem(ITableEntry dataMapTableEntry){
  DataMapTableView dataMapTableView=this.mapperManager.retrieveIDataMapTableView(dataMapTableEntry.getParent());
  TableItem[] tableItems=new TableItem[0];
  if (dataMapTableEntry instanceof IColumnEntry) {
    tableItems=dataMapTableView.getTableViewerCreatorForColumns().getTable().getItems();
  }
 else   if (dataMapTableEntry instanceof FilterTableEntry) {
    if (FilterTableEntry.OTHER_FILTER.equals(((FilterTableEntry)dataMapTableEntry).getFilterKind())) {
      tableItems=dataMapTableView.getTableViewerCreatorForOtherFilters().getTable().getItems();
    }
 else {
      tableItems=dataMapTableView.getTableViewerCreatorForWhereFilters().getTable().getItems();
    }
  }
 else {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  TableItem tableItem=null;
  for (  TableItem tableItem2 : tableItems) {
    if (tableItem2.getData() == dataMapTableEntry) {
      tableItem=tableItem2;
      break;
    }
  }
  getTableEntryProperties(dataMapTableEntry).setTableItem(tableItem);
  return tableItem;
}","TableItem retrieveTableItem(ITableEntry dataMapTableEntry){
  DataMapTableView dataMapTableView=this.mapperManager.retrieveIDataMapTableView(dataMapTableEntry.getParent());
  TableItem[] tableItems=new TableItem[0];
  List inputList=null;
  if (dataMapTableEntry instanceof IColumnEntry) {
    tableItems=dataMapTableView.getTableViewerCreatorForColumns().getTable().getItems();
    inputList=dataMapTableView.getTableViewerCreatorForColumns().getInputList();
  }
 else   if (dataMapTableEntry instanceof FilterTableEntry) {
    if (FilterTableEntry.OTHER_FILTER.equals(((FilterTableEntry)dataMapTableEntry).getFilterKind())) {
      tableItems=dataMapTableView.getTableViewerCreatorForOtherFilters().getTable().getItems();
      inputList=dataMapTableView.getTableViewerCreatorForOtherFilters().getInputList();
    }
 else {
      tableItems=dataMapTableView.getTableViewerCreatorForWhereFilters().getTable().getItems();
      inputList=dataMapTableView.getTableViewerCreatorForWhereFilters().getInputList();
    }
  }
 else {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  TableItem tableItem=null;
  if (inputList != null) {
    int index=inputList.indexOf(dataMapTableEntry);
    if (0 <= index && index < tableItems.length) {
      tableItem=tableItems[index];
    }
  }
  if (tableItem == null) {
    for (    TableItem tableItem2 : tableItems) {
      if (tableItem2.getData() == dataMapTableEntry) {
        tableItem=tableItem2;
        break;
      }
    }
  }
  getTableEntryProperties(dataMapTableEntry).setTableItem(tableItem);
  return tableItem;
}",0.8118518518518518
117810,"TableItem retrieveTableItem(ITableEntry dataMapTableEntry){
  DataMapTableView dataMapTableView=this.mapperManager.retrieveAbstractDataMapTableView(dataMapTableEntry.getParent());
  TableItem[] tableItems=new TableItem[0];
  if (dataMapTableEntry instanceof IColumnEntry) {
    tableItems=dataMapTableView.getTableViewerCreatorForColumns().getTable().getItems();
  }
 else   if (dataMapTableEntry instanceof FilterTableEntry) {
    tableItems=dataMapTableView.getTableViewerCreatorForFilters().getTable().getItems();
  }
 else   if (dataMapTableEntry instanceof GlobalMapEntry) {
    tableItems=dataMapTableView.getTableViewerCreatorForGlobalMap().getTable().getItems();
  }
 else   if (dataMapTableEntry instanceof ExpressionFilterEntry) {
    return null;
  }
 else {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  TableItem tableItem=null;
  for (int i=0; i < tableItems.length; i++) {
    if (tableItems[i].getData() == dataMapTableEntry) {
      tableItem=tableItems[i];
      break;
    }
  }
  getTableEntryProperties(dataMapTableEntry).setTableItem(tableItem);
  return tableItem;
}","TableItem retrieveTableItem(ITableEntry dataMapTableEntry){
  DataMapTableView dataMapTableView=this.mapperManager.retrieveAbstractDataMapTableView(dataMapTableEntry.getParent());
  TableItem[] tableItems=new TableItem[0];
  List inputList=null;
  if (dataMapTableEntry instanceof IColumnEntry) {
    tableItems=dataMapTableView.getTableViewerCreatorForColumns().getTable().getItems();
    inputList=dataMapTableView.getTableViewerCreatorForColumns().getInputList();
  }
 else   if (dataMapTableEntry instanceof FilterTableEntry) {
    tableItems=dataMapTableView.getTableViewerCreatorForFilters().getTable().getItems();
    inputList=dataMapTableView.getTableViewerCreatorForFilters().getInputList();
  }
 else   if (dataMapTableEntry instanceof GlobalMapEntry) {
    tableItems=dataMapTableView.getTableViewerCreatorForGlobalMap().getTable().getItems();
    inputList=dataMapTableView.getTableViewerCreatorForGlobalMap().getInputList();
  }
 else   if (dataMapTableEntry instanceof ExpressionFilterEntry) {
    return null;
  }
 else {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  TableItem tableItem=null;
  if (inputList != null) {
    int index=inputList.indexOf(dataMapTableEntry);
    if (0 <= index && index < tableItems.length) {
      tableItem=tableItems[index];
    }
  }
  if (tableItem == null) {
    for (int i=0; i < tableItems.length; i++) {
      if (tableItems[i].getData() == dataMapTableEntry) {
        tableItem=tableItems[i];
        break;
      }
    }
  }
  getTableEntryProperties(dataMapTableEntry).setTableItem(tableItem);
  return tableItem;
}",0.8227571115973742
117811,"@Override public void refresh(IElementParameter param,boolean checkErrorsWhenViewRefreshed){
  Text labelText=(Text)hashCurControls.get(param.getName());
  Object value=param.getValue();
  if (labelText == null || labelText.isDisposed()) {
    return;
  }
  boolean valueChanged=false;
  if (value == null) {
    labelText.setText(""String_Node_Str"");
  }
 else {
    if (!value.equals(labelText.getText())) {
      labelText.setText((String)value);
      valueChanged=true;
    }
  }
  if (checkErrorsWhenViewRefreshed || valueChanged) {
    checkErrorsForPropertiesOnly(labelText);
  }
}","@Override public void refresh(IElementParameter param,boolean checkErrorsWhenViewRefreshed){
  Text labelText=(Text)hashCurControls.get(param.getName());
  Object value=param.getValue();
  if (labelText == null || labelText.isDisposed() || !param.isNoCheck()) {
    return;
  }
  boolean valueChanged=false;
  if (value == null) {
    labelText.setText(""String_Node_Str"");
  }
 else {
    if (!value.equals(labelText.getText())) {
      labelText.setText((String)value);
      valueChanged=true;
    }
  }
  if (checkErrorsWhenViewRefreshed || valueChanged) {
    checkErrorsForPropertiesOnly(labelText);
  }
}",0.9816360601001668
117812,"@Override public void execute(){
  propagatedChange.clear();
  propagateDatas(true);
  if (currentInputMetadata != null) {
    if (!currentInputMetadata.sameMetadataAs(newInputMetadata,IMetadataColumn.OPTIONS_NONE)) {
      if (!currentInputMetadata.sameMetadataAs(newInputMetadata,IMetadataColumn.OPTIONS_IGNORE_USED)) {
        String type=(String)inputNode.getPropertyValue(EParameterName.SCHEMA_TYPE.getName());
        if (type != null) {
          if (type.equals(EmfComponent.REPOSITORY)) {
            inputWasRepository=true;
            inputNode.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
          }
        }
      }
      MetadataToolHelper.copyTable(newInputMetadata,currentInputMetadata);
    }
  }
  if (!currentOutputMetadata.sameMetadataAs(newOutputMetadata,IMetadataColumn.OPTIONS_NONE)) {
    if (!currentOutputMetadata.sameMetadataAs(newOutputMetadata,IMetadataColumn.OPTIONS_IGNORE_USED)) {
      String type=(String)node.getPropertyValue(EParameterName.SCHEMA_TYPE.getName());
      if (type != null && type.equals(EmfComponent.REPOSITORY) && !repositoryMode) {
        if ((node.getElementParameter(""String_Node_Str"").getContext().equals(currentOutputMetadata.getAttachedConnector()))) {
          outputWasRepository=true;
          node.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
        }
      }
    }
    MetadataToolHelper.copyTable(newOutputMetadata,currentOutputMetadata);
  }
  if (inputSchemaParam != null && inputSchemaParam.getChildParameters().get(EParameterName.SCHEMA_TYPE.getName()) != null && EmfComponent.REPOSITORY.equals(inputSchemaParam.getChildParameters().get(EParameterName.SCHEMA_TYPE.getName()).getValue())) {
    IElementParameter elementParameter=node.getElementParameter(EParameterName.MAPPING.getName());
    if (elementParameter != null) {
      if (elementParameter.getValue() instanceof String) {
        String value=(String)elementParameter.getValue();
        if (!isDBComponent(value)) {
          schemaParam.getChildParameters().get(EParameterName.SCHEMA_TYPE.getName()).setValue(EmfComponent.REPOSITORY);
          schemaParam.getChildParameters().get(EParameterName.REPOSITORY_SCHEMA_TYPE.getName()).setValue(inputSchemaParam.getChildParameters().get(EParameterName.REPOSITORY_SCHEMA_TYPE.getName()).getValue());
        }
      }
    }
  }
  for (  INodeConnector connector : node.getListConnector()) {
    if ((!connector.getName().equals(currentConnector)) && connector.getBaseSchema().equals(currentConnector)) {
      MetadataToolHelper.copyTable(newOutputMetadata,node.getMetadataFromConnector(connector.getName()));
      updateComponentSchema(node,node.getMetadataFromConnector(connector.getName()));
    }
  }
  updateComponentSchema(node,currentOutputMetadata);
  List<ColumnNameChanged> columnNameChanged=MetadataToolHelper.getColumnNameChanged(oldOutputMetadata,newOutputMetadata);
  ColumnListController.updateColumnList(node,columnNameChanged,true);
  if (inputNode != null) {
    updateComponentSchema(inputNode,currentInputMetadata);
    List<ColumnNameChanged> inputColumnNameChangedExt=MetadataToolHelper.getColumnNameChangedExt(inputNode,oldInputMetadata,newInputMetadata);
    ColumnListController.updateColumnList(node,inputColumnNameChangedExt);
  }
  List<ColumnNameChanged> outputColumnNameChangedExt=MetadataToolHelper.getColumnNameChangedExt(node,oldOutputMetadata,newOutputMetadata);
  syncOutputNodeColumnsList(outputColumnNameChangedExt);
  setTableMAPPING();
  if (!internal) {
    updateColumnList(oldOutputMetadata,newOutputMetadata);
    ((Process)node.getProcess()).checkProcess();
  }
  refreshMetadataChanged();
}","@Override public void execute(){
  propagatedChange.clear();
  propagateDatas(true);
  if (currentInputMetadata != null) {
    if (!currentInputMetadata.sameMetadataAs(newInputMetadata,IMetadataColumn.OPTIONS_NONE)) {
      if (!currentInputMetadata.sameMetadataAs(newInputMetadata,IMetadataColumn.OPTIONS_IGNORE_USED)) {
        String type=(String)inputNode.getPropertyValue(EParameterName.SCHEMA_TYPE.getName());
        if (type != null) {
          if (type.equals(EmfComponent.REPOSITORY)) {
            inputWasRepository=true;
            inputNode.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
          }
        }
      }
      MetadataToolHelper.copyTable(newInputMetadata,currentInputMetadata);
    }
  }
  if (!currentOutputMetadata.sameMetadataAs(newOutputMetadata,IMetadataColumn.OPTIONS_NONE)) {
    if (!currentOutputMetadata.sameMetadataAs(newOutputMetadata,IMetadataColumn.OPTIONS_IGNORE_USED)) {
      String type=(String)node.getPropertyValue(EParameterName.SCHEMA_TYPE.getName());
      if (type != null && type.equals(EmfComponent.REPOSITORY) && !repositoryMode) {
        if ((node.getElementParameter(""String_Node_Str"").getContext().equals(currentOutputMetadata.getAttachedConnector()))) {
          outputWasRepository=true;
          node.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
        }
      }
    }
    MetadataToolHelper.copyTable(newOutputMetadata,currentOutputMetadata);
  }
  if (inputSchemaParam != null && inputSchemaParam.getChildParameters().get(EParameterName.SCHEMA_TYPE.getName()) != null && EmfComponent.REPOSITORY.equals(inputSchemaParam.getChildParameters().get(EParameterName.SCHEMA_TYPE.getName()).getValue())) {
    IElementParameter elementParameter=node.getElementParameter(EParameterName.MAPPING.getName());
    if (elementParameter != null) {
      if (elementParameter.getValue() instanceof String) {
        String value=(String)elementParameter.getValue();
        if (!isDBComponent(value)) {
          schemaParam.getChildParameters().get(EParameterName.SCHEMA_TYPE.getName()).setValue(EmfComponent.REPOSITORY);
          schemaParam.getChildParameters().get(EParameterName.REPOSITORY_SCHEMA_TYPE.getName()).setValue(inputSchemaParam.getChildParameters().get(EParameterName.REPOSITORY_SCHEMA_TYPE.getName()).getValue());
        }
      }
    }
  }
  for (  INodeConnector connector : node.getListConnector()) {
    if (hasSameSchema(connector)) {
      MetadataToolHelper.copyTable(newOutputMetadata,node.getMetadataFromConnector(connector.getName()));
      updateComponentSchema(node,node.getMetadataFromConnector(connector.getName()));
    }
  }
  updateComponentSchema(node,currentOutputMetadata);
  List<ColumnNameChanged> columnNameChanged=MetadataToolHelper.getColumnNameChanged(oldOutputMetadata,newOutputMetadata);
  ColumnListController.updateColumnList(node,columnNameChanged,true);
  if (inputNode != null) {
    updateComponentSchema(inputNode,currentInputMetadata);
    List<ColumnNameChanged> inputColumnNameChangedExt=MetadataToolHelper.getColumnNameChangedExt(inputNode,oldInputMetadata,newInputMetadata);
    ColumnListController.updateColumnList(node,inputColumnNameChangedExt);
  }
  List<ColumnNameChanged> outputColumnNameChangedExt=MetadataToolHelper.getColumnNameChangedExt(node,oldOutputMetadata,newOutputMetadata);
  syncOutputNodeColumnsList(outputColumnNameChangedExt);
  setTableMAPPING();
  if (!internal) {
    updateColumnList(oldOutputMetadata,newOutputMetadata);
    ((Process)node.getProcess()).checkProcess();
  }
  refreshMetadataChanged();
}",0.9855947317876252
117813,"/** 
 * Create the ""Shapes"" drawer. 
 */
private static void createComponentsDrawer(List<IComponent> componentList,boolean needHiddenComponent,boolean isFavorite,int a){
  clearGroup();
  List<CreationToolEntry> nodeList=new LinkedList<CreationToolEntry>();
  PaletteDrawer componentsDrawer;
  String name, longName;
  String family;
  String oraFamily;
  List<String> families=new ArrayList<String>();
  HashMap<String,String> familyMap=new HashMap<String,String>();
  CombinedTemplateCreationEntry component;
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  paletteState=isFavorite;
  List<String> favoriteComponentNames=null;
  if (a == 0) {
    favoriteComponentNames=getFavoritesList();
  }
  Iterator<IComponent> componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    oraFamily=xmlComponent.getOriginalFamilyName();
    family=xmlComponent.getTranslatedFamilyName();
    if (xmlComponent.isLoaded()) {
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        try {
          if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
            continue;
          }
        }
 catch (        Exception e) {
          System.out.println();
        }
        if (a == 0) {
          if (!oraStrings[j].equals(""String_Node_Str"")) {
            if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
              continue;
            }
          }
        }
        families.add(strings[j]);
        familyMap.put(strings[j],oraStrings[j]);
      }
    }
  }
  Collections.sort(families);
  List<String> recentlyUsedComponentNames=null;
  List<RecentlyUsedComponent> recentlyUsedComponents=null;
  if (a == 0) {
    recentlyUsedComponents=new LinkedList<TalendEditorPaletteFactory.RecentlyUsedComponent>();
    recentlyUsedComponentNames=getRecentlyUsedList(recentlyUsedComponents);
    Collections.sort(recentlyUsedComponents,new Comparator<TalendEditorPaletteFactory.RecentlyUsedComponent>(){
      @Override public int compare(      RecentlyUsedComponent arg0,      RecentlyUsedComponent arg1){
        return -1 * arg0.getTimestamp().compareTo(arg1.getTimestamp());
      }
    }
);
    families.add(0,FAVORITES);
    familyMap.put(FAVORITES,FAVORITES);
    families.add(1,RECENTLY_USED);
    familyMap.put(RECENTLY_USED,RECENTLY_USED);
    for (    Object element : families) {
      family=(String)element;
      String oraFam=familyMap.get(family);
      componentsDrawer=ht.get(family);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(ht,family);
        if (componentsDrawer instanceof IPaletteFilter) {
          ((IPaletteFilter)componentsDrawer).setOriginalName(oraFam);
        }
      }
    }
  }
  boolean noteAeeded=false;
  boolean needAddNote=true;
  boolean needToAdd=false;
  Map<String,IComponent> recentlyUsedMap=new HashMap<String,IComponent>();
  PaletteDrawer drawer=ht.get(""String_Node_Str"");
  if (drawer == null) {
    drawer=ht.get(""String_Node_Str"");
    if (drawer == null) {
      drawer=createComponentDrawer(ht,""String_Node_Str"");
      if (drawer instanceof IPaletteFilter) {
        ((IPaletteFilter)drawer).setOriginalName(""String_Node_Str"");
      }
    }
  }
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String largeIconsSize=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
  CreationToolEntry noteCreationToolEntry=createNoteEntry(largeIconsSize);
  noteCreationToolEntry.setParent(drawer);
  drawer.add(noteCreationToolEntry);
  componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (filter != null) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(filter);
      if (!matcher.matches() && filter.length() != 0) {
        filter=""String_Node_Str"";
      }
      String regex=getFilterRegex(filter);
      needAddNote=""String_Node_Str"".toLowerCase().matches(regex);
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
      continue;
    }
    if (xmlComponent.isLoaded()) {
      name=UnifiedComponentUtil.getComponentDisplayNameForPalette(xmlComponent,filter);
      longName=xmlComponent.getLongName();
      ImageDescriptor imageSmall=xmlComponent.getIcon16();
      ImageDescriptor imageLarge;
      if (largeIconsSize.equals(""String_Node_Str"")) {
        imageLarge=xmlComponent.getIcon24();
      }
 else {
        imageLarge=xmlComponent.getIcon32();
      }
      if (favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName())) {
        componentsDrawer=ht.get(FAVORITES);
        if (componentsDrawer != null) {
          component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge,filter);
          component.setDescription(longName);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
      }
      if (recentlyUsedComponentNames != null && recentlyUsedComponentNames.contains(xmlComponent.getName())) {
        recentlyUsedMap.put(xmlComponent.getName(),xmlComponent);
      }
      if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
        continue;
      }
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
          continue;
        }
        component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge,filter);
        component.setDescription(longName);
        if (a == 0) {
          componentsDrawer=ht.get(strings[j]);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
 else         if (a == 1) {
          boolean canAdd=true;
          Iterator<CreationToolEntry> iter=nodeList.iterator();
          while (iter.hasNext()) {
            if ((iter.next().getLabel()).equals(component.getLabel())) {
              canAdd=false;
            }
          }
          if (canAdd == true) {
            nodeList.add(component);
          }
        }
      }
    }
  }
  if (a == 0) {
    createRecentlyUsedEntryList(ht,recentlyUsedComponents,recentlyUsedMap);
  }
  if (a == 1) {
    Iterator<CreationToolEntry> iter=nodeList.iterator();
    while (iter.hasNext()) {
      CreationToolEntry entryComponent=iter.next();
      entryComponent.setParent(paGroup);
      paGroup.add(entryComponent);
    }
    palette.add(paGroup);
  }
  setFilter(""String_Node_Str"");
}","/** 
 * Create the ""Shapes"" drawer. 
 */
private static void createComponentsDrawer(List<IComponent> componentList,boolean needHiddenComponent,boolean isFavorite,int a){
  clearGroup();
  List<CreationToolEntry> nodeList=new LinkedList<CreationToolEntry>();
  PaletteDrawer componentsDrawer;
  String name, longName;
  String family;
  String oraFamily;
  List<String> families=new ArrayList<String>();
  HashMap<String,String> familyMap=new HashMap<String,String>();
  CombinedTemplateCreationEntry component;
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  paletteState=isFavorite;
  List<String> favoriteComponentNames=null;
  if (a == 0) {
    favoriteComponentNames=getFavoritesList();
  }
  IComponent matchComponent=null;
  Iterator<IComponent> componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    oraFamily=xmlComponent.getOriginalFamilyName();
    family=xmlComponent.getTranslatedFamilyName();
    if (xmlComponent.isLoaded()) {
      if (StringUtils.isNotBlank(filter)) {
        if (xmlComponent.getName().toLowerCase().trim().equals(filter.toLowerCase().trim())) {
          matchComponent=xmlComponent;
        }
      }
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        try {
          if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
            continue;
          }
        }
 catch (        Exception e) {
          System.out.println();
        }
        if (a == 0) {
          if (!oraStrings[j].equals(""String_Node_Str"")) {
            if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
              continue;
            }
          }
        }
        families.add(strings[j]);
        familyMap.put(strings[j],oraStrings[j]);
      }
    }
  }
  Collections.sort(families);
  List<String> recentlyUsedComponentNames=null;
  List<RecentlyUsedComponent> recentlyUsedComponents=null;
  if (a == 0) {
    recentlyUsedComponents=new LinkedList<TalendEditorPaletteFactory.RecentlyUsedComponent>();
    recentlyUsedComponentNames=getRecentlyUsedList(recentlyUsedComponents);
    Collections.sort(recentlyUsedComponents,new Comparator<TalendEditorPaletteFactory.RecentlyUsedComponent>(){
      @Override public int compare(      RecentlyUsedComponent arg0,      RecentlyUsedComponent arg1){
        return -1 * arg0.getTimestamp().compareTo(arg1.getTimestamp());
      }
    }
);
    families.add(0,FAVORITES);
    familyMap.put(FAVORITES,FAVORITES);
    families.add(1,RECENTLY_USED);
    familyMap.put(RECENTLY_USED,RECENTLY_USED);
    if (matchComponent != null) {
      String[] matchFamily=matchComponent.getTranslatedFamilyName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (      String familyObj : matchFamily) {
        if (families.contains(familyObj)) {
          families.remove(familyObj);
          families.add(2,familyObj);
        }
      }
    }
    for (    Object element : families) {
      family=(String)element;
      String oraFam=familyMap.get(family);
      componentsDrawer=ht.get(family);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(ht,family);
        if (componentsDrawer instanceof IPaletteFilter) {
          ((IPaletteFilter)componentsDrawer).setOriginalName(oraFam);
        }
      }
    }
  }
  boolean noteAeeded=false;
  boolean needAddNote=true;
  boolean needToAdd=false;
  Map<String,IComponent> recentlyUsedMap=new HashMap<String,IComponent>();
  PaletteDrawer drawer=ht.get(""String_Node_Str"");
  if (drawer == null) {
    drawer=ht.get(""String_Node_Str"");
    if (drawer == null) {
      drawer=createComponentDrawer(ht,""String_Node_Str"");
      if (drawer instanceof IPaletteFilter) {
        ((IPaletteFilter)drawer).setOriginalName(""String_Node_Str"");
      }
    }
  }
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String largeIconsSize=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
  CreationToolEntry noteCreationToolEntry=createNoteEntry(largeIconsSize);
  noteCreationToolEntry.setParent(drawer);
  drawer.add(noteCreationToolEntry);
  componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (filter != null) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(filter);
      if (!matcher.matches() && filter.length() != 0) {
        filter=""String_Node_Str"";
      }
      String regex=getFilterRegex(filter);
      needAddNote=""String_Node_Str"".toLowerCase().matches(regex);
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
      continue;
    }
    if (xmlComponent.isLoaded()) {
      name=UnifiedComponentUtil.getComponentDisplayNameForPalette(xmlComponent,filter);
      longName=xmlComponent.getLongName();
      ImageDescriptor imageSmall=xmlComponent.getIcon16();
      ImageDescriptor imageLarge;
      if (largeIconsSize.equals(""String_Node_Str"")) {
        imageLarge=xmlComponent.getIcon24();
      }
 else {
        imageLarge=xmlComponent.getIcon32();
      }
      if (favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName())) {
        componentsDrawer=ht.get(FAVORITES);
        if (componentsDrawer != null) {
          component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge,filter);
          component.setDescription(longName);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
      }
      if (recentlyUsedComponentNames != null && recentlyUsedComponentNames.contains(xmlComponent.getName())) {
        recentlyUsedMap.put(xmlComponent.getName(),xmlComponent);
      }
      if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
        continue;
      }
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
          continue;
        }
        component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge,filter);
        component.setDescription(longName);
        if (a == 0) {
          componentsDrawer=ht.get(strings[j]);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
 else         if (a == 1) {
          boolean canAdd=true;
          Iterator<CreationToolEntry> iter=nodeList.iterator();
          while (iter.hasNext()) {
            if ((iter.next().getLabel()).equals(component.getLabel())) {
              canAdd=false;
            }
          }
          if (canAdd == true) {
            nodeList.add(component);
          }
        }
      }
    }
  }
  if (a == 0) {
    createRecentlyUsedEntryList(ht,recentlyUsedComponents,recentlyUsedMap);
  }
  if (a == 1) {
    Iterator<CreationToolEntry> iter=nodeList.iterator();
    while (iter.hasNext()) {
      CreationToolEntry entryComponent=iter.next();
      entryComponent.setParent(paGroup);
      paGroup.add(entryComponent);
    }
    palette.add(paGroup);
  }
  setFilter(""String_Node_Str"");
}",0.5349032800672834
117814,"@Override public ProcessType saveXmlFile(boolean checkJoblet) throws IOException {
  init();
  TalendFileFactory fileFact=TalendFileFactory.eINSTANCE;
  ProcessType processType=createProcessType(fileFact);
  processType.setParameters(fileFact.createParametersType());
  saveProcessElementParameters(processType);
  saveRoutinesDependencies(processType);
  saveAdditionalProperties();
  String sourceJobType=ConvertJobsUtil.getJobTypeFromFramework(this.getProperty().getItem());
  String sourceJobFramework=(String)this.getProperty().getAdditionalProperties().get(ConvertJobsUtil.FRAMEWORK);
  if (sourceJobType != null) {
    processType.setJobType(sourceJobType.replace(' ','_'));
  }
  if (sourceJobFramework != null) {
    processType.setFramework(sourceJobFramework.replace(' ','_'));
  }
  EList nList=processType.getNode();
  EList cList=processType.getConnection();
  MetadataEmfFactory factory=new MetadataEmfFactory();
  JobletUtil jutil=new JobletUtil();
  for (  Element element : elem) {
    if (element instanceof SubjobContainer) {
      saveSubjob(fileFact,processType,(SubjobContainer)element);
      for (      NodeContainer container : ((SubjobContainer)element).getNodeContainers()) {
        if (container instanceof AbstractJobletContainer) {
          if (checkJoblet && container.getNode().isJoblet()) {
            AbstractJobletContainer jobletCon=(AbstractJobletContainer)container;
            saveJobletNode(jobletCon);
          }
          saveNode(fileFact,processType,nList,cList,container.getNode(),factory);
        }
 else {
          saveNode(fileFact,processType,nList,cList,container.getNode(),factory);
        }
      }
    }
 else     if (element instanceof AbstractJobletContainer) {
      if (checkJoblet && ((AbstractJobletContainer)element).getNode().isJoblet()) {
        AbstractJobletContainer jobletCon=(AbstractJobletContainer)element;
        saveJobletNode(jobletCon);
      }
      saveNode(fileFact,processType,nList,cList,((NodeContainer)element).getNode(),factory);
    }
 else     if (element instanceof NodeContainer) {
      saveNode(fileFact,processType,nList,cList,((NodeContainer)element).getNode(),factory);
    }
 else     if (element instanceof Note) {
      saveNote(fileFact,processType,(Note)element);
    }
  }
  processType.setDefaultContext(contextManager.getDefaultContext().getName());
  if (!getScreenshots().isEmpty()) {
    for (    String key : getScreenshots().keySet()) {
      processType.getScreenshots().put(key,getScreenshots().get(key));
    }
  }
  contextManager.saveToEmf(processType.getContext());
  EmfHelper.removeProxy(processType);
  return processType;
}","@Override public ProcessType saveXmlFile(boolean checkJoblet) throws IOException {
  init();
  TalendFileFactory fileFact=TalendFileFactory.eINSTANCE;
  ProcessType processType=createProcessType(fileFact);
  processType.setParameters(fileFact.createParametersType());
  saveProcessElementParameters(processType);
  saveRoutinesDependencies(processType);
  saveAdditionalProperties();
  String sourceJobType=ConvertJobsUtil.getJobTypeFromFramework(this.getProperty().getItem());
  String sourceJobFramework=(String)this.getProperty().getAdditionalProperties().get(ConvertJobsUtil.FRAMEWORK);
  if (sourceJobType != null) {
    processType.setJobType(sourceJobType.replace(' ','_'));
  }
  if (sourceJobFramework != null) {
    processType.setFramework(sourceJobFramework.replace(' ','_'));
  }
  EList nList=processType.getNode();
  EList cList=processType.getConnection();
  MetadataEmfFactory factory=new MetadataEmfFactory();
  JobletUtil jutil=new JobletUtil();
  List<Node> savedNodes=new ArrayList<Node>();
  for (  Element element : elem) {
    if (element instanceof SubjobContainer) {
      saveSubjob(fileFact,processType,(SubjobContainer)element);
      for (      NodeContainer container : ((SubjobContainer)element).getNodeContainers()) {
        if (container instanceof AbstractJobletContainer) {
          if (checkJoblet && container.getNode().isJoblet()) {
            AbstractJobletContainer jobletCon=(AbstractJobletContainer)container;
            saveJobletNode(jobletCon);
          }
          if (!savedNodes.contains(container.getNode())) {
            saveNode(fileFact,processType,nList,cList,container.getNode(),factory);
            savedNodes.add(container.getNode());
          }
        }
 else {
          if (!savedNodes.contains(container.getNode())) {
            saveNode(fileFact,processType,nList,cList,container.getNode(),factory);
            savedNodes.add(container.getNode());
          }
        }
      }
    }
 else     if (element instanceof AbstractJobletContainer) {
      if (checkJoblet && ((AbstractJobletContainer)element).getNode().isJoblet()) {
        AbstractJobletContainer jobletCon=(AbstractJobletContainer)element;
        saveJobletNode(jobletCon);
      }
      if (!savedNodes.contains(((NodeContainer)element).getNode())) {
        saveNode(fileFact,processType,nList,cList,((NodeContainer)element).getNode(),factory);
        savedNodes.add(((NodeContainer)element).getNode());
      }
    }
 else     if (element instanceof NodeContainer) {
      if (!savedNodes.contains(((NodeContainer)element).getNode())) {
        saveNode(fileFact,processType,nList,cList,((NodeContainer)element).getNode(),factory);
        savedNodes.add(((NodeContainer)element).getNode());
      }
    }
 else     if (element instanceof Note) {
      saveNote(fileFact,processType,(Note)element);
    }
  }
  processType.setDefaultContext(contextManager.getDefaultContext().getName());
  if (!getScreenshots().isEmpty()) {
    for (    String key : getScreenshots().keySet()) {
      processType.getScreenshots().put(key,getScreenshots().get(key));
    }
  }
  contextManager.saveToEmf(processType.getContext());
  EmfHelper.removeProxy(processType);
  return processType;
}",0.9026427962489344
117815,"@Override public void initializeRootPoms(){
  try {
    AggregatorPomsHelper helper=new AggregatorPomsHelper();
    helper.installRootPom(true);
    List<ProjectReference> references=ProjectManager.getInstance().getCurrentProject().getProjectReferenceList(true);
    for (    ProjectReference ref : references) {
      initRefPoms(new Project(ref.getReferencedProject()));
    }
    AggregatorPomsHelper.updateRefProjectModules(references);
    helper.updateCodeProjects(new NullProgressMonitor(),true);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override public void initializeRootPoms(){
  IProgressMonitor monitor=new NullProgressMonitor();
  try {
    AggregatorPomsHelper helper=new AggregatorPomsHelper();
    helper.installRootPom(true);
    AggregatorPomsHelper.updateAllCodesProjectNeededModules(monitor);
    List<ProjectReference> references=ProjectManager.getInstance().getCurrentProject().getProjectReferenceList(true);
    for (    ProjectReference ref : references) {
      initRefPoms(new Project(ref.getReferencedProject()));
    }
    AggregatorPomsHelper.updateRefProjectModules(references);
    helper.updateCodeProjects(monitor,true);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.875
117816,"public void switchComponent(INode node,IComponent delegateComponent,String oldEmfComponent,List<? extends IElementParameter> oldParms);","public void switchComponent(INode node,IComponent delegateComponent,String oldEmfComponent,List<? extends IElementParameter> oldParms,List<IMetadataTable> oldMetadataTables,List<INodeConnector> oldConnectors);",0.7848837209302325
117817,"/** 
 * This methods adds a   {@link org.talend.core.model.process.Problem} to the tRunJob if the box""Use an indenpendent process"" is not checked for a target Big Data job. DOC rdubois Comment method ""checkTRunjobwithMRProcess"".
 */
private void checkTRunjobwithMRProcess(){
  if (getComponent() != null && ""String_Node_Str"".equals(getComponent().getName())) {
    boolean targetIsBigdata=false;
    String bigDataType=""String_Node_Str"";
    try {
      boolean isStormServiceRegistered=GlobalServiceRegister.getDefault().isServiceRegistered(IStormProcessService.class);
      boolean isMRServiceRegistered=GlobalServiceRegister.getDefault().isServiceRegistered(IMRProcessService.class);
      if (isStormServiceRegistered || isMRServiceRegistered) {
        IElementParameter elementParameter=getElementParameter(""String_Node_Str"");
        if (elementParameter != null) {
          Object value=elementParameter.getValue();
          if (value != null && !""String_Node_Str"".equals(value)) {
            IRepositoryViewObject lastVersion;
            lastVersion=DesignerPlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().getLastVersion(value.toString());
            if (lastVersion != null) {
              if (isMRServiceRegistered) {
                if (((IMRProcessService)GlobalServiceRegister.getDefault().getService(IMRProcessService.class)).isMapReduceItem(lastVersion.getProperty().getItem())) {
                  targetIsBigdata=true;
                  bigDataType=""String_Node_Str"";
                }
              }
              if (isStormServiceRegistered) {
                if (((IStormProcessService)GlobalServiceRegister.getDefault().getService(IStormProcessService.class)).isStormItem(lastVersion.getProperty().getItem())) {
                  targetIsBigdata=true;
                  bigDataType=""String_Node_Str"";
                }
              }
            }
          }
        }
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
    if (targetIsBigdata) {
      IElementParameter indepedentElement=getElementParameter(""String_Node_Str"");
      if (indepedentElement != null) {
        if (!indepedentElement.isShow(getElementParameters()) || !Boolean.valueOf(String.valueOf(indepedentElement.getValue()))) {
          String message=Messages.getString(""String_Node_Str"",indepedentElement.getDisplayName(),bigDataType);
          Problems.add(ProblemStatus.ERROR,this,message);
        }
      }
    }
  }
}","/** 
 * This methods adds a   {@link org.talend.core.model.process.Problem} to the tRunJob if the box ""Use an indenpendentprocess"" is not checked for a target Big Data job. DOC rdubois Comment method ""checkTRunjobwithMRProcess"".
 */
private void checkTRunjobwithMRProcess(){
  if (getComponent() != null && ""String_Node_Str"".equals(getComponent().getName())) {
    boolean targetIsBigdata=false;
    String bigDataType=""String_Node_Str"";
    try {
      boolean isStormServiceRegistered=GlobalServiceRegister.getDefault().isServiceRegistered(IStormProcessService.class);
      boolean isMRServiceRegistered=GlobalServiceRegister.getDefault().isServiceRegistered(IMRProcessService.class);
      if (isStormServiceRegistered || isMRServiceRegistered) {
        IElementParameter elementParameter=getElementParameter(""String_Node_Str"");
        if (elementParameter != null) {
          Object value=elementParameter.getValue();
          if (value != null && !""String_Node_Str"".equals(value)) {
            IRepositoryViewObject lastVersion;
            lastVersion=DesignerPlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().getLastVersion(value.toString());
            if (lastVersion != null) {
              if (isMRServiceRegistered) {
                if (((IMRProcessService)GlobalServiceRegister.getDefault().getService(IMRProcessService.class)).isMapReduceItem(lastVersion.getProperty().getItem())) {
                  targetIsBigdata=true;
                  bigDataType=""String_Node_Str"";
                }
              }
              if (isStormServiceRegistered) {
                if (((IStormProcessService)GlobalServiceRegister.getDefault().getService(IStormProcessService.class)).isStormItem(lastVersion.getProperty().getItem())) {
                  targetIsBigdata=true;
                  bigDataType=""String_Node_Str"";
                }
              }
            }
          }
        }
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
    if (targetIsBigdata) {
      IElementParameter indepedentElement=getElementParameter(""String_Node_Str"");
      if (indepedentElement != null) {
        if (!indepedentElement.isShow(getElementParameters()) || !Boolean.valueOf(String.valueOf(indepedentElement.getValue()))) {
          String message=Messages.getString(""String_Node_Str"",indepedentElement.getDisplayName(),bigDataType);
          Problems.add(ProblemStatus.ERROR,this,message);
        }
      }
    }
  }
}",0.9995991983967936
117818,"@Override public void reloadComponent(IComponent component,Map<String,Object> parameters,boolean isUpdate){
  this.isUpdate=isUpdate;
  reloadingComponent=true;
  currentStatus=0;
  oldStatus=0;
  Object obj=parameters.get(INode.RELOAD_PARAMETER_ELEMENT_PARAMETERS);
  Map<String,Object> storeValueMap=storeValue(obj);
  if (UnifiedComponentUtil.isDelegateComponent(getDelegateComponent())) {
    setComponentProperties(null);
  }
  init(component);
  IElementParameter param=getElementParameter(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName());
  if (param != null) {
    param.setValue(Boolean.TRUE);
  }
  boolean isJobletNode=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJobletNode=true;
    }
  }
  if (obj != null) {
    if (UnifiedComponentUtil.isDelegateComponent(getDelegateComponent())) {
      Object object=parameters.get(INode.OLD_UNIFIED_COMPONENT);
      String oldComponent=object == null ? null : object.toString();
      UnifiedComponentUtil.switchComponent(this,component,oldComponent,(List<? extends IElementParameter>)obj);
    }
 else {
      List<? extends IElementParameter> oldElementParameters=(List<? extends IElementParameter>)obj;
      for (      IElementParameter sourceParam : oldElementParameters) {
        IElementParameter targetParam=getElementParameter(sourceParam.getName());
        String sourceParamName=sourceParam.getName();
        if (isJobletNode && (EParameterName.PROCESS_TYPE_VERSION.getName()).equals(sourceParamName)) {
          Object versionObj=storeValueMap.get(sourceParamName);
          if (versionObj != null && !versionObj.equals(sourceParam.getValue())) {
            sourceParam.setValue(versionObj);
          }
        }
        if (targetParam != null) {
          if (sourceParam.getName().equals(EParameterName.LABEL.getName()) && (sourceParam.getValue() == null || ""String_Node_Str"".equals(sourceParam.getValue()))) {
            setPropertyValue(sourceParam.getName(),component.getProcess().getName());
          }
 else {
            setPropertyValue(sourceParam.getName(),sourceParam.getValue());
          }
          if (targetParam.getFieldType() == EParameterFieldType.TABLE) {
            targetParam.setListItemsValue(sourceParam.getListItemsValue());
          }
          for (          String name : targetParam.getChildParameters().keySet()) {
            IElementParameter targetChildParam=targetParam.getChildParameters().get(name);
            IElementParameter sourceChildParam=sourceParam.getChildParameters().get(name);
            if (sourceChildParam == null) {
              continue;
            }
            String pname=sourceParam.getName() + ""String_Node_Str"" + sourceChildParam.getName();
            if (storeValueMap.get(pname) != null) {
              setPropertyValue(pname,storeValueMap.get(pname));
            }
 else {
              setPropertyValue(pname,sourceChildParam.getValue());
            }
            if (targetChildParam.getFieldType() == EParameterFieldType.TABLE) {
              targetChildParam.setListItemsValue(sourceChildParam.getListItemsValue());
            }
 else             if (targetChildParam.getFieldType() == EParameterFieldType.CONNECTION_LIST) {
              if (((getPropertyValue(pname) == null || getPropertyValue(pname).toString().length() == 0)) && component.getProcess() instanceof IProcess2 && storeValueMap.containsKey(sourceParam.getName())&& !storeValueMap.containsKey(pname)) {
                storeConn(sourceParam,pname);
              }
            }
          }
        }
      }
    }
  }
  obj=parameters.get(INode.RELOAD_PARAMETER_METADATA_LIST);
  if (obj != null) {
    setMetadataList((List<IMetadataTable>)obj);
  }
  obj=parameters.get(INode.RELOAD_PARAMETER_EXTERNAL_BYTES_DATA);
  if (obj != null && isExternalNode()) {
    if (obj instanceof IExternalData) {
      getExternalNode().setExternalData((IExternalData)obj);
    }
    getExternalNode().initialize();
  }
  obj=parameters.get(INode.RELOAD_PARAMETER_CONNECTORS);
  if (obj != null) {
    List<? extends INodeConnector> connectors=(List<? extends INodeConnector>)obj;
    if (isJobletNode) {
      listConnector=connectors;
    }
 else {
      for (      INodeConnector currentConnector : listConnector) {
        for (        INodeConnector connector : connectors) {
          if (currentConnector.getName().equals(connector.getName())) {
            currentConnector.setCurLinkNbInput(connector.getCurLinkNbInput());
            currentConnector.setCurLinkNbOutput(connector.getCurLinkNbOutput());
            break;
          }
        }
      }
    }
  }
  reloadingComponent=false;
  this.isUpdate=false;
}","@Override public void reloadComponent(IComponent component,Map<String,Object> parameters,boolean isUpdate){
  this.isUpdate=isUpdate;
  reloadingComponent=true;
  currentStatus=0;
  oldStatus=0;
  Object obj=parameters.get(INode.RELOAD_PARAMETER_ELEMENT_PARAMETERS);
  Map<String,Object> storeValueMap=storeValue(obj);
  if (UnifiedComponentUtil.isDelegateComponent(getDelegateComponent())) {
    setComponentProperties(null);
  }
  init(component);
  IElementParameter param=getElementParameter(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName());
  if (param != null) {
    param.setValue(Boolean.TRUE);
  }
  boolean isJobletNode=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJobletNode=true;
    }
  }
  if (obj != null) {
    if (UnifiedComponentUtil.isDelegateComponent(getDelegateComponent())) {
      Object object=parameters.get(INode.OLD_UNIFIED_COMPONENT);
      String oldComponent=object == null ? null : object.toString();
      Object metadatObj=parameters.get(INode.SWITCH_NODE_METADATA_LIST);
      List<IMetadataTable> oldTables=null;
      if (metadatObj != null) {
        oldTables=(List<IMetadataTable>)metadatObj;
      }
      Object connectorObj=parameters.get(INode.SWITCH_NODE_CONNECTORS);
      List<INodeConnector> oldConnectors=null;
      if (metadatObj != null) {
        oldConnectors=(List<INodeConnector>)connectorObj;
      }
      UnifiedComponentUtil.switchComponent(this,component,oldComponent,(List<? extends IElementParameter>)obj,oldTables,oldConnectors);
    }
 else {
      List<? extends IElementParameter> oldElementParameters=(List<? extends IElementParameter>)obj;
      for (      IElementParameter sourceParam : oldElementParameters) {
        IElementParameter targetParam=getElementParameter(sourceParam.getName());
        String sourceParamName=sourceParam.getName();
        if (isJobletNode && (EParameterName.PROCESS_TYPE_VERSION.getName()).equals(sourceParamName)) {
          Object versionObj=storeValueMap.get(sourceParamName);
          if (versionObj != null && !versionObj.equals(sourceParam.getValue())) {
            sourceParam.setValue(versionObj);
          }
        }
        if (targetParam != null) {
          if (sourceParam.getName().equals(EParameterName.LABEL.getName()) && (sourceParam.getValue() == null || ""String_Node_Str"".equals(sourceParam.getValue()))) {
            setPropertyValue(sourceParam.getName(),component.getProcess().getName());
          }
 else {
            setPropertyValue(sourceParam.getName(),sourceParam.getValue());
          }
          if (targetParam.getFieldType() == EParameterFieldType.TABLE) {
            targetParam.setListItemsValue(sourceParam.getListItemsValue());
          }
          for (          String name : targetParam.getChildParameters().keySet()) {
            IElementParameter targetChildParam=targetParam.getChildParameters().get(name);
            IElementParameter sourceChildParam=sourceParam.getChildParameters().get(name);
            if (sourceChildParam == null) {
              continue;
            }
            String pname=sourceParam.getName() + ""String_Node_Str"" + sourceChildParam.getName();
            if (storeValueMap.get(pname) != null) {
              setPropertyValue(pname,storeValueMap.get(pname));
            }
 else {
              setPropertyValue(pname,sourceChildParam.getValue());
            }
            if (targetChildParam.getFieldType() == EParameterFieldType.TABLE) {
              targetChildParam.setListItemsValue(sourceChildParam.getListItemsValue());
            }
 else             if (targetChildParam.getFieldType() == EParameterFieldType.CONNECTION_LIST) {
              if (((getPropertyValue(pname) == null || getPropertyValue(pname).toString().length() == 0)) && component.getProcess() instanceof IProcess2 && storeValueMap.containsKey(sourceParam.getName())&& !storeValueMap.containsKey(pname)) {
                storeConn(sourceParam,pname);
              }
            }
          }
        }
      }
    }
  }
  obj=parameters.get(INode.RELOAD_PARAMETER_METADATA_LIST);
  if (obj != null) {
    setMetadataList((List<IMetadataTable>)obj);
  }
  obj=parameters.get(INode.RELOAD_PARAMETER_EXTERNAL_BYTES_DATA);
  if (obj != null && isExternalNode()) {
    if (obj instanceof IExternalData) {
      getExternalNode().setExternalData((IExternalData)obj);
    }
    getExternalNode().initialize();
  }
  obj=parameters.get(INode.RELOAD_PARAMETER_CONNECTORS);
  if (obj != null) {
    List<? extends INodeConnector> connectors=(List<? extends INodeConnector>)obj;
    if (isJobletNode) {
      listConnector=connectors;
    }
 else {
      for (      INodeConnector currentConnector : listConnector) {
        for (        INodeConnector connector : connectors) {
          if (currentConnector.getName().equals(connector.getName())) {
            currentConnector.setCurLinkNbInput(connector.getCurLinkNbInput());
            currentConnector.setCurLinkNbOutput(connector.getCurLinkNbOutput());
            break;
          }
        }
      }
    }
  }
  reloadingComponent=false;
  this.isUpdate=false;
}",0.4352790628998917
117819,"public static void switchComponent(INode node,IComponent delegateComponent,String oldEmfComponent,List<? extends IElementParameter> oldParms){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IUnifiedComponentService.class)) {
    IUnifiedComponentService service=(IUnifiedComponentService)GlobalServiceRegister.getDefault().getService(IUnifiedComponentService.class);
    service.switchComponent(node,delegateComponent,oldEmfComponent,oldParms);
  }
}","public static void switchComponent(INode node,IComponent delegateComponent,String oldEmfComponent,List<? extends IElementParameter> oldParms,List<IMetadataTable> oldMetadataTables,List<INodeConnector> oldConnectors){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IUnifiedComponentService.class)) {
    IUnifiedComponentService service=(IUnifiedComponentService)GlobalServiceRegister.getDefault().getService(IUnifiedComponentService.class);
    service.switchComponent(node,delegateComponent,oldEmfComponent,oldParms,oldMetadataTables,oldConnectors);
  }
}",0.8974854932301741
117820,"@Override public List<String> extractArgumentSegments(){
  List<String> list=new ArrayList<>();
  list.add(ProcessorConstants.CMD_KEY_WORD_LIBJAR);
  StringBuffer libJars=new StringBuffer();
  Set<String> libNames=new HashSet<>();
  boolean isExport=isExportConfig() || isRunAsExport();
  if (process instanceof IProcess2) {
    if (isExport) {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducer((IProcess2)process);
    }
 else {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducerWithoutRoutines((IProcess2)process);
    }
  }
  Set<ModuleNeeded> modulesNeeded=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(process.getId(),process.getVersion());
  Set<String> allNeededLibsAfterAdjuster=new HashSet<String>();
  for (  ModuleNeeded module : modulesNeeded) {
    allNeededLibsAfterAdjuster.add(module.getModuleName());
  }
  Iterator<String> it=libNames.iterator();
  while (it.hasNext()) {
    String jarName=it.next();
    if (!allNeededLibsAfterAdjuster.contains(jarName) && !JavaUtils.ROUTINES_JAR.equals(jarName) && !JavaUtils.BEANS_JAR.equals(jarName)&& !JavaUtils.PIGUDFS_JAR.equals(jarName)) {
      it.remove();
    }
  }
  File libDir=JavaProcessorUtilities.getJavaProjectLibFolder();
  String libFolder=""String_Node_Str"";
  if (libDir != null) {
    libFolder=new Path(libDir.getAbsolutePath()).toPortableString();
  }
  boolean needAllLibJars=true;
  if (needsShade()) {
    BigDataJobUtil bdUtil=new BigDataJobUtil((ProcessItem)this.getProperty().getItem());
    if (bdUtil.isMRWithHDInsight()) {
      needAllLibJars=false;
    }
  }
  if (libNames != null && libNames.size() > 0 && needAllLibJars) {
    Iterator<String> itLibNames=libNames.iterator();
    while (itLibNames.hasNext()) {
      if (isExport) {
        libJars.append(getLibFolderInWorkingDir() + itLibNames.next()).append(',');
      }
 else {
        libJars.append(libFolder + ""String_Node_Str"" + itLibNames.next()).append(',');
      }
    }
  }
  if (isExport) {
    libJars.append(""String_Node_Str"" + makeupJobJarName());
  }
 else {
    if (needAllLibJars) {
      ITalendProcessJavaProject routineProject=TalendJavaProjectManager.getTalendCodeJavaProject(ERepositoryObjectType.ROUTINES);
      IFile routinesJar=routineProject.getTargetFolder().getFile(JavaUtils.ROUTINE_JAR_NAME + ""String_Node_Str"" + PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
      libJars.append(routinesJar.getLocation().toPortableString() + ""String_Node_Str"");
      if (ProcessUtils.isRequiredPigUDFs(process)) {
        ITalendProcessJavaProject pigudfProject=TalendJavaProjectManager.getTalendCodeJavaProject(ERepositoryObjectType.PIG_UDF);
        IFile pigudfsJar=pigudfProject.getTargetFolder().getFile(JavaUtils.PIGUDFS_JAR_NAME + ""String_Node_Str"" + PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
        libJars.append(pigudfsJar.getLocation().toPortableString() + ""String_Node_Str"");
      }
      if (ProcessUtils.isRequiredBeans(process)) {
        ITalendProcessJavaProject beansProject=TalendJavaProjectManager.getTalendCodeJavaProject(ERepositoryObjectType.valueOf(""String_Node_Str""));
        IFile beansJar=beansProject.getTargetFolder().getFile(JavaUtils.BEANS_JAR_NAME + ""String_Node_Str"" + PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
        libJars.append(beansJar.getLocation().toPortableString() + ""String_Node_Str"");
      }
    }
    libJars.append(getTalendJavaProject().getTargetFolder().getLocation().toPortableString() + ""String_Node_Str"" + makeupJobJarName());
  }
  list.add(libJars.toString());
  return list;
}","@Override public List<String> extractArgumentSegments(){
  List<String> list=new ArrayList<>();
  list.add(ProcessorConstants.CMD_KEY_WORD_LIBJAR);
  StringBuffer libJars=new StringBuffer();
  Set<String> libNames=new HashSet<>();
  boolean isExport=isExportConfig() || isRunAsExport();
  if (process instanceof IProcess2) {
    if (isExport) {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducer((IProcess2)process);
    }
 else {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducerWithoutRoutines((IProcess2)process);
    }
  }
  Set<ModuleNeeded> modulesNeeded=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(process.getId(),process.getVersion());
  Set<String> allNeededLibsAfterAdjuster=new HashSet<String>();
  for (  ModuleNeeded module : modulesNeeded) {
    allNeededLibsAfterAdjuster.add(module.getModuleName());
  }
  Iterator<String> it=libNames.iterator();
  while (it.hasNext()) {
    String jarName=it.next();
    if (!allNeededLibsAfterAdjuster.contains(jarName) && !JavaUtils.ROUTINES_JAR.equals(jarName) && !JavaUtils.BEANS_JAR.equals(jarName)&& !JavaUtils.PIGUDFS_JAR.equals(jarName)) {
      it.remove();
    }
  }
  File libDir=JavaProcessorUtilities.getJavaProjectLibFolder();
  String libFolder=""String_Node_Str"";
  if (libDir != null) {
    libFolder=new Path(libDir.getAbsolutePath()).toPortableString();
  }
  boolean needAllLibJars=true;
  if (needsShade()) {
    BigDataJobUtil bdUtil=new BigDataJobUtil((ProcessItem)this.getProperty().getItem());
    if (bdUtil.isMRWithHDInsight()) {
      needAllLibJars=false;
    }
  }
  if (libNames != null && libNames.size() > 0 && needAllLibJars) {
    Iterator<String> itLibNames=libNames.iterator();
    while (itLibNames.hasNext()) {
      if (isExport) {
        libJars.append(getLibFolderInWorkingDir() + itLibNames.next()).append(',');
      }
 else {
        libJars.append(libFolder + ""String_Node_Str"" + itLibNames.next()).append(',');
      }
    }
  }
  if (isExport) {
    libJars.append(""String_Node_Str"" + makeupJobJarName());
    if (!needAllLibJars) {
      libJars.append(""String_Node_Str"");
    }
  }
 else {
    if (needAllLibJars) {
      ITalendProcessJavaProject routineProject=TalendJavaProjectManager.getTalendCodeJavaProject(ERepositoryObjectType.ROUTINES);
      IFile routinesJar=routineProject.getTargetFolder().getFile(JavaUtils.ROUTINE_JAR_NAME + ""String_Node_Str"" + PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
      libJars.append(routinesJar.getLocation().toPortableString() + ""String_Node_Str"");
      if (ProcessUtils.isRequiredPigUDFs(process)) {
        ITalendProcessJavaProject pigudfProject=TalendJavaProjectManager.getTalendCodeJavaProject(ERepositoryObjectType.PIG_UDF);
        IFile pigudfsJar=pigudfProject.getTargetFolder().getFile(JavaUtils.PIGUDFS_JAR_NAME + ""String_Node_Str"" + PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
        libJars.append(pigudfsJar.getLocation().toPortableString() + ""String_Node_Str"");
      }
      if (ProcessUtils.isRequiredBeans(process)) {
        ITalendProcessJavaProject beansProject=TalendJavaProjectManager.getTalendCodeJavaProject(ERepositoryObjectType.valueOf(""String_Node_Str""));
        IFile beansJar=beansProject.getTargetFolder().getFile(JavaUtils.BEANS_JAR_NAME + ""String_Node_Str"" + PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
        libJars.append(beansJar.getLocation().toPortableString() + ""String_Node_Str"");
      }
    }
    libJars.append(getTalendJavaProject().getTargetFolder().getLocation().toPortableString() + ""String_Node_Str"" + makeupJobJarName());
  }
  list.add(libJars.toString());
  return list;
}",0.9899429192715412
117821,"public static void generatePom(Item item,int option){
  ProcessorUtilities.setGeneratePomOnly(true);
  option|=TalendProcessOptionConstants.GENERATE_POM_ONLY;
  option|=TalendProcessOptionConstants.GENERATE_IS_MAINJOB;
  try {
    IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
    IProcess process=service.getProcessFromItem(item);
    IContext context=process.getContextManager().getDefaultContext();
    IProcessor processor=ProcessorUtilities.getProcessor(process,item.getProperty(),context);
    if (processor instanceof MavenJavaProcessor) {
      LastGenerationInfo.getInstance().clearModulesNeededWithSubjobPerJob();
      ((MavenJavaProcessor)processor).generatePom(option);
    }
    AggregatorPomsHelper.addToParentModules(AggregatorPomsHelper.getItemPomFolder(item.getProperty()).getFile(TalendMavenConstants.POM_FILE_NAME),item.getProperty());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    ProcessorUtilities.setGeneratePomOnly(false);
  }
}","public static void generatePom(Item item,int option){
  ProcessorUtilities.setGeneratePomOnly(true);
  option|=TalendProcessOptionConstants.GENERATE_POM_ONLY;
  option|=TalendProcessOptionConstants.GENERATE_IS_MAINJOB;
  try {
    IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
    IProcess process=service.getProcessFromItem(item);
    IContext context=process.getContextManager().getDefaultContext();
    IProcessor processor=ProcessorUtilities.getProcessor(process,item.getProperty(),context);
    if (processor instanceof MavenJavaProcessor) {
      LastGenerationInfo.getInstance().clearModulesNeededWithSubjobPerJob();
      ((MavenJavaProcessor)processor).generatePom(option);
    }
    AggregatorPomsHelper.addToParentModules(AggregatorPomsHelper.getItemPomFolder(item.getProperty()).getFile(TalendMavenConstants.POM_FILE_NAME),item.getProperty());
  }
 catch (  Exception e) {
    String errorMsg=""String_Node_Str"" + item.getProperty().getLabel() + ""String_Node_Str""+ item.getProperty().getVersion()+ ""String_Node_Str"";
    Exception exception=new Exception(errorMsg,e);
    ExceptionHandler.process(exception);
  }
 finally {
    ProcessorUtilities.setGeneratePomOnly(false);
  }
}",0.9099821746880572
117822,"public static String getDefaultInterpreter() throws ProcessorException {
  IPreferenceStore prefStore=CorePlugin.getDefault().getPreferenceStore();
  String javaInterpreter=prefStore.getString(ITalendCorePrefConstants.JAVA_INTERPRETER);
  if (javaInterpreter == null || javaInterpreter.length() == 0) {
    throw new ProcessorException(Messages.getString(""String_Node_Str""));
  }
  Path path=new Path(javaInterpreter);
  javaInterpreter=path.toPortableString();
  return javaInterpreter;
}","public static String getDefaultInterpreter() throws ProcessorException {
  IPreferenceStore prefStore=CorePlugin.getDefault().getPreferenceStore();
  String javaInterpreter=prefStore.getString(ITalendCorePrefConstants.JAVA_INTERPRETER);
  if (javaInterpreter == null || javaInterpreter.length() == 0) {
    javaInterpreter=""String_Node_Str"";
  }
  Path path=new Path(javaInterpreter);
  javaInterpreter=path.toPortableString();
  return javaInterpreter;
}",0.9300847457627118
117823,"@Override public Object start(IApplicationContext context) throws Exception {
  Timer.getTimer(""String_Node_Str"").start();
  CommonsPlugin.setHeadless(true);
  initLocalRepository();
  init(ECodeLanguage.JAVA);
  removeLinkedResources();
  addMarkersForTemplatesNextInitialization();
  saveWorkspace();
  Timer.getTimer(""String_Node_Str"").stop();
  Timer.getTimer(""String_Node_Str"").print();
  return EXIT_OK;
}","@Override public Object start(IApplicationContext context) throws Exception {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Timer.getTimer(""String_Node_Str"").start();
  CommonsPlugin.setHeadless(true);
  initLocalRepository();
  init(ECodeLanguage.JAVA);
  removeLinkedResources();
  addMarkersForTemplatesNextInitialization();
  saveWorkspace();
  Timer.getTimer(""String_Node_Str"").stop();
  Timer.getTimer(""String_Node_Str"").print();
  return EXIT_OK;
}",0.9330306469920544
117824,"private static void synchronizedComponent(List<JetBean> components,IProgressMonitor sub,List<JetBean> alreadyCompiledEmitters,TalendJetEmitter dummyEmitter,int monitorBuffer,IProgressMonitor monitorWrap){
  for (  JetBean jetBean : components) {
    if (!emitterPool.containsKey(jetBean)) {
      ComponentCompilations.deleteMarkers();
      TalendJetEmitter emitter=new TalendJetEmitter(jetBean,dummyEmitter.getTalendEclipseHelper());
      if (monitorWrap.isCanceled()) {
        if (!CommonUIPlugin.isFullyHeadless()) {
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              MessageDialog.openError(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
);
        }
        return;
      }
      try {
        emitter.initialize(sub);
      }
 catch (      JETException e) {
        log.error(Messages.getString(""String_Node_Str"") + e.getMessage(),e);
        continue;
      }
      if (emitter.isClassAvailable()) {
        alreadyCompiledEmitters.add(jetBean);
      }
 else {
        jetFilesCompileFail.add(jetBean);
      }
      emitterPool.put(jetBean,emitter);
      monitorBuffer++;
      if (monitorBuffer % 100 == 0) {
        monitorWrap.worked(100);
        monitorBuffer=0;
      }
    }
  }
}","private static void synchronizedComponent(List<JetBean> components,IProgressMonitor sub,List<JetBean> alreadyCompiledEmitters,TalendJetEmitter dummyEmitter,int monitorBuffer,IProgressMonitor monitorWrap){
  for (  JetBean jetBean : components) {
    if (!emitterPool.containsKey(jetBean)) {
      ComponentCompilations.deleteMarkers();
      TalendJetEmitter emitter=new TalendJetEmitter(jetBean,dummyEmitter.getTalendEclipseHelper());
      if (monitorWrap.isCanceled()) {
        if (!CommonUIPlugin.isFullyHeadless()) {
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              MessageDialog.openError(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
);
        }
        return;
      }
      if (Boolean.getBoolean(""String_Node_Str"")) {
        try {
          emitter.initialize(sub);
        }
 catch (        JETException e) {
          log.error(Messages.getString(""String_Node_Str"") + e.getMessage(),e);
          continue;
        }
      }
      if (emitter.isClassAvailable()) {
        alreadyCompiledEmitters.add(jetBean);
      }
 else {
        jetFilesCompileFail.add(jetBean);
      }
      emitterPool.put(jetBean,emitter);
      monitorBuffer++;
      if (monitorBuffer % 100 == 0) {
        monitorWrap.worked(100);
        monitorBuffer=0;
      }
    }
  }
}",0.9737693136902624
117825,"/** 
 * initialization of available templates.
 * @param template
 * @param codeLanguage
 * @return
 */
private static JetBean initializeUtilTemplate(TemplateUtil template,ECodeLanguage codeLanguage){
  JetBean jetBean=new JetBean(template.getJetPluginRepository(),template.getTemplateRelativeUri(),template.getResourceName(),template.getVersion(),codeLanguage.getName(),""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",CorePlugin.PLUGIN_ID);
  jetBean.addClassPath(""String_Node_Str"",CodeGeneratorActivator.PLUGIN_ID);
  jetBean.addClassPath(""String_Node_Str"",CommonsPlugin.PLUGIN_ID);
  jetBean.setClassLoader(new CodeGeneratorEmittersPoolFactory().getClass().getClassLoader());
  String sparkUtilsPluginName=""String_Node_Str"";
  if (PluginChecker.isPluginLoaded(sparkUtilsPluginName)) {
    jetBean.addClassPath(""String_Node_Str"",sparkUtilsPluginName);
    jetBean.setClassLoader(createDelegateClassLoader(jetBean.getClassLoader(),sparkUtilsPluginName,""String_Node_Str""));
  }
  return jetBean;
}","/** 
 * initialization of available templates.
 * @param template
 * @param codeLanguage
 * @return
 */
private static JetBean initializeUtilTemplate(TemplateUtil template,ECodeLanguage codeLanguage){
  JetBean jetBean=new JetBean(template.getJetPluginRepository(),template.getTemplateRelativeUri(),template.getResourceName(),template.getVersion(),codeLanguage.getName(),""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",CorePlugin.PLUGIN_ID);
  jetBean.addClassPath(""String_Node_Str"",CodeGeneratorActivator.PLUGIN_ID);
  jetBean.addClassPath(""String_Node_Str"",CommonsPlugin.PLUGIN_ID);
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.addClassPath(""String_Node_Str"",""String_Node_Str"");
  jetBean.setClassLoader(new CodeGeneratorEmittersPoolFactory().getClass().getClassLoader());
  String sparkUtilsPluginName=""String_Node_Str"";
  if (PluginChecker.isPluginLoaded(sparkUtilsPluginName)) {
    jetBean.addClassPath(""String_Node_Str"",sparkUtilsPluginName);
    jetBean.setClassLoader(createDelegateClassLoader(jetBean.getClassLoader(),sparkUtilsPluginName,""String_Node_Str""));
  }
  return jetBean;
}",0.8048346960540348
117826,"@Override public void validateSyntax(){
  ISourceViewer sourceViewer=getSourceViewer();
  if (sourceViewer instanceof JavaSourceViewer) {
    this.getSourceViewer().getTextWidget().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        placeCursorToSelection();
        Property property=process.getProperty();
        final ITalendSynchronizer synchronizer=CorePlugin.getDefault().getCodeGeneratorService().createRoutineSynchronizer();
        try {
          Item item=property.getItem();
          List<Information> informations=Problems.addRoutineFile(synchronizer.getFile(item),property,true);
          List<Information> testInformations=null;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
            ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
            if (testContainerService != null) {
              testInformations=testContainerService.getTestContainerInformations(item);
            }
          }
          property.getInformations().clear();
          for (          Information info : informations) {
            if (info.getLevel().equals(InformationLevel.ERROR_LITERAL)) {
              property.getInformations().add(info);
            }
          }
          if (testInformations != null) {
            property.getInformations().addAll(testInformations);
          }
          Problems.computePropertyMaxInformationLevel(property,false);
        }
 catch (        SystemException e) {
          ExceptionHandler.process(e);
        }
        Problems.refreshProblemTreeView();
      }
    }
);
  }
}","@Override public void validateSyntax(){
  FileEditorInput fileEditorInput=(FileEditorInput)this.getEditorInput();
  IFile codeFile=fileEditorInput.getFile();
  if (!initialized) {
    this.setInput(new FileEditorInput(codeFile));
    initialized=true;
  }
  ISourceViewer sourceViewer=getSourceViewer();
  if (sourceViewer instanceof JavaSourceViewer) {
    this.getSourceViewer().getTextWidget().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        placeCursorToSelection();
        Property property=process.getProperty();
        final ITalendSynchronizer synchronizer=CorePlugin.getDefault().getCodeGeneratorService().createRoutineSynchronizer();
        try {
          Item item=property.getItem();
          List<Information> informations=Problems.addRoutineFile(synchronizer.getFile(item),property,true);
          List<Information> testInformations=null;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
            ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
            if (testContainerService != null) {
              testInformations=testContainerService.getTestContainerInformations(item);
            }
          }
          property.getInformations().clear();
          for (          Information info : informations) {
            if (info.getLevel().equals(InformationLevel.ERROR_LITERAL)) {
              property.getInformations().add(info);
            }
          }
          if (testInformations != null) {
            property.getInformations().addAll(testInformations);
          }
          Problems.computePropertyMaxInformationLevel(property,false);
        }
 catch (        SystemException e) {
          ExceptionHandler.process(e);
        }
        Problems.refreshProblemTreeView();
      }
    }
);
  }
}",0.9413998914812806
117827,"@Override public void dispose(){
  this.disposed=true;
  this.unit=null;
  this.process=null;
  super.dispose();
}","@Override public void dispose(){
  this.disposed=true;
  this.process=null;
  super.dispose();
}",0.9142857142857144
117828,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  addCompiler();
  getSourceViewer().setEditable(isEditable());
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  getSourceViewer().setEditable(isEditable());
}",0.9435215946843852
117829,"/** 
 * Getter for unit.
 * @return the unit
 */
public org.eclipse.jdt.core.ICompilationUnit getUnit(){
  return unit;
}","/** 
 * Getter for unit.
 * @return the unit
 */
public org.eclipse.jdt.core.ICompilationUnit getUnit(){
  return (org.eclipse.jdt.core.ICompilationUnit)getInputJavaElement();
}",0.8053691275167785
117830,"@Override protected String getExportJarsStr(){
  if (isOldBuildJob()) {
    return super.getExportJarsStr();
  }
  final String libPrefixPath=getRootWorkingDir(true);
  final String classPathSeparator=extractClassPathSeparator();
  String jobName=process.getName();
  String jobVersion=process.getVersion();
  if (ProcessUtils.isTestContainer(process)) {
    IProcess basePrcess=ProcessUtils.getTestContainerBaseProcess(process);
    jobName=basePrcess.getName();
    jobVersion=basePrcess.getVersion();
  }
  String jarName=JavaResourcesHelper.getJobJarName(jobName,jobVersion);
  String exportJar=libPrefixPath + jarName + FileExtensions.JAR_FILE_SUFFIX;
  Set<JobInfo> infos=getBuildChildrenJobs();
  for (  JobInfo jobInfo : infos) {
    if (jobInfo.isTestContainer()) {
      continue;
    }
    String childJarName=JavaResourcesHelper.getJobJarName(jobInfo.getJobName(),jobInfo.getJobVersion());
    exportJar+=classPathSeparator + libPrefixPath + childJarName+ FileExtensions.JAR_FILE_SUFFIX;
  }
  return exportJar;
}","@Override protected String getExportJarsStr(){
  if (isOldBuildJob()) {
    return super.getExportJarsStr();
  }
  final String libPrefixPath=getRootWorkingDir(true);
  final String classPathSeparator=extractClassPathSeparator();
  String jobName=process.getName();
  String jobVersion=process.getVersion();
  if (ProcessUtils.isTestContainer(process)) {
    IProcess basePrcess=ProcessUtils.getTestContainerBaseProcess(process);
    jobName=basePrcess.getName();
    jobVersion=basePrcess.getVersion();
  }
  String jarName=JavaResourcesHelper.getJobJarName(jobName,jobVersion);
  String exportJar=libPrefixPath + jarName + FileExtensions.JAR_FILE_SUFFIX;
  if (!isMainJob || isMainJob && !ProcessorUtilities.hasLoopDependency()) {
    Set<JobInfo> infos=getBuildChildrenJobs();
    for (    JobInfo jobInfo : infos) {
      if (jobInfo.isTestContainer()) {
        continue;
      }
      String childJarName=JavaResourcesHelper.getJobJarName(jobInfo.getJobName(),jobInfo.getJobVersion());
      exportJar+=classPathSeparator + libPrefixPath + childJarName+ FileExtensions.JAR_FILE_SUFFIX;
    }
  }
  return exportJar;
}",0.9497206703910616
117831,"public void generatePom(int option){
  if (buildChildrenJobs != null) {
    buildChildrenJobs.clear();
  }
  if (ProcessorUtilities.isGeneratePomOnly()) {
    ProcessorUtilities.resetExportConfig();
  }
 else {
    initJobClasspath();
  }
  try {
    IMavenPomCreator createTemplatePom=createMavenPomCreator();
    if (createTemplatePom != null) {
      createTemplatePom.setSyncCodesPoms(option == 0);
      boolean previousValue=ProcessUtils.jarNeedsToContainContext();
      ProcessUtils.setJarWithContext(ProcessUtils.needsToHaveContextInsideJar((ProcessItem)property.getItem()));
      createTemplatePom.create(null);
      ProcessUtils.setJarWithContext(previousValue);
      if (getTalendJavaProject() != null) {
        getTalendJavaProject().setUseTempPom(false);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public void generatePom(int option){
  if (buildChildrenJobs != null) {
    buildChildrenJobs.clear();
  }
  isMainJob=BitwiseOptionUtils.containOption(option,TalendProcessOptionConstants.GENERATE_IS_MAINJOB);
  if (ProcessorUtilities.isGeneratePomOnly()) {
    ProcessorUtilities.resetExportConfig();
  }
 else {
    initJobClasspath();
  }
  try {
    IMavenPomCreator createTemplatePom=createMavenPomCreator();
    if (createTemplatePom != null) {
      createTemplatePom.setSyncCodesPoms(isMainJob);
      if (isMainJob) {
        createTemplatePom.setHasLoopDependency(ProcessorUtilities.hasLoopDependency());
      }
      boolean previousValue=ProcessUtils.jarNeedsToContainContext();
      ProcessUtils.setJarWithContext(ProcessUtils.needsToHaveContextInsideJar((ProcessItem)property.getItem()));
      createTemplatePom.create(null);
      ProcessUtils.setJarWithContext(previousValue);
      if (getTalendJavaProject() != null) {
        getTalendJavaProject().setUseTempPom(false);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.8724066390041494
117832,"protected boolean hasTcomp0Component(final INode iNode){
  return iNode.getProcess() != null && new ArrayList<>(iNode.getProcess().getGraphicalNodes()).stream().anyMatch(node -> node.getComponent().getComponentType() == EComponentType.GENERIC && !getClass().isInstance(node.getComponent()));
}","protected boolean hasTcomp0Component(final INode iNode){
  if (iNode == null) {
    return false;
  }
  IProcess process=iNode.getProcess();
  if (process == null) {
    return false;
  }
  List<? extends INode> graphicalNodes=process.getGraphicalNodes();
  if (graphicalNodes == null || graphicalNodes.isEmpty()) {
    return false;
  }
  boolean hasTcomp0Component=false;
  for (  INode node : graphicalNodes) {
    if (node != null) {
      IComponent component=node.getComponent();
      if (component != null) {
        if (component.getComponentType() == EComponentType.GENERIC && !getClass().isInstance(component)) {
          hasTcomp0Component=true;
          break;
        }
      }
    }
  }
  return hasTcomp0Component;
}",0.3213242453748783
117833,"/** 
 * DOC nrousseau Comment method ""getItemPomFolder"".
 * @param property
 * @param helper
 * @return
 * @throws CoreException 
 */
public static IFolder getItemPomFolder(Property property) throws CoreException {
  String projectTechName=ProjectManager.getInstance().getProject(property).getTechnicalLabel();
  AggregatorPomsHelper helper=new AggregatorPomsHelper(projectTechName);
  IPath itemRelativePath=ItemResourceUtil.getItemRelativePath(property);
  String jobFolderName=AggregatorPomsHelper.getJobProjectFolderName(property);
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
  IFolder jobFolder=helper.getProcessFolder(type).getFolder(itemRelativePath).getFolder(jobFolderName);
  createFoldersIfNeeded(jobFolder);
  return jobFolder;
}","/** 
 * DOC nrousseau Comment method ""getItemPomFolder"".
 * @param property
 * @param helper
 * @return
 * @throws Exception 
 */
public static IFolder getItemPomFolder(Property property) throws Exception {
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService.isTestContainerItem(property.getItem())) {
      Item jobItem=testContainerService.getParentJobItem(property.getItem());
      if (jobItem != null) {
        property=jobItem.getProperty();
      }
    }
  }
  String projectTechName=ProjectManager.getInstance().getProject(property).getTechnicalLabel();
  AggregatorPomsHelper helper=new AggregatorPomsHelper(projectTechName);
  IPath itemRelativePath=ItemResourceUtil.getItemRelativePath(property);
  String jobFolderName=AggregatorPomsHelper.getJobProjectFolderName(property);
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
  IFolder jobFolder=helper.getProcessFolder(type).getFolder(itemRelativePath).getFolder(jobFolderName);
  createFoldersIfNeeded(jobFolder);
  return jobFolder;
}",0.7497575169738119
117834,"/** 
 * .Java/pom_TestJob_0.1.xml
 */
protected IFile getPomFile(){
  if (isStandardJob()) {
    String pomFileName=TalendMavenConstants.POM_FILE_NAME;
    if (this.getTalendJavaProject() == null) {
      try {
        return TalendJavaProjectManager.getItemPomFolder(property).getFile(pomFileName);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
        return null;
      }
    }
 else {
      return this.getTalendJavaProject().getProject().getFile(pomFileName);
    }
  }
 else {
    return null;
  }
}","/** 
 * .Java/pom_TestJob_0.1.xml
 */
protected IFile getPomFile(){
  if (isStandardJob()) {
    String pomFileName=TalendMavenConstants.POM_FILE_NAME;
    if (this.getTalendJavaProject() == null) {
      try {
        return TalendJavaProjectManager.getItemPomFolder(property).getFile(pomFileName);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return null;
      }
    }
 else {
      return this.getTalendJavaProject().getProject().getFile(pomFileName);
    }
  }
 else {
    return null;
  }
}",0.9962616822429906
117835,"@SuppressWarnings(""String_Node_Str"") private void caseImport(String propertyName,Object newValue){
  if (newValue instanceof Set) {
    Set<Item> importItems=(Set<Item>)newValue;
    for (    Item item : importItems) {
      if (item instanceof ProcessItem) {
        TalendJavaProjectManager.generatePom((ProcessItem)item);
      }
 else       if (item instanceof RoutineItem) {
        updateCodesChange((RoutineItem)item);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void caseImport(String propertyName,Object newValue){
  if (newValue instanceof Set) {
    Set<Item> importItems=(Set<Item>)newValue;
    for (    Item item : importItems) {
      if (item instanceof ProcessItem) {
        ITestContainerProviderService testcontainerService=getTestContainerProviderService();
        if (testcontainerService != null && testcontainerService.isTestContainerItem(item)) {
          return;
        }
        TalendJavaProjectManager.generatePom((ProcessItem)item);
      }
 else       if (item instanceof RoutineItem) {
        updateCodesChange((RoutineItem)item);
      }
    }
  }
}",0.8047016274864376
117836,"@Override public void build(IProgressMonitor monitor) throws Exception {
  BuildCacheManager buildCacheManager=BuildCacheManager.getInstance();
  final ITalendProcessJavaProject talendJavaProject=getTalendJavaProject();
  String goal=getGoals();
  boolean isGoalPackage=TalendMavenConstants.GOAL_PACKAGE.equals(goal);
  boolean isGoalInstall=TalendMavenConstants.GOAL_INSTALL.equals(goal);
  boolean isMainJob=LastGenerationInfo.getInstance().isCurrentMainJob();
  if (!isMainJob && isGoalInstall) {
    if (!buildCacheManager.isJobBuild(getProperty())) {
      deleteExistedJobJarFile(talendJavaProject);
      buildCacheManager.putCache(getProperty());
    }
 else {
      PomUtil.restorePomFile(getTalendJavaProject());
    }
    return;
  }
  if (isMainJob) {
    final Map<String,Object> argumentsMap=new HashMap<String,Object>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + BuildCacheManager.BUILD_AGGREGATOR_POM_NAME + ""String_Node_Str""+ (packagingAndAssembly() ? ""String_Node_Str"" : ""String_Node_Str"")+ TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
    buildCacheManager.build(monitor,argumentsMap);
    if (!MavenProjectUtils.hasMavenNature(project)) {
      MavenProjectUtils.enableMavenNature(monitor,project);
    }
 else {
      if (buildCacheManager.needTempAggregator() || !CommonUIPlugin.isFullyHeadless()) {
        MavenProjectUtils.updateMavenProject(monitor,talendJavaProject.getProject());
      }
    }
    buildCacheManager.buildAllSubjobMavenProjects();
    if (CommonUIPlugin.isFullyHeadless()) {
      AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.ROUTINES,false,true);
      if (ProcessUtils.isRequiredPigUDFs(null)) {
        AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.PIG_UDF,false,true);
      }
      if (ProcessUtils.isRequiredBeans(null)) {
        AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.valueOf(""String_Node_Str""),false,true);
      }
    }
  }
  IFile jobJarFile=null;
  if (!TalendMavenConstants.GOAL_COMPILE.equals(goal)) {
    if (isGoalPackage) {
      jobJarFile=deleteExistedJobJarFile(talendJavaProject);
    }
    talendJavaProject.buildModules(monitor,null,null);
  }
  final Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,goal);
  if (isGoalPackage) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  }
  talendJavaProject.buildModules(monitor,null,argumentsMap);
  if (isGoalPackage) {
    if (jobJarFile != null) {
      jobJarFile.refreshLocal(IResource.DEPTH_ONE,null);
    }
    if (jobJarFile == null || !jobJarFile.exists()) {
      String mvnLogFilePath=talendJavaProject.getProject().getFile(""String_Node_Str"").getLocation().toPortableString();
      throw new Exception(Messages.getString(""String_Node_Str"",mvnLogFilePath));
    }
  }
}","@Override public void build(IProgressMonitor monitor) throws Exception {
  BuildCacheManager buildCacheManager=BuildCacheManager.getInstance();
  final ITalendProcessJavaProject talendJavaProject=getTalendJavaProject();
  String goal=getGoals();
  boolean isGoalPackage=TalendMavenConstants.GOAL_PACKAGE.equals(goal);
  boolean isGoalInstall=TalendMavenConstants.GOAL_INSTALL.equals(goal);
  boolean isMainJob=LastGenerationInfo.getInstance().isCurrentMainJob();
  if (!isMainJob && isGoalInstall) {
    if (!buildCacheManager.isJobBuild(getProperty())) {
      deleteExistedJobJarFile(talendJavaProject);
      buildCacheManager.putCache(getProperty());
    }
 else {
      PomUtil.restorePomFile(getTalendJavaProject());
    }
    return;
  }
  if (isMainJob) {
    final Map<String,Object> argumentsMap=new HashMap<String,Object>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + BuildCacheManager.BUILD_AGGREGATOR_POM_NAME + ""String_Node_Str""+ (packagingAndAssembly() ? ""String_Node_Str"" : ""String_Node_Str"")+ TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
    buildCacheManager.build(monitor,argumentsMap);
    if (!MavenProjectUtils.hasMavenNature(project)) {
      MavenProjectUtils.enableMavenNature(monitor,project);
    }
 else {
      if (buildCacheManager.needTempAggregator() || !CommonUIPlugin.isFullyHeadless()) {
        MavenProjectUtils.updateMavenProject(monitor,talendJavaProject.getProject());
      }
    }
    buildCacheManager.buildAllSubjobMavenProjects();
  }
  IFile jobJarFile=null;
  if (!TalendMavenConstants.GOAL_COMPILE.equals(goal)) {
    if (isGoalPackage) {
      jobJarFile=deleteExistedJobJarFile(talendJavaProject);
    }
    talendJavaProject.buildModules(monitor,null,null);
  }
  final Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,goal);
  if (isGoalPackage) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  }
  talendJavaProject.buildModules(monitor,null,argumentsMap);
  if (isGoalPackage) {
    if (jobJarFile != null) {
      jobJarFile.refreshLocal(IResource.DEPTH_ONE,null);
    }
    if (jobJarFile == null || !jobJarFile.exists()) {
      String mvnLogFilePath=talendJavaProject.getProject().getFile(""String_Node_Str"").getLocation().toPortableString();
      throw new Exception(Messages.getString(""String_Node_Str"",mvnLogFilePath));
    }
  }
}",0.9115384615384616
117837,"@Override public ExecutionResult execute(Item item){
  if (item instanceof ProcessItem) {
    ProcessItem processItem=(ProcessItem)item;
    CorePlugin.getDefault().getRunProcessService().generateJobPom(processItem);
    return ExecutionResult.SUCCESS_NO_ALERT;
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(Item item){
  if (item instanceof ProcessItem && !ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    ProcessItem processItem=(ProcessItem)item;
    CorePlugin.getDefault().getRunProcessService().generateJobPom(processItem);
    return ExecutionResult.SUCCESS_NO_ALERT;
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9069423929098966
117838,"public static void initJavaProjects(IProgressMonitor monitor,Project project){
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        AggregatorPomsHelper helper=new AggregatorPomsHelper(project.getTechnicalLabel());
        IFolder poms=createFolderIfNotExist(helper.getProjectPomsFolder(),monitor);
        if (PluginChecker.isTIS()) {
          IFolder aggregators=createFolderIfNotExist(poms.getFolder(DIR_AGGREGATORS),monitor);
          IFile ciPomFile=aggregators.getFile(TalendJavaProjectConstants.FILE_POM_CI_BUILDER);
          if (!ciPomFile.exists()) {
            helper.createCIPom(ciPomFile,monitor);
          }
        }
        IFolder code=createFolderIfNotExist(poms.getFolder(DIR_CODES),monitor);
        createFolderIfNotExist(code.getFolder(DIR_ROUTINES),monitor);
        if (ProcessUtils.isRequiredPigUDFs(null)) {
          createFolderIfNotExist(code.getFolder(DIR_PIGUDFS),monitor);
        }
        if (ProcessUtils.isRequiredBeans(null)) {
          createFolderIfNotExist(code.getFolder(DIR_BEANS),monitor);
        }
        IFolder jobs=createFolderIfNotExist(poms.getFolder(DIR_JOBS),monitor);
        createFolderIfNotExist(jobs.getFolder(DIR_PROCESS),monitor);
        if (PluginChecker.isMapReducePluginLoader()) {
          createFolderIfNotExist(jobs.getFolder(DIR_PROCESS_MR),monitor);
        }
        if (PluginChecker.isStormPluginLoader()) {
          createFolderIfNotExist(jobs.getFolder(DIR_PROCESS_STORM),monitor);
        }
        if (PluginChecker.isRouteLoaded()) {
          createFolderIfNotExist(jobs.getFolder(DIR_PROCESS_ROUTES),monitor);
        }
        if (PluginChecker.isServiceLoaded()) {
          createFolderIfNotExist(jobs.getFolder(DIR_PROCESS_SERVICES),monitor);
        }
        helper.createRootPom(poms,monitor);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public static void initJavaProjects(IProgressMonitor monitor,Project project){
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        AggregatorPomsHelper helper=new AggregatorPomsHelper(project.getTechnicalLabel());
        IFolder poms=createFolderIfNotExist(helper.getProjectPomsFolder(),monitor);
        IFolder code=createFolderIfNotExist(poms.getFolder(DIR_CODES),monitor);
        createFolderIfNotExist(code.getFolder(DIR_ROUTINES),monitor);
        if (ProcessUtils.isRequiredPigUDFs(null)) {
          createFolderIfNotExist(code.getFolder(DIR_PIGUDFS),monitor);
        }
        if (ProcessUtils.isRequiredBeans(null)) {
          createFolderIfNotExist(code.getFolder(DIR_BEANS),monitor);
        }
        IFolder jobs=createFolderIfNotExist(poms.getFolder(DIR_JOBS),monitor);
        createFolderIfNotExist(jobs.getFolder(DIR_PROCESS),monitor);
        if (PluginChecker.isMapReducePluginLoader()) {
          createFolderIfNotExist(jobs.getFolder(DIR_PROCESS_MR),monitor);
        }
        if (PluginChecker.isStormPluginLoader()) {
          createFolderIfNotExist(jobs.getFolder(DIR_PROCESS_STORM),monitor);
        }
        if (PluginChecker.isRouteLoaded()) {
          createFolderIfNotExist(jobs.getFolder(DIR_PROCESS_ROUTES),monitor);
        }
        if (PluginChecker.isServiceLoaded()) {
          createFolderIfNotExist(jobs.getFolder(DIR_PROCESS_SERVICES),monitor);
        }
        helper.createRootPom(poms,monitor);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.9123992721601248
117839,"public static void deleteTalendJobProjectsUnderFolder(ERepositoryObjectType processType,IPath folderPath,boolean deleteContent){
  try {
    Iterator<String> iterator=talendJobJavaProjects.keySet().iterator();
    while (iterator.hasNext()) {
      String key=iterator.next();
      ITalendProcessJavaProject project=talendJobJavaProjects.get(key);
      IPath jobPath=ItemResourceUtil.getItemRelativePath(project.getPropery());
      if (folderPath.isPrefixOf(jobPath)) {
        project.getProject().delete(deleteContent,true,null);
        iterator.remove();
      }
    }
    if (deleteContent) {
      AggregatorPomsHelper helper=new AggregatorPomsHelper();
      IFolder folder=helper.getProcessFolder(processType).getFolder(folderPath);
      folder.delete(true,false,null);
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}","public static void deleteTalendJobProjectsUnderFolder(ERepositoryObjectType processType,IPath folderPath,boolean deleteContent){
  try {
    Iterator<String> iterator=talendJobJavaProjects.keySet().iterator();
    while (iterator.hasNext()) {
      String key=iterator.next();
      ITalendProcessJavaProject project=talendJobJavaProjects.get(key);
      Property property=project.getPropery();
      if (property != null) {
        IPath jobPath=ItemResourceUtil.getItemRelativePath(property);
        if (folderPath.isPrefixOf(jobPath)) {
          project.getProject().delete(deleteContent,true,null);
          iterator.remove();
        }
      }
    }
    if (deleteContent) {
      AggregatorPomsHelper helper=new AggregatorPomsHelper();
      IFolder folder=helper.getProcessFolder(processType).getFolder(folderPath);
      folder.delete(true,false,null);
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}",0.9322222222222222
117840,"@Override public Property getPropery(){
  return property;
}","@Override public Property getPropery(){
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object;
  try {
    object=factory.getSpecificVersion(id,version,true);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return null;
  }
  return object.getProperty();
}",0.2188295165394402
117841,"public TalendProcessJavaProject(IJavaProject javaProject,Property property){
  this(javaProject);
  this.property=property;
}","public TalendProcessJavaProject(IJavaProject javaProject,Property property){
  this(javaProject);
  this.id=property.getId();
  this.version=property.getVersion();
}",0.8068965517241379
117842,"public static ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type){
  Project project=ProjectManager.getInstance().getCurrentProject();
  AggregatorPomsHelper helper=new AggregatorPomsHelper(project.getTechnicalLabel());
  ITalendProcessJavaProject talendCodeJavaProject=talendCodeJavaProjects.get(type);
  if (talendCodeJavaProject == null || talendCodeJavaProject.getProject() == null || !talendCodeJavaProject.getProject().exists()) {
    try {
      IProgressMonitor monitor=new NullProgressMonitor();
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      IFolder codeProjectFolder=helper.getProjectPomsFolder().getFolder(type.getFolder());
      IProject codeProject=root.getProject((project.getTechnicalLabel() + ""String_Node_Str"" + type.name()).toUpperCase());
      if (!codeProject.exists() || TalendCodeProjectUtil.needRecreate(monitor,codeProject)) {
        createMavenJavaProject(monitor,codeProject,codeProjectFolder,true);
      }
      IJavaProject javaProject=JavaCore.create(codeProject);
      if (!javaProject.isOpen()) {
        javaProject.open(monitor);
      }
      AggregatorPomsHelper.updateCodeProjectPom(monitor,type,codeProject.getFile(TalendMavenConstants.POM_FILE_NAME));
      talendCodeJavaProject=new TalendProcessJavaProject(javaProject);
      talendCodeJavaProject.cleanMavenFiles(monitor);
      talendCodeJavaProjects.put(type,talendCodeJavaProject);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return talendCodeJavaProject;
}","public static ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type){
  Project project=ProjectManager.getInstance().getCurrentProject();
  AggregatorPomsHelper helper=new AggregatorPomsHelper(project.getTechnicalLabel());
  ITalendProcessJavaProject talendCodeJavaProject=talendCodeJavaProjects.get(type);
  if (talendCodeJavaProject == null || talendCodeJavaProject.getProject() == null || !talendCodeJavaProject.getProject().exists()) {
    try {
      IProgressMonitor monitor=new NullProgressMonitor();
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      IFolder codeProjectFolder=helper.getProjectPomsFolder().getFolder(type.getFolder());
      IProject codeProject=root.getProject((project.getTechnicalLabel() + ""String_Node_Str"" + type.name()).toUpperCase());
      if (!codeProject.exists() || TalendCodeProjectUtil.needRecreate(monitor,codeProject)) {
        createMavenJavaProject(monitor,codeProject,codeProjectFolder,true);
      }
      IJavaProject javaProject=JavaCore.create(codeProject);
      if (!javaProject.isOpen()) {
        javaProject.open(monitor);
      }
      AggregatorPomsHelper.updateCodeProjectPom(monitor,type,codeProject.getFile(TalendMavenConstants.POM_FILE_NAME));
      talendCodeJavaProject=new TalendProcessJavaProject(javaProject);
      talendCodeJavaProject.cleanMavenFiles(monitor);
      BuildCacheManager.getInstance().clearCache(type);
      talendCodeJavaProjects.put(type,talendCodeJavaProject);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return talendCodeJavaProject;
}",0.9822335025380712
117843,"@Override public void build(IProgressMonitor monitor) throws Exception {
  BuildCacheManager buildCacheManager=BuildCacheManager.getInstance();
  final ITalendProcessJavaProject talendJavaProject=getTalendJavaProject();
  String goal=getGoals();
  boolean isGoalPackage=TalendMavenConstants.GOAL_PACKAGE.equals(goal);
  boolean isGoalInstall=TalendMavenConstants.GOAL_INSTALL.equals(goal);
  boolean isMainJob=LastGenerationInfo.getInstance().isCurrentMainJob();
  if (!isMainJob && isGoalInstall) {
    if (!buildCacheManager.isJobBuild(getProperty())) {
      deleteExistedJobJarFile(talendJavaProject);
      buildCacheManager.putCache(getProperty());
    }
 else {
      PomUtil.restorePomFile(getTalendJavaProject());
    }
    return;
  }
  if (isMainJob) {
    final Map<String,Object> argumentsMap=new HashMap<String,Object>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + BuildCacheManager.BUILD_AGGREGATOR_POM_NAME + ""String_Node_Str""+ (packagingAndAssembly() ? ""String_Node_Str"" : ""String_Node_Str"")+ TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
    buildCacheManager.build(monitor,argumentsMap);
    if (!MavenProjectUtils.hasMavenNature(project)) {
      MavenProjectUtils.enableMavenNature(monitor,project);
    }
 else {
      if (buildCacheManager.needTempAggregator() || !CommonUIPlugin.isFullyHeadless()) {
        MavenProjectUtils.updateMavenProject(monitor,talendJavaProject.getProject());
      }
    }
    buildCacheManager.buildAllSubjobMavenProjects();
    if (CommonUIPlugin.isFullyHeadless()) {
      AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.ROUTINES,false);
      if (ProcessUtils.isRequiredPigUDFs(null)) {
        AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.PIG_UDF,false);
      }
      if (ProcessUtils.isRequiredBeans(null)) {
        AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.valueOf(""String_Node_Str""),false);
      }
    }
  }
  IFile jobJarFile=null;
  if (!TalendMavenConstants.GOAL_COMPILE.equals(goal)) {
    if (isGoalPackage) {
      jobJarFile=deleteExistedJobJarFile(talendJavaProject);
    }
    talendJavaProject.buildModules(monitor,null,null);
  }
  final Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,goal);
  if (isGoalPackage) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  }
  talendJavaProject.buildModules(monitor,null,argumentsMap);
  if (isGoalPackage) {
    if (jobJarFile != null) {
      jobJarFile.refreshLocal(IResource.DEPTH_ONE,null);
    }
    if (jobJarFile == null || !jobJarFile.exists()) {
      String mvnLogFilePath=talendJavaProject.getProject().getFile(""String_Node_Str"").getLocation().toPortableString();
      throw new Exception(Messages.getString(""String_Node_Str"",mvnLogFilePath));
    }
  }
}","@Override public void build(IProgressMonitor monitor) throws Exception {
  BuildCacheManager buildCacheManager=BuildCacheManager.getInstance();
  final ITalendProcessJavaProject talendJavaProject=getTalendJavaProject();
  String goal=getGoals();
  boolean isGoalPackage=TalendMavenConstants.GOAL_PACKAGE.equals(goal);
  boolean isGoalInstall=TalendMavenConstants.GOAL_INSTALL.equals(goal);
  boolean isMainJob=LastGenerationInfo.getInstance().isCurrentMainJob();
  if (!isMainJob && isGoalInstall) {
    if (!buildCacheManager.isJobBuild(getProperty())) {
      deleteExistedJobJarFile(talendJavaProject);
      buildCacheManager.putCache(getProperty());
    }
 else {
      PomUtil.restorePomFile(getTalendJavaProject());
    }
    return;
  }
  if (isMainJob) {
    final Map<String,Object> argumentsMap=new HashMap<String,Object>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + BuildCacheManager.BUILD_AGGREGATOR_POM_NAME + ""String_Node_Str""+ (packagingAndAssembly() ? ""String_Node_Str"" : ""String_Node_Str"")+ TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
    buildCacheManager.build(monitor,argumentsMap);
    if (!MavenProjectUtils.hasMavenNature(project)) {
      MavenProjectUtils.enableMavenNature(monitor,project);
    }
 else {
      if (buildCacheManager.needTempAggregator() || !CommonUIPlugin.isFullyHeadless()) {
        MavenProjectUtils.updateMavenProject(monitor,talendJavaProject.getProject());
      }
    }
    buildCacheManager.buildAllSubjobMavenProjects();
    if (CommonUIPlugin.isFullyHeadless()) {
      AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.ROUTINES,false,true);
      if (ProcessUtils.isRequiredPigUDFs(null)) {
        AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.PIG_UDF,false,true);
      }
      if (ProcessUtils.isRequiredBeans(null)) {
        AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.valueOf(""String_Node_Str""),false,true);
      }
    }
  }
  IFile jobJarFile=null;
  if (!TalendMavenConstants.GOAL_COMPILE.equals(goal)) {
    if (isGoalPackage) {
      jobJarFile=deleteExistedJobJarFile(talendJavaProject);
    }
    talendJavaProject.buildModules(monitor,null,null);
  }
  final Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,goal);
  if (isGoalPackage) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  }
  talendJavaProject.buildModules(monitor,null,argumentsMap);
  if (isGoalPackage) {
    if (jobJarFile != null) {
      jobJarFile.refreshLocal(IResource.DEPTH_ONE,null);
    }
    if (jobJarFile == null || !jobJarFile.exists()) {
      String mvnLogFilePath=talendJavaProject.getProject().getFile(""String_Node_Str"").getLocation().toPortableString();
      throw new Exception(Messages.getString(""String_Node_Str"",mvnLogFilePath));
    }
  }
}",0.9975849299629688
117844,"private void runProcessContextChanged(final PropertyChangeEvent evt){
  if (isDisposed()) {
    return;
  }
  String propName=evt.getPropertyName();
  if (ProcessMessageManager.UPDATE_CONSOLE.equals(propName)) {
    processNextMessage();
  }
 else   if (ProcessMessageManager.PROP_MESSAGE_ADD.equals(propName) || ProcessMessageManager.PROP_DEBUG_MESSAGE_ADD.equals(propName)) {
    IProcessMessage psMess=(IProcessMessage)evt.getNewValue();
    if (errorMessMap.size() <= CorePlugin.getDefault().getPreferenceStore().getInt(ITalendCorePrefConstants.PREVIEW_LIMIT)) {
      if (!(LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL))) {
        getAllErrorMess(psMess);
      }
 else {
        addPerlMark(psMess);
      }
    }
    appendToConsole(psMess);
  }
 else   if (ProcessMessageManager.PROP_MESSAGE_CLEAR.equals(propName)) {
    newMessages.clear();
    getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!consoleText.isDisposed()) {
          consoleText.setText(""String_Node_Str"");
        }
      }
    }
);
  }
 else   if (RunProcessContext.PROP_MONITOR.equals(propName)) {
  }
 else   if (RunProcessContext.TRACE_MONITOR.equals(propName)) {
  }
 else   if (RunProcessContext.PROP_RUNNING.equals(propName)) {
    boolean running=((Boolean)evt.getNewValue()).booleanValue();
    List<IProcessMessage> messages=new ArrayList<IProcessMessage>();
    while (!newMessages.isEmpty()) {
      messages.add(newMessages.poll());
    }
    doAppendToConsole(messages);
    if (!running && writer != null) {
      try {
        writer.flush();
        writer.close();
        writer=null;
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (running == oldRunning) {
      getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          if (isDisposed()) {
            return;
          }
          setRunnable(!running);
          killBtn.setEnabled(running);
        }
      }
);
      if (!running) {
        appendToConsoleQueue(messagesToDisplay);
      }
    }
  }
}","private void runProcessContextChanged(final PropertyChangeEvent evt){
  if (isDisposed()) {
    return;
  }
  String propName=evt.getPropertyName();
  if (ProcessMessageManager.UPDATE_CONSOLE.equals(propName)) {
    processNextMessage();
  }
 else   if (ProcessMessageManager.PROP_MESSAGE_ADD.equals(propName) || ProcessMessageManager.PROP_DEBUG_MESSAGE_ADD.equals(propName)) {
    IProcessMessage psMess=(IProcessMessage)evt.getNewValue();
    if (errorMessMap.size() <= CorePlugin.getDefault().getPreferenceStore().getInt(ITalendCorePrefConstants.PREVIEW_LIMIT)) {
      if (!(LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL))) {
        getAllErrorMess(psMess);
      }
 else {
        addPerlMark(psMess);
      }
    }
    appendToConsole(psMess);
  }
 else   if (ProcessMessageManager.PROP_MESSAGE_CLEAR.equals(propName)) {
    newMessages.clear();
    getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!consoleText.isDisposed()) {
          consoleText.setText(""String_Node_Str"");
        }
      }
    }
);
  }
 else   if (RunProcessContext.PROP_MONITOR.equals(propName)) {
  }
 else   if (RunProcessContext.TRACE_MONITOR.equals(propName)) {
  }
 else   if (RunProcessContext.PROP_RUNNING.equals(propName)) {
    boolean running=((Boolean)evt.getNewValue()).booleanValue();
    List<IProcessMessage> messages=new ArrayList<IProcessMessage>();
    while (!newMessages.isEmpty()) {
      messages.add(newMessages.poll());
    }
    doAppendToConsole(messages);
    if (!running && writer != null) {
      try {
        writer.flush();
        writer.close();
        writer=null;
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (running != oldRunning) {
      getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          if (isDisposed()) {
            return;
          }
          setRunnable(!running);
          killBtn.setEnabled(running);
        }
      }
);
      if (!running) {
        appendToConsoleQueue(messagesToDisplay);
      }
    }
    oldRunning=running;
  }
}",0.9923773225345404
117845,"/** 
 * qzhang Comment method ""setExecBtn"".
 * @param runnable
 */
private void setExecBtn(final boolean runnable){
  if (runnable == oldRunning) {
    return;
  }
  oldRunning=runnable;
  if (run != null && !run.isDisposed()) {
    run.setEnabled(runnable);
    run.redraw();
    run.getParent().layout();
    run.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    run.setToolTipText(Messages.getString(""String_Node_Str""));
    run.setImage(ImageProvider.getImage(ERunprocessImages.RUN_PROCESS_ACTION));
    run.setData(ProcessView.EXEC_ID);
  }
}","/** 
 * qzhang Comment method ""setExecBtn"".
 * @param runnable
 */
private void setExecBtn(final boolean runnable){
  if (run != null && !run.isDisposed()) {
    run.setEnabled(runnable);
    run.redraw();
    run.getParent().layout();
    run.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    run.setToolTipText(Messages.getString(""String_Node_Str""));
    run.setImage(ImageProvider.getImage(ERunprocessImages.RUN_PROCESS_ACTION));
    run.setData(ProcessView.EXEC_ID);
  }
}",0.9334582942830364
117846,"private void runProcessContextChanged(final PropertyChangeEvent evt){
  if (isDisposed()) {
    return;
  }
  String propName=evt.getPropertyName();
  if (ProcessMessageManager.UPDATE_CONSOLE.equals(propName)) {
    processNextMessage();
  }
 else   if (ProcessMessageManager.PROP_MESSAGE_ADD.equals(propName) || ProcessMessageManager.PROP_DEBUG_MESSAGE_ADD.equals(propName)) {
    IProcessMessage psMess=(IProcessMessage)evt.getNewValue();
    if (errorMessMap.size() <= CorePlugin.getDefault().getPreferenceStore().getInt(ITalendCorePrefConstants.PREVIEW_LIMIT)) {
      if (!(LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL))) {
        getAllErrorMess(psMess);
      }
 else {
        addPerlMark(psMess);
      }
    }
    appendToConsole(psMess);
  }
 else   if (ProcessMessageManager.PROP_MESSAGE_CLEAR.equals(propName)) {
    newMessages.clear();
    getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!consoleText.isDisposed()) {
          consoleText.setText(""String_Node_Str"");
        }
      }
    }
);
  }
 else   if (RunProcessContext.PROP_MONITOR.equals(propName)) {
  }
 else   if (RunProcessContext.TRACE_MONITOR.equals(propName)) {
  }
 else   if (RunProcessContext.PROP_RUNNING.equals(propName)) {
    boolean running=((Boolean)evt.getNewValue()).booleanValue();
    List<IProcessMessage> messages=new ArrayList<IProcessMessage>();
    while (!newMessages.isEmpty()) {
      messages.add(newMessages.poll());
    }
    doAppendToConsole(messages);
    if (!running && writer != null) {
      try {
        writer.flush();
        writer.close();
        writer=null;
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (running != oldRunning) {
      getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          if (isDisposed()) {
            return;
          }
          setRunnable(!running);
          killBtn.setEnabled(running);
        }
      }
);
      if (!running) {
        appendToConsoleQueue(messagesToDisplay);
      }
    }
    oldRunning=running;
  }
}","private void runProcessContextChanged(final PropertyChangeEvent evt){
  if (isDisposed()) {
    return;
  }
  String propName=evt.getPropertyName();
  if (ProcessMessageManager.UPDATE_CONSOLE.equals(propName)) {
    processNextMessage();
  }
 else   if (ProcessMessageManager.PROP_MESSAGE_ADD.equals(propName) || ProcessMessageManager.PROP_DEBUG_MESSAGE_ADD.equals(propName)) {
    IProcessMessage psMess=(IProcessMessage)evt.getNewValue();
    if (errorMessMap.size() <= CorePlugin.getDefault().getPreferenceStore().getInt(ITalendCorePrefConstants.PREVIEW_LIMIT)) {
      if (!(LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL))) {
        getAllErrorMess(psMess);
      }
 else {
        addPerlMark(psMess);
      }
    }
    appendToConsole(psMess);
  }
 else   if (ProcessMessageManager.PROP_MESSAGE_CLEAR.equals(propName)) {
    newMessages.clear();
    getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!consoleText.isDisposed()) {
          consoleText.setText(""String_Node_Str"");
        }
      }
    }
);
  }
 else   if (RunProcessContext.PROP_MONITOR.equals(propName)) {
  }
 else   if (RunProcessContext.TRACE_MONITOR.equals(propName)) {
  }
 else   if (RunProcessContext.PROP_RUNNING.equals(propName)) {
    boolean running=((Boolean)evt.getNewValue()).booleanValue();
    List<IProcessMessage> messages=new ArrayList<IProcessMessage>();
    while (!newMessages.isEmpty()) {
      messages.add(newMessages.poll());
    }
    doAppendToConsole(messages);
    if (!running && writer != null) {
      try {
        writer.flush();
        writer.close();
        writer=null;
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (running == oldRunning) {
      getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          if (isDisposed()) {
            return;
          }
          setRunnable(!running);
          killBtn.setEnabled(running);
        }
      }
);
      if (!running) {
        appendToConsoleQueue(messagesToDisplay);
      }
    }
  }
}",0.9923773225345404
117847,"/** 
 * qzhang Comment method ""setExecBtn"".
 * @param runnable
 */
private void setExecBtn(final boolean runnable){
  if (run != null && !run.isDisposed()) {
    run.setEnabled(runnable);
    run.redraw();
    run.getParent().layout();
    run.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    run.setToolTipText(Messages.getString(""String_Node_Str""));
    run.setImage(ImageProvider.getImage(ERunprocessImages.RUN_PROCESS_ACTION));
    run.setData(ProcessView.EXEC_ID);
  }
}","/** 
 * qzhang Comment method ""setExecBtn"".
 * @param runnable
 */
private void setExecBtn(final boolean runnable){
  if (runnable == oldRunning) {
    return;
  }
  oldRunning=runnable;
  if (run != null && !run.isDisposed()) {
    run.setEnabled(runnable);
    run.redraw();
    run.getParent().layout();
    run.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    run.setToolTipText(Messages.getString(""String_Node_Str""));
    run.setImage(ImageProvider.getImage(ERunprocessImages.RUN_PROCESS_ACTION));
    run.setData(ProcessView.EXEC_ID);
  }
}",0.9334582942830364
117848,"@Override public void build(IProgressMonitor monitor) throws Exception {
  BuildCacheManager buildCacheManager=BuildCacheManager.getInstance();
  final ITalendProcessJavaProject talendJavaProject=getTalendJavaProject();
  String goal=getGoals();
  boolean isGoalPackage=TalendMavenConstants.GOAL_PACKAGE.equals(goal);
  boolean isGoalInstall=TalendMavenConstants.GOAL_INSTALL.equals(goal);
  boolean isMainJob=LastGenerationInfo.getInstance().isCurrentMainJob();
  if (!isMainJob && isGoalInstall) {
    if (!buildCacheManager.isJobBuild(getProperty())) {
      deleteExistedJobJarFile(talendJavaProject);
      buildCacheManager.putCache(getProperty());
    }
 else {
      PomUtil.restorePomFile(getTalendJavaProject());
    }
    return;
  }
  if (isMainJob) {
    final Map<String,Object> argumentsMap=new HashMap<String,Object>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + BuildCacheManager.BUILD_AGGREGATOR_POM_NAME + ""String_Node_Str""+ TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
    buildCacheManager.build(monitor,argumentsMap);
    if (!MavenProjectUtils.hasMavenNature(project)) {
      MavenProjectUtils.enableMavenNature(monitor,project);
    }
 else {
      if (buildCacheManager.needTempAggregator() || !CommonUIPlugin.isFullyHeadless()) {
        MavenProjectUtils.updateMavenProject(monitor,talendJavaProject.getProject());
      }
    }
    buildCacheManager.buildAllSubjobMavenProjects();
  }
  IFile jobJarFile=null;
  if (!TalendMavenConstants.GOAL_COMPILE.equals(goal)) {
    if (isGoalPackage) {
      jobJarFile=deleteExistedJobJarFile(talendJavaProject);
    }
    talendJavaProject.buildModules(monitor,null,null);
  }
  final Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,goal);
  if (isGoalPackage) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  }
  talendJavaProject.buildModules(monitor,null,argumentsMap);
  if (isGoalPackage) {
    if (jobJarFile != null) {
      jobJarFile.refreshLocal(IResource.DEPTH_ONE,null);
    }
    if (jobJarFile == null || !jobJarFile.exists()) {
      String mvnLogFilePath=talendJavaProject.getProject().getFile(""String_Node_Str"").getLocation().toPortableString();
      throw new Exception(Messages.getString(""String_Node_Str"",mvnLogFilePath));
    }
  }
}","@Override public void build(IProgressMonitor monitor) throws Exception {
  BuildCacheManager buildCacheManager=BuildCacheManager.getInstance();
  final ITalendProcessJavaProject talendJavaProject=getTalendJavaProject();
  String goal=getGoals();
  boolean isGoalPackage=TalendMavenConstants.GOAL_PACKAGE.equals(goal);
  boolean isGoalInstall=TalendMavenConstants.GOAL_INSTALL.equals(goal);
  boolean isMainJob=LastGenerationInfo.getInstance().isCurrentMainJob();
  if (!isMainJob && isGoalInstall) {
    if (!buildCacheManager.isJobBuild(getProperty())) {
      deleteExistedJobJarFile(talendJavaProject);
      buildCacheManager.putCache(getProperty());
    }
 else {
      PomUtil.restorePomFile(getTalendJavaProject());
    }
    return;
  }
  if (isMainJob) {
    final Map<String,Object> argumentsMap=new HashMap<String,Object>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + BuildCacheManager.BUILD_AGGREGATOR_POM_NAME + ""String_Node_Str""+ TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
    buildCacheManager.build(monitor,argumentsMap);
    if (!MavenProjectUtils.hasMavenNature(project)) {
      MavenProjectUtils.enableMavenNature(monitor,project);
    }
 else {
      if (buildCacheManager.needTempAggregator() || !CommonUIPlugin.isFullyHeadless()) {
        MavenProjectUtils.updateMavenProject(monitor,talendJavaProject.getProject());
      }
    }
    buildCacheManager.buildAllSubjobMavenProjects();
    if (CommonUIPlugin.isFullyHeadless()) {
      AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.ROUTINES,false);
      if (ProcessUtils.isRequiredPigUDFs(null)) {
        AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.PIG_UDF,false);
      }
      if (ProcessUtils.isRequiredBeans(null)) {
        AggregatorPomsHelper.buildAndInstallCodesProject(monitor,ERepositoryObjectType.valueOf(""String_Node_Str""),false);
      }
    }
  }
  IFile jobJarFile=null;
  if (!TalendMavenConstants.GOAL_COMPILE.equals(goal)) {
    if (isGoalPackage) {
      jobJarFile=deleteExistedJobJarFile(talendJavaProject);
    }
    talendJavaProject.buildModules(monitor,null,null);
  }
  final Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,goal);
  if (isGoalPackage) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  }
  talendJavaProject.buildModules(monitor,null,argumentsMap);
  if (isGoalPackage) {
    if (jobJarFile != null) {
      jobJarFile.refreshLocal(IResource.DEPTH_ONE,null);
    }
    if (jobJarFile == null || !jobJarFile.exists()) {
      String mvnLogFilePath=talendJavaProject.getProject().getFile(""String_Node_Str"").getLocation().toPortableString();
      throw new Exception(Messages.getString(""String_Node_Str"",mvnLogFilePath));
    }
  }
}",0.9118966445361564
117849,"/** 
 * bqian Comment method ""launch"".
 * @param object
 * @param mode
 */
private void launch(Item item,String mode){
  if (item instanceof ProcessItem) {
    ILaunchConfiguration config=findLaunchConfiguration((ProcessItem)item,mode);
    if (config != null) {
      DebugUITools.launch(config,mode);
    }
  }
}","/** 
 * bqian Comment method ""launch"".
 * @param object
 * @param mode
 */
private void launch(Item item,String mode){
  if (item instanceof ProcessItem) {
    ILaunchConfiguration config=findLaunchConfiguration((ProcessItem)item,mode);
    if (config != null) {
      IPreferenceStore debugUiStore=DebugUITools.getPreferenceStore();
      debugUiStore.setValue(IDebugUIConstants.PREF_BUILD_BEFORE_LAUNCH,Boolean.FALSE);
      DebugUITools.launch(config,mode);
    }
  }
}",0.7557251908396947
117850,"/** 
 * Launch the last launch, or open the launch config dialog if none.
 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
 */
@Override public void run(IAction action){
  if (selection instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)selection;
    Object o=sel.getFirstElement();
    if ((o instanceof RepositoryNode)) {
      RepositoryNode node=(RepositoryNode)o;
      if (node.getObject() != null && node.getObject().getRepositoryObjectType().equals(ERepositoryObjectType.PROCESS)) {
        JobLaunchShortcutManager.run(selection);
        return;
      }
    }
  }
  if (window != null) {
    IWorkbenchPage page=window.getActivePage();
    if (page != null) {
      if (page.getActivePart() == page.getActiveEditor()) {
        IEditorPart editor=page.getActiveEditor();
        IEditorInput input=editor.getEditorInput();
        if (input instanceof RepositoryEditorInput) {
          JobLaunchShortcutManager.run(editor);
          return;
        }
      }
    }
  }
  ILaunchConfiguration configuration=getLastLaunch();
  if (configuration == null) {
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
 else {
    DebugUITools.launch(configuration,getMode());
  }
}","/** 
 * Launch the last launch, or open the launch config dialog if none.
 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
 */
@Override public void run(IAction action){
  if (selection instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)selection;
    Object o=sel.getFirstElement();
    if ((o instanceof RepositoryNode)) {
      RepositoryNode node=(RepositoryNode)o;
      if (node.getObject() != null && node.getObject().getRepositoryObjectType().equals(ERepositoryObjectType.PROCESS)) {
        JobLaunchShortcutManager.run(selection);
        return;
      }
    }
  }
  if (window != null) {
    IWorkbenchPage page=window.getActivePage();
    if (page != null) {
      if (page.getActivePart() == page.getActiveEditor()) {
        IEditorPart editor=page.getActiveEditor();
        IEditorInput input=editor.getEditorInput();
        if (input instanceof RepositoryEditorInput) {
          JobLaunchShortcutManager.run(editor);
          return;
        }
      }
    }
  }
  ILaunchConfiguration configuration=getLastLaunch();
  if (configuration == null) {
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
 else {
    IPreferenceStore debugUiStore=DebugUITools.getPreferenceStore();
    debugUiStore.setValue(IDebugUIConstants.PREF_BUILD_BEFORE_LAUNCH,Boolean.FALSE);
    DebugUITools.launch(configuration,getMode());
  }
}",0.9448818897637796
117851,"@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String logPath=Platform.getLogFileLocation().toOSString();
  int lastIndex=logPath.lastIndexOf(File.separatorChar);
  logPath=TalendTextUtils.addQuotes(logPath.substring(0,lastIndex));
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_LABEL,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_HINT,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_CONNECTION_FORMAT,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_HINT_USED,false);
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_DISPLAY,false);
  store.setDefault(TalendDesignerPrefConstants.USE_REPOSITORY_NAME,true);
  store.setDefault(TalendEditorPaletteFactory.PALETTE_STATE,FlyoutPaletteComposite.STATE_PINNED_OPEN);
  store.setDefault(TalendDesignerPrefConstants.COMP_DEFAULT_FILE_DIR,Platform.getLocation().toPortableString());
  store.setDefault(TalendDesignerPrefConstants.PRODUCT_ROOT_DIR,Platform.getLocation().removeLastSegments(1).toPortableString());
  Bundle refBundle=Platform.getBundle(""String_Node_Str"");
  if (refBundle != null) {
    try {
      String dirPath=FileLocator.getBundleFile(refBundle).getPath().replace(File.separatorChar,'/');
      store.setDefault(TalendDesignerPrefConstants.DQ_REPORTING_BUNDLE_DIR,dirPath);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  store.setDefault(TalendDesignerPrefConstants.PROPERTY_CODE_CHECK,false);
  store.setDefault(TalendDesignerPrefConstants.LARGE_ICONS_SIZE,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.SCHEMA_OPTIONS,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.VIEW_OPTIONS,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DISPLAY_SUBJOBS,true);
  store.setDefault(TalendDesignerPrefConstants.COMPONENT_ASSIST,true);
  store.setDefault(TalendDesignerPrefConstants.GENERATE_CODE_WHEN_OPEN_JOB,false);
  store.setDefault(TalendDesignerPrefConstants.CHECK_ONLY_LAST_VERSION,true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),EmfComponent.BUILTIN);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_REALTIME_STATS.getName(),false);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_RUNTIME_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_WARNING.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILE_PATH.getName(),logPath);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_LOGS.getName(),TalendTextUtils.addQuotes(DEFAULT_LOGS_FILE_NAME));
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_STATS.getName(),TalendTextUtils.addQuotes(DEFAULT_STATS_FILE_NAME));
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_METTER.getName(),TalendTextUtils.addQuotes(DEFAULT_METER_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),EmfComponent.BUILTIN);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_REALTIME_STATS.getName(),false);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_RUNTIME_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_WARNING.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILE_PATH.getName(),logPath);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_LOGS.getName(),TalendTextUtils.addQuotes(DEFAULT_LOGS_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_STATS.getName(),TalendTextUtils.addQuotes(DEFAULT_STATS_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_METTER.getName(),TalendTextUtils.addQuotes(DEFAULT_METER_FILE_NAME));
  store.setDefault(IRepositoryPrefConstants.MANUALLY_REFRESH,false);
  store.setDefault(IRepositoryPrefConstants.CREATING_REFRESH,true);
  store.setDefault(IRepositoryPrefConstants.SAVING_REFRESH,true);
  store.setDefault(IRepositoryPrefConstants.DELETING_REFRESH,true);
  store.setDefault(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT_ACTIVED,true);
  store.setDefault(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT,15);
  store.setDefault(ITalendCorePrefConstants.HBASE_OR_MAPRDB_SCAN_LIMIT,50);
  store.setDefault(ITalendCorePrefConstants.ADD_USER_ROUTINES,false);
  store.setDefault(ITalendCorePrefConstants.ADD_SYSTEM_ROUTINES,true);
  store.setDefault(IRepositoryPrefConstants.USE_EXPORT_SAVE,false);
  store.setDefault(IRepositoryPrefConstants.ADD_CLASSPATH_JAR,false);
  store.setDefault(IRepositoryPrefConstants.REBUILD_RELATIONSHIPS,false);
  store.setDefault(TalendDesignerPrefConstants.NOT_SHOW_WARNING_WHEN_DELETE_LINK_WITH_JOBLETTRIGGERLINKCOMPONENT,false);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK,true);
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK_TIME_INTERVAL,1);
    store.setDefault(ITalendCorePrefConstants.AUTO_REFRESH_LOCKS,true);
    store.setDefault(ITalendCorePrefConstants.PERFORMANCE_TAC_CONNECTION_TIMEOUT,NetworkConfiguration.CONNECTION_TIMEOUT_DEFAULT);
    store.setDefault(ITalendCorePrefConstants.PERFORMANCE_TAC_READ_TIMEOUT,NetworkConfiguration.READ_TIMEOUT_DEFAULT);
  }
  store.setDefault(ITalendCorePrefConstants.NEXUS_TIMEOUT,10000);
  store.setDefault(ITalendCorePrefConstants.NEXUS_REFRESH_FREQUENCY,0);
  if (!CommonUIPlugin.isFullyHeadless()) {
    IPreferenceStore debugUiStore=DebugUITools.getPreferenceStore();
    debugUiStore.setValue(IDebugUIConstants.PREF_BUILD_BEFORE_LAUNCH,Boolean.FALSE);
    Display display=Display.getDefault();
    if (display == null) {
      display=Display.getCurrent();
    }
    if (display != null) {
      display.asyncExec(new Runnable(){
        @Override public void run(){
          IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
          Font font=new Font(null,""String_Node_Str"",10,SWT.NONE);
          PreferenceConverter.setDefault(store,TalendDesignerPrefConstants.MEMO_TEXT_FONT,font.getFontData());
          PreferenceConverter.setDefault(store,TalendDesignerPrefConstants.CONSOLT_TEXT_FONT,font.getFontData());
        }
      }
);
    }
    store.setDefault(TalendDesignerPrefConstants.EDITOR_ANTIALIASING,true);
    store.setDefault(TalendDesignerPrefConstants.EDITOR_LINESTYLE,true);
    DesignerColorUtils.initPreferenceDefault(store);
    ColorManager.initDefaultColors(store);
    store.setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,JavaTypesManager.STRING.getId());
    store.setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,JavaTypesManager.STRING.getId());
  }
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_RECENTLY_USED_LIST_SIZE,12);
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_SEARCH_FROM_HELP,true);
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_SEARCH_RESULT_LIMIT_FROM_HELP,10);
  store.setDefault(ITalendCorePrefConstants.PERFORMANCE_JAVA_PROCESS_CODE_FORMATE_TIMEOUT,30);
}","@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String logPath=Platform.getLogFileLocation().toOSString();
  int lastIndex=logPath.lastIndexOf(File.separatorChar);
  logPath=TalendTextUtils.addQuotes(logPath.substring(0,lastIndex));
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_LABEL,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_HINT,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_CONNECTION_FORMAT,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_HINT_USED,false);
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_DISPLAY,false);
  store.setDefault(TalendDesignerPrefConstants.USE_REPOSITORY_NAME,true);
  store.setDefault(TalendEditorPaletteFactory.PALETTE_STATE,FlyoutPaletteComposite.STATE_PINNED_OPEN);
  store.setDefault(TalendDesignerPrefConstants.COMP_DEFAULT_FILE_DIR,Platform.getLocation().toPortableString());
  store.setDefault(TalendDesignerPrefConstants.PRODUCT_ROOT_DIR,Platform.getLocation().removeLastSegments(1).toPortableString());
  Bundle refBundle=Platform.getBundle(""String_Node_Str"");
  if (refBundle != null) {
    try {
      String dirPath=FileLocator.getBundleFile(refBundle).getPath().replace(File.separatorChar,'/');
      store.setDefault(TalendDesignerPrefConstants.DQ_REPORTING_BUNDLE_DIR,dirPath);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  store.setDefault(TalendDesignerPrefConstants.PROPERTY_CODE_CHECK,false);
  store.setDefault(TalendDesignerPrefConstants.LARGE_ICONS_SIZE,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.SCHEMA_OPTIONS,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.VIEW_OPTIONS,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DISPLAY_SUBJOBS,true);
  store.setDefault(TalendDesignerPrefConstants.COMPONENT_ASSIST,true);
  store.setDefault(TalendDesignerPrefConstants.GENERATE_CODE_WHEN_OPEN_JOB,false);
  store.setDefault(TalendDesignerPrefConstants.CHECK_ONLY_LAST_VERSION,true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),EmfComponent.BUILTIN);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_REALTIME_STATS.getName(),false);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_RUNTIME_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_WARNING.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILE_PATH.getName(),logPath);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_LOGS.getName(),TalendTextUtils.addQuotes(DEFAULT_LOGS_FILE_NAME));
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_STATS.getName(),TalendTextUtils.addQuotes(DEFAULT_STATS_FILE_NAME));
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_METTER.getName(),TalendTextUtils.addQuotes(DEFAULT_METER_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),EmfComponent.BUILTIN);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_REALTIME_STATS.getName(),false);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_RUNTIME_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_WARNING.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILE_PATH.getName(),logPath);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_LOGS.getName(),TalendTextUtils.addQuotes(DEFAULT_LOGS_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_STATS.getName(),TalendTextUtils.addQuotes(DEFAULT_STATS_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_METTER.getName(),TalendTextUtils.addQuotes(DEFAULT_METER_FILE_NAME));
  store.setDefault(IRepositoryPrefConstants.MANUALLY_REFRESH,false);
  store.setDefault(IRepositoryPrefConstants.CREATING_REFRESH,true);
  store.setDefault(IRepositoryPrefConstants.SAVING_REFRESH,true);
  store.setDefault(IRepositoryPrefConstants.DELETING_REFRESH,true);
  store.setDefault(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT_ACTIVED,true);
  store.setDefault(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT,15);
  store.setDefault(ITalendCorePrefConstants.HBASE_OR_MAPRDB_SCAN_LIMIT,50);
  store.setDefault(ITalendCorePrefConstants.ADD_USER_ROUTINES,false);
  store.setDefault(ITalendCorePrefConstants.ADD_SYSTEM_ROUTINES,true);
  store.setDefault(IRepositoryPrefConstants.USE_EXPORT_SAVE,false);
  store.setDefault(IRepositoryPrefConstants.ADD_CLASSPATH_JAR,false);
  store.setDefault(IRepositoryPrefConstants.REBUILD_RELATIONSHIPS,false);
  store.setDefault(TalendDesignerPrefConstants.NOT_SHOW_WARNING_WHEN_DELETE_LINK_WITH_JOBLETTRIGGERLINKCOMPONENT,false);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK,true);
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK_TIME_INTERVAL,1);
    store.setDefault(ITalendCorePrefConstants.AUTO_REFRESH_LOCKS,true);
    store.setDefault(ITalendCorePrefConstants.PERFORMANCE_TAC_CONNECTION_TIMEOUT,NetworkConfiguration.CONNECTION_TIMEOUT_DEFAULT);
    store.setDefault(ITalendCorePrefConstants.PERFORMANCE_TAC_READ_TIMEOUT,NetworkConfiguration.READ_TIMEOUT_DEFAULT);
  }
  store.setDefault(ITalendCorePrefConstants.NEXUS_TIMEOUT,10000);
  store.setDefault(ITalendCorePrefConstants.NEXUS_REFRESH_FREQUENCY,0);
  if (!CommonUIPlugin.isFullyHeadless()) {
    Display display=Display.getDefault();
    if (display == null) {
      display=Display.getCurrent();
    }
    if (display != null) {
      display.asyncExec(new Runnable(){
        @Override public void run(){
          IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
          Font font=new Font(null,""String_Node_Str"",10,SWT.NONE);
          PreferenceConverter.setDefault(store,TalendDesignerPrefConstants.MEMO_TEXT_FONT,font.getFontData());
          PreferenceConverter.setDefault(store,TalendDesignerPrefConstants.CONSOLT_TEXT_FONT,font.getFontData());
        }
      }
);
    }
    store.setDefault(TalendDesignerPrefConstants.EDITOR_ANTIALIASING,true);
    store.setDefault(TalendDesignerPrefConstants.EDITOR_LINESTYLE,true);
    DesignerColorUtils.initPreferenceDefault(store);
    ColorManager.initDefaultColors(store);
    store.setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,JavaTypesManager.STRING.getId());
    store.setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,JavaTypesManager.STRING.getId());
  }
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_RECENTLY_USED_LIST_SIZE,12);
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_SEARCH_FROM_HELP,true);
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_SEARCH_RESULT_LIMIT_FROM_HELP,10);
  store.setDefault(ITalendCorePrefConstants.PERFORMANCE_JAVA_PROCESS_CODE_FORMATE_TIMEOUT,30);
}",0.9901206055940468
117852,"@Override public void debug(){
  if (manager.getClearBeforeExec()) {
    processContext.clearMessages();
  }
  setHideconsoleLine(false);
  if ((processContext.getProcess()) instanceof org.talend.designer.core.ui.editor.process.Process) {
    ((org.talend.designer.core.ui.editor.process.Process)processContext.getProcess()).checkDifferenceWithRepository();
  }
  final IPreferenceStore preferenceStore=DebugUITools.getPreferenceStore();
  final boolean oldValueConsoleOnOut=preferenceStore.getBoolean(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT);
  final boolean oldValueConsoleOnErr=preferenceStore.getBoolean(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR);
  preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT,false);
  preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR,false);
  int num=RunProcessPlugin.getDefault().getPreferenceStore().getInt(RunProcessTokenCollector.TOS_COUNT_DEBUG_RUNS.getPrefKey());
  RunProcessPlugin.getDefault().getPreferenceStore().setValue(RunProcessTokenCollector.TOS_COUNT_DEBUG_RUNS.getPrefKey(),num + 1);
  checkSaveBeforeRunSelection();
  if (contextComposite.promptConfirmLauch()) {
    setRunnable(false);
    final IContext context=contextComposite.getSelectedContext();
    IRunnableWithProgress worker=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor){
        IProcessor processor=ProcessorUtilities.getProcessor(processContext.getProcess(),processContext.getProcess().getProperty(),context);
        monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
        try {
          ProcessorUtilities.generateCode(processContext.getProcess(),context,false,false,true,monitor);
          ILaunchConfiguration config=((Processor)processor).getDebugConfiguration(processContext.getStatisticsPort(),processContext.getTracesPort(),null);
          if (!JobErrorsChecker.hasErrors(DebugProcessTosComposite.this.getShell())) {
            if (config != null) {
              DebugUITools.launch(config,ILaunchManager.DEBUG_MODE);
            }
 else {
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
        }
 catch (        ProcessorException e) {
          IStatus status=new Status(IStatus.ERROR,RunProcessPlugin.PLUGIN_ID,IStatus.OK,""String_Node_Str"",e);
          RunProcessPlugin.getDefault().getLog().log(status);
          MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"");
        }
 finally {
          monitor.done();
        }
      }
    }
;
    IProgressService progressService=PlatformUI.getWorkbench().getProgressService();
    try {
      progressService.runInUI(PlatformUI.getWorkbench().getProgressService(),worker,ResourcesPlugin.getWorkspace().getRoot());
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
      ExceptionHandler.process(e);
    }
  }
  debugMode=true;
  try {
    Thread thread=new Thread(){
      @Override public void run(){
        while (debugMode) {
          final IProcess process=DebugUITools.getCurrentProcess();
          if (process != null && process.isTerminated()) {
            Display dis=Display.getCurrent();
            if (dis == null) {
              dis=Display.getDefault();
            }
            dis.asyncExec(new Runnable(){
              @Override public void run(){
                setRunnable(true);
                if (!killBtn.isDisposed() && killBtn != null) {
                  killBtn.setEnabled(false);
                }
                preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT,oldValueConsoleOnOut);
                preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR,oldValueConsoleOnErr);
                if (isAddedStreamListener) {
                  process.getStreamsProxy().getOutputStreamMonitor().removeListener(streamListener);
                  isAddedStreamListener=false;
                  if (processContext.isRunning()) {
                    final String endingPattern=Messages.getString(""String_Node_Str"");
                    MessageFormat mf=new MessageFormat(endingPattern);
                    String byeMsg;
                    try {
                      byeMsg=""String_Node_Str"" + mf.format(new Object[]{processContext.getProcess().getName(),new Date(),new Integer(process.getExitValue())});
                      processContext.addDebugResultToConsole(new ProcessMessage(MsgType.CORE_OUT,byeMsg));
                    }
 catch (                    DebugException e) {
                      ExceptionHandler.process(e);
                    }
                    processContext.setRunning(false);
                  }
                }
                debugMode=false;
              }
            }
);
          }
 else {
            if (process != null) {
              Display dis=Display.getCurrent();
              if (dis == null) {
                dis=Display.getDefault();
              }
              dis.asyncExec(new Runnable(){
                @Override public void run(){
                  setRunnable(false);
                  if (!killBtn.isDisposed() && killBtn != null) {
                    killBtn.setEnabled(true);
                  }
                  processContext.setRunning(true);
                  processContext.setDebugProcess(process);
                  if (!isAddedStreamListener) {
                    process.getStreamsProxy().getOutputStreamMonitor().addListener(streamListener);
                    ClearPerformanceAction clearPerfAction=new ClearPerformanceAction();
                    clearPerfAction.setProcess(processContext.getProcess());
                    clearPerfAction.run();
                    ClearTraceAction clearTraceAction=new ClearTraceAction();
                    clearTraceAction.setProcess(processContext.getProcess());
                    clearTraceAction.run();
                    isAddedStreamListener=true;
                    final String startingPattern=Messages.getString(""String_Node_Str"");
                    MessageFormat mf=new MessageFormat(startingPattern);
                    String welcomeMsg=mf.format(new Object[]{processContext.getProcess().getName(),new Date()});
                    processContext.addDebugResultToConsole(new ProcessMessage(MsgType.CORE_OUT,welcomeMsg + ""String_Node_Str""));
                  }
                }
              }
);
            }
 else {
              Display dis=Display.getCurrent();
              if (dis == null) {
                dis=Display.getDefault();
              }
              dis.asyncExec(new Runnable(){
                @Override public void run(){
                  setRunnable(true);
                  if (!killBtn.isDisposed() && killBtn != null) {
                    killBtn.setEnabled(false);
                  }
                }
              }
);
            }
          }
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    thread.start();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    processContext.addErrorMessage(e);
    kill();
  }
}","@Override public void debug(){
  if (manager.getClearBeforeExec()) {
    processContext.clearMessages();
  }
  setHideconsoleLine(false);
  if ((processContext.getProcess()) instanceof org.talend.designer.core.ui.editor.process.Process) {
    ((org.talend.designer.core.ui.editor.process.Process)processContext.getProcess()).checkDifferenceWithRepository();
  }
  final IPreferenceStore preferenceStore=DebugUITools.getPreferenceStore();
  final boolean oldValueConsoleOnOut=preferenceStore.getBoolean(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT);
  final boolean oldValueConsoleOnErr=preferenceStore.getBoolean(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR);
  preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT,false);
  preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR,false);
  int num=RunProcessPlugin.getDefault().getPreferenceStore().getInt(RunProcessTokenCollector.TOS_COUNT_DEBUG_RUNS.getPrefKey());
  RunProcessPlugin.getDefault().getPreferenceStore().setValue(RunProcessTokenCollector.TOS_COUNT_DEBUG_RUNS.getPrefKey(),num + 1);
  checkSaveBeforeRunSelection();
  if (contextComposite.promptConfirmLauch()) {
    setRunnable(false);
    final IContext context=contextComposite.getSelectedContext();
    IRunnableWithProgress worker=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor){
        IProcessor processor=ProcessorUtilities.getProcessor(processContext.getProcess(),processContext.getProcess().getProperty(),context);
        monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
        try {
          ProcessorUtilities.generateCode(processContext.getProcess(),context,false,false,true,monitor);
          ILaunchConfiguration config=((Processor)processor).getDebugConfiguration(processContext.getStatisticsPort(),processContext.getTracesPort(),null);
          if (!JobErrorsChecker.hasErrors(DebugProcessTosComposite.this.getShell())) {
            if (config != null) {
              IPreferenceStore debugUiStore=DebugUITools.getPreferenceStore();
              debugUiStore.setValue(IDebugUIConstants.PREF_BUILD_BEFORE_LAUNCH,Boolean.FALSE);
              DebugUITools.launch(config,ILaunchManager.DEBUG_MODE);
            }
 else {
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
        }
 catch (        ProcessorException e) {
          IStatus status=new Status(IStatus.ERROR,RunProcessPlugin.PLUGIN_ID,IStatus.OK,""String_Node_Str"",e);
          RunProcessPlugin.getDefault().getLog().log(status);
          MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"");
        }
 finally {
          monitor.done();
        }
      }
    }
;
    IProgressService progressService=PlatformUI.getWorkbench().getProgressService();
    try {
      progressService.runInUI(PlatformUI.getWorkbench().getProgressService(),worker,ResourcesPlugin.getWorkspace().getRoot());
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
      ExceptionHandler.process(e);
    }
  }
  debugMode=true;
  try {
    Thread thread=new Thread(){
      @Override public void run(){
        while (debugMode) {
          final IProcess process=DebugUITools.getCurrentProcess();
          if (process != null && process.isTerminated()) {
            Display dis=Display.getCurrent();
            if (dis == null) {
              dis=Display.getDefault();
            }
            dis.asyncExec(new Runnable(){
              @Override public void run(){
                setRunnable(true);
                if (!killBtn.isDisposed() && killBtn != null) {
                  killBtn.setEnabled(false);
                }
                preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT,oldValueConsoleOnOut);
                preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR,oldValueConsoleOnErr);
                if (isAddedStreamListener) {
                  process.getStreamsProxy().getOutputStreamMonitor().removeListener(streamListener);
                  isAddedStreamListener=false;
                  if (processContext.isRunning()) {
                    final String endingPattern=Messages.getString(""String_Node_Str"");
                    MessageFormat mf=new MessageFormat(endingPattern);
                    String byeMsg;
                    try {
                      byeMsg=""String_Node_Str"" + mf.format(new Object[]{processContext.getProcess().getName(),new Date(),new Integer(process.getExitValue())});
                      processContext.addDebugResultToConsole(new ProcessMessage(MsgType.CORE_OUT,byeMsg));
                    }
 catch (                    DebugException e) {
                      ExceptionHandler.process(e);
                    }
                    processContext.setRunning(false);
                  }
                }
                debugMode=false;
              }
            }
);
          }
 else {
            if (process != null) {
              Display dis=Display.getCurrent();
              if (dis == null) {
                dis=Display.getDefault();
              }
              dis.asyncExec(new Runnable(){
                @Override public void run(){
                  setRunnable(false);
                  if (!killBtn.isDisposed() && killBtn != null) {
                    killBtn.setEnabled(true);
                  }
                  processContext.setRunning(true);
                  processContext.setDebugProcess(process);
                  if (!isAddedStreamListener) {
                    process.getStreamsProxy().getOutputStreamMonitor().addListener(streamListener);
                    ClearPerformanceAction clearPerfAction=new ClearPerformanceAction();
                    clearPerfAction.setProcess(processContext.getProcess());
                    clearPerfAction.run();
                    ClearTraceAction clearTraceAction=new ClearTraceAction();
                    clearTraceAction.setProcess(processContext.getProcess());
                    clearTraceAction.run();
                    isAddedStreamListener=true;
                    final String startingPattern=Messages.getString(""String_Node_Str"");
                    MessageFormat mf=new MessageFormat(startingPattern);
                    String welcomeMsg=mf.format(new Object[]{processContext.getProcess().getName(),new Date()});
                    processContext.addDebugResultToConsole(new ProcessMessage(MsgType.CORE_OUT,welcomeMsg + ""String_Node_Str""));
                  }
                }
              }
);
            }
 else {
              Display dis=Display.getCurrent();
              if (dis == null) {
                dis=Display.getDefault();
              }
              dis.asyncExec(new Runnable(){
                @Override public void run(){
                  setRunnable(true);
                  if (!killBtn.isDisposed() && killBtn != null) {
                    killBtn.setEnabled(false);
                  }
                }
              }
);
            }
          }
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    thread.start();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    processContext.addErrorMessage(e);
    kill();
  }
}",0.9882844061405872
117853,"public void debug(){
  setHideconsoleLine(false);
  if ((processContext.getProcess()) instanceof org.talend.designer.core.ui.editor.process.Process) {
    ((org.talend.designer.core.ui.editor.process.Process)processContext.getProcess()).checkDifferenceWithRepository();
  }
  final IPreferenceStore preferenceStore=DebugUITools.getPreferenceStore();
  final boolean oldValueConsoleOnOut=preferenceStore.getBoolean(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT);
  final boolean oldValueConsoleOnErr=preferenceStore.getBoolean(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR);
  preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT,false);
  preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR,false);
  checkSaveBeforeRunSelection();
  if (contextComposite.promptConfirmLauch()) {
    setRunnable(false);
    final IContext context=contextComposite.getSelectedContext();
    IRunnableWithProgress worker=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor){
        IProcessor processor=ProcessorUtilities.getProcessor(processContext.getProcess(),processContext.getProcess().getProperty(),context);
        monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
        try {
          ProcessorUtilities.generateCode(processContext.getProcess(),context,false,false,true,monitor);
          ILaunchConfiguration config=((Processor)processor).getDebugConfiguration(processContext.getStatisticsPort(),processContext.getTracesPort(),null);
          if (!JobErrorsChecker.hasErrors(ProcessComposite.this.getShell())) {
            if (config != null) {
              DebugUITools.launch(config,ILaunchManager.DEBUG_MODE);
            }
 else {
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
        }
 catch (        ProcessorException e) {
          IStatus status=new Status(IStatus.ERROR,RunProcessPlugin.PLUGIN_ID,IStatus.OK,""String_Node_Str"",e);
          RunProcessPlugin.getDefault().getLog().log(status);
          MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"");
        }
 finally {
          monitor.done();
        }
      }
    }
;
    IProgressService progressService=PlatformUI.getWorkbench().getProgressService();
    try {
      progressService.runInUI(PlatformUI.getWorkbench().getProgressService(),worker,ResourcesPlugin.getWorkspace().getRoot());
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
      ExceptionHandler.process(e);
    }
  }
  debugMode=true;
  try {
    Thread thread=new Thread(){
      @Override public void run(){
        while (debugMode) {
          final IProcess process=DebugUITools.getCurrentProcess();
          if (process != null && process.isTerminated()) {
            getDisplay().asyncExec(new Runnable(){
              @Override public void run(){
                setRunnable(true);
                killBtn.setEnabled(false);
                preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT,oldValueConsoleOnOut);
                preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR,oldValueConsoleOnErr);
                if (isAddedStreamListener) {
                  process.getStreamsProxy().getOutputStreamMonitor().removeListener(streamListener);
                  isAddedStreamListener=false;
                  if (processContext.isRunning()) {
                    final String endingPattern=Messages.getString(""String_Node_Str"");
                    MessageFormat mf=new MessageFormat(endingPattern);
                    String byeMsg;
                    try {
                      byeMsg=""String_Node_Str"" + mf.format(new Object[]{processContext.getProcess().getName(),new Date(),new Integer(process.getExitValue())});
                      processContext.addDebugResultToConsole(new ProcessMessage(MsgType.CORE_OUT,byeMsg));
                    }
 catch (                    DebugException e) {
                      ExceptionHandler.process(e);
                    }
                    processContext.setRunning(false);
                  }
                }
                debugMode=false;
              }
            }
);
          }
 else {
            if (process != null) {
              getDisplay().asyncExec(new Runnable(){
                @Override public void run(){
                  setRunnable(false);
                  killBtn.setEnabled(true);
                  processContext.setRunning(true);
                  processContext.setDebugProcess(process);
                  if (!isAddedStreamListener) {
                    process.getStreamsProxy().getOutputStreamMonitor().addListener(streamListener);
                    ClearPerformanceAction clearPerfAction=new ClearPerformanceAction();
                    clearPerfAction.setProcess(processContext.getProcess());
                    clearPerfAction.run();
                    ClearTraceAction clearTraceAction=new ClearTraceAction();
                    clearTraceAction.setProcess(processContext.getProcess());
                    clearTraceAction.run();
                    isAddedStreamListener=true;
                    final String startingPattern=Messages.getString(""String_Node_Str"");
                    MessageFormat mf=new MessageFormat(startingPattern);
                    String welcomeMsg=mf.format(new Object[]{processContext.getProcess().getName(),new Date()});
                    processContext.addDebugResultToConsole(new ProcessMessage(MsgType.CORE_OUT,welcomeMsg + ""String_Node_Str""));
                  }
                }
              }
);
            }
 else {
              getDisplay().asyncExec(new Runnable(){
                @Override public void run(){
                  setRunnable(true);
                  killBtn.setEnabled(false);
                }
              }
);
            }
          }
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    thread.start();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    processContext.addErrorMessage(e);
    kill();
  }
}","public void debug(){
  setHideconsoleLine(false);
  if ((processContext.getProcess()) instanceof org.talend.designer.core.ui.editor.process.Process) {
    ((org.talend.designer.core.ui.editor.process.Process)processContext.getProcess()).checkDifferenceWithRepository();
  }
  final IPreferenceStore preferenceStore=DebugUITools.getPreferenceStore();
  final boolean oldValueConsoleOnOut=preferenceStore.getBoolean(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT);
  final boolean oldValueConsoleOnErr=preferenceStore.getBoolean(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR);
  preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT,false);
  preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR,false);
  checkSaveBeforeRunSelection();
  if (contextComposite.promptConfirmLauch()) {
    setRunnable(false);
    final IContext context=contextComposite.getSelectedContext();
    IRunnableWithProgress worker=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor){
        IProcessor processor=ProcessorUtilities.getProcessor(processContext.getProcess(),processContext.getProcess().getProperty(),context);
        monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
        try {
          ProcessorUtilities.generateCode(processContext.getProcess(),context,false,false,true,monitor);
          ILaunchConfiguration config=((Processor)processor).getDebugConfiguration(processContext.getStatisticsPort(),processContext.getTracesPort(),null);
          if (!JobErrorsChecker.hasErrors(ProcessComposite.this.getShell())) {
            if (config != null) {
              IPreferenceStore debugUiStore=DebugUITools.getPreferenceStore();
              debugUiStore.setValue(IDebugUIConstants.PREF_BUILD_BEFORE_LAUNCH,Boolean.FALSE);
              DebugUITools.launch(config,ILaunchManager.DEBUG_MODE);
            }
 else {
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
        }
 catch (        ProcessorException e) {
          IStatus status=new Status(IStatus.ERROR,RunProcessPlugin.PLUGIN_ID,IStatus.OK,""String_Node_Str"",e);
          RunProcessPlugin.getDefault().getLog().log(status);
          MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"");
        }
 finally {
          monitor.done();
        }
      }
    }
;
    IProgressService progressService=PlatformUI.getWorkbench().getProgressService();
    try {
      progressService.runInUI(PlatformUI.getWorkbench().getProgressService(),worker,ResourcesPlugin.getWorkspace().getRoot());
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
      ExceptionHandler.process(e);
    }
  }
  debugMode=true;
  try {
    Thread thread=new Thread(){
      @Override public void run(){
        while (debugMode) {
          final IProcess process=DebugUITools.getCurrentProcess();
          if (process != null && process.isTerminated()) {
            getDisplay().asyncExec(new Runnable(){
              @Override public void run(){
                setRunnable(true);
                killBtn.setEnabled(false);
                preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_OUT,oldValueConsoleOnOut);
                preferenceStore.setValue(IDebugPreferenceConstants.CONSOLE_OPEN_ON_ERR,oldValueConsoleOnErr);
                if (isAddedStreamListener) {
                  process.getStreamsProxy().getOutputStreamMonitor().removeListener(streamListener);
                  isAddedStreamListener=false;
                  if (processContext.isRunning()) {
                    final String endingPattern=Messages.getString(""String_Node_Str"");
                    MessageFormat mf=new MessageFormat(endingPattern);
                    String byeMsg;
                    try {
                      byeMsg=""String_Node_Str"" + mf.format(new Object[]{processContext.getProcess().getName(),new Date(),new Integer(process.getExitValue())});
                      processContext.addDebugResultToConsole(new ProcessMessage(MsgType.CORE_OUT,byeMsg));
                    }
 catch (                    DebugException e) {
                      ExceptionHandler.process(e);
                    }
                    processContext.setRunning(false);
                  }
                }
                debugMode=false;
              }
            }
);
          }
 else {
            if (process != null) {
              getDisplay().asyncExec(new Runnable(){
                @Override public void run(){
                  setRunnable(false);
                  killBtn.setEnabled(true);
                  processContext.setRunning(true);
                  processContext.setDebugProcess(process);
                  if (!isAddedStreamListener) {
                    process.getStreamsProxy().getOutputStreamMonitor().addListener(streamListener);
                    ClearPerformanceAction clearPerfAction=new ClearPerformanceAction();
                    clearPerfAction.setProcess(processContext.getProcess());
                    clearPerfAction.run();
                    ClearTraceAction clearTraceAction=new ClearTraceAction();
                    clearTraceAction.setProcess(processContext.getProcess());
                    clearTraceAction.run();
                    isAddedStreamListener=true;
                    final String startingPattern=Messages.getString(""String_Node_Str"");
                    MessageFormat mf=new MessageFormat(startingPattern);
                    String welcomeMsg=mf.format(new Object[]{processContext.getProcess().getName(),new Date()});
                    processContext.addDebugResultToConsole(new ProcessMessage(MsgType.CORE_OUT,welcomeMsg + ""String_Node_Str""));
                  }
                }
              }
);
            }
 else {
              getDisplay().asyncExec(new Runnable(){
                @Override public void run(){
                  setRunnable(true);
                  killBtn.setEnabled(false);
                }
              }
);
            }
          }
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    thread.start();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    processContext.addErrorMessage(e);
    kill();
  }
}",0.986465463596764
117854,"public static List<IContainerEntry> getErrors(){
  List<IContainerEntry> input=new ArrayList<IContainerEntry>();
  try {
    Item item=null;
    IProxyRepositoryFactory proxyRepositoryFactory=CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory();
    ITalendSynchronizer synchronizer=CorePlugin.getDefault().getCodeGeneratorService().createRoutineSynchronizer();
    Set<String> jobIds=new HashSet<String>();
    for (    JobInfo jobInfo : LastGenerationInfo.getInstance().getLastGeneratedjobs()) {
      List<IRepositoryViewObject> allVersions=proxyRepositoryFactory.getAllVersion(jobInfo.getJobId());
      for (      IRepositoryViewObject repositoryObject2 : allVersions) {
        Property property2=repositoryObject2.getProperty();
        if (jobInfo.getJobVersion().equals(property2.getVersion())) {
          item=property2.getItem();
          break;
        }
      }
      if (item == null) {
        continue;
      }
      IFile sourceFile=synchronizer.getFile(item);
      if (sourceFile == null) {
        continue;
      }
      jobIds.add(item.getProperty().getId());
      Problems.addJobRoutineFile(sourceFile,ProblemType.JOB,item,true);
    }
    if (!CommonsPlugin.isHeadless()) {
      List<IRepositoryViewObject> routinesObjects=proxyRepositoryFactory.getAll(ERepositoryObjectType.ROUTINES,false);
      Set<String> dependentRoutines=LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(LastGenerationInfo.getInstance().getLastMainJob().getJobId(),LastGenerationInfo.getInstance().getLastMainJob().getJobVersion());
      if (routinesObjects != null) {
        for (        IRepositoryViewObject obj : routinesObjects) {
          Property property=obj.getProperty();
          if (dependentRoutines.contains(property.getLabel())) {
            Item routinesitem=property.getItem();
            IFile routineFile=synchronizer.getFile(routinesitem);
            Problems.addJobRoutineFile(routineFile,ProblemType.ROUTINE,routinesitem,true);
          }
 else {
            Problems.clearAllComliationError(property.getLabel());
          }
        }
      }
    }
    Problems.refreshProblemTreeView();
    List<Problem> errors=Problems.getProblemList().getProblemsBySeverity(ProblemStatus.ERROR);
    ErrorDetailTreeBuilder builder=new ErrorDetailTreeBuilder();
    input.addAll(builder.createTreeInput(errors,jobIds));
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return input;
}","public static List<IContainerEntry> getErrors(){
  List<IContainerEntry> input=new ArrayList<IContainerEntry>();
  try {
    Item item=null;
    IProxyRepositoryFactory proxyRepositoryFactory=CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory();
    ITalendSynchronizer synchronizer=CorePlugin.getDefault().getCodeGeneratorService().createRoutineSynchronizer();
    Set<String> jobIds=new HashSet<String>();
    HashSet<JobInfo> jobInfos=new HashSet<>();
    jobInfos.add(LastGenerationInfo.getInstance().getLastMainJob());
    for (    JobInfo jobInfo : jobInfos) {
      List<IRepositoryViewObject> allVersions=proxyRepositoryFactory.getAllVersion(jobInfo.getJobId());
      for (      IRepositoryViewObject repositoryObject2 : allVersions) {
        Property property2=repositoryObject2.getProperty();
        if (jobInfo.getJobVersion().equals(property2.getVersion())) {
          item=property2.getItem();
          break;
        }
      }
      if (item == null) {
        continue;
      }
      IFile sourceFile=synchronizer.getFile(item);
      if (sourceFile == null) {
        continue;
      }
      jobIds.add(item.getProperty().getId());
      Problems.addJobRoutineFile(sourceFile,ProblemType.JOB,item,true);
    }
    if (!CommonsPlugin.isHeadless()) {
      List<IRepositoryViewObject> routinesObjects=proxyRepositoryFactory.getAll(ERepositoryObjectType.ROUTINES,false);
      Set<String> dependentRoutines=LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(LastGenerationInfo.getInstance().getLastMainJob().getJobId(),LastGenerationInfo.getInstance().getLastMainJob().getJobVersion());
      if (routinesObjects != null) {
        for (        IRepositoryViewObject obj : routinesObjects) {
          Property property=obj.getProperty();
          if (dependentRoutines.contains(property.getLabel())) {
            Item routinesitem=property.getItem();
            IFile routineFile=synchronizer.getFile(routinesitem);
            Problems.addJobRoutineFile(routineFile,ProblemType.ROUTINE,routinesitem,true);
          }
 else {
            Problems.clearAllComliationError(property.getLabel());
          }
        }
      }
    }
    Problems.refreshProblemTreeView();
    List<Problem> errors=Problems.getProblemList().getProblemsBySeverity(ProblemStatus.ERROR);
    ErrorDetailTreeBuilder builder=new ErrorDetailTreeBuilder();
    input.addAll(builder.createTreeInput(errors,jobIds));
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return input;
}",0.9621318373071528
117855,"/** 
 * DOC ggu Comment method ""buildWholeCodeProject"".
 */
private void buildWholeCodeProject(){
  try {
    NullProgressMonitor monitor=new NullProgressMonitor();
    IProject project=getProject();
    if (!project.isSynchronized(IResource.DEPTH_INFINITE)) {
      project.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    }
    project.build(IncrementalProjectBuilder.FULL_BUILD,monitor);
    project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD,monitor);
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * DOC ggu Comment method ""buildWholeCodeProject"".
 */
@Override public void buildWholeCodeProject(){
  try {
    NullProgressMonitor monitor=new NullProgressMonitor();
    IProject project=getProject();
    if (!project.isSynchronized(IResource.DEPTH_INFINITE)) {
      project.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    }
    project.build(IncrementalProjectBuilder.FULL_BUILD,monitor);
    project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD,monitor);
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}",0.9806094182825484
117856,"@Override public void build(IProgressMonitor monitor) throws Exception {
  BuildCacheManager buildCacheManager=BuildCacheManager.getInstance();
  final ITalendProcessJavaProject talendJavaProject=getTalendJavaProject();
  String goal=getGoals();
  boolean isGoalPackage=TalendMavenConstants.GOAL_PACKAGE.equals(goal);
  boolean isGoalInstall=TalendMavenConstants.GOAL_INSTALL.equals(goal);
  boolean isMainJob=LastGenerationInfo.getInstance().isCurrentMainJob();
  if (!isMainJob && isGoalInstall) {
    if (!buildCacheManager.isJobBuild(getProperty())) {
      deleteExistedJobJarFile(talendJavaProject);
      buildCacheManager.putCache(getProperty());
    }
 else {
      PomUtil.restorePomFile(getTalendJavaProject());
    }
    return;
  }
  if (isMainJob) {
    final Map<String,Object> argumentsMap=new HashMap<String,Object>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + BuildCacheManager.BUILD_AGGREGATOR_POM_NAME + ""String_Node_Str""+ TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
    buildCacheManager.build(monitor,argumentsMap);
    if (!MavenProjectUtils.hasMavenNature(project)) {
      MavenProjectUtils.enableMavenNature(monitor,project);
    }
 else {
      if (buildCacheManager.needTempAggregator() || !CommonUIPlugin.isFullyHeadless()) {
        MavenProjectUtils.updateMavenProject(monitor,talendJavaProject.getProject());
      }
    }
    JobInfo mainJobInfo=LastGenerationInfo.getInstance().getLastMainJob();
    Set<JobInfo> allJobs=LastGenerationInfo.getInstance().getLastGeneratedjobs();
    for (    JobInfo jobInfo : allJobs) {
      if (mainJobInfo != jobInfo) {
        ITalendProcessJavaProject subJobProject=TalendJavaProjectManager.getExistingTalendJobProject(jobInfo.getProcessor().getProperty());
        if (subJobProject != null) {
          IProject subProject=subJobProject.getProject();
          if (MavenProjectUtils.hasMavenNature(subProject) && subProject.isOpen()) {
            try {
              if (!subProject.isSynchronized(IResource.DEPTH_INFINITE)) {
                subProject.refreshLocal(IResource.DEPTH_INFINITE,monitor);
              }
              subProject.build(IncrementalProjectBuilder.FULL_BUILD,monitor);
              subProject.build(IncrementalProjectBuilder.INCREMENTAL_BUILD,monitor);
            }
 catch (            CoreException e) {
              ExceptionHandler.process(e);
            }
          }
        }
      }
    }
  }
  IFile jobJarFile=null;
  if (!TalendMavenConstants.GOAL_COMPILE.equals(goal)) {
    if (isGoalPackage) {
      jobJarFile=deleteExistedJobJarFile(talendJavaProject);
    }
    talendJavaProject.buildModules(monitor,null,null);
  }
  final Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,goal);
  if (isGoalPackage) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  }
  talendJavaProject.buildModules(monitor,null,argumentsMap);
  if (isGoalPackage) {
    if (jobJarFile != null) {
      jobJarFile.refreshLocal(IResource.DEPTH_ONE,null);
    }
    if (jobJarFile == null || !jobJarFile.exists()) {
      String mvnLogFilePath=talendJavaProject.getProject().getFile(""String_Node_Str"").getLocation().toPortableString();
      throw new Exception(Messages.getString(""String_Node_Str"",mvnLogFilePath));
    }
  }
}","@Override public void build(IProgressMonitor monitor) throws Exception {
  BuildCacheManager buildCacheManager=BuildCacheManager.getInstance();
  final ITalendProcessJavaProject talendJavaProject=getTalendJavaProject();
  String goal=getGoals();
  boolean isGoalPackage=TalendMavenConstants.GOAL_PACKAGE.equals(goal);
  boolean isGoalInstall=TalendMavenConstants.GOAL_INSTALL.equals(goal);
  boolean isMainJob=LastGenerationInfo.getInstance().isCurrentMainJob();
  if (!isMainJob && isGoalInstall) {
    if (!buildCacheManager.isJobBuild(getProperty())) {
      deleteExistedJobJarFile(talendJavaProject);
      buildCacheManager.putCache(getProperty());
    }
 else {
      PomUtil.restorePomFile(getTalendJavaProject());
    }
    return;
  }
  if (isMainJob) {
    final Map<String,Object> argumentsMap=new HashMap<String,Object>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + BuildCacheManager.BUILD_AGGREGATOR_POM_NAME + ""String_Node_Str""+ TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
    buildCacheManager.build(monitor,argumentsMap);
    if (!MavenProjectUtils.hasMavenNature(project)) {
      MavenProjectUtils.enableMavenNature(monitor,project);
    }
 else {
      if (buildCacheManager.needTempAggregator() || !CommonUIPlugin.isFullyHeadless()) {
        MavenProjectUtils.updateMavenProject(monitor,talendJavaProject.getProject());
      }
    }
    buildCacheManager.buildAllSubjobMavenProjects();
  }
  IFile jobJarFile=null;
  if (!TalendMavenConstants.GOAL_COMPILE.equals(goal)) {
    if (isGoalPackage) {
      jobJarFile=deleteExistedJobJarFile(talendJavaProject);
    }
    talendJavaProject.buildModules(monitor,null,null);
  }
  final Map<String,Object> argumentsMap=new HashMap<>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,goal);
  if (isGoalPackage) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"" + TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  }
  talendJavaProject.buildModules(monitor,null,argumentsMap);
  if (isGoalPackage) {
    if (jobJarFile != null) {
      jobJarFile.refreshLocal(IResource.DEPTH_ONE,null);
    }
    if (jobJarFile == null || !jobJarFile.exists()) {
      String mvnLogFilePath=talendJavaProject.getProject().getFile(""String_Node_Str"").getLocation().toPortableString();
      throw new Exception(Messages.getString(""String_Node_Str"",mvnLogFilePath));
    }
  }
}",0.8209348255431205
117857,"private void createAssistText(org.eclipse.swt.graphics.Point cursorRelativePosition){
  if (bindingService != null) {
    bindingService.setKeyFilterEnabled(false);
  }
  highlightOveredConnection(cursorRelativePosition);
  assistText=new Text((Composite)graphicControl,SWT.BORDER);
  assistText.setLocation(cursorRelativePosition.x,cursorRelativePosition.y - assistText.getLineHeight());
  assistText.setSize(200,assistText.computeSize(SWT.DEFAULT,SWT.DEFAULT).y);
  assistText.setFocus();
  TalendEditorComponentProposalProvider proposalProvider=new TalendEditorComponentProposalProvider(this,proposalList,process);
  contentProposalAdapter=new ContentProposalAdapter(assistText,new TextContentAdapter(),proposalProvider,null,null);
  contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapter.PROPOSAL_REPLACE);
  contentProposalAdapter.setLabelProvider(new TalendEditorComponentLabelProvider());
}","private void createAssistText(org.eclipse.swt.graphics.Point cursorRelativePosition){
  if (bindingService != null) {
    bindingService.setKeyFilterEnabled(false);
  }
  highlightOveredConnection(cursorRelativePosition);
  assistText=new Text((Composite)graphicControl,SWT.BORDER);
  assistText.setLocation(cursorRelativePosition.x,cursorRelativePosition.y - assistText.getLineHeight());
  assistText.setSize(200,assistText.computeSize(SWT.DEFAULT,SWT.DEFAULT).y);
  assistText.setFocus();
  TalendEditorComponentProposalProvider proposalProvider=new TalendEditorComponentProposalProvider(this,proposalList,process);
  contentProposalAdapter=new ContentProposalAdapter(assistText,new TextContentAdapter(),proposalProvider,null,null);
  contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapter.PROPOSAL_REPLACE);
  contentProposalAdapter.setLabelProvider(new TalendEditorComponentLabelProvider(assistText));
}",0.9945652173913044
117858,"@Override public void proposalPopupClosed(ContentProposalAdapter adapter){
  if (assistText != null && !assistText.isFocusControl()) {
    disposeAssistText();
  }
}","@Override public void proposalPopupClosed(ContentProposalAdapter adapter){
  filterText=assistText.getText();
  if (assistText != null && !assistText.isFocusControl()) {
    disposeAssistText();
  }
}",0.9041095890410958
117859,"private void initListeners(){
  assistText.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.stateMask == SWT.NONE) {
        if (e.keyCode == SWT.ESC) {
          disposeAssistText();
        }
 else         if (e.keyCode == SWT.CR) {
          acceptProposal();
        }
      }
    }
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  assistText.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
      if (!(contentProposalAdapter.isProposalPopupOpen())) {
        disposeAssistText();
      }
    }
    @Override public void focusGained(    FocusEvent e){
    }
  }
);
  contentProposalAdapter.addContentProposalListener(new IContentProposalListener2(){
    @Override public void proposalPopupOpened(    ContentProposalAdapter adapter){
    }
    @Override public void proposalPopupClosed(    ContentProposalAdapter adapter){
      if (assistText != null && !assistText.isFocusControl()) {
        disposeAssistText();
      }
    }
  }
);
  contentProposalAdapter.addContentProposalListener(new IContentProposalListener(){
    @Override public void proposalAccepted(    IContentProposal proposal){
      acceptProposal();
    }
  }
);
}","private void initListeners(){
  assistText.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.stateMask == SWT.NONE) {
        if (e.keyCode == SWT.ESC) {
          disposeAssistText();
        }
 else         if (e.keyCode == SWT.CR) {
          acceptProposal();
        }
      }
    }
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  assistText.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
      if (!(contentProposalAdapter.isProposalPopupOpen())) {
        disposeAssistText();
      }
    }
    @Override public void focusGained(    FocusEvent e){
    }
  }
);
  contentProposalAdapter.addContentProposalListener(new IContentProposalListener2(){
    @Override public void proposalPopupOpened(    ContentProposalAdapter adapter){
    }
    @Override public void proposalPopupClosed(    ContentProposalAdapter adapter){
      filterText=assistText.getText();
      if (assistText != null && !assistText.isFocusControl()) {
        disposeAssistText();
      }
    }
  }
);
  contentProposalAdapter.addContentProposalListener(new IContentProposalListener(){
    @Override public void proposalAccepted(    IContentProposal proposal){
      acceptProposal();
    }
  }
);
}",0.9846878680800942
117860,"protected Object createComponent(IComponent component,org.eclipse.swt.graphics.Point location){
  if (component == null) {
    return null;
  }
  Object newNode;
  Event e=new Event();
  e.x=location.x;
  e.y=location.y;
  e.button=1;
  e.count=1;
  e.stateMask=0;
  e.widget=graphicControl;
  MouseEvent mouseEvent=new MouseEvent(e);
  TalendAssistantCreationTool creationTool=new TalendAssistantCreationTool(new PaletteComponentFactory(component));
  newNode=creationTool.getCreateRequest().getNewObject();
  if (!canCreateAt(newNode,new Point(e.x,e.y))) {
    return null;
  }
  creationTool.mouseMove(mouseEvent,graphicViewer);
  graphicViewer.getEditDomain().setActiveTool(creationTool);
  graphicViewer.getEditDomain().mouseMove(mouseEvent,graphicViewer);
  graphicViewer.getEditDomain().mouseDown(mouseEvent,graphicViewer);
  graphicViewer.getEditDomain().mouseUp(mouseEvent,graphicViewer);
  return newNode;
}","protected Object createComponent(IComponent component,org.eclipse.swt.graphics.Point location){
  if (component == null) {
    return null;
  }
  Object newNode;
  Event e=new Event();
  e.x=location.x;
  e.y=location.y;
  e.button=1;
  e.count=1;
  e.stateMask=0;
  e.widget=graphicControl;
  MouseEvent mouseEvent=new MouseEvent(e);
  TalendAssistantCreationTool creationTool=new TalendAssistantCreationTool(new PaletteComponentFactory(component,filterText));
  newNode=creationTool.getCreateRequest().getNewObject();
  if (!canCreateAt(newNode,new Point(e.x,e.y))) {
    return null;
  }
  creationTool.mouseMove(mouseEvent,graphicViewer);
  graphicViewer.getEditDomain().setActiveTool(creationTool);
  graphicViewer.getEditDomain().mouseMove(mouseEvent,graphicViewer);
  graphicViewer.getEditDomain().mouseDown(mouseEvent,graphicViewer);
  graphicViewer.getEditDomain().mouseUp(mouseEvent,graphicViewer);
  return newNode;
}",0.9940379403794036
117861,"@Override public String getText(Object element){
  if (element != null && element instanceof ComponentContentProposal) {
    ComponentContentProposal proposal=(ComponentContentProposal)element;
    String label=proposal.getLabel();
    IComponent iComponent=proposal.getComponent();
    if (iComponent != null) {
      return label + ""String_Node_Str"" + iComponent.getOriginalFamilyName();
    }
 else {
      return label;
    }
  }
  return super.getText(element);
}","@Override public String getText(Object element){
  if (element != null && element instanceof ComponentContentProposal) {
    ComponentContentProposal proposal=(ComponentContentProposal)element;
    String label=proposal.getLabel();
    IComponent iComponent=proposal.getComponent();
    if (iComponent != null) {
      if (!assistText.isDisposed()) {
        label=UnifiedComponentUtil.getComponentDisplayNameForPalette(iComponent,assistText.getText());
      }
      return label + ""String_Node_Str"" + iComponent.getOriginalFamilyName();
    }
 else {
      return label;
    }
  }
  return super.getText(element);
}",0.8626728110599078
117862,"public PaletteComponentFactory(IComponent c){
  component=c;
}","public PaletteComponentFactory(IComponent c,String filter){
  component=c;
  this.filter=filter;
}",0.775
117863,"@Override public Object getNewObject(){
  String componentName=null;
  if (component != null) {
    componentName=component.getName();
  }
  if (componentName != null && componentName.toLowerCase().equals(""String_Node_Str"")) {
    return new Note();
  }
 else {
    return new Node(component);
  }
}","@Override public Object getNewObject(){
  String componentName=null;
  if (component != null) {
    componentName=component.getName();
  }
  if (componentName != null && componentName.toLowerCase().equals(""String_Node_Str"")) {
    return new Note();
  }
 else {
    IComponent emfComponent=UnifiedComponentUtil.getUnifiedComponentByFilter(component,filter);
    if (emfComponent != null) {
      return new Node(component,emfComponent);
    }
    return new Node(component);
  }
}",0.7599486521181001
117864,"public static TalendCombinedTemplateCreationEntry createEntryFrom(IComponent component){
  if (component == null) {
    return null;
  }
  String name=component.getName();
  ImageDescriptor imageSmall=component.getIcon16();
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  ImageDescriptor imageLarge;
  final String string=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
  if (string.equals(""String_Node_Str"")) {
    imageLarge=component.getIcon24();
  }
 else {
    imageLarge=component.getIcon32();
  }
  TalendCombinedTemplateCreationEntry newEntry=new TalendCombinedTemplateCreationEntry(name,name,Node.class,component,imageSmall,imageLarge);
  newEntry.setDescription(component.getLongName());
  return newEntry;
}","public static TalendCombinedTemplateCreationEntry createEntryFrom(IComponent component){
  if (component == null) {
    return null;
  }
  IComponent delegateComponent=UnifiedComponentUtil.getDelegateComponent(component);
  String name=component.getName();
  String filter=null;
  if (delegateComponent != component) {
    filter=component.getName();
    name=UnifiedComponentUtil.getComponentDisplayNameForPalette(delegateComponent,filter);
  }
  ImageDescriptor imageSmall=delegateComponent.getIcon16();
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  ImageDescriptor imageLarge;
  final String string=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
  if (string.equals(""String_Node_Str"")) {
    imageLarge=delegateComponent.getIcon24();
  }
 else {
    imageLarge=delegateComponent.getIcon32();
  }
  TalendCombinedTemplateCreationEntry newEntry=new TalendCombinedTemplateCreationEntry(name,name,Node.class,delegateComponent,imageSmall,imageLarge,filter);
  newEntry.setDescription(component.getLongName());
  return newEntry;
}",0.8252585737615677
117865,"/** 
 * Create the ""Shapes"" drawer. 
 */
private static void createComponentsDrawer(List<IComponent> componentList,boolean needHiddenComponent,boolean isFavorite,int a){
  clearGroup();
  List<CreationToolEntry> nodeList=new LinkedList<CreationToolEntry>();
  PaletteDrawer componentsDrawer;
  String name, longName;
  String family;
  String oraFamily;
  List<String> families=new ArrayList<String>();
  HashMap<String,String> familyMap=new HashMap<String,String>();
  CombinedTemplateCreationEntry component;
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  paletteState=isFavorite;
  List<String> favoriteComponentNames=null;
  if (a == 0) {
    favoriteComponentNames=getFavoritesList();
  }
  Iterator<IComponent> componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    oraFamily=xmlComponent.getOriginalFamilyName();
    family=xmlComponent.getTranslatedFamilyName();
    if (xmlComponent.isLoaded()) {
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        try {
          if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
            continue;
          }
        }
 catch (        Exception e) {
          System.out.println();
        }
        if (a == 0) {
          if (!oraStrings[j].equals(""String_Node_Str"")) {
            if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
              continue;
            }
          }
        }
        families.add(strings[j]);
        familyMap.put(strings[j],oraStrings[j]);
      }
    }
  }
  Collections.sort(families);
  List<String> recentlyUsedComponentNames=null;
  List<RecentlyUsedComponent> recentlyUsedComponents=null;
  if (a == 0) {
    recentlyUsedComponents=new LinkedList<TalendEditorPaletteFactory.RecentlyUsedComponent>();
    recentlyUsedComponentNames=getRecentlyUsedList(recentlyUsedComponents);
    Collections.sort(recentlyUsedComponents,new Comparator<TalendEditorPaletteFactory.RecentlyUsedComponent>(){
      @Override public int compare(      RecentlyUsedComponent arg0,      RecentlyUsedComponent arg1){
        return -1 * arg0.getTimestamp().compareTo(arg1.getTimestamp());
      }
    }
);
    families.add(0,FAVORITES);
    familyMap.put(FAVORITES,FAVORITES);
    families.add(1,RECENTLY_USED);
    familyMap.put(RECENTLY_USED,RECENTLY_USED);
    for (    Object element : families) {
      family=(String)element;
      String oraFam=familyMap.get(family);
      componentsDrawer=ht.get(family);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(ht,family);
        if (componentsDrawer instanceof IPaletteFilter) {
          ((IPaletteFilter)componentsDrawer).setOriginalName(oraFam);
        }
      }
    }
  }
  boolean noteAeeded=false;
  boolean needAddNote=true;
  boolean needToAdd=false;
  Map<String,IComponent> recentlyUsedMap=new HashMap<String,IComponent>();
  PaletteDrawer drawer=ht.get(""String_Node_Str"");
  if (drawer == null) {
    drawer=ht.get(""String_Node_Str"");
    if (drawer == null) {
      drawer=createComponentDrawer(ht,""String_Node_Str"");
      if (drawer instanceof IPaletteFilter) {
        ((IPaletteFilter)drawer).setOriginalName(""String_Node_Str"");
      }
    }
  }
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String largeIconsSize=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
  CreationToolEntry noteCreationToolEntry=createNoteEntry(largeIconsSize);
  noteCreationToolEntry.setParent(drawer);
  drawer.add(noteCreationToolEntry);
  componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (filter != null) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(filter);
      if (!matcher.matches() && filter.length() != 0) {
        filter=""String_Node_Str"";
      }
      String regex=getFilterRegex(filter);
      needAddNote=""String_Node_Str"".toLowerCase().matches(regex);
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
      continue;
    }
    if (xmlComponent.isLoaded()) {
      name=xmlComponent.getName();
      longName=xmlComponent.getLongName();
      ImageDescriptor imageSmall=xmlComponent.getIcon16();
      ImageDescriptor imageLarge;
      if (largeIconsSize.equals(""String_Node_Str"")) {
        imageLarge=xmlComponent.getIcon24();
      }
 else {
        imageLarge=xmlComponent.getIcon32();
      }
      if (favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName())) {
        componentsDrawer=ht.get(FAVORITES);
        if (componentsDrawer != null) {
          component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge);
          component.setDescription(longName);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
      }
      if (recentlyUsedComponentNames != null && recentlyUsedComponentNames.contains(name)) {
        recentlyUsedMap.put(name,xmlComponent);
      }
      if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
        continue;
      }
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
          continue;
        }
        component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge);
        component.setDescription(longName);
        if (a == 0) {
          componentsDrawer=ht.get(strings[j]);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
 else         if (a == 1) {
          boolean canAdd=true;
          Iterator<CreationToolEntry> iter=nodeList.iterator();
          while (iter.hasNext()) {
            if ((iter.next().getLabel()).equals(component.getLabel())) {
              canAdd=false;
            }
          }
          if (canAdd == true) {
            nodeList.add(component);
          }
        }
      }
    }
  }
  if (a == 0) {
    createRecentlyUsedEntryList(ht,recentlyUsedComponents,recentlyUsedMap);
  }
  if (a == 1) {
    Iterator<CreationToolEntry> iter=nodeList.iterator();
    while (iter.hasNext()) {
      CreationToolEntry entryComponent=iter.next();
      entryComponent.setParent(paGroup);
      paGroup.add(entryComponent);
    }
    palette.add(paGroup);
  }
  setFilter(""String_Node_Str"");
}","/** 
 * Create the ""Shapes"" drawer. 
 */
private static void createComponentsDrawer(List<IComponent> componentList,boolean needHiddenComponent,boolean isFavorite,int a){
  clearGroup();
  List<CreationToolEntry> nodeList=new LinkedList<CreationToolEntry>();
  PaletteDrawer componentsDrawer;
  String name, longName;
  String family;
  String oraFamily;
  List<String> families=new ArrayList<String>();
  HashMap<String,String> familyMap=new HashMap<String,String>();
  CombinedTemplateCreationEntry component;
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  paletteState=isFavorite;
  List<String> favoriteComponentNames=null;
  if (a == 0) {
    favoriteComponentNames=getFavoritesList();
  }
  Iterator<IComponent> componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    oraFamily=xmlComponent.getOriginalFamilyName();
    family=xmlComponent.getTranslatedFamilyName();
    if (xmlComponent.isLoaded()) {
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        try {
          if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
            continue;
          }
        }
 catch (        Exception e) {
          System.out.println();
        }
        if (a == 0) {
          if (!oraStrings[j].equals(""String_Node_Str"")) {
            if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
              continue;
            }
          }
        }
        families.add(strings[j]);
        familyMap.put(strings[j],oraStrings[j]);
      }
    }
  }
  Collections.sort(families);
  List<String> recentlyUsedComponentNames=null;
  List<RecentlyUsedComponent> recentlyUsedComponents=null;
  if (a == 0) {
    recentlyUsedComponents=new LinkedList<TalendEditorPaletteFactory.RecentlyUsedComponent>();
    recentlyUsedComponentNames=getRecentlyUsedList(recentlyUsedComponents);
    Collections.sort(recentlyUsedComponents,new Comparator<TalendEditorPaletteFactory.RecentlyUsedComponent>(){
      @Override public int compare(      RecentlyUsedComponent arg0,      RecentlyUsedComponent arg1){
        return -1 * arg0.getTimestamp().compareTo(arg1.getTimestamp());
      }
    }
);
    families.add(0,FAVORITES);
    familyMap.put(FAVORITES,FAVORITES);
    families.add(1,RECENTLY_USED);
    familyMap.put(RECENTLY_USED,RECENTLY_USED);
    for (    Object element : families) {
      family=(String)element;
      String oraFam=familyMap.get(family);
      componentsDrawer=ht.get(family);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(ht,family);
        if (componentsDrawer instanceof IPaletteFilter) {
          ((IPaletteFilter)componentsDrawer).setOriginalName(oraFam);
        }
      }
    }
  }
  boolean noteAeeded=false;
  boolean needAddNote=true;
  boolean needToAdd=false;
  Map<String,IComponent> recentlyUsedMap=new HashMap<String,IComponent>();
  PaletteDrawer drawer=ht.get(""String_Node_Str"");
  if (drawer == null) {
    drawer=ht.get(""String_Node_Str"");
    if (drawer == null) {
      drawer=createComponentDrawer(ht,""String_Node_Str"");
      if (drawer instanceof IPaletteFilter) {
        ((IPaletteFilter)drawer).setOriginalName(""String_Node_Str"");
      }
    }
  }
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String largeIconsSize=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
  CreationToolEntry noteCreationToolEntry=createNoteEntry(largeIconsSize);
  noteCreationToolEntry.setParent(drawer);
  drawer.add(noteCreationToolEntry);
  componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (filter != null) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(filter);
      if (!matcher.matches() && filter.length() != 0) {
        filter=""String_Node_Str"";
      }
      String regex=getFilterRegex(filter);
      needAddNote=""String_Node_Str"".toLowerCase().matches(regex);
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
      continue;
    }
    if (xmlComponent.isLoaded()) {
      name=UnifiedComponentUtil.getComponentDisplayNameForPalette(xmlComponent,filter);
      longName=xmlComponent.getLongName();
      ImageDescriptor imageSmall=xmlComponent.getIcon16();
      ImageDescriptor imageLarge;
      if (largeIconsSize.equals(""String_Node_Str"")) {
        imageLarge=xmlComponent.getIcon24();
      }
 else {
        imageLarge=xmlComponent.getIcon32();
      }
      if (favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName())) {
        componentsDrawer=ht.get(FAVORITES);
        if (componentsDrawer != null) {
          component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge,filter);
          component.setDescription(longName);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
      }
      if (recentlyUsedComponentNames != null && recentlyUsedComponentNames.contains(xmlComponent.getName())) {
        recentlyUsedMap.put(xmlComponent.getName(),xmlComponent);
      }
      if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
        continue;
      }
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
          continue;
        }
        component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge,filter);
        component.setDescription(longName);
        if (a == 0) {
          componentsDrawer=ht.get(strings[j]);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
 else         if (a == 1) {
          boolean canAdd=true;
          Iterator<CreationToolEntry> iter=nodeList.iterator();
          while (iter.hasNext()) {
            if ((iter.next().getLabel()).equals(component.getLabel())) {
              canAdd=false;
            }
          }
          if (canAdd == true) {
            nodeList.add(component);
          }
        }
      }
    }
  }
  if (a == 0) {
    createRecentlyUsedEntryList(ht,recentlyUsedComponents,recentlyUsedMap);
  }
  if (a == 1) {
    Iterator<CreationToolEntry> iter=nodeList.iterator();
    while (iter.hasNext()) {
      CreationToolEntry entryComponent=iter.next();
      entryComponent.setParent(paGroup);
      paGroup.add(entryComponent);
    }
    palette.add(paGroup);
  }
  setFilter(""String_Node_Str"");
}",0.990725069392729
117866,"/** 
 * DOC cmeng Comment method ""createRecentlyUsedEntry"".
 * @param componentsDrawer
 * @param ht
 * @param recentlyUsedList
 * @param recentlyUsedMap
 * @return
 */
protected static void createRecentlyUsedEntryList(Hashtable<String,PaletteDrawer> ht,List<RecentlyUsedComponent> recentlyUsedList,Map<String,IComponent> recentlyUsedMap){
  String name;
  String longName;
  TalendCombinedTemplateCreationEntry component;
  final int recentlyUsedSize=PaletteSettingsPreferencePage.getPaletteRencentlyUsedListSize();
  int i=1;
  for (  RecentlyUsedComponent recentlyUsed : recentlyUsedList) {
    if (recentlyUsedSize < i) {
      break;
    }
    IComponent recentlyUsedComponent=recentlyUsedMap.get(recentlyUsed.getName());
    if (recentlyUsedComponent == null) {
      continue;
    }
    if (!ComponentUtilities.isComponentVisible(recentlyUsedComponent)) {
      continue;
    }
    recentlyUsedComponent=UnifiedComponentUtil.getDelegateComponent(recentlyUsedComponent);
    ++i;
    PaletteDrawer componentsDrawer=ht.get(RECENTLY_USED);
    if (componentsDrawer != null) {
      name=recentlyUsedComponent.getName();
      longName=recentlyUsedComponent.getLongName();
      ImageDescriptor imageSmall=recentlyUsedComponent.getIcon16();
      IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
      ImageDescriptor imageLarge;
      final String string=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
      if (string.equals(""String_Node_Str"")) {
        imageLarge=recentlyUsedComponent.getIcon24();
      }
 else {
        imageLarge=recentlyUsedComponent.getIcon32();
      }
      component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,recentlyUsedComponent,imageSmall,imageLarge);
      component.setDescription(longName);
      component.setParent(componentsDrawer);
      component.setTimestemp(recentlyUsed.getTimestamp());
      componentsDrawer.add(component);
    }
  }
}","/** 
 * DOC cmeng Comment method ""createRecentlyUsedEntry"".
 * @param componentsDrawer
 * @param ht
 * @param recentlyUsedList
 * @param recentlyUsedMap
 * @return
 */
protected static void createRecentlyUsedEntryList(Hashtable<String,PaletteDrawer> ht,List<RecentlyUsedComponent> recentlyUsedList,Map<String,IComponent> recentlyUsedMap){
  String name;
  String longName;
  TalendCombinedTemplateCreationEntry component;
  final int recentlyUsedSize=PaletteSettingsPreferencePage.getPaletteRencentlyUsedListSize();
  int i=1;
  for (  RecentlyUsedComponent recentlyUsed : recentlyUsedList) {
    if (recentlyUsedSize < i) {
      break;
    }
    IComponent recentlyUsedComponent=recentlyUsedMap.get(recentlyUsed.getName());
    if (recentlyUsedComponent == null) {
      continue;
    }
    if (!ComponentUtilities.isComponentVisible(recentlyUsedComponent)) {
      continue;
    }
    recentlyUsedComponent=UnifiedComponentUtil.getDelegateComponent(recentlyUsedComponent);
    ++i;
    PaletteDrawer componentsDrawer=ht.get(RECENTLY_USED);
    if (componentsDrawer != null) {
      name=UnifiedComponentUtil.getComponentDisplayNameForPalette(recentlyUsedComponent,filter);
      longName=recentlyUsedComponent.getLongName();
      ImageDescriptor imageSmall=recentlyUsedComponent.getIcon16();
      IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
      ImageDescriptor imageLarge;
      final String string=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
      if (string.equals(""String_Node_Str"")) {
        imageLarge=recentlyUsedComponent.getIcon24();
      }
 else {
        imageLarge=recentlyUsedComponent.getIcon32();
      }
      component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,recentlyUsedComponent,imageSmall,imageLarge,filter);
      component.setDescription(longName);
      component.setParent(componentsDrawer);
      component.setTimestemp(recentlyUsed.getTimestamp());
      componentsDrawer.add(component);
    }
  }
}",0.9716024340770792
117867,"@SuppressWarnings(""String_Node_Str"") private void checkParameters(){
  boolean checkColumnExist=false;
  IMetadataTable metadataTable=null;
  List<IMetadataTable> tables=getMetadataList();
  if (tables != null && tables.size() == 1) {
    metadataTable=tables.get(0);
    checkColumnExist=true;
  }
  boolean checkPreColumnExist=false;
  IMetadataTable preMetadataTable=null;
  int preTableCount=0;
  List<? extends IConnection> incomingConnections=getIncomingConnections();
  if (incomingConnections != null && incomingConnections.size() > 0) {
    for (    IConnection incomingConnection : incomingConnections) {
      if (incomingConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        IMetadataTable schemaTable=incomingConnection.getMetadataTable();
        if (schemaTable != null) {
          ++preTableCount;
          if (preTableCount > 1) {
            break;
          }
          preMetadataTable=schemaTable;
        }
      }
    }
  }
  if (preTableCount == 1) {
    checkPreColumnExist=true;
  }
  List<String> currentColumns=new ArrayList<String>();
  if (checkColumnExist) {
    currentColumns=getColumnLabels(metadataTable);
  }
  List<String> preColumns=new ArrayList<String>();
  if (checkPreColumnExist) {
    preColumns=getColumnLabels(preMetadataTable);
  }
  for (  IElementParameter param : this.getElementParametersWithChildrens()) {
    if (param.getMaxlength() > 0) {
      String paramValue=param.getValue().toString();
      paramValue.length();
      String tmpValue;
      if (paramValue.startsWith(""String_Node_Str"") && paramValue.endsWith(""String_Node_Str"")) {
        tmpValue=paramValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        continue;
      }
      String factor=""String_Node_Str"";
      Pattern pattern=Pattern.compile(factor);
      Matcher matcher=pattern.matcher(tmpValue);
      int lenth=0;
      matcher.groupCount();
      while (matcher.find()) {
        lenth++;
      }
      String last=tmpValue.replaceAll(factor,""String_Node_Str"");
      last=last.replaceAll(""String_Node_Str"",""String_Node_Str"");
      int realLength=last.length() + lenth;
      if (realLength > param.getMaxlength()) {
        String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getMaxlength());
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (param.getFieldType() == EParameterFieldType.CLOSED_LIST) {
      String showIf=param.getShowIf();
      String notShowIf=param.getNotShowIf();
      IElementParameter dbTypeEle=this.getElementParameter(""String_Node_Str"");
      if (dbTypeEle != null && showIf != null && notShowIf == null) {
        String dbType=(String)dbTypeEle.getValue();
        boolean show=false;
        if (showIf.contains(dbType)) {
          show=true;
        }
        if (show && !ArrayUtils.contains(param.getListItemsValue(),param.getValue())) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"");
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName())) {
      }
 else {
        if (!ArrayUtils.contains(param.getListItemsValue(),param.getValue()) && !param.isDynamicSettings()) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"" + param.getDisplayName() + ""String_Node_Str"");
        }
      }
    }
    if (param.getFieldType() == EParameterFieldType.TABLE) {
      Object[] tableItemsValue=param.getListItemsValue();
      List<Map<String,Object>> tableValues=(List<Map<String,Object>>)param.getValue();
      List<String> columnListParamNames=new ArrayList<String>();
      List<String> preColumnListParamNames=new ArrayList<String>();
      if (tableItemsValue != null && tableItemsValue.length > 0) {
        for (        Object tabItemValue : tableItemsValue) {
          if (tabItemValue instanceof IElementParameter) {
            IElementParameter itemParameter=(IElementParameter)tabItemValue;
            if (itemParameter.getFieldType() == EParameterFieldType.COLUMN_LIST) {
              columnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.PREV_COLUMN_LIST) {
              preColumnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.CONTEXT_PARAM_NAME_LIST && tableValues.size() > 0) {
              Object[] itemsValue=itemParameter.getListItemsValue();
              if (itemParameter.getListItemsDisplayName() == null || itemParameter.getListItemsDisplayName().length == 0) {
                itemsValue=getContextParamsFromProcess();
              }
              for (int index=0; index < tableValues.size(); index++) {
                Map<String,Object> tabMap=tableValues.get(index);
                Object value=tabMap.get(itemParameter.getName());
                if (itemParameter.getListItemsValue() != null && value != null) {
                  boolean found=false;
                  for (                  Object o : itemsValue) {
                    if (o.equals(value)) {
                      found=true;
                      break;
                    }
                  }
                  if (!found) {
                    String warnMessage=Messages.getString(""String_Node_Str"",value,index,itemParameter.getDisplayName());
                    Problems.add(ProblemStatus.WARNING,this,warnMessage);
                  }
                }
              }
            }
          }
        }
      }
      StringBuffer inexistentColumns=new StringBuffer();
      if (tableValues != null) {
        for (        Map<String,Object> tabMap : tableValues) {
          int row=tableValues.indexOf(tabMap) + 1;
          if (checkColumnExist) {
            for (            String paramName : columnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !currentColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          if (checkPreColumnExist) {
            for (            String paramName : preColumnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !preColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          Object type=tabMap.get(""String_Node_Str"");
          if (type != null && type.toString().equals(""String_Node_Str"")) {
            Object code=tabMap.get(""String_Node_Str"");
            IMetadataTable metaTable=this.getMetadataTable(code.toString());
            if (metaTable != null) {
              if (metaTable.getListColumns(true).size() > 1) {
                String warnMessage=Messages.getString(""String_Node_Str"",metaTable.getLabel());
                Problems.add(ProblemStatus.WARNING,this,warnMessage);
              }
            }
          }
        }
      }
      if (inexistentColumns.length() > 0) {
        inexistentColumns.deleteCharAt(inexistentColumns.length() - 1);
        String warnMessage=Messages.getString(""String_Node_Str"",inexistentColumns.toString(),param.getDisplayName());
        Problems.add(ProblemStatus.WARNING,this,warnMessage);
      }
    }
    if (param.getName().equals(EParameterName.COMMENT.getName())) {
      String infoValue=(String)param.getValue();
      if (infoValue != null && !infoValue.equals(""String_Node_Str"")) {
        Problems.add(ProblemStatus.INFO,this,infoValue);
      }
    }
    List<IElementParameter> emptyParamList=Collections.emptyList();
    Boolean noConditionOnShow=StringUtils.isEmpty(param.getShowIf()) && StringUtils.isEmpty(param.getNotShowIf());
    if (param.isRequired(getElementParameters()) && !param.isShow(emptyParamList) && noConditionOnShow&& this.externalNode != null) {
      if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
        if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
          checkFileOutputMSXML(param,tableValues);
        }
 else         if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"") && tableValues.size() != 0) {
          if (((Boolean)this.getElementParameter(""String_Node_Str"").getValue()) == true) {
            List<Map<String,String>> listGroup=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            List<Map<String,String>> listLoop=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            if (listGroup.size() == 0 || listLoop.size() == 0) {
              String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
        }
 else {
          if (tableValues == null || tableValues.size() == 0) {
            String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
            Problems.add(ProblemStatus.ERROR,this,errorMessage);
          }
        }
      }
    }
    if (param.isRequired() && param.isShow(getElementParameters())) {
      EParameterFieldType fieldType=param.getFieldType();
      String value;
      List multiSchemaDelimetedSeparaor=new ArrayList();
switch (fieldType) {
case TABLE:
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
      if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
        checkFileOutputMSXML(param,tableValues);
      }
 else {
        if (tableValues == null || tableValues.size() == 0) {
          String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
          Problems.add(ProblemStatus.ERROR,this,errorMessage);
        }
 else         if (this.getComponent().getName().equals(""String_Node_Str"")) {
          for (          Map<String,String> map : tableValues) {
            if (map != null) {
              if (""String_Node_Str"".equals(map.get(""String_Node_Str"")) || map.get(""String_Node_Str"") == null) {
                Problems.add(ProblemStatus.ERROR,this,Messages.getString(""String_Node_Str""));
              }
            }
          }
        }
      }
    break;
case CHECK:
  break;
case RADIO:
break;
case SCHEMA_TYPE:
break;
case SCHEMA_REFERENCE:
break;
case DCSCHEMA:
break;
case MEMO_SQL:
String errMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Object value2=param.getValue();
if (value2 == null) {
break;
}
String currentQuery=value2.toString();
if (CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_WARNING)) {
if (currentQuery.indexOf(COMPARE_STR1) != -1 || currentQuery.indexOf(COMPARE_STR2) != -1) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
if (!NodeQueryCheckUtil.checkQueryOK(this,currentQuery)) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
}
break;
case CLOSED_LIST:
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
if (param.getListItemsValue().length != 0) {
boolean found=false;
for (int i=0; i < param.getListItemsValue().length && !found; i++) {
if (param.getListItemsValue()[i].equals(value)) {
found=true;
}
}
if (!found) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),value);
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
break;
case COMPONENT_LIST:
if (param != null) {
String errorMessage;
boolean isContextMode=false;
if (param.getValue() == null || ""String_Node_Str"".equals(param.getValue())) {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
}
 else {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getValue());
isContextMode=param.isDynamicSettings();
}
if (!isContextMode && ((!hasUseExistingConnection(this)) || (isUseExistedConnetion(this)))) {
List<INode> list=(List<INode>)this.getProcess().getNodesOfType(param.getFilter());
if (list == null || list.size() == 0 || list.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
List<INode> nodeList=new ArrayList<INode>();
for (INode datanode : list) {
if (!datanode.isVirtualGenerateNode()) {
nodeList.add(datanode);
}
}
if (nodeList.size() == 0 || nodeList.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
break;
}
boolean foundValue=false;
for (INode datanode : nodeList) {
if (datanode.getUniqueName().equals(param.getValue())) {
foundValue=true;
break;
}
}
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
if (!foundValue) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
}
break;
default :
if (param.getValue() != null && !(param.getValue() instanceof String)) {
break;
}
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
if (this.getComponent() != null && ""String_Node_Str"".equals(this.getComponent().getName())) {
multiSchemaDelimetedSeparaor.add(param);
if (multiSchemaDelimetedSeparaor.size() == 2) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
 else {
if (getComponent() != null && ""String_Node_Str"".equals(getComponent().getName())) {
IElementParameter fromRepository=getElementParameter(""String_Node_Str"");
Object isFromRepository=fromRepository.getValue();
if (isFromRepository != null && ""String_Node_Str"".equals(isFromRepository.toString())) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
}
}
 else {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
checkDataprepRun(param);
}
}
checkValidationRule(param);
checktAggregateRow(param);
}
checkJobletConnections();
IElementParameter enableParallelizeParameter=getElementParameter(EParameterName.PARALLELIZE.getName());
if (enableParallelizeParameter != null && enableParallelizeParameter.getValue() != null) {
boolean x=(Boolean)enableParallelizeParameter.getValue();
if (x) {
addStatus(Process.PARALLEL_STATUS);
}
}
}","@SuppressWarnings(""String_Node_Str"") private void checkParameters(){
  boolean checkColumnExist=false;
  IMetadataTable metadataTable=null;
  List<IMetadataTable> tables=getMetadataList();
  if (tables != null && tables.size() == 1) {
    metadataTable=tables.get(0);
    checkColumnExist=true;
  }
  boolean checkPreColumnExist=false;
  IMetadataTable preMetadataTable=null;
  int preTableCount=0;
  List<? extends IConnection> incomingConnections=getIncomingConnections();
  if (incomingConnections != null && incomingConnections.size() > 0) {
    for (    IConnection incomingConnection : incomingConnections) {
      if (incomingConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        IMetadataTable schemaTable=incomingConnection.getMetadataTable();
        if (schemaTable != null) {
          ++preTableCount;
          if (preTableCount > 1) {
            break;
          }
          preMetadataTable=schemaTable;
        }
      }
    }
  }
  if (preTableCount == 1) {
    checkPreColumnExist=true;
  }
  List<String> currentColumns=new ArrayList<String>();
  if (checkColumnExist) {
    currentColumns=getColumnLabels(metadataTable);
  }
  List<String> preColumns=new ArrayList<String>();
  if (checkPreColumnExist) {
    preColumns=getColumnLabels(preMetadataTable);
  }
  for (  IElementParameter param : this.getElementParametersWithChildrens()) {
    if (param.getMaxlength() > 0) {
      String paramValue=param.getValue().toString();
      paramValue.length();
      String tmpValue;
      if (paramValue.startsWith(""String_Node_Str"") && paramValue.endsWith(""String_Node_Str"")) {
        tmpValue=paramValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        continue;
      }
      String factor=""String_Node_Str"";
      Pattern pattern=Pattern.compile(factor);
      Matcher matcher=pattern.matcher(tmpValue);
      int lenth=0;
      matcher.groupCount();
      while (matcher.find()) {
        lenth++;
      }
      String last=tmpValue.replaceAll(factor,""String_Node_Str"");
      last=last.replaceAll(""String_Node_Str"",""String_Node_Str"");
      int realLength=last.length() + lenth;
      if (realLength > param.getMaxlength()) {
        String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getMaxlength());
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (param.getFieldType() == EParameterFieldType.CLOSED_LIST) {
      String showIf=param.getShowIf();
      String notShowIf=param.getNotShowIf();
      IElementParameter dbTypeEle=this.getElementParameter(""String_Node_Str"");
      if (dbTypeEle != null && showIf != null && notShowIf == null) {
        String dbType=(String)dbTypeEle.getValue();
        boolean show=false;
        if (showIf.contains(dbType)) {
          show=true;
        }
        if (show && !ArrayUtils.contains(param.getListItemsValue(),param.getValue())) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"");
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName())) {
      }
 else {
        if (param.isShow(this.getElementParameters()) && !ArrayUtils.contains(param.getListItemsValue(),param.getValue()) && !param.isDynamicSettings()) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"" + param.getDisplayName() + ""String_Node_Str"");
        }
      }
    }
    if (param.getFieldType() == EParameterFieldType.TABLE) {
      Object[] tableItemsValue=param.getListItemsValue();
      List<Map<String,Object>> tableValues=(List<Map<String,Object>>)param.getValue();
      List<String> columnListParamNames=new ArrayList<String>();
      List<String> preColumnListParamNames=new ArrayList<String>();
      if (tableItemsValue != null && tableItemsValue.length > 0) {
        for (        Object tabItemValue : tableItemsValue) {
          if (tabItemValue instanceof IElementParameter) {
            IElementParameter itemParameter=(IElementParameter)tabItemValue;
            if (itemParameter.getFieldType() == EParameterFieldType.COLUMN_LIST) {
              columnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.PREV_COLUMN_LIST) {
              preColumnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.CONTEXT_PARAM_NAME_LIST && tableValues.size() > 0) {
              Object[] itemsValue=itemParameter.getListItemsValue();
              if (itemParameter.getListItemsDisplayName() == null || itemParameter.getListItemsDisplayName().length == 0) {
                itemsValue=getContextParamsFromProcess();
              }
              for (int index=0; index < tableValues.size(); index++) {
                Map<String,Object> tabMap=tableValues.get(index);
                Object value=tabMap.get(itemParameter.getName());
                if (itemParameter.getListItemsValue() != null && value != null) {
                  boolean found=false;
                  for (                  Object o : itemsValue) {
                    if (o.equals(value)) {
                      found=true;
                      break;
                    }
                  }
                  if (!found) {
                    String warnMessage=Messages.getString(""String_Node_Str"",value,index,itemParameter.getDisplayName());
                    Problems.add(ProblemStatus.WARNING,this,warnMessage);
                  }
                }
              }
            }
          }
        }
      }
      StringBuffer inexistentColumns=new StringBuffer();
      if (tableValues != null) {
        for (        Map<String,Object> tabMap : tableValues) {
          int row=tableValues.indexOf(tabMap) + 1;
          if (checkColumnExist) {
            for (            String paramName : columnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !currentColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          if (checkPreColumnExist) {
            for (            String paramName : preColumnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !preColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          Object type=tabMap.get(""String_Node_Str"");
          if (type != null && type.toString().equals(""String_Node_Str"")) {
            Object code=tabMap.get(""String_Node_Str"");
            IMetadataTable metaTable=this.getMetadataTable(code.toString());
            if (metaTable != null) {
              if (metaTable.getListColumns(true).size() > 1) {
                String warnMessage=Messages.getString(""String_Node_Str"",metaTable.getLabel());
                Problems.add(ProblemStatus.WARNING,this,warnMessage);
              }
            }
          }
        }
      }
      if (inexistentColumns.length() > 0) {
        inexistentColumns.deleteCharAt(inexistentColumns.length() - 1);
        String warnMessage=Messages.getString(""String_Node_Str"",inexistentColumns.toString(),param.getDisplayName());
        Problems.add(ProblemStatus.WARNING,this,warnMessage);
      }
    }
    if (param.getName().equals(EParameterName.COMMENT.getName())) {
      String infoValue=(String)param.getValue();
      if (infoValue != null && !infoValue.equals(""String_Node_Str"")) {
        Problems.add(ProblemStatus.INFO,this,infoValue);
      }
    }
    List<IElementParameter> emptyParamList=Collections.emptyList();
    Boolean noConditionOnShow=StringUtils.isEmpty(param.getShowIf()) && StringUtils.isEmpty(param.getNotShowIf());
    if (param.isRequired(getElementParameters()) && !param.isShow(emptyParamList) && noConditionOnShow&& this.externalNode != null) {
      if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
        if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
          checkFileOutputMSXML(param,tableValues);
        }
 else         if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"") && tableValues.size() != 0) {
          if (((Boolean)this.getElementParameter(""String_Node_Str"").getValue()) == true) {
            List<Map<String,String>> listGroup=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            List<Map<String,String>> listLoop=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            if (listGroup.size() == 0 || listLoop.size() == 0) {
              String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
        }
 else {
          if (tableValues == null || tableValues.size() == 0) {
            String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
            Problems.add(ProblemStatus.ERROR,this,errorMessage);
          }
        }
      }
    }
    if (param.isRequired() && param.isShow(getElementParameters())) {
      EParameterFieldType fieldType=param.getFieldType();
      String value;
      List multiSchemaDelimetedSeparaor=new ArrayList();
switch (fieldType) {
case TABLE:
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
      if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
        checkFileOutputMSXML(param,tableValues);
      }
 else {
        if (tableValues == null || tableValues.size() == 0) {
          String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
          Problems.add(ProblemStatus.ERROR,this,errorMessage);
        }
 else         if (this.getComponent().getName().equals(""String_Node_Str"")) {
          for (          Map<String,String> map : tableValues) {
            if (map != null) {
              if (""String_Node_Str"".equals(map.get(""String_Node_Str"")) || map.get(""String_Node_Str"") == null) {
                Problems.add(ProblemStatus.ERROR,this,Messages.getString(""String_Node_Str""));
              }
            }
          }
        }
      }
    break;
case CHECK:
  break;
case RADIO:
break;
case SCHEMA_TYPE:
break;
case SCHEMA_REFERENCE:
break;
case DCSCHEMA:
break;
case MEMO_SQL:
String errMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Object value2=param.getValue();
if (value2 == null) {
break;
}
String currentQuery=value2.toString();
if (CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_WARNING)) {
if (currentQuery.indexOf(COMPARE_STR1) != -1 || currentQuery.indexOf(COMPARE_STR2) != -1) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
if (!NodeQueryCheckUtil.checkQueryOK(this,currentQuery)) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
}
break;
case CLOSED_LIST:
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
if (param.getListItemsValue().length != 0) {
boolean found=false;
for (int i=0; i < param.getListItemsValue().length && !found; i++) {
if (param.getListItemsValue()[i].equals(value)) {
found=true;
}
}
if (!found) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),value);
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
break;
case COMPONENT_LIST:
if (param != null) {
String errorMessage;
boolean isContextMode=false;
if (param.getValue() == null || ""String_Node_Str"".equals(param.getValue())) {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
}
 else {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getValue());
isContextMode=param.isDynamicSettings();
}
if (!isContextMode && ((!hasUseExistingConnection(this)) || (isUseExistedConnetion(this)))) {
List<INode> list=(List<INode>)this.getProcess().getNodesOfType(param.getFilter());
if (list == null || list.size() == 0 || list.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
List<INode> nodeList=new ArrayList<INode>();
for (INode datanode : list) {
if (!datanode.isVirtualGenerateNode()) {
nodeList.add(datanode);
}
}
if (nodeList.size() == 0 || nodeList.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
break;
}
boolean foundValue=false;
for (INode datanode : nodeList) {
if (datanode.getUniqueName().equals(param.getValue())) {
foundValue=true;
break;
}
}
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
if (!foundValue) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
}
break;
default :
if (param.getValue() != null && !(param.getValue() instanceof String)) {
break;
}
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
if (this.getComponent() != null && ""String_Node_Str"".equals(this.getComponent().getName())) {
multiSchemaDelimetedSeparaor.add(param);
if (multiSchemaDelimetedSeparaor.size() == 2) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
 else {
if (getComponent() != null && ""String_Node_Str"".equals(getComponent().getName())) {
IElementParameter fromRepository=getElementParameter(""String_Node_Str"");
Object isFromRepository=fromRepository.getValue();
if (isFromRepository != null && ""String_Node_Str"".equals(isFromRepository.toString())) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
}
}
 else {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
checkDataprepRun(param);
}
}
checkValidationRule(param);
checktAggregateRow(param);
}
checkJobletConnections();
IElementParameter enableParallelizeParameter=getElementParameter(EParameterName.PARALLELIZE.getName());
if (enableParallelizeParameter != null && enableParallelizeParameter.getValue() != null) {
boolean x=(Boolean)enableParallelizeParameter.getValue();
if (x) {
addStatus(Process.PARALLEL_STATUS);
}
}
}",0.9984883603748866
117868,"@Override public boolean setGenericPropertyValue(IElementParameter param){
  if (param == null || param.getName() == null) {
    return false;
  }
  if (param instanceof GenericElementParameter) {
    ComponentProperties componentProperties=((Node)((GenericElementParameter)param).getElement()).getComponentProperties();
    Properties currentProperties=ComponentsUtils.getCurrentProperties(componentProperties,param.getName());
    if (currentProperties == null) {
      return false;
    }
    Property<?> property=componentProperties.getValuedProperty(param.getName());
    if (property != null) {
      property.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,param.getName());
      return true;
    }
  }
  return false;
}","@Override public boolean setGenericPropertyValue(IElementParameter param){
  if (param == null || param.getName() == null) {
    return false;
  }
  if (param instanceof GenericElementParameter) {
    ComponentProperties componentProperties=((Node)((GenericElementParameter)param).getElement()).getComponentProperties();
    Property<?> property=componentProperties.getValuedProperty(param.getName());
    if (property != null) {
      property.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,param.getName());
      return true;
    }
    Properties currentProperties=((GenericElementParameter)param).getProperties();
    if (currentProperties != null) {
      boolean isRepostory=false;
      for (      NamedThing thing : currentProperties.getProperties()) {
        if (thing instanceof Property) {
          ((Property)thing).setTaggedValue(IGenericConstants.REPOSITORY_VALUE,param.getName());
          isRepostory=true;
        }
      }
      return isRepostory;
    }
  }
  return false;
}",0.6462427745664739
117869,"@Override public Object getElementParameterValueFromComponentProperties(INode iNode,IElementParameter param){
  if (iNode != null) {
    ComponentProperties iNodeComponentProperties=iNode.getComponentProperties();
    if (iNodeComponentProperties != null && param instanceof GenericElementParameter) {
      Properties paramProperties=ComponentsUtils.getCurrentProperties(iNodeComponentProperties,param.getName());
      if (paramProperties != null) {
        Property property=iNodeComponentProperties.getValuedProperty(param.getName());
        if (property != null) {
          if (property.getTaggedValue(IGenericConstants.REPOSITORY_VALUE) != null) {
            param.setRepositoryValue(param.getName());
            param.setRepositoryValueUsed(true);
          }
        }
        Object value=ComponentsUtils.getGenericPropertyValue(iNodeComponentProperties,param.getName());
        if (value == null && EParameterFieldType.TABLE.equals(param.getFieldType())) {
          value=GenericTableUtils.getTableValues(iNodeComponentProperties.getProperties(param.getName()),param);
        }
        return value;
      }
    }
  }
  return null;
}","@Override public Object getElementParameterValueFromComponentProperties(INode iNode,IElementParameter param){
  if (iNode != null) {
    ComponentProperties iNodeComponentProperties=iNode.getComponentProperties();
    if (iNodeComponentProperties != null && param instanceof GenericElementParameter) {
      Properties paramProperties=ComponentsUtils.getCurrentProperties(iNodeComponentProperties,param.getName());
      if (paramProperties != null) {
        Property property=iNodeComponentProperties.getValuedProperty(param.getName());
        if (property != null) {
          if (property.getTaggedValue(IGenericConstants.REPOSITORY_VALUE) != null) {
            param.setRepositoryValue(param.getName());
            param.setRepositoryValueUsed(true);
          }
        }
 else {
          Properties currentProperties=((GenericElementParameter)param).getProperties();
          if (currentProperties != null) {
            boolean isRepostory=false;
            for (            NamedThing thing : currentProperties.getProperties()) {
              if (thing instanceof Property) {
                if (((Property)thing).getTaggedValue(IGenericConstants.REPOSITORY_VALUE) != null) {
                  isRepostory=true;
                }
              }
            }
            if (isRepostory) {
              param.setRepositoryValue(param.getName());
              param.setRepositoryValueUsed(true);
            }
          }
        }
        Object value=ComponentsUtils.getGenericPropertyValue(iNodeComponentProperties,param.getName());
        if (value == null && EParameterFieldType.TABLE.equals(param.getFieldType())) {
          value=GenericTableUtils.getTableValues(iNodeComponentProperties.getProperties(param.getName()),param);
        }
        return value;
      }
    }
  }
  return null;
}",0.7748232918209357
117870,"@Override public ExecutionResult execute(Item item){
  if (item instanceof DatabaseConnectionItem) {
    ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    DatabaseConnectionItem connectionItem=(DatabaseConnectionItem)item;
    DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
    if (connection instanceof DatabaseConnection) {
      DatabaseConnection dbConnection=connection;
      String dbType=dbConnection.getDatabaseType();
      if (dbType == null || !dbType.equals(""String_Node_Str"")) {
        return null;
      }
      String jdbcType=""String_Node_Str"";
      dbConnection.setDatabaseType(jdbcType);
      connectionItem.setTypeName(jdbcType);
      IGenericDBService dbService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericDBService.class)) {
        dbService=(IGenericDBService)GlobalServiceRegister.getDefault().getService(IGenericDBService.class);
      }
      if (dbService == null) {
        return null;
      }
      boolean isContextMode=connection.isContextMode();
      Properties properties=dbService.getComponentProperties(jdbcType,dbConnection.getId());
      Property url=(Property)properties.getProperty(""String_Node_Str"");
      Property driClass=(Property)properties.getProperty(""String_Node_Str"");
      Property user=(Property)properties.getProperty(""String_Node_Str"");
      Property pass=(Property)properties.getProperty(""String_Node_Str"");
      Property dirJar=(Property)properties.getProperty(""String_Node_Str"");
      Property mappingFile=(Property)properties.getProperty(""String_Node_Str"");
      if (url != null) {
        url.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        url.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,url.getName());
        url.setValue(connection.getURL());
      }
      if (driClass != null) {
        driClass.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        driClass.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,driClass.getName());
        driClass.setValue(connection.getDriverClass());
      }
      if (user != null) {
        user.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        user.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,user.getName());
        user.setValue(connection.getUsername());
      }
      if (pass != null) {
        pass.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        pass.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,pass.getName());
        String password=connection.getValue(connection.getRawPassword(),false);
        pass.setValue(password);
      }
      if (mappingFile != null) {
        mappingFile.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        mappingFile.setValue(connection.getDbmsId());
      }
      setDrivers(dirJar,connection.getDriverJarPath(),isContextMode);
      connection.setCompProperties(properties.toSerialized());
      try {
        factory.save(item,true);
        return ExecutionResult.SUCCESS_WITH_ALERT;
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return ExecutionResult.FAILURE;
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(Item item){
  if (item instanceof DatabaseConnectionItem) {
    ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    DatabaseConnectionItem connectionItem=(DatabaseConnectionItem)item;
    DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
    if (connection instanceof DatabaseConnection) {
      DatabaseConnection dbConnection=connection;
      String dbType=dbConnection.getDatabaseType();
      if (dbType == null || !dbType.equals(""String_Node_Str"")) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      String jdbcType=""String_Node_Str"";
      dbConnection.setDatabaseType(jdbcType);
      connectionItem.setTypeName(jdbcType);
      IGenericDBService dbService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericDBService.class)) {
        dbService=(IGenericDBService)GlobalServiceRegister.getDefault().getService(IGenericDBService.class);
      }
      if (dbService == null) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      boolean isContextMode=connection.isContextMode();
      Properties properties=dbService.getComponentProperties(jdbcType,dbConnection.getId());
      Property url=(Property)properties.getProperty(""String_Node_Str"");
      Property driClass=(Property)properties.getProperty(""String_Node_Str"");
      Property user=(Property)properties.getProperty(""String_Node_Str"");
      Property pass=(Property)properties.getProperty(""String_Node_Str"");
      Property dirJar=(Property)properties.getProperty(""String_Node_Str"");
      Property mappingFile=(Property)properties.getProperty(""String_Node_Str"");
      if (url != null) {
        url.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        url.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,url.getName());
        url.setValue(connection.getURL());
      }
      if (driClass != null) {
        driClass.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        driClass.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,driClass.getName());
        driClass.setValue(connection.getDriverClass());
      }
      if (user != null) {
        user.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        user.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,user.getName());
        user.setValue(connection.getUsername());
      }
      if (pass != null) {
        pass.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        pass.setTaggedValue(IGenericConstants.REPOSITORY_VALUE,pass.getName());
        String password=connection.getValue(connection.getRawPassword(),false);
        pass.setValue(password);
      }
      if (mappingFile != null) {
        mappingFile.setTaggedValue(IGenericConstants.IS_CONTEXT_MODE,isContextMode);
        mappingFile.setValue(connection.getDbmsId());
      }
      setDrivers(dirJar,connection.getDriverJarPath(),isContextMode);
      connection.setCompProperties(properties.toSerialized());
      try {
        factory.save(item,true);
        return ExecutionResult.SUCCESS_WITH_ALERT;
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return ExecutionResult.FAILURE;
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9899020807833536
117871,"private String getParamNameForOldJDBC(IElementParameter param){
  String paramName=param.getName();
  if (elem instanceof Node) {
    Node node=(Node)elem;
    if (connection instanceof DatabaseConnection) {
      String databaseType=((DatabaseConnection)connection).getDatabaseType();
      if (""String_Node_Str"".equals(databaseType)) {
        IComponent component=node.getComponent();
        if (!ComponentCategory.CATEGORY_4_DI.getName().equals(component.getComponentType()) && component.getName().startsWith(""String_Node_Str"")) {
          if (EParameterName.URL.getName().equals(paramName)) {
            return ""String_Node_Str"";
          }
 else           if (EParameterName.DRIVER_JAR.getName().equals(paramName)) {
            return ""String_Node_Str"";
          }
 else           if (EParameterName.DRIVER_CLASS.getName().equals(paramName)) {
            return ""String_Node_Str"";
          }
        }
      }
    }
  }
  return null;
}","private String getParamNameForOldJDBC(IElementParameter param){
  String paramName=param.getName();
  if (elem instanceof Node) {
    Node node=(Node)elem;
    if (connection instanceof DatabaseConnection) {
      String databaseType=((DatabaseConnection)connection).getDatabaseType();
      if (""String_Node_Str"".equals(databaseType)) {
        IComponent component=node.getComponent();
        if (!ComponentCategory.CATEGORY_4_DI.getName().equals(component.getPaletteType()) && component.getName().startsWith(""String_Node_Str"")) {
          if (EParameterName.URL.getName().equals(paramName)) {
            return ""String_Node_Str"";
          }
 else           if (EParameterName.DRIVER_JAR.getName().equals(paramName)) {
            return ""String_Node_Str"";
          }
 else           if (EParameterName.DRIVER_CLASS.getName().equals(paramName)) {
            return ""String_Node_Str"";
          }
        }
      }
    }
  }
  return null;
}",0.9915700737618546
117872,"private Object getParamValueForOldJDBC(IElementParameter param,Object objectValue){
  String paramName=param.getName();
  if (connection instanceof DatabaseConnection) {
    String databaseType=((DatabaseConnection)connection).getDatabaseType();
    if (""String_Node_Str"".equals(databaseType)) {
      IComponent component=node.getComponent();
      if (!ComponentCategory.CATEGORY_4_DI.getName().equals(component.getComponentType()) && component.getName().startsWith(""String_Node_Str"")) {
        if (EParameterName.DRIVER_JAR.getName().equals(paramName)) {
          List valueList=(List)objectValue;
          List newValue=new ArrayList<>();
          for (          Object value : valueList) {
            if (value instanceof Map) {
              Map map=new HashMap();
              String driver=String.valueOf(((Map)value).get(""String_Node_Str""));
              MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(TalendTextUtils.removeQuotes(driver));
              if (artifact != null) {
                driver=artifact.getFileName();
              }
              map.put(""String_Node_Str"",driver);
              newValue.add(map);
            }
          }
          if (!newValue.isEmpty()) {
            objectValue=newValue;
          }
        }
      }
    }
  }
  return objectValue;
}","private Object getParamValueForOldJDBC(IElementParameter param,Object objectValue){
  String paramName=param.getName();
  if (connection instanceof DatabaseConnection) {
    String databaseType=((DatabaseConnection)connection).getDatabaseType();
    if (""String_Node_Str"".equals(databaseType)) {
      IComponent component=node.getComponent();
      if (!ComponentCategory.CATEGORY_4_DI.getName().equals(component.getPaletteType()) && component.getName().startsWith(""String_Node_Str"")) {
        if (EParameterName.DRIVER_JAR.getName().equals(paramName)) {
          List valueList=(List)objectValue;
          List newValue=new ArrayList<>();
          for (          Object value : valueList) {
            if (value instanceof Map) {
              Map map=new HashMap();
              String driver=String.valueOf(((Map)value).get(""String_Node_Str""));
              MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(TalendTextUtils.removeQuotes(driver));
              if (artifact != null) {
                driver=artifact.getFileName();
              }
              map.put(""String_Node_Str"",driver);
              newValue.add(map);
            }
          }
          if (!newValue.isEmpty()) {
            objectValue=newValue;
          }
        }
      }
    }
  }
  return objectValue;
}",0.9938556067588326
117873,"/** 
 * nrousseau Comment method ""checkNodePropertiesFromRepository"".
 * @param node
 * @return true if the data have been modified
 */
@SuppressWarnings(""String_Node_Str"") private List<UpdateResult> checkNodePropertiesFromRepository(final Node node,boolean onlySimpleShow){
  if (node == null) {
    return Collections.emptyList();
  }
  List<UpdateResult> propertiesResults=new ArrayList<UpdateResult>();
  for (  IElementParameter curPropertyParam : node.getElementParametersFromField(EParameterFieldType.PROPERTY_TYPE)) {
    String propertyType=(String)curPropertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getValue();
    if (propertyType != null) {
      if (propertyType.equals(EmfComponent.REPOSITORY)) {
        List<IProcess2> openedProcesses=UpdateManagerUtils.getOpenedProcess();
        IElementParameter repositoryPropertyParam=curPropertyParam.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        String propertyValue=(String)repositoryPropertyParam.getValue();
        if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
          if (propertyValue.contains(""String_Node_Str"")) {
            propertyValue=propertyValue.split(""String_Node_Str"")[0];
          }
        }
        IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
        UpdateCheckResult result=null;
        Connection repositoryConnection=null;
        RulesItem repositoryRulesItem=null;
        LinkRulesItem repositoryLinkRulesItem=null;
        String source=null;
        Item item=null;
        if (lastVersion != null) {
          item=lastVersion.getProperty().getItem();
          if (item != null && item instanceof ConnectionItem) {
            source=UpdateRepositoryUtils.getRepositorySourceName(item);
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
          if (item != null && item instanceof FileItem) {
            if (item instanceof RulesItem) {
              repositoryRulesItem=(RulesItem)item;
            }
          }
          if (item != null && item instanceof LinkRulesItem) {
            repositoryLinkRulesItem=(LinkRulesItem)item;
          }
        }
        if (repositoryConnection != null) {
          boolean sameValues=true;
          boolean isXsdPath=false;
          if (repositoryConnection instanceof XmlFileConnectionImpl) {
            String filePath=((XmlFileConnectionImpl)repositoryConnection).getXmlFilePath();
            if (filePath != null) {
              if (XmlUtil.isXSDFile(filePath)) {
                isXsdPath=true;
              }
            }
          }
          boolean needBuildIn=false;
          if (repositoryConnection instanceof SalesforceSchemaConnection && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName()) {
            IElementParameter param=node.getElementParameter(""String_Node_Str"");
            if (param != null) {
              boolean found=false;
              SalesforceSchemaConnection salesforceConnection=(SalesforceSchemaConnection)repositoryConnection;
              List<SalesforceModuleUnit> units=salesforceConnection.getModules();
              for (              SalesforceModuleUnit unit : units) {
                if (unit.getLabel() != null && unit.getLabel().equals(param.getValue())) {
                  found=true;
                  break;
                }
              }
              if (!found) {
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
                needBuildIn=true;
              }
            }
          }
          for (          IElementParameter param : node.getElementParameters()) {
            if (needBuildIn) {
              break;
            }
            if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.SCHEMA_REFERENCE) {
              continue;
            }
            String repositoryValue=getReposiotryValueForOldJDBC(node,repositoryConnection,param);
            String relatedComponent=node.getComponent().getName();
            if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
              if ((param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) || (repositoryConnection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue) && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName())) {
                continue;
              }
              IMetadataTable table=null;
              if (!node.getMetadataList().isEmpty()) {
                table=node.getMetadataList().get(0);
              }
              Object objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,repositoryValue,table,relatedComponent);
              if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                    if (objectValueFromESB != null) {
                      objectValue=objectValueFromESB;
                    }
                  }
                }
              }
              if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName()) && item instanceof DatabaseConnectionItem) {
                if (PluginChecker.isCDCPluginLoaded()) {
                  ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                  if (service != null) {
                    try {
                      List<IRepositoryViewObject> all;
                      all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                      for (                      IRepositoryViewObject obj : all) {
                        Item tempItem=obj.getProperty().getItem();
                        if (tempItem instanceof DatabaseConnectionItem) {
                          String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                          if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                            objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                            break;
                          }
                        }
                      }
                    }
 catch (                    PersistenceException e) {
                      ExceptionHandler.process(e);
                    }
                  }
                }
              }
              Object value=param.getValue();
              if (objectValue != null) {
                if ((param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && UpdatesConstants.TYPE.equals(param.getRepositoryValue()))) {
                  boolean found=false;
                  String[] list=param.getListRepositoryItems();
                  for (int i=0; (i < list.length) && (!found); i++) {
                    if (objectValue.equals(list[i])) {
                      found=true;
                    }
                  }
                  if (!found) {
                    sameValues=false;
                  }
                }
 else {
                  if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                    List<Map<String,Object>> oldList=(List<Map<String,Object>>)value;
                    String name=param.getName();
                    if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) && !oldList.isEmpty() && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && objectMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))&& ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null && objectValue instanceof List) {
                      List repList=(List)objectValue;
                      if (oldList.size() == repList.size()) {
                        for (                        Map<String,Object> line : oldList) {
                          final String sheetName=""String_Node_Str"";
                          Object oldValue=line.get(sheetName);
                          if (oldValue instanceof String && repList.get(0) instanceof Map) {
                            boolean found=false;
                            for (                            Map map : (List<Map>)repList) {
                              Object repValue=map.get(sheetName);
                              if (oldValue.equals(repValue)) {
                                found=true;
                                break;
                              }
                            }
                            if (!found) {
                              sameValues=false;
                              break;
                            }
                          }
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
 else                     if ((""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName()) || param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      List<Map<String,Object>> filterBuildInList=collectHadoopPropertiesList(oldList);
                      if (filterBuildInList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < filterBuildInList.size(); i++) {
                          Map<String,Object> oldMap=filterBuildInList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if ((param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null) {
                      sameValues=sameDriverForJDBC(node,repositoryConnection,oldList,objectValue);
                      if (!sameValues) {
                        break;
                      }
                    }
                  }
 else                   if (value instanceof String && objectValue instanceof String) {
                    if (!value.equals(""String_Node_Str"") && !value.equals(objectValue)) {
                      if (repositoryConnection instanceof XmlFileConnection) {
                        if ((((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"") || ((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"")) && repositoryValue.equals(""String_Node_Str"")) {
                        }
 else {
                          sameValues=false;
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
                    if (repositoryValue.equals(""String_Node_Str"")) {
                      IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
                      if (paramEncoding != null) {
                        if (repositoryConnection instanceof FTPConnection) {
                          if (((FTPConnection)repositoryConnection).getEcoding() != null) {
                            paramEncoding.setValue(((FTPConnection)repositoryConnection).getEcoding());
                          }
 else {
                            paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof Boolean && objectValue instanceof Boolean) {
                    sameValues=((Boolean)value).equals(objectValue);
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
                List<Map<String,Object>> newMaps=RepositoryToComponentProperty.getXMLMappingValue(repositoryConnection,node.getMetadataList(),getColumnRenamedMap());
                if ((value instanceof List) && newMaps != null) {
                  List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                  if (oldMaps.size() != newMaps.size()) {
                    sameValues=false;
                    break;
                  }
                  for (int i=0; i < newMaps.size() && sameValues; i++) {
                    Map<String,Object> newmap=newMaps.get(i);
                    Map<String,Object> oldmap=null;
                    if (i < oldMaps.size()) {
                      oldmap=oldMaps.get(i);
                    }
                    if (oldmap != null && sameValues) {
                      Object o=newmap.get(UpdatesConstants.QUERY);
                      if (o != null) {
                        sameValues=newmap.get(UpdatesConstants.QUERY).equals(oldmap.get(UpdatesConstants.QUERY));
                      }
 else {
                        sameValues=oldmap.get(UpdatesConstants.QUERY) == null;
                      }
                    }
                    if (newmap.get(UpdatesConstants.SCHEMA) != null) {
                      if (!newmap.get(UpdatesConstants.SCHEMA).equals(newmap.get(UpdatesConstants.SCHEMA))) {
                        oldmap=null;
                        for (int j=0; j < oldMaps.size(); j++) {
                          Map<String,Object> m=oldMaps.get(j);
                          if (newmap.get(UpdatesConstants.SCHEMA).equals(m.get(UpdatesConstants.SCHEMA))) {
                            oldmap=m;
                          }
                        }
                      }
                      if (oldmap == null) {
                        sameValues=false;
                      }
 else {
                        Object o=newmap.get(UpdatesConstants.MAPPING);
                        if (o != null) {
                          sameValues=o.equals(oldmap.get(UpdatesConstants.MAPPING));
                        }
 else {
                          sameValues=oldmap.get(UpdatesConstants.MAPPING) == null;
                        }
                      }
                    }
                    if (!sameValues) {
                      break;
                    }
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
                objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,param.getName(),node.getMetadataList().get(0));
                if (value == null) {
                  sameValues=false;
                  break;
                }
                if (objectValue == null) {
                  sameValues=false;
                  break;
                }
                List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                List repList=(List)objectValue;
                if (oldMaps.size() == repList.size()) {
                  for (                  Map<String,Object> line : oldMaps) {
                    final String sheetName=""String_Node_Str"";
                    Object oldValue=line.get(sheetName);
                    if (oldValue instanceof String && repList.get(0) instanceof String) {
                      boolean found=false;
                      for (                      String str : (List<String>)repList) {
                        Object repValue=TalendTextUtils.addQuotes(str);
                        if (oldValue.equals(repValue)) {
                          found=true;
                          break;
                        }
                      }
                      if (!found) {
                        sameValues=false;
                        break;
                      }
                    }
                  }
                }
 else {
                  sameValues=false;
                }
              }
            }
            if (!sameValues) {
              break;
            }
          }
          if (onlySimpleShow || !sameValues) {
            result=new UpdateCheckResult(node);
            result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,item,source);
          }
          for (          IElementParameter param : node.getElementParameters()) {
            String repositoryValue=param.getRepositoryValue();
            if (param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (repositoryValue != null && (!param.getName().equals(EParameterName.PROPERTY_TYPE.getName())) && param.getFieldType() != EParameterFieldType.MEMO_SQL && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue())) && !(""String_Node_Str"".equals(node.getComponent().getName()) && param.getName().equals(UpdatesConstants.MAPPING)) && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(repositoryValue)) && param.isShow(node.getElementParameters())) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
            }
          }
          List<UpdateResult> contextResults=checkParameterContextMode(node.getElementParameters(),(ConnectionItem)lastVersion.getProperty().getItem(),null);
          if (contextResults != null) {
            propertiesResults.addAll(contextResults);
          }
        }
 else         if (item != null && ""String_Node_Str"".equalsIgnoreCase(item.getFileExtension())) {
          ITDQPatternService service=null;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
            service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
          }
          if (service != null && node.getComponent().getName().startsWith(""String_Node_Str"")) {
            IElementParameter nameParam=node.getElementParameter(ITDQPatternService.PATTERN_NAME);
            if (!service.isSameName(item,(String)nameParam.getValue())) {
              String newVlaue=getItemNewName(item);
              ElementParameter newValueParameter=new ElementParameter(nameParam.getElement());
              newValueParameter.setName(nameParam.getName());
              newValueParameter.setValue(newVlaue);
              createUpdateCheckResult(node,propertiesResults,newValueParameter,openedProcesses);
            }
            String regex=service.getRegex(node,item);
            IElementParameter reParam=node.getElementParameter(ITDQPatternService.PATTERN_REGEX);
            if (!StringUtils.equals(regex,(String)reParam.getValue())) {
              ElementParameter newValueParameter=new ElementParameter(reParam.getElement());
              newValueParameter.setName(reParam.getName());
              newValueParameter.setValue(regex);
              if (result != null) {
                propertiesResults.add(result);
              }
              createUpdateCheckResult(node,propertiesResults,newValueParameter,openedProcesses);
            }
          }
        }
 else         if (item != null && item instanceof RulesItem) {
        }
 else {
          result=new UpdateCheckResult(node);
          result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
        }
        if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
          checkMultiPattern(node,propertiesResults,openedProcesses);
        }
        if (result != null) {
          if (!openedProcesses.contains(getProcess())) {
            result.setFromItem(true);
          }
          result.setJob(getProcess());
          setConfigrationForReadOnlyJob(result);
          propertiesResults.add(result);
        }
      }
    }
  }
  return propertiesResults;
}","/** 
 * nrousseau Comment method ""checkNodePropertiesFromRepository"".
 * @param node
 * @return true if the data have been modified
 */
@SuppressWarnings(""String_Node_Str"") private List<UpdateResult> checkNodePropertiesFromRepository(final Node node,boolean onlySimpleShow){
  if (node == null) {
    return Collections.emptyList();
  }
  List<UpdateResult> propertiesResults=new ArrayList<UpdateResult>();
  for (  IElementParameter curPropertyParam : node.getElementParametersFromField(EParameterFieldType.PROPERTY_TYPE)) {
    String propertyType=(String)curPropertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getValue();
    if (propertyType != null) {
      if (propertyType.equals(EmfComponent.REPOSITORY)) {
        List<IProcess2> openedProcesses=UpdateManagerUtils.getOpenedProcess();
        IElementParameter repositoryPropertyParam=curPropertyParam.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        String propertyValue=(String)repositoryPropertyParam.getValue();
        if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
          if (propertyValue.contains(""String_Node_Str"")) {
            propertyValue=propertyValue.split(""String_Node_Str"")[0];
          }
        }
        IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
        UpdateCheckResult result=null;
        Connection repositoryConnection=null;
        RulesItem repositoryRulesItem=null;
        LinkRulesItem repositoryLinkRulesItem=null;
        String source=null;
        Item item=null;
        if (lastVersion != null) {
          item=lastVersion.getProperty().getItem();
          if (item != null && item instanceof ConnectionItem) {
            source=UpdateRepositoryUtils.getRepositorySourceName(item);
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
          if (item != null && item instanceof FileItem) {
            if (item instanceof RulesItem) {
              repositoryRulesItem=(RulesItem)item;
            }
          }
          if (item != null && item instanceof LinkRulesItem) {
            repositoryLinkRulesItem=(LinkRulesItem)item;
          }
        }
        if (repositoryConnection != null) {
          boolean sameValues=true;
          boolean isXsdPath=false;
          if (repositoryConnection instanceof XmlFileConnectionImpl) {
            String filePath=((XmlFileConnectionImpl)repositoryConnection).getXmlFilePath();
            if (filePath != null) {
              if (XmlUtil.isXSDFile(filePath)) {
                isXsdPath=true;
              }
            }
          }
          boolean needBuildIn=false;
          if (repositoryConnection instanceof SalesforceSchemaConnection && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName()) {
            IElementParameter param=node.getElementParameter(""String_Node_Str"");
            if (param != null) {
              boolean found=false;
              SalesforceSchemaConnection salesforceConnection=(SalesforceSchemaConnection)repositoryConnection;
              List<SalesforceModuleUnit> units=salesforceConnection.getModules();
              for (              SalesforceModuleUnit unit : units) {
                if (unit.getLabel() != null && unit.getLabel().equals(param.getValue())) {
                  found=true;
                  break;
                }
              }
              if (!found) {
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
                needBuildIn=true;
              }
            }
          }
          for (          IElementParameter param : node.getElementParameters()) {
            if (needBuildIn) {
              break;
            }
            if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.SCHEMA_REFERENCE) {
              continue;
            }
            String repositoryValue=getReposiotryValueForOldJDBC(node,repositoryConnection,param);
            String relatedComponent=node.getComponent().getName();
            if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
              if ((param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) || (repositoryConnection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue) && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName())) {
                continue;
              }
              IMetadataTable table=null;
              if (!node.getMetadataList().isEmpty()) {
                table=node.getMetadataList().get(0);
              }
              Object objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,repositoryValue,table,relatedComponent);
              if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                    if (objectValueFromESB != null) {
                      objectValue=objectValueFromESB;
                    }
                  }
                }
              }
              if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName()) && item instanceof DatabaseConnectionItem) {
                if (PluginChecker.isCDCPluginLoaded()) {
                  ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                  if (service != null) {
                    try {
                      List<IRepositoryViewObject> all;
                      all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                      for (                      IRepositoryViewObject obj : all) {
                        Item tempItem=obj.getProperty().getItem();
                        if (tempItem instanceof DatabaseConnectionItem) {
                          String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                          if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                            objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                            break;
                          }
                        }
                      }
                    }
 catch (                    PersistenceException e) {
                      ExceptionHandler.process(e);
                    }
                  }
                }
              }
              Object value=param.getValue();
              if (objectValue != null) {
                if ((param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && UpdatesConstants.TYPE.equals(param.getRepositoryValue()))) {
                  boolean found=false;
                  String[] list=param.getListRepositoryItems();
                  for (int i=0; (i < list.length) && (!found); i++) {
                    if (objectValue.equals(list[i])) {
                      found=true;
                    }
                  }
                  if (!found) {
                    sameValues=false;
                  }
                }
 else {
                  if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                    List<Map<String,Object>> oldList=(List<Map<String,Object>>)value;
                    String name=param.getName();
                    if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) && !oldList.isEmpty() && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && objectMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))&& ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null && objectValue instanceof List) {
                      List repList=(List)objectValue;
                      if (oldList.size() == repList.size()) {
                        for (                        Map<String,Object> line : oldList) {
                          final String sheetName=""String_Node_Str"";
                          Object oldValue=line.get(sheetName);
                          if (oldValue instanceof String && repList.get(0) instanceof Map) {
                            boolean found=false;
                            for (                            Map map : (List<Map>)repList) {
                              Object repValue=map.get(sheetName);
                              if (oldValue.equals(repValue)) {
                                found=true;
                                break;
                              }
                            }
                            if (!found) {
                              sameValues=false;
                              break;
                            }
                          }
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
 else                     if ((""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName()) || param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      List<Map<String,Object>> filterBuildInList=collectHadoopPropertiesList(oldList);
                      if (filterBuildInList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < filterBuildInList.size(); i++) {
                          Map<String,Object> oldMap=filterBuildInList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if ((param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if ((param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) && oldList != null) {
                      sameValues=sameDriverForJDBC(node,repositoryConnection,oldList,objectValue);
                      if (!sameValues) {
                        break;
                      }
                    }
                  }
 else                   if (value instanceof String && objectValue instanceof String) {
                    if (!value.equals(""String_Node_Str"") && !value.equals(objectValue)) {
                      if (repositoryConnection instanceof XmlFileConnection) {
                        if ((((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"") || ((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"")) && repositoryValue.equals(""String_Node_Str"")) {
                        }
 else {
                          sameValues=false;
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
                    if (repositoryValue.equals(""String_Node_Str"")) {
                      IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
                      if (paramEncoding != null) {
                        if (repositoryConnection instanceof FTPConnection) {
                          if (((FTPConnection)repositoryConnection).getEcoding() != null) {
                            paramEncoding.setValue(((FTPConnection)repositoryConnection).getEcoding());
                          }
 else {
                            paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof Boolean && objectValue instanceof Boolean) {
                    sameValues=((Boolean)value).equals(objectValue);
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
                List<Map<String,Object>> newMaps=RepositoryToComponentProperty.getXMLMappingValue(repositoryConnection,node.getMetadataList(),getColumnRenamedMap());
                if ((value instanceof List) && newMaps != null) {
                  List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                  if (oldMaps.size() != newMaps.size()) {
                    sameValues=false;
                    break;
                  }
                  for (int i=0; i < newMaps.size() && sameValues; i++) {
                    Map<String,Object> newmap=newMaps.get(i);
                    Map<String,Object> oldmap=null;
                    if (i < oldMaps.size()) {
                      oldmap=oldMaps.get(i);
                    }
                    if (oldmap != null && sameValues) {
                      Object o=newmap.get(UpdatesConstants.QUERY);
                      if (o != null) {
                        sameValues=newmap.get(UpdatesConstants.QUERY).equals(oldmap.get(UpdatesConstants.QUERY));
                      }
 else {
                        sameValues=oldmap.get(UpdatesConstants.QUERY) == null;
                      }
                    }
                    if (newmap.get(UpdatesConstants.SCHEMA) != null) {
                      if (!newmap.get(UpdatesConstants.SCHEMA).equals(newmap.get(UpdatesConstants.SCHEMA))) {
                        oldmap=null;
                        for (int j=0; j < oldMaps.size(); j++) {
                          Map<String,Object> m=oldMaps.get(j);
                          if (newmap.get(UpdatesConstants.SCHEMA).equals(m.get(UpdatesConstants.SCHEMA))) {
                            oldmap=m;
                          }
                        }
                      }
                      if (oldmap == null) {
                        sameValues=false;
                      }
 else {
                        Object o=newmap.get(UpdatesConstants.MAPPING);
                        if (o != null) {
                          sameValues=o.equals(oldmap.get(UpdatesConstants.MAPPING));
                        }
 else {
                          sameValues=oldmap.get(UpdatesConstants.MAPPING) == null;
                        }
                      }
                    }
                    if (!sameValues) {
                      break;
                    }
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
                objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,param.getName(),node.getMetadataList().get(0));
                if (value == null) {
                  sameValues=false;
                  break;
                }
                if (objectValue == null) {
                  sameValues=false;
                  break;
                }
                List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                List repList=(List)objectValue;
                if (oldMaps.size() == repList.size()) {
                  for (                  Map<String,Object> line : oldMaps) {
                    final String sheetName=""String_Node_Str"";
                    Object oldValue=line.get(sheetName);
                    if (oldValue instanceof String && repList.get(0) instanceof String) {
                      boolean found=false;
                      for (                      String str : (List<String>)repList) {
                        Object repValue=TalendTextUtils.addQuotes(str);
                        if (oldValue.equals(repValue)) {
                          found=true;
                          break;
                        }
                      }
                      if (!found) {
                        sameValues=false;
                        break;
                      }
                    }
                  }
                }
 else {
                  sameValues=false;
                }
              }
            }
            if (!sameValues) {
              break;
            }
          }
          if (onlySimpleShow || !sameValues) {
            result=new UpdateCheckResult(node);
            result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,item,source);
          }
          for (          IElementParameter param : node.getElementParameters()) {
            String repositoryValue=param.getRepositoryValue();
            if (param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (repositoryValue != null && (!param.getName().equals(EParameterName.PROPERTY_TYPE.getName())) && param.getFieldType() != EParameterFieldType.MEMO_SQL && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue())) && !(""String_Node_Str"".equals(node.getComponent().getName()) && param.getName().equals(UpdatesConstants.MAPPING)) && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(repositoryValue)) && param.isShow(node.getElementParameters())) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
            }
          }
          List<UpdateResult> contextResults=checkParameterContextMode(node.getElementParameters(),(ConnectionItem)lastVersion.getProperty().getItem(),null);
          if (contextResults != null) {
            propertiesResults.addAll(contextResults);
          }
        }
 else         if (item != null && ""String_Node_Str"".equalsIgnoreCase(item.getFileExtension())) {
          ITDQPatternService service=null;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
            service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
          }
          if (service != null && node.getComponent().getName().startsWith(""String_Node_Str"")) {
            IElementParameter nameParam=node.getElementParameter(ITDQPatternService.PATTERN_NAME);
            if (!service.isSameName(item,(String)nameParam.getValue())) {
              String newVlaue=getItemNewName(item);
              ElementParameter newValueParameter=new ElementParameter(nameParam.getElement());
              newValueParameter.setName(nameParam.getName());
              newValueParameter.setValue(newVlaue);
              createUpdateCheckResult(node,propertiesResults,newValueParameter,openedProcesses);
            }
            String regex=service.getRegex(node,item);
            IElementParameter reParam=node.getElementParameter(ITDQPatternService.PATTERN_REGEX);
            if (!StringUtils.equals(regex,(String)reParam.getValue())) {
              ElementParameter newValueParameter=new ElementParameter(reParam.getElement());
              newValueParameter.setName(reParam.getName());
              newValueParameter.setValue(regex);
              if (result != null) {
                propertiesResults.add(result);
              }
              createUpdateCheckResult(node,propertiesResults,newValueParameter,openedProcesses);
            }
          }
        }
 else         if (item != null && item instanceof RulesItem) {
        }
 else {
          result=new UpdateCheckResult(node);
          result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
        }
        if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
          checkMultiPattern(node,propertiesResults,openedProcesses);
        }
        if (result != null) {
          if (!openedProcesses.contains(getProcess())) {
            result.setFromItem(true);
          }
          result.setJob(getProcess());
          setConfigrationForReadOnlyJob(result);
          propertiesResults.add(result);
        }
      }
    }
  }
  return propertiesResults;
}",0.9990023137829288
117874,"private boolean sameDriverForJDBC(Node node,Connection repositoryConnection,List<Map<String,Object>> oldList,Object objectValue){
  boolean sameValues=true;
  List objectList=(List)objectValue;
  if (oldList.size() != objectList.size()) {
    sameValues=false;
  }
 else {
    if (isOldJDBC(node,repositoryConnection)) {
      for (int i=0; i < oldList.size(); i++) {
        Map<String,Object> oldMap=oldList.get(i);
        Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
        String driver=String.valueOf(objectMap.get(""String_Node_Str""));
        if (driver != null) {
          MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(TalendTextUtils.removeQuotes(driver));
          if (artifact != null) {
            driver=artifact.getFileName();
          }
        }
        if (oldMap.get(""String_Node_Str"").equals(driver)) {
          sameValues=true;
        }
 else {
          sameValues=false;
          break;
        }
      }
    }
 else {
      for (int i=0; i < oldList.size(); i++) {
        Map<String,Object> oldMap=oldList.get(i);
        Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
        if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
          sameValues=true;
        }
 else {
          sameValues=false;
          break;
        }
      }
    }
  }
  return sameValues;
}","private boolean sameDriverForJDBC(Node node,Connection repositoryConnection,List<Map<String,Object>> oldList,Object objectValue){
  boolean sameValues=true;
  List objectList=(List)objectValue;
  if (oldList.size() != objectList.size()) {
    sameValues=false;
  }
 else {
    String nodeParamDriverKey=null;
    if (isOldJDBC(node,repositoryConnection)) {
      nodeParamDriverKey=""String_Node_Str"";
    }
 else {
      nodeParamDriverKey=""String_Node_Str"";
    }
    for (int i=0; i < oldList.size(); i++) {
      Map<String,Object> oldMap=oldList.get(i);
      Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
      String driver=String.valueOf(objectMap.get(""String_Node_Str""));
      if (driver != null) {
        MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(TalendTextUtils.removeQuotes(driver));
        if (artifact != null) {
          driver=artifact.getFileName();
        }
      }
      if (oldMap.get(nodeParamDriverKey).equals(driver)) {
        sameValues=true;
      }
 else {
        sameValues=false;
        break;
      }
    }
  }
  return sameValues;
}",0.751818916734034
117875,"private boolean isOldJDBC(Node node,Connection repositoryConnection){
  boolean isOldJDBC=false;
  if (repositoryConnection instanceof DatabaseConnection) {
    String databaseType=((DatabaseConnection)repositoryConnection).getDatabaseType();
    if (""String_Node_Str"".equals(databaseType)) {
      IComponent component=node.getComponent();
      if (!ComponentCategory.CATEGORY_4_DI.getName().equals(component.getComponentType()) && component.getName().startsWith(""String_Node_Str"")) {
        isOldJDBC=true;
      }
    }
  }
  return isOldJDBC;
}","private boolean isOldJDBC(Node node,Connection repositoryConnection){
  boolean isOldJDBC=false;
  if (repositoryConnection instanceof DatabaseConnection) {
    String databaseType=((DatabaseConnection)repositoryConnection).getDatabaseType();
    if (""String_Node_Str"".equals(databaseType)) {
      IComponent component=node.getComponent();
      if (!ComponentCategory.CATEGORY_4_DI.getName().equals(component.getPaletteType()) && component.getName().startsWith(""String_Node_Str"")) {
        isOldJDBC=true;
      }
    }
  }
  return isOldJDBC;
}",0.9854280510018216
117876,"private String getReposiotryValueForOldJDBC(Node node,Connection repositoryConnection,IElementParameter param){
  String repositoryValue=param.getRepositoryValue();
  if (repositoryConnection instanceof DatabaseConnection) {
    String databaseType=((DatabaseConnection)repositoryConnection).getDatabaseType();
    if (""String_Node_Str"".equals(databaseType)) {
      IComponent component=node.getComponent();
      if (!ComponentCategory.CATEGORY_4_DI.getName().equals(component.getComponentType()) && component.getName().startsWith(""String_Node_Str"")) {
        if (EParameterName.URL.getName().equals(repositoryValue)) {
          repositoryValue=""String_Node_Str"";
        }
 else         if (EParameterName.DRIVER_JAR.getName().equals(repositoryValue)) {
          repositoryValue=""String_Node_Str"";
        }
 else         if (EParameterName.DRIVER_CLASS.getName().equals(repositoryValue)) {
          repositoryValue=""String_Node_Str"";
        }
      }
    }
  }
  return repositoryValue;
}","private String getReposiotryValueForOldJDBC(Node node,Connection repositoryConnection,IElementParameter param){
  String repositoryValue=param.getRepositoryValue();
  if (repositoryConnection instanceof DatabaseConnection) {
    String databaseType=((DatabaseConnection)repositoryConnection).getDatabaseType();
    if (""String_Node_Str"".equals(databaseType)) {
      IComponent component=node.getComponent();
      if (!ComponentCategory.CATEGORY_4_DI.getName().equals(component.getPaletteType()) && component.getName().startsWith(""String_Node_Str"")) {
        if (EParameterName.URL.getName().equals(repositoryValue)) {
          repositoryValue=""String_Node_Str"";
        }
 else         if (EParameterName.DRIVER_JAR.getName().equals(repositoryValue)) {
          repositoryValue=""String_Node_Str"";
        }
 else         if (EParameterName.DRIVER_CLASS.getName().equals(repositoryValue)) {
          repositoryValue=""String_Node_Str"";
        }
      }
    }
  }
  return repositoryValue;
}",0.9919678714859438
117877,"@SuppressWarnings(""String_Node_Str"") private void updateProperty(){
  Object updateObject=result.getUpdateObject();
  if (updateObject == null) {
    return;
  }
  if (updateObject instanceof Node) {
    Node node=(Node)updateObject;
    boolean update=false;
    boolean isXsdPath=false;
    Object parameter=result.getParameter();
    IElementParameter curPropertyParam=null;
    String parentParamName=""String_Node_Str"";
    ConnectionItem connectionItem=null;
    if (parameter instanceof ConnectionItem) {
      if (parameter instanceof XmlFileConnectionItem) {
        String filePath=((XmlFileConnection)((XmlFileConnectionItem)parameter).getConnection()).getXmlFilePath();
        if (filePath != null) {
          if (XmlUtil.isXSDFile(filePath)) {
            isXsdPath=true;
          }
        }
      }
      connectionItem=(ConnectionItem)result.getParameter();
      for (      IElementParameter param : node.getElementParameters()) {
        if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE && param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName()).getValue().equals(connectionItem.getProperty().getId())) {
          curPropertyParam=param;
          parentParamName=curPropertyParam.getName();
          if (connectionItem != null) {
            ConnectionContextHelper.addContextForNodeParameter(node,connectionItem,false);
          }
          break;
        }
      }
    }
    if (result.getResultType() == EUpdateResult.UPDATE) {
      if (result.isChecked() && connectionItem != null) {
        List<? extends IElementParameter> elemParameters=new ArrayList<>(node.getElementParameters());
        for (        IElementParameter param : elemParameters) {
          String repositoryValue=getReposiotryValueForOldJDBC(node,connectionItem.getConnection(),param);
          if (param.getRepositoryValue() == null || (curPropertyParam != null && param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName()))) {
            continue;
          }
          if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
            continue;
          }
          if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || node.getComponentProperties() != null || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
            if (param.getName().equals(EParameterName.PROPERTY_TYPE.getName()) || param.getFieldType() == EParameterFieldType.MEMO_SQL) {
              continue;
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) {
              continue;
            }
            IMetadataTable table=null;
            if (!node.getMetadataList().isEmpty()) {
              table=node.getMetadataList().get(0);
            }
            Object objectValue=RepositoryToComponentProperty.getValue(connectionItem.getConnection(),repositoryValue,table);
            if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
                  if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
                    if (propertyValue.contains(""String_Node_Str"")) {
                      propertyValue=propertyValue.split(""String_Node_Str"")[0];
                    }
                  }
                  IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
                  if (lastVersion != null) {
                    Item item=lastVersion.getProperty().getItem();
                    if (item != null) {
                      Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                      if (objectValueFromESB != null) {
                        objectValue=objectValueFromESB;
                      }
                    }
                  }
                }
              }
            }
            if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName())) {
              String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
              Item item=null;
              IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
              if (lastVersion != null) {
                item=lastVersion.getProperty().getItem();
              }
              if (item != null && PluginChecker.isCDCPluginLoaded()) {
                ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                if (service != null) {
                  try {
                    List<IRepositoryViewObject> all;
                    all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                    for (                    IRepositoryViewObject obj : all) {
                      Item tempItem=obj.getProperty().getItem();
                      if (tempItem instanceof DatabaseConnectionItem) {
                        String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                        if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                          objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                        }
                      }
                    }
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IJsonFileService.class)) {
              IJsonFileService jsonService=(IJsonFileService)GlobalServiceRegister.getDefault().getService(IJsonFileService.class);
              boolean paramChanged=jsonService.changeFilePathFromRepository(connectionItem.getConnection(),param,node,objectValue);
              if (paramChanged) {
                continue;
              }
            }
            if (objectValue != null) {
              if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && repositoryValue.equals(UpdatesConstants.TYPE)) {
                boolean found=false;
                String[] items=param.getListRepositoryItems();
                for (int i=0; (i < items.length) && (!found); i++) {
                  if (objectValue.equals(items[i])) {
                    found=true;
                    node.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
                  }
                }
              }
 else {
                if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                  String name=param.getName();
                  if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") && objectValue instanceof List) {
                    param.setValue(objectValue);
                  }
 else                   if (param.getName().equals(""String_Node_Str"") && objectValue instanceof List) {
                    List<Map<String,Object>> paramMaps=(List<Map<String,Object>>)param.getValue();
                    if (paramMaps == null) {
                      paramMaps=new ArrayList<Map<String,Object>>();
                      node.setPropertyValue(param.getName(),paramMaps);
                    }
 else {
                      List<Map<String,Object>> objectValueList=(List<Map<String,Object>>)objectValue;
                      if (paramMaps.size() < objectValueList.size()) {
                        paramMaps.clear();
                        for (int i=0; i < objectValueList.size(); i++) {
                          Map<String,Object> map=objectValueList.get(i);
                          paramMaps.add(map);
                        }
                      }
 else {
                        String value=null;
                        List<String> repNames=new ArrayList<String>();
                        for (int i=0; i < objectValueList.size(); i++) {
                          repNames.add(objectValueList.get(i).get(""String_Node_Str"").toString());
                        }
                        for (int j=0; j < paramMaps.size(); j++) {
                          Map<String,Object> map=paramMaps.get(j);
                          value=map.get(""String_Node_Str"").toString();
                          if (!repNames.contains(value)) {
                            paramMaps.remove(j);
                          }
                        }
                      }
                    }
                  }
 else                   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"") && objectValue instanceof List)) {
                    List<HashMap<String,Object>> oldValue=(List<HashMap<String,Object>>)param.getValue();
                    for (                    HashMap<String,Object> map : oldValue) {
                      if (map.get(""String_Node_Str"") != null && !map.get(""String_Node_Str"").equals(""String_Node_Str"") && Boolean.valueOf(String.valueOf(map.get(""String_Node_Str"")))) {
                        ((List<HashMap<String,Object>>)objectValue).add(map);
                      }
                    }
                    param.setValue(objectValue);
                  }
 else                   if (param.getName().equals(""String_Node_Str"") && objectValue instanceof List) {
                    List valueList=(List)objectValue;
                    List newValue=new ArrayList<>();
                    for (                    Object value : valueList) {
                      if (value instanceof Map) {
                        Map map=new HashMap();
                        String driver=String.valueOf(((Map)value).get(""String_Node_Str""));
                        MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(TalendTextUtils.removeQuotesIfExist(driver));
                        if (artifact != null) {
                          driver=artifact.getFileName();
                        }
                        map.put(""String_Node_Str"",driver);
                        newValue.add(map);
                      }
                    }
                    if (!newValue.isEmpty()) {
                      objectValue=newValue;
                    }
                    param.setValue(objectValue);
                  }
                }
 else {
                  node.setPropertyValue(param.getName(),objectValue);
                }
              }
            }
 else             if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
              RepositoryToComponentProperty.getTableXMLMappingValue(connectionItem.getConnection(),(List<Map<String,Object>>)param.getValue(),node);
            }
 else             if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
              objectValue=RepositoryToComponentProperty.getValue(connectionItem.getConnection(),""String_Node_Str"",node.getMetadataList().get(0));
              List<Map<String,Object>> paramMaps=(List<Map<String,Object>>)param.getValue();
              if (paramMaps == null) {
                paramMaps=new ArrayList<Map<String,Object>>();
              }
 else {
                paramMaps.clear();
              }
              if (objectValue != null) {
                List<String> objectValueList=(List<String>)objectValue;
                for (int i=0; i < objectValueList.size(); i++) {
                  Map<String,Object> map=new HashedMap();
                  map.put(""String_Node_Str"",TalendTextUtils.addQuotes(objectValueList.get(i)));
                  paramMaps.add(map);
                }
              }
            }
 else             if (node.getComponentProperties() != null && objectValue == null) {
              node.setPropertyValue(param.getName(),objectValue);
            }
            if (!(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue()))) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
              update=true;
            }
          }
        }
      }
 else {
        ITDQPatternService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
          service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
        }
        if (service != null && (service.isSinglePatternNode(node) || service.isMultiPatternNode(node)) && parameter != null && parameter instanceof IElementParameter) {
          IElementParameter elementParameter=node.getElementParameter(((IElementParameter)parameter).getName());
          if (elementParameter != null && !elementParameter.getValue().equals(((IElementParameter)parameter).getValue())) {
            elementParameter.setValue(((IElementParameter)parameter).getValue());
          }
 else           if (""String_Node_Str"".equals(((IElementParameter)parameter).getName())) {
            if (elementParameter != null) {
              elementParameter.setValue(((IElementParameter)parameter).getValue());
            }
          }
          update=true;
          Object regexValue=null;
          Object parameterValue=((IElementParameter)parameter).getValue();
          if (""String_Node_Str"".equals(((IElementParameter)parameter).getName())) {
            regexValue=parameterValue;
          }
 else           if (""String_Node_Str"".equals(((IElementParameter)parameter).getName())) {
            List<Map<String,String>> multiPatternList=((List<Map<String,String>>)parameterValue);
            for (            Map<String,String> patternMap : multiPatternList) {
              regexValue=patternMap.get(""String_Node_Str"");
              if (regexValue == null) {
                patternMap.put(""String_Node_Str"",EmfComponent.BUILTIN);
              }
            }
          }
          if (regexValue == null || regexValue.toString().isEmpty()) {
            update=false;
          }
        }
      }
    }
    if (!update) {
      String propertyName=parentParamName + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName();
      if (this.result.getParameter() instanceof IElementParameter) {
        IElementParameter parentParam=((IElementParameter)this.result.getParameter()).getParentParameter();
        if (parentParam != null) {
          parentParamName=parentParam.getName();
          propertyName=parentParam.getName() + ""String_Node_Str"" + parentParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getName();
        }
      }
      node.setPropertyValue(propertyName,EmfComponent.BUILTIN);
      for (      IElementParameter param : node.getElementParameters()) {
        if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(parentParamName)) {
          continue;
        }
        if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
          continue;
        }
        if (param.isShow(node.getElementParameters())) {
          if (param.getName().equals(EParameterName.PROPERTY_TYPE.getName()) || param.getFieldType() == EParameterFieldType.MEMO_SQL) {
            continue;
          }
          param.setRepositoryValueUsed(false);
          param.setReadOnly(false);
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void updateProperty(){
  Object updateObject=result.getUpdateObject();
  if (updateObject == null) {
    return;
  }
  if (updateObject instanceof Node) {
    Node node=(Node)updateObject;
    boolean update=false;
    boolean isXsdPath=false;
    Object parameter=result.getParameter();
    IElementParameter curPropertyParam=null;
    String parentParamName=""String_Node_Str"";
    ConnectionItem connectionItem=null;
    if (parameter instanceof ConnectionItem) {
      if (parameter instanceof XmlFileConnectionItem) {
        String filePath=((XmlFileConnection)((XmlFileConnectionItem)parameter).getConnection()).getXmlFilePath();
        if (filePath != null) {
          if (XmlUtil.isXSDFile(filePath)) {
            isXsdPath=true;
          }
        }
      }
      connectionItem=(ConnectionItem)result.getParameter();
      for (      IElementParameter param : node.getElementParameters()) {
        if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE && param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName()).getValue().equals(connectionItem.getProperty().getId())) {
          curPropertyParam=param;
          parentParamName=curPropertyParam.getName();
          if (connectionItem != null) {
            ConnectionContextHelper.addContextForNodeParameter(node,connectionItem,false);
          }
          break;
        }
      }
    }
    if (result.getResultType() == EUpdateResult.UPDATE) {
      if (result.isChecked() && connectionItem != null) {
        List<? extends IElementParameter> elemParameters=new ArrayList<>(node.getElementParameters());
        for (        IElementParameter param : elemParameters) {
          String repositoryValue=getReposiotryValueForOldJDBC(node,connectionItem.getConnection(),param);
          if (param.getRepositoryValue() == null || (curPropertyParam != null && param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName()))) {
            continue;
          }
          if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
            continue;
          }
          if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || node.getComponentProperties() != null || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
            if (param.getName().equals(EParameterName.PROPERTY_TYPE.getName()) || param.getFieldType() == EParameterFieldType.MEMO_SQL) {
              continue;
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) {
              continue;
            }
            IMetadataTable table=null;
            if (!node.getMetadataList().isEmpty()) {
              table=node.getMetadataList().get(0);
            }
            Object objectValue=RepositoryToComponentProperty.getValue(connectionItem.getConnection(),repositoryValue,table);
            if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
                  if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
                    if (propertyValue.contains(""String_Node_Str"")) {
                      propertyValue=propertyValue.split(""String_Node_Str"")[0];
                    }
                  }
                  IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
                  if (lastVersion != null) {
                    Item item=lastVersion.getProperty().getItem();
                    if (item != null) {
                      Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                      if (objectValueFromESB != null) {
                        objectValue=objectValueFromESB;
                      }
                    }
                  }
                }
              }
            }
            if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName())) {
              String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
              Item item=null;
              IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
              if (lastVersion != null) {
                item=lastVersion.getProperty().getItem();
              }
              if (item != null && PluginChecker.isCDCPluginLoaded()) {
                ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                if (service != null) {
                  try {
                    List<IRepositoryViewObject> all;
                    all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                    for (                    IRepositoryViewObject obj : all) {
                      Item tempItem=obj.getProperty().getItem();
                      if (tempItem instanceof DatabaseConnectionItem) {
                        String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                        if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                          objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                        }
                      }
                    }
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IJsonFileService.class)) {
              IJsonFileService jsonService=(IJsonFileService)GlobalServiceRegister.getDefault().getService(IJsonFileService.class);
              boolean paramChanged=jsonService.changeFilePathFromRepository(connectionItem.getConnection(),param,node,objectValue);
              if (paramChanged) {
                continue;
              }
            }
            if (objectValue != null) {
              if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && repositoryValue.equals(UpdatesConstants.TYPE)) {
                boolean found=false;
                String[] items=param.getListRepositoryItems();
                for (int i=0; (i < items.length) && (!found); i++) {
                  if (objectValue.equals(items[i])) {
                    found=true;
                    node.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
                  }
                }
              }
 else {
                if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                  String name=param.getName();
                  if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") && objectValue instanceof List) {
                    param.setValue(objectValue);
                  }
 else                   if (param.getName().equals(""String_Node_Str"") && objectValue instanceof List) {
                    List<Map<String,Object>> paramMaps=(List<Map<String,Object>>)param.getValue();
                    if (paramMaps == null) {
                      paramMaps=new ArrayList<Map<String,Object>>();
                      node.setPropertyValue(param.getName(),paramMaps);
                    }
 else {
                      List<Map<String,Object>> objectValueList=(List<Map<String,Object>>)objectValue;
                      if (paramMaps.size() < objectValueList.size()) {
                        paramMaps.clear();
                        for (int i=0; i < objectValueList.size(); i++) {
                          Map<String,Object> map=objectValueList.get(i);
                          paramMaps.add(map);
                        }
                      }
 else {
                        String value=null;
                        List<String> repNames=new ArrayList<String>();
                        for (int i=0; i < objectValueList.size(); i++) {
                          repNames.add(objectValueList.get(i).get(""String_Node_Str"").toString());
                        }
                        for (int j=0; j < paramMaps.size(); j++) {
                          Map<String,Object> map=paramMaps.get(j);
                          value=map.get(""String_Node_Str"").toString();
                          if (!repNames.contains(value)) {
                            paramMaps.remove(j);
                          }
                        }
                      }
                    }
                  }
 else                   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"") && objectValue instanceof List)) {
                    List<HashMap<String,Object>> oldValue=(List<HashMap<String,Object>>)param.getValue();
                    for (                    HashMap<String,Object> map : oldValue) {
                      if (map.get(""String_Node_Str"") != null && !map.get(""String_Node_Str"").equals(""String_Node_Str"") && Boolean.valueOf(String.valueOf(map.get(""String_Node_Str"")))) {
                        ((List<HashMap<String,Object>>)objectValue).add(map);
                      }
                    }
                    param.setValue(objectValue);
                  }
 else                   if ((param.getName().equals(""String_Node_Str"") && objectValue instanceof List)) {
                    List valueList=(List)objectValue;
                    List newValue=new ArrayList<>();
                    for (                    Object value : valueList) {
                      if (value instanceof Map) {
                        Map map=new HashMap();
                        String driver=String.valueOf(((Map)value).get(""String_Node_Str""));
                        MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(TalendTextUtils.removeQuotesIfExist(driver));
                        if (artifact != null) {
                          driver=artifact.getFileName();
                        }
                        map.put(""String_Node_Str"",driver);
                        newValue.add(map);
                      }
                    }
                    if (!newValue.isEmpty()) {
                      objectValue=newValue;
                    }
                    param.setValue(objectValue);
                  }
 else {
                    param.setValue(objectValue);
                  }
                }
 else {
                  node.setPropertyValue(param.getName(),objectValue);
                }
              }
            }
 else             if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
              RepositoryToComponentProperty.getTableXMLMappingValue(connectionItem.getConnection(),(List<Map<String,Object>>)param.getValue(),node);
            }
 else             if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
              objectValue=RepositoryToComponentProperty.getValue(connectionItem.getConnection(),""String_Node_Str"",node.getMetadataList().get(0));
              List<Map<String,Object>> paramMaps=(List<Map<String,Object>>)param.getValue();
              if (paramMaps == null) {
                paramMaps=new ArrayList<Map<String,Object>>();
              }
 else {
                paramMaps.clear();
              }
              if (objectValue != null) {
                List<String> objectValueList=(List<String>)objectValue;
                for (int i=0; i < objectValueList.size(); i++) {
                  Map<String,Object> map=new HashedMap();
                  map.put(""String_Node_Str"",TalendTextUtils.addQuotes(objectValueList.get(i)));
                  paramMaps.add(map);
                }
              }
            }
 else             if (node.getComponentProperties() != null && objectValue == null) {
              node.setPropertyValue(param.getName(),objectValue);
            }
            if (!(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue()))) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
              update=true;
            }
          }
        }
      }
 else {
        ITDQPatternService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
          service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
        }
        if (service != null && (service.isSinglePatternNode(node) || service.isMultiPatternNode(node)) && parameter != null && parameter instanceof IElementParameter) {
          IElementParameter elementParameter=node.getElementParameter(((IElementParameter)parameter).getName());
          if (elementParameter != null && !elementParameter.getValue().equals(((IElementParameter)parameter).getValue())) {
            elementParameter.setValue(((IElementParameter)parameter).getValue());
          }
 else           if (""String_Node_Str"".equals(((IElementParameter)parameter).getName())) {
            if (elementParameter != null) {
              elementParameter.setValue(((IElementParameter)parameter).getValue());
            }
          }
          update=true;
          Object regexValue=null;
          Object parameterValue=((IElementParameter)parameter).getValue();
          if (""String_Node_Str"".equals(((IElementParameter)parameter).getName())) {
            regexValue=parameterValue;
          }
 else           if (""String_Node_Str"".equals(((IElementParameter)parameter).getName())) {
            List<Map<String,String>> multiPatternList=((List<Map<String,String>>)parameterValue);
            for (            Map<String,String> patternMap : multiPatternList) {
              regexValue=patternMap.get(""String_Node_Str"");
              if (regexValue == null) {
                patternMap.put(""String_Node_Str"",EmfComponent.BUILTIN);
              }
            }
          }
          if (regexValue == null || regexValue.toString().isEmpty()) {
            update=false;
          }
        }
      }
    }
    if (!update) {
      String propertyName=parentParamName + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName();
      if (this.result.getParameter() instanceof IElementParameter) {
        IElementParameter parentParam=((IElementParameter)this.result.getParameter()).getParentParameter();
        if (parentParam != null) {
          parentParamName=parentParam.getName();
          propertyName=parentParam.getName() + ""String_Node_Str"" + parentParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getName();
        }
      }
      node.setPropertyValue(propertyName,EmfComponent.BUILTIN);
      for (      IElementParameter param : node.getElementParameters()) {
        if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(parentParamName)) {
          continue;
        }
        if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
          continue;
        }
        if (param.isShow(node.getElementParameters())) {
          if (param.getName().equals(EParameterName.PROPERTY_TYPE.getName()) || param.getFieldType() == EParameterFieldType.MEMO_SQL) {
            continue;
          }
          param.setRepositoryValueUsed(false);
          param.setReadOnly(false);
        }
      }
    }
  }
}",0.9975426918411148
117878,"private static void getModulesInTable(final IProcess process,IElementParameter curParam,List<ModuleNeeded> modulesNeeded){
  if (!(curParam.getValue() instanceof List)) {
    return;
  }
  List<Map<String,Object>> values=(List<Map<String,Object>>)curParam.getValue();
  if (values != null && !values.isEmpty()) {
    Object[] listItemsValue=curParam.getListItemsValue();
    if (listItemsValue != null && listItemsValue.length > 0 && listItemsValue[0] instanceof IElementParameter) {
      for (      Object o : listItemsValue) {
        IElementParameter param=(IElementParameter)o;
        if (param.getFieldType() == EParameterFieldType.MODULE_LIST) {
          for (          Map<String,Object> line : values) {
            String moduleName=(String)line.get(param.getName());
            if (moduleName != null && !""String_Node_Str"".equals(moduleName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(moduleName);
              if (isContextMode) {
                List<IContext> listContext=process.getContextManager().getListContext();
                for (                IContext context : listContext) {
                  List<IContextParameter> contextParameterList=context.getContextParameterList();
                  for (                  IContextParameter contextPara : contextParameterList) {
                    String var=ContextParameterUtils.getVariableFromCode(moduleName);
                    if (var.equals(contextPara.getName())) {
                      String value=context.getContextParameter(contextPara.getName()).getValue();
                      if (curParam.getName().equals(EParameterName.DRIVER_JAR.getName()) && value.contains(""String_Node_Str"")) {
                        String[] jars=value.split(""String_Node_Str"");
                        for (                        String jar2 : jars) {
                          String jar=jar2;
                          jar=jar.substring(jar.lastIndexOf(""String_Node_Str"") + 1);
                          ModuleNeeded module=new ModuleNeeded(null,jar,null,true);
                          modulesNeeded.add(module);
                        }
                      }
                      if (curParam.getName().equals(""String_Node_Str"") && value.contains(""String_Node_Str"")) {
                        String[] jars=value.split(""String_Node_Str"");
                        for (                        String jar2 : jars) {
                          String jar=jar2;
                          jar=jar.substring(jar.lastIndexOf(""String_Node_Str"") + 1);
                          ModuleNeeded module=new ModuleNeeded(null,jar,null,true);
                          modulesNeeded.add(module);
                        }
                      }
 else {
                        value=value.substring(value.lastIndexOf(""String_Node_Str"") + 1);
                        ModuleNeeded module=new ModuleNeeded(null,value,null,true);
                        modulesNeeded.add(module);
                      }
                    }
                  }
                }
              }
 else {
                ModuleNeeded mn=getModuleValue(process,moduleName);
                if (line.get(""String_Node_Str"") != null) {
                  String a=moduleName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
                  mn.setMavenUri(""String_Node_Str"" + a + ""String_Node_Str""+ line.get(""String_Node_Str"")+ ""String_Node_Str"");
                }
                modulesNeeded.add(mn);
              }
            }
          }
        }
      }
    }
  }
}","private static void getModulesInTable(final IProcess process,IElementParameter curParam,List<ModuleNeeded> modulesNeeded){
  if (!(curParam.getValue() instanceof List)) {
    return;
  }
  List<Map<String,Object>> values=(List<Map<String,Object>>)curParam.getValue();
  if (values != null && !values.isEmpty()) {
    Object[] listItemsValue=curParam.getListItemsValue();
    if (listItemsValue != null && listItemsValue.length > 0 && listItemsValue[0] instanceof IElementParameter) {
      for (      Object o : listItemsValue) {
        IElementParameter param=(IElementParameter)o;
        if (param.getFieldType() == EParameterFieldType.MODULE_LIST) {
          for (          Map<String,Object> line : values) {
            String moduleName=(String)line.get(param.getName());
            if (moduleName != null && !""String_Node_Str"".equals(moduleName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(moduleName);
              if (isContextMode) {
                List<IContext> listContext=process.getContextManager().getListContext();
                for (                IContext context : listContext) {
                  List<IContextParameter> contextParameterList=context.getContextParameterList();
                  for (                  IContextParameter contextPara : contextParameterList) {
                    String var=ContextParameterUtils.getVariableFromCode(moduleName);
                    if (var.equals(contextPara.getName())) {
                      String value=context.getContextParameter(contextPara.getName()).getValue();
                      if (curParam.getName().equals(EParameterName.DRIVER_JAR.getName()) && value.contains(""String_Node_Str"")) {
                        String[] jars=value.split(""String_Node_Str"");
                        for (                        String jar2 : jars) {
                          String jar=jar2;
                          jar=jar.substring(jar.lastIndexOf(""String_Node_Str"") + 1);
                          ModuleNeeded module=new ModuleNeeded(null,TalendTextUtils.removeQuotes(jar),null,true);
                          modulesNeeded.add(module);
                        }
                      }
 else                       if (curParam.getName().equals(""String_Node_Str"") && value.contains(""String_Node_Str"")) {
                        String[] jars=value.split(""String_Node_Str"");
                        for (                        String jar2 : jars) {
                          String jar=jar2;
                          jar=jar.substring(jar.lastIndexOf(""String_Node_Str"") + 1);
                          ModuleNeeded module=new ModuleNeeded(null,TalendTextUtils.removeQuotes(jar),null,true);
                          modulesNeeded.add(module);
                        }
                      }
 else {
                        value=value.substring(value.lastIndexOf(""String_Node_Str"") + 1);
                        ModuleNeeded module=new ModuleNeeded(null,TalendTextUtils.removeQuotes(value),null,true);
                        modulesNeeded.add(module);
                      }
                    }
                  }
                }
              }
 else {
                ModuleNeeded mn=getModuleValue(process,moduleName);
                if (line.get(""String_Node_Str"") != null) {
                  String a=moduleName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
                  mn.setMavenUri(""String_Node_Str"" + a + ""String_Node_Str""+ line.get(""String_Node_Str"")+ ""String_Node_Str"");
                }
                modulesNeeded.add(mn);
              }
            }
          }
        }
      }
    }
  }
}",0.9855835874688108
117879,"/** 
 * Launch the process.
 */
public void exec(final Shell shell){
  if (process instanceof org.talend.designer.core.ui.editor.process.Process) {
    org.talend.designer.core.ui.editor.process.Process prs=(org.talend.designer.core.ui.editor.process.Process)process;
    prs.checkDifferenceWithRepository();
  }
  checkTraces();
  if (ProcessContextComposite.promptConfirmLauch(shell,getSelectedContext(),process)) {
    if (getSelectedTargetExecutionConfig() == null || !getSelectedTargetExecutionConfig().isRemote()) {
      IPreferenceStore preferenceStore=RunProcessPlugin.getDefault().getPreferenceStore();
      int num=preferenceStore.getInt(RunProcessTokenCollector.TOS_COUNT_RUNS.getPrefKey());
      preferenceStore.setValue(RunProcessTokenCollector.TOS_COUNT_RUNS.getPrefKey(),num + 1);
    }
    ClearPerformanceAction clearPerfAction=new ClearPerformanceAction();
    clearPerfAction.setProcess(process);
    clearPerfAction.run();
    ClearTraceAction clearTraceAction=new ClearTraceAction();
    clearTraceAction.setProcess(process);
    clearTraceAction.run();
    if (monitorPerf) {
      this.getStatisticsPort();
    }
    final IProcessor processor=getProcessor(process,process.getProperty());
    ((IEclipseProcessor)processor).setTargetExecutionConfig(getSelectedTargetExecutionConfig());
    IProgressService progressService=PlatformUI.getWorkbench().getProgressService();
    try {
      progressService.run(false,true,new IRunnableWithProgress(){
        @Override public void run(        final IProgressMonitor monitor){
          final IProgressMonitor progressMonitor=new EventLoopProgressMonitor(monitor);
          progressMonitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          testPort();
          if (monitorPerf || monitorTrace) {
            if (traceConnectionsManager != null) {
              traceConnectionsManager.clear();
            }
            traceConnectionsManager=getTraceConnectionsManager(process);
            traceConnectionsManager.init();
          }
          final IContext context=getSelectedContext();
          if (monitorPerf) {
            clearThreads();
            perfMonitor=getPerformanceMonitor();
            new Thread(perfMonitor,""String_Node_Str"" + process.getLabel()).start();
            perMonitorList.add(perfMonitor);
          }
          if (monitorTrace) {
            traceMonitor=new TraceMonitor();
            new Thread(traceMonitor,""String_Node_Str"" + process.getLabel()).start();
          }
          final String watchParam=RunProcessContext.this.isWatchAllowed() ? TalendProcessArgumentConstant.CMD_ARG_WATCH : null;
          final String log4jRuntimeLevel=getLog4jRuntimeLevel();
          processor.setContext(context);
          ((IEclipseProcessor)processor).setTargetExecutionConfig(getSelectedTargetExecutionConfig());
          final boolean oldMeasureActived=TimeMeasure.measureActive;
          if (!oldMeasureActived) {
            TimeMeasure.display=TimeMeasure.displaySteps=TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
          }
          final String generateCodeId=""String_Node_Str"";
          TimeMeasure.begin(generateCodeId);
          try {
            ProcessorUtilities.generateCode(processor,process,context,getStatisticsPort() != IProcessor.NO_STATISTICS,getTracesPort() != IProcessor.NO_TRACES && hasConnectionTrace(),true,progressMonitor);
          }
 catch (          Throwable e) {
            running=true;
            MessageBoxExceptionHandler.process(e,Display.getDefault().getActiveShell());
            kill();
            return;
          }
 finally {
            progressMonitor.done();
          }
          TimeMeasure.end(generateCodeId);
          if (!oldMeasureActived) {
            TimeMeasure.display=TimeMeasure.displaySteps=TimeMeasure.measureActive=false;
          }
          final boolean[] refreshUiAndWait=new boolean[1];
          refreshUiAndWait[0]=true;
          final Display display=shell.getDisplay();
          new Thread(new Runnable(){
            @Override public void run(){
              display.syncExec(new Runnable(){
                @Override public void run(){
                  try {
                    startingMessageWritten=false;
                    if (!JobErrorsChecker.hasErrors(shell)) {
                      ps=processor.run(getStatisticsPort(),getTracesPort(),watchParam,log4jRuntimeLevel,progressMonitor,processMessageManager);
                    }
                    if (ps != null && !progressMonitor.isCanceled()) {
                      setRunning(true);
                      psMonitor=createProcessMonitor(ps);
                      startingMessageWritten=true;
                      final String startingPattern=Messages.getString(""String_Node_Str"");
                      MessageFormat mf=new MessageFormat(startingPattern);
                      String welcomeMsg=mf.format(new Object[]{process.getLabel(),new Date()});
                      processMessageManager.addMessage(new ProcessMessage(MsgType.CORE_OUT,welcomeMsg + ""String_Node_Str""));
                      processMonitorThread=new Thread(psMonitor);
                      processMonitorThread.start();
                    }
 else {
                      kill();
                      running=true;
                      setRunning(false);
                    }
                  }
 catch (                  Throwable e) {
                    running=true;
                    Throwable cause=e.getCause();
                    if (cause != null && cause.getClass().equals(InterruptedException.class)) {
                      setRunning(false);
                      addErrorMessage(e);
                    }
 else {
                      ExceptionHandler.process(e);
                      addErrorMessage(e);
                      kill();
                    }
                  }
 finally {
                    refreshUiAndWait[0]=false;
                  }
                }
              }
);
            }
          }
,""String_Node_Str"" + process.getLabel()).start();
          while (refreshUiAndWait[0] && !progressMonitor.isCanceled()) {
            if (!display.readAndDispatch()) {
              display.sleep();
            }
synchronized (this) {
              try {
                final long waitTime=50;
                wait(waitTime);
              }
 catch (              InterruptedException e) {
              }
            }
          }
        }
      }
);
    }
 catch (    InvocationTargetException e1) {
      addErrorMessage(e1);
    }
catch (    InterruptedException e1) {
      addErrorMessage(e1);
    }
  }
 else {
    this.running=true;
    setRunning(false);
  }
}","/** 
 * Launch the process.
 */
public void exec(final Shell shell){
  if (process instanceof org.talend.designer.core.ui.editor.process.Process) {
    org.talend.designer.core.ui.editor.process.Process prs=(org.talend.designer.core.ui.editor.process.Process)process;
    prs.checkDifferenceWithRepository();
  }
  checkTraces();
  if (ProcessContextComposite.promptConfirmLauch(shell,getSelectedContext(),process)) {
    if (getSelectedTargetExecutionConfig() == null || !getSelectedTargetExecutionConfig().isRemote()) {
      IPreferenceStore preferenceStore=RunProcessPlugin.getDefault().getPreferenceStore();
      int num=preferenceStore.getInt(RunProcessTokenCollector.TOS_COUNT_RUNS.getPrefKey());
      preferenceStore.setValue(RunProcessTokenCollector.TOS_COUNT_RUNS.getPrefKey(),num + 1);
    }
    ClearPerformanceAction clearPerfAction=new ClearPerformanceAction();
    clearPerfAction.setProcess(process);
    clearPerfAction.run();
    ClearTraceAction clearTraceAction=new ClearTraceAction();
    clearTraceAction.setProcess(process);
    clearTraceAction.run();
    if (monitorPerf) {
      this.getStatisticsPort();
    }
    final IProcessor processor=getProcessor(process,process.getProperty());
    ((IEclipseProcessor)processor).setTargetExecutionConfig(getSelectedTargetExecutionConfig());
    IProgressService progressService=PlatformUI.getWorkbench().getProgressService();
    try {
      progressService.run(false,true,new IRunnableWithProgress(){
        @Override public void run(        final IProgressMonitor monitor){
          final IProgressMonitor progressMonitor=new EventLoopProgressMonitor(monitor);
          progressMonitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          testPort();
          if (monitorPerf || monitorTrace) {
            if (traceConnectionsManager != null) {
              traceConnectionsManager.clear();
            }
            traceConnectionsManager=getTraceConnectionsManager(process);
            traceConnectionsManager.init();
          }
          final IContext context=getSelectedContext();
          if (monitorPerf) {
            clearThreads();
            perfMonitor=getPerformanceMonitor();
            new Thread(perfMonitor,""String_Node_Str"" + process.getLabel()).start();
            perMonitorList.add(perfMonitor);
          }
          if (monitorTrace) {
            traceMonitor=new TraceMonitor();
            new Thread(traceMonitor,""String_Node_Str"" + process.getLabel()).start();
          }
          final String watchParam=RunProcessContext.this.isWatchAllowed() ? TalendProcessArgumentConstant.CMD_ARG_WATCH : null;
          final String log4jRuntimeLevel=getLog4jRuntimeLevel();
          processor.setContext(context);
          ((IEclipseProcessor)processor).setTargetExecutionConfig(getSelectedTargetExecutionConfig());
          final boolean oldMeasureActived=TimeMeasure.measureActive;
          if (!oldMeasureActived) {
            TimeMeasure.display=TimeMeasure.displaySteps=TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
          }
          final String generateCodeId=""String_Node_Str"";
          TimeMeasure.begin(generateCodeId);
          try {
            ProcessorUtilities.resetExportConfig();
            ProcessorUtilities.generateCode(processor,process,context,getStatisticsPort() != IProcessor.NO_STATISTICS,getTracesPort() != IProcessor.NO_TRACES && hasConnectionTrace(),true,progressMonitor);
          }
 catch (          Throwable e) {
            running=true;
            MessageBoxExceptionHandler.process(e,Display.getDefault().getActiveShell());
            kill();
            return;
          }
 finally {
            progressMonitor.done();
          }
          TimeMeasure.end(generateCodeId);
          if (!oldMeasureActived) {
            TimeMeasure.display=TimeMeasure.displaySteps=TimeMeasure.measureActive=false;
          }
          final boolean[] refreshUiAndWait=new boolean[1];
          refreshUiAndWait[0]=true;
          final Display display=shell.getDisplay();
          new Thread(new Runnable(){
            @Override public void run(){
              display.syncExec(new Runnable(){
                @Override public void run(){
                  try {
                    startingMessageWritten=false;
                    if (!JobErrorsChecker.hasErrors(shell)) {
                      ps=processor.run(getStatisticsPort(),getTracesPort(),watchParam,log4jRuntimeLevel,progressMonitor,processMessageManager);
                    }
                    if (ps != null && !progressMonitor.isCanceled()) {
                      setRunning(true);
                      psMonitor=createProcessMonitor(ps);
                      startingMessageWritten=true;
                      final String startingPattern=Messages.getString(""String_Node_Str"");
                      MessageFormat mf=new MessageFormat(startingPattern);
                      String welcomeMsg=mf.format(new Object[]{process.getLabel(),new Date()});
                      processMessageManager.addMessage(new ProcessMessage(MsgType.CORE_OUT,welcomeMsg + ""String_Node_Str""));
                      processMonitorThread=new Thread(psMonitor);
                      processMonitorThread.start();
                    }
 else {
                      kill();
                      running=true;
                      setRunning(false);
                    }
                  }
 catch (                  Throwable e) {
                    running=true;
                    Throwable cause=e.getCause();
                    if (cause != null && cause.getClass().equals(InterruptedException.class)) {
                      setRunning(false);
                      addErrorMessage(e);
                    }
 else {
                      ExceptionHandler.process(e);
                      addErrorMessage(e);
                      kill();
                    }
                  }
 finally {
                    refreshUiAndWait[0]=false;
                  }
                }
              }
);
            }
          }
,""String_Node_Str"" + process.getLabel()).start();
          while (refreshUiAndWait[0] && !progressMonitor.isCanceled()) {
            if (!display.readAndDispatch()) {
              display.sleep();
            }
synchronized (this) {
              try {
                final long waitTime=50;
                wait(waitTime);
              }
 catch (              InterruptedException e) {
              }
            }
          }
        }
      }
);
    }
 catch (    InvocationTargetException e1) {
      addErrorMessage(e1);
    }
catch (    InterruptedException e1) {
      addErrorMessage(e1);
    }
  }
 else {
    this.running=true;
    setRunning(false);
  }
}",0.9961309523809524
117880,"@Override public IProcessor generateJobFiles(IProgressMonitor monitor) throws Exception {
  LastGenerationInfo.getInstance().getUseDynamicMap().clear();
  LastGenerationInfo.getInstance().getUseRulesMap().clear();
  final Map<String,Object> argumentsMap=new HashMap<String,Object>(getArguments());
  argumentsMap.put(TalendProcessArgumentConstant.ARG_ENABLE_APPLY_CONTEXT_TO_CHILDREN,isOptionChoosed(ExportChoice.applyToChildren));
  argumentsMap.put(TalendProcessArgumentConstant.ARG_ENABLE_STATS,isOptionChoosed(ExportChoice.addStatistics));
  argumentsMap.put(TalendProcessArgumentConstant.ARG_ENABLE_TRACS,isOptionChoosed(ExportChoice.addTracs));
  Properties prop=(Properties)exportChoice.get(ExportChoice.properties);
  if (prop != null) {
    Enumeration<Object> keys=prop.keys();
    while (keys.hasMoreElements()) {
      String key=keys.nextElement().toString();
      String value=prop.get(key) == null ? null : prop.get(key).toString();
      argumentsMap.put(key,value);
    }
  }
  boolean needContext=isOptionChoosed(ExportChoice.needContext);
  if (needContext) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_NEED_CONTEXT,needContext);
    Object context=this.exportChoice.get(ExportChoice.contextName);
    if (context == null) {
      context=this.contextName;
    }
    argumentsMap.put(TalendProcessArgumentConstant.ARG_CONTEXT_NAME,context);
  }
  boolean onlyDefaultContext=isOptionChoosed(ExportChoice.onlyDefautContext);
  if (onlyDefaultContext) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_ONLY_DEFAUT_CONTEXT,onlyDefaultContext);
  }
  boolean needParamValues=isOptionChoosed(ExportChoice.needParameterValues);
  if (needParamValues) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,this.exportChoice.get(ExportChoice.parameterValuesList));
  }
  boolean log4jEnable=isLog4jEnable();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J,log4jEnable);
  if (log4jEnable) {
    boolean needLog4jLevel=isOptionChoosed(ExportChoice.needLog4jLevel);
    if (needLog4jLevel) {
      argumentsMap.put(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL,needLog4jLevel);
      argumentsMap.put(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL,this.exportChoice.get(ExportChoice.log4jLevel));
    }
  }
  int generationOption=(isOptionChoosed(ExportChoice.includeTestSource) || isOptionChoosed(ExportChoice.executeTests)) ? ProcessorUtilities.GENERATE_ALL_CHILDS | ProcessorUtilities.GENERATE_TESTS : ProcessorUtilities.GENERATE_ALL_CHILDS;
  if (isOptionChoosed(ExportChoice.doNotCompileCode)) {
    generationOption=generationOption | ProcessorUtilities.GENERATE_WITHOUT_COMPILING;
  }
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GENERATE_OPTION,generationOption);
  String deployVersion=(String)exportChoice.get(ExportChoice.deployVersion);
  if (deployVersion != null) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_DEPLOY_VERSION,deployVersion);
  }
  try {
    IProcessor processor=ProcessorUtilities.generateCode(processItem,contextName,version,argumentsMap,monitor);
    return processor;
  }
  finally {
    ProcessorUtilities.resetExportConfig();
  }
}","@Override public IProcessor generateJobFiles(IProgressMonitor monitor) throws Exception {
  LastGenerationInfo.getInstance().getUseDynamicMap().clear();
  LastGenerationInfo.getInstance().getUseRulesMap().clear();
  final Map<String,Object> argumentsMap=new HashMap<String,Object>(getArguments());
  argumentsMap.put(TalendProcessArgumentConstant.ARG_ENABLE_APPLY_CONTEXT_TO_CHILDREN,isOptionChoosed(ExportChoice.applyToChildren));
  argumentsMap.put(TalendProcessArgumentConstant.ARG_ENABLE_STATS,isOptionChoosed(ExportChoice.addStatistics));
  argumentsMap.put(TalendProcessArgumentConstant.ARG_ENABLE_TRACS,isOptionChoosed(ExportChoice.addTracs));
  Properties prop=(Properties)exportChoice.get(ExportChoice.properties);
  if (prop != null) {
    Enumeration<Object> keys=prop.keys();
    while (keys.hasMoreElements()) {
      String key=keys.nextElement().toString();
      String value=prop.get(key) == null ? null : prop.get(key).toString();
      argumentsMap.put(key,value);
    }
  }
  boolean needContext=isOptionChoosed(ExportChoice.needContext);
  if (needContext) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_NEED_CONTEXT,needContext);
    Object context=this.exportChoice.get(ExportChoice.contextName);
    if (context == null) {
      context=this.contextName;
    }
    argumentsMap.put(TalendProcessArgumentConstant.ARG_CONTEXT_NAME,context);
  }
  boolean onlyDefaultContext=isOptionChoosed(ExportChoice.onlyDefautContext);
  if (onlyDefaultContext) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_ONLY_DEFAUT_CONTEXT,onlyDefaultContext);
  }
  boolean needParamValues=isOptionChoosed(ExportChoice.needParameterValues);
  if (needParamValues) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,this.exportChoice.get(ExportChoice.parameterValuesList));
  }
  boolean log4jEnable=isLog4jEnable();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J,log4jEnable);
  if (log4jEnable) {
    boolean needLog4jLevel=isOptionChoosed(ExportChoice.needLog4jLevel);
    if (needLog4jLevel) {
      argumentsMap.put(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL,needLog4jLevel);
      argumentsMap.put(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL,this.exportChoice.get(ExportChoice.log4jLevel));
    }
  }
  int generationOption=(isOptionChoosed(ExportChoice.includeTestSource) || isOptionChoosed(ExportChoice.executeTests)) ? ProcessorUtilities.GENERATE_ALL_CHILDS | ProcessorUtilities.GENERATE_TESTS : ProcessorUtilities.GENERATE_ALL_CHILDS;
  if (isOptionChoosed(ExportChoice.doNotCompileCode)) {
    generationOption=generationOption | ProcessorUtilities.GENERATE_WITHOUT_COMPILING;
  }
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GENERATE_OPTION,generationOption);
  String deployVersion=(String)exportChoice.get(ExportChoice.deployVersion);
  if (deployVersion != null) {
    argumentsMap.put(TalendProcessArgumentConstant.ARG_DEPLOY_VERSION,deployVersion);
  }
  IProcessor processor=ProcessorUtilities.generateCode(processItem,contextName,version,argumentsMap,monitor);
  return processor;
}",0.9820224719101124
117881,"@Test public void testBdEeDemoComplete() throws Exception {
  Assert.assertTrue(eeResManager instanceof FileResourcesUnityManager);
  Iterator path=eeResManager.getPaths().iterator();
  String firstFilePath=((Path)path.next()).toPortableString();
  String eeDemoName=demoName.substring(0,demoName.indexOf(""String_Node_Str""));
  String tempFolderPath=firstFilePath.substring(0,firstFilePath.indexOf(TEMP_FOLDER_SUFFIEX) + TEMP_FOLDER_SUFFIEX.length());
  Assert.assertTrue(new File(tempFolderPath).exists());
  String rootPath=tempFolderPath + File.separator + eeDemoName;
  Assert.assertTrue(new File(rootPath).exists());
  File tempJobsFolder=new File(rootPath + File.separator + processItemPath);
  List<File> demoJobItemFiles=DemoImportTestUtil.collectProjectFilesFromDirectory(tempJobsFolder,FileConstants.ITEM_EXTENSION,true);
  Assert.assertTrue(demoJobItemFiles.size() > 0);
  int currentJobItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.PROCESS).size();
  Assert.assertTrue(currentJobItemsSize > 0);
  Assert.assertEquals(demoJobItemFiles.size(),currentJobItemsSize);
  int currentMrItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.PROCESS_MR).size();
  File tempMrItemsFolder=new File(rootPath + File.separator + processMrPath);
  List<File> demoMrItemsFiles=DemoImportTestUtil.collectProjectFilesFromDirectory(tempMrItemsFolder,FileConstants.ITEM_EXTENSION,true);
  Assert.assertTrue(demoMrItemsFiles.size() > 0);
  Assert.assertTrue(currentMrItemsSize > 0);
  Assert.assertEquals(demoMrItemsFiles.size(),currentMrItemsSize);
  int currentContextItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.CONTEXT).size();
  File tempContextItemsFolder=new File(rootPath + File.separator + contextItemPath);
  List<File> demoContextItemsFiles=DemoImportTestUtil.collectProjectFilesFromDirectory(tempContextItemsFolder,FileConstants.ITEM_EXTENSION,true);
  Assert.assertTrue(demoContextItemsFiles.size() > 0);
  Assert.assertTrue(currentContextItemsSize > 0);
  Assert.assertEquals(demoContextItemsFiles.size(),currentContextItemsSize);
  doRoutinesItemsTest(rootPath);
  int currentConnectionItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA).size();
  int currentHadoopConnItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")).size();
  File tempConnItemsFolder=new File(rootPath + File.separator + connectionItemPath);
  List<File> demoConItemsFiles=DemoImportTestUtil.collectProjectFilesFromDirectory(tempConnItemsFolder,FileConstants.ITEM_EXTENSION,true);
  Assert.assertTrue(demoConItemsFiles.size() > 0);
  Assert.assertTrue(currentConnectionItemsSize > 0);
  Assert.assertEquals(demoConItemsFiles.size(),currentConnectionItemsSize);
  int currentDocItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.DOCUMENTATION).size();
  File tempDocItemsFolder=new File(rootPath + File.separator + documentionPath);
  List<File> demoDocItemsFiles=DemoImportTestUtil.collectProjectFilesFromDirectory(tempDocItemsFolder,FileConstants.ITEM_EXTENSION,true);
  Assert.assertTrue(demoDocItemsFiles.size() > 0);
  Assert.assertTrue(currentDocItemsSize > 0);
  Assert.assertEquals(demoDocItemsFiles.size(),currentDocItemsSize);
}","@Test public void testBdEeDemoComplete() throws Exception {
  Assert.assertTrue(eeResManager instanceof FileResourcesUnityManager);
  List<File> demoJobItemFiles=getDemoItemFileList(rootPath + File.separator + processItemPath);
  Assert.assertTrue(demoJobItemFiles.size() > 0);
  int currentJobItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.PROCESS).size();
  Assert.assertTrue(currentJobItemsSize > 0);
  Assert.assertEquals(demoJobItemFiles.size(),currentJobItemsSize);
  int currentMrItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.PROCESS_MR).size();
  List<File> demoMrItemsFiles=getDemoItemFileList(rootPath + File.separator + processMrPath);
  Assert.assertTrue(demoMrItemsFiles.size() > 0);
  Assert.assertTrue(currentMrItemsSize > 0);
  Assert.assertEquals(demoMrItemsFiles.size(),currentMrItemsSize);
  int currentContextItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.CONTEXT).size();
  List<File> demoContextItemsFiles=getDemoItemFileList(rootPath + File.separator + contextItemPath);
  Assert.assertTrue(demoContextItemsFiles.size() > 0);
  Assert.assertTrue(currentContextItemsSize > 0);
  Assert.assertEquals(demoContextItemsFiles.size(),currentContextItemsSize);
  doRoutinesItemsTest(rootPath);
  int currentConnectionItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA).size();
  List<File> demoConItemsFiles=getDemoItemFileList(rootPath + File.separator + connectionItemPath);
  Assert.assertTrue(demoConItemsFiles.size() > 0);
  Assert.assertTrue(currentConnectionItemsSize > 0);
  Assert.assertEquals(demoConItemsFiles.size(),currentConnectionItemsSize);
  int currentDocItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.DOCUMENTATION).size();
  List<File> demoDocItemsFiles=getDemoItemFileList(rootPath + File.separator + documentionPath);
  Assert.assertTrue(demoDocItemsFiles.size() > 0);
  Assert.assertTrue(currentDocItemsSize > 0);
  Assert.assertEquals(demoDocItemsFiles.size(),currentDocItemsSize);
}",0.6470696986503975
117882,"@Before public void importEeDemo() throws Exception {
  initDemo(BIG_DATA_EE_DEMO_PLUGIN_ID);
  Assert.assertNotNull(currentDemo);
  initTestPaths();
  initTempPro();
  eeResManager=DemoImportTestUtil.getResourceManager(currentDemo);
  Assert.assertNotNull(eeResManager);
  ImportExportHandlersManager importManager=new ImportExportHandlersManager();
  List<ImportItem> projectRecords=importManager.populateImportingItems(eeResManager,true,new NullProgressMonitor());
  Assert.assertTrue(projectRecords.size() > 0);
  importManager.importItemRecords(new NullProgressMonitor(),eeResManager,projectRecords,true,projectRecords.toArray(new ImportItem[0]),null);
}","@Before public void importEeDemo() throws Exception {
  initDemo(BIG_DATA_EE_DEMO_PLUGIN_ID);
  Assert.assertNotNull(currentDemo);
  initTestPaths();
  initTempPro();
  eeResManager=DemoImportTestUtil.getResourceManager(currentDemo);
  Assert.assertNotNull(eeResManager);
  rootPath=getRootPath(eeResManager);
  collectDemoData(rootPath);
  ImportExportHandlersManager importManager=new ImportExportHandlersManager();
  List<ImportItem> projectRecords=importManager.populateImportingItems(eeResManager,true,new NullProgressMonitor());
  Assert.assertTrue(projectRecords.size() > 0);
  importManager.importItemRecords(new NullProgressMonitor(),eeResManager,projectRecords,true,projectRecords.toArray(new ImportItem[0]),null);
}",0.951624548736462
117883,"@Test public void testBdCeDemoComplete() throws Exception {
  if (currentDemo == null) {
    return;
  }
  Assert.assertTrue(ceResManager instanceof FileResourcesUnityManager);
  Iterator path=ceResManager.getPaths().iterator();
  String firstFilePath=((Path)path.next()).toPortableString();
  String ceDemoName=demoName.substring(0,demoName.indexOf(""String_Node_Str""));
  String tempFolderPath=firstFilePath.substring(0,firstFilePath.indexOf(TEMP_FOLDER_SUFFIEX) + TEMP_FOLDER_SUFFIEX.length());
  Assert.assertTrue(new File(tempFolderPath).exists());
  String rootPath=tempFolderPath + File.separator + ceDemoName;
  Assert.assertTrue(new File(rootPath).exists());
  File tempJobsFolder=new File(rootPath + File.separator + processItemPath);
  List<File> demoJobItemFiles=DemoImportTestUtil.collectProjectFilesFromDirectory(tempJobsFolder,FileConstants.ITEM_EXTENSION,true);
  Assert.assertTrue(demoJobItemFiles.size() > 0);
  int currentJobItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.PROCESS).size();
  Assert.assertTrue(currentJobItemsSize > 0);
  Assert.assertEquals(demoJobItemFiles.size(),currentJobItemsSize);
  int currentContextItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.CONTEXT).size();
  Assert.assertTrue(currentContextItemsSize > 0);
  File tempContextItemsFolder=new File(rootPath + File.separator + contextItemPath);
  List<File> demoContextItemsFiles=DemoImportTestUtil.collectProjectFilesFromDirectory(tempContextItemsFolder,FileConstants.ITEM_EXTENSION,true);
  Assert.assertTrue(demoContextItemsFiles.size() > 0);
  Assert.assertEquals(demoContextItemsFiles.size(),currentContextItemsSize);
}","@Test public void testBdCeDemoComplete() throws Exception {
  if (currentDemo == null) {
    return;
  }
  Assert.assertTrue(ceResManager instanceof FileResourcesUnityManager);
  List<File> demoJobItemFiles=getDemoItemFileList(rootPath + File.separator + processItemPath);
  Assert.assertTrue(demoJobItemFiles.size() > 0);
  int currentJobItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.PROCESS).size();
  Assert.assertTrue(currentJobItemsSize > 0);
  Assert.assertEquals(demoJobItemFiles.size(),currentJobItemsSize);
  int currentContextItemsSize=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.CONTEXT).size();
  Assert.assertTrue(currentContextItemsSize > 0);
  List<File> demoContextItemsFiles=getDemoItemFileList(rootPath + File.separator + contextItemPath);
  Assert.assertTrue(demoContextItemsFiles.size() > 0);
  Assert.assertEquals(demoContextItemsFiles.size(),currentContextItemsSize);
}",0.6267175572519084
117884,"@Before public void importCeDemo() throws Exception {
  initDemo(BIG_DATA_CE_DEMO_PLUGIN_ID);
  if (currentDemo == null) {
    return;
  }
  initTestPaths();
  initTempPro();
  Assert.assertNotNull(currentDemo);
  ceResManager=DemoImportTestUtil.getResourceManager(currentDemo);
  Assert.assertNotNull(ceResManager);
  ImportExportHandlersManager importManager=new ImportExportHandlersManager();
  List<ImportItem> projectRecords=importManager.populateImportingItems(ceResManager,true,new NullProgressMonitor());
  Assert.assertTrue(projectRecords.size() > 0);
  importManager.importItemRecords(new NullProgressMonitor(),ceResManager,projectRecords,true,projectRecords.toArray(new ImportItem[0]),null);
}","@Before public void importCeDemo() throws Exception {
  initDemo(BIG_DATA_CE_DEMO_PLUGIN_ID);
  if (currentDemo == null) {
    return;
  }
  initTestPaths();
  initTempPro();
  Assert.assertNotNull(currentDemo);
  ceResManager=DemoImportTestUtil.getResourceManager(currentDemo);
  Assert.assertNotNull(ceResManager);
  rootPath=getRootPath(ceResManager);
  Assert.assertTrue(new File(rootPath).exists());
  collectDemoData(rootPath);
  ImportExportHandlersManager importManager=new ImportExportHandlersManager();
  List<ImportItem> projectRecords=importManager.populateImportingItems(ceResManager,true,new NullProgressMonitor());
  Assert.assertTrue(projectRecords.size() > 0);
  importManager.importItemRecords(new NullProgressMonitor(),ceResManager,projectRecords,true,projectRecords.toArray(new ImportItem[0]),null);
}",0.9232786885245902
117885,"@Override public void transform(NodeType nodeType){
  if (nodeType == null || props == null) {
    return;
  }
  boolean modified=false;
  Map<String,String> schemaParamMap=new HashMap<>();
  String currComponentName=nodeType.getComponentName();
  String newComponentName=props.getProperty(currComponentName);
  nodeType.setComponentName(newComponentName);
  String label=ParameterUtilTool.getParameterValue(nodeType,""String_Node_Str"");
  if (label != null) {
    ElementParameterType paraType=ParameterUtilTool.findParameterType(nodeType,label.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (paraType != null) {
      ParameterUtilTool.findParameterType(nodeType,""String_Node_Str"").setValue(paraType.getValue());
      modified=true;
    }
  }
  IComponent component=ComponentsFactoryProvider.getInstance().get(newComponentName,category.getName());
  ComponentProperties compProperties=ComponentsUtils.getComponentProperties(newComponentName);
  FakeNode fNode=new FakeNode(component);
  for (  IElementParameter param : fNode.getElementParameters()) {
    if (param instanceof GenericElementParameter) {
      String paramName=param.getName();
      NamedThing currNamedThing=ComponentsUtils.getGenericSchemaElement(compProperties,paramName);
      String oldParamName=props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName);
      if (oldParamName != null && !(oldParamName=oldParamName.trim()).isEmpty()) {
        if (currNamedThing instanceof Property && (GenericTypeUtils.isSchemaType((Property<?>)currNamedThing))) {
          schemaParamMap.put(paramName,props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName+ IGenericConstants.EXP_SEPARATOR+ ""String_Node_Str""));
        }
        ElementParameterType paramType=getParameterType(nodeType,oldParamName);
        if (paramType != null) {
          if (currNamedThing instanceof ComponentReferenceProperties) {
            ComponentReferenceProperties refProps=(ComponentReferenceProperties)currNamedThing;
            refProps.referenceType.setValue(ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
            refProps.componentInstanceId.setStoredValue(ParameterUtilTool.convertParameterValue(paramType));
            refProps.componentInstanceId.setTaggedValue(IGenericConstants.ADD_QUOTES,true);
          }
 else {
            processMappedElementParameter(props,nodeType,(GenericElementParameter)param,paramType,currNamedThing);
          }
          ParameterUtilTool.removeParameterType(nodeType,paramType);
          modified=true;
        }
        if (EParameterFieldType.SCHEMA_REFERENCE.equals(param.getFieldType())) {
          String schemaTypeName=""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName();
          String repSchemaTypeName=""String_Node_Str"" + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
          paramType=getParameterType(nodeType,oldParamName + schemaTypeName);
          if (paramType != null) {
            paramType.setName(param.getName() + schemaTypeName);
          }
          paramType=getParameterType(nodeType,oldParamName + repSchemaTypeName);
          if (paramType != null) {
            paramType.setName(param.getName() + repSchemaTypeName);
          }
        }
      }
 else {
        processUnmappedElementParameter(props,nodeType,(GenericElementParameter)param,currNamedThing);
      }
    }
 else {
      if (EParameterFieldType.SCHEMA_REFERENCE.equals(param.getFieldType())) {
        String paramName=param.getName();
        schemaParamMap.put(paramName,props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName+ IGenericConstants.EXP_SEPARATOR+ ""String_Node_Str""));
        String oldParamName=props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName);
        String schemaTypeName=""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName();
        String repSchemaTypeName=""String_Node_Str"" + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
        ElementParameterType paramType=getParameterType(nodeType,oldParamName + schemaTypeName);
        if (paramType != null) {
          paramType.setName(param.getName() + schemaTypeName);
        }
        paramType=getParameterType(nodeType,oldParamName + repSchemaTypeName);
        if (paramType != null) {
          paramType.setName(param.getName() + repSchemaTypeName);
        }
      }
    }
  }
  Map<String,MetadataType> metadatasMap=new HashMap<>();
  EList<MetadataType> metadatas=nodeType.getMetadata();
  for (  MetadataType metadataType : metadatas) {
    metadatasMap.put(metadataType.getConnector(),metadataType);
  }
  Iterator<Entry<String,String>> schemaParamIter=schemaParamMap.entrySet().iterator();
  String uniqueName=ParameterUtilTool.getParameterValue(nodeType,""String_Node_Str"");
  while (schemaParamIter.hasNext()) {
    Entry<String,String> schemaParamEntry=schemaParamIter.next();
    String newParamName=schemaParamEntry.getKey();
    String connectorMapping=schemaParamEntry.getValue();
    String oldConnector=connectorMapping.split(""String_Node_Str"")[0];
    String newConnector=connectorMapping.split(""String_Node_Str"")[1];
    MetadataType metadataType=metadatasMap.get(oldConnector);
    if (metadataType != null) {
      metadataType.setConnector(newConnector);
      MetadataEmfFactory factory=new MetadataEmfFactory();
      factory.setMetadataType(metadataType);
      IMetadataTable metadataTable=factory.getMetadataTable();
      Schema schema=SchemaUtils.convertTalendSchemaIntoComponentSchema(ConvertionHelper.convert(metadataTable));
      compProperties.setValue(newParamName,schema);
    }
    if (!oldConnector.equals(newConnector)) {
      for (      Object connectionObj : processType.getConnection()) {
        if (connectionObj instanceof ConnectionType) {
          ConnectionType connectionType=(ConnectionType)connectionObj;
          if (connectionType.getSource().equals(uniqueName) && connectionType.getConnectorName().equals(oldConnector)) {
            connectionType.setConnectorName(newConnector);
          }
        }
      }
    }
  }
  for (  Object connectionObj : processType.getConnection()) {
    ConnectionType connection=(ConnectionType)connectionObj;
    if (connection.getSource() != null && connection.getSource().equals(uniqueName)) {
      if (EConnectionType.FLOW_MAIN.getName().equals(connection.getConnectorName())) {
        connection.setConnectorName(Connector.MAIN_NAME);
      }
    }
  }
  if (modified) {
    String serializedProperties=compProperties.toSerialized();
    if (serializedProperties != null) {
      ElementParameterType pType=ParameterUtilTool.createParameterType(null,""String_Node_Str"",serializedProperties);
      nodeType.getElementParameter().add(pType);
    }
  }
}","@Override public void transform(NodeType nodeType){
  if (nodeType == null || props == null) {
    return;
  }
  boolean modified=false;
  Map<String,String> schemaParamMap=new HashMap<>();
  String currComponentName=nodeType.getComponentName();
  String newComponentName=props.getProperty(currComponentName);
  nodeType.setComponentName(newComponentName);
  String label=ParameterUtilTool.getParameterValue(nodeType,""String_Node_Str"");
  if (label != null) {
    ElementParameterType paraType=ParameterUtilTool.findParameterType(nodeType,label.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (paraType != null) {
      ParameterUtilTool.findParameterType(nodeType,""String_Node_Str"").setValue(paraType.getValue());
      modified=true;
    }
  }
  IComponent component=ComponentsFactoryProvider.getInstance().get(newComponentName,category.getName());
  ComponentProperties compProperties=ComponentsUtils.getComponentProperties(newComponentName);
  FakeNode fNode=new FakeNode(component);
  ElementParameterType propertyParamType=getParameterType(nodeType,""String_Node_Str"");
  boolean isRepository=false;
  if (propertyParamType != null && ""String_Node_Str"".equals(propertyParamType.getValue())) {
    isRepository=true;
  }
  ElementParameterType sqlParamType=getParameterType(nodeType,""String_Node_Str"");
  boolean isSQLRepository=false;
  if (sqlParamType != null && ""String_Node_Str"".equals(propertyParamType.getValue())) {
    isSQLRepository=true;
  }
  for (  IElementParameter param : fNode.getElementParameters()) {
    if (param instanceof GenericElementParameter) {
      String paramName=param.getName();
      NamedThing currNamedThing=ComponentsUtils.getGenericSchemaElement(compProperties,paramName);
      String oldParamName=props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName);
      if (oldParamName != null && !(oldParamName=oldParamName.trim()).isEmpty()) {
        if (currNamedThing instanceof Property && (GenericTypeUtils.isSchemaType((Property<?>)currNamedThing))) {
          schemaParamMap.put(paramName,props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName+ IGenericConstants.EXP_SEPARATOR+ ""String_Node_Str""));
        }
        ElementParameterType paramType=getParameterType(nodeType,oldParamName);
        if (paramType != null) {
          if (currNamedThing instanceof ComponentReferenceProperties) {
            ComponentReferenceProperties refProps=(ComponentReferenceProperties)currNamedThing;
            refProps.referenceType.setValue(ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
            refProps.componentInstanceId.setStoredValue(ParameterUtilTool.convertParameterValue(paramType));
            refProps.componentInstanceId.setTaggedValue(IGenericConstants.ADD_QUOTES,true);
          }
 else {
            processMappedElementParameter(props,nodeType,(GenericElementParameter)param,paramType,currNamedThing);
          }
          ParameterUtilTool.removeParameterType(nodeType,paramType);
          modified=true;
        }
        if (EParameterFieldType.SCHEMA_REFERENCE.equals(param.getFieldType())) {
          String schemaTypeName=""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName();
          String repSchemaTypeName=""String_Node_Str"" + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
          paramType=getParameterType(nodeType,oldParamName + schemaTypeName);
          if (paramType != null) {
            paramType.setName(param.getName() + schemaTypeName);
          }
          paramType=getParameterType(nodeType,oldParamName + repSchemaTypeName);
          if (paramType != null) {
            paramType.setName(param.getName() + repSchemaTypeName);
          }
        }
      }
 else {
        processUnmappedElementParameter(props,nodeType,(GenericElementParameter)param,currNamedThing);
      }
      if (isRepository && isRepositoryParam(paramName) || isSQLRepository && ""String_Node_Str"".equals(paramName)) {
        ComponentsUtils.setPropertiesPepositoryValue(compProperties,paramName);
      }
    }
 else {
      if (EParameterFieldType.SCHEMA_REFERENCE.equals(param.getFieldType())) {
        String paramName=param.getName();
        schemaParamMap.put(paramName,props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName+ IGenericConstants.EXP_SEPARATOR+ ""String_Node_Str""));
        String oldParamName=props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName);
        String schemaTypeName=""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName();
        String repSchemaTypeName=""String_Node_Str"" + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
        ElementParameterType paramType=getParameterType(nodeType,oldParamName + schemaTypeName);
        if (paramType != null) {
          paramType.setName(param.getName() + schemaTypeName);
        }
        paramType=getParameterType(nodeType,oldParamName + repSchemaTypeName);
        if (paramType != null) {
          paramType.setName(param.getName() + repSchemaTypeName);
        }
      }
    }
  }
  Map<String,MetadataType> metadatasMap=new HashMap<>();
  EList<MetadataType> metadatas=nodeType.getMetadata();
  for (  MetadataType metadataType : metadatas) {
    metadatasMap.put(metadataType.getConnector(),metadataType);
  }
  Iterator<Entry<String,String>> schemaParamIter=schemaParamMap.entrySet().iterator();
  String uniqueName=ParameterUtilTool.getParameterValue(nodeType,""String_Node_Str"");
  while (schemaParamIter.hasNext()) {
    Entry<String,String> schemaParamEntry=schemaParamIter.next();
    String newParamName=schemaParamEntry.getKey();
    String connectorMapping=schemaParamEntry.getValue();
    String oldConnector=connectorMapping.split(""String_Node_Str"")[0];
    String newConnector=connectorMapping.split(""String_Node_Str"")[1];
    MetadataType metadataType=metadatasMap.get(oldConnector);
    if (metadataType != null) {
      metadataType.setConnector(newConnector);
      MetadataEmfFactory factory=new MetadataEmfFactory();
      factory.setMetadataType(metadataType);
      IMetadataTable metadataTable=factory.getMetadataTable();
      Schema schema=SchemaUtils.convertTalendSchemaIntoComponentSchema(ConvertionHelper.convert(metadataTable));
      compProperties.setValue(newParamName,schema);
    }
    if (!oldConnector.equals(newConnector)) {
      for (      Object connectionObj : processType.getConnection()) {
        if (connectionObj instanceof ConnectionType) {
          ConnectionType connectionType=(ConnectionType)connectionObj;
          if (connectionType.getSource().equals(uniqueName) && connectionType.getConnectorName().equals(oldConnector)) {
            connectionType.setConnectorName(newConnector);
          }
        }
      }
    }
  }
  for (  Object connectionObj : processType.getConnection()) {
    ConnectionType connection=(ConnectionType)connectionObj;
    if (connection.getSource() != null && connection.getSource().equals(uniqueName)) {
      if (EConnectionType.FLOW_MAIN.getName().equals(connection.getConnectorName())) {
        connection.setConnectorName(Connector.MAIN_NAME);
      }
    }
  }
  if (modified) {
    String serializedProperties=compProperties.toSerialized();
    if (serializedProperties != null) {
      ElementParameterType pType=ParameterUtilTool.createParameterType(null,""String_Node_Str"",serializedProperties);
      nodeType.getElementParameter().add(pType);
    }
  }
}",0.9526219597919304
117886,"@Override public ExecutionResult execute(final Item item){
  final ProcessType processType=getProcessType(item);
  ComponentCategory category=ComponentCategory.getComponentCategoryFromItem(item);
  Properties props=getPropertiesFromFile();
  IComponentConversion conversion=new IComponentConversion(){
    @Override public void transform(    NodeType nodeType){
      if (nodeType == null || props == null) {
        return;
      }
      boolean modified=false;
      Map<String,String> schemaParamMap=new HashMap<>();
      String currComponentName=nodeType.getComponentName();
      String newComponentName=props.getProperty(currComponentName);
      nodeType.setComponentName(newComponentName);
      String label=ParameterUtilTool.getParameterValue(nodeType,""String_Node_Str"");
      if (label != null) {
        ElementParameterType paraType=ParameterUtilTool.findParameterType(nodeType,label.replaceAll(""String_Node_Str"",""String_Node_Str""));
        if (paraType != null) {
          ParameterUtilTool.findParameterType(nodeType,""String_Node_Str"").setValue(paraType.getValue());
          modified=true;
        }
      }
      IComponent component=ComponentsFactoryProvider.getInstance().get(newComponentName,category.getName());
      ComponentProperties compProperties=ComponentsUtils.getComponentProperties(newComponentName);
      FakeNode fNode=new FakeNode(component);
      for (      IElementParameter param : fNode.getElementParameters()) {
        if (param instanceof GenericElementParameter) {
          String paramName=param.getName();
          NamedThing currNamedThing=ComponentsUtils.getGenericSchemaElement(compProperties,paramName);
          String oldParamName=props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName);
          if (oldParamName != null && !(oldParamName=oldParamName.trim()).isEmpty()) {
            if (currNamedThing instanceof Property && (GenericTypeUtils.isSchemaType((Property<?>)currNamedThing))) {
              schemaParamMap.put(paramName,props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName+ IGenericConstants.EXP_SEPARATOR+ ""String_Node_Str""));
            }
            ElementParameterType paramType=getParameterType(nodeType,oldParamName);
            if (paramType != null) {
              if (currNamedThing instanceof ComponentReferenceProperties) {
                ComponentReferenceProperties refProps=(ComponentReferenceProperties)currNamedThing;
                refProps.referenceType.setValue(ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
                refProps.componentInstanceId.setStoredValue(ParameterUtilTool.convertParameterValue(paramType));
                refProps.componentInstanceId.setTaggedValue(IGenericConstants.ADD_QUOTES,true);
              }
 else {
                processMappedElementParameter(props,nodeType,(GenericElementParameter)param,paramType,currNamedThing);
              }
              ParameterUtilTool.removeParameterType(nodeType,paramType);
              modified=true;
            }
            if (EParameterFieldType.SCHEMA_REFERENCE.equals(param.getFieldType())) {
              String schemaTypeName=""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName();
              String repSchemaTypeName=""String_Node_Str"" + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
              paramType=getParameterType(nodeType,oldParamName + schemaTypeName);
              if (paramType != null) {
                paramType.setName(param.getName() + schemaTypeName);
              }
              paramType=getParameterType(nodeType,oldParamName + repSchemaTypeName);
              if (paramType != null) {
                paramType.setName(param.getName() + repSchemaTypeName);
              }
            }
          }
 else {
            processUnmappedElementParameter(props,nodeType,(GenericElementParameter)param,currNamedThing);
          }
        }
 else {
          if (EParameterFieldType.SCHEMA_REFERENCE.equals(param.getFieldType())) {
            String paramName=param.getName();
            schemaParamMap.put(paramName,props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName+ IGenericConstants.EXP_SEPARATOR+ ""String_Node_Str""));
            String oldParamName=props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName);
            String schemaTypeName=""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName();
            String repSchemaTypeName=""String_Node_Str"" + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
            ElementParameterType paramType=getParameterType(nodeType,oldParamName + schemaTypeName);
            if (paramType != null) {
              paramType.setName(param.getName() + schemaTypeName);
            }
            paramType=getParameterType(nodeType,oldParamName + repSchemaTypeName);
            if (paramType != null) {
              paramType.setName(param.getName() + repSchemaTypeName);
            }
          }
        }
      }
      Map<String,MetadataType> metadatasMap=new HashMap<>();
      EList<MetadataType> metadatas=nodeType.getMetadata();
      for (      MetadataType metadataType : metadatas) {
        metadatasMap.put(metadataType.getConnector(),metadataType);
      }
      Iterator<Entry<String,String>> schemaParamIter=schemaParamMap.entrySet().iterator();
      String uniqueName=ParameterUtilTool.getParameterValue(nodeType,""String_Node_Str"");
      while (schemaParamIter.hasNext()) {
        Entry<String,String> schemaParamEntry=schemaParamIter.next();
        String newParamName=schemaParamEntry.getKey();
        String connectorMapping=schemaParamEntry.getValue();
        String oldConnector=connectorMapping.split(""String_Node_Str"")[0];
        String newConnector=connectorMapping.split(""String_Node_Str"")[1];
        MetadataType metadataType=metadatasMap.get(oldConnector);
        if (metadataType != null) {
          metadataType.setConnector(newConnector);
          MetadataEmfFactory factory=new MetadataEmfFactory();
          factory.setMetadataType(metadataType);
          IMetadataTable metadataTable=factory.getMetadataTable();
          Schema schema=SchemaUtils.convertTalendSchemaIntoComponentSchema(ConvertionHelper.convert(metadataTable));
          compProperties.setValue(newParamName,schema);
        }
        if (!oldConnector.equals(newConnector)) {
          for (          Object connectionObj : processType.getConnection()) {
            if (connectionObj instanceof ConnectionType) {
              ConnectionType connectionType=(ConnectionType)connectionObj;
              if (connectionType.getSource().equals(uniqueName) && connectionType.getConnectorName().equals(oldConnector)) {
                connectionType.setConnectorName(newConnector);
              }
            }
          }
        }
      }
      for (      Object connectionObj : processType.getConnection()) {
        ConnectionType connection=(ConnectionType)connectionObj;
        if (connection.getSource() != null && connection.getSource().equals(uniqueName)) {
          if (EConnectionType.FLOW_MAIN.getName().equals(connection.getConnectorName())) {
            connection.setConnectorName(Connector.MAIN_NAME);
          }
        }
      }
      if (modified) {
        String serializedProperties=compProperties.toSerialized();
        if (serializedProperties != null) {
          ElementParameterType pType=ParameterUtilTool.createParameterType(null,""String_Node_Str"",serializedProperties);
          nodeType.getElementParameter().add(pType);
        }
      }
    }
  }
;
  if (processType != null) {
    boolean modified=false;
    for (    Object obj : processType.getNode()) {
      if (obj != null && obj instanceof NodeType) {
        String componentName=((NodeType)obj).getComponentName();
        String newComponentName=props.getProperty(componentName);
        if (newComponentName == null) {
          continue;
        }
        IComponentFilter filter=new NameComponentFilter(componentName);
        modified=ModifyComponentsAction.searchAndModify((NodeType)obj,filter,Arrays.<IComponentConversion>asList(conversion)) || modified;
      }
    }
    if (modified) {
      try {
        ProxyRepositoryFactory.getInstance().save(item,true);
        return ExecutionResult.SUCCESS_NO_ALERT;
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
        return ExecutionResult.FAILURE;
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(final Item item){
  final ProcessType processType=getProcessType(item);
  ComponentCategory category=ComponentCategory.getComponentCategoryFromItem(item);
  Properties props=getPropertiesFromFile();
  IComponentConversion conversion=new IComponentConversion(){
    @Override public void transform(    NodeType nodeType){
      if (nodeType == null || props == null) {
        return;
      }
      boolean modified=false;
      Map<String,String> schemaParamMap=new HashMap<>();
      String currComponentName=nodeType.getComponentName();
      String newComponentName=props.getProperty(currComponentName);
      nodeType.setComponentName(newComponentName);
      String label=ParameterUtilTool.getParameterValue(nodeType,""String_Node_Str"");
      if (label != null) {
        ElementParameterType paraType=ParameterUtilTool.findParameterType(nodeType,label.replaceAll(""String_Node_Str"",""String_Node_Str""));
        if (paraType != null) {
          ParameterUtilTool.findParameterType(nodeType,""String_Node_Str"").setValue(paraType.getValue());
          modified=true;
        }
      }
      IComponent component=ComponentsFactoryProvider.getInstance().get(newComponentName,category.getName());
      ComponentProperties compProperties=ComponentsUtils.getComponentProperties(newComponentName);
      FakeNode fNode=new FakeNode(component);
      ElementParameterType propertyParamType=getParameterType(nodeType,""String_Node_Str"");
      boolean isRepository=false;
      if (propertyParamType != null && ""String_Node_Str"".equals(propertyParamType.getValue())) {
        isRepository=true;
      }
      ElementParameterType sqlParamType=getParameterType(nodeType,""String_Node_Str"");
      boolean isSQLRepository=false;
      if (sqlParamType != null && ""String_Node_Str"".equals(propertyParamType.getValue())) {
        isSQLRepository=true;
      }
      for (      IElementParameter param : fNode.getElementParameters()) {
        if (param instanceof GenericElementParameter) {
          String paramName=param.getName();
          NamedThing currNamedThing=ComponentsUtils.getGenericSchemaElement(compProperties,paramName);
          String oldParamName=props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName);
          if (oldParamName != null && !(oldParamName=oldParamName.trim()).isEmpty()) {
            if (currNamedThing instanceof Property && (GenericTypeUtils.isSchemaType((Property<?>)currNamedThing))) {
              schemaParamMap.put(paramName,props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName+ IGenericConstants.EXP_SEPARATOR+ ""String_Node_Str""));
            }
            ElementParameterType paramType=getParameterType(nodeType,oldParamName);
            if (paramType != null) {
              if (currNamedThing instanceof ComponentReferenceProperties) {
                ComponentReferenceProperties refProps=(ComponentReferenceProperties)currNamedThing;
                refProps.referenceType.setValue(ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
                refProps.componentInstanceId.setStoredValue(ParameterUtilTool.convertParameterValue(paramType));
                refProps.componentInstanceId.setTaggedValue(IGenericConstants.ADD_QUOTES,true);
              }
 else {
                processMappedElementParameter(props,nodeType,(GenericElementParameter)param,paramType,currNamedThing);
              }
              ParameterUtilTool.removeParameterType(nodeType,paramType);
              modified=true;
            }
            if (EParameterFieldType.SCHEMA_REFERENCE.equals(param.getFieldType())) {
              String schemaTypeName=""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName();
              String repSchemaTypeName=""String_Node_Str"" + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
              paramType=getParameterType(nodeType,oldParamName + schemaTypeName);
              if (paramType != null) {
                paramType.setName(param.getName() + schemaTypeName);
              }
              paramType=getParameterType(nodeType,oldParamName + repSchemaTypeName);
              if (paramType != null) {
                paramType.setName(param.getName() + repSchemaTypeName);
              }
            }
          }
 else {
            processUnmappedElementParameter(props,nodeType,(GenericElementParameter)param,currNamedThing);
          }
          if (isRepository && isRepositoryParam(paramName) || isSQLRepository && ""String_Node_Str"".equals(paramName)) {
            ComponentsUtils.setPropertiesPepositoryValue(compProperties,paramName);
          }
        }
 else {
          if (EParameterFieldType.SCHEMA_REFERENCE.equals(param.getFieldType())) {
            String paramName=param.getName();
            schemaParamMap.put(paramName,props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName+ IGenericConstants.EXP_SEPARATOR+ ""String_Node_Str""));
            String oldParamName=props.getProperty(currComponentName + IGenericConstants.EXP_SEPARATOR + paramName);
            String schemaTypeName=""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName();
            String repSchemaTypeName=""String_Node_Str"" + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
            ElementParameterType paramType=getParameterType(nodeType,oldParamName + schemaTypeName);
            if (paramType != null) {
              paramType.setName(param.getName() + schemaTypeName);
            }
            paramType=getParameterType(nodeType,oldParamName + repSchemaTypeName);
            if (paramType != null) {
              paramType.setName(param.getName() + repSchemaTypeName);
            }
          }
        }
      }
      Map<String,MetadataType> metadatasMap=new HashMap<>();
      EList<MetadataType> metadatas=nodeType.getMetadata();
      for (      MetadataType metadataType : metadatas) {
        metadatasMap.put(metadataType.getConnector(),metadataType);
      }
      Iterator<Entry<String,String>> schemaParamIter=schemaParamMap.entrySet().iterator();
      String uniqueName=ParameterUtilTool.getParameterValue(nodeType,""String_Node_Str"");
      while (schemaParamIter.hasNext()) {
        Entry<String,String> schemaParamEntry=schemaParamIter.next();
        String newParamName=schemaParamEntry.getKey();
        String connectorMapping=schemaParamEntry.getValue();
        String oldConnector=connectorMapping.split(""String_Node_Str"")[0];
        String newConnector=connectorMapping.split(""String_Node_Str"")[1];
        MetadataType metadataType=metadatasMap.get(oldConnector);
        if (metadataType != null) {
          metadataType.setConnector(newConnector);
          MetadataEmfFactory factory=new MetadataEmfFactory();
          factory.setMetadataType(metadataType);
          IMetadataTable metadataTable=factory.getMetadataTable();
          Schema schema=SchemaUtils.convertTalendSchemaIntoComponentSchema(ConvertionHelper.convert(metadataTable));
          compProperties.setValue(newParamName,schema);
        }
        if (!oldConnector.equals(newConnector)) {
          for (          Object connectionObj : processType.getConnection()) {
            if (connectionObj instanceof ConnectionType) {
              ConnectionType connectionType=(ConnectionType)connectionObj;
              if (connectionType.getSource().equals(uniqueName) && connectionType.getConnectorName().equals(oldConnector)) {
                connectionType.setConnectorName(newConnector);
              }
            }
          }
        }
      }
      for (      Object connectionObj : processType.getConnection()) {
        ConnectionType connection=(ConnectionType)connectionObj;
        if (connection.getSource() != null && connection.getSource().equals(uniqueName)) {
          if (EConnectionType.FLOW_MAIN.getName().equals(connection.getConnectorName())) {
            connection.setConnectorName(Connector.MAIN_NAME);
          }
        }
      }
      if (modified) {
        String serializedProperties=compProperties.toSerialized();
        if (serializedProperties != null) {
          ElementParameterType pType=ParameterUtilTool.createParameterType(null,""String_Node_Str"",serializedProperties);
          nodeType.getElementParameter().add(pType);
        }
      }
    }
  }
;
  if (processType != null) {
    boolean modified=false;
    for (    Object obj : processType.getNode()) {
      if (obj != null && obj instanceof NodeType) {
        String componentName=((NodeType)obj).getComponentName();
        String newComponentName=props.getProperty(componentName);
        if (newComponentName == null) {
          continue;
        }
        IComponentFilter filter=new NameComponentFilter(componentName);
        modified=ModifyComponentsAction.searchAndModify((NodeType)obj,filter,Arrays.<IComponentConversion>asList(conversion)) || modified;
      }
    }
    if (modified) {
      try {
        ProxyRepositoryFactory.getInstance().save(item,true);
        return ExecutionResult.SUCCESS_NO_ALERT;
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
        return ExecutionResult.FAILURE;
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9591078066914498
117887,"public void propertyChange(PropertyChangeEvent evt){
}","@Override public void propertyChange(PropertyChangeEvent evt){
}",0.9152542372881356
117888,"@Override public Control createControl(Composite subComposite,IElementParameter param,int numInRow,int nbInRow,int top,Control lastControl){
  FormData data;
  CLabel labelLabel;
  if (param.getValue().equals(""String_Node_Str"")) {
    labelLabel=getWidgetFactory().createCLabel(subComposite,param.getDisplayName(),SWT.SHADOW_NONE);
  }
 else {
    labelLabel=getWidgetFactory().createCLabel(subComposite,(String)param.getValue(),SWT.SHADOW_NONE);
  }
  RGB rgb=param.getColor();
  if (rgb != null) {
    Color color=new Color(null,rgb);
    addResourceDisposeListener(labelLabel,color);
    labelLabel.setForeground(color);
  }
  RGB bgRgb=param.getBackgroundColor();
  if (bgRgb != null) {
    Color bgColor=new Color(null,bgRgb);
    addResourceDisposeListener(labelLabel,bgColor);
    labelLabel.setBackground(bgColor);
  }
  labelLabel.setData(PARAMETER_NAME,param.getName());
  if (elem instanceof Node) {
    labelLabel.setToolTipText(VARIABLE_TOOLTIP + param.getVariableName());
  }
  hashCurControls.put(param.getName(),labelLabel);
  data=new FormData();
  if (lastControl != null) {
    data.left=new FormAttachment(lastControl,0);
  }
 else {
    data.left=new FormAttachment((((numInRow - 1) * MAX_PERCENT) / nbInRow),0);
  }
  data.top=new FormAttachment(0,top);
  labelLabel.setLayoutData(data);
  if (numInRow != 1) {
    labelLabel.setAlignment(SWT.RIGHT);
  }
  data=new FormData();
  int currentLabelWidth=STANDARD_LABEL_WIDTH;
  GC gc=new GC(labelLabel);
  Point labelSize=gc.stringExtent(param.getDisplayName());
  gc.dispose();
  if ((labelSize.x + ITabbedPropertyConstants.HSPACE) > currentLabelWidth) {
    currentLabelWidth=labelSize.x + ITabbedPropertyConstants.HSPACE;
  }
  if (numInRow == 1) {
    if (lastControl != null) {
      data.left=new FormAttachment(lastControl,currentLabelWidth);
    }
 else {
      data.left=new FormAttachment(0,currentLabelWidth);
    }
  }
 else {
    data.left=new FormAttachment(labelLabel,0,SWT.RIGHT);
  }
  Point initialSize=labelLabel.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  dynamicProperty.setCurRowSize(initialSize.y + ITabbedPropertyConstants.VSPACE);
  return null;
}","@Override public Control createControl(Composite subComposite,IElementParameter param,int numInRow,int nbInRow,int top,Control lastControl){
  FormData data;
  CLabel labelLabel;
  if (param.getValue().equals(""String_Node_Str"")) {
    labelLabel=getWidgetFactory().createCLabel(subComposite,param.getDisplayName(),SWT.SHADOW_NONE);
  }
 else {
    labelLabel=getWidgetFactory().createCLabel(subComposite,(String)param.getValue(),SWT.SHADOW_NONE);
  }
  RGB rgb=param.getColor();
  RGB bgRgb=param.getBackgroundColor();
  if (rgb != null || bgRgb != null) {
    CoreUIPlugin.setCSSClass(labelLabel,""String_Node_Str"",false);
    if (rgb != null) {
      CoreUIPlugin.removeCSSAttribute(labelLabel,""String_Node_Str"");
      Color color=new Color(null,rgb);
      addResourceDisposeListener(labelLabel,color);
      labelLabel.setForeground(color);
    }
    if (bgRgb != null) {
      CoreUIPlugin.removeCSSAttribute(labelLabel,""String_Node_Str"");
      Color bgColor=new Color(null,bgRgb);
      addResourceDisposeListener(labelLabel,bgColor);
      labelLabel.setBackground(bgColor);
    }
  }
  labelLabel.setData(PARAMETER_NAME,param.getName());
  if (elem instanceof Node) {
    labelLabel.setToolTipText(VARIABLE_TOOLTIP + param.getVariableName());
  }
  hashCurControls.put(param.getName(),labelLabel);
  data=new FormData();
  if (lastControl != null) {
    data.left=new FormAttachment(lastControl,0);
  }
 else {
    data.left=new FormAttachment((((numInRow - 1) * MAX_PERCENT) / nbInRow),0);
  }
  data.top=new FormAttachment(0,top);
  labelLabel.setLayoutData(data);
  if (numInRow != 1) {
    labelLabel.setAlignment(SWT.RIGHT);
  }
  data=new FormData();
  int currentLabelWidth=STANDARD_LABEL_WIDTH;
  GC gc=new GC(labelLabel);
  Point labelSize=gc.stringExtent(param.getDisplayName());
  gc.dispose();
  if ((labelSize.x + ITabbedPropertyConstants.HSPACE) > currentLabelWidth) {
    currentLabelWidth=labelSize.x + ITabbedPropertyConstants.HSPACE;
  }
  if (numInRow == 1) {
    if (lastControl != null) {
      data.left=new FormAttachment(lastControl,currentLabelWidth);
    }
 else {
      data.left=new FormAttachment(0,currentLabelWidth);
    }
  }
 else {
    data.left=new FormAttachment(labelLabel,0,SWT.RIGHT);
  }
  Point initialSize=labelLabel.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  dynamicProperty.setCurRowSize(initialSize.y + ITabbedPropertyConstants.VSPACE);
  return null;
}",0.8665785997357992
117889,"/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,List<ModuleNeeded> modulesNeeded,IElementParameter curParam){
  Object value=curParam.getValue();
  String name=curParam.getName();
  if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=null;
          if (name.equals(""String_Node_Str"")) {
            object=map.get(""String_Node_Str"");
          }
 else {
            object=map.get(""String_Node_Str"");
          }
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulesInTable(process,curParam,modulesNeeded);
              }
 else {
                ModuleNeeded module=new ModuleNeeded(null,driverName,null,true);
                modulesNeeded.add(module);
              }
            }
          }
        }
      }
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    String jdbcName=(String)value;
    if (jdbcName != null) {
      String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
      String separator=""String_Node_Str"";
      if (jars.contains(separator)) {
        for (        String jar : jars.split(separator)) {
          if (!jar.contains(""String_Node_Str"")) {
            continue;
          }
          ModuleNeeded module=new ModuleNeeded(null,jar,null,true);
          modulesNeeded.add(module);
        }
      }
 else       if (jars.contains(""String_Node_Str"")) {
        ModuleNeeded module=new ModuleNeeded(null,jars,null,true);
        modulesNeeded.add(module);
      }
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    Object[] listItemsValue=curParam.getListItemsValue();
    for (    Map<String,Object> line : tableValues) {
      Object libPath=line.get(""String_Node_Str"");
      if (libPath == null) {
        continue;
      }
      String text=null;
      if (libPath instanceof String && !StringUtils.isEmpty((String)libPath)) {
        text=(String)libPath;
      }
 else       if (libPath instanceof Integer && listItemsValue != null) {
        int index=((Integer)libPath).intValue();
        if (index > -1 && index < listItemsValue.length && listItemsValue[index] != null) {
          if (listItemsValue[index] instanceof IElementParameter) {
            text=(String)((IElementParameter)listItemsValue[index]).getValue();
          }
 else {
            text=listItemsValue[index].toString();
          }
        }
      }
      if (text != null && text.contains(""String_Node_Str"")) {
        boolean isContextMode=ContextParameterUtils.containContextVariables(text);
        if (isContextMode) {
          List<IContext> listContext=process.getContextManager().getListContext();
          String var=ContextParameterUtils.getVariableFromCode(text);
          for (          IContext context : listContext) {
            List<IContextParameter> contextParameterList=context.getContextParameterList();
            for (            IContextParameter contextPara : contextParameterList) {
              String paramName=contextPara.getName();
              if (var.equals(paramName)) {
                ModuleNeeded module=getModuleNeededForContextParam(contextPara);
                if (module != null && !modulesNeeded.contains(module)) {
                  module.setDynamic(true);
                  modulesNeeded.add(module);
                }
              }
            }
          }
        }
 else {
          ModuleNeeded module=new ModuleNeeded(null,TalendTextUtils.removeQuotes(text),null,true);
          module.setDynamic(true);
          modulesNeeded.add(module);
        }
      }
    }
  }
 else   if (name.equals(EParameterName.HADOOP_CUSTOM_JARS.getDisplayName())) {
    String jarsName=(String)value;
    if (StringUtils.isNotEmpty(jarsName)) {
      String jars=jarsName.replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
      String separator=""String_Node_Str"";
      for (      String jar : jars.split(separator)) {
        ModuleNeeded module=new ModuleNeeded(null,jar,null,true);
        modulesNeeded.add(module);
      }
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,List<ModuleNeeded> modulesNeeded,IElementParameter curParam){
  Object value=curParam.getValue();
  String name=curParam.getName();
  if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=null;
          if (name.equals(""String_Node_Str"")) {
            object=map.get(""String_Node_Str"");
          }
 else {
            object=map.get(""String_Node_Str"");
          }
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulesInTable(process,curParam,modulesNeeded);
              }
 else {
                ModuleNeeded module=new ModuleNeeded(null,TalendTextUtils.removeQuotes(driverName),null,true);
                modulesNeeded.add(module);
              }
            }
          }
        }
      }
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    String jdbcName=(String)value;
    if (jdbcName != null) {
      String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
      String separator=""String_Node_Str"";
      if (jars.contains(separator)) {
        for (        String jar : jars.split(separator)) {
          if (!jar.contains(""String_Node_Str"")) {
            continue;
          }
          ModuleNeeded module=new ModuleNeeded(null,jar,null,true);
          modulesNeeded.add(module);
        }
      }
 else       if (jars.contains(""String_Node_Str"")) {
        ModuleNeeded module=new ModuleNeeded(null,jars,null,true);
        modulesNeeded.add(module);
      }
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    Object[] listItemsValue=curParam.getListItemsValue();
    for (    Map<String,Object> line : tableValues) {
      Object libPath=line.get(""String_Node_Str"");
      if (libPath == null) {
        continue;
      }
      String text=null;
      if (libPath instanceof String && !StringUtils.isEmpty((String)libPath)) {
        text=(String)libPath;
      }
 else       if (libPath instanceof Integer && listItemsValue != null) {
        int index=((Integer)libPath).intValue();
        if (index > -1 && index < listItemsValue.length && listItemsValue[index] != null) {
          if (listItemsValue[index] instanceof IElementParameter) {
            text=(String)((IElementParameter)listItemsValue[index]).getValue();
          }
 else {
            text=listItemsValue[index].toString();
          }
        }
      }
      if (text != null && text.contains(""String_Node_Str"")) {
        boolean isContextMode=ContextParameterUtils.containContextVariables(text);
        if (isContextMode) {
          List<IContext> listContext=process.getContextManager().getListContext();
          String var=ContextParameterUtils.getVariableFromCode(text);
          for (          IContext context : listContext) {
            List<IContextParameter> contextParameterList=context.getContextParameterList();
            for (            IContextParameter contextPara : contextParameterList) {
              String paramName=contextPara.getName();
              if (var.equals(paramName)) {
                ModuleNeeded module=getModuleNeededForContextParam(contextPara);
                if (module != null && !modulesNeeded.contains(module)) {
                  module.setDynamic(true);
                  modulesNeeded.add(module);
                }
              }
            }
          }
        }
 else {
          ModuleNeeded module=new ModuleNeeded(null,TalendTextUtils.removeQuotes(text),null,true);
          module.setDynamic(true);
          modulesNeeded.add(module);
        }
      }
    }
  }
 else   if (name.equals(EParameterName.HADOOP_CUSTOM_JARS.getDisplayName())) {
    String jarsName=(String)value;
    if (StringUtils.isNotEmpty(jarsName)) {
      String jars=jarsName.replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
      String separator=""String_Node_Str"";
      for (      String jar : jars.split(separator)) {
        ModuleNeeded module=new ModuleNeeded(null,jar,null,true);
        modulesNeeded.add(module);
      }
    }
  }
}",0.9952331606217616
117890,"@Override public String getMVNPath(String value){
  ModuleNeeded module=new ModuleNeeded(""String_Node_Str"",value,""String_Node_Str"",true);
  String mvnPath=module.getMavenUri();
  if (mvnPath != null && mvnPath.endsWith(""String_Node_Str"")) {
    mvnPath=mvnPath.substring(0,mvnPath.lastIndexOf(""String_Node_Str""));
    return TalendQuoteUtils.addQuotesIfNotExist(mvnPath);
  }
  return value;
}","@Override public String getMVNPath(String value){
  String valueNoQuote=TalendQuoteUtils.removeQuotes(value);
  boolean isMvnUri=MavenUrlHelper.isMvnUrl(valueNoQuote);
  ModuleNeeded module=null;
  if (isMvnUri) {
    module=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",true,valueNoQuote);
  }
 else {
    module=new ModuleNeeded(""String_Node_Str"",valueNoQuote,""String_Node_Str"",true);
  }
  String mvnPath=module.getMavenUri();
  if (mvnPath != null) {
    return TalendQuoteUtils.addQuotesIfNotExist(mvnPath);
  }
  return value;
}",0.5160599571734475
117891,"private String getSchema(){
  DatabaseConnection connection=(DatabaseConnection)((ConnectionItem)rootNode.getObject().getProperty().getItem()).getConnection();
  String schema=""String_Node_Str"";
  boolean isCalculationView=false;
  if (ConnectionUtils.isTeradata(connection.getURL())) {
    schema=connection.getSID();
  }
 else   if (EDatabaseTypeName.SAPHana.getDisplayName().equals(getCurrentDbType())) {
    if (erDiagram != null) {
      List<MetadataTable> tables=erDiagram.getMetadataTables();
      for (      MetadataTable table : tables) {
        if (MetadataManager.TYPE_CALCULATION_VIEW.equals(table.getTableType())) {
          isCalculationView=true;
        }
        schema=TaggedValueHelper.getValueString(GetTable.TABLE_SCHEM.name(),table);
        if (StringUtils.isEmpty(schema)) {
          schema=connection.getUiSchema();
        }
      }
    }
  }
 else {
    schema=connection.getUiSchema();
  }
  if (connection.isContextMode() && !isCalculationView) {
    schema=DatabaseConnectionParameterUtil.getContextTrueValue(connection,schema);
  }
  return schema;
}","private String getSchema(){
  DatabaseConnection connection=(DatabaseConnection)((ConnectionItem)rootNode.getObject().getProperty().getItem()).getConnection();
  String schema=""String_Node_Str"";
  boolean isCalculationView=false;
  if (ConnectionUtils.isTeradata(connection.getURL())) {
    schema=connection.getSID();
  }
 else   if (EDatabaseTypeName.SAPHana.getDisplayName().equals(getCurrentDbType())) {
    if (erDiagram != null) {
      List<MetadataTable> tables=erDiagram.getMetadataTables();
      for (      MetadataTable table : tables) {
        if (MetadataManager.TYPE_CALCULATION_VIEW.equals(table.getTableType())) {
          isCalculationView=true;
        }
        schema=TaggedValueHelper.getValueString(GetTable.TABLE_SCHEM.name(),table);
        if (StringUtils.isEmpty(schema)) {
          schema=connection.getUiSchema();
        }
      }
    }
  }
 else {
    schema=connection.getUiSchema();
  }
  if (connection.isContextMode() && !isCalculationView) {
    schema=DatabaseConnectionParameterUtil.getContextTrueValue(connection,schema);
  }
  if (schema == null) {
    schema=""String_Node_Str"";
  }
  return schema;
}",0.9623318385650224
117892,"public static void addNodeRelatedModules(final IProcess process,List<ModuleNeeded> modulesNeeded,INode node,boolean onlyMR){
  if (!node.isActivate()) {
    return;
  }
  List<ModuleNeeded> moduleList=node.getModulesNeeded();
  for (  ModuleNeeded needed : moduleList) {
    if (needed != null) {
      if (needed.isRequired(node.getElementParameters())) {
        if (onlyMR && !needed.isMrRequired()) {
          continue;
        }
        modulesNeeded.add(needed);
      }
    }
  }
  for (  IElementParameter curParam : node.getElementParameters()) {
    if (curParam.getFieldType() == null) {
      continue;
    }
    if (!curParam.isShow(node.getElementParameters())) {
      continue;
    }
    if (curParam.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
      if (curParam.getValue() != null && !""String_Node_Str"".equals(curParam.getValue())) {
        modulesNeeded.add(getModuleValue(process,(String)curParam.getValue()));
      }
    }
 else     if (curParam.getFieldType() == EParameterFieldType.TABLE) {
      getModulesInTable(process,curParam,modulesNeeded);
    }
    findMoreLibraries(process,modulesNeeded,curParam);
  }
}","public static void addNodeRelatedModules(final IProcess process,List<ModuleNeeded> modulesNeeded,INode node,boolean onlyMR){
  if (!node.isActivate()) {
    return;
  }
  List<ModuleNeeded> moduleList=node.getModulesNeeded();
  for (  ModuleNeeded needed : moduleList) {
    if (needed != null) {
      if (needed.isRequired(node.getElementParameters())) {
        if (onlyMR && !needed.isMrRequired()) {
          continue;
        }
        modulesNeeded.add(needed);
      }
    }
  }
  for (  IElementParameter curParam : node.getElementParameters()) {
    if (curParam.getFieldType() == null) {
      continue;
    }
    if (!curParam.isShow(node.getElementParameters())) {
      continue;
    }
    if (curParam.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
      Object curParamValue=curParam.getValue();
      if (curParamValue != null) {
        if (curParamValue instanceof String) {
          if (StringUtils.isNotEmpty((String)curParamValue)) {
            modulesNeeded.add(getModuleValue(process,(String)curParamValue));
          }
        }
 else         if (curParamValue instanceof List) {
          getModulesInTable(process,curParam,modulesNeeded);
        }
      }
    }
 else     if (curParam.getFieldType() == EParameterFieldType.TABLE) {
      getModulesInTable(process,curParam,modulesNeeded);
    }
    findMoreLibraries(process,modulesNeeded,curParam);
  }
}",0.8557993730407524
117893,"public void checkLinks(){
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJoblet=true;
    }
  }
  INodeConnector connectorFromType=getConnectorFromType(EConnectionType.FLOW_MAIN);
  if (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    if (connectorFromType != null && connectorFromType.isShow() && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (connectorFromType.getMinLinkInput() == 0) & (connectorFromType.getMaxLinkInput() != 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_REF) > 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if (getComponentProperties() == null) {
    if (connectorFromType != null && connectorFromType.isShow() && (connectorFromType.getMaxLinkInput() == 0) && (connectorFromType.getMaxLinkOutput() != 0)) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.WARNING,this,errorMessage);
      }
    }
  }
 else   if ((Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    for (    INodeConnector connector : getConnectorsFromType(EConnectionType.FLOW_MAIN)) {
      if (connector.isShow() && (connector.getMaxLinkInput() == 0) && (connector.getMaxLinkOutput() != 0)) {
        if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
          String errorMessage=Messages.getString(""String_Node_Str"");
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
    }
  }
  if (!isJoblet) {
    if (!isSubProcessStart() || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_OK) > 0) || getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_ERROR) > 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if ((!isELTComponent() && !isSubProcessStart()) || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbInput(EConnectionType.ON_SUBJOB_OK) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.RUN_IF) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_OK) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_ERROR) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.STARTS) > 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (isHL7Output()) {
      if (getIncomingConnections(EConnectionType.FLOW_MERGE).size() <= 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
 else {
        List<Map<String,String>> maps=(List<Map<String,String>>)ElementParameterParser.getObjectValue(this,""String_Node_Str"");
        List<IMetadataTable> tables=this.getMetadataList();
        for (        IConnection connection : getIncomingConnections(EConnectionType.FLOW_MERGE)) {
          IMetadataTable metadataTable=connection.getMetadataTable();
          String rowName=connection.getUniqueName();
          String schemaName=null;
          for (          Map<String,String> map : maps) {
            if (map.containsValue(rowName)) {
              if (map.get(""String_Node_Str"") != null && map.get(""String_Node_Str"").equals(rowName)) {
                schemaName=map.get(""String_Node_Str"");
                break;
              }
            }
          }
          for (          IMetadataTable nodeTable : tables) {
            if (nodeTable.getTableName() != null && nodeTable.getTableName().equals(schemaName)) {
              if (metadataTable != null && !metadataTable.sameMetadataAs(nodeTable,IMetadataColumn.OPTIONS_NONE)) {
                String errorMessage=Messages.getString(""String_Node_Str"");
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
      }
    }
    if (checkNodeCircle(this)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  int tableOutLinkNum=0;
  int tableRefOutLinkNum=0;
  List<? extends IConnection> tableOutLinks=this.getOutgoingConnections(EConnectionType.TABLE);
  if (null != tableOutLinks) {
    tableOutLinkNum=tableOutLinks.size();
  }
  List<? extends IConnection> tableRefOutLinks=this.getOutgoingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefOutLinks) {
    tableRefOutLinkNum=tableRefOutLinks.size();
  }
  int tableInLinkNum=0;
  int tableRefInLinkNum=0;
  List<? extends IConnection> tableInLinks=this.getIncomingConnections(EConnectionType.TABLE);
  if (null != tableInLinks) {
    tableInLinkNum=tableInLinks.size();
  }
  List<? extends IConnection> tableRefInLinks=this.getIncomingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefInLinks) {
    tableRefInLinkNum=tableRefInLinks.size();
  }
  int jobletBuildConnectorNum=0;
  boolean subQueryMode=true;
  INodeConnector tableRefConnector=getConnectorFromType(EConnectionType.TABLE_REF);
  if (null != tableRefConnector) {
    if (tableRefConnector.getMaxLinkOutput() == 0) {
      subQueryMode=false;
    }
  }
  for (  INodeConnector nodeConnector : listConnector) {
    if (!nodeConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.USE_HASH) && nodeConnector.getDefaultConnectionType() != EConnectionType.FLOW_MERGE) {
      boolean needCheckOutput=true;
      boolean needCheckInput=true;
      int nbMaxOut;
      nbMaxOut=nodeConnector.getMaxLinkOutput();
      int nbMaxIn;
      nbMaxIn=nodeConnector.getMaxLinkInput();
      int nbMinOut;
      nbMinOut=nodeConnector.getMinLinkOutput();
      int nbMinIn;
      nbMinIn=nodeConnector.getMinLinkInput();
      int curLinkOut;
      curLinkOut=nodeConnector.getCurLinkNbOutput();
      int curLinkIn;
      curLinkIn=nodeConnector.getCurLinkNbInput();
      String typeName=nodeConnector.getMenuName();
      boolean isCheckingTableLink=false;
      if (subQueryMode) {
        if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE) {
          if (0 < tableRefOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableRefInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
          if (this.getComponent().getName().endsWith(""String_Node_Str"") && tableOutLinks != null) {
            for (            IConnection iconn : tableOutLinks) {
              INode newTarget=iconn.getTarget();
              if (newTarget.isELTComponent() && newTarget.getComponent().getName().endsWith(""String_Node_Str"")) {
                Object[] errorParams=new String[]{this.getLabel(),newTarget.getLabel(),EConnectionType.TABLE_REF.getDefaultMenuName()};
                String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
 else         if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE_REF) {
          if (0 < tableOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableRefOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
        }
      }
      if (isCheckingTableLink) {
        typeName=EConnectionType.TABLE.getDefaultMenuName() + ""String_Node_Str"" + EConnectionType.TABLE_REF.getDefaultMenuName();
      }
      if (nodeConnector.getDefaultConnectionType() == EConnectionType.FLOW_MAIN) {
        typeName=""String_Node_Str"";
        if (isJoblet) {
          if (nodeConnector.isBuiltIn()) {
            jobletBuildConnectorNum++;
          }
          continue;
        }
      }
      if (needCheckOutput) {
        if (nbMaxOut != -1) {
          boolean notShow=!nodeConnector.isShow() && curLinkOut > 0;
          if (notShow || curLinkOut > nbMaxOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (nbMinOut != 0) {
          if (nodeConnector.isShow() && curLinkOut < nbMinOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
      }
      if (!isJoblet) {
        if (nbMaxIn != -1) {
          boolean notShow=!nodeConnector.isShow() && curLinkIn > 0;
          if (notShow || curLinkIn > nbMaxIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (needCheckInput) {
          if (nbMinIn != 0) {
            if (nodeConnector.isShow() && curLinkIn < nbMinIn) {
              String errorMessage=Messages.getString(""String_Node_Str"",typeName);
              Problems.add(ProblemStatus.WARNING,this,errorMessage);
            }
          }
        }
      }
    }
  }
  if (isJoblet) {
    List<IConnection> outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    for (    IConnection con : outgoingConnections) {
      INodeConnector connector=this.getConnectorFromName(con.getConnectorName());
      if (connector == null && con instanceof Connection) {
        ((Connection)con).disconnect();
      }
    }
    String typeName=""String_Node_Str"";
    outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    if (outgoingConnections.size() > jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
 else     if (outgoingConnections.size() < jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
}","public void checkLinks(){
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJoblet=true;
    }
  }
  INodeConnector connectorFromType=getConnectorFromType(EConnectionType.FLOW_MAIN);
  if (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    if (connectorFromType != null && connectorFromType.isShow() && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (connectorFromType.getMinLinkInput() == 0) & (connectorFromType.getMaxLinkInput() != 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_REF) > 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if (getComponentProperties() == null) {
    if (connectorFromType != null && connectorFromType.isShow() && (connectorFromType.getMaxLinkInput() == 0) && (connectorFromType.getMaxLinkOutput() != 0)) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.WARNING,this,errorMessage);
      }
    }
  }
 else   if ((Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    for (    INodeConnector connector : getConnectorsFromType(EConnectionType.FLOW_MAIN)) {
      if (connector.isShow() && (connector.getMaxLinkInput() == 0) && (connector.getMaxLinkOutput() != 0)) {
        if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
          String errorMessage=Messages.getString(""String_Node_Str"");
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
    }
  }
  if (!isJoblet) {
    if (!isSubProcessStart() || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_OK) > 0) || getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_ERROR) > 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if ((!isELTComponent() && !isSubProcessStart()) || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbInput(EConnectionType.ON_SUBJOB_OK) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.RUN_IF) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_OK) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_ERROR) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.STARTS) > 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (isHL7Output()) {
      if (getIncomingConnections(EConnectionType.FLOW_MERGE).size() <= 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
 else {
        List<Map<String,String>> maps=(List<Map<String,String>>)ElementParameterParser.getObjectValue(this,""String_Node_Str"");
        List<IMetadataTable> tables=this.getMetadataList();
        for (        IConnection connection : getIncomingConnections(EConnectionType.FLOW_MERGE)) {
          IMetadataTable metadataTable=connection.getMetadataTable();
          String rowName=connection.getUniqueName();
          String schemaName=null;
          if (maps != null) {
            for (            Map<String,String> map : maps) {
              if (map.containsValue(rowName)) {
                if (map.get(""String_Node_Str"") != null && map.get(""String_Node_Str"").equals(rowName)) {
                  schemaName=map.get(""String_Node_Str"");
                  break;
                }
              }
            }
          }
          for (          IMetadataTable nodeTable : tables) {
            if (nodeTable.getTableName() != null && nodeTable.getTableName().equals(schemaName)) {
              if (metadataTable != null && !metadataTable.sameMetadataAs(nodeTable,IMetadataColumn.OPTIONS_NONE)) {
                String errorMessage=Messages.getString(""String_Node_Str"");
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
      }
    }
    if (checkNodeCircle(this)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  int tableOutLinkNum=0;
  int tableRefOutLinkNum=0;
  List<? extends IConnection> tableOutLinks=this.getOutgoingConnections(EConnectionType.TABLE);
  if (null != tableOutLinks) {
    tableOutLinkNum=tableOutLinks.size();
  }
  List<? extends IConnection> tableRefOutLinks=this.getOutgoingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefOutLinks) {
    tableRefOutLinkNum=tableRefOutLinks.size();
  }
  int tableInLinkNum=0;
  int tableRefInLinkNum=0;
  List<? extends IConnection> tableInLinks=this.getIncomingConnections(EConnectionType.TABLE);
  if (null != tableInLinks) {
    tableInLinkNum=tableInLinks.size();
  }
  List<? extends IConnection> tableRefInLinks=this.getIncomingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefInLinks) {
    tableRefInLinkNum=tableRefInLinks.size();
  }
  int jobletBuildConnectorNum=0;
  boolean subQueryMode=true;
  INodeConnector tableRefConnector=getConnectorFromType(EConnectionType.TABLE_REF);
  if (null != tableRefConnector) {
    if (tableRefConnector.getMaxLinkOutput() == 0) {
      subQueryMode=false;
    }
  }
  for (  INodeConnector nodeConnector : listConnector) {
    if (!nodeConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.USE_HASH) && nodeConnector.getDefaultConnectionType() != EConnectionType.FLOW_MERGE) {
      boolean needCheckOutput=true;
      boolean needCheckInput=true;
      int nbMaxOut;
      nbMaxOut=nodeConnector.getMaxLinkOutput();
      int nbMaxIn;
      nbMaxIn=nodeConnector.getMaxLinkInput();
      int nbMinOut;
      nbMinOut=nodeConnector.getMinLinkOutput();
      int nbMinIn;
      nbMinIn=nodeConnector.getMinLinkInput();
      int curLinkOut;
      curLinkOut=nodeConnector.getCurLinkNbOutput();
      int curLinkIn;
      curLinkIn=nodeConnector.getCurLinkNbInput();
      String typeName=nodeConnector.getMenuName();
      boolean isCheckingTableLink=false;
      if (subQueryMode) {
        if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE) {
          if (0 < tableRefOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableRefInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
          if (this.getComponent().getName().endsWith(""String_Node_Str"") && tableOutLinks != null) {
            for (            IConnection iconn : tableOutLinks) {
              INode newTarget=iconn.getTarget();
              if (newTarget.isELTComponent() && newTarget.getComponent().getName().endsWith(""String_Node_Str"")) {
                Object[] errorParams=new String[]{this.getLabel(),newTarget.getLabel(),EConnectionType.TABLE_REF.getDefaultMenuName()};
                String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
 else         if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE_REF) {
          if (0 < tableOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableRefOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
        }
      }
      if (isCheckingTableLink) {
        typeName=EConnectionType.TABLE.getDefaultMenuName() + ""String_Node_Str"" + EConnectionType.TABLE_REF.getDefaultMenuName();
      }
      if (nodeConnector.getDefaultConnectionType() == EConnectionType.FLOW_MAIN) {
        typeName=""String_Node_Str"";
        if (isJoblet) {
          if (nodeConnector.isBuiltIn()) {
            jobletBuildConnectorNum++;
          }
          continue;
        }
      }
      if (needCheckOutput) {
        if (nbMaxOut != -1) {
          boolean notShow=!nodeConnector.isShow() && curLinkOut > 0;
          if (notShow || curLinkOut > nbMaxOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (nbMinOut != 0) {
          if (nodeConnector.isShow() && curLinkOut < nbMinOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
      }
      if (!isJoblet) {
        if (nbMaxIn != -1) {
          boolean notShow=!nodeConnector.isShow() && curLinkIn > 0;
          if (notShow || curLinkIn > nbMaxIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (needCheckInput) {
          if (nbMinIn != 0) {
            if (nodeConnector.isShow() && curLinkIn < nbMinIn) {
              String errorMessage=Messages.getString(""String_Node_Str"",typeName);
              Problems.add(ProblemStatus.WARNING,this,errorMessage);
            }
          }
        }
      }
    }
  }
  if (isJoblet) {
    List<IConnection> outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    for (    IConnection con : outgoingConnections) {
      INodeConnector connector=this.getConnectorFromName(con.getConnectorName());
      if (connector == null && con instanceof Connection) {
        ((Connection)con).disconnect();
      }
    }
    String typeName=""String_Node_Str"";
    outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    if (outgoingConnections.size() > jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
 else     if (outgoingConnections.size() < jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
}",0.9971483686991528
117894,"@SuppressWarnings(""String_Node_Str"") private void checkParameters(){
  boolean checkColumnExist=false;
  IMetadataTable metadataTable=null;
  List<IMetadataTable> tables=getMetadataList();
  if (tables != null && tables.size() == 1) {
    metadataTable=tables.get(0);
    checkColumnExist=true;
  }
  boolean checkPreColumnExist=false;
  IMetadataTable preMetadataTable=null;
  int preTableCount=0;
  List<? extends IConnection> incomingConnections=getIncomingConnections();
  if (incomingConnections != null && incomingConnections.size() > 0) {
    for (    IConnection incomingConnection : incomingConnections) {
      if (incomingConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        IMetadataTable schemaTable=incomingConnection.getMetadataTable();
        if (schemaTable != null) {
          ++preTableCount;
          if (preTableCount > 1) {
            break;
          }
          preMetadataTable=schemaTable;
        }
      }
    }
  }
  if (preTableCount == 1) {
    checkPreColumnExist=true;
  }
  List<String> currentColumns=new ArrayList<String>();
  if (checkColumnExist) {
    currentColumns=getColumnLabels(metadataTable);
  }
  List<String> preColumns=new ArrayList<String>();
  if (checkPreColumnExist) {
    preColumns=getColumnLabels(preMetadataTable);
  }
  for (  IElementParameter param : this.getElementParametersWithChildrens()) {
    if (param.getMaxlength() > 0) {
      String paramValue=param.getValue().toString();
      paramValue.length();
      String tmpValue;
      if (paramValue.startsWith(""String_Node_Str"") && paramValue.endsWith(""String_Node_Str"")) {
        tmpValue=paramValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        continue;
      }
      String factor=""String_Node_Str"";
      Pattern pattern=Pattern.compile(factor);
      Matcher matcher=pattern.matcher(tmpValue);
      int lenth=0;
      matcher.groupCount();
      while (matcher.find()) {
        lenth++;
      }
      String last=tmpValue.replaceAll(factor,""String_Node_Str"");
      last=last.replaceAll(""String_Node_Str"",""String_Node_Str"");
      int realLength=last.length() + lenth;
      if (realLength > param.getMaxlength()) {
        String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getMaxlength());
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (param.getFieldType() == EParameterFieldType.CLOSED_LIST) {
      String showIf=param.getShowIf();
      String notShowIf=param.getNotShowIf();
      IElementParameter dbTypeEle=this.getElementParameter(""String_Node_Str"");
      if (dbTypeEle != null && showIf != null && notShowIf == null) {
        String dbType=(String)dbTypeEle.getValue();
        boolean show=false;
        if (showIf.contains(dbType)) {
          show=true;
        }
        if (show && !ArrayUtils.contains(param.getListItemsValue(),param.getValue())) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"");
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName())) {
      }
 else {
        if (!ArrayUtils.contains(param.getListItemsValue(),param.getValue()) && !param.isDynamicSettings()) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"" + param.getDisplayName() + ""String_Node_Str"");
        }
      }
    }
    if (param.getFieldType() == EParameterFieldType.TABLE) {
      Object[] tableItemsValue=param.getListItemsValue();
      List<Map<String,Object>> tableValues=(List<Map<String,Object>>)param.getValue();
      List<String> columnListParamNames=new ArrayList<String>();
      List<String> preColumnListParamNames=new ArrayList<String>();
      if (tableItemsValue != null && tableItemsValue.length > 0) {
        for (        Object tabItemValue : tableItemsValue) {
          if (tabItemValue instanceof IElementParameter) {
            IElementParameter itemParameter=(IElementParameter)tabItemValue;
            if (itemParameter.getFieldType() == EParameterFieldType.COLUMN_LIST) {
              columnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.PREV_COLUMN_LIST) {
              preColumnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.CONTEXT_PARAM_NAME_LIST && tableValues.size() > 0) {
              Object[] itemsValue=itemParameter.getListItemsValue();
              if (itemParameter.getListItemsDisplayName() == null || itemParameter.getListItemsDisplayName().length == 0) {
                itemsValue=getContextParamsFromProcess();
              }
              for (int index=0; index < tableValues.size(); index++) {
                Map<String,Object> tabMap=tableValues.get(index);
                Object value=tabMap.get(itemParameter.getName());
                if (itemParameter.getListItemsValue() != null && value != null) {
                  boolean found=false;
                  for (                  Object o : itemsValue) {
                    if (o.equals(value)) {
                      found=true;
                      break;
                    }
                  }
                  if (!found) {
                    String warnMessage=Messages.getString(""String_Node_Str"",value,index,itemParameter.getDisplayName());
                    Problems.add(ProblemStatus.WARNING,this,warnMessage);
                  }
                }
              }
            }
          }
        }
      }
      StringBuffer inexistentColumns=new StringBuffer();
      if (tableValues != null) {
        for (        Map<String,Object> tabMap : tableValues) {
          int row=tableValues.indexOf(tabMap) + 1;
          if (checkColumnExist) {
            for (            String paramName : columnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !currentColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          if (checkPreColumnExist) {
            for (            String paramName : preColumnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !preColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          Object type=tabMap.get(""String_Node_Str"");
          if (type != null && type.toString().equals(""String_Node_Str"")) {
            Object code=tabMap.get(""String_Node_Str"");
            IMetadataTable metaTable=this.getMetadataTable(code.toString());
            if (metaTable != null) {
              if (metaTable.getListColumns(true).size() > 1) {
                String warnMessage=Messages.getString(""String_Node_Str"",metaTable.getLabel());
                Problems.add(ProblemStatus.WARNING,this,warnMessage);
              }
            }
          }
        }
      }
      if (inexistentColumns.length() > 0) {
        inexistentColumns.deleteCharAt(inexistentColumns.length() - 1);
        String warnMessage=Messages.getString(""String_Node_Str"",inexistentColumns.toString(),param.getDisplayName());
        Problems.add(ProblemStatus.WARNING,this,warnMessage);
      }
    }
    if (param.getName().equals(EParameterName.COMMENT.getName())) {
      String infoValue=(String)param.getValue();
      if (infoValue != null && !infoValue.equals(""String_Node_Str"")) {
        Problems.add(ProblemStatus.INFO,this,infoValue);
      }
    }
    List<IElementParameter> emptyParamList=Collections.emptyList();
    Boolean noConditionOnShow=StringUtils.isEmpty(param.getShowIf()) && StringUtils.isEmpty(param.getNotShowIf());
    if (param.isRequired(getElementParameters()) && !param.isShow(emptyParamList) && noConditionOnShow&& this.externalNode != null) {
      if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
        if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
          checkFileOutputMSXML(param,tableValues);
        }
 else         if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"") && tableValues.size() != 0) {
          if (((Boolean)this.getElementParameter(""String_Node_Str"").getValue()) == true) {
            List<Map<String,String>> listGroup=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            List<Map<String,String>> listLoop=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            if (listGroup.size() == 0 || listLoop.size() == 0) {
              String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
        }
 else {
          if (tableValues == null || tableValues.size() == 0) {
            String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
            Problems.add(ProblemStatus.ERROR,this,errorMessage);
          }
        }
      }
    }
    if (param.isRequired() && param.isShow(getElementParameters())) {
      EParameterFieldType fieldType=param.getFieldType();
      String value;
      List multiSchemaDelimetedSeparaor=new ArrayList();
switch (fieldType) {
case TABLE:
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
      if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
        checkFileOutputMSXML(param,tableValues);
      }
 else {
        if (tableValues == null || tableValues.size() == 0) {
          String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
          Problems.add(ProblemStatus.ERROR,this,errorMessage);
        }
 else         if (this.getComponent().getName().equals(""String_Node_Str"")) {
          for (          Map<String,String> map : tableValues) {
            if (map != null) {
              if (""String_Node_Str"".equals(map.get(""String_Node_Str"")) || map.get(""String_Node_Str"") == null) {
                Problems.add(ProblemStatus.ERROR,this,Messages.getString(""String_Node_Str""));
              }
            }
          }
        }
      }
    break;
case CHECK:
  break;
case RADIO:
break;
case SCHEMA_TYPE:
break;
case SCHEMA_REFERENCE:
break;
case DCSCHEMA:
break;
case MEMO_SQL:
String errMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Object value2=param.getValue();
if (value2 == null) {
break;
}
String currentQuery=value2.toString();
if (CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_WARNING)) {
if (currentQuery.indexOf(COMPARE_STR1) != -1 || currentQuery.indexOf(COMPARE_STR2) != -1) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
if (!NodeQueryCheckUtil.checkQueryOK(this,currentQuery)) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
}
break;
case CLOSED_LIST:
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
if (param.getListItemsValue().length != 0) {
boolean found=false;
for (int i=0; i < param.getListItemsValue().length && !found; i++) {
if (param.getListItemsValue()[i].equals(value)) {
found=true;
}
}
if (!found) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),value);
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
break;
case COMPONENT_LIST:
if (param != null) {
String errorMessage;
if (param.getValue() == null || ""String_Node_Str"".equals(param.getValue())) {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
}
 else {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getValue());
}
if ((!hasUseExistingConnection(this)) || (isUseExistedConnetion(this))) {
List<INode> list=(List<INode>)this.getProcess().getNodesOfType(param.getFilter());
if (list == null || list.size() == 0 || list.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
List<INode> nodeList=new ArrayList<INode>();
for (INode datanode : list) {
if (!datanode.isVirtualGenerateNode()) {
nodeList.add(datanode);
}
}
if (nodeList.size() == 0 || nodeList.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
break;
}
boolean foundValue=false;
for (INode datanode : nodeList) {
if (datanode.getUniqueName().equals(param.getValue())) {
foundValue=true;
break;
}
}
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
if (!foundValue) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
}
break;
default :
if (param.getValue() != null && !(param.getValue() instanceof String)) {
break;
}
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
if (this.getComponent() != null && ""String_Node_Str"".equals(this.getComponent().getName())) {
multiSchemaDelimetedSeparaor.add(param);
if (multiSchemaDelimetedSeparaor.size() == 2) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
 else {
if (getComponent() != null && ""String_Node_Str"".equals(getComponent().getName())) {
IElementParameter fromRepository=getElementParameter(""String_Node_Str"");
Object isFromRepository=fromRepository.getValue();
if (isFromRepository != null && ""String_Node_Str"".equals(isFromRepository.toString())) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
}
}
 else {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
checkDataprepRun(param);
}
}
checkValidationRule(param);
checktAggregateRow(param);
}
checkJobletConnections();
IElementParameter enableParallelizeParameter=getElementParameter(EParameterName.PARALLELIZE.getName());
if (enableParallelizeParameter != null && enableParallelizeParameter.getValue() != null) {
boolean x=(Boolean)enableParallelizeParameter.getValue();
if (x) {
addStatus(Process.PARALLEL_STATUS);
}
}
}","@SuppressWarnings(""String_Node_Str"") private void checkParameters(){
  boolean checkColumnExist=false;
  IMetadataTable metadataTable=null;
  List<IMetadataTable> tables=getMetadataList();
  if (tables != null && tables.size() == 1) {
    metadataTable=tables.get(0);
    checkColumnExist=true;
  }
  boolean checkPreColumnExist=false;
  IMetadataTable preMetadataTable=null;
  int preTableCount=0;
  List<? extends IConnection> incomingConnections=getIncomingConnections();
  if (incomingConnections != null && incomingConnections.size() > 0) {
    for (    IConnection incomingConnection : incomingConnections) {
      if (incomingConnection.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        IMetadataTable schemaTable=incomingConnection.getMetadataTable();
        if (schemaTable != null) {
          ++preTableCount;
          if (preTableCount > 1) {
            break;
          }
          preMetadataTable=schemaTable;
        }
      }
    }
  }
  if (preTableCount == 1) {
    checkPreColumnExist=true;
  }
  List<String> currentColumns=new ArrayList<String>();
  if (checkColumnExist) {
    currentColumns=getColumnLabels(metadataTable);
  }
  List<String> preColumns=new ArrayList<String>();
  if (checkPreColumnExist) {
    preColumns=getColumnLabels(preMetadataTable);
  }
  for (  IElementParameter param : this.getElementParametersWithChildrens()) {
    if (param.getMaxlength() > 0) {
      String paramValue=param.getValue().toString();
      paramValue.length();
      String tmpValue;
      if (paramValue.startsWith(""String_Node_Str"") && paramValue.endsWith(""String_Node_Str"")) {
        tmpValue=paramValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        continue;
      }
      String factor=""String_Node_Str"";
      Pattern pattern=Pattern.compile(factor);
      Matcher matcher=pattern.matcher(tmpValue);
      int lenth=0;
      matcher.groupCount();
      while (matcher.find()) {
        lenth++;
      }
      String last=tmpValue.replaceAll(factor,""String_Node_Str"");
      last=last.replaceAll(""String_Node_Str"",""String_Node_Str"");
      int realLength=last.length() + lenth;
      if (realLength > param.getMaxlength()) {
        String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getMaxlength());
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (param.getFieldType() == EParameterFieldType.CLOSED_LIST) {
      String showIf=param.getShowIf();
      String notShowIf=param.getNotShowIf();
      IElementParameter dbTypeEle=this.getElementParameter(""String_Node_Str"");
      if (dbTypeEle != null && showIf != null && notShowIf == null) {
        String dbType=(String)dbTypeEle.getValue();
        boolean show=false;
        if (showIf.contains(dbType)) {
          show=true;
        }
        if (show && !ArrayUtils.contains(param.getListItemsValue(),param.getValue())) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"");
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName())) {
      }
 else {
        if (!ArrayUtils.contains(param.getListItemsValue(),param.getValue()) && !param.isDynamicSettings()) {
          Problems.add(ProblemStatus.ERROR,this,""String_Node_Str"" + param.getDisplayName() + ""String_Node_Str"");
        }
      }
    }
    if (param.getFieldType() == EParameterFieldType.TABLE) {
      Object[] tableItemsValue=param.getListItemsValue();
      List<Map<String,Object>> tableValues=(List<Map<String,Object>>)param.getValue();
      List<String> columnListParamNames=new ArrayList<String>();
      List<String> preColumnListParamNames=new ArrayList<String>();
      if (tableItemsValue != null && tableItemsValue.length > 0) {
        for (        Object tabItemValue : tableItemsValue) {
          if (tabItemValue instanceof IElementParameter) {
            IElementParameter itemParameter=(IElementParameter)tabItemValue;
            if (itemParameter.getFieldType() == EParameterFieldType.COLUMN_LIST) {
              columnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.PREV_COLUMN_LIST) {
              preColumnListParamNames.add(itemParameter.getName());
            }
            if (itemParameter.getFieldType() == EParameterFieldType.CONTEXT_PARAM_NAME_LIST && tableValues.size() > 0) {
              Object[] itemsValue=itemParameter.getListItemsValue();
              if (itemParameter.getListItemsDisplayName() == null || itemParameter.getListItemsDisplayName().length == 0) {
                itemsValue=getContextParamsFromProcess();
              }
              for (int index=0; index < tableValues.size(); index++) {
                Map<String,Object> tabMap=tableValues.get(index);
                Object value=tabMap.get(itemParameter.getName());
                if (itemParameter.getListItemsValue() != null && value != null) {
                  boolean found=false;
                  for (                  Object o : itemsValue) {
                    if (o.equals(value)) {
                      found=true;
                      break;
                    }
                  }
                  if (!found) {
                    String warnMessage=Messages.getString(""String_Node_Str"",value,index,itemParameter.getDisplayName());
                    Problems.add(ProblemStatus.WARNING,this,warnMessage);
                  }
                }
              }
            }
          }
        }
      }
      StringBuffer inexistentColumns=new StringBuffer();
      if (tableValues != null) {
        for (        Map<String,Object> tabMap : tableValues) {
          int row=tableValues.indexOf(tabMap) + 1;
          if (checkColumnExist) {
            for (            String paramName : columnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !currentColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          if (checkPreColumnExist) {
            for (            String paramName : preColumnListParamNames) {
              Object columnLineValue=tabMap.get(paramName);
              if (columnLineValue instanceof String && !preColumns.contains(columnLineValue)) {
                inexistentColumns.append(columnLineValue).append(""String_Node_Str"" + row + ""String_Node_Str"").append(""String_Node_Str"");
              }
            }
          }
          Object type=tabMap.get(""String_Node_Str"");
          if (type != null && type.toString().equals(""String_Node_Str"")) {
            Object code=tabMap.get(""String_Node_Str"");
            IMetadataTable metaTable=this.getMetadataTable(code.toString());
            if (metaTable != null) {
              if (metaTable.getListColumns(true).size() > 1) {
                String warnMessage=Messages.getString(""String_Node_Str"",metaTable.getLabel());
                Problems.add(ProblemStatus.WARNING,this,warnMessage);
              }
            }
          }
        }
      }
      if (inexistentColumns.length() > 0) {
        inexistentColumns.deleteCharAt(inexistentColumns.length() - 1);
        String warnMessage=Messages.getString(""String_Node_Str"",inexistentColumns.toString(),param.getDisplayName());
        Problems.add(ProblemStatus.WARNING,this,warnMessage);
      }
    }
    if (param.getName().equals(EParameterName.COMMENT.getName())) {
      String infoValue=(String)param.getValue();
      if (infoValue != null && !infoValue.equals(""String_Node_Str"")) {
        Problems.add(ProblemStatus.INFO,this,infoValue);
      }
    }
    List<IElementParameter> emptyParamList=Collections.emptyList();
    Boolean noConditionOnShow=StringUtils.isEmpty(param.getShowIf()) && StringUtils.isEmpty(param.getNotShowIf());
    if (param.isRequired(getElementParameters()) && !param.isShow(emptyParamList) && noConditionOnShow&& this.externalNode != null) {
      if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
        if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
          checkFileOutputMSXML(param,tableValues);
        }
 else         if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"") && tableValues.size() != 0) {
          if (((Boolean)this.getElementParameter(""String_Node_Str"").getValue()) == true) {
            List<Map<String,String>> listGroup=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            List<Map<String,String>> listLoop=(List<Map<String,String>>)externalNode.getElementParameter(""String_Node_Str"").getValue();
            if (listGroup.size() == 0 || listLoop.size() == 0) {
              String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
        }
 else {
          if (tableValues == null || tableValues.size() == 0) {
            String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
            Problems.add(ProblemStatus.ERROR,this,errorMessage);
          }
        }
      }
    }
    if (param.isRequired() && param.isShow(getElementParameters())) {
      EParameterFieldType fieldType=param.getFieldType();
      String value;
      List multiSchemaDelimetedSeparaor=new ArrayList();
switch (fieldType) {
case TABLE:
        List<Map<String,String>> tableValues=(List<Map<String,String>>)param.getValue();
      if (tableValues != null && ""String_Node_Str"".equalsIgnoreCase(component.getName()) && param.getName().equals(""String_Node_Str"")) {
        checkFileOutputMSXML(param,tableValues);
      }
 else {
        if (tableValues == null || tableValues.size() == 0) {
          String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
          Problems.add(ProblemStatus.ERROR,this,errorMessage);
        }
 else         if (this.getComponent().getName().equals(""String_Node_Str"")) {
          for (          Map<String,String> map : tableValues) {
            if (map != null) {
              if (""String_Node_Str"".equals(map.get(""String_Node_Str"")) || map.get(""String_Node_Str"") == null) {
                Problems.add(ProblemStatus.ERROR,this,Messages.getString(""String_Node_Str""));
              }
            }
          }
        }
      }
    break;
case CHECK:
  break;
case RADIO:
break;
case SCHEMA_TYPE:
break;
case SCHEMA_REFERENCE:
break;
case DCSCHEMA:
break;
case MEMO_SQL:
String errMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Object value2=param.getValue();
if (value2 == null) {
break;
}
String currentQuery=value2.toString();
if (CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_WARNING)) {
if (currentQuery.indexOf(COMPARE_STR1) != -1 || currentQuery.indexOf(COMPARE_STR2) != -1) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
if (!NodeQueryCheckUtil.checkQueryOK(this,currentQuery)) {
Problems.add(ProblemStatus.WARNING,this,errMessage);
break;
}
}
break;
case CLOSED_LIST:
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
if (param.getListItemsValue().length != 0) {
boolean found=false;
for (int i=0; i < param.getListItemsValue().length && !found; i++) {
if (param.getListItemsValue()[i].equals(value)) {
found=true;
}
}
if (!found) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),value);
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
break;
case COMPONENT_LIST:
if (param != null) {
String errorMessage;
boolean isContextMode=false;
if (param.getValue() == null || ""String_Node_Str"".equals(param.getValue())) {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
}
 else {
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName(),param.getValue());
isContextMode=param.isDynamicSettings();
}
if (!isContextMode && ((!hasUseExistingConnection(this)) || (isUseExistedConnetion(this)))) {
List<INode> list=(List<INode>)this.getProcess().getNodesOfType(param.getFilter());
if (list == null || list.size() == 0 || list.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
List<INode> nodeList=new ArrayList<INode>();
for (INode datanode : list) {
if (!datanode.isVirtualGenerateNode()) {
nodeList.add(datanode);
}
}
if (nodeList.size() == 0 || nodeList.isEmpty()) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
break;
}
boolean foundValue=false;
for (INode datanode : nodeList) {
if (datanode.getUniqueName().equals(param.getValue())) {
foundValue=true;
break;
}
}
errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
if (!foundValue) {
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
}
break;
default :
if (param.getValue() != null && !(param.getValue() instanceof String)) {
break;
}
value=(String)param.getValue();
if (value == null || value.equals(""String_Node_Str"")) {
if (this.getComponent() != null && ""String_Node_Str"".equals(this.getComponent().getName())) {
multiSchemaDelimetedSeparaor.add(param);
if (multiSchemaDelimetedSeparaor.size() == 2) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
 else {
if (getComponent() != null && ""String_Node_Str"".equals(getComponent().getName())) {
IElementParameter fromRepository=getElementParameter(""String_Node_Str"");
Object isFromRepository=fromRepository.getValue();
if (isFromRepository != null && ""String_Node_Str"".equals(isFromRepository.toString())) {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
 else {
}
}
 else {
String errorMessage=Messages.getString(""String_Node_Str"",param.getDisplayName());
Problems.add(ProblemStatus.ERROR,this,errorMessage);
}
}
}
checkDataprepRun(param);
}
}
checkValidationRule(param);
checktAggregateRow(param);
}
checkJobletConnections();
IElementParameter enableParallelizeParameter=getElementParameter(EParameterName.PARALLELIZE.getName());
if (enableParallelizeParameter != null && enableParallelizeParameter.getValue() != null) {
boolean x=(Boolean)enableParallelizeParameter.getValue();
if (x) {
addStatus(Process.PARALLEL_STATUS);
}
}
}",0.9969629479651752
117895,"public static boolean canConnectToTarget(INode source,INode oldTarget,INode newTarget,EConnectionType lineStyle,String connectorName,String connectionName,boolean refactorJoblet){
  newlineStyle=lineStyle;
  if (source.equals(newTarget)) {
    return false;
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      if (service.isTriggerNode(newTarget) && !service.canConnectTriggerNode(newTarget,lineStyle)) {
        return false;
      }
      if (service.isJobletComponent(source.getJobletNode())) {
        return false;
      }
    }
  }
  INode processStartNode=source.getProcessStartNode(true);
  if (processStartNode.equals(newTarget)) {
    return false;
  }
  if (newTarget.isELTComponent() && newTarget.getComponent().getName().endsWith(""String_Node_Str"")) {
    String targetName=newTarget.getComponent().getOriginalFamilyName();
    String sourceName=processStartNode.getComponent().getOriginalFamilyName();
    if (!targetName.equals(sourceName) && !(lineStyle.hasConnectionCategory(IConnectionCategory.DEPENDENCY))) {
      return false;
    }
  }
  if (checkCircle(source,newTarget)) {
    return false;
  }
  if (newTarget.isFileScaleComponent()) {
    if (newlineStyle.hasConnectionCategory(IConnectionCategory.FLOW) && !connectorName.equals(""String_Node_Str"")) {
      return false;
    }
  }
  if (newlineStyle.hasConnectionCategory(IConnectionCategory.FLOW)) {
    newlineStyle=EConnectionType.FLOW_MAIN;
    if (newTarget.getComponent().useLookup()) {
      int nbMain=0;
      for (      IConnection connec : newTarget.getIncomingConnections()) {
        if (connec.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
          nbMain++;
        }
      }
      if (nbMain >= 1) {
        newlineStyle=EConnectionType.FLOW_REF;
      }
 else {
        newlineStyle=EConnectionType.FLOW_MAIN;
      }
    }
 else     if (newTarget.getComponent().useMerge()) {
      newlineStyle=EConnectionType.FLOW_MERGE;
    }
  }
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(newTarget) && !lineStyle.hasConnectionCategory(IConnectionCategory.FLOW)) {
      List<INodeConnector> inputConnector=service.getFreeTriggerBuiltConnectors(newTarget,lineStyle,true);
      if (inputConnector.isEmpty()) {
        return false;
      }
      isJoblet=true;
    }
  }
  if (!isJoblet) {
    INodeConnector connectorFromType=newTarget.getConnectorFromType(newlineStyle);
    if (connectorFromType == null) {
      return false;
    }
    int maxInput=connectorFromType.getMaxLinkInput();
    if (maxInput != -1 && (connectorFromType.getCurLinkNbInput() >= maxInput)) {
      return false;
    }
  }
  if (!canConnect(source,newTarget,lineStyle,connectionName,refactorJoblet)) {
    return false;
  }
  return true;
}","public static boolean canConnectToTarget(INode source,INode oldTarget,INode newTarget,EConnectionType lineStyle,String connectorName,String connectionName,boolean refactorJoblet){
  newlineStyle=lineStyle;
  if (source.equals(newTarget)) {
    return false;
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      if (service.isTriggerNode(newTarget) && !service.canConnectTriggerNode(newTarget,lineStyle)) {
        return false;
      }
      if (service.isJobletComponent(source.getJobletNode())) {
        return false;
      }
    }
  }
  INode processStartNode=source.getProcessStartNode(true);
  if (processStartNode.equals(newTarget)) {
    return false;
  }
  if (newTarget.isELTComponent() && newTarget.getComponent().getName().endsWith(""String_Node_Str"")) {
    String targetName=newTarget.getComponent().getOriginalFamilyName();
    String sourceName=processStartNode.getComponent().getOriginalFamilyName();
    if (!targetName.equals(sourceName) && !(lineStyle.hasConnectionCategory(IConnectionCategory.DEPENDENCY))) {
      return false;
    }
  }
  if (checkCircle(source,newTarget)) {
    return false;
  }
  if (newTarget.isFileScaleComponent()) {
    if (newlineStyle.hasConnectionCategory(IConnectionCategory.FLOW) && !connectorName.equals(""String_Node_Str"")) {
      return false;
    }
  }
  if (newlineStyle.hasConnectionCategory(IConnectionCategory.FLOW)) {
    newlineStyle=EConnectionType.FLOW_MAIN;
    if (newTarget.getComponent().useLookup()) {
      int nbMain=0;
      for (      IConnection connec : newTarget.getIncomingConnections()) {
        if (connec.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
          nbMain++;
        }
      }
      if (nbMain >= 1) {
        newlineStyle=EConnectionType.FLOW_REF;
      }
 else {
        newlineStyle=EConnectionType.FLOW_MAIN;
      }
    }
 else     if (newTarget.getComponent().useMerge()) {
      newlineStyle=EConnectionType.FLOW_MERGE;
    }
  }
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(newTarget) && !lineStyle.hasConnectionCategory(IConnectionCategory.FLOW)) {
      List<INodeConnector> inputConnector=service.getFreeTriggerBuiltConnectors(newTarget,lineStyle,true);
      if (inputConnector.isEmpty()) {
        return false;
      }
      isJoblet=true;
    }
  }
  if (!isJoblet) {
    INodeConnector connectorFromType=newTarget.getConnectorFromType(newlineStyle);
    if (connectorFromType == null || !connectorFromType.isShow()) {
      return false;
    }
    int maxInput=connectorFromType.getMaxLinkInput();
    if (maxInput != -1 && (connectorFromType.getCurLinkNbInput() >= maxInput)) {
      return false;
    }
  }
  if (!canConnect(source,newTarget,lineStyle,connectionName,refactorJoblet)) {
    return false;
  }
  return true;
}",0.9950104619346531
117896,"public void checkLinks(){
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJoblet=true;
    }
  }
  INodeConnector connectorFromType=getConnectorFromType(EConnectionType.FLOW_MAIN);
  if (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    if (connectorFromType != null && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (connectorFromType.getMinLinkInput() == 0) & (connectorFromType.getMaxLinkInput() != 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_REF) > 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if (getComponentProperties() == null) {
    if (connectorFromType != null && connectorFromType.isShow() && (connectorFromType.getMaxLinkInput() == 0) && (connectorFromType.getMaxLinkOutput() != 0)) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.WARNING,this,errorMessage);
      }
    }
  }
 else   if ((Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    for (    INodeConnector connector : getConnectorsFromType(EConnectionType.FLOW_MAIN)) {
      if (connector.isShow() && (connector.getMaxLinkInput() == 0) && (connector.getMaxLinkOutput() != 0)) {
        if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
          String errorMessage=Messages.getString(""String_Node_Str"");
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
    }
  }
  if (!isJoblet) {
    if (!isSubProcessStart() || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_OK) > 0) || getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_ERROR) > 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if ((!isELTComponent() && !isSubProcessStart()) || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbInput(EConnectionType.ON_SUBJOB_OK) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.RUN_IF) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_OK) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_ERROR) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.STARTS) > 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (isHL7Output()) {
      if (getIncomingConnections(EConnectionType.FLOW_MERGE).size() <= 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
 else {
        List<Map<String,String>> maps=(List<Map<String,String>>)ElementParameterParser.getObjectValue(this,""String_Node_Str"");
        List<IMetadataTable> tables=this.getMetadataList();
        for (        IConnection connection : getIncomingConnections(EConnectionType.FLOW_MERGE)) {
          IMetadataTable metadataTable=connection.getMetadataTable();
          String rowName=connection.getUniqueName();
          String schemaName=null;
          for (          Map<String,String> map : maps) {
            if (map.containsValue(rowName)) {
              if (map.get(""String_Node_Str"") != null && map.get(""String_Node_Str"").equals(rowName)) {
                schemaName=map.get(""String_Node_Str"");
                break;
              }
            }
          }
          for (          IMetadataTable nodeTable : tables) {
            if (nodeTable.getTableName() != null && nodeTable.getTableName().equals(schemaName)) {
              if (metadataTable != null && !metadataTable.sameMetadataAs(nodeTable,IMetadataColumn.OPTIONS_NONE)) {
                String errorMessage=Messages.getString(""String_Node_Str"");
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
      }
    }
    if (checkNodeCircle(this)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  int tableOutLinkNum=0;
  int tableRefOutLinkNum=0;
  List<? extends IConnection> tableOutLinks=this.getOutgoingConnections(EConnectionType.TABLE);
  if (null != tableOutLinks) {
    tableOutLinkNum=tableOutLinks.size();
  }
  List<? extends IConnection> tableRefOutLinks=this.getOutgoingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefOutLinks) {
    tableRefOutLinkNum=tableRefOutLinks.size();
  }
  int tableInLinkNum=0;
  int tableRefInLinkNum=0;
  List<? extends IConnection> tableInLinks=this.getIncomingConnections(EConnectionType.TABLE);
  if (null != tableInLinks) {
    tableInLinkNum=tableInLinks.size();
  }
  List<? extends IConnection> tableRefInLinks=this.getIncomingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefInLinks) {
    tableRefInLinkNum=tableRefInLinks.size();
  }
  int jobletBuildConnectorNum=0;
  boolean subQueryMode=true;
  INodeConnector tableRefConnector=getConnectorFromType(EConnectionType.TABLE_REF);
  if (null != tableRefConnector) {
    if (tableRefConnector.getMaxLinkOutput() == 0) {
      subQueryMode=false;
    }
  }
  for (  INodeConnector nodeConnector : listConnector) {
    if (!nodeConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.USE_HASH) && nodeConnector.getDefaultConnectionType() != EConnectionType.FLOW_MERGE) {
      boolean needCheckOutput=true;
      boolean needCheckInput=true;
      int nbMaxOut;
      nbMaxOut=nodeConnector.getMaxLinkOutput();
      int nbMaxIn;
      nbMaxIn=nodeConnector.getMaxLinkInput();
      int nbMinOut;
      nbMinOut=nodeConnector.getMinLinkOutput();
      int nbMinIn;
      nbMinIn=nodeConnector.getMinLinkInput();
      int curLinkOut;
      curLinkOut=nodeConnector.getCurLinkNbOutput();
      int curLinkIn;
      curLinkIn=nodeConnector.getCurLinkNbInput();
      String typeName=nodeConnector.getMenuName();
      boolean isCheckingTableLink=false;
      if (subQueryMode) {
        if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE) {
          if (0 < tableRefOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableRefInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
          if (this.getComponent().getName().endsWith(""String_Node_Str"") && tableOutLinks != null) {
            for (            IConnection iconn : tableOutLinks) {
              INode newTarget=iconn.getTarget();
              if (newTarget.isELTComponent() && newTarget.getComponent().getName().endsWith(""String_Node_Str"")) {
                Object[] errorParams=new String[]{this.getLabel(),newTarget.getLabel(),EConnectionType.TABLE_REF.getDefaultMenuName()};
                String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
 else         if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE_REF) {
          if (0 < tableOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableRefOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
        }
      }
      if (isCheckingTableLink) {
        typeName=EConnectionType.TABLE.getDefaultMenuName() + ""String_Node_Str"" + EConnectionType.TABLE_REF.getDefaultMenuName();
      }
      if (nodeConnector.getDefaultConnectionType() == EConnectionType.FLOW_MAIN) {
        typeName=""String_Node_Str"";
        if (isJoblet) {
          if (nodeConnector.isBuiltIn()) {
            jobletBuildConnectorNum++;
          }
          continue;
        }
      }
      if (needCheckOutput) {
        if (nbMaxOut != -1) {
          boolean notShow=!nodeConnector.isShow() && curLinkOut > 0;
          if (notShow || curLinkOut > nbMaxOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (nbMinOut != 0) {
          if (curLinkOut < nbMinOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
      }
      if (!isJoblet) {
        if (nbMaxIn != -1) {
          if (curLinkIn > nbMaxIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (needCheckInput) {
          if (nbMinIn != 0) {
            if (curLinkIn < nbMinIn) {
              String errorMessage=Messages.getString(""String_Node_Str"",typeName);
              Problems.add(ProblemStatus.WARNING,this,errorMessage);
            }
          }
        }
      }
    }
  }
  if (isJoblet) {
    List<IConnection> outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    for (    IConnection con : outgoingConnections) {
      INodeConnector connector=this.getConnectorFromName(con.getConnectorName());
      if (connector == null && con instanceof Connection) {
        ((Connection)con).disconnect();
      }
    }
    String typeName=""String_Node_Str"";
    outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    if (outgoingConnections.size() > jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
 else     if (outgoingConnections.size() < jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
}","public void checkLinks(){
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJoblet=true;
    }
  }
  INodeConnector connectorFromType=getConnectorFromType(EConnectionType.FLOW_MAIN);
  if (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    if (connectorFromType != null && connectorFromType.isShow() && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (connectorFromType.getMinLinkInput() == 0) & (connectorFromType.getMaxLinkInput() != 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_REF) > 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if (getComponentProperties() == null) {
    if (connectorFromType != null && connectorFromType.isShow() && (connectorFromType.getMaxLinkInput() == 0) && (connectorFromType.getMaxLinkOutput() != 0)) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.WARNING,this,errorMessage);
      }
    }
  }
 else   if ((Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    for (    INodeConnector connector : getConnectorsFromType(EConnectionType.FLOW_MAIN)) {
      if (connector.isShow() && (connector.getMaxLinkInput() == 0) && (connector.getMaxLinkOutput() != 0)) {
        if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
          String errorMessage=Messages.getString(""String_Node_Str"");
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
    }
  }
  if (!isJoblet) {
    if (!isSubProcessStart() || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_OK) > 0) || getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_ERROR) > 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if ((!isELTComponent() && !isSubProcessStart()) || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbInput(EConnectionType.ON_SUBJOB_OK) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.RUN_IF) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_OK) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_ERROR) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.STARTS) > 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (isHL7Output()) {
      if (getIncomingConnections(EConnectionType.FLOW_MERGE).size() <= 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
 else {
        List<Map<String,String>> maps=(List<Map<String,String>>)ElementParameterParser.getObjectValue(this,""String_Node_Str"");
        List<IMetadataTable> tables=this.getMetadataList();
        for (        IConnection connection : getIncomingConnections(EConnectionType.FLOW_MERGE)) {
          IMetadataTable metadataTable=connection.getMetadataTable();
          String rowName=connection.getUniqueName();
          String schemaName=null;
          for (          Map<String,String> map : maps) {
            if (map.containsValue(rowName)) {
              if (map.get(""String_Node_Str"") != null && map.get(""String_Node_Str"").equals(rowName)) {
                schemaName=map.get(""String_Node_Str"");
                break;
              }
            }
          }
          for (          IMetadataTable nodeTable : tables) {
            if (nodeTable.getTableName() != null && nodeTable.getTableName().equals(schemaName)) {
              if (metadataTable != null && !metadataTable.sameMetadataAs(nodeTable,IMetadataColumn.OPTIONS_NONE)) {
                String errorMessage=Messages.getString(""String_Node_Str"");
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
      }
    }
    if (checkNodeCircle(this)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  int tableOutLinkNum=0;
  int tableRefOutLinkNum=0;
  List<? extends IConnection> tableOutLinks=this.getOutgoingConnections(EConnectionType.TABLE);
  if (null != tableOutLinks) {
    tableOutLinkNum=tableOutLinks.size();
  }
  List<? extends IConnection> tableRefOutLinks=this.getOutgoingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefOutLinks) {
    tableRefOutLinkNum=tableRefOutLinks.size();
  }
  int tableInLinkNum=0;
  int tableRefInLinkNum=0;
  List<? extends IConnection> tableInLinks=this.getIncomingConnections(EConnectionType.TABLE);
  if (null != tableInLinks) {
    tableInLinkNum=tableInLinks.size();
  }
  List<? extends IConnection> tableRefInLinks=this.getIncomingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefInLinks) {
    tableRefInLinkNum=tableRefInLinks.size();
  }
  int jobletBuildConnectorNum=0;
  boolean subQueryMode=true;
  INodeConnector tableRefConnector=getConnectorFromType(EConnectionType.TABLE_REF);
  if (null != tableRefConnector) {
    if (tableRefConnector.getMaxLinkOutput() == 0) {
      subQueryMode=false;
    }
  }
  for (  INodeConnector nodeConnector : listConnector) {
    if (!nodeConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.USE_HASH) && nodeConnector.getDefaultConnectionType() != EConnectionType.FLOW_MERGE) {
      boolean needCheckOutput=true;
      boolean needCheckInput=true;
      int nbMaxOut;
      nbMaxOut=nodeConnector.getMaxLinkOutput();
      int nbMaxIn;
      nbMaxIn=nodeConnector.getMaxLinkInput();
      int nbMinOut;
      nbMinOut=nodeConnector.getMinLinkOutput();
      int nbMinIn;
      nbMinIn=nodeConnector.getMinLinkInput();
      int curLinkOut;
      curLinkOut=nodeConnector.getCurLinkNbOutput();
      int curLinkIn;
      curLinkIn=nodeConnector.getCurLinkNbInput();
      String typeName=nodeConnector.getMenuName();
      boolean isCheckingTableLink=false;
      if (subQueryMode) {
        if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE) {
          if (0 < tableRefOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableRefInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
          if (this.getComponent().getName().endsWith(""String_Node_Str"") && tableOutLinks != null) {
            for (            IConnection iconn : tableOutLinks) {
              INode newTarget=iconn.getTarget();
              if (newTarget.isELTComponent() && newTarget.getComponent().getName().endsWith(""String_Node_Str"")) {
                Object[] errorParams=new String[]{this.getLabel(),newTarget.getLabel(),EConnectionType.TABLE_REF.getDefaultMenuName()};
                String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
 else         if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE_REF) {
          if (0 < tableOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableRefOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
        }
      }
      if (isCheckingTableLink) {
        typeName=EConnectionType.TABLE.getDefaultMenuName() + ""String_Node_Str"" + EConnectionType.TABLE_REF.getDefaultMenuName();
      }
      if (nodeConnector.getDefaultConnectionType() == EConnectionType.FLOW_MAIN) {
        typeName=""String_Node_Str"";
        if (isJoblet) {
          if (nodeConnector.isBuiltIn()) {
            jobletBuildConnectorNum++;
          }
          continue;
        }
      }
      if (needCheckOutput) {
        if (nbMaxOut != -1) {
          boolean notShow=!nodeConnector.isShow() && curLinkOut > 0;
          if (notShow || curLinkOut > nbMaxOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (nbMinOut != 0) {
          if (nodeConnector.isShow() && curLinkOut < nbMinOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
      }
      if (!isJoblet) {
        if (nbMaxIn != -1) {
          boolean notShow=!nodeConnector.isShow() && curLinkIn > 0;
          if (notShow || curLinkIn > nbMaxIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (needCheckInput) {
          if (nbMinIn != 0) {
            if (nodeConnector.isShow() && curLinkIn < nbMinIn) {
              String errorMessage=Messages.getString(""String_Node_Str"",typeName);
              Problems.add(ProblemStatus.WARNING,this,errorMessage);
            }
          }
        }
      }
    }
  }
  if (isJoblet) {
    List<IConnection> outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    for (    IConnection con : outgoingConnections) {
      INodeConnector connector=this.getConnectorFromName(con.getConnectorName());
      if (connector == null && con instanceof Connection) {
        ((Connection)con).disconnect();
      }
    }
    String typeName=""String_Node_Str"";
    outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    if (outgoingConnections.size() > jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
 else     if (outgoingConnections.size() < jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
}",0.9931851851851852
117897,"private void updateProSetingParameters(EList listParamType){
  for (int j=0; j < listParamType.size(); j++) {
    ElementParameterType pType=(ElementParameterType)listParamType.get(j);
    if (EParameterName.STATANDLOG_USE_PROJECT_SETTINGS.getName().equals(pType.getName())) {
      if (Boolean.valueOf(pType.getValue())) {
        ProjectSettingManager.reloadStatsAndLogFromProjectSettings(this,ProjectManager.getInstance().getCurrentProject(),null);
        break;
      }
    }
  }
}","private void updateProSetingParameters(EList listParamType){
  Project project=ProjectManager.getInstance().getCurrentProject();
  boolean updateStandardLog=false;
  boolean updateImplicitContext=false;
  for (int j=0; j < listParamType.size(); j++) {
    ElementParameterType pType=(ElementParameterType)listParamType.get(j);
    if (Boolean.valueOf(pType.getValue())) {
      if (EParameterName.STATANDLOG_USE_PROJECT_SETTINGS.getName().equals(pType.getName())) {
        ProjectSettingManager.reloadStatsAndLogFromProjectSettings(this,project,null);
        updateStandardLog=true;
      }
 else       if (EParameterName.IMPLICITCONTEXT_USE_PROJECT_SETTINGS.getName().equals(pType.getName())) {
        Element elem=ProjectSettingManager.createImplicitContextLoadElement(project);
        Map<String,Set<String>> contextVars=DetectContextVarsUtils.detectByPropertyType(elem,true);
        boolean addContextModel=false;
        List<ContextItem> allContextItems=null;
        if (!contextVars.isEmpty()) {
          org.talend.core.model.metadata.builder.connection.Connection connection=null;
          IElementParameter ptParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
          if (ptParam != null) {
            IElementParameter propertyElem=ptParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName());
            Object proValue=propertyElem.getValue();
            if (proValue instanceof String && ((String)proValue).equalsIgnoreCase(EmfComponent.REPOSITORY)) {
              IElementParameter repositoryElem=ptParam.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
              String value=(String)repositoryElem.getValue();
              org.talend.core.model.properties.ConnectionItem connectionItem=UpdateRepositoryUtils.getConnectionItemByItemId(value);
              connection=connectionItem.getConnection();
              if (connection != null && connection.isContextMode()) {
                addContextModel=true;
                allContextItems=ContextUtils.getAllContextItem();
              }
            }
          }
        }
        ProjectSettingManager.reloadImplicitValuesFromProjectSettings(this,project,null);
        if (addContextModel && !contextVars.isEmpty() && allContextItems != null) {
          ContextUtils.addInContextModelForProcessItem(property.getItem(),contextVars,allContextItems);
        }
        updateImplicitContext=true;
      }
    }
    if (updateStandardLog && updateImplicitContext) {
      break;
    }
  }
}",0.2153236459709379
117898,"@Override public List<String> extractArgumentSegments(){
  List<String> list=new ArrayList<>();
  list.add(ProcessorConstants.CMD_KEY_WORD_LIBJAR);
  StringBuffer libJars=new StringBuffer();
  Set<String> libNames=new HashSet<>();
  boolean isExport=isExportConfig() || isRunAsExport();
  if (process instanceof IProcess2) {
    if (isExport) {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducer((IProcess2)process);
    }
 else {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducerWithoutRoutines((IProcess2)process);
    }
  }
  Set<ModuleNeeded> modulesNeeded=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(process.getId(),process.getVersion());
  Set<String> allNeededLibsAfterAdjuster=new HashSet<String>();
  for (  ModuleNeeded module : modulesNeeded) {
    allNeededLibsAfterAdjuster.add(module.getModuleName());
  }
  Iterator<String> it=libNames.iterator();
  while (it.hasNext()) {
    String jarName=it.next();
    if (!allNeededLibsAfterAdjuster.contains(jarName)) {
      it.remove();
    }
  }
  File libDir=JavaProcessorUtilities.getJavaProjectLibFolder();
  File targetDir=new File(JavaProcessorUtilities.getTalendJavaProject().getTargetFolder().getLocationURI());
  String libFolder=""String_Node_Str"";
  if (libDir != null) {
    libFolder=new Path(libDir.getAbsolutePath()).toPortableString();
  }
  if (libNames != null && libNames.size() > 0) {
    Iterator<String> itLibNames=libNames.iterator();
    while (itLibNames.hasNext()) {
      if (isExport) {
        libJars.append(getLibFolderInWorkingDir() + itLibNames.next()).append(',');
      }
 else {
        libJars.append(libFolder + ""String_Node_Str"" + itLibNames.next()).append(',');
      }
    }
  }
  if (isExport) {
    libJars.append(""String_Node_Str"" + makeupJobJarName());
  }
 else {
    Set<FilterInfo> codeJars=new HashSet<>();
    codeJars.add(new FilterInfo(JavaUtils.ROUTINE_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    codeJars.add(new FilterInfo(JavaUtils.BEANS_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    codeJars.add(new FilterInfo(JavaUtils.PIGUDFS_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    List<File> files=FileUtils.getAllFilesFromFolder(targetDir,codeJars);
    boolean routinesHaveBeenFound=false;
    for (    File f : files) {
      if (!routinesHaveBeenFound && f.getName().startsWith(JavaUtils.ROUTINE_JAR_NAME)) {
        routinesHaveBeenFound=true;
      }
      libJars.append(new Path(f.getAbsolutePath()).toPortableString() + ""String_Node_Str"");
    }
    if (!routinesHaveBeenFound) {
      File routinesJar=new File(targetDir + ""String_Node_Str"" + JavaUtils.ROUTINE_JAR_NAME+ ""String_Node_Str""+ PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
      libJars.append(new Path(routinesJar.getAbsolutePath()).toPortableString() + ""String_Node_Str"");
    }
    if (targetDir != null) {
      libJars.append(new Path(targetDir.getAbsolutePath()).toPortableString() + ""String_Node_Str"" + makeupJobJarName());
    }
  }
  list.add(libJars.toString());
  return list;
}","@Override public List<String> extractArgumentSegments(){
  List<String> list=new ArrayList<>();
  list.add(ProcessorConstants.CMD_KEY_WORD_LIBJAR);
  StringBuffer libJars=new StringBuffer();
  Set<String> libNames=new HashSet<>();
  boolean isExport=isExportConfig() || isRunAsExport();
  if (process instanceof IProcess2) {
    if (isExport) {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducer((IProcess2)process);
    }
 else {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducerWithoutRoutines((IProcess2)process);
    }
  }
  Set<ModuleNeeded> modulesNeeded=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(process.getId(),process.getVersion());
  Set<String> allNeededLibsAfterAdjuster=new HashSet<String>();
  for (  ModuleNeeded module : modulesNeeded) {
    allNeededLibsAfterAdjuster.add(module.getModuleName());
  }
  Iterator<String> it=libNames.iterator();
  while (it.hasNext()) {
    String jarName=it.next();
    if (!allNeededLibsAfterAdjuster.contains(jarName) && !JavaUtils.ROUTINES_JAR.equals(jarName) && !JavaUtils.BEANS_JAR.equals(jarName)&& !JavaUtils.PIGUDFS_JAR.equals(jarName)) {
      it.remove();
    }
  }
  File libDir=JavaProcessorUtilities.getJavaProjectLibFolder();
  File targetDir=new File(JavaProcessorUtilities.getTalendJavaProject().getTargetFolder().getLocationURI());
  String libFolder=""String_Node_Str"";
  if (libDir != null) {
    libFolder=new Path(libDir.getAbsolutePath()).toPortableString();
  }
  if (libNames != null && libNames.size() > 0) {
    Iterator<String> itLibNames=libNames.iterator();
    while (itLibNames.hasNext()) {
      if (isExport) {
        libJars.append(getLibFolderInWorkingDir() + itLibNames.next()).append(',');
      }
 else {
        libJars.append(libFolder + ""String_Node_Str"" + itLibNames.next()).append(',');
      }
    }
  }
  if (isExport) {
    libJars.append(""String_Node_Str"" + makeupJobJarName());
  }
 else {
    Set<FilterInfo> codeJars=new HashSet<>();
    codeJars.add(new FilterInfo(JavaUtils.ROUTINE_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    codeJars.add(new FilterInfo(JavaUtils.BEANS_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    codeJars.add(new FilterInfo(JavaUtils.PIGUDFS_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    List<File> files=FileUtils.getAllFilesFromFolder(targetDir,codeJars);
    boolean routinesHaveBeenFound=false;
    for (    File f : files) {
      if (!routinesHaveBeenFound && f.getName().startsWith(JavaUtils.ROUTINE_JAR_NAME)) {
        routinesHaveBeenFound=true;
      }
      libJars.append(new Path(f.getAbsolutePath()).toPortableString() + ""String_Node_Str"");
    }
    if (!routinesHaveBeenFound) {
      File routinesJar=new File(targetDir + ""String_Node_Str"" + JavaUtils.ROUTINE_JAR_NAME+ ""String_Node_Str""+ PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
      libJars.append(new Path(routinesJar.getAbsolutePath()).toPortableString() + ""String_Node_Str"");
    }
    if (targetDir != null) {
      libJars.append(new Path(targetDir.getAbsolutePath()).toPortableString() + ""String_Node_Str"" + makeupJobJarName());
    }
  }
  list.add(libJars.toString());
  return list;
}",0.5169220945083014
117899,"private void addSVNInforAutoCheckFiled(){
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    final CheckBoxFieldEditor autoCheckField=new CheckBoxFieldEditor(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    addField(autoCheckField);
    final IntegerFieldEditor autoCheckTime=new IntegerFieldEditor(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK_TIME_INTERVAL,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    autoCheckTime.setValidRange(1,30);
    autoCheckTime.setEnabled(getPreferenceStore().getBoolean(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK),getFieldEditorParent());
    addField(autoCheckTime);
    autoCheckField.getButton().addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (autoCheckField.getButton().getSelection()) {
          autoCheckTime.setEnabled(true,getFieldEditorParent());
        }
 else {
          autoCheckTime.setEnabled(false,getFieldEditorParent());
        }
      }
    }
);
    final CheckBoxFieldEditor autoRefreshLocksField=new CheckBoxFieldEditor(ITalendCorePrefConstants.AUTO_REFRESH_LOCKS,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    addField(autoRefreshLocksField);
    final IntegerFieldEditor tacConnectionTimeout=new IntegerFieldEditor(ITalendCorePrefConstants.PERFORMANCE_TAC_CONNECTION_TIMEOUT,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    tacConnectionTimeout.setValidRange(0,3600);
    addField(tacConnectionTimeout);
    final IntegerFieldEditor tacReadTimeout=new IntegerFieldEditor(ITalendCorePrefConstants.PERFORMANCE_TAC_READ_TIMEOUT,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    tacReadTimeout.setValidRange(0,3600);
    addField(tacReadTimeout);
  }
}","private void addSVNInforAutoCheckFiled(){
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    final CheckBoxFieldEditor autoCheckField=new CheckBoxFieldEditor(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    addField(autoCheckField);
    final IntegerFieldEditor autoCheckTime=new IntegerFieldEditor(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK_TIME_INTERVAL,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    autoCheckTime.setValidRange(1,30);
    autoCheckTime.setEnabled(getPreferenceStore().getBoolean(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK),getFieldEditorParent());
    addField(autoCheckTime);
    autoCheckField.getButton().addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (autoCheckField.getButton().getSelection()) {
          autoCheckTime.setEnabled(true,getFieldEditorParent());
        }
 else {
          autoCheckTime.setEnabled(false,getFieldEditorParent());
        }
      }
    }
);
    final CheckBoxFieldEditor autoRefreshLocksField=new CheckBoxFieldEditor(ITalendCorePrefConstants.AUTO_REFRESH_LOCKS,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    addField(autoRefreshLocksField);
    final IntegerFieldEditor tacConnectionTimeout=new IntegerFieldEditor(ITalendCorePrefConstants.PERFORMANCE_TAC_CONNECTION_TIMEOUT,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    tacConnectionTimeout.setValidRange(NetworkConfiguration.CONNECTION_TIMEOUT_MIN,NetworkConfiguration.CONNECTION_TIMEOUT_MAX);
    addField(tacConnectionTimeout);
    final IntegerFieldEditor tacReadTimeout=new IntegerFieldEditor(ITalendCorePrefConstants.PERFORMANCE_TAC_READ_TIMEOUT,Messages.getString(""String_Node_Str""),getFieldEditorParent());
    tacReadTimeout.setValidRange(NetworkConfiguration.READ_TIMEOUT_MIN,NetworkConfiguration.READ_TIMEOUT_MAX);
    addField(tacReadTimeout);
  }
}",0.9557752341311134
117900,"@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String logPath=Platform.getLogFileLocation().toOSString();
  int lastIndex=logPath.lastIndexOf(File.separatorChar);
  logPath=TalendTextUtils.addQuotes(logPath.substring(0,lastIndex));
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_LABEL,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_HINT,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_CONNECTION_FORMAT,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_HINT_USED,false);
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_DISPLAY,false);
  store.setDefault(TalendDesignerPrefConstants.USE_REPOSITORY_NAME,true);
  store.setDefault(TalendEditorPaletteFactory.PALETTE_STATE,FlyoutPaletteComposite.STATE_PINNED_OPEN);
  store.setDefault(TalendDesignerPrefConstants.COMP_DEFAULT_FILE_DIR,Platform.getLocation().toPortableString());
  store.setDefault(TalendDesignerPrefConstants.PRODUCT_ROOT_DIR,Platform.getLocation().removeLastSegments(1).toPortableString());
  Bundle refBundle=Platform.getBundle(""String_Node_Str"");
  if (refBundle != null) {
    try {
      String dirPath=FileLocator.getBundleFile(refBundle).getPath().replace(File.separatorChar,'/');
      store.setDefault(TalendDesignerPrefConstants.DQ_REPORTING_BUNDLE_DIR,dirPath);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  store.setDefault(TalendDesignerPrefConstants.PROPERTY_CODE_CHECK,false);
  store.setDefault(TalendDesignerPrefConstants.LARGE_ICONS_SIZE,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.SCHEMA_OPTIONS,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.VIEW_OPTIONS,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DISPLAY_SUBJOBS,true);
  store.setDefault(TalendDesignerPrefConstants.COMPONENT_ASSIST,true);
  store.setDefault(TalendDesignerPrefConstants.GENERATE_CODE_WHEN_OPEN_JOB,false);
  store.setDefault(TalendDesignerPrefConstants.CHECK_ONLY_LAST_VERSION,true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),EmfComponent.BUILTIN);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_REALTIME_STATS.getName(),false);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_RUNTIME_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_WARNING.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILE_PATH.getName(),logPath);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_LOGS.getName(),TalendTextUtils.addQuotes(DEFAULT_LOGS_FILE_NAME));
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_STATS.getName(),TalendTextUtils.addQuotes(DEFAULT_STATS_FILE_NAME));
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_METTER.getName(),TalendTextUtils.addQuotes(DEFAULT_METER_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),EmfComponent.BUILTIN);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_REALTIME_STATS.getName(),false);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_RUNTIME_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_WARNING.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILE_PATH.getName(),logPath);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_LOGS.getName(),TalendTextUtils.addQuotes(DEFAULT_LOGS_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_STATS.getName(),TalendTextUtils.addQuotes(DEFAULT_STATS_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_METTER.getName(),TalendTextUtils.addQuotes(DEFAULT_METER_FILE_NAME));
  store.setDefault(IRepositoryPrefConstants.MANUALLY_REFRESH,false);
  store.setDefault(IRepositoryPrefConstants.CREATING_REFRESH,true);
  store.setDefault(IRepositoryPrefConstants.SAVING_REFRESH,true);
  store.setDefault(IRepositoryPrefConstants.DELETING_REFRESH,true);
  store.setDefault(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT_ACTIVED,true);
  store.setDefault(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT,15);
  store.setDefault(ITalendCorePrefConstants.HBASE_OR_MAPRDB_SCAN_LIMIT,50);
  store.setDefault(ITalendCorePrefConstants.ADD_USER_ROUTINES,false);
  store.setDefault(ITalendCorePrefConstants.ADD_SYSTEM_ROUTINES,true);
  store.setDefault(IRepositoryPrefConstants.USE_EXPORT_SAVE,false);
  store.setDefault(IRepositoryPrefConstants.ADD_CLASSPATH_JAR,false);
  store.setDefault(IRepositoryPrefConstants.REBUILD_RELATIONSHIPS,false);
  store.setDefault(TalendDesignerPrefConstants.NOT_SHOW_WARNING_WHEN_DELETE_LINK_WITH_JOBLETTRIGGERLINKCOMPONENT,false);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK,true);
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK_TIME_INTERVAL,1);
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK,true);
    store.setDefault(ITalendCorePrefConstants.AUTO_REFRESH_LOCKS,true);
    store.setDefault(ITalendCorePrefConstants.PERFORMANCE_TAC_CONNECTION_TIMEOUT,5);
    store.setDefault(ITalendCorePrefConstants.PERFORMANCE_TAC_READ_TIMEOUT,60);
  }
  store.setDefault(ITalendCorePrefConstants.NEXUS_TIMEOUT,10000);
  store.setDefault(ITalendCorePrefConstants.NEXUS_REFRESH_FREQUENCY,0);
  if (!CommonUIPlugin.isFullyHeadless()) {
    Display display=Display.getDefault();
    if (display == null) {
      display=Display.getCurrent();
    }
    if (display != null) {
      display.asyncExec(new Runnable(){
        @Override public void run(){
          IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
          Font font=new Font(null,""String_Node_Str"",10,SWT.NONE);
          PreferenceConverter.setDefault(store,TalendDesignerPrefConstants.MEMO_TEXT_FONT,font.getFontData());
          PreferenceConverter.setDefault(store,TalendDesignerPrefConstants.CONSOLT_TEXT_FONT,font.getFontData());
        }
      }
);
    }
    store.setDefault(TalendDesignerPrefConstants.EDITOR_ANTIALIASING,true);
    store.setDefault(TalendDesignerPrefConstants.EDITOR_LINESTYLE,true);
    DesignerColorUtils.initPreferenceDefault(store);
    ColorManager.initDefaultColors(store);
    store.setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,JavaTypesManager.STRING.getId());
    store.setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,JavaTypesManager.STRING.getId());
  }
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_RECENTLY_USED_LIST_SIZE,12);
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_SEARCH_FROM_HELP,true);
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_SEARCH_RESULT_LIMIT_FROM_HELP,10);
  store.setDefault(ITalendCorePrefConstants.PERFORMANCE_JAVA_PROCESS_CODE_FORMATE_TIMEOUT,30);
}","@Override public void initializeDefaultPreferences(){
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String logPath=Platform.getLogFileLocation().toOSString();
  int lastIndex=logPath.lastIndexOf(File.separatorChar);
  logPath=TalendTextUtils.addQuotes(logPath.substring(0,lastIndex));
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_LABEL,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_HINT,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_CONNECTION_FORMAT,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_HINT_USED,false);
  store.setDefault(TalendDesignerPrefConstants.DEFAULT_DISPLAY,false);
  store.setDefault(TalendDesignerPrefConstants.USE_REPOSITORY_NAME,true);
  store.setDefault(TalendEditorPaletteFactory.PALETTE_STATE,FlyoutPaletteComposite.STATE_PINNED_OPEN);
  store.setDefault(TalendDesignerPrefConstants.COMP_DEFAULT_FILE_DIR,Platform.getLocation().toPortableString());
  store.setDefault(TalendDesignerPrefConstants.PRODUCT_ROOT_DIR,Platform.getLocation().removeLastSegments(1).toPortableString());
  Bundle refBundle=Platform.getBundle(""String_Node_Str"");
  if (refBundle != null) {
    try {
      String dirPath=FileLocator.getBundleFile(refBundle).getPath().replace(File.separatorChar,'/');
      store.setDefault(TalendDesignerPrefConstants.DQ_REPORTING_BUNDLE_DIR,dirPath);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  store.setDefault(TalendDesignerPrefConstants.PROPERTY_CODE_CHECK,false);
  store.setDefault(TalendDesignerPrefConstants.LARGE_ICONS_SIZE,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.SCHEMA_OPTIONS,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.VIEW_OPTIONS,""String_Node_Str"");
  store.setDefault(TalendDesignerPrefConstants.DISPLAY_SUBJOBS,true);
  store.setDefault(TalendDesignerPrefConstants.COMPONENT_ASSIST,true);
  store.setDefault(TalendDesignerPrefConstants.GENERATE_CODE_WHEN_OPEN_JOB,false);
  store.setDefault(TalendDesignerPrefConstants.CHECK_ONLY_LAST_VERSION,true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),EmfComponent.BUILTIN);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_REALTIME_STATS.getName(),false);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_RUNTIME_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_WARNING.getName(),true);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILE_PATH.getName(),logPath);
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_LOGS.getName(),TalendTextUtils.addQuotes(DEFAULT_LOGS_FILE_NAME));
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_STATS.getName(),TalendTextUtils.addQuotes(DEFAULT_STATS_FILE_NAME));
  store.setDefault(ECodeLanguage.JAVA.toString() + ""String_Node_Str"" + EParameterName.FILENAME_METTER.getName(),TalendTextUtils.addQuotes(DEFAULT_METER_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName(),EmfComponent.BUILTIN);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_REALTIME_STATS.getName(),false);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_RUNTIME_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_ERRORS.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.CATCH_USER_WARNING.getName(),true);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILE_PATH.getName(),logPath);
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_LOGS.getName(),TalendTextUtils.addQuotes(DEFAULT_LOGS_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_STATS.getName(),TalendTextUtils.addQuotes(DEFAULT_STATS_FILE_NAME));
  store.setDefault(ECodeLanguage.PERL.toString() + ""String_Node_Str"" + EParameterName.FILENAME_METTER.getName(),TalendTextUtils.addQuotes(DEFAULT_METER_FILE_NAME));
  store.setDefault(IRepositoryPrefConstants.MANUALLY_REFRESH,false);
  store.setDefault(IRepositoryPrefConstants.CREATING_REFRESH,true);
  store.setDefault(IRepositoryPrefConstants.SAVING_REFRESH,true);
  store.setDefault(IRepositoryPrefConstants.DELETING_REFRESH,true);
  store.setDefault(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT_ACTIVED,true);
  store.setDefault(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT,15);
  store.setDefault(ITalendCorePrefConstants.HBASE_OR_MAPRDB_SCAN_LIMIT,50);
  store.setDefault(ITalendCorePrefConstants.ADD_USER_ROUTINES,false);
  store.setDefault(ITalendCorePrefConstants.ADD_SYSTEM_ROUTINES,true);
  store.setDefault(IRepositoryPrefConstants.USE_EXPORT_SAVE,false);
  store.setDefault(IRepositoryPrefConstants.ADD_CLASSPATH_JAR,false);
  store.setDefault(IRepositoryPrefConstants.REBUILD_RELATIONSHIPS,false);
  store.setDefault(TalendDesignerPrefConstants.NOT_SHOW_WARNING_WHEN_DELETE_LINK_WITH_JOBLETTRIGGERLINKCOMPONENT,false);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK,true);
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK_TIME_INTERVAL,1);
    store.setDefault(ITalendCorePrefConstants.SVN_UPDATE_INFO_AUTO_CHECK,true);
    store.setDefault(ITalendCorePrefConstants.AUTO_REFRESH_LOCKS,true);
    store.setDefault(ITalendCorePrefConstants.PERFORMANCE_TAC_CONNECTION_TIMEOUT,NetworkConfiguration.CONNECTION_TIMEOUT_DEFAULT);
    store.setDefault(ITalendCorePrefConstants.PERFORMANCE_TAC_READ_TIMEOUT,NetworkConfiguration.READ_TIMEOUT_DEFAULT);
  }
  store.setDefault(ITalendCorePrefConstants.NEXUS_TIMEOUT,10000);
  store.setDefault(ITalendCorePrefConstants.NEXUS_REFRESH_FREQUENCY,0);
  if (!CommonUIPlugin.isFullyHeadless()) {
    Display display=Display.getDefault();
    if (display == null) {
      display=Display.getCurrent();
    }
    if (display != null) {
      display.asyncExec(new Runnable(){
        @Override public void run(){
          IPreferenceStore store=CorePlugin.getDefault().getPreferenceStore();
          Font font=new Font(null,""String_Node_Str"",10,SWT.NONE);
          PreferenceConverter.setDefault(store,TalendDesignerPrefConstants.MEMO_TEXT_FONT,font.getFontData());
          PreferenceConverter.setDefault(store,TalendDesignerPrefConstants.CONSOLT_TEXT_FONT,font.getFontData());
        }
      }
);
    }
    store.setDefault(TalendDesignerPrefConstants.EDITOR_ANTIALIASING,true);
    store.setDefault(TalendDesignerPrefConstants.EDITOR_LINESTYLE,true);
    DesignerColorUtils.initPreferenceDefault(store);
    ColorManager.initDefaultColors(store);
    store.setDefault(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE,JavaTypesManager.STRING.getId());
    store.setDefault(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE,JavaTypesManager.STRING.getId());
  }
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_RECENTLY_USED_LIST_SIZE,12);
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_SEARCH_FROM_HELP,true);
  store.setDefault(TalendDesignerPrefConstants.PALETTE_SETTINGS_SEARCH_RESULT_LIMIT_FROM_HELP,10);
  store.setDefault(ITalendCorePrefConstants.PERFORMANCE_JAVA_PROCESS_CODE_FORMATE_TIMEOUT,30);
}",0.9874266554903603
117901,"@Override public List<String> extractArgumentSegments(){
  List<String> list=new ArrayList<>();
  list.add(ProcessorConstants.CMD_KEY_WORD_LIBJAR);
  StringBuffer libJars=new StringBuffer();
  Set<String> libNames=null;
  boolean isExport=isExportConfig() || isRunAsExport();
  if (process instanceof IProcess2) {
    if (isExport) {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducer((IProcess2)process);
    }
 else {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducerWithoutRoutines((IProcess2)process);
    }
  }
  File libDir=JavaProcessorUtilities.getJavaProjectLibFolder();
  File targetDir=new File(JavaProcessorUtilities.getTalendJavaProject().getTargetFolder().getLocationURI());
  String libFolder=""String_Node_Str"";
  if (libDir != null) {
    libFolder=new Path(libDir.getAbsolutePath()).toPortableString();
  }
  if (libNames != null && libNames.size() > 0) {
    Iterator<String> itLibNames=libNames.iterator();
    while (itLibNames.hasNext()) {
      if (isExport) {
        libJars.append(getLibFolderInWorkingDir() + itLibNames.next()).append(',');
      }
 else {
        libJars.append(libFolder + ""String_Node_Str"" + itLibNames.next()).append(',');
      }
    }
  }
  if (isExport) {
    libJars.append(""String_Node_Str"" + makeupJobJarName());
  }
 else {
    Set<FilterInfo> codeJars=new HashSet<>();
    codeJars.add(new FilterInfo(JavaUtils.ROUTINE_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    codeJars.add(new FilterInfo(JavaUtils.BEANS_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    codeJars.add(new FilterInfo(JavaUtils.PIGUDFS_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    List<File> files=FileUtils.getAllFilesFromFolder(targetDir,codeJars);
    boolean routinesHaveBeenFound=false;
    for (    File f : files) {
      if (!routinesHaveBeenFound && f.getName().startsWith(JavaUtils.ROUTINE_JAR_NAME)) {
        routinesHaveBeenFound=true;
      }
      libJars.append(new Path(f.getAbsolutePath()).toPortableString() + ""String_Node_Str"");
    }
    if (!routinesHaveBeenFound) {
      File routinesJar=new File(targetDir + ""String_Node_Str"" + JavaUtils.ROUTINE_JAR_NAME+ ""String_Node_Str""+ PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
      libJars.append(new Path(routinesJar.getAbsolutePath()).toPortableString() + ""String_Node_Str"");
    }
    if (targetDir != null) {
      libJars.append(new Path(targetDir.getAbsolutePath()).toPortableString() + ""String_Node_Str"" + makeupJobJarName());
    }
  }
  list.add(libJars.toString());
  return list;
}","@Override public List<String> extractArgumentSegments(){
  List<String> list=new ArrayList<>();
  list.add(ProcessorConstants.CMD_KEY_WORD_LIBJAR);
  StringBuffer libJars=new StringBuffer();
  Set<String> libNames=new HashSet<>();
  boolean isExport=isExportConfig() || isRunAsExport();
  if (process instanceof IProcess2) {
    if (isExport) {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducer((IProcess2)process);
    }
 else {
      libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducerWithoutRoutines((IProcess2)process);
    }
  }
  Set<ModuleNeeded> modulesNeeded=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(process.getId(),process.getVersion());
  Set<String> allNeededLibsAfterAdjuster=new HashSet<String>();
  for (  ModuleNeeded module : modulesNeeded) {
    allNeededLibsAfterAdjuster.add(module.getModuleName());
  }
  Iterator<String> it=libNames.iterator();
  while (it.hasNext()) {
    String jarName=it.next();
    if (!allNeededLibsAfterAdjuster.contains(jarName)) {
      it.remove();
    }
  }
  File libDir=JavaProcessorUtilities.getJavaProjectLibFolder();
  File targetDir=new File(JavaProcessorUtilities.getTalendJavaProject().getTargetFolder().getLocationURI());
  String libFolder=""String_Node_Str"";
  if (libDir != null) {
    libFolder=new Path(libDir.getAbsolutePath()).toPortableString();
  }
  if (libNames != null && libNames.size() > 0) {
    Iterator<String> itLibNames=libNames.iterator();
    while (itLibNames.hasNext()) {
      if (isExport) {
        libJars.append(getLibFolderInWorkingDir() + itLibNames.next()).append(',');
      }
 else {
        libJars.append(libFolder + ""String_Node_Str"" + itLibNames.next()).append(',');
      }
    }
  }
  if (isExport) {
    libJars.append(""String_Node_Str"" + makeupJobJarName());
  }
 else {
    Set<FilterInfo> codeJars=new HashSet<>();
    codeJars.add(new FilterInfo(JavaUtils.ROUTINE_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    codeJars.add(new FilterInfo(JavaUtils.BEANS_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    codeJars.add(new FilterInfo(JavaUtils.PIGUDFS_JAR_NAME,FileExtensions.JAR_FILE_SUFFIX));
    List<File> files=FileUtils.getAllFilesFromFolder(targetDir,codeJars);
    boolean routinesHaveBeenFound=false;
    for (    File f : files) {
      if (!routinesHaveBeenFound && f.getName().startsWith(JavaUtils.ROUTINE_JAR_NAME)) {
        routinesHaveBeenFound=true;
      }
      libJars.append(new Path(f.getAbsolutePath()).toPortableString() + ""String_Node_Str"");
    }
    if (!routinesHaveBeenFound) {
      File routinesJar=new File(targetDir + ""String_Node_Str"" + JavaUtils.ROUTINE_JAR_NAME+ ""String_Node_Str""+ PomUtil.getDefaultMavenVersion()+ FileExtensions.JAR_FILE_SUFFIX);
      libJars.append(new Path(routinesJar.getAbsolutePath()).toPortableString() + ""String_Node_Str"");
    }
    if (targetDir != null) {
      libJars.append(new Path(targetDir.getAbsolutePath()).toPortableString() + ""String_Node_Str"" + makeupJobJarName());
    }
  }
  list.add(libJars.toString());
  return list;
}",0.908348134991119
117902,"/** 
 * yzhang Comment method ""initArray"".
 */
private Object getArray(){
  List<Map<String,String>> map=new ArrayList<Map<String,String>>();
  MetadataTable table=(MetadataTable)this.getMetadataList().get(0);
  for (  IMetadataColumn col : table.getListColumns()) {
    VirtualMetadataColumn ext=(VirtualMetadataColumn)col;
    Map<String,String> value=new HashMap<String,String>();
    value.put(RowGeneratorComponent.COLUMN_NAME,ext.getLabel());
    List<Variable> variables=ExpressionBuilderDialog.getTestComposite().getVariableList();
    String expression=ExpressionBuilderDialog.getExpressionComposite().getExpression();
    try {
      for (      Variable varible : variables) {
        if (valueContains(expression,varible.getName())) {
          Integer.parseInt(varible.getValue());
        }
      }
      for (      Variable var : variables) {
        String talendType=var.getTalendType();
        JavaType javaTypeFromId=JavaTypesManager.getJavaTypeFromId(talendType);
        String label=null;
        String value2=var.getValue();
        if (javaTypeFromId != null) {
          label=javaTypeFromId.getLabel();
          if (""String_Node_Str"".equals(label)) {
            value2=""String_Node_Str"" + value2 + ""String_Node_Str"";
          }
        }
        expression=renameValues(expression,var.getName(),value2);
      }
    }
 catch (    NumberFormatException e1) {
      for (      Variable var : variables) {
        expression=renameValues(expression,var.getName(),""String_Node_Str"" + var.getValue() + ""String_Node_Str"");
      }
    }
    value.put(RowGeneratorComponent.ARRAY,""String_Node_Str"" + expression + ""String_Node_Str"");
    map.add(value);
  }
  return map;
}","/** 
 * yzhang Comment method ""initArray"".
 */
private Object getArray(){
  List<Map<String,String>> map=new ArrayList<Map<String,String>>();
  MetadataTable table=(MetadataTable)this.getMetadataList().get(0);
  for (  IMetadataColumn col : table.getListColumns()) {
    VirtualMetadataColumn ext=(VirtualMetadataColumn)col;
    Map<String,String> value=new HashMap<String,String>();
    value.put(RowGeneratorComponent.COLUMN_NAME,ext.getLabel());
    List<Variable> variables=ExpressionBuilderDialog.getTestComposite().getVariableList();
    String expression=ExpressionBuilderDialog.getExpressionComposite().getExpression();
    try {
      for (      Variable varible : variables) {
        String type=null;
        JavaType javaTypeFromId=JavaTypesManager.getJavaTypeFromId(varible.getTalendType());
        if (javaTypeFromId != null) {
          type=javaTypeFromId.getLabel();
        }
        String currentValue=varible.getValue();
        String newValue=renameVaribleValue(currentValue,type);
        if (valueContains(expression,varible.getName())) {
          if (currentValue != null && !currentValue.equals(newValue)) {
            expression=renameValues(expression,varible.getName(),newValue);
          }
 else {
            Integer.parseInt(varible.getValue());
          }
        }
 else {
          expression=renameValues(expression,varible.getName(),newValue);
        }
      }
    }
 catch (    NumberFormatException e1) {
      for (      Variable var : variables) {
        expression=renameValues(expression,var.getName(),""String_Node_Str"" + var.getValue() + ""String_Node_Str"");
      }
    }
    value.put(RowGeneratorComponent.ARRAY,""String_Node_Str"" + expression + ""String_Node_Str"");
    map.add(value);
  }
  return map;
}",0.6705269253039954
117903,"/** 
 * Added by Marvin Wang on Nov 7, 2012.
 * @param missingJarsForRoutines
 * @param missingJarsForProcess
 * @param missingJars
 * @throws BusinessException
 */
private static void handleMissingJarsForProcess(Set<String> missingJarsForRoutines,final Set<String> missingJarsForProcess,String missingJars) throws ProcessorException {
  final StringBuffer sb=new StringBuffer(""String_Node_Str"");
  if (missingJarsForProcess.size() > 0) {
    sb.append(Messages.getString(""String_Node_Str""));
    for (    String missingJar : missingJarsForProcess) {
      sb.append(missingJar);
      sb.append(""String_Node_Str"");
    }
    if (missingJarsForRoutines.size() > 0) {
      sb.append(""String_Node_Str"");
      sb.append(Messages.getString(""String_Node_Str""));
      sb.append(""String_Node_Str"");
      sb.append(Messages.getString(""String_Node_Str""));
      sb.append(""String_Node_Str"");
      for (      String missingJar : missingJarsForRoutines) {
        sb.append(missingJar);
        sb.append(""String_Node_Str"");
      }
      subForMsg(sb.toString());
    }
 else {
      subForMsg(sb.toString());
    }
    if (!CommonsPlugin.isHeadless()) {
      Display display=DisplayUtils.getDisplay();
      if (display != null) {
        display.syncExec(new Runnable(){
          @Override public void run(){
            MessageDialog dialog=new MessageDialog(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),null,subForMsg(sb.toString()),4,new String[]{IDialogConstants.OK_LABEL},0){
              @Override protected void setShellStyle(              int newShellStyle){
                super.setShellStyle(getShellStyle() | SWT.APPLICATION_MODAL);
              }
            }
;
            dialog.open();
          }
        }
);
      }
    }
 else {
      throw new ProcessorException(missingJars);
    }
  }
 else {
    if (missingJarsForRoutines.size() > 0) {
      sb.append(Messages.getString(""String_Node_Str""));
      for (      String missingJar : missingJarsForRoutines) {
        sb.append(missingJar);
        sb.append(""String_Node_Str"");
      }
      CommonExceptionHandler.warn(subForMsg(sb.toString()));
    }
  }
}","/** 
 * Added by Marvin Wang on Nov 7, 2012.
 * @param missingJarsForRoutines
 * @param missingJarsForProcess
 * @param missingJars
 * @throws BusinessException
 */
private static void handleMissingJarsForProcess(Set<String> missingJarsForRoutines,final Set<String> missingJarsForProcess,String missingJars) throws ProcessorException {
  final StringBuffer sb=new StringBuffer(""String_Node_Str"");
  if (missingJarsForProcess.size() > 0) {
    sb.append(Messages.getString(""String_Node_Str""));
    for (    String missingJar : missingJarsForProcess) {
      sb.append(missingJar);
      sb.append(""String_Node_Str"");
    }
    if (missingJarsForRoutines.size() > 0) {
      sb.append(""String_Node_Str"");
      sb.append(Messages.getString(""String_Node_Str""));
      sb.append(""String_Node_Str"");
      sb.append(Messages.getString(""String_Node_Str""));
      sb.append(""String_Node_Str"");
      for (      String missingJar : missingJarsForRoutines) {
        sb.append(missingJar);
        sb.append(""String_Node_Str"");
      }
      subForMsg(sb.toString());
    }
 else {
      subForMsg(sb.toString());
    }
    if (!CommonsPlugin.isHeadless() && !CommonsPlugin.isJUnitTest()) {
      Display display=DisplayUtils.getDisplay();
      if (display != null) {
        display.syncExec(new Runnable(){
          @Override public void run(){
            MessageDialog dialog=new MessageDialog(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),null,subForMsg(sb.toString()),4,new String[]{IDialogConstants.OK_LABEL},0){
              @Override protected void setShellStyle(              int newShellStyle){
                super.setShellStyle(getShellStyle() | SWT.APPLICATION_MODAL);
              }
            }
;
            dialog.open();
          }
        }
);
      }
    }
 else {
      throw new ProcessorException(missingJars);
    }
  }
 else {
    if (missingJarsForRoutines.size() > 0) {
      sb.append(Messages.getString(""String_Node_Str""));
      for (      String missingJar : missingJarsForRoutines) {
        sb.append(missingJar);
        sb.append(""String_Node_Str"");
      }
      CommonExceptionHandler.warn(subForMsg(sb.toString()));
    }
  }
}",0.992653810835629
117904,"/** 
 * Comment method ""createContent"".
 * @param child
 */
private void createContent(Composite mainComposite){
  header=new HeaderComposite(mainComposite,SWT.NONE);
  if (this.foxManager.isNoLoopInComponent()) {
    header.updateStatus(Messages.getString(""String_Node_Str""));
  }
  xmlToSchemaSash=new SashForm(mainComposite,SWT.HORIZONTAL | SWT.SMOOTH);
  xmlToSchemaSash.setLayoutData(new GridData(GridData.FILL_BOTH));
  xmlToSchemaSash.setBackgroundMode(SWT.INHERIT_FORCE);
  canModify=externalNode.getProcess().isReadOnly();
  if (externalNode.getOriginalNode().getJobletNode() != null) {
    canModify=externalNode.getOriginalNode().isReadOnly();
  }
  IElementParameter elem=externalNode.getElementParameter(""String_Node_Str"");
  if (elem != null) {
    String value=(String)elem.getValue();
    if (value != null && value.equals(""String_Node_Str"")) {
      isRepository=true;
    }
  }
  addSchemaViewer(xmlToSchemaSash,300,110);
  addXMLViewer(xmlToSchemaSash,400,110);
  xmlToSchemaSash.setWeights(new int[]{40,60});
  linker=new Schema2XMLLinker(this.xmlToSchemaSash);
  linker.init(schemaViewer.getTable(),xmlViewer);
  linker.setManager(foxManager);
  initSchemaTable();
  footerComp=new FooterComposite(mainComposite,SWT.NONE,foxManager);
  xmlViewer.expandToLevel(3);
  linker.createLinks();
}","/** 
 * Comment method ""createContent"".
 * @param child
 */
private void createContent(Composite mainComposite){
  header=new HeaderComposite(mainComposite,SWT.NONE);
  if (this.foxManager.isNoLoopInComponent()) {
    header.updateStatus(Messages.getString(""String_Node_Str""));
  }
  xmlToSchemaSash=new SashForm(mainComposite,SWT.HORIZONTAL | SWT.SMOOTH);
  xmlToSchemaSash.setLayoutData(new GridData(GridData.FILL_BOTH));
  xmlToSchemaSash.setBackgroundMode(SWT.INHERIT_FORCE);
  if (Platform.OS_MACOSX.equals(Platform.getOS())) {
    xmlToSchemaSash.setSashWidth((mainComposite.getShell().getBounds().width) / 5);
  }
  canModify=externalNode.getProcess().isReadOnly();
  if (externalNode.getOriginalNode().getJobletNode() != null) {
    canModify=externalNode.getOriginalNode().isReadOnly();
  }
  IElementParameter elem=externalNode.getElementParameter(""String_Node_Str"");
  if (elem != null) {
    String value=(String)elem.getValue();
    if (value != null && value.equals(""String_Node_Str"")) {
      isRepository=true;
    }
  }
  addSchemaViewer(xmlToSchemaSash,300,110);
  addXMLViewer(xmlToSchemaSash,400,110);
  xmlToSchemaSash.setWeights(new int[]{40,60});
  linker=new Schema2XMLLinker(this.xmlToSchemaSash);
  linker.init(schemaViewer.getTable(),xmlViewer);
  linker.setManager(foxManager);
  initSchemaTable();
  footerComp=new FooterComposite(mainComposite,SWT.NONE,foxManager);
  xmlViewer.expandToLevel(3);
  linker.createLinks();
  if (Platform.OS_MACOSX.equals(Platform.getOS())) {
    mainComposite.getShell().addControlListener(new ControlListener(){
      @Override public void controlMoved(      ControlEvent e){
      }
      @Override public void controlResized(      ControlEvent e){
        xmlToSchemaSash.setSashWidth((mainComposite.getShell().getBounds().width) / 5);
      }
    }
);
  }
}",0.8365261813537676
117905,"protected void initSchemaTable(){
  IConnection inConn=null;
  for (  IConnection conn : externalNode.getIncomingConnections()) {
    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) || (conn.getLineStyle().equals(EConnectionType.FLOW_REF)) || (conn.getLineStyle().equals(EConnectionType.FLOW_MERGE))) {
      inConn=conn;
      break;
    }
  }
  if (inConn != null) {
    List<IMetadataColumn> columnList=inConn.getMetadataTable().getListColumns();
    schemaViewer.setInput(columnList);
  }
 else {
    schemaViewer.setInput(new ArrayList<IMetadataColumn>());
  }
}","protected void initSchemaTable(){
  IConnection inConn=null;
  for (  IConnection conn : externalNode.getIncomingConnections()) {
    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) || (conn.getLineStyle().equals(EConnectionType.FLOW_REF)) || (conn.getLineStyle().equals(EConnectionType.FLOW_MERGE))) {
      inConn=conn;
      break;
    }
  }
  if (inConn != null) {
    List<IMetadataColumn> columnList=inConn.getMetadataTable().getListColumns();
    schemaViewer.setInput(columnList);
  }
 else {
    schemaViewer.setInput(new ArrayList<IMetadataColumn>());
  }
  if (Platform.OS_MACOSX.equals(Platform.getOS())) {
    TableItem[] items=schemaViewer.getTable().getItems();
    for (int rowid=0; rowid < items.length; rowid++) {
      if (rowid % 2 == 0)       items[rowid].setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
 else       items[rowid].setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
    }
  }
}",0.7514600908500974
117906,"private void addSchemaViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  createCombo(group);
  schemaViewer=new TableViewer(group);
  SchemaTableViewerProvider provider=new SchemaTableViewerProvider();
  schemaViewer.setContentProvider(provider);
  schemaViewer.setLabelProvider(provider);
  GridData data2=new GridData(GridData.FILL_BOTH);
  Table table=schemaViewer.getTable();
  if (canModify || isRepository) {
    table.setEnabled(false);
  }
  table.setHeaderVisible(true);
  TableColumn column1=new TableColumn(table,SWT.LEFT);
  column1.setText(Messages.getString(""String_Node_Str""));
  column1.setWidth(100);
  table.setLayoutData(data2);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (footerComp != null) {
        footerComp.isActivateBtn(false);
      }
    }
  }
);
}","private void addSchemaViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  createCombo(group);
  schemaViewer=new TableViewer(group);
  SchemaTableViewerProvider provider=new SchemaTableViewerProvider();
  schemaViewer.setContentProvider(provider);
  schemaViewer.setLabelProvider(provider);
  GridData data2=new GridData(GridData.FILL_BOTH);
  Table table=schemaViewer.getTable();
  if (canModify || isRepository) {
    table.setEnabled(false);
  }
  table.setHeaderVisible(true);
  TableColumn column1=new TableColumn(table,SWT.LEFT);
  column1.setText(Messages.getString(""String_Node_Str""));
  if (Platform.OS_MACOSX.equals(Platform.getOS())) {
    column1.setWidth(mainComposite.getShell().getBounds().width);
    column1.addControlListener(new ControlListener(){
      @Override public void controlMoved(      ControlEvent e){
      }
      @Override public void controlResized(      ControlEvent e){
        column1.setWidth(mainComposite.getShell().getBounds().width);
      }
    }
);
  }
 else {
    column1.setWidth(100);
  }
  table.setLayoutData(data2);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (footerComp != null) {
        footerComp.isActivateBtn(false);
      }
    }
  }
);
}",0.8253568429890848
117907,"@Override public List<NodeReturn> createReturns(){
  List<NodeReturn> listReturn=new ArrayList<>();
  ComponentProperties componentProperties=ComponentsUtils.getComponentProperties(getName());
  if (!(componentProperties instanceof ComponentPropertiesImpl)) {
    return listReturn;
  }
  NodeReturn nodeRet=new NodeReturn();
  nodeRet.setType(JavaTypesManager.STRING.getLabel());
  nodeRet.setDisplayName(ComponentReturnVariableUtils.getTranslationForVariable(ComponentDefinition.RETURN_ERROR_MESSAGE,ComponentDefinition.RETURN_ERROR_MESSAGE));
  nodeRet.setName(ComponentReturnVariableUtils.getStudioNameFromVariable(ComponentDefinition.RETURN_ERROR_MESSAGE));
  nodeRet.setAvailability(""String_Node_Str"");
  listReturn.add(nodeRet);
  for (  Property<?> child : componentDefinition.getReturnProperties()) {
    nodeRet=new NodeReturn();
    nodeRet.setType(ComponentsUtils.getTalendTypeFromProperty(child).getId());
    nodeRet.setDisplayName(ComponentReturnVariableUtils.getTranslationForVariable(child.getName(),child.getDisplayName()));
    nodeRet.setName(ComponentReturnVariableUtils.getStudioNameFromVariable(child.getName()));
    if (nodeRet.getName().equals(ERROR_MESSAGE)) {
      continue;
    }
    Object object=child.getTaggedValue(IGenericConstants.AVAILABILITY);
    if (object != null) {
      nodeRet.setAvailability(object.toString());
    }
 else {
      nodeRet.setAvailability(""String_Node_Str"");
    }
    listReturn.add(nodeRet);
  }
  return listReturn;
}","@Override public List<NodeReturn> createReturns(INode parentNode){
  List<NodeReturn> listReturn=new ArrayList<>();
  ComponentProperties componentProperties=parentNode.getComponentProperties();
  if (componentProperties == null) {
    parentNode.setComponentProperties(ComponentsUtils.getComponentProperties(getName()));
    componentProperties=parentNode.getComponentProperties();
  }
  if (!(componentProperties instanceof ComponentPropertiesImpl)) {
    return listReturn;
  }
  NodeReturn nodeRet=new NodeReturn();
  nodeRet.setType(JavaTypesManager.STRING.getLabel());
  nodeRet.setDisplayName(ComponentReturnVariableUtils.getTranslationForVariable(ComponentDefinition.RETURN_ERROR_MESSAGE,ComponentDefinition.RETURN_ERROR_MESSAGE));
  nodeRet.setName(ComponentReturnVariableUtils.getStudioNameFromVariable(ComponentDefinition.RETURN_ERROR_MESSAGE));
  nodeRet.setAvailability(""String_Node_Str"");
  listReturn.add(nodeRet);
  for (  Property<?> child : componentDefinition.getReturnProperties()) {
    nodeRet=new NodeReturn();
    nodeRet.setType(ComponentsUtils.getTalendTypeFromProperty(child).getId());
    nodeRet.setDisplayName(ComponentReturnVariableUtils.getTranslationForVariable(child.getName(),child.getDisplayName()));
    nodeRet.setName(ComponentReturnVariableUtils.getStudioNameFromVariable(child.getName()));
    if (nodeRet.getName().equals(ERROR_MESSAGE)) {
      continue;
    }
    Object object=child.getTaggedValue(IGenericConstants.AVAILABILITY);
    if (object != null) {
      nodeRet.setAvailability(object.toString());
    }
 else {
      nodeRet.setAvailability(""String_Node_Str"");
    }
    listReturn.add(nodeRet);
  }
  return listReturn;
}",0.9379746835443038
117908,"@Override public List<INodeConnector> createConnectors(INode parentNode){
  List<INodeConnector> listConnector=new ArrayList<>();
  ComponentProperties componentProperties=ComponentsUtils.getComponentProperties(getName());
  Set<? extends Connector> inputConnectors=componentProperties.getPossibleConnectors(false);
  if (inputConnectors.isEmpty()) {
    INodeConnector connector=null;
    connector=addStandardType(listConnector,EConnectionType.FLOW_MAIN,parentNode);
    connector.setMaxLinkInput(0);
    connector.setMaxLinkOutput(0);
  }
 else {
    for (    Connector connector : inputConnectors) {
      addGenericType(listConnector,EConnectionType.FLOW_MAIN,connector.getName(),parentNode,componentProperties,false);
    }
  }
  Set<? extends Connector> outputConnectors=componentProperties.getPossibleConnectors(true);
  List<? extends Connector> sortedOutputConnectors=new ArrayList<>(outputConnectors);
  sortedOutputConnectors.sort(new Comparator<Connector>(){
    @Override public int compare(    Connector o1,    Connector o2){
      if (Connector.MAIN_NAME.equals(o1.getName())) {
        return -1;
      }
      if (Connector.MAIN_NAME.equals(o2.getName())) {
        return 1;
      }
      return 0;
    }
  }
);
  for (  Connector connector : sortedOutputConnectors) {
    EConnectionType type=EConnectionType.FLOW_MAIN;
    if (Connector.REJECT_NAME.equals(connector.getName())) {
      type=EConnectionType.REJECT;
    }
    addGenericType(listConnector,type,connector.getName(),parentNode,componentProperties,true);
  }
  addStandardType(listConnector,EConnectionType.RUN_IF,parentNode);
  addStandardType(listConnector,EConnectionType.ON_COMPONENT_OK,parentNode);
  addStandardType(listConnector,EConnectionType.ON_COMPONENT_ERROR,parentNode);
  addStandardType(listConnector,EConnectionType.ON_SUBJOB_OK,parentNode);
  addStandardType(listConnector,EConnectionType.ON_SUBJOB_ERROR,parentNode);
  Set<ConnectorTopology> topologies=componentDefinition.getSupportedConnectorTopologies();
  createIterateConnectors(topologies,listConnector,parentNode);
  for (int i=0; i < EConnectionType.values().length; i++) {
    EConnectionType currentType=EConnectionType.values()[i];
    if ((currentType == EConnectionType.FLOW_REF) || (currentType == EConnectionType.FLOW_MERGE)) {
      continue;
    }
    boolean exists=false;
    for (    INodeConnector curNodeConn : listConnector) {
      if (curNodeConn.getDefaultConnectionType().equals(currentType)) {
        exists=true;
        if (currentType == EConnectionType.FLOW_MAIN) {
          curNodeConn.addConnectionProperty(EConnectionType.FLOW_REF,EConnectionType.FLOW_REF.getRGB(),EConnectionType.FLOW_REF.getDefaultLineStyle());
          curNodeConn.addConnectionProperty(EConnectionType.FLOW_MERGE,EConnectionType.FLOW_MERGE.getRGB(),EConnectionType.FLOW_MERGE.getDefaultLineStyle());
        }
      }
    }
    if (!exists) {
      NodeConnector nodeConnector=new NodeConnector(parentNode);
      nodeConnector.setDefaultConnectionType(currentType);
      nodeConnector.setName(currentType.getName());
      nodeConnector.setBaseSchema(currentType.getName());
      nodeConnector.addConnectionProperty(currentType,currentType.getRGB(),currentType.getDefaultLineStyle());
      nodeConnector.setLinkName(currentType.getDefaultLinkName());
      nodeConnector.setMenuName(currentType.getDefaultMenuName());
      if ((currentType == EConnectionType.PARALLELIZE) || (currentType == EConnectionType.SYNCHRONIZE)) {
        nodeConnector.setMaxLinkInput(1);
      }
 else {
        nodeConnector.setMaxLinkInput(0);
      }
      nodeConnector.setMaxLinkOutput(0);
      nodeConnector.setMinLinkInput(0);
      nodeConnector.setMinLinkOutput(0);
      listConnector.add(nodeConnector);
    }
  }
  return listConnector;
}","@Override public List<INodeConnector> createConnectors(INode parentNode){
  List<INodeConnector> listConnector=new ArrayList<>();
  ComponentProperties componentProperties=parentNode.getComponentProperties();
  if (componentProperties == null) {
    parentNode.setComponentProperties(ComponentsUtils.getComponentProperties(getName()));
    componentProperties=parentNode.getComponentProperties();
  }
  Set<? extends Connector> inputConnectors=componentProperties.getPossibleConnectors(false);
  if (inputConnectors.isEmpty()) {
    INodeConnector connector=null;
    connector=addStandardType(listConnector,EConnectionType.FLOW_MAIN,parentNode);
    connector.setMaxLinkInput(0);
    connector.setMaxLinkOutput(0);
  }
 else {
    for (    Connector connector : inputConnectors) {
      addGenericType(listConnector,EConnectionType.FLOW_MAIN,connector.getName(),parentNode,componentProperties,false);
    }
  }
  Set<? extends Connector> outputConnectors=componentProperties.getPossibleConnectors(true);
  List<? extends Connector> sortedOutputConnectors=new ArrayList<>(outputConnectors);
  sortedOutputConnectors.sort(new Comparator<Connector>(){
    @Override public int compare(    Connector o1,    Connector o2){
      if (Connector.MAIN_NAME.equals(o1.getName())) {
        return -1;
      }
      if (Connector.MAIN_NAME.equals(o2.getName())) {
        return 1;
      }
      return 0;
    }
  }
);
  for (  Connector connector : sortedOutputConnectors) {
    EConnectionType type=EConnectionType.FLOW_MAIN;
    if (Connector.REJECT_NAME.equals(connector.getName())) {
      type=EConnectionType.REJECT;
    }
    addGenericType(listConnector,type,connector.getName(),parentNode,componentProperties,true);
  }
  addStandardType(listConnector,EConnectionType.RUN_IF,parentNode);
  addStandardType(listConnector,EConnectionType.ON_COMPONENT_OK,parentNode);
  addStandardType(listConnector,EConnectionType.ON_COMPONENT_ERROR,parentNode);
  addStandardType(listConnector,EConnectionType.ON_SUBJOB_OK,parentNode);
  addStandardType(listConnector,EConnectionType.ON_SUBJOB_ERROR,parentNode);
  Set<ConnectorTopology> topologies=componentDefinition.getSupportedConnectorTopologies();
  createIterateConnectors(topologies,listConnector,parentNode);
  for (int i=0; i < EConnectionType.values().length; i++) {
    EConnectionType currentType=EConnectionType.values()[i];
    if ((currentType == EConnectionType.FLOW_REF) || (currentType == EConnectionType.FLOW_MERGE)) {
      continue;
    }
    boolean exists=false;
    for (    INodeConnector curNodeConn : listConnector) {
      if (curNodeConn.getDefaultConnectionType().equals(currentType)) {
        exists=true;
        if (currentType == EConnectionType.FLOW_MAIN) {
          curNodeConn.addConnectionProperty(EConnectionType.FLOW_REF,EConnectionType.FLOW_REF.getRGB(),EConnectionType.FLOW_REF.getDefaultLineStyle());
          curNodeConn.addConnectionProperty(EConnectionType.FLOW_MERGE,EConnectionType.FLOW_MERGE.getRGB(),EConnectionType.FLOW_MERGE.getDefaultLineStyle());
        }
      }
    }
    if (!exists) {
      NodeConnector nodeConnector=new NodeConnector(parentNode);
      nodeConnector.setDefaultConnectionType(currentType);
      nodeConnector.setName(currentType.getName());
      nodeConnector.setBaseSchema(currentType.getName());
      nodeConnector.addConnectionProperty(currentType,currentType.getRGB(),currentType.getDefaultLineStyle());
      nodeConnector.setLinkName(currentType.getDefaultLinkName());
      nodeConnector.setMenuName(currentType.getDefaultMenuName());
      if ((currentType == EConnectionType.PARALLELIZE) || (currentType == EConnectionType.SYNCHRONIZE)) {
        nodeConnector.setMaxLinkInput(1);
      }
 else {
        nodeConnector.setMaxLinkInput(0);
      }
      nodeConnector.setMaxLinkOutput(0);
      nodeConnector.setMinLinkInput(0);
      nodeConnector.setMinLinkOutput(0);
      listConnector.add(nodeConnector);
    }
  }
  return listConnector;
}",0.9768160741885626
117909,"@Override public List<? extends INodeReturn> createReturns(){
  return new ArrayList<NodeReturn>();
}","@Override public List<? extends INodeReturn> createReturns(INode node){
  return new ArrayList<NodeReturn>();
}",0.9528301886792452
117910,"@Override public List<NodeReturn> createReturns(){
  List<NodeReturn> listReturn;
  RETURNType retType;
  EList returnList;
  NodeReturn nodeRet;
  listReturn=new ArrayList<NodeReturn>();
  nodeRet=new NodeReturn();
  nodeRet.setAvailability(""String_Node_Str"");
  nodeRet.setType(STRING_TYPE);
  nodeRet.setVarName(""String_Node_Str"");
  nodeRet.setDisplayName(""String_Node_Str"");
  nodeRet.setName(""String_Node_Str"");
  listReturn.add(nodeRet);
  if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL)) {
    nodeRet=new NodeReturn();
    nodeRet.setAvailability(""String_Node_Str"");
    nodeRet.setVarName(""String_Node_Str"");
    nodeRet.setDisplayName(""String_Node_Str"");
    nodeRet.setName(""String_Node_Str"");
    nodeRet.setType(STRING_TYPE);
    listReturn.add(nodeRet);
    nodeRet=new NodeReturn();
    nodeRet.setAvailability(""String_Node_Str"");
    nodeRet.setVarName(""String_Node_Str"");
    nodeRet.setDisplayName(""String_Node_Str"");
    nodeRet.setName(""String_Node_Str"");
    nodeRet.setType(STRING_TYPE);
    listReturn.add(nodeRet);
  }
  returnList=compType.getRETURNS().getRETURN();
  for (int i=0; i < returnList.size(); i++) {
    retType=(RETURNType)returnList.get(i);
    nodeRet=new NodeReturn();
    nodeRet.setAvailability(retType.getAVAILABILITY());
    nodeRet.setVarName(retType.getNAME());
    nodeRet.setDisplayName(getTranslatedValue(retType.getNAME() + ""String_Node_Str"" + PROP_NAME));
    nodeRet.setName(retType.getNAME());
    nodeRet.setType(retType.getTYPE());
    nodeRet.setShowIf(retType.getSHOWIF());
    listReturn.add(nodeRet);
  }
  return listReturn;
}","@Override public List<NodeReturn> createReturns(INode parentNode){
  List<NodeReturn> listReturn;
  RETURNType retType;
  EList returnList;
  NodeReturn nodeRet;
  listReturn=new ArrayList<NodeReturn>();
  nodeRet=new NodeReturn();
  nodeRet.setAvailability(""String_Node_Str"");
  nodeRet.setType(STRING_TYPE);
  nodeRet.setVarName(""String_Node_Str"");
  nodeRet.setDisplayName(""String_Node_Str"");
  nodeRet.setName(""String_Node_Str"");
  listReturn.add(nodeRet);
  if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL)) {
    nodeRet=new NodeReturn();
    nodeRet.setAvailability(""String_Node_Str"");
    nodeRet.setVarName(""String_Node_Str"");
    nodeRet.setDisplayName(""String_Node_Str"");
    nodeRet.setName(""String_Node_Str"");
    nodeRet.setType(STRING_TYPE);
    listReturn.add(nodeRet);
    nodeRet=new NodeReturn();
    nodeRet.setAvailability(""String_Node_Str"");
    nodeRet.setVarName(""String_Node_Str"");
    nodeRet.setDisplayName(""String_Node_Str"");
    nodeRet.setName(""String_Node_Str"");
    nodeRet.setType(STRING_TYPE);
    listReturn.add(nodeRet);
  }
  returnList=compType.getRETURNS().getRETURN();
  for (int i=0; i < returnList.size(); i++) {
    retType=(RETURNType)returnList.get(i);
    nodeRet=new NodeReturn();
    nodeRet.setAvailability(retType.getAVAILABILITY());
    nodeRet.setVarName(retType.getNAME());
    nodeRet.setDisplayName(getTranslatedValue(retType.getNAME() + ""String_Node_Str"" + PROP_NAME));
    nodeRet.setName(retType.getNAME());
    nodeRet.setType(retType.getTYPE());
    nodeRet.setShowIf(retType.getSHOWIF());
    listReturn.add(nodeRet);
  }
  return listReturn;
}",0.995049504950495
117911,"@SuppressWarnings(""String_Node_Str"") public INode buildNodeFromNode(final INode graphicalNode,final IProcess process){
  if (buildCheckMap == null) {
    initialize();
  }
  if (buildGraphicalMap.containsKey(graphicalNode)) {
    return (INode)buildGraphicalMap.get(graphicalNode);
  }
  IComponent component=graphicalNode.getComponent();
  Node newGraphicalNode=null;
  if (EComponentType.GENERIC.equals(component.getComponentType())) {
    newGraphicalNode=new Node(graphicalNode,(IProcess2)process);
  }
 else {
    newGraphicalNode=new Node(graphicalNode.getComponent(),(IProcess2)process);
  }
  newGraphicalNode.setMetadataList(graphicalNode.getMetadataList());
  IExternalNode externalNode=graphicalNode.getExternalNode();
  IExternalData externalData=graphicalNode.getExternalData();
  if (externalNode != null) {
    if (externalData != null) {
      newGraphicalNode.getExternalNode().setExternalData(externalData);
    }
    newGraphicalNode.getExternalNode().setExternalEmfData(externalNode.getExternalEmfData());
    newGraphicalNode.getExternalNode().setInternalMapperModel(externalNode.getInternalMapperModel());
  }
  copyElementParametersValue(graphicalNode,newGraphicalNode);
  if (newGraphicalNode.getComponentProperties() != null) {
    List<Form> forms=newGraphicalNode.getComponentProperties().getForms();
    for (    Form form : forms) {
      newGraphicalNode.getComponentProperties().refreshLayout(form);
    }
  }
  newGraphicalNode.setDummy(graphicalNode.isDummy());
  ValidationRulesUtil.createRejectConnector(newGraphicalNode);
  ValidationRulesUtil.updateRejectMetatable(newGraphicalNode,graphicalNode);
  NodeContainer nc=((Process)process).loadNodeContainer(newGraphicalNode,false);
  ((Process)process).addNodeContainer(nc);
  buildGraphicalMap.put(graphicalNode,newGraphicalNode);
  IConnection dataConnec;
  for (  IConnection connection : (List<IConnection>)graphicalNode.getOutgoingConnections()) {
    if (!connection.isActivate()) {
      continue;
    }
    INode connTarget=connection.getTarget();
    if (connTarget.getJobletNode() != null) {
      connTarget=connTarget.getJobletNode();
    }
    INode target=buildNodeFromNode(connTarget,process);
    dataConnec=new Connection(newGraphicalNode,target,connection.getLineStyle(),connection.getConnectorName(),connection.getMetaName(),connection.getName(),connection.getUniqueName(),connection.isMonitorConnection());
    copyElementParametersValue(connection,dataConnec);
    dataConnec.setTraceConnection(connection.isTraceConnection());
  }
  newGraphicalNode.setActivate(graphicalNode.isActivate());
  newGraphicalNode.setStart(graphicalNode.isStart());
  newGraphicalNode.setComponentProperties(graphicalNode.getComponentProperties());
  return newGraphicalNode;
}","@SuppressWarnings(""String_Node_Str"") public INode buildNodeFromNode(final INode graphicalNode,final IProcess process){
  if (buildCheckMap == null) {
    initialize();
  }
  if (buildGraphicalMap.containsKey(graphicalNode)) {
    return (INode)buildGraphicalMap.get(graphicalNode);
  }
  IComponent component=graphicalNode.getComponent();
  Node newGraphicalNode=null;
  if (EComponentType.GENERIC.equals(component.getComponentType())) {
    newGraphicalNode=new Node(graphicalNode,(IProcess2)process);
  }
 else {
    newGraphicalNode=new Node(graphicalNode.getComponent(),(IProcess2)process);
  }
  newGraphicalNode.setMetadataList(graphicalNode.getMetadataList());
  IExternalNode externalNode=graphicalNode.getExternalNode();
  IExternalData externalData=graphicalNode.getExternalData();
  if (externalNode != null) {
    if (externalData != null) {
      newGraphicalNode.getExternalNode().setExternalData(externalData);
    }
    newGraphicalNode.getExternalNode().setExternalEmfData(externalNode.getExternalEmfData());
    newGraphicalNode.getExternalNode().setInternalMapperModel(externalNode.getInternalMapperModel());
  }
  copyElementParametersValue(graphicalNode,newGraphicalNode);
  newGraphicalNode.setDummy(graphicalNode.isDummy());
  ValidationRulesUtil.createRejectConnector(newGraphicalNode);
  ValidationRulesUtil.updateRejectMetatable(newGraphicalNode,graphicalNode);
  NodeContainer nc=((Process)process).loadNodeContainer(newGraphicalNode,false);
  ((Process)process).addNodeContainer(nc);
  buildGraphicalMap.put(graphicalNode,newGraphicalNode);
  IConnection dataConnec;
  for (  IConnection connection : (List<IConnection>)graphicalNode.getOutgoingConnections()) {
    if (!connection.isActivate()) {
      continue;
    }
    INode connTarget=connection.getTarget();
    if (connTarget.getJobletNode() != null) {
      connTarget=connTarget.getJobletNode();
    }
    INode target=buildNodeFromNode(connTarget,process);
    dataConnec=new Connection(newGraphicalNode,target,connection.getLineStyle(),connection.getConnectorName(),connection.getMetaName(),connection.getName(),connection.getUniqueName(),connection.isMonitorConnection());
    copyElementParametersValue(connection,dataConnec);
    dataConnec.setTraceConnection(connection.isTraceConnection());
  }
  newGraphicalNode.setActivate(graphicalNode.isActivate());
  newGraphicalNode.setStart(graphicalNode.isStart());
  return newGraphicalNode;
}",0.9337697343088178
117912,"@Override public List<? extends INodeReturn> createReturns(){
  return null;
}","@Override public List<? extends INodeReturn> createReturns(INode node){
  return null;
}",0.9397590361445785
117913,"@Override public List<? extends INodeReturn> createReturns(){
  return null;
}","@Override public List<? extends INodeReturn> createReturns(INode node){
  return null;
}",0.9397590361445785
117914,"public Node(INode oldNode,IProcess2 process){
  this.oldcomponent=oldNode.getComponent();
  this.componentProperties=oldNode.getComponentProperties();
  this.process=process;
  init(oldNode.getComponent());
  needlibrary=false;
}","public Node(INode oldNode,IProcess2 process){
  this.oldcomponent=oldNode.getComponent();
  if (component != null && component instanceof AbstractBasicComponent) {
    AbstractBasicComponent comp=(AbstractBasicComponent)component;
    comp.initNodePropertiesFromSerialized(this,oldNode.getComponentProperties().toSerialized());
  }
  this.process=process;
  init(oldNode.getComponent());
  needlibrary=false;
}",0.6040688575899843
117915,"private void init(IComponent newComponent){
  this.component=newComponent;
  this.label=component.getName();
  updateComponentStatusIfNeeded(true);
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  labelToParse=store.getString(TalendDesignerPrefConstants.DEFAULT_LABEL);
  hintToParse=store.getString(TalendDesignerPrefConstants.DEFAULT_HINT);
  connectionToParse=store.getString(TalendDesignerPrefConstants.DEFAULT_CONNECTION_FORMAT);
  showHint=store.getBoolean(TalendDesignerPrefConstants.DEFAULT_HINT_USED);
  if (nodeLabel == null) {
    nodeLabel=new NodeLabel(label,this);
  }
  if (nodeError == null) {
    nodeError=new NodeError(this);
  }
  if (nodeProgressBar == null) {
    nodeProgressBar=new NodeProgressBar(this);
  }
  listConnector=this.component.createConnectors(this);
  metadataList=new ArrayList<IMetadataTable>();
  String uniqueName2=null;
  IElementParameter unparam=getElementParameter(EParameterName.UNIQUE_NAME.getName());
  if (unparam != null && !""String_Node_Str"".equals(unparam.getValue())) {
    uniqueName2=(String)unparam.getValue();
  }
  setElementParameters(component.createElementParameters(this));
  boolean hasSchemaType=false;
  for (  IElementParameter param : getElementParameters()) {
    if (param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.DCSCHEMA) || param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) {
      IMetadataTable table=getNewMetadataTable();
      table.setAttachedConnector(param.getContext());
      metadataList.add(table);
      hasSchemaType=true;
    }
  }
  boolean hasMetadata=false;
  for (  INodeConnector curConnector : getListConnector()) {
    if (curConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.DATA)) {
      if (!curConnector.isMultiSchema() && (curConnector.getMaxLinkInput() != 0 || curConnector.getMaxLinkOutput() != 0)) {
        hasMetadata=true;
        break;
      }
    }
  }
  if (hasMetadata && !hasSchemaType) {
    String mainConnector;
    if (isELTComponent()) {
      mainConnector=EConnectionType.TABLE.getName();
    }
 else {
      mainConnector=EConnectionType.FLOW_MAIN.getName();
    }
    IMetadataTable table=getNewMetadataTable();
    table.setAttachedConnector(mainConnector);
    metadataList.add(table);
  }
  listReturn=this.component.createReturns();
  if (!reloadingComponent && (uniqueName2 == null || ""String_Node_Str"".equals(uniqueName2))) {
    if (this.inOutUniqueName != null) {
      uniqueName2=inOutUniqueName;
    }
 else {
      uniqueName2=((Process)getProcess()).generateUniqueNodeName(this);
    }
    ((Process)getProcess()).addUniqueNodeName(uniqueName2);
  }
  setPropertyValue(EParameterName.UNIQUE_NAME.getName(),uniqueName2);
  for (  IElementParameter param : getElementParameters()) {
    if (param.getValue() != null && param.getValue() instanceof String) {
      String value=(String)param.getValue();
      if (value.contains(""String_Node_Str"")) {
        value=value.replace(""String_Node_Str"",uniqueName2);
        param.setValue(value);
      }
    }
  }
  IElementParameter mappingParameter=MetadataToolHelper.getMappingParameter((List<IElementParameter>)this.getElementParameters());
  for (  IMetadataTable table : metadataList) {
    if (table.getAttachedConnector() != null && (table.getAttachedConnector().equals(EConnectionType.FLOW_MAIN.getName()) || table.getAttachedConnector().equals(EConnectionType.TABLE.getName()))) {
      table.setTableName(uniqueName2);
    }
 else {
      table.setTableName(table.getAttachedConnector());
    }
    if (mappingParameter != null) {
      if (mappingParameter.getValue() != null && (!mappingParameter.getValue().equals(""String_Node_Str""))) {
        table.setDbms((String)mappingParameter.getValue());
      }
    }
    for (int i=0; i < getElementParameters().size(); i++) {
      IElementParameter param=getElementParameters().get(i);
      if (param.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
        table.setDbms((String)param.getValue());
      }
      if ((param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.DCSCHEMA) || param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) && param.getContext() != null && param.getContext().equals(table.getAttachedConnector())) {
        if (param.getValue() instanceof IMetadataTable) {
          IMetadataTable paramTable=(IMetadataTable)param.getValue();
          table.getListColumns().addAll(paramTable.getListColumns());
          table.setReadOnly(paramTable.isReadOnly());
        }
 else         if (param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) {
          Schema schema=(Schema)componentProperties.getValuedProperty(param.getName()).getValue();
          org.talend.core.model.metadata.builder.connection.MetadataTable defaultEmfTable=MetadataToolAvroHelper.convertFromAvro(schema);
          IMetadataTable defaultTable=MetadataToolHelper.convert(defaultEmfTable);
          IMetadataTable myTable=getMetadataFromConnector(param.getContext());
          myTable.getListColumns().addAll(defaultTable.getListColumns());
          myTable.setReadOnly(defaultTable.isReadOnly());
        }
      }
    }
  }
  for (int i=0; i < getElementParameters().size(); i++) {
    IElementParameter param=getElementParameters().get(i);
    Object obj=param.getValue();
    if (obj != null) {
      if (param.getName().equals(EParameterName.LABEL.getName())) {
        labelToParse=(String)obj;
      }
 else       if (param.getName().equals(EParameterName.HINT.getName())) {
        hintToParse=(String)obj;
      }
 else       if (param.getName().equals(EParameterName.CONNECTION_FORMAT.getName())) {
        connectionToParse=(String)obj;
      }
 else       if (param.getName().equals(EParameterName.VALIDATION_RULES.getName())) {
        hasValidationRule=(Boolean)obj;
      }
    }
  }
  if (!reloadingComponent) {
    setPropertyValue(EParameterName.LABEL.getName(),labelToParse);
    setPropertyValue(EParameterName.HINT.getName(),hintToParse);
    setPropertyValue(EParameterName.CONNECTION_FORMAT.getName(),connectionToParse);
    connectionName=ElementParameterParser.parse(this,connectionToParse);
    setPropertyValue(EParameterName.SHOW_HINT.getName(),new Boolean(showHint));
    setPropertyValue(EParameterName.VALIDATION_RULES.getName(),hasValidationRule);
  }
  setHasValidationRule(hasValidationRule);
  if (component.getPluginExtension() != null) {
    externalNode=ExternalNodesFactory.getInstance(component.getPluginExtension());
  }
  if (isExternalNode()) {
    IExternalNode eternalNode=getExternalNode();
    eternalNode.initialize();
  }
  if (!getProcess().isDuplicate() || CommonsPlugin.isHeadless() || this.process.getEditor() == null) {
    calculateSubtreeStartAndEnd();
  }
  updateComponentStatusIfNeeded(false);
}","private void init(IComponent newComponent){
  this.component=newComponent;
  this.label=component.getName();
  updateComponentStatusIfNeeded(true);
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  labelToParse=store.getString(TalendDesignerPrefConstants.DEFAULT_LABEL);
  hintToParse=store.getString(TalendDesignerPrefConstants.DEFAULT_HINT);
  connectionToParse=store.getString(TalendDesignerPrefConstants.DEFAULT_CONNECTION_FORMAT);
  showHint=store.getBoolean(TalendDesignerPrefConstants.DEFAULT_HINT_USED);
  if (nodeLabel == null) {
    nodeLabel=new NodeLabel(label,this);
  }
  if (nodeError == null) {
    nodeError=new NodeError(this);
  }
  if (nodeProgressBar == null) {
    nodeProgressBar=new NodeProgressBar(this);
  }
  listConnector=this.component.createConnectors(this);
  metadataList=new ArrayList<IMetadataTable>();
  String uniqueName2=null;
  IElementParameter unparam=getElementParameter(EParameterName.UNIQUE_NAME.getName());
  if (unparam != null && !""String_Node_Str"".equals(unparam.getValue())) {
    uniqueName2=(String)unparam.getValue();
  }
  setElementParameters(component.createElementParameters(this));
  boolean hasSchemaType=false;
  for (  IElementParameter param : getElementParameters()) {
    if (param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.DCSCHEMA) || param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) {
      IMetadataTable table=getNewMetadataTable();
      table.setAttachedConnector(param.getContext());
      metadataList.add(table);
      hasSchemaType=true;
    }
  }
  boolean hasMetadata=false;
  for (  INodeConnector curConnector : getListConnector()) {
    if (curConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.DATA)) {
      if (!curConnector.isMultiSchema() && (curConnector.getMaxLinkInput() != 0 || curConnector.getMaxLinkOutput() != 0)) {
        hasMetadata=true;
        break;
      }
    }
  }
  if (hasMetadata && !hasSchemaType) {
    String mainConnector;
    if (isELTComponent()) {
      mainConnector=EConnectionType.TABLE.getName();
    }
 else {
      mainConnector=EConnectionType.FLOW_MAIN.getName();
    }
    IMetadataTable table=getNewMetadataTable();
    table.setAttachedConnector(mainConnector);
    metadataList.add(table);
  }
  listReturn=this.component.createReturns(this);
  if (!reloadingComponent && (uniqueName2 == null || ""String_Node_Str"".equals(uniqueName2))) {
    if (this.inOutUniqueName != null) {
      uniqueName2=inOutUniqueName;
    }
 else {
      uniqueName2=((Process)getProcess()).generateUniqueNodeName(this);
    }
    ((Process)getProcess()).addUniqueNodeName(uniqueName2);
  }
  setPropertyValue(EParameterName.UNIQUE_NAME.getName(),uniqueName2);
  for (  IElementParameter param : getElementParameters()) {
    if (param.getValue() != null && param.getValue() instanceof String) {
      String value=(String)param.getValue();
      if (value.contains(""String_Node_Str"")) {
        value=value.replace(""String_Node_Str"",uniqueName2);
        param.setValue(value);
      }
    }
  }
  IElementParameter mappingParameter=MetadataToolHelper.getMappingParameter((List<IElementParameter>)this.getElementParameters());
  for (  IMetadataTable table : metadataList) {
    if (table.getAttachedConnector() != null && (table.getAttachedConnector().equals(EConnectionType.FLOW_MAIN.getName()) || table.getAttachedConnector().equals(EConnectionType.TABLE.getName()))) {
      table.setTableName(uniqueName2);
    }
 else {
      table.setTableName(table.getAttachedConnector());
    }
    if (mappingParameter != null) {
      if (mappingParameter.getValue() != null && (!mappingParameter.getValue().equals(""String_Node_Str""))) {
        table.setDbms((String)mappingParameter.getValue());
      }
    }
    for (int i=0; i < getElementParameters().size(); i++) {
      IElementParameter param=getElementParameters().get(i);
      if (param.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
        table.setDbms((String)param.getValue());
      }
      if ((param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.DCSCHEMA) || param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) && param.getContext() != null && param.getContext().equals(table.getAttachedConnector())) {
        if (param.getValue() instanceof IMetadataTable) {
          IMetadataTable paramTable=(IMetadataTable)param.getValue();
          table.getListColumns().addAll(paramTable.getListColumns());
          table.setReadOnly(paramTable.isReadOnly());
        }
 else         if (param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) {
          Schema schema=(Schema)componentProperties.getValuedProperty(param.getName()).getValue();
          org.talend.core.model.metadata.builder.connection.MetadataTable defaultEmfTable=MetadataToolAvroHelper.convertFromAvro(schema);
          IMetadataTable defaultTable=MetadataToolHelper.convert(defaultEmfTable);
          IMetadataTable myTable=getMetadataFromConnector(param.getContext());
          myTable.getListColumns().addAll(defaultTable.getListColumns());
          myTable.setReadOnly(defaultTable.isReadOnly());
        }
      }
    }
  }
  for (int i=0; i < getElementParameters().size(); i++) {
    IElementParameter param=getElementParameters().get(i);
    Object obj=param.getValue();
    if (obj != null) {
      if (param.getName().equals(EParameterName.LABEL.getName())) {
        labelToParse=(String)obj;
      }
 else       if (param.getName().equals(EParameterName.HINT.getName())) {
        hintToParse=(String)obj;
      }
 else       if (param.getName().equals(EParameterName.CONNECTION_FORMAT.getName())) {
        connectionToParse=(String)obj;
      }
 else       if (param.getName().equals(EParameterName.VALIDATION_RULES.getName())) {
        hasValidationRule=(Boolean)obj;
      }
    }
  }
  if (!reloadingComponent) {
    setPropertyValue(EParameterName.LABEL.getName(),labelToParse);
    setPropertyValue(EParameterName.HINT.getName(),hintToParse);
    setPropertyValue(EParameterName.CONNECTION_FORMAT.getName(),connectionToParse);
    connectionName=ElementParameterParser.parse(this,connectionToParse);
    setPropertyValue(EParameterName.SHOW_HINT.getName(),new Boolean(showHint));
    setPropertyValue(EParameterName.VALIDATION_RULES.getName(),hasValidationRule);
  }
  setHasValidationRule(hasValidationRule);
  if (component.getPluginExtension() != null) {
    externalNode=ExternalNodesFactory.getInstance(component.getPluginExtension());
  }
  if (isExternalNode()) {
    IExternalNode eternalNode=getExternalNode();
    eternalNode.initialize();
  }
  if (!getProcess().isDuplicate() || CommonsPlugin.isHeadless() || this.process.getEditor() == null) {
    calculateSubtreeStartAndEnd();
  }
  updateComponentStatusIfNeeded(false);
}",0.999711274722102
117916,"@Override public List<? extends INodeReturn> createReturns(){
  return Collections.emptyList();
}","@Override public List<? extends INodeReturn> createReturns(INode node){
  return Collections.emptyList();
}",0.9509803921568628
117917,"@Override public List<? extends INodeReturn> createReturns(){
  return null;
}","@Override public List<? extends INodeReturn> createReturns(INode node){
  return null;
}",0.9397590361445785
117918,"/** 
 * The <code>MultiPageEditorPart</code> implementation of this <code>IWorkbenchPart</code> method disposes all nested editors. Subclasses may extend.
 */
@Override public void dispose(){
  getSite().setSelectionProvider(null);
  getSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(this);
  ResourcesPlugin.getWorkspace().removeResourceChangeListener(this);
  getSite().getWorkbenchWindow().getPartService().removePartListener(partListener);
  if (this.lockService != null) {
    this.lockService.unregister();
  }
  super.dispose();
  if (getProcess() != null && !getProcess().isReadOnly()) {
    if (isKeepPropertyLocked()) {
      return;
    }
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
    try {
      getProcess().getProperty().eAdapters().remove(dirtyListener);
      Property property=getProcess().getProperty();
      if (property.eResource() == null || property.getItem().eResource() == null) {
        property=repFactory.getUptodateProperty(property);
      }
      JobletUtil jUtil=new JobletUtil();
      jUtil.makeSureUnlockJoblet(getProcess());
      Item item=getProcess().getProperty().getItem();
      boolean keep=jUtil.keepLockJoblet(item);
      if (keep) {
        repFactory.unlock(property.getItem());
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    LoginException e) {
      ExceptionHandler.process(e);
    }
  }
  if (processEditorInput != null) {
    processEditorInput.dispose();
    processEditorInput=null;
  }
  designerEditor=null;
  codeEditor=null;
  if (processor instanceof IJavaBreakpointListener) {
    JDIDebugModel.removeJavaBreakpointListener((IJavaBreakpointListener)processor);
  }
  processor=null;
  dirtyListener=null;
  NodeTransferDragSourceListener.getInstance().setEditPart(null);
}","/** 
 * The <code>MultiPageEditorPart</code> implementation of this <code>IWorkbenchPart</code> method disposes all nested editors. Subclasses may extend.
 */
@Override public void dispose(){
  boolean isDirty=isDirty();
  getSite().setSelectionProvider(null);
  getSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(this);
  ResourcesPlugin.getWorkspace().removeResourceChangeListener(this);
  getSite().getWorkbenchWindow().getPartService().removePartListener(partListener);
  if (this.lockService != null) {
    this.lockService.unregister();
  }
  super.dispose();
  if (getProcess() != null && !getProcess().isReadOnly()) {
    if (isKeepPropertyLocked()) {
      return;
    }
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
    try {
      getProcess().getProperty().eAdapters().remove(dirtyListener);
      Property property=getProcess().getProperty();
      if (property.eResource() == null || property.getItem().eResource() == null) {
        property=repFactory.getUptodateProperty(property);
      }
      JobletUtil jUtil=new JobletUtil();
      jUtil.makeSureUnlockJoblet(getProcess());
      if (isDirty) {
        jUtil.reloadJobletInCurrentProcess(getProcess());
      }
      Item item=getProcess().getProperty().getItem();
      boolean keep=jUtil.keepLockJoblet(item);
      if (keep) {
        repFactory.unlock(property.getItem());
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    LoginException e) {
      ExceptionHandler.process(e);
    }
  }
  if (processEditorInput != null) {
    processEditorInput.dispose();
    processEditorInput=null;
  }
  designerEditor=null;
  codeEditor=null;
  if (processor instanceof IJavaBreakpointListener) {
    JDIDebugModel.removeJavaBreakpointListener((IJavaBreakpointListener)processor);
  }
  processor=null;
  dirtyListener=null;
  NodeTransferDragSourceListener.getInstance().setEditPart(null);
}",0.9708396178984414
117919,"public void changePaletteComponentHandler(){
  ComponentsFactoryProvider.getInstance().setComponentsHandler(designerEditor.getComponenentsHandler());
}","@Override public void changePaletteComponentHandler(){
  ComponentsFactoryProvider.getInstance().setComponentsHandler(designerEditor.getComponenentsHandler());
}",0.967948717948718
117920,"@Override protected void okPressed(){
  Tree tree=viewer.getTree();
  if (tree.isDisposed()) {
    return;
  }
  setResult(getInputElements());
  super.okPressed();
}","@Override protected void okPressed(){
  selectedElement=getCheckedElements();
  Tree tree=viewer.getTree();
  if (tree.isDisposed()) {
    return;
  }
  setResult(getInputElements());
  super.okPressed();
}",0.8924731182795699
117921,"/** 
 * create table view.
 */
private Composite createTreeTableView(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  int style=SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER;
  if (!isOnlySimpleShow()) {
    style=SWT.CHECK | style;
  }
  viewer=new CheckboxTreeViewer(new Tree(composite,style));
  viewer.setContentProvider(new UpdateContentProvider());
  viewer.setLabelProvider(new UpdateLabelProvider());
  viewer.setSorter(new UpdateViewerSorter());
  viewer.setInput(getInputElements());
  final Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  addViewerListener();
  createColumns(tree);
  return composite;
}","/** 
 * create table view.
 */
private Composite createTreeTableView(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  int style=SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER;
  if (!isOnlySimpleShow()) {
    style=SWT.CHECK | style;
  }
  viewer=new CheckboxTreeViewer(new Tree(composite,style));
  viewer.setContentProvider(new UpdateContentProvider());
  viewer.setLabelProvider(new UpdateLabelProvider());
  viewer.setSorter(new UpdateViewerSorter());
  viewer.setInput(getInputElements());
  final Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  addViewerListener();
  createColumns(tree);
  helper.selectAll(true);
  return composite;
}",0.9850574712643678
117922,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.PROCESS) {
      canWork=false;
      break;
    }
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT && node.getChildren().isEmpty()) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  List<RepositoryNode> nodes=selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.PROCESS) {
      canWork=false;
      break;
    }
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT && node.getChildren().isEmpty()) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
    if (ExportJobUtil.getProcessItem(nodes) == null) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}",0.9389067524115756
117923,"protected ProcessItem getProcessItem(){
  if ((processItem == null) && (nodes != null) && (nodes.length >= 1)) {
    IRepositoryViewObject repositoryObject=nodes[0].getObject();
    List<IRepositoryNode> nodesChildren=nodes[0].getChildren();
    IRepositoryViewObject childObject=null;
    if ((nodesChildren != null) && (nodesChildren.size() >= 1)) {
      childObject=nodesChildren.get(0).getObject();
    }
    if (repositoryObject == null && childObject != null && childObject.getProperty().getItem() instanceof ProcessItem) {
      processItem=(ProcessItem)childObject.getProperty().getItem();
    }
    if (repositoryObject != null && repositoryObject.getProperty().getItem() instanceof ProcessItem) {
      processItem=(ProcessItem)repositoryObject.getProperty().getItem();
    }
 else     if (repositoryObject != null && repositoryObject.getProperty().getItem() instanceof FolderItem) {
      processItem=getProcessItemIfSelectFolder(repositoryObject);
    }
  }
  return processItem;
}","protected ProcessItem getProcessItem(){
  if ((processItem == null) && (nodes != null) && (nodes.length >= 1)) {
    processItem=ExportJobUtil.getProcessItem(Arrays.asList(nodes));
  }
  return processItem;
}",0.2246256239600665
117924,"/** 
 * this function is moved from the method updateGraphicalNodes.
 */
@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  Object job=result.getJob();
  if (job == null) {
    return;
  }
  if (job instanceof Process) {
    Process process=(Process)job;
    Object parameter=result.getParameter();
    if (parameter instanceof PropertyChangeEvent) {
      PropertyChangeEvent evt=(PropertyChangeEvent)parameter;
      updatePropertyChangeEvents(process,evt);
    }
 else {
      IUpdateItemType updateType=result.getUpdateType();
      if (updateType instanceof EUpdateItemType) {
switch ((EUpdateItemType)updateType) {
case JOBLET_RENAMED:
          if (!(parameter instanceof List)) {
            return;
          }
        List<Object> params=(List<Object>)parameter;
      if (params.size() != 3) {
        return;
      }
    final String oldName=(String)params.get(1);
  final String newName=(String)params.get(2);
updateRenaming(process,oldName,newName);
break;
case RELOAD:
List<Node> jobletNodes=(List<Node>)result.getUpdateObject();
if (jobletNodes != null && !jobletNodes.isEmpty()) {
for (Node node : jobletNodes) {
IComponent newComponent=ComponentsFactoryProvider.getInstance().get(node.getComponent().getName(),process.getComponentsType());
if (newComponent == null) {
continue;
}
Node currentNode=getOriginalNodeFromProcess(node);
boolean neesPro=needPropagate(currentNode);
if (currentNode.isJoblet() || currentNode.isMapReduce()) {
List<IElementParameter> tempList=new ArrayList<IElementParameter>(currentNode.getElementParameters());
if (result.isNeedReloadJoblet()) {
  reloadNode(currentNode,newComponent);
}
if (currentNode.getNodeContainer() instanceof AbstractJobletContainer) {
  for (  IElementParameter para : tempList) {
    currentNode.getElementParameter(para.getName()).setValue(para.getValue());
  }
  ((AbstractJobletContainer)currentNode.getNodeContainer()).updateJobletNodes(true);
}
}
 else {
reloadNode(currentNode,newComponent);
}
propagate(currentNode,neesPro);
}
process.checkProcess();
}
break;
case JOBLET_SCHEMA:
updateSchema(process,(Node)result.getUpdateObject());
break;
default :
}
}
}
}
}","/** 
 * this function is moved from the method updateGraphicalNodes.
 */
@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  Object job=result.getJob();
  if (job == null) {
    return;
  }
  if (job instanceof Process) {
    Process process=(Process)job;
    Object parameter=result.getParameter();
    if (parameter instanceof PropertyChangeEvent) {
      PropertyChangeEvent evt=(PropertyChangeEvent)parameter;
      updatePropertyChangeEvents(process,evt);
    }
 else {
      IUpdateItemType updateType=result.getUpdateType();
      if (updateType instanceof EUpdateItemType) {
switch ((EUpdateItemType)updateType) {
case JOBLET_RENAMED:
          if (!(parameter instanceof List)) {
            return;
          }
        List<Object> params=(List<Object>)parameter;
      if (params.size() != 3) {
        return;
      }
    final String oldName=(String)params.get(1);
  final String newName=(String)params.get(2);
updateRenaming(process,oldName,newName);
break;
case RELOAD:
List<Node> jobletNodes=(List<Node>)result.getUpdateObject();
if (jobletNodes != null && !jobletNodes.isEmpty()) {
for (Node node : jobletNodes) {
IComponent newComponent=ComponentsFactoryProvider.getInstance().get(node.getComponent().getName(),process.getComponentsType());
if (newComponent == null) {
continue;
}
Node currentNode=getOriginalNodeFromProcess(node);
boolean neesPro=needPropagate(currentNode);
if (currentNode.isJoblet() || currentNode.isMapReduce()) {
List<IElementParameter> tempList=new ArrayList<IElementParameter>(currentNode.getElementParameters());
if (result.isNeedReloadJoblet()) {
  reloadNode(currentNode,newComponent);
}
if (currentNode.getNodeContainer() instanceof AbstractJobletContainer) {
  for (  IElementParameter tempParam : tempList) {
    IElementParameter param=currentNode.getElementParameter(tempParam.getName());
    if (param != null) {
      param.setValue(tempParam.getValue());
    }
  }
  ((AbstractJobletContainer)currentNode.getNodeContainer()).updateJobletNodes(true);
}
}
 else {
reloadNode(currentNode,newComponent);
}
propagate(currentNode,neesPro);
}
process.checkProcess();
}
break;
case JOBLET_SCHEMA:
updateSchema(process,(Node)result.getUpdateObject());
break;
default :
}
}
}
}
}",0.9634174051351966
117925,"private void prepareEmfTreeFromConnection(XmlFileConnection connection){
  schemaNode.getChildren().clear();
  EList root=connection.getRoot();
  EList loop=connection.getLoop();
  EList group=connection.getGroup();
  TreeNode rootNode=null;
  TreeNode current=null;
  TreeNode temp=null;
  TreeNode mainNode=null;
  String mainPath=null;
  String currentPath=""String_Node_Str"";
  String defaultValue=null;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.ATTRIBUT,defaultValue);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.NAME_SPACE,defaultValue);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,type,NodeType.ELEMENT,node.getOrder());
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      current=temp;
      currentPath=newPath;
    }
  }
  current=mainNode;
  currentPath=mainPath;
  boolean isFirst=true;
  groupElements=new ArrayList<TreeNode>();
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.ATTRIBUT,defaultValue);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.NAME_SPACE,defaultValue);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,type,NodeType.ELEMENT,node.getOrder());
      groupElements.add(temp);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      current=temp;
      currentPath=newPath;
    }
  }
  current=mainNode;
  currentPath=mainPath;
  isFirst=true;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.ATTRIBUT,defaultValue);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.NAME_SPACE,defaultValue);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,type,NodeType.ELEMENT,node.getOrder());
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        loopNode=temp;
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
  }
  if (rootNode != null) {
    schemaNode.getChildren().add(rootNode);
  }
  if (loopNode != null) {
    fillGroup(loopNode,groupElements);
  }
}","private void prepareEmfTreeFromConnection(XmlFileConnection connection){
  schemaNode.getChildren().clear();
  EList root=connection.getRoot();
  EList loop=connection.getLoop();
  EList group=connection.getGroup();
  TreeNode rootNode=null;
  TreeNode current=null;
  TreeNode temp=null;
  TreeNode mainNode=null;
  String mainPath=null;
  String currentPath=""String_Node_Str"";
  String defaultValue=null;
  MetadataTable metaTable=ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0];
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.ATTRIBUT,defaultValue);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.NAME_SPACE,defaultValue);
    }
 else {
      String columnPattern=getColumnPatternFromMetadataTable(node,metaTable);
      temp=this.addElement(current,currentPath,newPath,type,columnPattern,NodeType.ELEMENT,node.getOrder());
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      current=temp;
      currentPath=newPath;
    }
  }
  current=mainNode;
  currentPath=mainPath;
  boolean isFirst=true;
  groupElements=new ArrayList<TreeNode>();
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.ATTRIBUT,defaultValue);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.NAME_SPACE,defaultValue);
    }
 else {
      String columnPattern=getColumnPatternFromMetadataTable(node,metaTable);
      temp=this.addElement(current,currentPath,newPath,type,columnPattern,NodeType.ELEMENT,node.getOrder());
      groupElements.add(temp);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      current=temp;
      currentPath=newPath;
    }
  }
  current=mainNode;
  currentPath=mainPath;
  isFirst=true;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.ATTRIBUT,defaultValue);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      this.addAttributeNamespace(current,currentPath,newPath,type,NodeType.NAME_SPACE,defaultValue);
    }
 else {
      String columnPattern=getColumnPatternFromMetadataTable(node,metaTable);
      temp=this.addElement(current,currentPath,newPath,type,columnPattern,NodeType.ELEMENT,node.getOrder());
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        loopNode=temp;
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
  }
  if (rootNode != null) {
    schemaNode.getChildren().add(rootNode);
  }
  if (loopNode != null) {
    fillGroup(loopNode,groupElements);
  }
}",0.9489031203161192
117926,"private TreeNode addElement(TreeNode current,String currentPath,String newPath,String type,NodeType nodeType,int order){
  TreeNode temp=createModel();
  String name=newPath.substring(newPath.lastIndexOf(""String_Node_Str"") + 1);
  String parentPath=newPath.substring(0,newPath.lastIndexOf(""String_Node_Str""));
  temp.setName(name);
  if (type == null) {
    type=XmlMapUtil.DEFAULT_DATA_TYPE;
  }
  temp.setType(type);
  temp.setNodeType(nodeType);
  if (type.equals(""String_Node_Str"")) {
    temp.setPattern(""String_Node_Str"");
  }
  if (current == null) {
    temp.setXpath(XmlMapUtil.getXPath(schemaNode.getXpath(),name,nodeType));
    return temp;
  }
  if (currentPath.equals(parentPath)) {
    temp.setXpath(XmlMapUtil.getXPath(current.getXpath(),name,nodeType));
    addChildInOrder(current,temp,order);
  }
 else {
    String[] nods=currentPath.split(""String_Node_Str"");
    String[] newNods=parentPath.split(""String_Node_Str"");
    int parentLevel=0;
    int checkLength=nods.length < newNods.length ? nods.length : newNods.length;
    for (int i=1; i < checkLength; i++) {
      if (nods[i].equals(newNods[i])) {
        parentLevel=i;
      }
    }
    TreeNode parent=current;
    for (int i=0; i < nods.length - (parentLevel + 1); i++) {
      TreeNode tmpParent=(TreeNode)parent.eContainer();
      if (tmpParent == null) {
        break;
      }
      parent=tmpParent;
    }
    if (parent != null) {
      temp.setXpath(XmlMapUtil.getXPath(parent.getXpath(),name,nodeType));
      addChildInOrder(parent,temp,order);
    }
  }
  return temp;
}","private TreeNode addElement(TreeNode current,String currentPath,String newPath,String type,String pattern,NodeType nodeType,int order){
  TreeNode temp=createModel();
  String name=newPath.substring(newPath.lastIndexOf(""String_Node_Str"") + 1);
  String parentPath=newPath.substring(0,newPath.lastIndexOf(""String_Node_Str""));
  temp.setName(name);
  if (type == null) {
    type=XmlMapUtil.DEFAULT_DATA_TYPE;
  }
  temp.setType(type);
  temp.setNodeType(nodeType);
  if (pattern != null) {
    temp.setPattern(pattern);
  }
 else   if (type.equals(""String_Node_Str"")) {
    temp.setPattern(""String_Node_Str"");
  }
  if (current == null) {
    temp.setXpath(XmlMapUtil.getXPath(schemaNode.getXpath(),name,nodeType));
    return temp;
  }
  if (currentPath.equals(parentPath)) {
    temp.setXpath(XmlMapUtil.getXPath(current.getXpath(),name,nodeType));
    addChildInOrder(current,temp,order);
  }
 else {
    String[] nods=currentPath.split(""String_Node_Str"");
    String[] newNods=parentPath.split(""String_Node_Str"");
    int parentLevel=0;
    int checkLength=nods.length < newNods.length ? nods.length : newNods.length;
    for (int i=1; i < checkLength; i++) {
      if (nods[i].equals(newNods[i])) {
        parentLevel=i;
      }
    }
    TreeNode parent=current;
    for (int i=0; i < nods.length - (parentLevel + 1); i++) {
      TreeNode tmpParent=(TreeNode)parent.eContainer();
      if (tmpParent == null) {
        break;
      }
      parent=tmpParent;
    }
    if (parent != null) {
      temp.setXpath(XmlMapUtil.getXPath(parent.getXpath(),name,nodeType));
      addChildInOrder(parent,temp,order);
    }
  }
  return temp;
}",0.975
117927,"public DeploymentComposite(Composite parent,int style,TabbedPropertySheetWidgetFactory widgetFactory,IRepositoryViewObject repositoryViewObject){
  super(parent,style,widgetFactory,repositoryViewObject);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
    esbService=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
  }
  if (repositoryViewObject instanceof Process) {
    process=(Process)repositoryViewObject;
    commandStack=process.getCommandStack();
    defaultVersion=getDefaultVersion(process.getVersion());
    isDataServiceJob=false;
    if (!process.getComponentsType().equals(ComponentCategory.CATEGORY_4_CAMEL.getName())) {
      List<INode> nodes=(List<INode>)process.getGraphicalNodes();
      for (      INode node : nodes) {
        if (""String_Node_Str"".equals(node.getComponent().getName())) {
          isDataServiceJob=true;
          defaultVersion=""String_Node_Str"";
          break;
        }
      }
    }
  }
 else {
    IEditorPart editor=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (esbService.isWSDLEditor(editor) && esbService.getServicesType() == repositoryViewObject.getRepositoryObjectType()) {
      serviceItem=esbService.getWSDLEditorItem(editor);
      commandStack=(CommandStack)editor.getAdapter(CommandStack.class);
      defaultVersion=getDefaultVersion(serviceItem.getProperty().getVersion());
      isService=true;
    }
  }
  createControl();
  initialize();
  addListeners();
  checkReadOnly();
}","public DeploymentComposite(Composite parent,int style,TabbedPropertySheetWidgetFactory widgetFactory,IRepositoryViewObject repositoryViewObject){
  super(parent,style,widgetFactory,repositoryViewObject);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
    esbService=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
  }
  if (repositoryViewObject instanceof Process) {
    process=(Process)repositoryViewObject;
    commandStack=process.getCommandStack();
    defaultVersion=getDefaultVersion(process.getVersion());
    isDataServiceJob=false;
    if (!process.getComponentsType().equals(ComponentCategory.CATEGORY_4_CAMEL.getName())) {
      List<INode> nodes=(List<INode>)process.getGraphicalNodes();
      for (      INode node : nodes) {
        if (""String_Node_Str"".equals(node.getComponent().getName())) {
          isDataServiceJob=true;
          defaultVersion=""String_Node_Str"";
          break;
        }
      }
    }
  }
 else {
    IEditorPart editor=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (esbService != null && esbService.isWSDLEditor(editor)) {
      serviceItem=esbService.getWSDLEditorItem(editor);
      commandStack=(CommandStack)editor.getAdapter(CommandStack.class);
      defaultVersion=getDefaultVersion(serviceItem.getProperty().getVersion());
      isService=true;
    }
  }
  createControl();
  initialize();
  addListeners();
  checkReadOnly();
}",0.965946299934512
117928,"@Override protected void checkVisibleTopMessages(){
  missModulesNeeded.clear();
  final Element ele=this.getElement();
  if (ele instanceof Node) {
    List<ModuleNeeded> updatedModules=LibrariesManagerUtils.getNotInstalledModules(((Node)ele));
    missModulesNeeded.addAll(updatedModules);
  }
  setVisibleTopMessage(!missModulesNeeded.isEmpty());
}","@Override protected void checkVisibleTopMessages(){
  missModulesNeeded.clear();
  final Element ele=this.getElement();
  if (ele instanceof Node) {
    List<ModuleNeeded> updatedModules=LibrariesManagerUtils.getNotInstalledModules(((Node)ele));
    missModulesNeeded.addAll(updatedModules);
    ((Node)ele).checkAndRefreshNode();
  }
  setVisibleTopMessage(!missModulesNeeded.isEmpty());
}",0.9473684210526316
117929,"@Override protected ElementParameterType getParameterType(NodeType node,String paramName){
  ElementParameterType paramType=ParameterUtilTool.findParameterType(node,paramName);
  if (""String_Node_Str"".equals(paramName) && paramType == null) {
    ParameterUtilTool.addParameterType(node,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    paramType=ParameterUtilTool.findParameterType(node,paramName);
  }
  if (node != null && paramType != null) {
    String componentName=node.getComponentName();
    Object value=ParameterUtilTool.convertParameterValue(paramType);
    if (""String_Node_Str"".equals(paramName)) {
      if (""String_Node_Str"".equals(String.valueOf(value))) {
        paramType.setValue(""String_Node_Str"");
      }
 else {
        paramType.setValue(""String_Node_Str"");
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(String.valueOf(value))) {
      paramType.setValue(""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
switch (String.valueOf(value)) {
case ""String_Node_Str"":
        paramType.setValue(""String_Node_Str"");
      break;
case ""String_Node_Str"":
    paramType.setValue(""String_Node_Str"");
  break;
case ""String_Node_Str"":
paramType.setValue(""String_Node_Str"");
break;
}
}
if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
ElementParameterType batchSize=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
ElementParameterType maxReturn=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
Object batchSizeValue=ParameterUtilTool.convertParameterValue(batchSize);
if (operation != null && leadSelector != null) {
Object operationValue=ParameterUtilTool.convertParameterValue(operation);
Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
Object maxReturnValue=ParameterUtilTool.convertParameterValue(maxReturn);
if (""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue)) && maxReturnValue != null) {
paramType.setValue(String.valueOf(maxReturnValue));
}
 else {
paramType.setValue(String.valueOf(batchSizeValue));
}
}
 else {
paramType.setValue(String.valueOf(batchSizeValue));
}
}
}
return paramType;
}","@Override protected ElementParameterType getParameterType(NodeType node,String paramName){
  ElementParameterType paramType=ParameterUtilTool.findParameterType(node,paramName);
  if (""String_Node_Str"".equals(paramName) && paramType == null) {
    ParameterUtilTool.addParameterType(node,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    paramType=ParameterUtilTool.findParameterType(node,paramName);
  }
  if (node != null && paramType != null) {
    String componentName=node.getComponentName();
    Object value=ParameterUtilTool.convertParameterValue(paramType);
    if (""String_Node_Str"".equals(paramName)) {
      if (""String_Node_Str"".equals(String.valueOf(value))) {
        paramType.setValue(""String_Node_Str"");
      }
 else {
        paramType.setValue(""String_Node_Str"");
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(String.valueOf(value))) {
      paramType.setValue(""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
switch (String.valueOf(value)) {
case ""String_Node_Str"":
        paramType.setValue(""String_Node_Str"");
      break;
case ""String_Node_Str"":
    paramType.setValue(""String_Node_Str"");
  break;
case ""String_Node_Str"":
paramType.setValue(""String_Node_Str"");
break;
}
}
if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
ElementParameterType batchSize=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
ElementParameterType maxReturn=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
Object batchSizeValue=ParameterUtilTool.convertParameterValue(batchSize);
if (operation != null && leadSelector != null) {
Object operationValue=ParameterUtilTool.convertParameterValue(operation);
Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
Object maxReturnValue=ParameterUtilTool.convertParameterValue(maxReturn);
if (""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue)) && maxReturnValue != null) {
paramType.setValue(String.valueOf(maxReturnValue));
}
 else {
paramType.setValue(String.valueOf(batchSizeValue));
}
}
 else {
paramType.setValue(String.valueOf(batchSizeValue));
}
}
if (""String_Node_Str"".equals(paramName)) {
paramType.setValue(TalendQuoteUtils.addQuotesIfNotExist(String.valueOf(value)));
}
}
return paramType;
}",0.975206611570248
117930,"@Override protected void addFields(){
  Group group=Form.createGroup(this,1,""String_Node_Str"",100);
  Composite compositeFileLocation=Form.startNewDimensionnedGridLayout(group,3,WIDTH_GRIDDATA_PIXEL,100);
  GridData gridDataFileLocation=new GridData(GridData.FILL_HORIZONTAL);
  gridDataFileLocation.minimumWidth=WIDTH_GRIDDATA_PIXEL;
  group.setLayoutData(gridDataFileLocation);
  List<String> readbyModeValues=EJsonReadbyMode.getUsableReadbyModeValues();
  readbyCombo=new LabelledCombo(compositeFileLocation,""String_Node_Str"",""String_Node_Str"",readbyModeValues.toArray(new String[readbyModeValues.size()]),2,true,SWT.READ_ONLY);
  String[] JSONExtensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  fileFieldJSON=new LabelledFileField(compositeFileLocation,""String_Node_Str"",JSONExtensions);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileLocation,""String_Node_Str"",""String_Node_Str"",encodingData,1,true,SWT.NONE);
  Composite limitation=new Composite(compositeFileLocation,SWT.NONE);
  limitation.setLayout(new GridLayout(2,false));
  labelLimitation=new Label(limitation,SWT.LEFT);
  labelLimitation.setText(""String_Node_Str"");
  commonNodesLimitation=new Text(limitation,SWT.BORDER);
  GridData gd=new GridData(18,12);
  commonNodesLimitation.setLayoutData(gd);
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
  labelLimitation.setToolTipText(MessageFormat.format(Messages.JSONLimitToolTip,commonNodesLimitation.getText()));
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
        labelLimitation.setToolTipText(MessageFormat.format(Messages.JSONLimitToolTip,commonNodesLimitation.getText()));
        ;
      }
 else {
        limit=Integer.valueOf(str);
        labelLimitation.setToolTipText(MessageFormat.format(Messages.JSONLimitToolTip,limit));
      }
      String tempxml=null;
      if (tempJSONXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
        tempxml=getFilePath4Populate(tempJSONXsdPath);
      }
 else {
        tempxml=getFilePath4Populate(fileFieldJSON.getText());
      }
      switchPopulator(JSONFileStep1Form.this.wizard.getReadbyMode(),tempxml);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
      labelLimitation.setToolTipText(MessageFormat.format(Messages.JSONLimitToolTip,commonNodesLimitation.getText()));
    }
  }
);
  group=Form.createGroup(this,1,""String_Node_Str"",220);
  Composite compositeFileViewer=Form.startNewDimensionnedGridLayout(group,1,WIDTH_GRIDDATA_PIXEL,220);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.minimumWidth=WIDTH_GRIDDATA_PIXEL;
  availableJSONTree=new Tree(compositeFileViewer,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
  availableJSONTree.setLayoutData(gridData);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,""String_Node_Str"",WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
  addUtilsButtonListeners();
}","@Override protected void addFields(){
  Group group=Form.createGroup(this,1,""String_Node_Str"",100);
  Composite compositeFileLocation=Form.startNewDimensionnedGridLayout(group,3,WIDTH_GRIDDATA_PIXEL,100);
  GridData gridDataFileLocation=new GridData(GridData.FILL_HORIZONTAL);
  gridDataFileLocation.minimumWidth=WIDTH_GRIDDATA_PIXEL;
  group.setLayoutData(gridDataFileLocation);
  List<String> readbyModeValues=EJsonReadbyMode.getUsableReadbyModeValues();
  readbyCombo=new LabelledCombo(compositeFileLocation,""String_Node_Str"",""String_Node_Str"",readbyModeValues.toArray(new String[readbyModeValues.size()]),2,true,SWT.READ_ONLY);
  String[] JSONExtensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  fileFieldJSON=new LabelledFileField(compositeFileLocation,""String_Node_Str"",JSONExtensions);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileLocation,""String_Node_Str"",""String_Node_Str"",encodingData,1,true,SWT.NONE);
  Composite limitation=new Composite(compositeFileLocation,SWT.NONE);
  limitation.setLayout(new GridLayout(2,false));
  labelLimitation=new Label(limitation,SWT.LEFT);
  labelLimitation.setText(""String_Node_Str"");
  commonNodesLimitation=new Text(limitation,SWT.BORDER);
  GridData gd=new GridData(GridData.VERTICAL_ALIGN_FILL);
  gd.widthHint=18;
  commonNodesLimitation.setLayoutData(gd);
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
  labelLimitation.setToolTipText(MessageFormat.format(Messages.JSONLimitToolTip,commonNodesLimitation.getText()));
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
        labelLimitation.setToolTipText(MessageFormat.format(Messages.JSONLimitToolTip,commonNodesLimitation.getText()));
        ;
      }
 else {
        limit=Integer.valueOf(str);
        labelLimitation.setToolTipText(MessageFormat.format(Messages.JSONLimitToolTip,limit));
      }
      String tempxml=null;
      if (tempJSONXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
        tempxml=getFilePath4Populate(tempJSONXsdPath);
      }
 else {
        tempxml=getFilePath4Populate(fileFieldJSON.getText());
      }
      switchPopulator(JSONFileStep1Form.this.wizard.getReadbyMode(),tempxml);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
      labelLimitation.setToolTipText(MessageFormat.format(Messages.JSONLimitToolTip,commonNodesLimitation.getText()));
    }
  }
);
  group=Form.createGroup(this,1,""String_Node_Str"",220);
  Composite compositeFileViewer=Form.startNewDimensionnedGridLayout(group,1,WIDTH_GRIDDATA_PIXEL,220);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.minimumWidth=WIDTH_GRIDDATA_PIXEL;
  availableJSONTree=new Tree(compositeFileViewer,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
  availableJSONTree.setLayoutData(gridData);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,""String_Node_Str"",WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
  addUtilsButtonListeners();
}",0.9933722163308588
117931,"/** 
 * Test if the current node can be the start of the job not.
 * @return
 */
@Override public boolean checkIfCanBeStart(){
  if (isELTComponent()) {
    if (this.checkELTTableReference()) {
      return false;
    }
    boolean isThereConditionLink=false;
    for (int j=0; j < getIncomingConnections().size() && !isThereConditionLink; j++) {
      IConnection connection=getIncomingConnections().get(j);
      if (connection.isActivate() && connection.getLineStyle().hasConnectionCategory(IConnectionCategory.DEPENDENCY)) {
        isThereConditionLink=true;
      }
    }
    return !isThereConditionLink;
  }
 else {
    boolean canBeStart=false;
    boolean isActivatedConnection=false;
    for (int j=0; j < getIncomingConnections().size() && !isActivatedConnection; j++) {
      IConnection connection=getIncomingConnections().get(j);
      if (connection.isActivate() && !connection.getLineStyle().hasConnectionCategory(IConnectionCategory.USE_HASH)) {
        isActivatedConnection=true;
      }
    }
    boolean isOnMainBranch=true;
    Map<INode,Integer> mergeInfo=getLinkedMergeInfo();
    for (    INode node : mergeInfo.keySet()) {
      if (mergeInfo.get(node) != 1) {
        isOnMainBranch=false;
      }
    }
    if (!isActivatedConnection) {
      if (!getProcess().isThereLinkWithHash(this) && isOnMainBranch) {
        canBeStart=true;
      }
    }
 else {
      if (getIncomingConnections().size() == 0 && isOnMainBranch) {
        if (!getProcess().isThereLinkWithHash(this)) {
          canBeStart=true;
        }
      }
    }
    return canBeStart;
  }
}","/** 
 * Test if the current node can be the start of the job not.
 * @return
 */
@Override public boolean checkIfCanBeStart(){
  if (isELTSAPMapComponent()) {
    if (!isThereConditionLink() && isOnMainBranch()) {
      return true;
    }
    return false;
  }
 else   if (isELTComponent()) {
    if (this.checkELTTableReference()) {
      return false;
    }
    return !isThereConditionLink();
  }
 else {
    boolean canBeStart=false;
    boolean isActivatedConnection=false;
    for (int j=0; j < getIncomingConnections().size() && !isActivatedConnection; j++) {
      IConnection connection=getIncomingConnections().get(j);
      if (connection.isActivate() && !connection.getLineStyle().hasConnectionCategory(IConnectionCategory.USE_HASH)) {
        isActivatedConnection=true;
      }
    }
    boolean isOnMainBranch=isOnMainBranch();
    if (!isActivatedConnection) {
      if (!getProcess().isThereLinkWithHash(this) && isOnMainBranch) {
        canBeStart=true;
      }
    }
 else {
      if (getIncomingConnections().size() == 0 && isOnMainBranch) {
        if (!getProcess().isThereLinkWithHash(this)) {
          canBeStart=true;
        }
      }
    }
    return canBeStart;
  }
}",0.7473948975925261
117932,"public IStatus doRun(){
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    jetFilesCompileFail.clear();
    IProgressMonitor monitorWrap=null;
    monitorWrap=new NullProgressMonitor();
    ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
    initializeJetEmittersProject(monitorWrap);
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    CodeGeneratorInternalTemplatesFactory templatesFactory=CodeGeneratorInternalTemplatesFactoryProvider.getInstance();
    templatesFactory.setCurrentLanguage(codeLanguage);
    templatesFactory.init();
    IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
    long startTime=System.currentTimeMillis();
    defaultTemplate=templatesFactory.getTemplatesFromType(EInternalTemplate.DEFAULT_TEMPLATE).get(0).getTemplateRelativeUri();
    List<JetBean> jetBeans=new ArrayList<JetBean>();
    List<TemplateUtil> templates=templatesFactory.getTemplates();
    Set<IComponent> components=componentsFactory.getComponents();
    List<IComponent> genericComponents=new ArrayList<IComponent>();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    monitorWrap.beginTask(Messages.getString(""String_Node_Str""),(2 * templates.size() + 5 * components.size()));
    int monitorBuffer=0;
    for (    TemplateUtil template : templates) {
      JetBean jetBean=initializeUtilTemplate(template,codeLanguage);
      jetBeans.add(jetBean);
      monitorBuffer++;
      if (monitorBuffer % 100 == 0) {
        monitorWrap.worked(100);
        monitorBuffer=0;
      }
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    if (components != null) {
      ECodePart codePart=ECodePart.MAIN;
      for (      IComponent component : new ArrayList<IComponent>(components)) {
        if (EComponentType.GENERIC.equals(component.getComponentType())) {
          genericComponents.add(component);
          continue;
        }
        if (component.getAvailableCodeParts().size() > 0) {
          initComponent(codeLanguage,jetBeans,codePart,component);
        }
        monitorBuffer++;
        if (monitorBuffer % 100 == 0) {
          monitorWrap.worked(100);
          monitorBuffer=0;
        }
      }
    }
    for (    IComponent genericComponent : genericComponents) {
      initGenericComponent(codeLanguage,jetBeans,ECodePart.BEGIN,genericComponent);
      initGenericComponent(codeLanguage,jetBeans,ECodePart.END,genericComponent);
      initGenericComponent(codeLanguage,jetBeans,ECodePart.MAIN,genericComponent);
      initGenericComponent(codeLanguage,jetBeans,ECodePart.FINALLY,genericComponent);
      break;
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    monitorWrap.worked(monitorBuffer);
    initializeEmittersPool(jetBeans,codeLanguage,monitorWrap);
    monitorWrap.done();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    if (!CommonUIPlugin.isFullyHeadless()) {
      if (firstTime) {
        Job job=new Job(Messages.getString(""String_Node_Str"")){
          @Override protected IStatus run(          IProgressMonitor monitor){
            CorePlugin.getDefault().getDesignerCoreService().synchronizeDesignerUI(new PropertyChangeEvent(this,IComponentConstants.NORMAL,null,null));
            return Status.OK_STATUS;
          }
        }
;
        job.setUser(true);
        job.setPriority(Job.INTERACTIVE);
        job.schedule();
        job.wakeUp();
        firstTime=false;
      }
    }
    log.debug(Messages.getString(""String_Node_Str"",(System.currentTimeMillis() - startTime)));
    initialized=true;
    ComponentCompilations.addMarkers();
    initializeStart=false;
  }
 catch (  Exception e) {
    log.error(Messages.getString(""String_Node_Str""),e);
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
    return new Status(IStatus.ERROR,CodeGeneratorActivator.PLUGIN_ID,Messages.getString(""String_Node_Str""),e);
  }
  TimeMeasure.end(""String_Node_Str"");
  TimeMeasure.display=false;
  TimeMeasure.displaySteps=false;
  TimeMeasure.measureActive=false;
  if (jetFilesCompileFail.size() > 0) {
    StringBuilder message=new StringBuilder();
    for (    JetBean tmpJetBean : jetFilesCompileFail) {
      if (message.length() > 0) {
        message.append(""String_Node_Str"").append(tmpJetBean.getTemplateRelativeUri());
      }
 else {
        message.append(tmpJetBean.getTemplateRelativeUri());
      }
    }
    return new Status(IStatus.ERROR,CodeGeneratorActivator.PLUGIN_ID,Messages.getString(""String_Node_Str"") + message.toString());
  }
  if (!CommonsPlugin.isHeadless()) {
    CorePlugin.getDefault().getRcpService().activeSwitchProjectAction();
  }
  return Status.OK_STATUS;
}","public IStatus doRun(){
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    jetFilesCompileFail.clear();
    IProgressMonitor monitorWrap=null;
    monitorWrap=new NullProgressMonitor();
    ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
    initializeJetEmittersProject(monitorWrap);
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    CodeGeneratorInternalTemplatesFactory templatesFactory=CodeGeneratorInternalTemplatesFactoryProvider.getInstance();
    templatesFactory.setCurrentLanguage(codeLanguage);
    templatesFactory.init();
    IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
    long startTime=System.currentTimeMillis();
    defaultTemplate=templatesFactory.getTemplatesFromType(EInternalTemplate.DEFAULT_TEMPLATE).get(0).getTemplateRelativeUri();
    List<JetBean> jetBeans=new ArrayList<JetBean>();
    List<TemplateUtil> templates=templatesFactory.getTemplates();
    Collection<IComponent> components=componentsFactory.readComponents();
    List<IComponent> genericComponents=new ArrayList<IComponent>();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    monitorWrap.beginTask(Messages.getString(""String_Node_Str""),(2 * templates.size() + 5 * components.size()));
    int monitorBuffer=0;
    for (    TemplateUtil template : templates) {
      JetBean jetBean=initializeUtilTemplate(template,codeLanguage);
      jetBeans.add(jetBean);
      monitorBuffer++;
      if (monitorBuffer % 100 == 0) {
        monitorWrap.worked(100);
        monitorBuffer=0;
      }
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    if (components != null) {
      ECodePart codePart=ECodePart.MAIN;
      for (      IComponent component : components) {
        if (EComponentType.GENERIC.equals(component.getComponentType())) {
          genericComponents.add(component);
          continue;
        }
        if (component.getAvailableCodeParts().size() > 0) {
          initComponent(codeLanguage,jetBeans,codePart,component);
        }
        monitorBuffer++;
        if (monitorBuffer % 100 == 0) {
          monitorWrap.worked(100);
          monitorBuffer=0;
        }
      }
    }
    for (    IComponent genericComponent : genericComponents) {
      initGenericComponent(codeLanguage,jetBeans,ECodePart.BEGIN,genericComponent);
      initGenericComponent(codeLanguage,jetBeans,ECodePart.END,genericComponent);
      initGenericComponent(codeLanguage,jetBeans,ECodePart.MAIN,genericComponent);
      initGenericComponent(codeLanguage,jetBeans,ECodePart.FINALLY,genericComponent);
      break;
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    monitorWrap.worked(monitorBuffer);
    initializeEmittersPool(jetBeans,codeLanguage,monitorWrap);
    monitorWrap.done();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    if (!CommonUIPlugin.isFullyHeadless()) {
      if (firstTime) {
        Job job=new Job(Messages.getString(""String_Node_Str"")){
          @Override protected IStatus run(          IProgressMonitor monitor){
            CorePlugin.getDefault().getDesignerCoreService().synchronizeDesignerUI(new PropertyChangeEvent(this,IComponentConstants.NORMAL,null,null));
            return Status.OK_STATUS;
          }
        }
;
        job.setUser(true);
        job.setPriority(Job.INTERACTIVE);
        job.schedule();
        job.wakeUp();
        firstTime=false;
      }
    }
    log.debug(Messages.getString(""String_Node_Str"",(System.currentTimeMillis() - startTime)));
    initialized=true;
    ComponentCompilations.addMarkers();
    initializeStart=false;
  }
 catch (  Exception e) {
    log.error(Messages.getString(""String_Node_Str""),e);
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
    return new Status(IStatus.ERROR,CodeGeneratorActivator.PLUGIN_ID,Messages.getString(""String_Node_Str""),e);
  }
  TimeMeasure.end(""String_Node_Str"");
  TimeMeasure.display=false;
  TimeMeasure.displaySteps=false;
  TimeMeasure.measureActive=false;
  if (jetFilesCompileFail.size() > 0) {
    StringBuilder message=new StringBuilder();
    for (    JetBean tmpJetBean : jetFilesCompileFail) {
      if (message.length() > 0) {
        message.append(""String_Node_Str"").append(tmpJetBean.getTemplateRelativeUri());
      }
 else {
        message.append(tmpJetBean.getTemplateRelativeUri());
      }
    }
    return new Status(IStatus.ERROR,CodeGeneratorActivator.PLUGIN_ID,Messages.getString(""String_Node_Str"") + message.toString());
  }
  if (!CommonsPlugin.isHeadless()) {
    CorePlugin.getDefault().getRcpService().activeSwitchProjectAction();
  }
  return Status.OK_STATUS;
}",0.9931625676089396
117933,"/** 
 * read all components belongs to some category (DI, CAMEL etc.) then store it into a map which can be reused
 * @param categoryName
 * @param entries
 */
private static void readComponentsInCategory(String categoryName,Map<String,IComponent> entries){
  IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
  Set<IComponent> allComponents=componentsFactory.getComponents();
  for (  IComponent component : allComponents) {
    String compType=component.getPaletteType();
    if (!component.isTechnical() && compType != null && categoryName.equals(compType)) {
      entries.put(component.getName(),component);
    }
  }
  DummyComponent noteComponent=new DummyComponent(""String_Node_Str"");
  noteComponent.setIcon16(ImageProvider.getImageDesc(ECoreImage.CODE_ICON));
  noteComponent.setOriginalFamilyName(""String_Node_Str"");
  entries.put(""String_Node_Str"",noteComponent);
}","/** 
 * read all components belongs to some category (DI, CAMEL etc.) then store it into a map which can be reused
 * @param categoryName
 * @param entries
 */
private static void readComponentsInCategory(String categoryName,Map<String,IComponent> entries){
  IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
  Collection<IComponent> allComponents=componentsFactory.readComponents();
  for (  IComponent component : allComponents) {
    String compType=component.getPaletteType();
    if (!component.isTechnical() && compType != null && categoryName.equals(compType)) {
      entries.put(component.getName(),component);
    }
  }
  DummyComponent noteComponent=new DummyComponent(""String_Node_Str"");
  noteComponent.setIcon16(ImageProvider.getImageDesc(ECoreImage.CODE_ICON));
  noteComponent.setOriginalFamilyName(""String_Node_Str"");
  entries.put(""String_Node_Str"",noteComponent);
}",0.988998899889989
117934,"protected static void addComponentsByNameFilter(final IComponentsFactory compFac,Set<IComponent> componentSet,String nameFilter){
  if (compFac == null || componentSet == null) {
    return;
  }
  if (nameFilter != null && !nameFilter.trim().isEmpty()) {
    Set<IComponent> components=compFac.getComponents();
    Iterator<IComponent> iter=components.iterator();
    String regex=getFilterRegex(nameFilter);
    Pattern pattern=Pattern.compile(regex);
    Set<ComponentHit> resultByName=new LinkedHashSet<ComponentHit>();
    Set<ComponentHit> resultByLongName=new LinkedHashSet<ComponentHit>();
    while (iter.hasNext()) {
      IComponent xmlComponent=iter.next();
      Matcher matcher=pattern.matcher(xmlComponent.getName().toLowerCase());
      if (matcher.find()) {
        resultByName.add(new ComponentHit(xmlComponent,matcher.start()));
        continue;
      }
      matcher=pattern.matcher(xmlComponent.getLongName().toLowerCase());
      if (matcher.find()) {
        resultByLongName.add(new ComponentHit(xmlComponent,matcher.start()));
        continue;
      }
    }
    if (!resultByName.isEmpty()) {
      ComponentHit[] hitArray=resultByName.toArray(new ComponentHit[resultByName.size()]);
      Arrays.sort(hitArray);
      addComponents(componentSet,hitArray);
    }
    if (!resultByLongName.isEmpty()) {
      ComponentHit[] hitArray=resultByLongName.toArray(new ComponentHit[resultByLongName.size()]);
      Arrays.sort(hitArray);
      addComponents(componentSet,hitArray);
    }
  }
}","protected static void addComponentsByNameFilter(final IComponentsFactory compFac,Collection<IComponent> componentSet,String nameFilter){
  if (compFac == null || componentSet == null) {
    return;
  }
  if (nameFilter != null && !nameFilter.trim().isEmpty()) {
    Collection<IComponent> components=compFac.readComponents();
    Iterator<IComponent> iter=components.iterator();
    String regex=getFilterRegex(nameFilter);
    Pattern pattern=Pattern.compile(regex);
    Set<ComponentHit> resultByName=new LinkedHashSet<ComponentHit>();
    Set<ComponentHit> resultByLongName=new LinkedHashSet<ComponentHit>();
    while (iter.hasNext()) {
      IComponent xmlComponent=iter.next();
      Matcher matcher=pattern.matcher(xmlComponent.getName().toLowerCase());
      if (matcher.find()) {
        resultByName.add(new ComponentHit(xmlComponent,matcher.start()));
        continue;
      }
      matcher=pattern.matcher(xmlComponent.getLongName().toLowerCase());
      if (matcher.find()) {
        resultByLongName.add(new ComponentHit(xmlComponent,matcher.start()));
        continue;
      }
    }
    if (!resultByName.isEmpty()) {
      ComponentHit[] hitArray=resultByName.toArray(new ComponentHit[resultByName.size()]);
      Arrays.sort(hitArray);
      addComponents(componentSet,hitArray);
    }
    if (!resultByLongName.isEmpty()) {
      ComponentHit[] hitArray=resultByLongName.toArray(new ComponentHit[resultByLongName.size()]);
      Arrays.sort(hitArray);
      addComponents(componentSet,hitArray);
    }
  }
}",0.8687068114511353
117935,"private static void addComponents(Set<IComponent> componentSet,ComponentHit[] hitArray){
  for (  ComponentHit ch : hitArray) {
    componentSet.add(ch.getComponent());
  }
}","private static void addComponents(Collection<IComponent> componentSet,ComponentHit[] hitArray){
  for (  ComponentHit ch : hitArray) {
    componentSet.add(ch.getComponent());
  }
}",0.9746478873239436
117936,"protected static List<IComponent> getRelatedComponents(final IComponentsFactory compFac,String keyword,boolean needCheckVisible){
  Set<IComponent> componentSet=null;
  IComponentsHandler componentsHandler=compFac.getComponentsHandler();
  String lowerCasedKeyword=null;
  if (keyword != null) {
    lowerCasedKeyword=keyword.toLowerCase().trim();
  }
  boolean needSort=true;
  if (compFac != null && lowerCasedKeyword != null && 0 < lowerCasedKeyword.length()) {
    componentSet=new LinkedHashSet<IComponent>();
    Map<String,Map<String,Set<IComponent>>> componentNameMap=compFac.getComponentNameMap();
    if (componentNameMap != null) {
      Map<String,Set<IComponent>> map=componentNameMap.get(lowerCasedKeyword);
      if (map != null) {
        Collection<Set<IComponent>> componentSets=map.values();
        Iterator<Set<IComponent>> componentSetIter=componentSets.iterator();
        List<IComponent> filteredComponent=new ArrayList<IComponent>();
        while (componentSetIter.hasNext()) {
          filteredComponent.addAll(componentSetIter.next());
        }
        if (componentsHandler != null) {
          filteredComponent=componentsHandler.filterComponents(filteredComponent);
        }
        Iterator<IComponent> componentIter=filteredComponent.iterator();
        while (componentIter.hasNext()) {
          IComponent iComponent=componentIter.next();
          if (iComponent == null || !ComponentUtilities.isComponentVisible(iComponent) || iComponent.isTechnical()) {
            componentIter.remove();
          }
        }
        if (!filteredComponent.isEmpty()) {
          componentSet.addAll(filteredComponent);
        }
      }
    }
    if (componentNameMap != null) {
      addComponentsByNameFilter(compFac,componentSet,lowerCasedKeyword);
      if (!componentSet.isEmpty()) {
        componentSet=new LinkedHashSet<IComponent>(sortResultsBasedOnRecentlyUsed(new ArrayList<IComponent>(componentSet)));
        needSort=false;
      }
      boolean shouldSearchFromHelpAPI=PaletteSettingsPreferencePage.isPaletteSearchFromHelp();
      if (shouldSearchFromHelpAPI) {
        String helpKeyword=keyword;
        if (helpKeyword != null) {
          helpKeyword=helpKeyword.trim();
        }
        Set<String> componentNames=getRelatedComponentNamesFromHelp(helpKeyword);
        if (componentNames != null && 0 < componentNames.size()) {
          int limit=PaletteSettingsPreferencePage.getPaletteSearchResultLimitFromHelp();
          int i=0;
          Iterator<String> nameIter=componentNames.iterator();
          while (nameIter.hasNext()) {
            if (limit <= i) {
              break;
            }
            String componentName=nameIter.next();
            Map<String,Set<IComponent>> map=componentNameMap.get(componentName.toLowerCase());
            if (map == null) {
              continue;
            }
            Set<IComponent> findedComponents=map.get(componentName);
            if (findedComponents != null && !findedComponents.isEmpty()) {
              for (              IComponent iComponent : findedComponents) {
                if (limit <= i) {
                  break;
                }
                if (ComponentUtilities.isComponentVisible(iComponent) && !iComponent.isTechnical() && filterComponent(iComponent,componentsHandler)) {
                  componentSet.add(iComponent);
                  i++;
                }
              }
            }
          }
          if (0 < i) {
            needSort=false;
          }
        }
      }
    }
  }
 else   if (compFac != null) {
    componentSet=compFac.getComponents();
  }
  List<IComponent> relatedComponents=null;
  if (componentSet == null || componentSet.isEmpty()) {
    relatedComponents=new LinkedList<IComponent>();
  }
 else {
    relatedComponents=new LinkedList<IComponent>(componentSet);
  }
  if (compFac != null && componentsHandler != null && !relatedComponents.isEmpty()) {
    relatedComponents=componentsHandler.filterComponents(relatedComponents);
  }
  if (needCheckVisible && relatedComponents != null && !relatedComponents.isEmpty()) {
    Iterator<IComponent> iter=relatedComponents.iterator();
    while (iter.hasNext()) {
      IComponent component=iter.next();
      if (component == null || !ComponentUtilities.isComponentVisible(component) || component.isTechnical()) {
        iter.remove();
      }
    }
  }
  if (needSort) {
    relatedComponents=sortResultsBasedOnRecentlyUsed(relatedComponents);
  }
  return relatedComponents;
}","protected static List<IComponent> getRelatedComponents(final IComponentsFactory compFac,String keyword,boolean needCheckVisible){
  Collection<IComponent> componentSet=null;
  IComponentsHandler componentsHandler=compFac.getComponentsHandler();
  String lowerCasedKeyword=null;
  if (keyword != null) {
    lowerCasedKeyword=keyword.toLowerCase().trim();
  }
  boolean needSort=true;
  if (compFac != null && lowerCasedKeyword != null && 0 < lowerCasedKeyword.length()) {
    componentSet=new LinkedHashSet<IComponent>();
    Map<String,Map<String,Set<IComponent>>> componentNameMap=compFac.getComponentNameMap();
    if (componentNameMap != null) {
      Map<String,Set<IComponent>> map=componentNameMap.get(lowerCasedKeyword);
      if (map != null) {
        Collection<Set<IComponent>> componentSets=map.values();
        Iterator<Set<IComponent>> componentSetIter=componentSets.iterator();
        List<IComponent> filteredComponent=new ArrayList<IComponent>();
        while (componentSetIter.hasNext()) {
          filteredComponent.addAll(componentSetIter.next());
        }
        if (componentsHandler != null) {
          filteredComponent=componentsHandler.filterComponents(filteredComponent);
        }
        Iterator<IComponent> componentIter=filteredComponent.iterator();
        while (componentIter.hasNext()) {
          IComponent iComponent=componentIter.next();
          if (iComponent == null || !ComponentUtilities.isComponentVisible(iComponent) || iComponent.isTechnical()) {
            componentIter.remove();
          }
        }
        if (!filteredComponent.isEmpty()) {
          componentSet.addAll(filteredComponent);
        }
      }
    }
    if (componentNameMap != null) {
      addComponentsByNameFilter(compFac,componentSet,lowerCasedKeyword);
      if (!componentSet.isEmpty()) {
        componentSet=new LinkedHashSet<IComponent>(sortResultsBasedOnRecentlyUsed(new ArrayList<IComponent>(componentSet)));
        needSort=false;
      }
      boolean shouldSearchFromHelpAPI=PaletteSettingsPreferencePage.isPaletteSearchFromHelp();
      if (shouldSearchFromHelpAPI) {
        String helpKeyword=keyword;
        if (helpKeyword != null) {
          helpKeyword=helpKeyword.trim();
        }
        Set<String> componentNames=getRelatedComponentNamesFromHelp(helpKeyword);
        if (componentNames != null && 0 < componentNames.size()) {
          int limit=PaletteSettingsPreferencePage.getPaletteSearchResultLimitFromHelp();
          int i=0;
          Iterator<String> nameIter=componentNames.iterator();
          while (nameIter.hasNext()) {
            if (limit <= i) {
              break;
            }
            String componentName=nameIter.next();
            Map<String,Set<IComponent>> map=componentNameMap.get(componentName.toLowerCase());
            if (map == null) {
              continue;
            }
            Set<IComponent> findedComponents=map.get(componentName);
            if (findedComponents != null && !findedComponents.isEmpty()) {
              for (              IComponent iComponent : findedComponents) {
                if (limit <= i) {
                  break;
                }
                if (ComponentUtilities.isComponentVisible(iComponent) && !iComponent.isTechnical() && filterComponent(iComponent,componentsHandler)) {
                  componentSet.add(iComponent);
                  i++;
                }
              }
            }
          }
          if (0 < i) {
            needSort=false;
          }
        }
      }
    }
  }
 else   if (compFac != null) {
    componentSet=compFac.readComponents();
  }
  List<IComponent> relatedComponents=null;
  if (componentSet == null || componentSet.isEmpty()) {
    relatedComponents=new LinkedList<IComponent>();
  }
 else {
    relatedComponents=new LinkedList<IComponent>(componentSet);
  }
  if (compFac != null && componentsHandler != null && !relatedComponents.isEmpty()) {
    relatedComponents=componentsHandler.filterComponents(relatedComponents);
  }
  if (needCheckVisible && relatedComponents != null && !relatedComponents.isEmpty()) {
    Iterator<IComponent> iter=relatedComponents.iterator();
    while (iter.hasNext()) {
      IComponent component=iter.next();
      if (component == null || !ComponentUtilities.isComponentVisible(component) || component.isTechnical()) {
        iter.remove();
      }
    }
  }
  if (needSort) {
    relatedComponents=sortResultsBasedOnRecentlyUsed(relatedComponents);
  }
  return relatedComponents;
}",0.9977831966304588
117937,"public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        if (pattern.matcher(name.getDBType()).matches() && (emfComponent.getName().equals(""String_Node_Str"") || emfComponent.getName().equals(""String_Node_Str""))) {
          continue;
        }
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}","public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Collection<IComponent> components=ComponentsFactoryProvider.getInstance().readComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        if (pattern.matcher(name.getDBType()).matches() && (emfComponent.getName().equals(""String_Node_Str"") || emfComponent.getName().equals(""String_Node_Str""))) {
          continue;
        }
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}",0.9969687784177024
117938,"private void getAppropriateComponent(Item item,boolean quickCreateInput,boolean quickCreateOutput,TempStore store,ERepositoryObjectType type){
  IComponentName rcSetting=RepositoryComponentManager.getSetting(item,type);
  if (rcSetting == null) {
    for (    IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
      rcSetting=handler.getCorrespondingComponentName(item,type);
      if (rcSetting != null) {
        break;
      }
    }
    if (rcSetting == null) {
      return;
    }
  }
  boolean isCurrentProject=true;
  String projectName=null;
  if (store.seletetedNode.getObject() != null) {
    projectName=store.seletetedNode.getObject().getProjectLabel();
    isCurrentProject=projectName.equals(ProjectManager.getInstance().getCurrentProject().getLabel());
  }
  List<IComponent> neededComponents=RepositoryComponentManager.filterNeededComponents(item,store.seletetedNode,type,isCurrentProject,projectName);
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    List<IComponent> comList=handler.filterNeededComponents(item,store.seletetedNode,type);
    if (comList != null) {
      for (      IComponent handlerComp : comList) {
        if (!neededComponents.contains(handlerComp) && !handlerComp.isTechnical()) {
          neededComponents.add(handlerComp);
        }
      }
    }
  }
  String hbaseName=EDatabaseTypeName.HBASE.getDisplayName().toUpperCase();
  if (rcSetting != null && (hbaseName).equals(rcSetting.toString())) {
    IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    String componentProductname=null;
    Set<IComponent> components=service.getComponentsFactory().getComponents();
    for (    IComponent component : components) {
      componentProductname=component.getRepositoryType();
      if (componentProductname != null && componentProductname.contains(hbaseName) && !neededComponents.contains(component) && !component.isTechnical()) {
        neededComponents.add(component);
      }
    }
  }
  neededComponents=(List<IComponent>)ComponentUtilities.filterVisibleComponents(neededComponents);
  IComponent component=chooseOneComponent(extractComponents(neededComponents),rcSetting,quickCreateInput,quickCreateOutput);
  store.component=component;
  store.componentName=rcSetting;
}","private void getAppropriateComponent(Item item,boolean quickCreateInput,boolean quickCreateOutput,TempStore store,ERepositoryObjectType type){
  IComponentName rcSetting=RepositoryComponentManager.getSetting(item,type);
  if (rcSetting == null) {
    for (    IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
      rcSetting=handler.getCorrespondingComponentName(item,type);
      if (rcSetting != null) {
        break;
      }
    }
    if (rcSetting == null) {
      return;
    }
  }
  boolean isCurrentProject=true;
  String projectName=null;
  if (store.seletetedNode.getObject() != null) {
    projectName=store.seletetedNode.getObject().getProjectLabel();
    isCurrentProject=projectName.equals(ProjectManager.getInstance().getCurrentProject().getLabel());
  }
  List<IComponent> neededComponents=RepositoryComponentManager.filterNeededComponents(item,store.seletetedNode,type,isCurrentProject,projectName);
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    List<IComponent> comList=handler.filterNeededComponents(item,store.seletetedNode,type);
    if (comList != null) {
      for (      IComponent handlerComp : comList) {
        if (!neededComponents.contains(handlerComp) && !handlerComp.isTechnical()) {
          neededComponents.add(handlerComp);
        }
      }
    }
  }
  String hbaseName=EDatabaseTypeName.HBASE.getDisplayName().toUpperCase();
  if (rcSetting != null && (hbaseName).equals(rcSetting.toString())) {
    IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    String componentProductname=null;
    Collection<IComponent> components=service.getComponentsFactory().readComponents();
    for (    IComponent component : components) {
      componentProductname=component.getRepositoryType();
      if (componentProductname != null && componentProductname.contains(hbaseName) && !neededComponents.contains(component) && !component.isTechnical()) {
        neededComponents.add(component);
      }
    }
  }
  neededComponents=(List<IComponent>)ComponentUtilities.filterVisibleComponents(neededComponents);
  IComponent component=chooseOneComponent(extractComponents(neededComponents),rcSetting,quickCreateInput,quickCreateOutput);
  store.component=component;
  store.componentName=rcSetting;
}",0.9957501062473438
117939,"public static List<IComponent> filterNeededComponents(Item item,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        neededComponents.add(emfComponent);
      }
    }
  }
  return sortFilteredComponnents(item,type,neededComponents);
}","public static List<IComponent> filterNeededComponents(Item item,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  Collection<IComponent> components=ComponentsFactoryProvider.getInstance().readComponents();
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        neededComponents.add(emfComponent);
      }
    }
  }
  return sortFilteredComponnents(item,type,neededComponents);
}",0.9938987187309336
117940,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<>();
  if (!(item instanceof GenericConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (EComponentType.GENERIC.equals(component.getComponentType())) {
      if (!neededComponents.contains(component) && isValid(seletetedNode,component)) {
        neededComponents.add(component);
      }
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<>();
  if (!(item instanceof GenericConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (EComponentType.GENERIC.equals(component.getComponentType())) {
      if (!neededComponents.contains(component) && isValid(seletetedNode,component)) {
        neededComponents.add(component);
      }
    }
  }
  return neededComponents;
}",0.9867899603698812
117941,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof JSONFileConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  JSONFileConnection connection=(JSONFileConnection)((JSONFileConnectionItem)item).getConnection();
  for (  IComponent component : components) {
    if (!connection.isInputModel()) {
      if (isValid(item,type,seletetedNode,component,""String_Node_Str"") && !neededComponents.contains(component)) {
        neededComponents.add(component);
      }
    }
 else {
      if (isValid(item,type,seletetedNode,component,JSON) && !neededComponents.contains(component)) {
        neededComponents.add(component);
      }
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof JSONFileConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  JSONFileConnection connection=(JSONFileConnection)((JSONFileConnectionItem)item).getConnection();
  for (  IComponent component : components) {
    if (!connection.isInputModel()) {
      if (isValid(item,type,seletetedNode,component,""String_Node_Str"") && !neededComponents.contains(component)) {
        neededComponents.add(component);
      }
    }
 else {
      if (isValid(item,type,seletetedNode,component,JSON) && !neededComponents.contains(component)) {
        neededComponents.add(component);
      }
    }
  }
  return neededComponents;
}",0.990272373540856
117942,"/** 
 * yzhang Comment method ""resetFamily"".
 * @param list
 */
private void resetFamily(EList list){
  IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
  Set<IComponent> components=componentsFactory.getComponents();
  list.clear();
  for (  IComponent component : components) {
    String[] families=component.getOriginalFamilyName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (    String family : families) {
      ComponentSetting setting=PropertiesFactory.eINSTANCE.createComponentSetting();
      setting.setFamily(family);
      setting.setName(component.getName());
      setting.setHidden(!component.isVisibleInComponentDefinition());
      list.add(setting);
    }
  }
  RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  IProxyRepositoryFactory prf=CorePlugin.getDefault().getProxyRepositoryFactory();
  try {
    prf.saveProject(repositoryContext.getProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * yzhang Comment method ""resetFamily"".
 * @param list
 */
private void resetFamily(EList list){
  IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
  Collection<IComponent> components=componentsFactory.readComponents();
  list.clear();
  for (  IComponent component : components) {
    String[] families=component.getOriginalFamilyName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
    for (    String family : families) {
      ComponentSetting setting=PropertiesFactory.eINSTANCE.createComponentSetting();
      setting.setFamily(family);
      setting.setName(component.getName());
      setting.setHidden(!component.isVisibleInComponentDefinition());
      list.add(setting);
    }
  }
  RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  IProxyRepositoryFactory prf=CorePlugin.getDefault().getProxyRepositoryFactory();
  try {
    prf.saveProject(repositoryContext.getProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9906542056074766
117943,"public Date getOrder(){
  GregorianCalendar gc=new GregorianCalendar(2008,7,7,13,0,0);
  return gc.getTime();
}","@Override public Date getOrder(){
  GregorianCalendar gc=new GregorianCalendar(2008,7,7,13,0,0);
  return gc.getTime();
}",0.956896551724138
117944,"public ExecutionResult execute(Project project){
  boolean needReset=false;
  EList list=project.getEmfProject().getComponentsSettings();
  for (  Object obj : list) {
    ComponentSetting componentSetting=(ComponentSetting)obj;
    if (componentSetting.getFamily() == null) {
      needReset=true;
      break;
    }
  }
  if (needReset) {
    resetFamily(list);
  }
  return ExecutionResult.SUCCESS_WITH_ALERT;
}","@Override public ExecutionResult execute(Project project){
  boolean needReset=false;
  EList list=project.getEmfProject().getComponentsSettings();
  for (  Object obj : list) {
    ComponentSetting componentSetting=(ComponentSetting)obj;
    if (componentSetting.getFamily() == null) {
      needReset=true;
      break;
    }
  }
  if (needReset) {
    resetFamily(list);
  }
  return ExecutionResult.SUCCESS_WITH_ALERT;
}",0.9880668257756564
117945,"@Override public ExecutionResult execute(Project project){
  List<ComponentSetting> components=project.getEmfProject().getComponentsSettings();
  List<ComponentSetting> newAdded=new ArrayList<ComponentSetting>();
  Set<IComponent> componentList=ComponentsFactoryProvider.getInstance().getComponents();
  for (  ComponentSetting componentSetting : components) {
    for (    IComponent comp : componentList) {
      if (comp != null && comp.getName().equals(componentSetting.getName())) {
        componentSetting.setName(comp.getPaletteType() + ""String_Node_Str"" + comp.getName());
        String family=componentSetting.getFamily();
        if (family.contains(""String_Node_Str"")) {
          String[] fams=family.split(""String_Node_Str"");
          for (int i=0; i < fams.length; i++) {
            if (i == 0) {
              componentSetting.setFamily(fams[0]);
            }
 else {
              ComponentSetting cs=PropertiesFactory.eINSTANCE.createComponentSetting();
              cs.setName(comp.getPaletteType() + ""String_Node_Str"" + comp.getName());
              cs.setHidden(componentSetting.isHidden());
              cs.setFamily(fams[i]);
              newAdded.add(cs);
            }
          }
        }
        break;
      }
    }
  }
  components.addAll(newAdded);
  return ExecutionResult.SUCCESS_NO_ALERT;
}","@Override public ExecutionResult execute(Project project){
  List<ComponentSetting> components=project.getEmfProject().getComponentsSettings();
  List<ComponentSetting> newAdded=new ArrayList<ComponentSetting>();
  Collection<IComponent> componentList=ComponentsFactoryProvider.getInstance().readComponents();
  for (  ComponentSetting componentSetting : components) {
    for (    IComponent comp : componentList) {
      if (comp != null && comp.getName().equals(componentSetting.getName())) {
        componentSetting.setName(comp.getPaletteType() + ""String_Node_Str"" + comp.getName());
        String family=componentSetting.getFamily();
        if (family.contains(""String_Node_Str"")) {
          String[] fams=family.split(""String_Node_Str"");
          for (int i=0; i < fams.length; i++) {
            if (i == 0) {
              componentSetting.setFamily(fams[0]);
            }
 else {
              ComponentSetting cs=PropertiesFactory.eINSTANCE.createComponentSetting();
              cs.setName(comp.getPaletteType() + ""String_Node_Str"" + comp.getName());
              cs.setHidden(componentSetting.isHidden());
              cs.setFamily(fams[i]);
              newAdded.add(cs);
            }
          }
        }
        break;
      }
    }
  }
  components.addAll(newAdded);
  return ExecutionResult.SUCCESS_NO_ALERT;
}",0.9925149700598802
117946,"public static List<IPaletteItem> buildFullPaletteItemList(){
  List<IPaletteItem> paletteItems=new ArrayList<IPaletteItem>();
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  for (  IComponent component : components) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    createPaletteItems(component,paletteItems);
  }
  return paletteItems;
}","public static List<IPaletteItem> buildFullPaletteItemList(){
  List<IPaletteItem> paletteItems=new ArrayList<IPaletteItem>();
  Collection<IComponent> components=ComponentsFactoryProvider.getInstance().readComponents();
  for (  IComponent component : components) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    createPaletteItems(component,paletteItems);
  }
  return paletteItems;
}",0.9778761061946902
117947,"@Override protected IStatus run(IProgressMonitor monitor){
  try {
    monitor.beginTask(""String_Node_Str"",1100);
    IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
    Set<IComponent> components=componentsFactory.getComponents();
    monitor.worked(100);
    RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    ECodeLanguage codeLanguage=repositoryContext.getProject().getLanguage();
    String path=getPath();
    int taskTotal=components.size();
    for (    IComponent component : components) {
      String templateURI=path + File.separatorChar + component.getName()+ File.separatorChar+ TestParameter.GENERATE_TEST;
      File templateFile=new File(templateURI);
      if (templateFile.exists()) {
        File[] fileArray=getFile(templateFile,codeLanguage);
        generateCode(fileArray,templateURI.replace(""String_Node_Str"",""String_Node_Str""));
      }
      monitor.worked(1 * 1000 / taskTotal);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  monitor.done();
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  try {
    monitor.beginTask(""String_Node_Str"",1100);
    IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
    Collection<IComponent> components=componentsFactory.readComponents();
    monitor.worked(100);
    RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    ECodeLanguage codeLanguage=repositoryContext.getProject().getLanguage();
    String path=getPath();
    int taskTotal=components.size();
    for (    IComponent component : components) {
      String templateURI=path + File.separatorChar + component.getName()+ File.separatorChar+ TestParameter.GENERATE_TEST;
      File templateFile=new File(templateURI);
      if (templateFile.exists()) {
        File[] fileArray=getFile(templateFile,codeLanguage);
        generateCode(fileArray,templateURI.replace(""String_Node_Str"",""String_Node_Str""));
      }
      monitor.worked(1 * 1000 / taskTotal);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  monitor.done();
  return Status.OK_STATUS;
}",0.9912203687445128
117948,"public void initialize(){
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        monitor.beginTask(""String_Node_Str"",1100);
        IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
        Set<IComponent> components=componentsFactory.getComponents();
        monitor.worked(100);
        RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
        ECodeLanguage codeLanguage=repositoryContext.getProject().getLanguage();
        String path=getPath();
        int taskTotal=components.size();
        for (        IComponent component : components) {
          String templateURI=path + File.separatorChar + component.getName()+ File.separatorChar+ TestParameter.GENERATE_TEST;
          File templateFile=new File(templateURI);
          if (templateFile.exists()) {
            File[] fileArray=getFile(templateFile,codeLanguage);
            generateCode(fileArray,templateURI.replace(""String_Node_Str"",""String_Node_Str""));
          }
          monitor.worked(1 * 1000 / taskTotal);
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
}","public void initialize(){
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        monitor.beginTask(""String_Node_Str"",1100);
        IComponentsFactory componentsFactory=ComponentsFactoryProvider.getInstance();
        Collection<IComponent> components=componentsFactory.readComponents();
        monitor.worked(100);
        RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
        ECodeLanguage codeLanguage=repositoryContext.getProject().getLanguage();
        String path=getPath();
        int taskTotal=components.size();
        for (        IComponent component : components) {
          String templateURI=path + File.separatorChar + component.getName()+ File.separatorChar+ TestParameter.GENERATE_TEST;
          File templateFile=new File(templateURI);
          if (templateFile.exists()) {
            File[] fileArray=getFile(templateFile,codeLanguage);
            generateCode(fileArray,templateURI.replace(""String_Node_Str"",""String_Node_Str""));
          }
          monitor.worked(1 * 1000 / taskTotal);
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
}",0.9925428784489188
117949,"private void fillUIBranches(final Project project,boolean lastUsedBranch) throws JSONException {
  final String storage=getStorage(project);
  if (LoginHelper.isRemoteConnection(getConnection())) {
    currentProjectSettings=project;
    final List<String> projectBranches=new ArrayList<String>();
    if (""String_Node_Str"".equals(storage)) {
      projectBranches.add(""String_Node_Str"");
      branchesViewer.setInput(projectBranches);
      branchesViewer.setSelection(new StructuredSelection(new Object[]{""String_Node_Str""}));
    }
 else     if (""String_Node_Str"".equals(storage)) {
      List<String> branches=getBranches(project);
      projectBranches.addAll(branches);
      branchesViewer.setInput(projectBranches);
      if (projectBranches.size() != 0) {
        branchesViewer.setSelection(new StructuredSelection(new Object[]{projectBranches.contains(""String_Node_Str"") ? ""String_Node_Str"" : projectBranches.get(0)}));
      }
    }
    branchesViewer.getCombo().setEnabled(false);
    if (backgroundGUIUpdate == null) {
      backgroundGUIUpdate=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          projectBranches.clear();
          try {
            projectBranches.addAll(loginHelper.getProjectBranches(currentProjectSettings));
          }
 catch (          JSONException e) {
            ExceptionHandler.process(e);
          }
          return org.eclipse.core.runtime.Status.OK_STATUS;
        }
      }
;
      Job.getJobManager().addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        IJobChangeEvent event){
          if (event.getJob().equals(backgroundGUIUpdate)) {
            if (branchesViewer != null && !branchesViewer.getCombo().isDisposed()) {
              branchesViewer.getCombo().getDisplay().syncExec(new Runnable(){
                @Override public void run(){
                  if (branchesViewer == null || branchesViewer.getControl() == null || branchesViewer.getControl().isDisposed()) {
                    return;
                  }
                  branchesViewer.setInput(projectBranches);
                  if (""String_Node_Str"".equals(storage) && projectBranches.size() != 0) {
                    branchesViewer.setSelection(new StructuredSelection(new Object[]{projectBranches.contains(""String_Node_Str"") ? ""String_Node_Str"" : projectBranches.get(0)}));
                  }
 else                   if (""String_Node_Str"".equals(storage) && projectBranches.size() != 0) {
                    branchesViewer.setSelection(new StructuredSelection(new Object[]{projectBranches.contains(""String_Node_Str"") ? ""String_Node_Str"" : projectBranches.get(0)}));
                  }
                  branchesViewer.getCombo().setEnabled(projectViewer.getControl().isEnabled());
                }
              }
);
            }
          }
        }
      }
);
      branchesViewer.getCombo().addDisposeListener(new DisposeListener(){
        @Override public void widgetDisposed(        DisposeEvent e){
          backgroundGUIUpdate=null;
        }
      }
);
    }
    backgroundGUIUpdate.schedule();
  }
}","private void fillUIBranches(final Project project,boolean lastUsedBranch) throws JSONException {
  final String storage=getStorage(project);
  if (LoginHelper.isRemoteConnection(getConnection())) {
    currentProjectSettings=project;
    final List<String> projectBranches=new ArrayList<String>();
    if (""String_Node_Str"".equals(storage)) {
      projectBranches.add(""String_Node_Str"");
      branchesViewer.setInput(projectBranches);
      branchesViewer.setSelection(new StructuredSelection(new Object[]{""String_Node_Str""}));
    }
 else     if (""String_Node_Str"".equals(storage)) {
      String master=""String_Node_Str"";
      projectBranches.add(master);
      branchesViewer.setInput(projectBranches);
      if (projectBranches.size() != 0) {
        branchesViewer.setSelection(new StructuredSelection(new Object[]{projectBranches.contains(master) ? master : projectBranches.get(0)}));
      }
    }
    branchesViewer.getCombo().setEnabled(false);
    if (backgroundGUIUpdate == null) {
      backgroundGUIUpdate=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          projectBranches.clear();
          try {
            projectBranches.addAll(loginHelper.getProjectBranches(currentProjectSettings));
          }
 catch (          JSONException e) {
            ExceptionHandler.process(e);
          }
          return org.eclipse.core.runtime.Status.OK_STATUS;
        }
      }
;
      Job.getJobManager().addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        IJobChangeEvent event){
          if (event.getJob().equals(backgroundGUIUpdate)) {
            if (branchesViewer != null && !branchesViewer.getCombo().isDisposed()) {
              branchesViewer.getCombo().getDisplay().syncExec(new Runnable(){
                @Override public void run(){
                  if (branchesViewer == null || branchesViewer.getControl() == null || branchesViewer.getControl().isDisposed()) {
                    return;
                  }
                  branchesViewer.setInput(projectBranches);
                  if (""String_Node_Str"".equals(storage) && projectBranches.size() != 0) {
                    branchesViewer.setSelection(new StructuredSelection(new Object[]{projectBranches.contains(""String_Node_Str"") ? ""String_Node_Str"" : projectBranches.get(0)}));
                  }
 else                   if (""String_Node_Str"".equals(storage) && projectBranches.size() != 0) {
                    branchesViewer.setSelection(new StructuredSelection(new Object[]{projectBranches.contains(""String_Node_Str"") ? ""String_Node_Str"" : projectBranches.get(0)}));
                  }
                  branchesViewer.getCombo().setEnabled(projectViewer.getControl().isEnabled());
                }
              }
);
            }
          }
        }
      }
);
      branchesViewer.getCombo().addDisposeListener(new DisposeListener(){
        @Override public void widgetDisposed(        DisposeEvent e){
          backgroundGUIUpdate=null;
        }
      }
);
    }
    backgroundGUIUpdate.schedule();
  }
}",0.97247119078105
117950,"public void checkLinks(){
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJoblet=true;
    }
  }
  if (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getConnectorFromType(EConnectionType.FLOW_MAIN).getMinLinkInput() == 0) & (getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkInput() != 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_REF) > 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if ((getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkInput() == 0) && (getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkOutput() != 0)) {
    if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if (!isJoblet) {
    if (!isSubProcessStart() || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_OK) > 0) || getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_ERROR) > 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if ((!isELTComponent() && !isSubProcessStart()) || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbInput(EConnectionType.ON_SUBJOB_OK) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.RUN_IF) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_OK) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_ERROR) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.STARTS) > 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (isHL7Output()) {
      if (getIncomingConnections(EConnectionType.FLOW_MERGE).size() <= 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
 else {
        List<Map<String,String>> maps=(List<Map<String,String>>)ElementParameterParser.getObjectValue(this,""String_Node_Str"");
        List<IMetadataTable> tables=this.getMetadataList();
        for (        IConnection connection : getIncomingConnections(EConnectionType.FLOW_MERGE)) {
          IMetadataTable metadataTable=connection.getMetadataTable();
          String rowName=connection.getUniqueName();
          String schemaName=null;
          for (          Map<String,String> map : maps) {
            if (map.containsValue(rowName)) {
              if (map.get(""String_Node_Str"") != null && map.get(""String_Node_Str"").equals(rowName)) {
                schemaName=map.get(""String_Node_Str"");
                break;
              }
            }
          }
          for (          IMetadataTable nodeTable : tables) {
            if (nodeTable.getTableName() != null && nodeTable.getTableName().equals(schemaName)) {
              if (!metadataTable.sameMetadataAs(nodeTable,IMetadataColumn.OPTIONS_NONE)) {
                String errorMessage=Messages.getString(""String_Node_Str"");
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
      }
    }
    if (checkNodeCircle(this)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  int tableOutLinkNum=0;
  int tableRefOutLinkNum=0;
  List<? extends IConnection> tableOutLinks=this.getOutgoingConnections(EConnectionType.TABLE);
  if (null != tableOutLinks) {
    tableOutLinkNum=tableOutLinks.size();
  }
  List<? extends IConnection> tableRefOutLinks=this.getOutgoingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefOutLinks) {
    tableRefOutLinkNum=tableRefOutLinks.size();
  }
  int tableInLinkNum=0;
  int tableRefInLinkNum=0;
  List<? extends IConnection> tableInLinks=this.getIncomingConnections(EConnectionType.TABLE);
  if (null != tableInLinks) {
    tableInLinkNum=tableInLinks.size();
  }
  List<? extends IConnection> tableRefInLinks=this.getIncomingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefInLinks) {
    tableRefInLinkNum=tableRefInLinks.size();
  }
  int jobletBuildConnectorNum=0;
  boolean subQueryMode=true;
  INodeConnector tableRefConnector=getConnectorFromType(EConnectionType.TABLE_REF);
  if (null != tableRefConnector) {
    if (tableRefConnector.getMaxLinkOutput() == 0) {
      subQueryMode=false;
    }
  }
  for (  INodeConnector nodeConnector : listConnector) {
    if (!nodeConnector.isShow()) {
      continue;
    }
    if (!nodeConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.USE_HASH) && nodeConnector.getDefaultConnectionType() != EConnectionType.FLOW_MERGE) {
      boolean needCheckOutput=true;
      boolean needCheckInput=true;
      int nbMaxOut;
      nbMaxOut=nodeConnector.getMaxLinkOutput();
      int nbMaxIn;
      nbMaxIn=nodeConnector.getMaxLinkInput();
      int nbMinOut;
      nbMinOut=nodeConnector.getMinLinkOutput();
      int nbMinIn;
      nbMinIn=nodeConnector.getMinLinkInput();
      int curLinkOut;
      curLinkOut=nodeConnector.getCurLinkNbOutput();
      int curLinkIn;
      curLinkIn=nodeConnector.getCurLinkNbInput();
      String typeName=nodeConnector.getMenuName();
      boolean isCheckingTableLink=false;
      if (subQueryMode) {
        if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE) {
          if (0 < tableRefOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableRefInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
          if (this.getComponent().getName().endsWith(""String_Node_Str"") && tableOutLinks != null) {
            for (            IConnection iconn : tableOutLinks) {
              INode newTarget=iconn.getTarget();
              if (newTarget.isELTComponent() && newTarget.getComponent().getName().endsWith(""String_Node_Str"")) {
                Object[] errorParams=new String[]{this.getLabel(),newTarget.getLabel(),EConnectionType.TABLE_REF.getDefaultMenuName()};
                String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
 else         if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE_REF) {
          if (0 < tableOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableRefOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
        }
      }
      if (isCheckingTableLink) {
        typeName=EConnectionType.TABLE.getDefaultMenuName() + ""String_Node_Str"" + EConnectionType.TABLE_REF.getDefaultMenuName();
      }
      if (nodeConnector.getDefaultConnectionType() == EConnectionType.FLOW_MAIN) {
        typeName=""String_Node_Str"";
        if (isJoblet) {
          if (nodeConnector.isBuiltIn()) {
            jobletBuildConnectorNum++;
          }
          continue;
        }
      }
      if (needCheckOutput) {
        if (nbMaxOut != -1) {
          if (curLinkOut > nbMaxOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (nbMinOut != 0) {
          if (curLinkOut < nbMinOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
      }
      if (!isJoblet) {
        if (nbMaxIn != -1) {
          if (curLinkIn > nbMaxIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (needCheckInput) {
          if (nbMinIn != 0) {
            if (curLinkIn < nbMinIn) {
              String errorMessage=Messages.getString(""String_Node_Str"",typeName);
              Problems.add(ProblemStatus.WARNING,this,errorMessage);
            }
          }
        }
      }
    }
  }
  if (isJoblet) {
    List<IConnection> outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    for (    IConnection con : outgoingConnections) {
      INodeConnector connector=this.getConnectorFromName(con.getConnectorName());
      if (connector == null && con instanceof Connection) {
        ((Connection)con).disconnect();
      }
    }
    String typeName=""String_Node_Str"";
    outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    if (outgoingConnections.size() > jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
 else     if (outgoingConnections.size() < jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
}","public void checkLinks(){
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJoblet=true;
    }
  }
  if (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getConnectorFromType(EConnectionType.FLOW_MAIN).getMinLinkInput() == 0) & (getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkInput() != 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_REF) > 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if (getComponentProperties() == null) {
    if ((getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkInput() == 0) && (getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkOutput() != 0)) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.WARNING,this,errorMessage);
      }
    }
  }
 else   if ((Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    for (    INodeConnector connector : getConnectorsFromType(EConnectionType.FLOW_MAIN)) {
      if ((connector.getMaxLinkInput() == 0) && (connector.getMaxLinkOutput() != 0)) {
        if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
          String errorMessage=Messages.getString(""String_Node_Str"");
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
    }
  }
  if (!isJoblet) {
    if (!isSubProcessStart() || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_OK) > 0) || getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_ERROR) > 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if ((!isELTComponent() && !isSubProcessStart()) || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbInput(EConnectionType.ON_SUBJOB_OK) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.RUN_IF) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_OK) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_ERROR) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.STARTS) > 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (isHL7Output()) {
      if (getIncomingConnections(EConnectionType.FLOW_MERGE).size() <= 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
 else {
        List<Map<String,String>> maps=(List<Map<String,String>>)ElementParameterParser.getObjectValue(this,""String_Node_Str"");
        List<IMetadataTable> tables=this.getMetadataList();
        for (        IConnection connection : getIncomingConnections(EConnectionType.FLOW_MERGE)) {
          IMetadataTable metadataTable=connection.getMetadataTable();
          String rowName=connection.getUniqueName();
          String schemaName=null;
          for (          Map<String,String> map : maps) {
            if (map.containsValue(rowName)) {
              if (map.get(""String_Node_Str"") != null && map.get(""String_Node_Str"").equals(rowName)) {
                schemaName=map.get(""String_Node_Str"");
                break;
              }
            }
          }
          for (          IMetadataTable nodeTable : tables) {
            if (nodeTable.getTableName() != null && nodeTable.getTableName().equals(schemaName)) {
              if (!metadataTable.sameMetadataAs(nodeTable,IMetadataColumn.OPTIONS_NONE)) {
                String errorMessage=Messages.getString(""String_Node_Str"");
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
      }
    }
    if (checkNodeCircle(this)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  int tableOutLinkNum=0;
  int tableRefOutLinkNum=0;
  List<? extends IConnection> tableOutLinks=this.getOutgoingConnections(EConnectionType.TABLE);
  if (null != tableOutLinks) {
    tableOutLinkNum=tableOutLinks.size();
  }
  List<? extends IConnection> tableRefOutLinks=this.getOutgoingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefOutLinks) {
    tableRefOutLinkNum=tableRefOutLinks.size();
  }
  int tableInLinkNum=0;
  int tableRefInLinkNum=0;
  List<? extends IConnection> tableInLinks=this.getIncomingConnections(EConnectionType.TABLE);
  if (null != tableInLinks) {
    tableInLinkNum=tableInLinks.size();
  }
  List<? extends IConnection> tableRefInLinks=this.getIncomingConnections(EConnectionType.TABLE_REF);
  if (null != tableRefInLinks) {
    tableRefInLinkNum=tableRefInLinks.size();
  }
  int jobletBuildConnectorNum=0;
  boolean subQueryMode=true;
  INodeConnector tableRefConnector=getConnectorFromType(EConnectionType.TABLE_REF);
  if (null != tableRefConnector) {
    if (tableRefConnector.getMaxLinkOutput() == 0) {
      subQueryMode=false;
    }
  }
  for (  INodeConnector nodeConnector : listConnector) {
    if (!nodeConnector.isShow()) {
      continue;
    }
    if (!nodeConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.USE_HASH) && nodeConnector.getDefaultConnectionType() != EConnectionType.FLOW_MERGE) {
      boolean needCheckOutput=true;
      boolean needCheckInput=true;
      int nbMaxOut;
      nbMaxOut=nodeConnector.getMaxLinkOutput();
      int nbMaxIn;
      nbMaxIn=nodeConnector.getMaxLinkInput();
      int nbMinOut;
      nbMinOut=nodeConnector.getMinLinkOutput();
      int nbMinIn;
      nbMinIn=nodeConnector.getMinLinkInput();
      int curLinkOut;
      curLinkOut=nodeConnector.getCurLinkNbOutput();
      int curLinkIn;
      curLinkIn=nodeConnector.getCurLinkNbInput();
      String typeName=nodeConnector.getMenuName();
      boolean isCheckingTableLink=false;
      if (subQueryMode) {
        if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE) {
          if (0 < tableRefOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableRefInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
          if (this.getComponent().getName().endsWith(""String_Node_Str"") && tableOutLinks != null) {
            for (            IConnection iconn : tableOutLinks) {
              INode newTarget=iconn.getTarget();
              if (newTarget.isELTComponent() && newTarget.getComponent().getName().endsWith(""String_Node_Str"")) {
                Object[] errorParams=new String[]{this.getLabel(),newTarget.getLabel(),EConnectionType.TABLE_REF.getDefaultMenuName()};
                String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
 else         if (nodeConnector.getDefaultConnectionType() == EConnectionType.TABLE_REF) {
          if (0 < tableOutLinkNum) {
            needCheckOutput=false;
            if (0 < tableRefOutLinkNum) {
              Object[] errorParams=new String[]{EConnectionType.TABLE.getDefaultMenuName(),EConnectionType.TABLE_REF.getDefaultMenuName()};
              String errorMessage=Messages.getString(""String_Node_Str"",errorParams);
              Problems.add(ProblemStatus.ERROR,this,errorMessage);
            }
          }
          if (0 < tableInLinkNum) {
            needCheckInput=false;
          }
          isCheckingTableLink=true;
        }
      }
      if (isCheckingTableLink) {
        typeName=EConnectionType.TABLE.getDefaultMenuName() + ""String_Node_Str"" + EConnectionType.TABLE_REF.getDefaultMenuName();
      }
      if (nodeConnector.getDefaultConnectionType() == EConnectionType.FLOW_MAIN) {
        typeName=""String_Node_Str"";
        if (isJoblet) {
          if (nodeConnector.isBuiltIn()) {
            jobletBuildConnectorNum++;
          }
          continue;
        }
      }
      if (needCheckOutput) {
        if (nbMaxOut != -1) {
          if (curLinkOut > nbMaxOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (nbMinOut != 0) {
          if (curLinkOut < nbMinOut) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
      }
      if (!isJoblet) {
        if (nbMaxIn != -1) {
          if (curLinkIn > nbMaxIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (needCheckInput) {
          if (nbMinIn != 0) {
            if (curLinkIn < nbMinIn) {
              String errorMessage=Messages.getString(""String_Node_Str"",typeName);
              Problems.add(ProblemStatus.WARNING,this,errorMessage);
            }
          }
        }
      }
    }
  }
  if (isJoblet) {
    List<IConnection> outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    for (    IConnection con : outgoingConnections) {
      INodeConnector connector=this.getConnectorFromName(con.getConnectorName());
      if (connector == null && con instanceof Connection) {
        ((Connection)con).disconnect();
      }
    }
    String typeName=""String_Node_Str"";
    outgoingConnections=(List<IConnection>)this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    outgoingConnections.addAll(this.getOutgoingConnections(EConnectionType.FLOW_REF));
    if (outgoingConnections.size() > jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
 else     if (outgoingConnections.size() < jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
}",0.9664841767926292
117951,"/** 
 * Create the ""Shapes"" drawer. 
 */
private static void createComponentsDrawer(List<IComponent> componentList,boolean needHiddenComponent,boolean isFavorite,int a){
  clearGroup();
  List<CreationToolEntry> nodeList=new LinkedList<CreationToolEntry>();
  PaletteDrawer componentsDrawer;
  String name, longName;
  String family;
  String oraFamily;
  List<String> families=new ArrayList<String>();
  HashMap<String,String> familyMap=new HashMap<String,String>();
  CombinedTemplateCreationEntry component;
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  paletteState=isFavorite;
  List<String> favoriteComponentNames=null;
  if (a == 0) {
    favoriteComponentNames=getFavoritesList();
  }
  Iterator<IComponent> componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    if (xmlComponent.isLoaded()) {
      family=xmlComponent.getTranslatedFamilyName();
      oraFamily=xmlComponent.getOriginalFamilyName();
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
          continue;
        }
        if (a == 0) {
          if (!oraStrings[j].equals(""String_Node_Str"")) {
            if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
              continue;
            }
          }
        }
        families.add(strings[j]);
        familyMap.put(strings[j],oraStrings[j]);
      }
    }
  }
  Collections.sort(families);
  List<String> recentlyUsedComponentNames=null;
  List<RecentlyUsedComponent> recentlyUsedComponents=null;
  if (a == 0) {
    recentlyUsedComponents=new LinkedList<TalendEditorPaletteFactory.RecentlyUsedComponent>();
    recentlyUsedComponentNames=getRecentlyUsedList(recentlyUsedComponents);
    Collections.sort(recentlyUsedComponents,new Comparator<TalendEditorPaletteFactory.RecentlyUsedComponent>(){
      @Override public int compare(      RecentlyUsedComponent arg0,      RecentlyUsedComponent arg1){
        return -1 * arg0.getTimestamp().compareTo(arg1.getTimestamp());
      }
    }
);
    families.add(0,FAVORITES);
    familyMap.put(FAVORITES,FAVORITES);
    families.add(1,RECENTLY_USED);
    familyMap.put(RECENTLY_USED,RECENTLY_USED);
    for (    Object element : families) {
      family=(String)element;
      String oraFam=familyMap.get(family);
      componentsDrawer=ht.get(family);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(ht,family);
        if (componentsDrawer instanceof IPaletteFilter) {
          ((IPaletteFilter)componentsDrawer).setOriginalName(oraFam);
        }
      }
    }
  }
  boolean noteAeeded=false;
  boolean needAddNote=true;
  boolean needToAdd=false;
  Map<String,IComponent> recentlyUsedMap=new HashMap<String,IComponent>();
  PaletteDrawer drawer=ht.get(""String_Node_Str"");
  if (drawer == null) {
    drawer=ht.get(""String_Node_Str"");
    if (drawer == null) {
      drawer=createComponentDrawer(ht,""String_Node_Str"");
      if (drawer instanceof IPaletteFilter) {
        ((IPaletteFilter)drawer).setOriginalName(""String_Node_Str"");
      }
    }
  }
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String largeIconsSize=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
  CreationToolEntry noteCreationToolEntry=createNoteEntry(largeIconsSize);
  noteCreationToolEntry.setParent(drawer);
  drawer.add(noteCreationToolEntry);
  componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (filter != null) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(filter);
      if (!matcher.matches() && filter.length() != 0) {
        filter=""String_Node_Str"";
      }
      String regex=getFilterRegex(filter);
      needAddNote=""String_Node_Str"".toLowerCase().matches(regex);
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
      continue;
    }
    if (xmlComponent.isLoaded()) {
      name=xmlComponent.getName();
      longName=xmlComponent.getLongName();
      ImageDescriptor imageSmall=xmlComponent.getIcon16();
      ImageDescriptor imageLarge;
      if (largeIconsSize.equals(""String_Node_Str"")) {
        imageLarge=xmlComponent.getIcon24();
      }
 else {
        imageLarge=xmlComponent.getIcon32();
      }
      if (favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName())) {
        componentsDrawer=ht.get(FAVORITES);
        if (componentsDrawer != null) {
          component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge);
          component.setDescription(longName);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
      }
      if (recentlyUsedComponentNames != null && recentlyUsedComponentNames.contains(name)) {
        recentlyUsedMap.put(name,xmlComponent);
      }
      if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
        continue;
      }
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
          continue;
        }
        component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge);
        component.setDescription(longName);
        if (a == 0) {
          componentsDrawer=ht.get(strings[j]);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
 else         if (a == 1) {
          boolean canAdd=true;
          Iterator<CreationToolEntry> iter=nodeList.iterator();
          while (iter.hasNext()) {
            if ((iter.next().getLabel()).equals(component.getLabel())) {
              canAdd=false;
            }
          }
          if (canAdd == true) {
            nodeList.add(component);
          }
        }
      }
    }
  }
  if (a == 0) {
    createRecentlyUsedEntryList(ht,recentlyUsedComponents,recentlyUsedMap);
  }
  if (a == 1) {
    Iterator<CreationToolEntry> iter=nodeList.iterator();
    while (iter.hasNext()) {
      CreationToolEntry entryComponent=iter.next();
      entryComponent.setParent(paGroup);
      paGroup.add(entryComponent);
    }
    palette.add(paGroup);
  }
  setFilter(""String_Node_Str"");
}","/** 
 * Create the ""Shapes"" drawer. 
 */
private static void createComponentsDrawer(List<IComponent> componentList,boolean needHiddenComponent,boolean isFavorite,int a){
  clearGroup();
  List<CreationToolEntry> nodeList=new LinkedList<CreationToolEntry>();
  PaletteDrawer componentsDrawer;
  String name, longName;
  String family;
  String oraFamily;
  List<String> families=new ArrayList<String>();
  HashMap<String,String> familyMap=new HashMap<String,String>();
  CombinedTemplateCreationEntry component;
  Hashtable<String,PaletteDrawer> ht=new Hashtable<String,PaletteDrawer>();
  paletteState=isFavorite;
  List<String> favoriteComponentNames=null;
  if (a == 0) {
    favoriteComponentNames=getFavoritesList();
  }
  Iterator<IComponent> componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    oraFamily=xmlComponent.getOriginalFamilyName();
    family=xmlComponent.getTranslatedFamilyName();
    if (oraFamily == null || oraFamily.trim().isEmpty()) {
      continue;
    }
    if (xmlComponent.isLoaded()) {
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
          continue;
        }
        if (a == 0) {
          if (!oraStrings[j].equals(""String_Node_Str"")) {
            if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
              continue;
            }
          }
        }
        families.add(strings[j]);
        familyMap.put(strings[j],oraStrings[j]);
      }
    }
  }
  Collections.sort(families);
  List<String> recentlyUsedComponentNames=null;
  List<RecentlyUsedComponent> recentlyUsedComponents=null;
  if (a == 0) {
    recentlyUsedComponents=new LinkedList<TalendEditorPaletteFactory.RecentlyUsedComponent>();
    recentlyUsedComponentNames=getRecentlyUsedList(recentlyUsedComponents);
    Collections.sort(recentlyUsedComponents,new Comparator<TalendEditorPaletteFactory.RecentlyUsedComponent>(){
      @Override public int compare(      RecentlyUsedComponent arg0,      RecentlyUsedComponent arg1){
        return -1 * arg0.getTimestamp().compareTo(arg1.getTimestamp());
      }
    }
);
    families.add(0,FAVORITES);
    familyMap.put(FAVORITES,FAVORITES);
    families.add(1,RECENTLY_USED);
    familyMap.put(RECENTLY_USED,RECENTLY_USED);
    for (    Object element : families) {
      family=(String)element;
      String oraFam=familyMap.get(family);
      componentsDrawer=ht.get(family);
      if (componentsDrawer == null) {
        componentsDrawer=createComponentDrawer(ht,family);
        if (componentsDrawer instanceof IPaletteFilter) {
          ((IPaletteFilter)componentsDrawer).setOriginalName(oraFam);
        }
      }
    }
  }
  boolean noteAeeded=false;
  boolean needAddNote=true;
  boolean needToAdd=false;
  Map<String,IComponent> recentlyUsedMap=new HashMap<String,IComponent>();
  PaletteDrawer drawer=ht.get(""String_Node_Str"");
  if (drawer == null) {
    drawer=ht.get(""String_Node_Str"");
    if (drawer == null) {
      drawer=createComponentDrawer(ht,""String_Node_Str"");
      if (drawer instanceof IPaletteFilter) {
        ((IPaletteFilter)drawer).setOriginalName(""String_Node_Str"");
      }
    }
  }
  IPreferenceStore store=DesignerPlugin.getDefault().getPreferenceStore();
  String largeIconsSize=store.getString(TalendDesignerPrefConstants.LARGE_ICONS_SIZE);
  CreationToolEntry noteCreationToolEntry=createNoteEntry(largeIconsSize);
  noteCreationToolEntry.setParent(drawer);
  drawer.add(noteCreationToolEntry);
  componentIter=componentList.iterator();
  while (componentIter.hasNext()) {
    IComponent xmlComponent=componentIter.next();
    if (xmlComponent.isTechnical()) {
      continue;
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (filter != null) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(filter);
      if (!matcher.matches() && filter.length() != 0) {
        filter=""String_Node_Str"";
      }
      String regex=getFilterRegex(filter);
      needAddNote=""String_Node_Str"".toLowerCase().matches(regex);
    }
    family=xmlComponent.getTranslatedFamilyName();
    oraFamily=xmlComponent.getOriginalFamilyName();
    if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
      continue;
    }
    if (xmlComponent.isLoaded()) {
      name=xmlComponent.getName();
      longName=xmlComponent.getLongName();
      ImageDescriptor imageSmall=xmlComponent.getIcon16();
      ImageDescriptor imageLarge;
      if (largeIconsSize.equals(""String_Node_Str"")) {
        imageLarge=xmlComponent.getIcon24();
      }
 else {
        imageLarge=xmlComponent.getIcon32();
      }
      if (favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName())) {
        componentsDrawer=ht.get(FAVORITES);
        if (componentsDrawer != null) {
          component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge);
          component.setDescription(longName);
          component.setParent(componentsDrawer);
          componentsDrawer.add(component);
        }
      }
      if (recentlyUsedComponentNames != null && recentlyUsedComponentNames.contains(name)) {
        recentlyUsedMap.put(name,xmlComponent);
      }
      if (isFavorite && !(favoriteComponentNames != null && favoriteComponentNames.contains(xmlComponent.getName()))) {
        continue;
      }
      String[] strings=family.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      String[] oraStrings=oraFamily.split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      for (int j=0; j < strings.length; j++) {
        if (!needHiddenComponent && !xmlComponent.isVisible(oraStrings[j])) {
          continue;
        }
        component=new TalendCombinedTemplateCreationEntry(name,name,Node.class,xmlComponent,imageSmall,imageLarge);
        component.setDescription(longName);
        if (a == 0) {
          componentsDrawer=ht.get(strings[j]);
          if (componentsDrawer != null) {
            component.setParent(componentsDrawer);
            componentsDrawer.add(component);
          }
        }
 else         if (a == 1) {
          boolean canAdd=true;
          Iterator<CreationToolEntry> iter=nodeList.iterator();
          while (iter.hasNext()) {
            if ((iter.next().getLabel()).equals(component.getLabel())) {
              canAdd=false;
            }
          }
          if (canAdd == true) {
            nodeList.add(component);
          }
        }
      }
    }
  }
  if (a == 0) {
    createRecentlyUsedEntryList(ht,recentlyUsedComponents,recentlyUsedMap);
  }
  if (a == 1) {
    Iterator<CreationToolEntry> iter=nodeList.iterator();
    while (iter.hasNext()) {
      CreationToolEntry entryComponent=iter.next();
      entryComponent.setParent(paGroup);
      paGroup.add(entryComponent);
    }
    palette.add(paGroup);
  }
  setFilter(""String_Node_Str"");
}",0.9810338925025676
117952,"public void refreshJobletNodes(boolean update,boolean coll){
  if (this.node.isJoblet()) {
    if (!coll || update) {
      JobletUtil util=new JobletUtil();
      IProcess jobletProcess=this.getNode().getComponent().getProcess();
      Set<IConnection> conns=new HashSet<IConnection>();
      List<? extends INode> jobletNodes=jobletProcess.getGraphicalNodes();
      boolean lockByOther=false;
      if (jobletProcess instanceof IProcess2) {
        lockByOther=util.lockByOthers(((IProcess2)jobletProcess).getProperty().getItem());
      }
      Map<String,List<? extends IElementParameter>> paraMap=new HashMap<String,List<? extends IElementParameter>>();
      for (      NodeContainer nc : nodeContainers) {
        if (this.node.getProcess() instanceof IProcess2) {
          if (!update) {
            paraMap.put(nc.getNode().getJoblet_unique_name(),nc.getNode().getElementParameters());
          }
          ((IProcess2)this.node.getProcess()).removeUniqueNodeName(nc.getNode().getUniqueName());
        }
      }
      nodeContainers.clear();
      jobletElements.clear();
      for (      INode inode : jobletNodes) {
        if ((inode instanceof Node)) {
          Node temNode=(Node)inode;
          conns.addAll(temNode.getIncomingConnections());
          conns.addAll(temNode.getOutgoingConnections());
          Node jnode=util.cloneNode(temNode,this.node.getProcess(),paraMap,lockByOther);
          if (!this.node.isActivate()) {
            jnode.setActivate(this.node.isActivate());
          }
          NodeContainer nodeContainer=util.cloneNodeContainer(temNode.getNodeContainer(),jnode);
          jnode.setJobletnode(this.node);
          jnode.setJoblet_unique_name(temNode.getUniqueName());
          this.nodeContainers.add(nodeContainer);
          this.jobletElements.add(jnode);
          this.jobletElements.add(jnode.getNodeLabel());
          this.jobletElements.add(jnode.getNodeError());
          this.jobletElements.add(jnode.getNodeProgressBar());
        }
      }
      for (      IConnection con : conns) {
        String sourceName=con.getSource().getUniqueName();
        String targetName=con.getTarget().getUniqueName();
        Node sourceNode=null;
        Node targetNode=null;
        for (        NodeContainer nodeC : nodeContainers) {
          Node connNode=nodeC.getNode();
          if (connNode.getJoblet_unique_name().equals(sourceName)) {
            sourceNode=connNode;
          }
          if (connNode.getJoblet_unique_name().equals(targetName)) {
            targetNode=connNode;
          }
          if (sourceNode != null && targetNode != null) {
            util.cloneConnection(con,sourceNode,targetNode);
            break;
          }
        }
      }
    }
  }
 else   if (this.node.isMapReduceStart()) {
    Integer mrGroupId=node.getMrGroupId();
    List<? extends INode> mapReduceNodes=this.node.getProcess().getGraphicalNodes();
    List<Node> nodeList=new ArrayList<Node>();
    if (node.getNodeContainer().getSubjobContainer() != null && node.getNodeContainer().getSubjobContainer().isCollapsed()) {
      nodeList.add(node);
    }
 else {
      for (      INode inode : mapReduceNodes) {
        if ((inode instanceof Node)) {
          Node temNode=(Node)inode;
          if (temNode.getMrGroupId() != null && mrGroupId != null && temNode.getMrGroupId().equals(mrGroupId)) {
            nodeList.add(temNode);
          }
        }
      }
    }
    nodeContainers.clear();
    jobletElements.clear();
    for (    Node inode : nodeList) {
      if (!inode.isActivate()) {
        continue;
      }
      NodeContainer nodeContainer=inode.getNodeContainer();
      if (nodeContainer instanceof JobletContainer) {
        ((JobletContainer)nodeContainer).setMrStartContainer(this);
      }
      this.nodeContainers.add(nodeContainer);
      this.jobletElements.add(inode);
      this.jobletElements.add(inode.getNodeLabel());
      this.jobletElements.add(inode.getNodeError());
      this.jobletElements.add(inode.getNodeProgressBar());
    }
  }
}","public void refreshJobletNodes(boolean update,boolean coll){
  if (this.node.isJoblet()) {
    if (!coll || update) {
      boolean componentUpdated=false;
      IComponent oldComponent=node.getComponent();
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IJobletProviderService.class)) {
        IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        IComponent newComponent=service.getUpdatedJobletComponent(oldComponent);
        if (oldComponent != newComponent) {
          node.setComponent(newComponent);
          componentUpdated=true;
        }
      }
      JobletUtil util=new JobletUtil();
      IProcess jobletProcess=this.getNode().getComponent().getProcess();
      Set<IConnection> conns=new HashSet<IConnection>();
      List<? extends INode> jobletNodes=jobletProcess.getGraphicalNodes();
      boolean lockByOther=false;
      if (jobletProcess instanceof IProcess2) {
        lockByOther=util.lockByOthers(((IProcess2)jobletProcess).getProperty().getItem());
      }
      Map<String,List<? extends IElementParameter>> paraMap=new HashMap<String,List<? extends IElementParameter>>();
      if (!componentUpdated) {
        for (        NodeContainer nc : nodeContainers) {
          if (this.node.getProcess() instanceof IProcess2) {
            if (!update) {
              paraMap.put(nc.getNode().getJoblet_unique_name(),nc.getNode().getElementParameters());
            }
            ((IProcess2)this.node.getProcess()).removeUniqueNodeName(nc.getNode().getUniqueName());
          }
        }
      }
      nodeContainers.clear();
      jobletElements.clear();
      for (      INode inode : jobletNodes) {
        if ((inode instanceof Node)) {
          Node temNode=(Node)inode;
          conns.addAll(temNode.getIncomingConnections());
          conns.addAll(temNode.getOutgoingConnections());
          Node jnode=util.cloneNode(temNode,this.node.getProcess(),paraMap,lockByOther);
          if (!this.node.isActivate()) {
            jnode.setActivate(this.node.isActivate());
          }
          NodeContainer nodeContainer=util.cloneNodeContainer(temNode.getNodeContainer(),jnode);
          jnode.setJobletnode(this.node);
          jnode.setJoblet_unique_name(temNode.getUniqueName());
          this.nodeContainers.add(nodeContainer);
          this.jobletElements.add(jnode);
          this.jobletElements.add(jnode.getNodeLabel());
          this.jobletElements.add(jnode.getNodeError());
          this.jobletElements.add(jnode.getNodeProgressBar());
        }
      }
      for (      IConnection con : conns) {
        String sourceName=con.getSource().getUniqueName();
        String targetName=con.getTarget().getUniqueName();
        Node sourceNode=null;
        Node targetNode=null;
        for (        NodeContainer nodeC : nodeContainers) {
          Node connNode=nodeC.getNode();
          if (connNode.getJoblet_unique_name().equals(sourceName)) {
            sourceNode=connNode;
          }
          if (connNode.getJoblet_unique_name().equals(targetName)) {
            targetNode=connNode;
          }
          if (sourceNode != null && targetNode != null) {
            util.cloneConnection(con,sourceNode,targetNode);
            break;
          }
        }
      }
    }
  }
 else   if (this.node.isMapReduceStart()) {
    Integer mrGroupId=node.getMrGroupId();
    List<? extends INode> mapReduceNodes=this.node.getProcess().getGraphicalNodes();
    List<Node> nodeList=new ArrayList<Node>();
    if (node.getNodeContainer().getSubjobContainer() != null && node.getNodeContainer().getSubjobContainer().isCollapsed()) {
      nodeList.add(node);
    }
 else {
      for (      INode inode : mapReduceNodes) {
        if ((inode instanceof Node)) {
          Node temNode=(Node)inode;
          if (temNode.getMrGroupId() != null && mrGroupId != null && temNode.getMrGroupId().equals(mrGroupId)) {
            nodeList.add(temNode);
          }
        }
      }
    }
    nodeContainers.clear();
    jobletElements.clear();
    for (    Node inode : nodeList) {
      if (!inode.isActivate()) {
        continue;
      }
      NodeContainer nodeContainer=inode.getNodeContainer();
      if (nodeContainer instanceof JobletContainer) {
        ((JobletContainer)nodeContainer).setMrStartContainer(this);
      }
      this.nodeContainers.add(nodeContainer);
      this.jobletElements.add(inode);
      this.jobletElements.add(inode.getNodeLabel());
      this.jobletElements.add(inode.getNodeError());
      this.jobletElements.add(inode.getNodeProgressBar());
    }
  }
}",0.929551481609593
117953,"public Node cloneNode(Node node,IProcess process,Map<String,List<? extends IElementParameter>> paraMap,boolean lockByOther){
  NodePart nodePart=new NodePart();
  IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
  boolean isInOut=false;
  if (service != null) {
    isInOut=service.isJobletInOutComponent(node);
  }
  Node cloneNode=new Node(node.getComponent(),(IProcess2)process,node.getUniqueName());
  ;
  nodePart.setModel(cloneNode);
  if (lockByOther) {
    cloneNode.setReadOnly(true);
  }
 else {
    cloneNode.setReadOnly(false);
  }
  cloneNode.setDummy(node.isDummy());
  cloneNode.setActivate(node.isActivate());
  List<? extends IElementParameter> elementParas=null;
  if (paraMap.containsKey(node.getUniqueName())) {
    elementParas=paraMap.get(node.getUniqueName());
  }
 else {
    elementParas=node.getElementParameters();
  }
  for (  IElementParameter elementPara : elementParas) {
    if (elementPara.getName() != null && !elementPara.getName().equals(""String_Node_Str"")) {
      IElementParameter cloneElement=cloneNode.getElementParameter(elementPara.getName());
      Object paValue=elementPara.getValue();
      if (paValue instanceof List) {
        List list=new ArrayList();
        list.addAll((List)paValue);
        cloneElement.setValue(list);
      }
 else {
        cloneElement.setContextMode(elementPara.isContextMode());
        cloneElement.setValue(elementPara.getValue());
      }
      if (lockByOther) {
        cloneElement.setReadOnly(true);
      }
 else {
        cloneElement.setReadOnly(elementPara.isReadOnly());
      }
      if (elementPara.getChildParameters() != null) {
        Map<String,IElementParameter> elementParaChild=elementPara.getChildParameters();
        Map<String,IElementParameter> cloneElementChild=cloneElement.getChildParameters();
        Iterator<Entry<String,IElementParameter>> ite=elementParaChild.entrySet().iterator();
        while (ite.hasNext()) {
          Entry<String,IElementParameter> entry=ite.next();
          String key=entry.getKey();
          IElementParameter c=entry.getValue();
          if (key != null && c != null) {
            IElementParameter cloneC=cloneElementChild.get(key);
            if (cloneC != null) {
              cloneC.setValue(c.getValue());
              if (lockByOther) {
                cloneC.setReadOnly(true);
              }
 else {
                cloneC.setReadOnly(c.isReadOnly());
              }
            }
          }
        }
      }
    }
  }
  for (  IElementParameter param : cloneNode.getElementParameters()) {
    String repositoryValue=param.getRepositoryValue();
    if (param.isShow(cloneNode.getElementParameters()) && (repositoryValue != null) && (!param.getName().equals(EParameterName.PROPERTY_TYPE.getName()))&& param.getFieldType() != EParameterFieldType.MEMO_SQL) {
      param.setRepositoryValueUsed(true);
      param.setReadOnly(true);
    }
  }
  cloneNode.setMetadataList(node.getMetadataList());
  cloneNode.setListConnector(node.getListConnector());
  cloneNode.setConnectionName(node.getConnectionName());
  cloneNode.setLocation(node.getLocation());
  IExternalNode externalNode=cloneNode.getExternalNode();
  if (externalNode != null) {
    if (node.getExternalData() != null) {
      try {
        externalNode.setExternalData(node.getExternalData().clone());
      }
 catch (      CloneNotSupportedException e) {
        ExceptionHandler.process(e);
      }
      cloneNode.setExternalData(externalNode.getExternalData());
    }
    if (node.getExternalNode().getExternalEmfData() != null) {
      externalNode.setExternalEmfData(EcoreUtil.copy(node.getExternalNode().getExternalEmfData()));
    }
    if (node.getExternalNode() != null) {
      ImageDescriptor screenshot=node.getExternalNode().getScreenshot();
      if (screenshot != null) {
        externalNode.setScreenshot(screenshot);
      }
    }
  }
  if (node.getElementParameter(EParameterName.LABEL.getName()) != null) {
    cloneNode.setPropertyValue(EParameterName.LABEL.getName(),node.getElementParameter(EParameterName.LABEL.getName()).getValue());
  }
 else {
    cloneNode.setPropertyValue(EParameterName.LABEL.getName(),node.getLabel());
  }
  boolean found=false;
  for (  INode inode : process.getGraphicalNodes()) {
    if (inode.getUniqueName().equals(cloneNode.getUniqueName())) {
      found=true;
    }
  }
  if (!found) {
    ((IProcess2)process).removeUniqueNodeName(cloneNode.getUniqueName());
  }
  return cloneNode;
}","public Node cloneNode(Node node,IProcess process,Map<String,List<? extends IElementParameter>> paraMap,boolean lockByOther){
  NodePart nodePart=new NodePart();
  IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
  boolean isInOut=false;
  if (service != null) {
    isInOut=service.isJobletInOutComponent(node);
  }
  Node cloneNode=new Node(node.getComponent(),(IProcess2)process,node.getUniqueName());
  nodePart.setModel(cloneNode);
  if (lockByOther) {
    cloneNode.setReadOnly(true);
  }
 else {
    cloneNode.setReadOnly(false);
  }
  cloneNode.setDummy(node.isDummy());
  cloneNode.setActivate(node.isActivate());
  List<? extends IElementParameter> elementParas=null;
  if (paraMap.containsKey(node.getUniqueName())) {
    elementParas=paraMap.get(node.getUniqueName());
  }
 else {
    elementParas=node.getElementParameters();
  }
  for (  IElementParameter elementPara : elementParas) {
    if (elementPara.getName() != null && !elementPara.getName().equals(""String_Node_Str"")) {
      IElementParameter cloneElement=cloneNode.getElementParameter(elementPara.getName());
      Object paValue=elementPara.getValue();
      if (paValue instanceof List) {
        List list=new ArrayList();
        list.addAll((List)paValue);
        cloneElement.setValue(list);
      }
 else {
        cloneElement.setContextMode(elementPara.isContextMode());
        cloneElement.setValue(elementPara.getValue());
      }
      if (lockByOther) {
        cloneElement.setReadOnly(true);
      }
 else {
        cloneElement.setReadOnly(elementPara.isReadOnly());
      }
      if (elementPara.getChildParameters() != null) {
        Map<String,IElementParameter> elementParaChild=elementPara.getChildParameters();
        Map<String,IElementParameter> cloneElementChild=cloneElement.getChildParameters();
        Iterator<Entry<String,IElementParameter>> ite=elementParaChild.entrySet().iterator();
        while (ite.hasNext()) {
          Entry<String,IElementParameter> entry=ite.next();
          String key=entry.getKey();
          IElementParameter c=entry.getValue();
          if (key != null && c != null) {
            IElementParameter cloneC=cloneElementChild.get(key);
            if (cloneC != null) {
              cloneC.setValue(c.getValue());
              if (lockByOther) {
                cloneC.setReadOnly(true);
              }
 else {
                cloneC.setReadOnly(c.isReadOnly());
              }
            }
          }
        }
      }
    }
  }
  for (  IElementParameter param : cloneNode.getElementParameters()) {
    String repositoryValue=param.getRepositoryValue();
    if (param.isShow(cloneNode.getElementParameters()) && (repositoryValue != null) && (!param.getName().equals(EParameterName.PROPERTY_TYPE.getName()))&& param.getFieldType() != EParameterFieldType.MEMO_SQL) {
      param.setRepositoryValueUsed(true);
      param.setReadOnly(true);
    }
  }
  cloneNode.setMetadataList(node.getMetadataList());
  cloneNode.setListConnector(node.getListConnector());
  cloneNode.setConnectionName(node.getConnectionName());
  cloneNode.setLocation(node.getLocation());
  IExternalNode externalNode=cloneNode.getExternalNode();
  if (externalNode != null) {
    if (node.getExternalData() != null) {
      try {
        externalNode.setExternalData(node.getExternalData().clone());
      }
 catch (      CloneNotSupportedException e) {
        ExceptionHandler.process(e);
      }
      cloneNode.setExternalData(externalNode.getExternalData());
    }
    if (node.getExternalNode().getExternalEmfData() != null) {
      externalNode.setExternalEmfData(EcoreUtil.copy(node.getExternalNode().getExternalEmfData()));
    }
    if (node.getExternalNode() != null) {
      ImageDescriptor screenshot=node.getExternalNode().getScreenshot();
      if (screenshot != null) {
        externalNode.setScreenshot(screenshot);
      }
    }
  }
  if (node.getElementParameter(EParameterName.LABEL.getName()) != null) {
    cloneNode.setPropertyValue(EParameterName.LABEL.getName(),node.getElementParameter(EParameterName.LABEL.getName()).getValue());
  }
 else {
    cloneNode.setPropertyValue(EParameterName.LABEL.getName(),node.getLabel());
  }
  boolean found=false;
  for (  INode inode : process.getGraphicalNodes()) {
    if (inode.getUniqueName().equals(cloneNode.getUniqueName())) {
      found=true;
    }
  }
  if (!found) {
    ((IProcess2)process).removeUniqueNodeName(cloneNode.getUniqueName());
  }
  return cloneNode;
}",0.9995601495491532
117954,"public boolean openedInJob(JobletProcessItem jobletItem,Node currNode){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorPart[] editors=page.getEditors();
  for (  IEditorPart editor : editors) {
    if (editor instanceof AbstractMultiPageTalendEditor) {
      IProcess2 pro=((AbstractMultiPageTalendEditor)editor).getProcess();
      if (currNode != null) {
        IProcess2 currPro=(IProcess2)currNode.getProcess();
        if (currPro.getId().equals(pro.getId())) {
          List<? extends INode> currNodeList=currPro.getGraphicalNodes();
          for (          INode node : currNodeList) {
            if (node == currNode) {
              continue;
            }
 else {
              if (((Node)node).isJoblet() && jobletItem.getProperty() != null) {
                if (jobletItem.getProperty().getId().equals(node.getComponent().getProcess().getId())) {
                  boolean haveOpened=!((Node)node).getNodeContainer().isCollapsed();
                  if (haveOpened) {
                    return true;
                  }
                }
              }
            }
          }
          continue;
        }
      }
      List<? extends INode> nodeList=pro.getGraphicalNodes();
      for (      INode node : nodeList) {
        if (((Node)node).isJoblet() && jobletItem.getProperty() != null) {
          if (jobletItem.getProperty().getId().equals(node.getComponent().getProcess().getId())) {
            boolean haveOpened=!((Node)node).getNodeContainer().isCollapsed();
            if (haveOpened) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}","public boolean openedInJob(JobletProcessItem jobletItem,Node currNode){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorPart[] editors=page.getEditors();
  for (  IEditorPart editor : editors) {
    if (editor instanceof AbstractMultiPageTalendEditor) {
      IProcess2 pro=((AbstractMultiPageTalendEditor)editor).getProcess();
      if (currNode != null) {
        IProcess2 currPro=(IProcess2)currNode.getProcess();
        if (currPro.getId().equals(pro.getId())) {
          List<? extends INode> currNodeList=currPro.getGraphicalNodes();
          for (          INode node : currNodeList) {
            if (node == currNode) {
              continue;
            }
 else {
              if (((Node)node).isJoblet() && jobletItem.getProperty() != null) {
                if (jobletItem.getProperty().getId().equals(node.getComponent().getProcess().getId()) && jobletItem.getProperty().getVersion().equals(node.getComponent().getVersion())) {
                  boolean haveOpened=!((Node)node).getNodeContainer().isCollapsed();
                  if (haveOpened) {
                    return true;
                  }
                }
              }
            }
          }
          continue;
        }
      }
      List<? extends INode> nodeList=pro.getGraphicalNodes();
      for (      INode node : nodeList) {
        if (((Node)node).isJoblet() && jobletItem.getProperty() != null) {
          if (jobletItem.getProperty().getId().equals(node.getComponent().getProcess().getId()) && jobletItem.getProperty().getVersion().equals(node.getComponent().getVersion())) {
            boolean haveOpened=!((Node)node).getNodeContainer().isCollapsed();
            if (haveOpened) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}",0.9533295389869096
117955,"@Test public void testBuildJob() throws Exception {
  Map<ExportChoice,Object> exportChoiceMap=new HashMap<ExportChoice,Object>();
  exportChoiceMap.put(ExportChoice.needLauncher,true);
  exportChoiceMap.put(ExportChoice.needSystemRoutine,true);
  exportChoiceMap.put(ExportChoice.needUserRoutine,true);
  exportChoiceMap.put(ExportChoice.needTalendLibraries,true);
  exportChoiceMap.put(ExportChoice.needJobItem,false);
  exportChoiceMap.put(ExportChoice.needJobScript,true);
  exportChoiceMap.put(ExportChoice.needSourceCode,true);
  exportChoiceMap.put(ExportChoice.includeLibs,true);
  exportChoiceMap.put(ExportChoice.includeTestSource,false);
  exportChoiceMap.put(ExportChoice.executeTests,false);
  exportChoiceMap.put(ExportChoice.binaries,true);
  exportChoiceMap.put(ExportChoice.needContext,true);
  exportChoiceMap.put(ExportChoice.contextName,""String_Node_Str"");
  exportChoiceMap.put(ExportChoice.applyToChildren,false);
  exportChoiceMap.put(ExportChoice.needLog4jLevel,false);
  exportChoiceMap.put(ExportChoice.log4jLevel,null);
  exportChoiceMap.put(ExportChoice.needDependencies,true);
  exportChoiceMap.put(ExportChoice.needParameterValues,false);
  destinationPath=ExportJobUtil.getTmpFolderPath() + ""String_Node_Str"";
  BuildJobManager.getInstance().buildJob(destinationPath,processItem,""String_Node_Str"",""String_Node_Str"",exportChoiceMap,JobExportType.POJO,new NullProgressMonitor());
  assertTrue(new File(destinationPath).exists());
  ZipFile zip=new ZipFile(destinationPath);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITransformService.class)) {
    ZipEntry tdm=zip.getEntry(""String_Node_Str"");
    assertTrue(""String_Node_Str"",tdm != null && tdm.isDirectory());
  }
  ZipEntry tdq=zip.getEntry(""String_Node_Str"");
  assertTrue(tdq != null && tdq.isDirectory());
  zip.close();
}","@Test public void testBuildJob() throws Exception {
  Map<ExportChoice,Object> exportChoiceMap=new HashMap<ExportChoice,Object>();
  exportChoiceMap.put(ExportChoice.needLauncher,true);
  exportChoiceMap.put(ExportChoice.needSystemRoutine,true);
  exportChoiceMap.put(ExportChoice.needUserRoutine,true);
  exportChoiceMap.put(ExportChoice.needTalendLibraries,true);
  exportChoiceMap.put(ExportChoice.needJobItem,false);
  exportChoiceMap.put(ExportChoice.needJobScript,true);
  exportChoiceMap.put(ExportChoice.needSourceCode,true);
  exportChoiceMap.put(ExportChoice.includeLibs,true);
  exportChoiceMap.put(ExportChoice.includeTestSource,false);
  exportChoiceMap.put(ExportChoice.executeTests,false);
  exportChoiceMap.put(ExportChoice.binaries,true);
  exportChoiceMap.put(ExportChoice.needContext,true);
  exportChoiceMap.put(ExportChoice.contextName,""String_Node_Str"");
  exportChoiceMap.put(ExportChoice.applyToChildren,false);
  exportChoiceMap.put(ExportChoice.needLog4jLevel,false);
  exportChoiceMap.put(ExportChoice.log4jLevel,null);
  exportChoiceMap.put(ExportChoice.needDependencies,true);
  exportChoiceMap.put(ExportChoice.needParameterValues,false);
  destinationPath=ExportJobUtil.getTmpFolderPath() + ""String_Node_Str"";
  BuildJobManager.getInstance().buildJob(destinationPath,processItem,""String_Node_Str"",""String_Node_Str"",exportChoiceMap,JobExportType.POJO,new NullProgressMonitor());
  assertTrue(new File(destinationPath).exists());
  ZipFile zip=null;
  try {
    zip=new ZipFile(destinationPath);
    ZipEntry jobInfoEntry=zip.getEntry(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",jobInfoEntry);
    final InputStream jobInfoStream=zip.getInputStream(jobInfoEntry);
    Properties jobInfoProp=new Properties();
    jobInfoProp.load(jobInfoStream);
    assertEquals(""String_Node_Str"",jobInfoProp.getProperty(""String_Node_Str""));
    assertEquals(""String_Node_Str"",jobInfoProp.getProperty(""String_Node_Str""));
    assertEquals(""String_Node_Str"",jobInfoProp.getProperty(""String_Node_Str""));
    assertEquals(""String_Node_Str"",jobInfoProp.getProperty(""String_Node_Str""));
    assertEquals(""String_Node_Str"",jobInfoProp.getProperty(""String_Node_Str""));
    final String technicalLabel=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
    assertEquals(technicalLabel,jobInfoProp.getProperty(""String_Node_Str""));
    ZipEntry libEntry=zip.getEntry(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",libEntry);
    ZipEntry log4jXmlEntry=zip.getEntry(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",log4jXmlEntry);
    ZipEntry batEntry=zip.getEntry(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",batEntry);
    ZipEntry shEntry=zip.getEntry(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",shEntry);
    ZipEntry jarEntry=zip.getEntry(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",jarEntry);
    ZipEntry javaEntry=zip.getEntry(""String_Node_Str"" + technicalLabel.toLowerCase() + ""String_Node_Str"");
    assertNotNull(""String_Node_Str"",javaEntry);
    ZipEntry routinesEntry=zip.getEntry(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",routinesEntry);
    assertTrue(routinesEntry.isDirectory());
    ZipEntry contextEntry=zip.getEntry(""String_Node_Str"" + technicalLabel.toLowerCase() + ""String_Node_Str"");
    assertNotNull(""String_Node_Str"",contextEntry);
    ZipEntry tdq=zip.getEntry(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",tdq);
    assertTrue(tdq.isDirectory());
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITransformService.class)) {
      ITransformService tdmService=(ITransformService)GlobalServiceRegister.getDefault().getService(ITransformService.class);
      if (tdmService.isTransformItem(processItem)) {
        ZipEntry tdmSettingEntry=zip.getEntry(""String_Node_Str"" + technicalLabel.toLowerCase() + ""String_Node_Str"");
        assertNotNull(""String_Node_Str"",tdmSettingEntry);
        final JarInputStream jarStream=new JarInputStream(zip.getInputStream(jarEntry));
        boolean found=false;
        JarEntry entry;
        while ((entry=jarStream.getNextJarEntry()) != null) {
          final String name=entry.getName();
          if (name.contains(""String_Node_Str"") && name.endsWith(technicalLabel + ""String_Node_Str"")) {
            found=true;
          }
        }
        jarStream.close();
        assertTrue(""String_Node_Str"",found);
      }
    }
  }
  finally {
    if (zip != null) {
      zip.close();
    }
  }
}",0.5155358275206088
117956,"private void init(boolean duringLogon){
  removeOldComponentsUserFolder();
  long startTime=System.currentTimeMillis();
  needInstalledNewCFComponents=new JSONObject();
  componentList=Collections.synchronizedSet(new HashSet<IComponent>());
  customComponentList=new HashSet<IComponent>();
  skeletonList=new ArrayList<String>();
  userComponentList=new HashSet<IComponent>();
  String installLocation=new Path(Platform.getConfigurationLocation().getURL().getPath()).toFile().getAbsolutePath();
  componentToProviderMap=new HashMap<IComponent,AbstractComponentsProvider>();
  boolean isNeedClean=!cleanDone && TalendCacheUtils.isSetCleanComponentCache();
  cleanDone=true;
  isCreated=hasComponentFile(installLocation) && !isNeedClean;
  ComponentsCache cache=ComponentManager.getComponentCache();
  try {
    if (isCreated) {
      if (cache.getComponentEntryMap().isEmpty()) {
        ComponentsCache loadCache=loadComponentResource(installLocation);
        cache.getComponentEntryMap().putAll(loadCache.getComponentEntryMap());
      }
    }
 else {
      cache.getComponentEntryMap().clear();
    }
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
    cache.getComponentEntryMap().clear();
    isCreated=false;
  }
  loadComponentsFromComponentsProviderExtension();
  loadComponentsFromExtensions();
  ComponentManager.saveResource();
  initComponentNameMap();
  installNewCFComponents();
  log.debug(componentList.size() + ""String_Node_Str"" + (System.currentTimeMillis() - startTime)+ ""String_Node_Str"");
}","private void init(boolean duringLogon){
  removeOldComponentsUserFolder();
  long startTime=System.currentTimeMillis();
  resetNewComponentsCache();
  componentList=Collections.synchronizedSet(new HashSet<IComponent>());
  customComponentList=new HashSet<IComponent>();
  skeletonList=new ArrayList<String>();
  userComponentList=new HashSet<IComponent>();
  String installLocation=new Path(Platform.getConfigurationLocation().getURL().getPath()).toFile().getAbsolutePath();
  componentToProviderMap=new HashMap<IComponent,AbstractComponentsProvider>();
  boolean isNeedClean=!cleanDone && TalendCacheUtils.isSetCleanComponentCache();
  cleanDone=true;
  isCreated=hasComponentFile(installLocation) && !isNeedClean;
  ComponentsCache cache=ComponentManager.getComponentCache();
  try {
    if (isCreated) {
      if (cache.getComponentEntryMap().isEmpty()) {
        ComponentsCache loadCache=loadComponentResource(installLocation);
        cache.getComponentEntryMap().putAll(loadCache.getComponentEntryMap());
      }
    }
 else {
      cache.getComponentEntryMap().clear();
    }
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
    cache.getComponentEntryMap().clear();
    isCreated=false;
  }
  loadComponentsFromComponentsProviderExtension();
  loadComponentsFromExtensions();
  ComponentManager.saveResource();
  initComponentNameMap();
  installNewCFComponents();
  log.debug(componentList.size() + ""String_Node_Str"" + (System.currentTimeMillis() - startTime)+ ""String_Node_Str"");
}",0.980883322346737
117957,"@Override public void reset(){
  componentList=null;
  skeletonList=null;
  customComponentList=null;
  Collection<IComponentFactoryFilter> filters=ComponentsFactoryProviderManager.getInstance().getProviders();
  for (  IComponentFactoryFilter filter : filters) {
    filter.cleanCache();
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IJobletProviderService.class)) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.clearJobletComponent();
    }
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ISparkJobletProviderService.class)) {
    ISparkJobletProviderService jobletService=(ISparkJobletProviderService)GlobalServiceRegister.getDefault().getService(ISparkJobletProviderService.class);
    if (jobletService != null) {
      jobletService.clearSparkJobletComponent();
    }
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ISparkStreamingJobletProviderService.class)) {
    ISparkStreamingJobletProviderService jobletService=(ISparkStreamingJobletProviderService)GlobalServiceRegister.getDefault().getService(ISparkStreamingJobletProviderService.class);
    if (jobletService != null) {
      jobletService.clearSparkStreamingJobletComponent();
    }
  }
}","@Override public void reset(){
  componentList=null;
  skeletonList=null;
  customComponentList=null;
  resetNewComponentsCache();
  Collection<IComponentFactoryFilter> filters=ComponentsFactoryProviderManager.getInstance().getProviders();
  for (  IComponentFactoryFilter filter : filters) {
    filter.cleanCache();
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IJobletProviderService.class)) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.clearJobletComponent();
    }
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ISparkJobletProviderService.class)) {
    ISparkJobletProviderService jobletService=(ISparkJobletProviderService)GlobalServiceRegister.getDefault().getService(ISparkJobletProviderService.class);
    if (jobletService != null) {
      jobletService.clearSparkJobletComponent();
    }
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ISparkStreamingJobletProviderService.class)) {
    ISparkStreamingJobletProviderService jobletService=(ISparkStreamingJobletProviderService)GlobalServiceRegister.getDefault().getService(ISparkStreamingJobletProviderService.class);
    if (jobletService != null) {
      jobletService.clearSparkStreamingJobletComponent();
    }
  }
}",0.9894353369763206
117958,"protected void installNewCFComponents(){
  ComponentsInstallComponent component=LocalComponentInstallHelper.getComponent();
  if (component != null) {
    File workFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
    Map<File,Long> copiedFiles=new HashMap<File,Long>();
    Map<File,String> duplicatedNameFiles=new HashMap<File,String>();
    try {
      if (needInstalledNewCFComponents != null) {
        final Iterator keys=needInstalledNewCFComponents.keys();
        while (keys.hasNext()) {
          String projectName=keys.next().toString();
          if (needInstalledNewCFComponents.has(projectName)) {
            try {
              JSONArray jsonArray=needInstalledNewCFComponents.getJSONArray(projectName);
              for (int i=0; i < jsonArray.length(); i++) {
                final String compZipPath=jsonArray.get(i).toString();
                final File compZipFile=new File(compZipPath);
                if (compZipFile.exists()) {
                  final long checksumAlder32=org.talend.utils.io.FilesUtils.getChecksumAlder32(compZipFile);
                  boolean needCopy=true;
                  File workZipFile=new File(workFolder,compZipFile.getName());
                  if (copiedFiles.containsKey(workZipFile)) {
                    final Long checksum=copiedFiles.get(workZipFile);
                    if (checksumAlder32 != checksum) {
                      workZipFile=new File(workFolder,System.currentTimeMillis() + compZipFile.getName());
                      duplicatedNameFiles.put(workZipFile,compZipFile.getName());
                    }
 else {
                      needCopy=false;
                    }
                  }
                  if (needCopy) {
                    org.talend.utils.io.FilesUtils.copyFile(compZipFile,workZipFile);
                    copiedFiles.put(workZipFile,checksumAlder32);
                  }
                }
              }
            }
 catch (            JSONException e) {
              ExceptionHandler.process(e);
            }
catch (            IOException e) {
              ExceptionHandler.process(e);
            }
          }
        }
      }
      if (copiedFiles.isEmpty()) {
        return;
      }
      try {
        component.setComponentFolder(workFolder);
        if (component.install()) {
          if (component.needRelaunch()) {
            final String message=""String_Node_Str"" + component.getInstalledMessages() + ""String_Node_Str"";
            if (!CommonUIPlugin.isFullyHeadless()) {
              DisplayUtils.getDisplay().syncExec(new Runnable(){
                @Override public void run(){
                  boolean confirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
                  if (confirm && PlatformUI.isWorkbenchRunning()) {
                    PlatformUI.getWorkbench().restart();
                  }
                }
              }
);
            }
            log.warn(message);
          }
        }
 else {
          return;
        }
      }
  finally {
        component.setComponentFolder(null);
      }
      final List<File> failedComponents=component.getFailedComponents();
      List<File> doneFiles=new ArrayList<File>(copiedFiles.keySet());
      doneFiles.removeAll(failedComponents);
      try {
        if (!doneFiles.isEmpty()) {
          final IPreferenceStore preferenceStore=CodeGeneratorActivator.getDefault().getPreferenceStore();
          String installedComponentsValues=preferenceStore.getString(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS);
          JSONArray installedNewCFComponentsJson=new JSONArray();
          if (StringUtils.isNotEmpty(installedComponentsValues)) {
            installedNewCFComponentsJson=new JSONArray(installedComponentsValues);
          }
          for (          File f : doneFiles) {
            String name=duplicatedNameFiles.get(f);
            if (name == null) {
              name=f.getName();
            }
            final Long checksum=copiedFiles.get(f);
            JSONObject jsonObj=new JSONObject();
            for (int i=0; i < installedNewCFComponentsJson.length(); i++) {
              final JSONObject object=installedNewCFComponentsJson.getJSONObject(i);
              if (jsonObj.has(IComponentPreferenceConstant.JSON_KEY_FILE_NAME)) {
                final String filename=jsonObj.getString(IComponentPreferenceConstant.JSON_KEY_FILE_NAME);
                if (filename.equals(name)) {
                  jsonObj=object;
                  break;
                }
              }
            }
            JSONArray jsonArray=new JSONArray();
            if (jsonObj.has(IComponentPreferenceConstant.JSON_KEY_CHECKSUM)) {
              jsonArray=jsonObj.getJSONArray(IComponentPreferenceConstant.JSON_KEY_CHECKSUM);
            }
            jsonArray.put(checksum);
          }
          preferenceStore.putValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,installedNewCFComponentsJson.toString());
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
      if (!failedComponents.isEmpty()) {
        StringBuffer messages=new StringBuffer(200);
        for (        File f : failedComponents) {
          String name=duplicatedNameFiles.get(f);
          if (name == null) {
            name=f.getName();
          }
          messages.append(name + ',' + ' ');
        }
        log.error(""String_Node_Str"" + messages);
      }
    }
  finally {
      org.talend.utils.io.FilesUtils.deleteFolder(workFolder,true);
      needInstalledNewCFComponents=new JSONObject();
    }
  }
}","protected void installNewCFComponents(){
  ComponentsInstallComponent component=LocalComponentInstallHelper.getComponent();
  if (component != null) {
    File workFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
    Map<File,Long> copiedFiles=new HashMap<File,Long>();
    Map<File,String> duplicatedNameFiles=new HashMap<File,String>();
    try {
      if (needInstalledNewCFComponents != null) {
        final Iterator keys=needInstalledNewCFComponents.keys();
        while (keys.hasNext()) {
          String projectName=keys.next().toString();
          if (needInstalledNewCFComponents.has(projectName)) {
            try {
              JSONArray jsonArray=needInstalledNewCFComponents.getJSONArray(projectName);
              for (int i=0; i < jsonArray.length(); i++) {
                final String compZipPath=jsonArray.get(i).toString();
                final File compZipFile=new File(compZipPath);
                if (compZipFile.exists()) {
                  final long checksumAlder32=org.talend.utils.io.FilesUtils.getChecksumAlder32(compZipFile);
                  boolean needCopy=true;
                  File workZipFile=new File(workFolder,compZipFile.getName());
                  if (copiedFiles.containsKey(workZipFile)) {
                    final Long checksum=copiedFiles.get(workZipFile);
                    if (checksumAlder32 != checksum) {
                      workZipFile=new File(workFolder,System.currentTimeMillis() + compZipFile.getName());
                      duplicatedNameFiles.put(workZipFile,compZipFile.getName());
                    }
 else {
                      needCopy=false;
                    }
                  }
                  if (needCopy) {
                    org.talend.utils.io.FilesUtils.copyFile(compZipFile,workZipFile);
                    copiedFiles.put(workZipFile,checksumAlder32);
                  }
                }
              }
            }
 catch (            JSONException e) {
              ExceptionHandler.process(e);
            }
catch (            IOException e) {
              ExceptionHandler.process(e);
            }
          }
        }
      }
      if (copiedFiles.isEmpty()) {
        return;
      }
      try {
        component.setComponentFolder(workFolder);
        if (component.install()) {
          if (component.needRelaunch()) {
            final String message=""String_Node_Str"" + component.getInstalledMessages() + ""String_Node_Str"";
            if (!CommonUIPlugin.isFullyHeadless()) {
              DisplayUtils.getDisplay().syncExec(new Runnable(){
                @Override public void run(){
                  boolean confirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
                  if (confirm && PlatformUI.isWorkbenchRunning()) {
                    PlatformUI.getWorkbench().restart();
                  }
                }
              }
);
            }
            log.warn(message);
          }
        }
 else {
          return;
        }
      }
  finally {
        resetNewComponentsCache();
        component.setComponentFolder(null);
      }
      final List<File> failedComponents=component.getFailedComponents();
      List<File> doneFiles=new ArrayList<File>(copiedFiles.keySet());
      doneFiles.removeAll(failedComponents);
      try {
        if (!doneFiles.isEmpty()) {
          final IPreferenceStore preferenceStore=CodeGeneratorActivator.getDefault().getPreferenceStore();
          String installedComponentsValues=preferenceStore.getString(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS);
          JSONArray installedNewCFComponentsJson=new JSONArray();
          if (StringUtils.isNotEmpty(installedComponentsValues)) {
            installedNewCFComponentsJson=new JSONArray(installedComponentsValues);
          }
          for (          File f : doneFiles) {
            String name=duplicatedNameFiles.get(f);
            if (name == null) {
              name=f.getName();
            }
            final Long checksum=copiedFiles.get(f);
            JSONObject jsonObj=new JSONObject();
            for (int i=0; i < installedNewCFComponentsJson.length(); i++) {
              final JSONObject object=installedNewCFComponentsJson.getJSONObject(i);
              if (jsonObj.has(IComponentPreferenceConstant.JSON_KEY_FILE_NAME)) {
                final String filename=jsonObj.getString(IComponentPreferenceConstant.JSON_KEY_FILE_NAME);
                if (filename.equals(name)) {
                  jsonObj=object;
                  break;
                }
              }
            }
            JSONArray jsonArray=new JSONArray();
            if (jsonObj.has(IComponentPreferenceConstant.JSON_KEY_CHECKSUM)) {
              jsonArray=jsonObj.getJSONArray(IComponentPreferenceConstant.JSON_KEY_CHECKSUM);
            }
            jsonArray.put(checksum);
          }
          preferenceStore.putValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,installedNewCFComponentsJson.toString());
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
      if (!failedComponents.isEmpty()) {
        StringBuffer messages=new StringBuffer(200);
        for (        File f : failedComponents) {
          String name=duplicatedNameFiles.get(f);
          if (name == null) {
            name=f.getName();
          }
          messages.append(name + ',' + ' ');
        }
        log.error(""String_Node_Str"" + messages);
      }
    }
  finally {
      org.talend.utils.io.FilesUtils.deleteFolder(workFolder,true);
      needInstalledNewCFComponents=new JSONObject();
    }
  }
}",0.9968852896680608
117959,"@BeforeClass public static void prepare() throws IOException {
  backupFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
  UserComponentsProviderTestClass provider=new UserComponentsProviderTestClass();
  File installationFolder=provider.getInstallationFolder();
  if (installationFolder != null && installationFolder.exists()) {
    FilesUtils.copyFolder(installationFolder,backupFolder,false,null,null,true);
  }
}","@BeforeClass public static void prepare() throws IOException {
  backupFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
  UserComponentsProviderTestClass provider=new UserComponentsProviderTestClass();
  File installationFolder=provider.getInstallationFolder();
  if (installationFolder != null && installationFolder.exists()) {
    FilesUtils.copyFolder(installationFolder,backupFolder,false,null,null,true);
  }
  cleanInstalledSetting();
  cleanComponentFactorySetting();
}",0.93475935828877
117960,"@AfterClass public static void restore() throws IOException {
  UserComponentsProviderTestClass provider=new UserComponentsProviderTestClass();
  File installationFolder=provider.getInstallationFolder();
  if (installationFolder != null && installationFolder.exists()) {
    FilesUtils.copyFolder(backupFolder,installationFolder,true,null,null,true);
  }
}","@AfterClass public static void restore() throws IOException {
  UserComponentsProviderTestClass provider=new UserComponentsProviderTestClass();
  File installationFolder=provider.getInstallationFolder();
  if (installationFolder != null && installationFolder.exists()) {
    FilesUtils.copyFolder(backupFolder,installationFolder,true,null,null,true);
  }
  cleanInstalledSetting();
  cleanComponentFactorySetting();
}",0.9210866752910736
117961,"@After public void clean(){
  if (workFolder != null) {
    FilesUtils.deleteFolder(workFolder,true);
  }
  CodeGeneratorActivator.getDefault().getPreferenceStore().setValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,new JSONArray().toString());
}","@After public void clean(){
  if (workFolder != null) {
    FilesUtils.deleteFolder(workFolder,true);
  }
  cleanInstalledSetting();
}",0.6361323155216285
117962,"@Before public void setup() throws Exception {
  workFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
  CodeGeneratorActivator.getDefault().getPreferenceStore().setValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,new JSONArray().toString());
  final Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final IProject project=ResourceUtils.getProject(currentProject);
  final IFolder projectComponentsFolder=project.getFolder(ERepositoryObjectType.getFolderName(ERepositoryObjectType.COMPONENTS));
  if (projectComponentsFolder.exists()) {
    FilesUtils.deleteFolder(projectComponentsFolder.getLocation().toFile(),false);
  }
  projectComponentsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
}","@Before public void setup() throws Exception {
  workFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
  cleanInstalledSetting();
  final Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final IProject project=ResourceUtils.getProject(currentProject);
  final IFolder projectComponentsFolder=project.getFolder(ERepositoryObjectType.getFolderName(ERepositoryObjectType.COMPONENTS));
  if (projectComponentsFolder.exists()) {
    FilesUtils.deleteFolder(projectComponentsFolder.getLocation().toFile(),false);
  }
  projectComponentsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
}",0.5126353790613718
117963,"@Override protected void createFieldEditors(){
  version=JavaUtils.getProjectJavaVersion();
  if (version == null) {
    version=JavaUtils.DEFAULT_VERSION;
    JavaUtils.updateProjectJavaVersion(version);
  }
  Composite parent=getFieldEditorParent();
  parent.setLayout(new GridLayout(2,true));
  Label label=new Label(parent,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  GridData labelData=new GridData(GridData.BEGINNING,GridData.CENTER,true,false,1,1);
  label.setLayoutData(labelData);
  combo=new Combo(parent,SWT.READ_ONLY);
  GridData comboData=new GridData(GridData.HORIZONTAL_ALIGN_END);
  comboData.widthHint=30;
  combo.setLayoutData(comboData);
  combo.setItems(JavaUtils.AVAILABLE_VERSIONS.toArray(new String[]{}));
  combo.select(JavaUtils.AVAILABLE_VERSIONS.indexOf(version));
}","@Override protected void createFieldEditors(){
  version=JavaUtils.getProjectJavaVersion();
  if (version == null) {
    version=JavaUtils.DEFAULT_VERSION;
    JavaUtils.updateProjectJavaVersion(version);
  }
  Composite parent=getFieldEditorParent();
  parent.setLayout(new GridLayout(2,true));
  Label label=new Label(parent,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  GridData labelData=new GridData(GridData.BEGINNING,GridData.CENTER,false,false,1,1);
  label.setLayoutData(labelData);
  combo=new Combo(parent,SWT.READ_ONLY);
  GridData comboData=new GridData(GridData.BEGINNING,GridData.CENTER,false,false,1,1);
  GC gc=new GC(combo);
  Point labelSize=gc.stringExtent(JavaUtils.DEFAULT_VERSION);
  gc.dispose();
  int hint=labelSize.x + (ITabbedPropertyConstants.HSPACE * 14);
  comboData.widthHint=hint;
  combo.setLayoutData(comboData);
  combo.setItems(JavaUtils.AVAILABLE_VERSIONS.toArray(new String[]{}));
  combo.select(JavaUtils.AVAILABLE_VERSIONS.indexOf(version));
}",0.8706140350877193
117964,"public Date getOrder(){
  GregorianCalendar gc=new GregorianCalendar(2017,1,3,16,49,0);
  return gc.getTime();
}","@Override public Date getOrder(){
  GregorianCalendar gc=new GregorianCalendar(2017,1,3,16,49,0);
  return gc.getTime();
}",0.9572649572649572
117965,"public ExecutionResult execute(Item item){
  ProcessType processType=getProcessType(item);
  if (processType == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    EList listParamType=processType.getParameters().getElementParameter();
    for (int j=0; j < listParamType.size(); j++) {
      ElementParameterType pType=(ElementParameterType)listParamType.get(j);
      if (pType.getName().equals(""String_Node_Str"")) {
        String value=pType.getValue().trim();
        if (value != null && value.length() > 0 && !isJson(value)) {
          try {
            JSONObject root=new JSONObject();
            JSONArray args=new JSONArray();
            String[] vms=value.split(""String_Node_Str"");
            for (int i=0; i < vms.length; i++) {
              args.put(vms[i]);
            }
            root.put(""String_Node_Str"",args);
            pType.setValue(root.toString());
            factory.save(item,true);
            break;
          }
 catch (          JSONException e) {
            ExceptionHandler.process(e);
            return ExecutionResult.FAILURE;
          }
        }
      }
    }
    return ExecutionResult.SUCCESS_WITH_ALERT;
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return ExecutionResult.FAILURE;
  }
}","@Override public ExecutionResult execute(Item item){
  ProcessType processType=getProcessType(item);
  if (processType == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  ParametersType parameters=processType.getParameters();
  if (parameters == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    EList listParamType=parameters.getElementParameter();
    for (int j=0; j < listParamType.size(); j++) {
      ElementParameterType pType=(ElementParameterType)listParamType.get(j);
      if (pType.getName().equals(""String_Node_Str"")) {
        String value=pType.getValue().trim();
        if (value != null && value.length() > 0 && !isJson(value)) {
          try {
            JSONObject root=new JSONObject();
            JSONArray args=new JSONArray();
            String[] vms=value.split(""String_Node_Str"");
            for (            String vm : vms) {
              args.put(vm);
            }
            root.put(""String_Node_Str"",args);
            pType.setValue(root.toString());
            factory.save(item,true);
            break;
          }
 catch (          JSONException e) {
            ExceptionHandler.process(e);
            return ExecutionResult.FAILURE;
          }
        }
      }
    }
    return ExecutionResult.SUCCESS_WITH_ALERT;
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return ExecutionResult.FAILURE;
  }
}",0.9183600713012476
117966,"protected void installNewCFComponents(){
  ComponentsInstallComponent component=LocalComponentInstallHelper.getComponent();
  if (component != null) {
    File workFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
    Map<File,Long> copiedFiles=new HashMap<File,Long>();
    Map<File,String> duplicatedNameFiles=new HashMap<File,String>();
    try {
      if (needInstalledNewCFComponents != null) {
        final Iterator keys=needInstalledNewCFComponents.keys();
        while (keys.hasNext()) {
          String projectName=keys.next().toString();
          if (needInstalledNewCFComponents.has(projectName)) {
            try {
              JSONArray jsonArray=needInstalledNewCFComponents.getJSONArray(projectName);
              for (int i=0; i < jsonArray.length(); i++) {
                final String compZipPath=jsonArray.get(i).toString();
                final File compZipFile=new File(compZipPath);
                if (compZipFile.exists()) {
                  final long checksumAlder32=org.talend.utils.io.FilesUtils.getChecksumAlder32(compZipFile);
                  boolean needCopy=true;
                  File workZipFile=new File(workFolder,compZipFile.getName());
                  if (copiedFiles.containsKey(workZipFile)) {
                    final Long checksum=copiedFiles.get(workZipFile);
                    if (checksumAlder32 != checksum) {
                      workZipFile=new File(workFolder,System.currentTimeMillis() + compZipFile.getName());
                      duplicatedNameFiles.put(workZipFile,compZipFile.getName());
                    }
 else {
                      needCopy=false;
                    }
                  }
                  if (needCopy) {
                    org.talend.utils.io.FilesUtils.copyFile(compZipFile,workZipFile);
                    copiedFiles.put(workZipFile,checksumAlder32);
                  }
                }
              }
            }
 catch (            JSONException e) {
              ExceptionHandler.process(e);
            }
catch (            IOException e) {
              ExceptionHandler.process(e);
            }
          }
        }
      }
      if (copiedFiles.isEmpty()) {
        return;
      }
      try {
        component.setComponentFolder(workFolder);
        if (component.install()) {
          if (component.needRelaunch()) {
            final String message=""String_Node_Str"" + component.getInstalledMessages() + ""String_Node_Str"";
            if (!CommonUIPlugin.isFullyHeadless()) {
              boolean confirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
              if (confirm && Workbench.getInstance() != null) {
                PlatformUI.getWorkbench().restart();
              }
            }
            log.warn(message);
          }
        }
 else {
          return;
        }
      }
  finally {
        component.setComponentFolder(null);
      }
      final List<File> failedComponents=component.getFailedComponents();
      List<File> doneFiles=new ArrayList<File>(copiedFiles.keySet());
      doneFiles.removeAll(failedComponents);
      try {
        if (!doneFiles.isEmpty()) {
          final IPreferenceStore preferenceStore=CodeGeneratorActivator.getDefault().getPreferenceStore();
          String installedComponentsValues=preferenceStore.getString(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS);
          JSONArray installedNewCFComponentsJson=new JSONArray();
          if (StringUtils.isNotEmpty(installedComponentsValues)) {
            installedNewCFComponentsJson=new JSONArray(installedComponentsValues);
          }
          for (          File f : doneFiles) {
            String name=duplicatedNameFiles.get(f);
            if (name == null) {
              name=f.getName();
            }
            final Long checksum=copiedFiles.get(f);
            JSONObject jsonObj=new JSONObject();
            for (int i=0; i < installedNewCFComponentsJson.length(); i++) {
              final JSONObject object=installedNewCFComponentsJson.getJSONObject(i);
              if (jsonObj.has(IComponentPreferenceConstant.JSON_KEY_FILE_NAME)) {
                final String filename=jsonObj.getString(IComponentPreferenceConstant.JSON_KEY_FILE_NAME);
                if (filename.equals(name)) {
                  jsonObj=object;
                  break;
                }
              }
            }
            JSONArray jsonArray=new JSONArray();
            if (jsonObj.has(IComponentPreferenceConstant.JSON_KEY_CHECKSUM)) {
              jsonArray=jsonObj.getJSONArray(IComponentPreferenceConstant.JSON_KEY_CHECKSUM);
            }
            jsonArray.put(checksum);
          }
          preferenceStore.putValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,installedNewCFComponentsJson.toString());
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
      if (!failedComponents.isEmpty()) {
        StringBuffer messages=new StringBuffer(200);
        for (        File f : failedComponents) {
          String name=duplicatedNameFiles.get(f);
          if (name == null) {
            name=f.getName();
          }
          messages.append(name + ',' + ' ');
        }
        log.error(""String_Node_Str"" + messages);
      }
    }
  finally {
      org.talend.utils.io.FilesUtils.deleteFolder(workFolder,true);
      needInstalledNewCFComponents=new JSONObject();
    }
  }
}","protected void installNewCFComponents(){
  ComponentsInstallComponent component=LocalComponentInstallHelper.getComponent();
  if (component != null) {
    File workFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
    Map<File,Long> copiedFiles=new HashMap<File,Long>();
    Map<File,String> duplicatedNameFiles=new HashMap<File,String>();
    try {
      if (needInstalledNewCFComponents != null) {
        final Iterator keys=needInstalledNewCFComponents.keys();
        while (keys.hasNext()) {
          String projectName=keys.next().toString();
          if (needInstalledNewCFComponents.has(projectName)) {
            try {
              JSONArray jsonArray=needInstalledNewCFComponents.getJSONArray(projectName);
              for (int i=0; i < jsonArray.length(); i++) {
                final String compZipPath=jsonArray.get(i).toString();
                final File compZipFile=new File(compZipPath);
                if (compZipFile.exists()) {
                  final long checksumAlder32=org.talend.utils.io.FilesUtils.getChecksumAlder32(compZipFile);
                  boolean needCopy=true;
                  File workZipFile=new File(workFolder,compZipFile.getName());
                  if (copiedFiles.containsKey(workZipFile)) {
                    final Long checksum=copiedFiles.get(workZipFile);
                    if (checksumAlder32 != checksum) {
                      workZipFile=new File(workFolder,System.currentTimeMillis() + compZipFile.getName());
                      duplicatedNameFiles.put(workZipFile,compZipFile.getName());
                    }
 else {
                      needCopy=false;
                    }
                  }
                  if (needCopy) {
                    org.talend.utils.io.FilesUtils.copyFile(compZipFile,workZipFile);
                    copiedFiles.put(workZipFile,checksumAlder32);
                  }
                }
              }
            }
 catch (            JSONException e) {
              ExceptionHandler.process(e);
            }
catch (            IOException e) {
              ExceptionHandler.process(e);
            }
          }
        }
      }
      if (copiedFiles.isEmpty()) {
        return;
      }
      try {
        component.setComponentFolder(workFolder);
        if (component.install()) {
          if (component.needRelaunch()) {
            final String message=""String_Node_Str"" + component.getInstalledMessages() + ""String_Node_Str"";
            if (!CommonUIPlugin.isFullyHeadless()) {
              DisplayUtils.getDisplay().syncExec(new Runnable(){
                @Override public void run(){
                  boolean confirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
                  if (confirm && PlatformUI.isWorkbenchRunning()) {
                    PlatformUI.getWorkbench().restart();
                  }
                }
              }
);
            }
            log.warn(message);
          }
        }
 else {
          return;
        }
      }
  finally {
        component.setComponentFolder(null);
      }
      final List<File> failedComponents=component.getFailedComponents();
      List<File> doneFiles=new ArrayList<File>(copiedFiles.keySet());
      doneFiles.removeAll(failedComponents);
      try {
        if (!doneFiles.isEmpty()) {
          final IPreferenceStore preferenceStore=CodeGeneratorActivator.getDefault().getPreferenceStore();
          String installedComponentsValues=preferenceStore.getString(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS);
          JSONArray installedNewCFComponentsJson=new JSONArray();
          if (StringUtils.isNotEmpty(installedComponentsValues)) {
            installedNewCFComponentsJson=new JSONArray(installedComponentsValues);
          }
          for (          File f : doneFiles) {
            String name=duplicatedNameFiles.get(f);
            if (name == null) {
              name=f.getName();
            }
            final Long checksum=copiedFiles.get(f);
            JSONObject jsonObj=new JSONObject();
            for (int i=0; i < installedNewCFComponentsJson.length(); i++) {
              final JSONObject object=installedNewCFComponentsJson.getJSONObject(i);
              if (jsonObj.has(IComponentPreferenceConstant.JSON_KEY_FILE_NAME)) {
                final String filename=jsonObj.getString(IComponentPreferenceConstant.JSON_KEY_FILE_NAME);
                if (filename.equals(name)) {
                  jsonObj=object;
                  break;
                }
              }
            }
            JSONArray jsonArray=new JSONArray();
            if (jsonObj.has(IComponentPreferenceConstant.JSON_KEY_CHECKSUM)) {
              jsonArray=jsonObj.getJSONArray(IComponentPreferenceConstant.JSON_KEY_CHECKSUM);
            }
            jsonArray.put(checksum);
          }
          preferenceStore.putValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,installedNewCFComponentsJson.toString());
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
      if (!failedComponents.isEmpty()) {
        StringBuffer messages=new StringBuffer(200);
        for (        File f : failedComponents) {
          String name=duplicatedNameFiles.get(f);
          if (name == null) {
            name=f.getName();
          }
          messages.append(name + ',' + ' ');
        }
        log.error(""String_Node_Str"" + messages);
      }
    }
  finally {
      org.talend.utils.io.FilesUtils.deleteFolder(workFolder,true);
      needInstalledNewCFComponents=new JSONObject();
    }
  }
}",0.9814294773077272
117967,"@Override public String getPartName(){
  if (item != null) {
    IRepositoryView viewPart=RepositoryManagerHelper.findRepositoryView();
    if (viewPart != null) {
      RepositoryNode repositoryNode=rEditorInput.getRepositoryNode();
      if (repositoryNode != null) {
        return getTitleText(repositoryNode.getObject());
      }
    }
  }
  return super.getPartName();
}","@Override public String getPartName(){
  String title=null;
  if (item != null) {
    IRepositoryView viewPart=RepositoryManagerHelper.findRepositoryView();
    if (viewPart != null) {
      RepositoryNode repositoryNode=rEditorInput.getRepositoryNode();
      if (repositoryNode != null) {
        return getTitleText(repositoryNode.getObject());
      }
 else {
        title=super.getPartName() + ""String_Node_Str"" + rEditorInput.getItem().getProperty().getVersion();
      }
    }
  }
  return title;
}",0.7936507936507936
117968,"@Override public String getProcessName(){
  return getProcess().getLabel();
}","@Override public String getProcessName(){
  return name;
}",0.8148148148148148
117969,"@Override public void performancesChanged(String connId,int exchangesCompleted){
  long duration=100;
  final IConnection conn=traceConnectionsManager.finConnectionByUniqueName(connId);
  final PerformanceData perfData=new PerformanceData(connId + ""String_Node_Str"" + exchangesCompleted+ ""String_Node_Str""+ duration);
  processPerformances(connId + ""String_Node_Str"" + exchangesCompleted+ ""String_Node_Str""+ duration,perfData,conn);
  startTime=System.currentTimeMillis();
}","@Override public void performancesChanged(String connId,int exchangesCompleted){
  long duration=System.currentTimeMillis() - startTime;
  final IConnection conn=traceConnectionsManager.finConnectionByUniqueName(connId);
  final PerformanceData perfData=new PerformanceData(connId + ""String_Node_Str"" + exchangesCompleted+ ""String_Node_Str""+ duration);
  processPerformances(connId + ""String_Node_Str"" + exchangesCompleted+ ""String_Node_Str""+ duration,perfData,conn);
  startTime=System.currentTimeMillis();
}",0.958290946083418
117970,"public JMXPerformanceMonitor(){
  jmxManager=JMXRunStatManager.getInstance();
  jmxPerformanceChangeListener=new JMXPerformanceChangeListener(){
    long startTime=System.currentTimeMillis();
    @Override public String getProcessName(){
      return getProcess().getLabel();
    }
    @Override public void performancesChanged(    String connId,    int exchangesCompleted){
      long duration=100;
      final IConnection conn=traceConnectionsManager.finConnectionByUniqueName(connId);
      final PerformanceData perfData=new PerformanceData(connId + ""String_Node_Str"" + exchangesCompleted+ ""String_Node_Str""+ duration);
      processPerformances(connId + ""String_Node_Str"" + exchangesCompleted+ ""String_Node_Str""+ duration,perfData,conn);
      startTime=System.currentTimeMillis();
    }
  }
;
}","public JMXPerformanceMonitor(){
  jmxManager=JMXRunStatManager.getInstance();
  jmxPerformanceChangeListener=new JMXPerformanceChangeListener(){
    long startTime=System.currentTimeMillis();
    String name=process.getLabel();
    @Override public String getProcessName(){
      return name;
    }
    @Override public void performancesChanged(    String connId,    int exchangesCompleted){
      long duration=System.currentTimeMillis() - startTime;
      final IConnection conn=traceConnectionsManager.finConnectionByUniqueName(connId);
      final PerformanceData perfData=new PerformanceData(connId + ""String_Node_Str"" + exchangesCompleted+ ""String_Node_Str""+ duration);
      processPerformances(connId + ""String_Node_Str"" + exchangesCompleted+ ""String_Node_Str""+ duration,perfData,conn);
      startTime=System.currentTimeMillis();
    }
  }
;
}",0.937046004842615
117971,"@Override public void run(){
  stopTracing=false;
  while (server != null && !stopTracing) {
    if (listeners.size() > 0) {
      try {
        Set<ObjectName> components=server.queryNames(new ObjectName(""String_Node_Str"" + projectLabel + ""String_Node_Str""),null);
        for (        ObjectName component : components) {
          int completed=Integer.parseInt(String.valueOf(server.getAttribute(component,""String_Node_Str"")));
          String camelID=String.valueOf(server.getAttribute(component,""String_Node_Str""));
          String processorId=String.valueOf(server.getAttribute(component,""String_Node_Str""));
          for (          JMXPerformanceChangeListener listener : listeners) {
            if (listener.getProcessName().equals(camelID.substring(camelID.lastIndexOf('.') + 1))) {
              listener.performancesChanged(targetNodeToConnectionMap.get(processorId),completed);
            }
          }
        }
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
    try {
      TimeUnit.MILLISECONDS.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  ;
}","@Override public void run(){
  stopTracing=false;
  Map<String,Integer> completedHistory=new HashMap();
  while (server != null && !stopTracing) {
    if (listeners.size() > 0) {
      try {
        Set<ObjectName> components=server.queryNames(new ObjectName(""String_Node_Str"" + projectLabel + ""String_Node_Str""),null);
        for (        ObjectName component : components) {
          int completed=Integer.parseInt(String.valueOf(server.getAttribute(component,""String_Node_Str"")));
          String camelID=String.valueOf(server.getAttribute(component,""String_Node_Str""));
          String processorId=String.valueOf(server.getAttribute(component,""String_Node_Str""));
          for (          JMXPerformanceChangeListener listener : listeners) {
            if (listener.getProcessName().equals(camelID.substring(camelID.lastIndexOf('.') + 1))) {
              if (completedHistory.get(processorId) != null && completed == completedHistory.get(processorId)) {
                continue;
              }
 else {
                completedHistory.put(processorId,completed);
                listener.performancesChanged(targetNodeToConnectionMap.get(processorId),completed);
              }
            }
          }
        }
        TimeUnit.MILLISECONDS.sleep(100);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
  ;
}",0.840175368672778
117972,"private void initCurrnentModel(){
  currentModel=new MapperSettingModel();
  currentModel.setReplicatedJoin(defaultModel.isReplicatedJoin());
  currentModel.setDieOnError(defaultModel.isDieOnError());
  currentModel.setLookInParallel(defaultModel.isLookInParallel());
  currentModel.setEnableAutoConvertType(defaultModel.isEnableAutoConvertType());
  currentModel.setTempDataDir(defaultModel.getTempDataDir());
  currentModel.setRowBufferSize(defaultModel.getRowBufferSize());
  AbstractMapComponent component=manager.getAbstractMapComponent();
  IElementParameter parameter=component.getElementParameter(REPLICATED_JOIN);
  if (parameter != null && parameter.getValue() != null && parameter.getValue() instanceof Boolean) {
    currentModel.setReplicatedJoin((Boolean)parameter.getValue());
  }
  parameter=component.getElementParameter(TEMPORARY_DATA_DIRECTORY);
  if (parameter != null && parameter.getValue() != null) {
    currentModel.setTempDataDir(String.valueOf(parameter.getValue()));
  }
  parameter=component.getElementParameter(ROWS_BUFFER_SIZE);
  if (parameter != null && parameter.getValue() != null) {
    currentModel.setRowBufferSize(String.valueOf(parameter.getValue()));
  }
  boolean parallel=false;
  IElementParameter paraEle=component.getElementParameter(LOOKUP_IN_PARALLEL);
  if (paraEle != null) {
    parallel=(Boolean)paraEle.getValue();
  }
  currentModel.setLookInParallel(parallel);
  parameter=component.getElementParameter(ENABLE_AUTO_CONVERT_TYPE);
  if (parameter != null && parameter.getValue() != null && parameter.getValue() instanceof Boolean) {
    currentModel.setEnableAutoConvertType((Boolean)parameter.getValue());
  }
}","private void initCurrnentModel(){
  currentModel=new MapperSettingModel();
  currentModel.setReplicatedJoin(defaultModel.isReplicatedJoin());
  currentModel.setDieOnError(defaultModel.isDieOnError());
  currentModel.setLookInParallel(defaultModel.isLookInParallel());
  currentModel.setEnableAutoConvertType(defaultModel.isEnableAutoConvertType());
  currentModel.setTempDataDir(defaultModel.getTempDataDir());
  currentModel.setRowBufferSize(defaultModel.getRowBufferSize());
  AbstractMapComponent component=manager.getAbstractMapComponent();
  IElementParameter parameter=component.getElementParameter(DIE_ON_ERROR);
  if (parameter != null && parameter.getValue() != null && parameter.getValue() instanceof Boolean) {
    currentModel.setDieOnError((Boolean)parameter.getValue());
  }
  parameter=component.getElementParameter(REPLICATED_JOIN);
  if (parameter != null && parameter.getValue() != null && parameter.getValue() instanceof Boolean) {
    currentModel.setReplicatedJoin((Boolean)parameter.getValue());
  }
  parameter=component.getElementParameter(TEMPORARY_DATA_DIRECTORY);
  if (parameter != null && parameter.getValue() != null) {
    currentModel.setTempDataDir(String.valueOf(parameter.getValue()));
  }
  parameter=component.getElementParameter(ROWS_BUFFER_SIZE);
  if (parameter != null && parameter.getValue() != null) {
    currentModel.setRowBufferSize(String.valueOf(parameter.getValue()));
  }
  boolean parallel=false;
  IElementParameter paraEle=component.getElementParameter(LOOKUP_IN_PARALLEL);
  if (paraEle != null) {
    parallel=(Boolean)paraEle.getValue();
  }
  currentModel.setLookInParallel(parallel);
  parameter=component.getElementParameter(ENABLE_AUTO_CONVERT_TYPE);
  if (parameter != null && parameter.getValue() != null && parameter.getValue() instanceof Boolean) {
    currentModel.setEnableAutoConvertType((Boolean)parameter.getValue());
  }
}",0.9364811691961776
117973,"/** 
 * nrousseau Comment method ""checkNodePropertiesFromRepository"".
 * @param node
 * @return true if the data have been modified
 */
@SuppressWarnings(""String_Node_Str"") private List<UpdateResult> checkNodePropertiesFromRepository(final Node node,boolean onlySimpleShow){
  if (node == null) {
    return Collections.emptyList();
  }
  List<UpdateResult> propertiesResults=new ArrayList<UpdateResult>();
  for (  IElementParameter curPropertyParam : node.getElementParametersFromField(EParameterFieldType.PROPERTY_TYPE)) {
    String propertyType=(String)curPropertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getValue();
    if (propertyType != null) {
      if (propertyType.equals(EmfComponent.REPOSITORY)) {
        List<IProcess2> openedProcesses=UpdateManagerUtils.getOpenedProcess();
        IElementParameter repositoryPropertyParam=curPropertyParam.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        String propertyValue=(String)repositoryPropertyParam.getValue();
        if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
          if (propertyValue.contains(""String_Node_Str"")) {
            propertyValue=propertyValue.split(""String_Node_Str"")[0];
          }
        }
        IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
        UpdateCheckResult result=null;
        Connection repositoryConnection=null;
        RulesItem repositoryRulesItem=null;
        LinkRulesItem repositoryLinkRulesItem=null;
        String source=null;
        Item item=null;
        if (lastVersion != null) {
          item=lastVersion.getProperty().getItem();
          if (item != null && item instanceof ConnectionItem) {
            source=UpdateRepositoryUtils.getRepositorySourceName(item);
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
          if (item != null && item instanceof FileItem) {
            if (item instanceof RulesItem) {
              repositoryRulesItem=(RulesItem)item;
            }
          }
          if (item != null && item instanceof LinkRulesItem) {
            repositoryLinkRulesItem=(LinkRulesItem)item;
          }
        }
        if (repositoryConnection != null) {
          boolean sameValues=true;
          boolean isXsdPath=false;
          if (repositoryConnection instanceof XmlFileConnectionImpl) {
            String filePath=((XmlFileConnectionImpl)repositoryConnection).getXmlFilePath();
            if (filePath != null) {
              if (XmlUtil.isXSDFile(filePath)) {
                isXsdPath=true;
              }
            }
          }
          boolean needBuildIn=false;
          if (repositoryConnection instanceof SalesforceSchemaConnection && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName()) {
            IElementParameter param=node.getElementParameter(""String_Node_Str"");
            if (param != null) {
              boolean found=false;
              SalesforceSchemaConnection salesforceConnection=(SalesforceSchemaConnection)repositoryConnection;
              List<SalesforceModuleUnit> units=salesforceConnection.getModules();
              for (              SalesforceModuleUnit unit : units) {
                if (unit.getLabel() != null && unit.getLabel().equals(param.getValue())) {
                  found=true;
                  break;
                }
              }
              if (!found) {
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
                needBuildIn=true;
              }
            }
          }
          for (          IElementParameter param : node.getElementParameters()) {
            if (needBuildIn) {
              break;
            }
            if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.SCHEMA_REFERENCE) {
              continue;
            }
            String repositoryValue=param.getRepositoryValue();
            String relatedComponent=node.getComponent().getName();
            if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
              if ((param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) || (repositoryConnection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue) && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName())) {
                continue;
              }
              IMetadataTable table=null;
              if (!node.getMetadataList().isEmpty()) {
                table=node.getMetadataList().get(0);
              }
              Object objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,repositoryValue,table,relatedComponent);
              if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                    if (objectValueFromESB != null) {
                      objectValue=objectValueFromESB;
                    }
                  }
                }
              }
              if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName()) && item instanceof DatabaseConnectionItem) {
                if (PluginChecker.isCDCPluginLoaded()) {
                  ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                  if (service != null) {
                    try {
                      List<IRepositoryViewObject> all;
                      all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                      for (                      IRepositoryViewObject obj : all) {
                        Item tempItem=obj.getProperty().getItem();
                        if (tempItem instanceof DatabaseConnectionItem) {
                          String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                          if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                            objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                            break;
                          }
                        }
                      }
                    }
 catch (                    PersistenceException e) {
                      ExceptionHandler.process(e);
                    }
                  }
                }
              }
              Object value=param.getValue();
              if (objectValue != null) {
                if ((param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && UpdatesConstants.TYPE.equals(param.getRepositoryValue()))) {
                  boolean found=false;
                  String[] list=param.getListRepositoryItems();
                  for (int i=0; (i < list.length) && (!found); i++) {
                    if (objectValue.equals(list[i])) {
                      found=true;
                    }
                  }
                  if (!found) {
                    sameValues=false;
                  }
                }
 else {
                  if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                    List<Map<String,Object>> oldList=(List<Map<String,Object>>)value;
                    String name=param.getName();
                    if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) && !oldList.isEmpty() && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && objectMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))&& ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null && objectValue instanceof List) {
                      List repList=(List)objectValue;
                      if (oldList.size() == repList.size()) {
                        for (                        Map<String,Object> line : oldList) {
                          final String sheetName=""String_Node_Str"";
                          Object oldValue=line.get(sheetName);
                          if (oldValue instanceof String && repList.get(0) instanceof Map) {
                            boolean found=false;
                            for (                            Map map : (List<Map>)repList) {
                              Object repValue=map.get(sheetName);
                              if (oldValue.equals(repValue)) {
                                found=true;
                                break;
                              }
                            }
                            if (!found) {
                              sameValues=false;
                              break;
                            }
                          }
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
 else                     if ((""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName()) || param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      List<Map<String,Object>> filterBuildInList=collectHadoopPropertiesList(oldList);
                      if (filterBuildInList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < filterBuildInList.size(); i++) {
                          Map<String,Object> oldMap=filterBuildInList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if ((param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof String && objectValue instanceof String) {
                    if (!value.equals(""String_Node_Str"") && !value.equals(objectValue)) {
                      if (repositoryConnection instanceof XmlFileConnection) {
                        if ((((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"") || ((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"")) && repositoryValue.equals(""String_Node_Str"")) {
                        }
 else {
                          sameValues=false;
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
                    if (repositoryValue.equals(""String_Node_Str"")) {
                      IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
                      if (paramEncoding != null) {
                        if (repositoryConnection instanceof FTPConnection) {
                          if (((FTPConnection)repositoryConnection).getEcoding() != null) {
                            paramEncoding.setValue(((FTPConnection)repositoryConnection).getEcoding());
                          }
 else {
                            paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof Boolean && objectValue instanceof Boolean) {
                    sameValues=((Boolean)value).equals(objectValue);
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
                List<Map<String,Object>> newMaps=RepositoryToComponentProperty.getXMLMappingValue(repositoryConnection,node.getMetadataList(),getColumnRenamedMap());
                if ((value instanceof List) && newMaps != null) {
                  List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                  if (oldMaps.size() != newMaps.size()) {
                    sameValues=false;
                    break;
                  }
                  for (int i=0; i < newMaps.size() && sameValues; i++) {
                    Map<String,Object> newmap=newMaps.get(i);
                    Map<String,Object> oldmap=null;
                    if (i < oldMaps.size()) {
                      oldmap=oldMaps.get(i);
                    }
                    if (oldmap != null && sameValues) {
                      Object o=newmap.get(UpdatesConstants.QUERY);
                      if (o != null) {
                        sameValues=newmap.get(UpdatesConstants.QUERY).equals(oldmap.get(UpdatesConstants.QUERY));
                      }
 else {
                        sameValues=oldmap.get(UpdatesConstants.QUERY) == null;
                      }
                    }
                    if (newmap.get(UpdatesConstants.SCHEMA) != null) {
                      if (!newmap.get(UpdatesConstants.SCHEMA).equals(newmap.get(UpdatesConstants.SCHEMA))) {
                        oldmap=null;
                        for (int j=0; j < oldMaps.size(); j++) {
                          Map<String,Object> m=oldMaps.get(j);
                          if (newmap.get(UpdatesConstants.SCHEMA).equals(m.get(UpdatesConstants.SCHEMA))) {
                            oldmap=m;
                          }
                        }
                      }
                      if (oldmap == null) {
                        sameValues=false;
                      }
 else {
                        Object o=newmap.get(UpdatesConstants.MAPPING);
                        if (o != null) {
                          sameValues=o.equals(oldmap.get(UpdatesConstants.MAPPING));
                        }
 else {
                          sameValues=oldmap.get(UpdatesConstants.MAPPING) == null;
                        }
                      }
                    }
                    if (!sameValues) {
                      break;
                    }
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
                objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,param.getName(),node.getMetadataList().get(0));
                if (value == null) {
                  sameValues=false;
                  break;
                }
                if (objectValue == null) {
                  sameValues=false;
                  break;
                }
                List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                List repList=(List)objectValue;
                if (oldMaps.size() == repList.size()) {
                  for (                  Map<String,Object> line : oldMaps) {
                    final String sheetName=""String_Node_Str"";
                    Object oldValue=line.get(sheetName);
                    if (oldValue instanceof String && repList.get(0) instanceof String) {
                      boolean found=false;
                      for (                      String str : (List<String>)repList) {
                        Object repValue=TalendTextUtils.addQuotes(str);
                        if (oldValue.equals(repValue)) {
                          found=true;
                          break;
                        }
                      }
                      if (!found) {
                        sameValues=false;
                        break;
                      }
                    }
                  }
                }
 else {
                  sameValues=false;
                }
              }
            }
            if (!sameValues) {
              break;
            }
          }
          if (onlySimpleShow || !sameValues) {
            result=new UpdateCheckResult(node);
            result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,item,source);
          }
          for (          IElementParameter param : node.getElementParameters()) {
            String repositoryValue=param.getRepositoryValue();
            if (param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (repositoryValue != null && (!param.getName().equals(EParameterName.PROPERTY_TYPE.getName())) && param.getFieldType() != EParameterFieldType.MEMO_SQL && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue())) && !(""String_Node_Str"".equals(node.getComponent().getName()) && param.getName().equals(UpdatesConstants.MAPPING)) && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(repositoryValue)) && param.isShow(node.getElementParameters())) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
            }
          }
          List<UpdateResult> contextResults=checkParameterContextMode(node.getElementParameters(),(ConnectionItem)lastVersion.getProperty().getItem(),null);
          if (contextResults != null) {
            propertiesResults.addAll(contextResults);
          }
        }
 else         if (item != null && ""String_Node_Str"".equalsIgnoreCase(item.getFileExtension())) {
          ITDQPatternService service=null;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
            service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
          }
          if (service != null) {
            if (node.getLabel().startsWith(""String_Node_Str"")) {
              IElementParameter schemasTableParam=node.getElementParameter(""String_Node_Str"");
              if (schemasTableParam != null) {
                List<Map> listValue=(List<Map>)schemasTableParam.getValue();
                for (                Map onePattern : listValue) {
                  if (StringUtils.equals(item.getProperty().getId(),(String)onePattern.get(""String_Node_Str""))) {
                    if (!service.isSameName(item,(String)onePattern.get(""String_Node_Str""))) {
                      String name=getItemNewName(item);
                      onePattern.put(""String_Node_Str"",name);
                      result=createUpdateCheckResult(node,propertiesResults,schemasTableParam);
                    }
                    String regex=service.getRegex(node,item);
                    if (!StringUtils.equals(regex,(String)onePattern.get(""String_Node_Str""))) {
                      onePattern.put(""String_Node_Str"",regex);
                      result=new UpdateCheckResult(node);
                      result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,schemasTableParam);
                    }
                  }
                }
              }
            }
 else {
              IElementParameter nameParam=node.getElementParameter(""String_Node_Str"");
              if (!service.isSameName(item,(String)nameParam.getValue())) {
                String name=getItemNewName(item);
                nameParam.setValue(name);
                result=createUpdateCheckResult(node,propertiesResults,nameParam);
              }
              String regex=service.getRegex(node,item);
              IElementParameter reParam=node.getElementParameter(""String_Node_Str"");
              if (!StringUtils.equals(regex,(String)reParam.getValue())) {
                reParam.setValue(regex);
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,reParam);
              }
            }
          }
        }
 else {
          result=new UpdateCheckResult(node);
          result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
        }
        if (result != null) {
          if (!openedProcesses.contains(getProcess())) {
            result.setFromItem(true);
          }
          result.setJob(getProcess());
          setConfigrationForReadOnlyJob(result);
          propertiesResults.add(result);
        }
      }
    }
  }
  return propertiesResults;
}","/** 
 * nrousseau Comment method ""checkNodePropertiesFromRepository"".
 * @param node
 * @return true if the data have been modified
 */
@SuppressWarnings(""String_Node_Str"") private List<UpdateResult> checkNodePropertiesFromRepository(final Node node,boolean onlySimpleShow){
  if (node == null) {
    return Collections.emptyList();
  }
  List<UpdateResult> propertiesResults=new ArrayList<UpdateResult>();
  for (  IElementParameter curPropertyParam : node.getElementParametersFromField(EParameterFieldType.PROPERTY_TYPE)) {
    String propertyType=(String)curPropertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getValue();
    if (propertyType != null) {
      if (propertyType.equals(EmfComponent.REPOSITORY)) {
        List<IProcess2> openedProcesses=UpdateManagerUtils.getOpenedProcess();
        IElementParameter repositoryPropertyParam=curPropertyParam.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        String propertyValue=(String)repositoryPropertyParam.getValue();
        if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
          if (propertyValue.contains(""String_Node_Str"")) {
            propertyValue=propertyValue.split(""String_Node_Str"")[0];
          }
        }
        IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
        UpdateCheckResult result=null;
        Connection repositoryConnection=null;
        RulesItem repositoryRulesItem=null;
        LinkRulesItem repositoryLinkRulesItem=null;
        String source=null;
        Item item=null;
        if (lastVersion != null) {
          item=lastVersion.getProperty().getItem();
          if (item != null && item instanceof ConnectionItem) {
            source=UpdateRepositoryUtils.getRepositorySourceName(item);
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
          if (item != null && item instanceof FileItem) {
            if (item instanceof RulesItem) {
              repositoryRulesItem=(RulesItem)item;
            }
          }
          if (item != null && item instanceof LinkRulesItem) {
            repositoryLinkRulesItem=(LinkRulesItem)item;
          }
        }
        if (repositoryConnection != null) {
          boolean sameValues=true;
          boolean isXsdPath=false;
          if (repositoryConnection instanceof XmlFileConnectionImpl) {
            String filePath=((XmlFileConnectionImpl)repositoryConnection).getXmlFilePath();
            if (filePath != null) {
              if (XmlUtil.isXSDFile(filePath)) {
                isXsdPath=true;
              }
            }
          }
          boolean needBuildIn=false;
          if (repositoryConnection instanceof SalesforceSchemaConnection && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName()) {
            IElementParameter param=node.getElementParameter(""String_Node_Str"");
            if (param != null) {
              boolean found=false;
              SalesforceSchemaConnection salesforceConnection=(SalesforceSchemaConnection)repositoryConnection;
              List<SalesforceModuleUnit> units=salesforceConnection.getModules();
              for (              SalesforceModuleUnit unit : units) {
                if (unit.getLabel() != null && unit.getLabel().equals(param.getValue())) {
                  found=true;
                  break;
                }
              }
              if (!found) {
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
                needBuildIn=true;
              }
            }
          }
          for (          IElementParameter param : node.getElementParameters()) {
            if (needBuildIn) {
              break;
            }
            if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.SCHEMA_REFERENCE) {
              continue;
            }
            String repositoryValue=param.getRepositoryValue();
            String relatedComponent=node.getComponent().getName();
            if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
              if ((param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) || (repositoryConnection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue) && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName())) {
                continue;
              }
              IMetadataTable table=null;
              if (!node.getMetadataList().isEmpty()) {
                table=node.getMetadataList().get(0);
              }
              Object objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,repositoryValue,table,relatedComponent);
              if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                    if (objectValueFromESB != null) {
                      objectValue=objectValueFromESB;
                    }
                  }
                }
              }
              if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName()) && item instanceof DatabaseConnectionItem) {
                if (PluginChecker.isCDCPluginLoaded()) {
                  ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                  if (service != null) {
                    try {
                      List<IRepositoryViewObject> all;
                      all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                      for (                      IRepositoryViewObject obj : all) {
                        Item tempItem=obj.getProperty().getItem();
                        if (tempItem instanceof DatabaseConnectionItem) {
                          String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                          if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                            objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                            break;
                          }
                        }
                      }
                    }
 catch (                    PersistenceException e) {
                      ExceptionHandler.process(e);
                    }
                  }
                }
              }
              Object value=param.getValue();
              if (objectValue != null) {
                if ((param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && UpdatesConstants.TYPE.equals(param.getRepositoryValue()))) {
                  boolean found=false;
                  String[] list=param.getListRepositoryItems();
                  for (int i=0; (i < list.length) && (!found); i++) {
                    if (objectValue.equals(list[i])) {
                      found=true;
                    }
                  }
                  if (!found) {
                    sameValues=false;
                  }
                }
 else {
                  if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                    List<Map<String,Object>> oldList=(List<Map<String,Object>>)value;
                    String name=param.getName();
                    if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) && !oldList.isEmpty() && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && objectMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))&& ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null && objectValue instanceof List) {
                      List repList=(List)objectValue;
                      if (oldList.size() == repList.size()) {
                        for (                        Map<String,Object> line : oldList) {
                          final String sheetName=""String_Node_Str"";
                          Object oldValue=line.get(sheetName);
                          if (oldValue instanceof String && repList.get(0) instanceof Map) {
                            boolean found=false;
                            for (                            Map map : (List<Map>)repList) {
                              Object repValue=map.get(sheetName);
                              if (oldValue.equals(repValue)) {
                                found=true;
                                break;
                              }
                            }
                            if (!found) {
                              sameValues=false;
                              break;
                            }
                          }
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
 else                     if ((""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName()) || param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      List<Map<String,Object>> filterBuildInList=collectHadoopPropertiesList(oldList);
                      if (filterBuildInList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < filterBuildInList.size(); i++) {
                          Map<String,Object> oldMap=filterBuildInList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if ((param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof String && objectValue instanceof String) {
                    if (!value.equals(""String_Node_Str"") && !value.equals(objectValue)) {
                      if (repositoryConnection instanceof XmlFileConnection) {
                        if ((((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"") || ((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"")) && repositoryValue.equals(""String_Node_Str"")) {
                        }
 else {
                          sameValues=false;
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
                    if (repositoryValue.equals(""String_Node_Str"")) {
                      IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
                      if (paramEncoding != null) {
                        if (repositoryConnection instanceof FTPConnection) {
                          if (((FTPConnection)repositoryConnection).getEcoding() != null) {
                            paramEncoding.setValue(((FTPConnection)repositoryConnection).getEcoding());
                          }
 else {
                            paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof Boolean && objectValue instanceof Boolean) {
                    sameValues=((Boolean)value).equals(objectValue);
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
                List<Map<String,Object>> newMaps=RepositoryToComponentProperty.getXMLMappingValue(repositoryConnection,node.getMetadataList(),getColumnRenamedMap());
                if ((value instanceof List) && newMaps != null) {
                  List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                  if (oldMaps.size() != newMaps.size()) {
                    sameValues=false;
                    break;
                  }
                  for (int i=0; i < newMaps.size() && sameValues; i++) {
                    Map<String,Object> newmap=newMaps.get(i);
                    Map<String,Object> oldmap=null;
                    if (i < oldMaps.size()) {
                      oldmap=oldMaps.get(i);
                    }
                    if (oldmap != null && sameValues) {
                      Object o=newmap.get(UpdatesConstants.QUERY);
                      if (o != null) {
                        sameValues=newmap.get(UpdatesConstants.QUERY).equals(oldmap.get(UpdatesConstants.QUERY));
                      }
 else {
                        sameValues=oldmap.get(UpdatesConstants.QUERY) == null;
                      }
                    }
                    if (newmap.get(UpdatesConstants.SCHEMA) != null) {
                      if (!newmap.get(UpdatesConstants.SCHEMA).equals(newmap.get(UpdatesConstants.SCHEMA))) {
                        oldmap=null;
                        for (int j=0; j < oldMaps.size(); j++) {
                          Map<String,Object> m=oldMaps.get(j);
                          if (newmap.get(UpdatesConstants.SCHEMA).equals(m.get(UpdatesConstants.SCHEMA))) {
                            oldmap=m;
                          }
                        }
                      }
                      if (oldmap == null) {
                        sameValues=false;
                      }
 else {
                        Object o=newmap.get(UpdatesConstants.MAPPING);
                        if (o != null) {
                          sameValues=o.equals(oldmap.get(UpdatesConstants.MAPPING));
                        }
 else {
                          sameValues=oldmap.get(UpdatesConstants.MAPPING) == null;
                        }
                      }
                    }
                    if (!sameValues) {
                      break;
                    }
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
                objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,param.getName(),node.getMetadataList().get(0));
                if (value == null) {
                  sameValues=false;
                  break;
                }
                if (objectValue == null) {
                  sameValues=false;
                  break;
                }
                List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                List repList=(List)objectValue;
                if (oldMaps.size() == repList.size()) {
                  for (                  Map<String,Object> line : oldMaps) {
                    final String sheetName=""String_Node_Str"";
                    Object oldValue=line.get(sheetName);
                    if (oldValue instanceof String && repList.get(0) instanceof String) {
                      boolean found=false;
                      for (                      String str : (List<String>)repList) {
                        Object repValue=TalendTextUtils.addQuotes(str);
                        if (oldValue.equals(repValue)) {
                          found=true;
                          break;
                        }
                      }
                      if (!found) {
                        sameValues=false;
                        break;
                      }
                    }
                  }
                }
 else {
                  sameValues=false;
                }
              }
            }
            if (!sameValues) {
              break;
            }
          }
          if (onlySimpleShow || !sameValues) {
            result=new UpdateCheckResult(node);
            result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,item,source);
          }
          for (          IElementParameter param : node.getElementParameters()) {
            String repositoryValue=param.getRepositoryValue();
            if (param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (repositoryValue != null && (!param.getName().equals(EParameterName.PROPERTY_TYPE.getName())) && param.getFieldType() != EParameterFieldType.MEMO_SQL && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue())) && !(""String_Node_Str"".equals(node.getComponent().getName()) && param.getName().equals(UpdatesConstants.MAPPING)) && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(repositoryValue)) && param.isShow(node.getElementParameters())) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
            }
          }
          List<UpdateResult> contextResults=checkParameterContextMode(node.getElementParameters(),(ConnectionItem)lastVersion.getProperty().getItem(),null);
          if (contextResults != null) {
            propertiesResults.addAll(contextResults);
          }
        }
 else         if (item != null && ""String_Node_Str"".equalsIgnoreCase(item.getFileExtension())) {
          ITDQPatternService service=null;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
            service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
          }
          if (service != null) {
            if (node.getLabel().startsWith(""String_Node_Str"")) {
              IElementParameter schemasTableParam=node.getElementParameter(""String_Node_Str"");
              if (schemasTableParam != null) {
                ElementParameter newValueParameter=new ElementParameter(schemasTableParam.getElement());
                newValueParameter.setName(schemasTableParam.getName());
                List<Map> newValueList=new ArrayList<>();
                newValueParameter.setValue(newValueList);
                List<Map> listValue=(List<Map>)schemasTableParam.getValue();
                for (                Map onePattern : listValue) {
                  Map newListMap=new HashMap();
                  newListMap.putAll(onePattern);
                  newValueList.add(newListMap);
                  if (StringUtils.equals(item.getProperty().getId(),(String)onePattern.get(""String_Node_Str""))) {
                    if (!service.isSameName(item,(String)onePattern.get(""String_Node_Str""))) {
                      String name=getItemNewName(item);
                      newListMap.put(""String_Node_Str"",name);
                      result=createUpdateCheckResult(node,propertiesResults,schemasTableParam);
                    }
                    String regex=service.getRegex(node,item);
                    if (!StringUtils.equals(regex,(String)onePattern.get(""String_Node_Str""))) {
                      newListMap.put(""String_Node_Str"",regex);
                      if (result != null) {
                        propertiesResults.add(result);
                      }
                      result=createUpdateCheckResult(node,propertiesResults,newValueParameter);
                    }
                  }
                }
              }
            }
 else {
              IElementParameter nameParam=node.getElementParameter(""String_Node_Str"");
              if (!service.isSameName(item,(String)nameParam.getValue())) {
                String newVlaue=getItemNewName(item);
                ElementParameter newValueParameter=new ElementParameter(nameParam.getElement());
                newValueParameter.setName(nameParam.getName());
                newValueParameter.setValue(newVlaue);
                result=createUpdateCheckResult(node,propertiesResults,newValueParameter);
              }
              String regex=service.getRegex(node,item);
              IElementParameter reParam=node.getElementParameter(""String_Node_Str"");
              if (!StringUtils.equals(regex,(String)reParam.getValue())) {
                ElementParameter newValueParameter=new ElementParameter(reParam.getElement());
                newValueParameter.setName(reParam.getName());
                newValueParameter.setValue(regex);
                if (result != null) {
                  propertiesResults.add(result);
                }
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,newValueParameter);
              }
            }
          }
        }
 else {
          result=new UpdateCheckResult(node);
          result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
        }
        if (result != null) {
          if (!openedProcesses.contains(getProcess())) {
            result.setFromItem(true);
          }
          result.setJob(getProcess());
          setConfigrationForReadOnlyJob(result);
          propertiesResults.add(result);
        }
      }
    }
  }
  return propertiesResults;
}",0.9449150857097404
117974,"@SuppressWarnings(""String_Node_Str"") private void updateProperty(){
  Object updateObject=result.getUpdateObject();
  if (updateObject == null) {
    return;
  }
  if (updateObject instanceof Node) {
    Node node=(Node)updateObject;
    boolean update=false;
    boolean isXsdPath=false;
    Object parameter=result.getParameter();
    IElementParameter curPropertyParam=null;
    String parentParamName=""String_Node_Str"";
    ConnectionItem connectionItem=null;
    if (parameter instanceof ConnectionItem) {
      if (parameter instanceof XmlFileConnectionItem) {
        String filePath=((XmlFileConnection)((XmlFileConnectionItem)parameter).getConnection()).getXmlFilePath();
        if (filePath != null) {
          if (XmlUtil.isXSDFile(filePath)) {
            isXsdPath=true;
          }
        }
      }
      connectionItem=(ConnectionItem)result.getParameter();
      for (      IElementParameter param : node.getElementParameters()) {
        if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE && param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName()).getValue().equals(connectionItem.getProperty().getId())) {
          curPropertyParam=param;
          parentParamName=curPropertyParam.getName();
          if (connectionItem != null) {
            ConnectionContextHelper.addContextForNodeParameter(node,connectionItem,false);
          }
          break;
        }
      }
    }
    if (result.getResultType() == EUpdateResult.UPDATE) {
      if (result.isChecked() && connectionItem != null) {
        List<? extends IElementParameter> elemParameters=new ArrayList<>(node.getElementParameters());
        for (        IElementParameter param : elemParameters) {
          String repositoryValue=param.getRepositoryValue();
          if (param.getRepositoryValue() == null || (curPropertyParam != null && param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName()))) {
            continue;
          }
          if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
            continue;
          }
          if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || node.getComponentProperties() != null || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
            if (param.getName().equals(EParameterName.PROPERTY_TYPE.getName()) || param.getFieldType() == EParameterFieldType.MEMO_SQL) {
              continue;
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) {
              continue;
            }
            IMetadataTable table=null;
            if (!node.getMetadataList().isEmpty()) {
              table=node.getMetadataList().get(0);
            }
            Object objectValue=RepositoryToComponentProperty.getValue(connectionItem.getConnection(),repositoryValue,table);
            if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
                  if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
                    if (propertyValue.contains(""String_Node_Str"")) {
                      propertyValue=propertyValue.split(""String_Node_Str"")[0];
                    }
                  }
                  IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
                  if (lastVersion != null) {
                    Item item=lastVersion.getProperty().getItem();
                    if (item != null) {
                      Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                      if (objectValueFromESB != null) {
                        objectValue=objectValueFromESB;
                      }
                    }
                  }
                }
              }
            }
            if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName())) {
              String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
              Item item=null;
              IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
              if (lastVersion != null) {
                item=lastVersion.getProperty().getItem();
              }
              if (item != null && PluginChecker.isCDCPluginLoaded()) {
                ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                if (service != null) {
                  try {
                    List<IRepositoryViewObject> all;
                    all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                    for (                    IRepositoryViewObject obj : all) {
                      Item tempItem=obj.getProperty().getItem();
                      if (tempItem instanceof DatabaseConnectionItem) {
                        String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                        if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                          objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                        }
                      }
                    }
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IJsonFileService.class)) {
              IJsonFileService jsonService=(IJsonFileService)GlobalServiceRegister.getDefault().getService(IJsonFileService.class);
              boolean paramChanged=jsonService.changeFilePathFromRepository(connectionItem.getConnection(),param,node,objectValue);
              if (paramChanged) {
                continue;
              }
            }
            if (objectValue != null) {
              if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && repositoryValue.equals(UpdatesConstants.TYPE)) {
                boolean found=false;
                String[] items=param.getListRepositoryItems();
                for (int i=0; (i < items.length) && (!found); i++) {
                  if (objectValue.equals(items[i])) {
                    found=true;
                    node.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
                  }
                }
              }
 else {
                if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                  String name=param.getName();
                  if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") && objectValue instanceof List) {
                    param.setValue(objectValue);
                  }
 else                   if (param.getName().equals(""String_Node_Str"") && objectValue instanceof List) {
                    List<Map<String,Object>> paramMaps=(List<Map<String,Object>>)param.getValue();
                    if (paramMaps == null) {
                      paramMaps=new ArrayList<Map<String,Object>>();
                      node.setPropertyValue(param.getName(),paramMaps);
                    }
 else {
                      List<Map<String,Object>> objectValueList=(List<Map<String,Object>>)objectValue;
                      if (paramMaps.size() < objectValueList.size()) {
                        paramMaps.clear();
                        for (int i=0; i < objectValueList.size(); i++) {
                          Map<String,Object> map=objectValueList.get(i);
                          paramMaps.add(map);
                        }
                      }
 else {
                        String value=null;
                        List<String> repNames=new ArrayList<String>();
                        for (int i=0; i < objectValueList.size(); i++) {
                          repNames.add(objectValueList.get(i).get(""String_Node_Str"").toString());
                        }
                        for (int j=0; j < paramMaps.size(); j++) {
                          Map<String,Object> map=paramMaps.get(j);
                          value=map.get(""String_Node_Str"").toString();
                          if (!repNames.contains(value)) {
                            paramMaps.remove(j);
                          }
                        }
                      }
                    }
                  }
 else                   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"") && objectValue instanceof List)) {
                    List<HashMap<String,Object>> oldValue=(List<HashMap<String,Object>>)param.getValue();
                    for (                    HashMap<String,Object> map : oldValue) {
                      if (map.get(""String_Node_Str"") != null && !map.get(""String_Node_Str"").equals(""String_Node_Str"") && Boolean.valueOf(String.valueOf(map.get(""String_Node_Str"")))) {
                        ((List<HashMap<String,Object>>)objectValue).add(map);
                      }
                    }
                    param.setValue(objectValue);
                  }
 else                   if (param.getName().equals(""String_Node_Str"") && objectValue instanceof List) {
                    param.setValue(objectValue);
                  }
                }
 else {
                  node.setPropertyValue(param.getName(),objectValue);
                }
              }
            }
 else             if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
              RepositoryToComponentProperty.getTableXMLMappingValue(connectionItem.getConnection(),(List<Map<String,Object>>)param.getValue(),node);
            }
 else             if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
              objectValue=RepositoryToComponentProperty.getValue(connectionItem.getConnection(),""String_Node_Str"",node.getMetadataList().get(0));
              List<Map<String,Object>> paramMaps=(List<Map<String,Object>>)param.getValue();
              if (paramMaps == null) {
                paramMaps=new ArrayList<Map<String,Object>>();
              }
 else {
                paramMaps.clear();
              }
              if (objectValue != null) {
                List<String> objectValueList=(List<String>)objectValue;
                for (int i=0; i < objectValueList.size(); i++) {
                  Map<String,Object> map=new HashedMap();
                  map.put(""String_Node_Str"",TalendTextUtils.addQuotes(objectValueList.get(i)));
                  paramMaps.add(map);
                }
              }
            }
 else             if (node.getComponentProperties() != null && objectValue == null) {
              node.setPropertyValue(param.getName(),objectValue);
            }
            if (!(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue()))) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
              update=true;
            }
          }
        }
      }
 else {
        ITDQPatternService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
          service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
        }
        if (service != null && parameter != null && parameter instanceof IElementParameter) {
          IElementParameter elementParameter=node.getElementParameter(((IElementParameter)parameter).getName());
          if (service.isSinglePatternNode(node)) {
            if (elementParameter != null && !elementParameter.getValue().equals(((IElementParameter)parameter).getValue())) {
              elementParameter.setValue(((IElementParameter)parameter).getValue());
            }
          }
 else           if (service.isMultiPatternNode(node)) {
            List<Map<String,Object>> newParamValues=(List<Map<String,Object>>)((IElementParameter)parameter).getValue();
            List<Map<String,Object>> oldParamValues=(List<Map<String,Object>>)((IElementParameter)elementParameter).getValue();
            oldParamValues.clear();
            oldParamValues.addAll(newParamValues);
          }
          update=true;
        }
      }
    }
    if (!update) {
      String propertyName=parentParamName + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName();
      if (this.result.getParameter() instanceof IElementParameter) {
        IElementParameter parentParam=((IElementParameter)this.result.getParameter()).getParentParameter();
        if (parentParam != null) {
          parentParamName=parentParam.getName();
          propertyName=parentParam.getName() + ""String_Node_Str"" + parentParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getName();
        }
      }
      node.setPropertyValue(propertyName,EmfComponent.BUILTIN);
      for (      IElementParameter param : node.getElementParameters()) {
        if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(parentParamName)) {
          continue;
        }
        if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
          continue;
        }
        if (param.isShow(node.getElementParameters())) {
          if (param.getName().equals(EParameterName.PROPERTY_TYPE.getName()) || param.getFieldType() == EParameterFieldType.MEMO_SQL) {
            continue;
          }
          param.setRepositoryValueUsed(false);
          param.setReadOnly(false);
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void updateProperty(){
  Object updateObject=result.getUpdateObject();
  if (updateObject == null) {
    return;
  }
  if (updateObject instanceof Node) {
    Node node=(Node)updateObject;
    boolean update=false;
    boolean isXsdPath=false;
    Object parameter=result.getParameter();
    IElementParameter curPropertyParam=null;
    String parentParamName=""String_Node_Str"";
    ConnectionItem connectionItem=null;
    if (parameter instanceof ConnectionItem) {
      if (parameter instanceof XmlFileConnectionItem) {
        String filePath=((XmlFileConnection)((XmlFileConnectionItem)parameter).getConnection()).getXmlFilePath();
        if (filePath != null) {
          if (XmlUtil.isXSDFile(filePath)) {
            isXsdPath=true;
          }
        }
      }
      connectionItem=(ConnectionItem)result.getParameter();
      for (      IElementParameter param : node.getElementParameters()) {
        if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE && param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName()).getValue().equals(connectionItem.getProperty().getId())) {
          curPropertyParam=param;
          parentParamName=curPropertyParam.getName();
          if (connectionItem != null) {
            ConnectionContextHelper.addContextForNodeParameter(node,connectionItem,false);
          }
          break;
        }
      }
    }
    if (result.getResultType() == EUpdateResult.UPDATE) {
      if (result.isChecked() && connectionItem != null) {
        List<? extends IElementParameter> elemParameters=new ArrayList<>(node.getElementParameters());
        for (        IElementParameter param : elemParameters) {
          String repositoryValue=param.getRepositoryValue();
          if (param.getRepositoryValue() == null || (curPropertyParam != null && param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName()))) {
            continue;
          }
          if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
            continue;
          }
          if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || node.getComponentProperties() != null || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
            if (param.getName().equals(EParameterName.PROPERTY_TYPE.getName()) || param.getFieldType() == EParameterFieldType.MEMO_SQL) {
              continue;
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) {
              continue;
            }
            IMetadataTable table=null;
            if (!node.getMetadataList().isEmpty()) {
              table=node.getMetadataList().get(0);
            }
            Object objectValue=RepositoryToComponentProperty.getValue(connectionItem.getConnection(),repositoryValue,table);
            if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
                  if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
                    if (propertyValue.contains(""String_Node_Str"")) {
                      propertyValue=propertyValue.split(""String_Node_Str"")[0];
                    }
                  }
                  IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
                  if (lastVersion != null) {
                    Item item=lastVersion.getProperty().getItem();
                    if (item != null) {
                      Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                      if (objectValueFromESB != null) {
                        objectValue=objectValueFromESB;
                      }
                    }
                  }
                }
              }
            }
            if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName())) {
              String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
              Item item=null;
              IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
              if (lastVersion != null) {
                item=lastVersion.getProperty().getItem();
              }
              if (item != null && PluginChecker.isCDCPluginLoaded()) {
                ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                if (service != null) {
                  try {
                    List<IRepositoryViewObject> all;
                    all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                    for (                    IRepositoryViewObject obj : all) {
                      Item tempItem=obj.getProperty().getItem();
                      if (tempItem instanceof DatabaseConnectionItem) {
                        String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                        if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                          objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                        }
                      }
                    }
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IJsonFileService.class)) {
              IJsonFileService jsonService=(IJsonFileService)GlobalServiceRegister.getDefault().getService(IJsonFileService.class);
              boolean paramChanged=jsonService.changeFilePathFromRepository(connectionItem.getConnection(),param,node,objectValue);
              if (paramChanged) {
                continue;
              }
            }
            if (objectValue != null) {
              if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && repositoryValue.equals(UpdatesConstants.TYPE)) {
                boolean found=false;
                String[] items=param.getListRepositoryItems();
                for (int i=0; (i < items.length) && (!found); i++) {
                  if (objectValue.equals(items[i])) {
                    found=true;
                    node.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
                  }
                }
              }
 else {
                if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                  String name=param.getName();
                  if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") && objectValue instanceof List) {
                    param.setValue(objectValue);
                  }
 else                   if (param.getName().equals(""String_Node_Str"") && objectValue instanceof List) {
                    List<Map<String,Object>> paramMaps=(List<Map<String,Object>>)param.getValue();
                    if (paramMaps == null) {
                      paramMaps=new ArrayList<Map<String,Object>>();
                      node.setPropertyValue(param.getName(),paramMaps);
                    }
 else {
                      List<Map<String,Object>> objectValueList=(List<Map<String,Object>>)objectValue;
                      if (paramMaps.size() < objectValueList.size()) {
                        paramMaps.clear();
                        for (int i=0; i < objectValueList.size(); i++) {
                          Map<String,Object> map=objectValueList.get(i);
                          paramMaps.add(map);
                        }
                      }
 else {
                        String value=null;
                        List<String> repNames=new ArrayList<String>();
                        for (int i=0; i < objectValueList.size(); i++) {
                          repNames.add(objectValueList.get(i).get(""String_Node_Str"").toString());
                        }
                        for (int j=0; j < paramMaps.size(); j++) {
                          Map<String,Object> map=paramMaps.get(j);
                          value=map.get(""String_Node_Str"").toString();
                          if (!repNames.contains(value)) {
                            paramMaps.remove(j);
                          }
                        }
                      }
                    }
                  }
 else                   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"") && objectValue instanceof List)) {
                    List<HashMap<String,Object>> oldValue=(List<HashMap<String,Object>>)param.getValue();
                    for (                    HashMap<String,Object> map : oldValue) {
                      if (map.get(""String_Node_Str"") != null && !map.get(""String_Node_Str"").equals(""String_Node_Str"") && Boolean.valueOf(String.valueOf(map.get(""String_Node_Str"")))) {
                        ((List<HashMap<String,Object>>)objectValue).add(map);
                      }
                    }
                    param.setValue(objectValue);
                  }
 else                   if (param.getName().equals(""String_Node_Str"") && objectValue instanceof List) {
                    param.setValue(objectValue);
                  }
                }
 else {
                  node.setPropertyValue(param.getName(),objectValue);
                }
              }
            }
 else             if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
              RepositoryToComponentProperty.getTableXMLMappingValue(connectionItem.getConnection(),(List<Map<String,Object>>)param.getValue(),node);
            }
 else             if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
              objectValue=RepositoryToComponentProperty.getValue(connectionItem.getConnection(),""String_Node_Str"",node.getMetadataList().get(0));
              List<Map<String,Object>> paramMaps=(List<Map<String,Object>>)param.getValue();
              if (paramMaps == null) {
                paramMaps=new ArrayList<Map<String,Object>>();
              }
 else {
                paramMaps.clear();
              }
              if (objectValue != null) {
                List<String> objectValueList=(List<String>)objectValue;
                for (int i=0; i < objectValueList.size(); i++) {
                  Map<String,Object> map=new HashedMap();
                  map.put(""String_Node_Str"",TalendTextUtils.addQuotes(objectValueList.get(i)));
                  paramMaps.add(map);
                }
              }
            }
 else             if (node.getComponentProperties() != null && objectValue == null) {
              node.setPropertyValue(param.getName(),objectValue);
            }
            if (!(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue()))) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
              update=true;
            }
          }
        }
      }
 else {
        ITDQPatternService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
          service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
        }
        if (service != null && (service.isSinglePatternNode(node) || service.isMultiPatternNode(node)) && parameter != null && parameter instanceof IElementParameter) {
          IElementParameter elementParameter=node.getElementParameter(((IElementParameter)parameter).getName());
          if (elementParameter != null && !elementParameter.getValue().equals(((IElementParameter)parameter).getValue())) {
            elementParameter.setValue(((IElementParameter)parameter).getValue());
          }
          update=true;
          Object regexValue=null;
          Object parameterValue=((IElementParameter)parameter).getValue();
          if (""String_Node_Str"".equals(((IElementParameter)parameter).getName())) {
            regexValue=parameterValue;
          }
 else           if (""String_Node_Str"".equals(((IElementParameter)parameter).getName())) {
            List<Map<String,String>> multiPatternList=((List<Map<String,String>>)parameterValue);
            for (            Map<String,String> patternMap : multiPatternList) {
              regexValue=patternMap.get(""String_Node_Str"");
              if (regexValue == null) {
                patternMap.put(""String_Node_Str"",EmfComponent.BUILTIN);
              }
            }
          }
          if (regexValue == null || regexValue.toString().isEmpty()) {
            update=false;
          }
        }
      }
    }
    if (!update) {
      String propertyName=parentParamName + ""String_Node_Str"" + EParameterName.PROPERTY_TYPE.getName();
      if (this.result.getParameter() instanceof IElementParameter) {
        IElementParameter parentParam=((IElementParameter)this.result.getParameter()).getParentParameter();
        if (parentParam != null) {
          parentParamName=parentParam.getName();
          propertyName=parentParam.getName() + ""String_Node_Str"" + parentParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getName();
        }
      }
      node.setPropertyValue(propertyName,EmfComponent.BUILTIN);
      for (      IElementParameter param : node.getElementParameters()) {
        if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(parentParamName)) {
          continue;
        }
        if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
          continue;
        }
        if (param.isShow(node.getElementParameters())) {
          if (param.getName().equals(EParameterName.PROPERTY_TYPE.getName()) || param.getFieldType() == EParameterFieldType.MEMO_SQL) {
            continue;
          }
          param.setRepositoryValueUsed(false);
          param.setReadOnly(false);
        }
      }
    }
  }
}",0.95603195193555
117975,"/** 
 * DOC ycbai Comment method ""loadParametersFromForm"". <p> Get element parameters of <code>element</code> from <code>form</code>.
 * @param node optional, used if there is a component setting up the properties
 * @param element
 * @param category
 * @param form
 * @return parameters list
 */
private static List<ElementParameter> getParametersFromForm(IElement element,boolean isInitializing,EComponentCategory category,ComponentProperties rootProperty,Properties compProperties,String parentPropertiesPath,Form form,Widget parentWidget,AtomicInteger lastRowNum){
  List<ElementParameter> elementParameters=new ArrayList<>();
  List<String> parameterNames=new ArrayList<>();
  EComponentCategory compCategory=category;
  if (compCategory == null) {
    compCategory=EComponentCategory.BASIC;
  }
  AtomicInteger lastRN=lastRowNum;
  if (lastRN == null) {
    lastRN=new AtomicInteger();
  }
  if (form == null) {
    return elementParameters;
  }
  Properties componentProperties=compProperties;
  if (componentProperties == null) {
    componentProperties=form.getProperties();
  }
  if (element instanceof INode) {
    INode node=(INode)element;
    if (node.getComponentProperties() == null) {
      node.setComponentProperties(rootProperty);
    }
  }
  Collection<Widget> formWidgets=form.getWidgets();
  for (  Widget widget : formWidgets) {
    NamedThing widgetProperty=widget.getContent();
    String propertiesPath=getPropertiesPath(parentPropertiesPath,null);
    if (widgetProperty instanceof Form) {
      Form subForm=(Form)widgetProperty;
      Properties subProperties=subForm.getProperties();
      if (!isSameComponentProperties(componentProperties,widgetProperty)) {
        propertiesPath=getPropertiesPath(parentPropertiesPath,subProperties.getName());
      }
      elementParameters.addAll(getParametersFromForm(element,isInitializing,compCategory,rootProperty,subProperties,propertiesPath,subForm,widget,lastRN));
      continue;
    }
    GenericElementParameter param=new GenericElementParameter(element,rootProperty,form,widget,getComponentService());
    String parameterName=propertiesPath.concat(param.getName());
    param.setName(parameterName);
    param.setCategory(compCategory);
    param.setShow(parentWidget == null ? !widget.isHidden() : !parentWidget.isHidden() && !widget.isHidden());
    int rowNum=0;
    if (widget.getOrder() != 1) {
      rowNum=lastRN.get();
    }
 else {
      rowNum=widget.getRow();
      if (parentWidget != null) {
        rowNum+=parentWidget.getRow();
      }
      rowNum=rowNum + lastRN.get();
    }
    param.setNumRow(rowNum);
    lastRN.set(rowNum);
    EParameterFieldType fieldType=getFieldType(widget,widgetProperty);
    param.setFieldType(fieldType != null ? fieldType : EParameterFieldType.TEXT);
    if (widgetProperty instanceof SchemaProperty) {
      boolean found=false;
      param.setContext(EConnectionType.FLOW_MAIN.getName());
      for (      Connector connector : rootProperty.getPossibleConnectors(true)) {
        if (!(((SchemaProperty)widgetProperty).getValue() instanceof Schema)) {
          continue;
        }
        if (connector instanceof PropertyPathConnector) {
          String linkedSchema=((PropertyPathConnector)connector).getPropertyPath() + ""String_Node_Str"";
          if (parameterName.equals(linkedSchema)) {
            found=true;
            param.setContext(connector.getName());
            IElementParameterDefaultValue defaultValue=new ElementParameterDefaultValue();
            Schema schema=((SchemaProperty)widgetProperty).getValue();
            defaultValue.setDefaultValue(new Schema.Parser().parse(schema.toString()));
            param.getDefaultValues().add(defaultValue);
          }
        }
      }
      if (!found) {
        for (        Connector connector : rootProperty.getPossibleConnectors(false)) {
          if (!(((SchemaProperty)widgetProperty).getValue() instanceof Schema)) {
            continue;
          }
          if (connector instanceof PropertyPathConnector) {
            String linkedSchema=((PropertyPathConnector)connector).getPropertyPath() + ""String_Node_Str"";
            if (parameterName.equals(linkedSchema)) {
              if (GenericNodeConnector.INPUT_CONNECTOR.equals(connector.getName())) {
                param.setContext(EConnectionType.FLOW_MAIN.getName());
              }
 else {
                param.setContext(connector.getName());
              }
              IElementParameterDefaultValue defaultValue=new ElementParameterDefaultValue();
              Schema schema=((SchemaProperty)widgetProperty).getValue();
              defaultValue.setDefaultValue(new Schema.Parser().parse(schema.toString()));
              param.getDefaultValues().add(defaultValue);
            }
          }
        }
      }
    }
    if (widgetProperty instanceof PresentationItem) {
      param.setValue(widgetProperty.getDisplayName());
    }
 else     if (widgetProperty instanceof Property) {
      Property property=(Property)widgetProperty;
      param.setRequired(property.isRequired());
      param.setValue(getParameterValue(element,property,fieldType,isInitializing));
      boolean isNameProperty=IGenericConstants.NAME_PROPERTY.equals(param.getParameterName());
      if (EParameterFieldType.NAME_SELECTION_AREA.equals(fieldType) || EParameterFieldType.JSON_TABLE.equals(fieldType) || EParameterFieldType.CLOSED_LIST.equals(fieldType)|| EParameterFieldType.CHECK.equals(fieldType)|| isNameProperty) {
        param.setSupportContext(false);
      }
 else {
        param.setSupportContext(isSupportContext(property));
      }
      property.setTaggedValue(IComponentConstants.SUPPORT_CONTEXT,param.isSupportContext());
      Object cmTV=property.getTaggedValue(IGenericConstants.IS_CONTEXT_MODE);
      param.setReadOnly(Boolean.valueOf(String.valueOf(cmTV)));
      boolean isDynamic=Boolean.valueOf(String.valueOf(property.getTaggedValue(IGenericConstants.IS_DYNAMIC)));
      param.setContextMode(isDynamic);
      List<?> values=property.getPossibleValues();
      if (values != null || EParameterFieldType.CLOSED_LIST.equals(fieldType)) {
        if (values == null) {
          values=Collections.emptyList();
        }
        param.setPossibleValues(values);
        List<String> possVals=new ArrayList<>();
        List<String> possValsDisplay=new ArrayList<>();
        for (        Object obj : values) {
          String value=null;
          String valueDisplay=null;
          if (obj instanceof NamedThing) {
            NamedThing nal=(NamedThing)obj;
            value=nal.getName();
            valueDisplay=nal.getDisplayName();
          }
 else {
            value=String.valueOf(obj);
            valueDisplay=String.valueOf(obj);
          }
          String pvDisplayName=property.getPossibleValuesDisplayName(obj);
          if (StringUtils.isNotBlank(pvDisplayName) && !""String_Node_Str"".equals(pvDisplayName)) {
            valueDisplay=pvDisplayName;
          }
          possVals.add(value);
          possValsDisplay.add(valueDisplay);
        }
        param.setListItemsDisplayName(possValsDisplay.toArray(new String[0]));
        param.setListItemsDisplayCodeName(possValsDisplay.toArray(new String[0]));
        param.setListItemsValue(possVals.toArray(new String[0]));
      }
    }
 else     if (fieldType != null && fieldType.equals(EParameterFieldType.TABLE) && widgetProperty instanceof Properties) {
      Properties table=(Properties)widgetProperty;
      Form mainForm=table.getForm(Form.MAIN);
      param.setDisplayName(mainForm.getTitle());
      List<ElementParameter> parameters=getParametersFromForm(new FakeElement(""String_Node_Str""),mainForm);
      param.setSupportContext(false);
      List<String> codeNames=new ArrayList<>();
      List<String> possValsDisplay=new ArrayList<>();
      for (      ElementParameter curParam : parameters) {
        curParam.setFilter(null);
        curParam.setContext(null);
        curParam.setShowIf(null);
        curParam.setNotShowIf(null);
        curParam.setReadOnlyIf(null);
        curParam.setNotReadOnlyIf(null);
        curParam.setNoContextAssist(false);
        curParam.setRaw(false);
        curParam.setReadOnly(false);
        fillDefaultValsForListType(curParam);
        codeNames.add(curParam.getName());
        possValsDisplay.add(curParam.getDisplayName());
      }
      param.setListItemsDisplayName(possValsDisplay.toArray(new String[0]));
      param.setListItemsDisplayCodeName(codeNames.toArray(new String[0]));
      param.setListItemsValue(parameters.toArray(new ElementParameter[0]));
      String[] listItemsShowIf=new String[parameters.size()];
      String[] listItemsNotShowIf=new String[parameters.size()];
      param.setListItemsShowIf(listItemsShowIf);
      param.setListItemsNotShowIf(listItemsNotShowIf);
      param.setValue(GenericTableUtils.getTableValues(table,param));
      param.setBasedOnSchema(Boolean.valueOf(String.valueOf(widget.getConfigurationValue(Widget.HIDE_TOOLBAR_WIDGET_CONF))));
    }
    if (!param.isReadOnly()) {
      param.setReadOnly(widget.isReadonly() || element.isReadOnly());
    }
    if (EParameterFieldType.COMPONENT_REFERENCE.equals(fieldType) && param.getNumRow() == 2 && EComponentCategory.BASIC.equals(compCategory)) {
      param.setNumRow(1);
    }
    param.setSerialized(true);
    param.setDynamicSettings(true);
    if (!parameterNames.contains(parameterName)) {
      elementParameters.add(param);
      parameterNames.add(parameterName);
    }
  }
  return elementParameters;
}","/** 
 * DOC ycbai Comment method ""loadParametersFromForm"". <p> Get element parameters of <code>element</code> from <code>form</code>.
 * @param node optional, used if there is a component setting up the properties
 * @param element
 * @param category
 * @param form
 * @return parameters list
 */
private static List<ElementParameter> getParametersFromForm(IElement element,boolean isInitializing,EComponentCategory category,ComponentProperties rootProperty,Properties compProperties,String parentPropertiesPath,Form form,Widget parentWidget,AtomicInteger lastRowNum){
  List<ElementParameter> elementParameters=new ArrayList<>();
  List<String> parameterNames=new ArrayList<>();
  EComponentCategory compCategory=category;
  if (compCategory == null) {
    compCategory=EComponentCategory.BASIC;
  }
  AtomicInteger lastRN=lastRowNum;
  if (lastRN == null) {
    lastRN=new AtomicInteger();
  }
  if (form == null) {
    return elementParameters;
  }
  Properties componentProperties=compProperties;
  if (componentProperties == null) {
    componentProperties=form.getProperties();
  }
  if (element instanceof INode) {
    INode node=(INode)element;
    if (node.getComponentProperties() == null) {
      node.setComponentProperties(rootProperty);
    }
  }
  Collection<Widget> formWidgets=form.getWidgets();
  for (  Widget widget : formWidgets) {
    NamedThing widgetProperty=widget.getContent();
    String propertiesPath=getPropertiesPath(parentPropertiesPath,null);
    if (widgetProperty instanceof Form) {
      Form subForm=(Form)widgetProperty;
      Properties subProperties=subForm.getProperties();
      if (!isSameComponentProperties(componentProperties,widgetProperty)) {
        propertiesPath=getPropertiesPath(parentPropertiesPath,subProperties.getName());
      }
      elementParameters.addAll(getParametersFromForm(element,isInitializing,compCategory,rootProperty,subProperties,propertiesPath,subForm,widget,lastRN));
      continue;
    }
    GenericElementParameter param=new GenericElementParameter(element,rootProperty,form,widget,getComponentService());
    String parameterName=propertiesPath.concat(param.getName());
    param.setName(parameterName);
    param.setCategory(compCategory);
    param.setShow(parentWidget == null ? !widget.isHidden() : !parentWidget.isHidden() && !widget.isHidden());
    int rowNum=0;
    if (widget.getOrder() != 1) {
      rowNum=lastRN.get();
    }
 else {
      rowNum=widget.getRow();
      if (parentWidget != null) {
        rowNum+=parentWidget.getRow();
      }
      rowNum=rowNum + lastRN.get();
    }
    param.setNumRow(rowNum);
    lastRN.set(rowNum);
    EParameterFieldType fieldType=getFieldType(widget,widgetProperty);
    param.setFieldType(fieldType != null ? fieldType : EParameterFieldType.TEXT);
    if (widgetProperty instanceof SchemaProperty) {
      boolean found=false;
      param.setContext(EConnectionType.FLOW_MAIN.getName());
      for (      Connector connector : rootProperty.getPossibleConnectors(true)) {
        if (!(((SchemaProperty)widgetProperty).getValue() instanceof Schema)) {
          continue;
        }
        if (connector instanceof PropertyPathConnector) {
          String linkedSchema=((PropertyPathConnector)connector).getPropertyPath() + ""String_Node_Str"";
          if (parameterName.equals(linkedSchema)) {
            found=true;
            param.setContext(connector.getName());
            IElementParameterDefaultValue defaultValue=new ElementParameterDefaultValue();
            Schema schema=((SchemaProperty)widgetProperty).getValue();
            defaultValue.setDefaultValue(new Schema.Parser().parse(schema.toString()));
            param.getDefaultValues().add(defaultValue);
          }
        }
      }
      if (!found) {
        for (        Connector connector : rootProperty.getPossibleConnectors(false)) {
          if (!(((SchemaProperty)widgetProperty).getValue() instanceof Schema)) {
            continue;
          }
          if (connector instanceof PropertyPathConnector) {
            String linkedSchema=((PropertyPathConnector)connector).getPropertyPath() + ""String_Node_Str"";
            if (parameterName.equals(linkedSchema)) {
              if (GenericNodeConnector.INPUT_CONNECTOR.equals(connector.getName())) {
                param.setContext(EConnectionType.FLOW_MAIN.getName());
              }
 else {
                param.setContext(connector.getName());
              }
              IElementParameterDefaultValue defaultValue=new ElementParameterDefaultValue();
              Schema schema=((SchemaProperty)widgetProperty).getValue();
              defaultValue.setDefaultValue(new Schema.Parser().parse(schema.toString()));
              param.getDefaultValues().add(defaultValue);
            }
          }
        }
      }
    }
    if (widgetProperty instanceof PresentationItem) {
      param.setValue(widgetProperty.getDisplayName());
    }
 else     if (widgetProperty instanceof Property) {
      Property property=(Property)widgetProperty;
      param.setRequired(property.isRequired());
      param.setValue(getParameterValue(element,property,fieldType));
      boolean isNameProperty=IGenericConstants.NAME_PROPERTY.equals(param.getParameterName());
      if (EParameterFieldType.NAME_SELECTION_AREA.equals(fieldType) || EParameterFieldType.JSON_TABLE.equals(fieldType) || EParameterFieldType.CLOSED_LIST.equals(fieldType)|| EParameterFieldType.CHECK.equals(fieldType)|| isNameProperty) {
        param.setSupportContext(false);
      }
 else {
        param.setSupportContext(isSupportContext(property));
      }
      property.setTaggedValue(IComponentConstants.SUPPORT_CONTEXT,param.isSupportContext());
      Object cmTV=property.getTaggedValue(IGenericConstants.IS_CONTEXT_MODE);
      param.setReadOnly(Boolean.valueOf(String.valueOf(cmTV)));
      boolean isDynamic=Boolean.valueOf(String.valueOf(property.getTaggedValue(IGenericConstants.IS_DYNAMIC)));
      param.setContextMode(isDynamic);
      List<?> values=property.getPossibleValues();
      if (values != null || EParameterFieldType.CLOSED_LIST.equals(fieldType)) {
        if (values == null) {
          values=Collections.emptyList();
        }
        param.setPossibleValues(values);
        List<String> possVals=new ArrayList<>();
        List<String> possValsDisplay=new ArrayList<>();
        for (        Object obj : values) {
          String value=null;
          String valueDisplay=null;
          if (obj instanceof NamedThing) {
            NamedThing nal=(NamedThing)obj;
            value=nal.getName();
            valueDisplay=nal.getDisplayName();
          }
 else {
            value=String.valueOf(obj);
            valueDisplay=String.valueOf(obj);
          }
          String pvDisplayName=property.getPossibleValuesDisplayName(obj);
          if (StringUtils.isNotBlank(pvDisplayName) && !""String_Node_Str"".equals(pvDisplayName)) {
            valueDisplay=pvDisplayName;
          }
          possVals.add(value);
          possValsDisplay.add(valueDisplay);
        }
        param.setListItemsDisplayName(possValsDisplay.toArray(new String[0]));
        param.setListItemsDisplayCodeName(possValsDisplay.toArray(new String[0]));
        param.setListItemsValue(possVals.toArray(new String[0]));
      }
    }
 else     if (fieldType != null && fieldType.equals(EParameterFieldType.TABLE) && widgetProperty instanceof Properties) {
      Properties table=(Properties)widgetProperty;
      Form mainForm=table.getForm(Form.MAIN);
      param.setDisplayName(mainForm.getTitle());
      List<ElementParameter> parameters=getParametersFromForm(new FakeElement(""String_Node_Str""),mainForm);
      param.setSupportContext(false);
      List<String> codeNames=new ArrayList<>();
      List<String> possValsDisplay=new ArrayList<>();
      for (      ElementParameter curParam : parameters) {
        curParam.setFilter(null);
        curParam.setContext(null);
        curParam.setShowIf(null);
        curParam.setNotShowIf(null);
        curParam.setReadOnlyIf(null);
        curParam.setNotReadOnlyIf(null);
        curParam.setNoContextAssist(false);
        curParam.setRaw(false);
        curParam.setReadOnly(false);
        fillDefaultValsForListType(curParam);
        codeNames.add(curParam.getName());
        possValsDisplay.add(curParam.getDisplayName());
      }
      param.setListItemsDisplayName(possValsDisplay.toArray(new String[0]));
      param.setListItemsDisplayCodeName(codeNames.toArray(new String[0]));
      param.setListItemsValue(parameters.toArray(new ElementParameter[0]));
      String[] listItemsShowIf=new String[parameters.size()];
      String[] listItemsNotShowIf=new String[parameters.size()];
      param.setListItemsShowIf(listItemsShowIf);
      param.setListItemsNotShowIf(listItemsNotShowIf);
      param.setValue(GenericTableUtils.getTableValues(table,param));
      param.setBasedOnSchema(Boolean.valueOf(String.valueOf(widget.getConfigurationValue(Widget.HIDE_TOOLBAR_WIDGET_CONF))));
    }
    if (!param.isReadOnly()) {
      param.setReadOnly(widget.isReadonly() || element.isReadOnly());
    }
    if (EParameterFieldType.COMPONENT_REFERENCE.equals(fieldType) && param.getNumRow() == 2 && EComponentCategory.BASIC.equals(compCategory)) {
      param.setNumRow(1);
    }
    param.setSerialized(true);
    param.setDynamicSettings(true);
    if (!parameterNames.contains(parameterName)) {
      elementParameters.add(param);
      parameterNames.add(parameterName);
    }
  }
  return elementParameters;
}",0.99921313539317
117976,"public static Object getParameterValue(IElement element,Property property,EParameterFieldType fieldType,boolean isInitializing){
  Object paramValue=property.getStoredValue();
  if (paramValue instanceof List) {
    return null;
  }
  if (fieldType == EParameterFieldType.CLOSED_LIST) {
    if (paramValue == null) {
      List<?> possibleValues=property.getPossibleValues();
      if (possibleValues != null && possibleValues.size() > 0) {
        paramValue=possibleValues.get(0);
        property.setValue(paramValue);
      }
    }
  }
 else   if (GenericTypeUtils.isStringType(property)) {
    String value=(String)paramValue;
    if ((isInitializing || StringUtils.isEmpty(value)) && !(element instanceof FakeElement || ContextParameterUtils.isContainContextParam(value))) {
      if (value == null) {
        value=StringUtils.EMPTY;
      }
      paramValue=TalendQuoteUtils.addPairQuotesIfNotExist(unescapeForJava(value));
      property.setValue(paramValue);
    }
  }
 else   if (GenericTypeUtils.isBooleanType(property)) {
    if (paramValue == null) {
      paramValue=Boolean.FALSE;
      property.setValue(paramValue);
    }
  }
  return paramValue;
}","public static Object getParameterValue(IElement element,Property property,EParameterFieldType fieldType){
  Object paramValue=property.getStoredValue();
  if (paramValue instanceof List) {
    return null;
  }
  if (fieldType == EParameterFieldType.CLOSED_LIST) {
    if (paramValue == null) {
      List<?> possibleValues=property.getPossibleValues();
      if (possibleValues != null && possibleValues.size() > 0) {
        paramValue=possibleValues.get(0);
        property.setValue(paramValue);
      }
    }
  }
 else   if (GenericTypeUtils.isStringType(property)) {
    String value=(String)paramValue;
    if (!(element instanceof FakeElement || ContextParameterUtils.isContainContextParam(value) || isPropertyChangedByUser(property))) {
      if (value == null) {
        value=StringUtils.EMPTY;
      }
      paramValue=TalendQuoteUtils.addPairQuotesIfNotExist(unescapeForJava(value));
      property.setValue(paramValue);
    }
  }
 else   if (GenericTypeUtils.isBooleanType(property)) {
    if (paramValue == null) {
      paramValue=Boolean.FALSE;
      property.setValue(paramValue);
    }
  }
  return paramValue;
}",0.8998257839721254
117977,"public void addItemsPropertyParameters(String paramName,ITEMSType items,ElementParameter param,EParameterFieldType type,INode node){
  ITEMType item;
  ElementParameter newParam;
  int nbItems=0;
  if (items != null) {
    if (items.isSetBASEDONSCHEMA()) {
      param.setBasedOnSchema(items.isBASEDONSCHEMA());
    }
    if (items.isSetBASEDONSUBJOBSTARTS()) {
      param.setBasedOnSubjobStarts(items.isBASEDONSUBJOBSTARTS());
    }
    if (items.isSetCOLUMNSBASEDONSCHEMA()) {
      param.setColumnsBasedOnSchema(items.isCOLUMNSBASEDONSCHEMA());
    }
    nbItems=items.getITEM().size();
    if (param.isBasedOnSchema() || param.isBasedOnSubjobStarts()) {
      nbItems++;
    }
  }
  String[] listRepositoryItem=new String[nbItems];
  String[] listItemsDisplayValue=new String[nbItems];
  String[] listItemsDisplayCodeValue=new String[nbItems];
  Object[] listItemsValue=new Object[nbItems];
  String[] listItemsShowIf=new String[nbItems];
  String[] listItemsNotShowIf=new String[nbItems];
  String[] listField=new String[nbItems];
  String[] listReadonlyIf=new String[nbItems];
  String[] listNotReadonlyIf=new String[nbItems];
  for (int k=0; k < nbItems; k++) {
    int currentItem=k;
    if (param.isBasedOnSchema() || param.isBasedOnSubjobStarts()) {
      if (k == 0) {
        if (param.isBasedOnSchema()) {
          listItemsDisplayCodeValue[k]=""String_Node_Str"";
          listItemsDisplayValue[k]=""String_Node_Str"";
          listField[k]=""String_Node_Str"";
          listRepositoryItem[k]=""String_Node_Str"";
          listItemsShowIf[k]=null;
          listItemsNotShowIf[k]=null;
          newParam=new ElementParameter(node);
          newParam.setName(""String_Node_Str"");
          newParam.setDisplayName(""String_Node_Str"");
          newParam.setFieldType(EParameterFieldType.TEXT);
          newParam.setValue(""String_Node_Str"");
          listItemsValue[k]=newParam;
          continue;
        }
 else {
          listItemsDisplayCodeValue[k]=""String_Node_Str"";
          listItemsDisplayValue[k]=""String_Node_Str"";
          listField[k]=""String_Node_Str"";
          listRepositoryItem[k]=""String_Node_Str"";
          listItemsShowIf[k]=null;
          listItemsNotShowIf[k]=null;
          newParam=new ElementParameter(node);
          newParam.setName(""String_Node_Str"");
          newParam.setDisplayName(""String_Node_Str"");
          newParam.setFieldType(EParameterFieldType.TEXT);
          newParam.setValue(""String_Node_Str"");
          listItemsValue[k]=newParam;
          continue;
        }
      }
 else {
        currentItem=k - 1;
      }
    }
    item=(ITEMType)items.getITEM().get(currentItem);
    listItemsDisplayCodeValue[k]=item.getNAME();
    boolean displayAsValue=item.isDISPLAYNAMEASVALUE();
    if (displayAsValue) {
      String value=item.getVALUE();
      if (value != null) {
        listItemsDisplayValue[k]=value;
      }
 else {
        listItemsDisplayValue[k]=getTranslatedValue(paramName + ""String_Node_Str"" + item.getNAME());
      }
    }
 else {
      listItemsDisplayValue[k]=getTranslatedValue(paramName + ""String_Node_Str"" + item.getNAME());
    }
    if (type == EParameterFieldType.ROUTE_COMPONENT_TYPE) {
      listItemsValue[k]=new String[]{item.getNAME(),item.getFILTER()};
    }
 else     if (type != EParameterFieldType.TABLE && type != EParameterFieldType.TREE_TABLE && type != EParameterFieldType.TABLE_BY_ROW) {
      listItemsValue[k]=item.getVALUE();
    }
 else {
      EParameterFieldType currentField=EParameterFieldType.getFieldTypeByName(item.getFIELD());
      newParam=new ElementParameter(node);
      newParam.setName(item.getNAME());
      newParam.setFilter(item.getFILTER());
      newParam.setDisplayName(""String_Node_Str"");
      newParam.setFieldType(currentField);
      newParam.setContext(item.getCONTEXT());
      newParam.setShowIf(item.getSHOWIF());
      newParam.setNotShowIf(item.getNOTSHOWIF());
      newParam.setReadOnlyIf(item.getREADONLYIF());
      newParam.setNotReadOnlyIf(item.getNOTREADONLYIF());
      newParam.setNoContextAssist(item.isNOCONTEXTASSIST());
      newParam.setRaw(item.isRAW());
      if (item.isSetREADONLY()) {
        newParam.setReadOnly(item.isREADONLY());
      }
switch (currentField) {
case CLOSED_LIST:
case OPENED_LIST:
case COLUMN_LIST:
case COMPONENT_LIST:
case CONNECTION_LIST:
case DBTYPE_LIST:
case LOOKUP_COLUMN_LIST:
case PREV_COLUMN_LIST:
case CONTEXT_PARAM_NAME_LIST:
case MODULE_LIST:
        addItemsPropertyParameters(paramName + ""String_Node_Str"" + item.getNAME(),item.getITEMS(),newParam,currentField,node);
      break;
case COLOR:
    newParam.setValue(DEFAULT_COLOR);
  break;
case CHECK:
case RADIO:
if (item.getVALUE() == null || item.getVALUE().equals(""String_Node_Str"")) {
  newParam.setValue(Boolean.FALSE);
}
 else {
  newParam.setValue(new Boolean(item.getVALUE()));
}
break;
case SCHEMA_TYPE:
newParam.setValue(""String_Node_Str"");
break;
case SAP_SCHEMA_TYPE:
newParam.setValue(""String_Node_Str"");
break;
case SCHEMA_XPATH_QUERYS:
newParam.setValue(""String_Node_Str"");
break;
case RULE_TYPE:
newParam.setFieldType(EParameterFieldType.RULE_TYPE);
break;
case MULTI_PATTERN:
newParam.setFieldType(EParameterFieldType.MULTI_PATTERN);
break;
default :
newParam.setFieldType(EParameterFieldType.TEXT);
if (item.getVALUE() == null || item.getVALUE().equals(""String_Node_Str"")) {
newParam.setValue(""String_Node_Str"");
}
 else {
newParam.setValue(item.getVALUE());
}
}
listItemsValue[k]=newParam;
}
listField[k]=item.getFIELD();
listRepositoryItem[k]=item.getREPOSITORYITEM();
listItemsShowIf[k]=item.getSHOWIF();
listItemsNotShowIf[k]=item.getNOTSHOWIF();
listReadonlyIf[k]=item.getREADONLYIF();
listNotReadonlyIf[k]=item.getNOTREADONLYIF();
}
param.setListItemsDisplayName(listItemsDisplayValue);
param.setListItemsDisplayCodeName(listItemsDisplayCodeValue);
param.setListItemsValue(listItemsValue);
param.setListRepositoryItems(listRepositoryItem);
param.setListItemsShowIf(listItemsShowIf);
param.setListItemsNotShowIf(listItemsNotShowIf);
param.setListItemsNotReadOnlyIf(listNotReadonlyIf);
param.setListItemsReadOnlyIf(listReadonlyIf);
if (type != EParameterFieldType.TABLE && type != EParameterFieldType.TREE_TABLE) {
Object defaultValue=""String_Node_Str"";
if (items != null) {
if (items.getDEFAULT() != null) {
boolean found=false;
String temp=items.getDEFAULT();
for (int i=0; i < listItemsDisplayCodeValue.length & !found; i++) {
if (listItemsDisplayCodeValue[i].equals(items.getDEFAULT())) {
found=true;
temp=(String)listItemsValue[i];
}
}
defaultValue=new String(temp);
}
}
param.setDefaultClosedListValue(defaultValue);
param.setValue(defaultValue);
}
}","public void addItemsPropertyParameters(String paramName,ITEMSType items,ElementParameter param,EParameterFieldType type,INode node){
  ITEMType item;
  ElementParameter newParam;
  int nbItems=0;
  if (items != null) {
    if (items.isSetBASEDONSCHEMA()) {
      param.setBasedOnSchema(items.isBASEDONSCHEMA());
    }
    if (items.isSetBASEDONSUBJOBSTARTS()) {
      param.setBasedOnSubjobStarts(items.isBASEDONSUBJOBSTARTS());
    }
    if (items.isSetCOLUMNSBASEDONSCHEMA()) {
      param.setColumnsBasedOnSchema(items.isCOLUMNSBASEDONSCHEMA());
    }
    nbItems=items.getITEM().size();
    if (param.isBasedOnSchema() || param.isBasedOnSubjobStarts()) {
      nbItems++;
    }
  }
  String[] listRepositoryItem=new String[nbItems];
  String[] listItemsDisplayValue=new String[nbItems];
  String[] listItemsDisplayCodeValue=new String[nbItems];
  Object[] listItemsValue=new Object[nbItems];
  String[] listItemsShowIf=new String[nbItems];
  String[] listItemsNotShowIf=new String[nbItems];
  String[] listField=new String[nbItems];
  String[] listReadonlyIf=new String[nbItems];
  String[] listNotReadonlyIf=new String[nbItems];
  for (int k=0; k < nbItems; k++) {
    int currentItem=k;
    if (param.isBasedOnSchema() || param.isBasedOnSubjobStarts()) {
      if (k == 0) {
        if (param.isBasedOnSchema()) {
          listItemsDisplayCodeValue[k]=""String_Node_Str"";
          listItemsDisplayValue[k]=""String_Node_Str"";
          listField[k]=""String_Node_Str"";
          listRepositoryItem[k]=""String_Node_Str"";
          listItemsShowIf[k]=null;
          listItemsNotShowIf[k]=null;
          newParam=new ElementParameter(node);
          newParam.setName(""String_Node_Str"");
          newParam.setDisplayName(""String_Node_Str"");
          newParam.setFieldType(EParameterFieldType.TEXT);
          newParam.setValue(""String_Node_Str"");
          listItemsValue[k]=newParam;
          continue;
        }
 else {
          listItemsDisplayCodeValue[k]=""String_Node_Str"";
          listItemsDisplayValue[k]=""String_Node_Str"";
          listField[k]=""String_Node_Str"";
          listRepositoryItem[k]=""String_Node_Str"";
          listItemsShowIf[k]=null;
          listItemsNotShowIf[k]=null;
          newParam=new ElementParameter(node);
          newParam.setName(""String_Node_Str"");
          newParam.setDisplayName(""String_Node_Str"");
          newParam.setFieldType(EParameterFieldType.TEXT);
          newParam.setValue(""String_Node_Str"");
          listItemsValue[k]=newParam;
          continue;
        }
      }
 else {
        currentItem=k - 1;
      }
    }
    item=(ITEMType)items.getITEM().get(currentItem);
    listItemsDisplayCodeValue[k]=item.getNAME();
    boolean displayAsValue=item.isDISPLAYNAMEASVALUE();
    if (displayAsValue) {
      String value=item.getVALUE();
      if (value != null) {
        listItemsDisplayValue[k]=value;
      }
 else {
        listItemsDisplayValue[k]=getTranslatedValue(paramName + ""String_Node_Str"" + item.getNAME());
      }
    }
 else {
      listItemsDisplayValue[k]=getTranslatedValue(paramName + ""String_Node_Str"" + item.getNAME());
    }
    if (type == EParameterFieldType.ROUTE_COMPONENT_TYPE) {
      listItemsValue[k]=new String[]{item.getNAME(),item.getFILTER()};
    }
 else     if (type != EParameterFieldType.TABLE && type != EParameterFieldType.TREE_TABLE && type != EParameterFieldType.TABLE_BY_ROW) {
      listItemsValue[k]=item.getVALUE();
    }
 else {
      EParameterFieldType currentField=EParameterFieldType.getFieldTypeByName(item.getFIELD());
      newParam=new ElementParameter(node);
      newParam.setName(item.getNAME());
      newParam.setFilter(item.getFILTER());
      newParam.setDisplayName(""String_Node_Str"");
      newParam.setFieldType(currentField);
      newParam.setContext(item.getCONTEXT());
      newParam.setShowIf(item.getSHOWIF());
      newParam.setNotShowIf(item.getNOTSHOWIF());
      newParam.setReadOnlyIf(item.getREADONLYIF());
      newParam.setNotReadOnlyIf(item.getNOTREADONLYIF());
      newParam.setNoContextAssist(item.isNOCONTEXTASSIST());
      newParam.setRaw(item.isRAW());
      if (item.isSetREADONLY()) {
        newParam.setReadOnly(item.isREADONLY());
      }
switch (currentField) {
case CLOSED_LIST:
case OPENED_LIST:
case COLUMN_LIST:
case COMPONENT_LIST:
case CONNECTION_LIST:
case DBTYPE_LIST:
case LOOKUP_COLUMN_LIST:
case PREV_COLUMN_LIST:
case CONTEXT_PARAM_NAME_LIST:
case MODULE_LIST:
        addItemsPropertyParameters(paramName + ""String_Node_Str"" + item.getNAME(),item.getITEMS(),newParam,currentField,node);
      break;
case COLOR:
    newParam.setValue(DEFAULT_COLOR);
  break;
case CHECK:
case RADIO:
if (item.getVALUE() == null || item.getVALUE().equals(""String_Node_Str"")) {
  newParam.setValue(Boolean.FALSE);
}
 else {
  newParam.setValue(new Boolean(item.getVALUE()));
}
break;
case SCHEMA_TYPE:
newParam.setValue(""String_Node_Str"");
break;
case SAP_SCHEMA_TYPE:
newParam.setValue(""String_Node_Str"");
break;
case SCHEMA_XPATH_QUERYS:
newParam.setValue(""String_Node_Str"");
break;
case RULE_TYPE:
newParam.setFieldType(EParameterFieldType.RULE_TYPE);
break;
case MULTI_PATTERN:
newParam.setFieldType(EParameterFieldType.MULTI_PATTERN);
break;
case PATTERN_PROPERTY:
newParam.setFieldType(EParameterFieldType.PATTERN_PROPERTY);
break;
default :
newParam.setFieldType(EParameterFieldType.TEXT);
if (item.getVALUE() == null || item.getVALUE().equals(""String_Node_Str"")) {
newParam.setValue(""String_Node_Str"");
}
 else {
newParam.setValue(item.getVALUE());
}
}
listItemsValue[k]=newParam;
}
listField[k]=item.getFIELD();
listRepositoryItem[k]=item.getREPOSITORYITEM();
listItemsShowIf[k]=item.getSHOWIF();
listItemsNotShowIf[k]=item.getNOTSHOWIF();
listReadonlyIf[k]=item.getREADONLYIF();
listNotReadonlyIf[k]=item.getNOTREADONLYIF();
}
param.setListItemsDisplayName(listItemsDisplayValue);
param.setListItemsDisplayCodeName(listItemsDisplayCodeValue);
param.setListItemsValue(listItemsValue);
param.setListRepositoryItems(listRepositoryItem);
param.setListItemsShowIf(listItemsShowIf);
param.setListItemsNotShowIf(listItemsNotShowIf);
param.setListItemsNotReadOnlyIf(listNotReadonlyIf);
param.setListItemsReadOnlyIf(listReadonlyIf);
if (type != EParameterFieldType.TABLE && type != EParameterFieldType.TREE_TABLE) {
Object defaultValue=""String_Node_Str"";
if (items != null) {
if (items.getDEFAULT() != null) {
boolean found=false;
String temp=items.getDEFAULT();
for (int i=0; i < listItemsDisplayCodeValue.length & !found; i++) {
if (listItemsDisplayCodeValue[i].equals(items.getDEFAULT())) {
found=true;
temp=(String)listItemsValue[i];
}
}
defaultValue=new String(temp);
}
}
param.setDefaultClosedListValue(defaultValue);
param.setValue(defaultValue);
}
}",0.9931789221197812
117978,"@Override protected Object openDialogBox(Control cellEditorWindow){
  ITDQPatternService service=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
    service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
  }
  if (service != null) {
    IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
    if (typeParam == null && node.getIncomingConnections().size() > 0) {
      IConnection iConnection=node.getIncomingConnections().get(0);
      typeParam=iConnection.getElementParameter(""String_Node_Str"");
    }
    String[] patternInfo=service.selectPattern(cellEditorWindow.getShell(),typeParam);
    if (patternInfo != null) {
      int index=0;
      TableViewer tableViewer=getTableViewer();
      if (tableViewer != null) {
        index=getTableViewer().getTable().getSelectionIndex();
      }
      updatePatterInfoOnRow(index,patternInfo);
      IElementParameter property=node.getElementParameter(EParameterName.PROPERTY_TYPE.getName());
      if (property != null) {
        property.setValue(EmfComponent.REPOSITORY);
        IElementParameter repositoryParam=node.getElementParameter(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        if (repositoryParam != null) {
          repositoryParam.setValue(patternInfo[0]);
        }
      }
    }
    return patternInfo[1];
  }
  return null;
}","@Override protected Object openDialogBox(Control cellEditorWindow){
  ITDQPatternService service=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
    service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
  }
  if (service != null) {
    IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
    if (typeParam == null && node.getIncomingConnections().size() > 0) {
      IConnection iConnection=node.getIncomingConnections().get(0);
      typeParam=iConnection.getElementParameter(""String_Node_Str"");
    }
    String[] patternInfo=service.selectPattern(cellEditorWindow.getShell(),typeParam);
    if (patternInfo != null) {
      int index=0;
      TableViewer tableViewer=getTableViewer();
      if (tableViewer != null) {
        index=tableViewer.getTable().getSelectionIndex();
      }
      updatePatterInfoOnRow(index,patternInfo);
      IElementParameter property=node.getElementParameter(EParameterName.PROPERTY_TYPE.getName());
      if (property != null) {
        IElementParameter repositoryParam=node.getElementParameter(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        if (StringUtils.isNotBlank(patternInfo[0])) {
          property.setValue(EmfComponent.REPOSITORY);
          if (repositoryParam != null) {
            repositoryParam.setValue(patternInfo[0]);
          }
        }
      }
    }
    return patternInfo[1];
  }
  return null;
}",0.8942473303479159
117979,"/** 
 * nrousseau Comment method ""checkNodePropertiesFromRepository"".
 * @param node
 * @return true if the data have been modified
 */
@SuppressWarnings(""String_Node_Str"") private List<UpdateResult> checkNodePropertiesFromRepository(final Node node,boolean onlySimpleShow){
  if (node == null) {
    return Collections.emptyList();
  }
  List<UpdateResult> propertiesResults=new ArrayList<UpdateResult>();
  for (  IElementParameter curPropertyParam : node.getElementParametersFromField(EParameterFieldType.PROPERTY_TYPE)) {
    String propertyType=(String)curPropertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getValue();
    if (propertyType != null) {
      if (propertyType.equals(EmfComponent.REPOSITORY)) {
        List<IProcess2> openedProcesses=UpdateManagerUtils.getOpenedProcess();
        IElementParameter repositoryPropertyParam=curPropertyParam.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        String propertyValue=(String)repositoryPropertyParam.getValue();
        if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
          if (propertyValue.contains(""String_Node_Str"")) {
            propertyValue=propertyValue.split(""String_Node_Str"")[0];
          }
        }
        IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
        UpdateCheckResult result=null;
        Connection repositoryConnection=null;
        RulesItem repositoryRulesItem=null;
        LinkRulesItem repositoryLinkRulesItem=null;
        String source=null;
        Item item=null;
        if (lastVersion != null) {
          item=lastVersion.getProperty().getItem();
          if (item != null && item instanceof ConnectionItem) {
            source=UpdateRepositoryUtils.getRepositorySourceName(item);
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
          if (item != null && item instanceof FileItem) {
            if (item instanceof RulesItem) {
              repositoryRulesItem=(RulesItem)item;
            }
          }
          if (item != null && item instanceof LinkRulesItem) {
            repositoryLinkRulesItem=(LinkRulesItem)item;
          }
        }
        if (repositoryConnection != null) {
          boolean sameValues=true;
          boolean isXsdPath=false;
          if (repositoryConnection instanceof XmlFileConnectionImpl) {
            String filePath=((XmlFileConnectionImpl)repositoryConnection).getXmlFilePath();
            if (filePath != null) {
              if (XmlUtil.isXSDFile(filePath)) {
                isXsdPath=true;
              }
            }
          }
          boolean needBuildIn=false;
          if (repositoryConnection instanceof SalesforceSchemaConnection && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName()) {
            IElementParameter param=node.getElementParameter(""String_Node_Str"");
            if (param != null) {
              boolean found=false;
              SalesforceSchemaConnection salesforceConnection=(SalesforceSchemaConnection)repositoryConnection;
              List<SalesforceModuleUnit> units=salesforceConnection.getModules();
              for (              SalesforceModuleUnit unit : units) {
                if (unit.getLabel() != null && unit.getLabel().equals(param.getValue())) {
                  found=true;
                  break;
                }
              }
              if (!found) {
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
                needBuildIn=true;
              }
            }
          }
          for (          IElementParameter param : node.getElementParameters()) {
            if (needBuildIn) {
              break;
            }
            if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.SCHEMA_REFERENCE) {
              continue;
            }
            String repositoryValue=param.getRepositoryValue();
            String relatedComponent=node.getComponent().getName();
            if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
              if ((param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) || (repositoryConnection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue) && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName())) {
                continue;
              }
              IMetadataTable table=null;
              if (!node.getMetadataList().isEmpty()) {
                table=node.getMetadataList().get(0);
              }
              Object objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,repositoryValue,table,relatedComponent);
              if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                    if (objectValueFromESB != null) {
                      objectValue=objectValueFromESB;
                    }
                  }
                }
              }
              if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName()) && item instanceof DatabaseConnectionItem) {
                if (PluginChecker.isCDCPluginLoaded()) {
                  ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                  if (service != null) {
                    try {
                      List<IRepositoryViewObject> all;
                      all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                      for (                      IRepositoryViewObject obj : all) {
                        Item tempItem=obj.getProperty().getItem();
                        if (tempItem instanceof DatabaseConnectionItem) {
                          String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                          if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                            objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                            break;
                          }
                        }
                      }
                    }
 catch (                    PersistenceException e) {
                      ExceptionHandler.process(e);
                    }
                  }
                }
              }
              Object value=param.getValue();
              if (objectValue != null) {
                if ((param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && UpdatesConstants.TYPE.equals(param.getRepositoryValue()))) {
                  boolean found=false;
                  String[] list=param.getListRepositoryItems();
                  for (int i=0; (i < list.length) && (!found); i++) {
                    if (objectValue.equals(list[i])) {
                      found=true;
                    }
                  }
                  if (!found) {
                    sameValues=false;
                  }
                }
 else {
                  if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                    List<Map<String,Object>> oldList=(List<Map<String,Object>>)value;
                    String name=param.getName();
                    if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) && !oldList.isEmpty() && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && objectMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))&& ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null && objectValue instanceof List) {
                      List repList=(List)objectValue;
                      if (oldList.size() == repList.size()) {
                        for (                        Map<String,Object> line : oldList) {
                          final String sheetName=""String_Node_Str"";
                          Object oldValue=line.get(sheetName);
                          if (oldValue instanceof String && repList.get(0) instanceof Map) {
                            boolean found=false;
                            for (                            Map map : (List<Map>)repList) {
                              Object repValue=map.get(sheetName);
                              if (oldValue.equals(repValue)) {
                                found=true;
                                break;
                              }
                            }
                            if (!found) {
                              sameValues=false;
                              break;
                            }
                          }
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
 else                     if ((""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName()) || param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      List<Map<String,Object>> filterBuildInList=collectHadoopPropertiesList(oldList);
                      if (filterBuildInList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < filterBuildInList.size(); i++) {
                          Map<String,Object> oldMap=filterBuildInList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if ((param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof String && objectValue instanceof String) {
                    if (!value.equals(""String_Node_Str"") && !value.equals(objectValue)) {
                      if (repositoryConnection instanceof XmlFileConnection) {
                        if ((((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"") || ((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"")) && repositoryValue.equals(""String_Node_Str"")) {
                        }
 else {
                          sameValues=false;
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
                    if (repositoryValue.equals(""String_Node_Str"")) {
                      IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
                      if (paramEncoding != null) {
                        if (repositoryConnection instanceof FTPConnection) {
                          if (((FTPConnection)repositoryConnection).getEcoding() != null) {
                            paramEncoding.setValue(((FTPConnection)repositoryConnection).getEcoding());
                          }
 else {
                            paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof Boolean && objectValue instanceof Boolean) {
                    sameValues=((Boolean)value).equals(objectValue);
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
                List<Map<String,Object>> newMaps=RepositoryToComponentProperty.getXMLMappingValue(repositoryConnection,node.getMetadataList(),getColumnRenamedMap());
                if ((value instanceof List) && newMaps != null) {
                  List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                  if (oldMaps.size() != newMaps.size()) {
                    sameValues=false;
                    break;
                  }
                  for (int i=0; i < newMaps.size() && sameValues; i++) {
                    Map<String,Object> newmap=newMaps.get(i);
                    Map<String,Object> oldmap=null;
                    if (i < oldMaps.size()) {
                      oldmap=oldMaps.get(i);
                    }
                    if (oldmap != null && sameValues) {
                      Object o=newmap.get(UpdatesConstants.QUERY);
                      if (o != null) {
                        sameValues=newmap.get(UpdatesConstants.QUERY).equals(oldmap.get(UpdatesConstants.QUERY));
                      }
 else {
                        sameValues=oldmap.get(UpdatesConstants.QUERY) == null;
                      }
                    }
                    if (newmap.get(UpdatesConstants.SCHEMA) != null) {
                      if (!newmap.get(UpdatesConstants.SCHEMA).equals(newmap.get(UpdatesConstants.SCHEMA))) {
                        oldmap=null;
                        for (int j=0; j < oldMaps.size(); j++) {
                          Map<String,Object> m=oldMaps.get(j);
                          if (newmap.get(UpdatesConstants.SCHEMA).equals(m.get(UpdatesConstants.SCHEMA))) {
                            oldmap=m;
                          }
                        }
                      }
                      if (oldmap == null) {
                        sameValues=false;
                      }
 else {
                        Object o=newmap.get(UpdatesConstants.MAPPING);
                        if (o != null) {
                          sameValues=o.equals(oldmap.get(UpdatesConstants.MAPPING));
                        }
 else {
                          sameValues=oldmap.get(UpdatesConstants.MAPPING) == null;
                        }
                      }
                    }
                    if (!sameValues) {
                      break;
                    }
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
                objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,param.getName(),node.getMetadataList().get(0));
                if (value == null) {
                  sameValues=false;
                  break;
                }
                if (objectValue == null) {
                  sameValues=false;
                  break;
                }
                List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                List repList=(List)objectValue;
                if (oldMaps.size() == repList.size()) {
                  for (                  Map<String,Object> line : oldMaps) {
                    final String sheetName=""String_Node_Str"";
                    Object oldValue=line.get(sheetName);
                    if (oldValue instanceof String && repList.get(0) instanceof String) {
                      boolean found=false;
                      for (                      String str : (List<String>)repList) {
                        Object repValue=TalendTextUtils.addQuotes(str);
                        if (oldValue.equals(repValue)) {
                          found=true;
                          break;
                        }
                      }
                      if (!found) {
                        sameValues=false;
                        break;
                      }
                    }
                  }
                }
 else {
                  sameValues=false;
                }
              }
            }
            if (!sameValues) {
              break;
            }
          }
          if (onlySimpleShow || !sameValues) {
            result=new UpdateCheckResult(node);
            result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,item,source);
          }
          for (          IElementParameter param : node.getElementParameters()) {
            String repositoryValue=param.getRepositoryValue();
            if (param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (repositoryValue != null && (!param.getName().equals(EParameterName.PROPERTY_TYPE.getName())) && param.getFieldType() != EParameterFieldType.MEMO_SQL && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue())) && !(""String_Node_Str"".equals(node.getComponent().getName()) && param.getName().equals(UpdatesConstants.MAPPING)) && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(repositoryValue)) && param.isShow(node.getElementParameters())) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
            }
          }
          List<UpdateResult> contextResults=checkParameterContextMode(node.getElementParameters(),(ConnectionItem)lastVersion.getProperty().getItem(),null);
          if (contextResults != null) {
            propertiesResults.addAll(contextResults);
          }
        }
 else         if (item != null && ""String_Node_Str"".equalsIgnoreCase(item.getFileExtension())) {
          ITDQPatternService service=null;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
            service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
          }
          if (service != null) {
            if (node.getLabel().startsWith(""String_Node_Str"")) {
              IElementParameter schemasTableParam=node.getElementParameter(""String_Node_Str"");
              if (schemasTableParam != null) {
                List<Map> listValue=(List<Map>)schemasTableParam.getValue();
                for (                Map onePattern : listValue) {
                  if (StringUtils.equals(item.getProperty().getId(),(String)onePattern.get(""String_Node_Str""))) {
                    if (!service.isSameName(item,(String)onePattern.get(""String_Node_Str""))) {
                      String name=getItemNewName(item);
                      onePattern.put(""String_Node_Str"",name);
                      result=createUpdateCheckResult(node,propertiesResults,schemasTableParam);
                    }
                    String regex=service.getRegex(node,item);
                    if (!StringUtils.equals(regex,(String)onePattern.get(""String_Node_Str""))) {
                      onePattern.put(""String_Node_Str"",regex);
                      if (result != null) {
                        propertiesResults.add(result);
                      }
                      result=createUpdateCheckResult(node,propertiesResults,schemasTableParam);
                    }
                  }
                }
              }
            }
 else {
              IElementParameter nameParam=node.getElementParameter(""String_Node_Str"");
              if (!service.isSameName(item,(String)nameParam.getValue())) {
                String name=getItemNewName(item);
                nameParam.setValue(name);
                result=createUpdateCheckResult(node,propertiesResults,nameParam);
              }
              String regex=service.getRegex(node,item);
              IElementParameter reParam=node.getElementParameter(""String_Node_Str"");
              if (!StringUtils.equals(regex,(String)reParam.getValue())) {
                reParam.setValue(regex);
                if (result != null) {
                  propertiesResults.add(result);
                }
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,reParam);
              }
            }
          }
        }
 else {
          result=new UpdateCheckResult(node);
          result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
        }
        if (result != null) {
          if (!openedProcesses.contains(getProcess())) {
            result.setFromItem(true);
          }
          result.setJob(getProcess());
          setConfigrationForReadOnlyJob(result);
          propertiesResults.add(result);
        }
      }
    }
  }
  return propertiesResults;
}","/** 
 * nrousseau Comment method ""checkNodePropertiesFromRepository"".
 * @param node
 * @return true if the data have been modified
 */
@SuppressWarnings(""String_Node_Str"") private List<UpdateResult> checkNodePropertiesFromRepository(final Node node,boolean onlySimpleShow){
  if (node == null) {
    return Collections.emptyList();
  }
  List<UpdateResult> propertiesResults=new ArrayList<UpdateResult>();
  for (  IElementParameter curPropertyParam : node.getElementParametersFromField(EParameterFieldType.PROPERTY_TYPE)) {
    String propertyType=(String)curPropertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).getValue();
    if (propertyType != null) {
      if (propertyType.equals(EmfComponent.REPOSITORY)) {
        List<IProcess2> openedProcesses=UpdateManagerUtils.getOpenedProcess();
        IElementParameter repositoryPropertyParam=curPropertyParam.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        String propertyValue=(String)repositoryPropertyParam.getValue();
        if (node.getComponent().getName().startsWith(""String_Node_Str"")) {
          if (propertyValue.contains(""String_Node_Str"")) {
            propertyValue=propertyValue.split(""String_Node_Str"")[0];
          }
        }
        IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
        UpdateCheckResult result=null;
        Connection repositoryConnection=null;
        RulesItem repositoryRulesItem=null;
        LinkRulesItem repositoryLinkRulesItem=null;
        String source=null;
        Item item=null;
        if (lastVersion != null) {
          item=lastVersion.getProperty().getItem();
          if (item != null && item instanceof ConnectionItem) {
            source=UpdateRepositoryUtils.getRepositorySourceName(item);
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
          if (item != null && item instanceof FileItem) {
            if (item instanceof RulesItem) {
              repositoryRulesItem=(RulesItem)item;
            }
          }
          if (item != null && item instanceof LinkRulesItem) {
            repositoryLinkRulesItem=(LinkRulesItem)item;
          }
        }
        if (repositoryConnection != null) {
          boolean sameValues=true;
          boolean isXsdPath=false;
          if (repositoryConnection instanceof XmlFileConnectionImpl) {
            String filePath=((XmlFileConnectionImpl)repositoryConnection).getXmlFilePath();
            if (filePath != null) {
              if (XmlUtil.isXSDFile(filePath)) {
                isXsdPath=true;
              }
            }
          }
          boolean needBuildIn=false;
          if (repositoryConnection instanceof SalesforceSchemaConnection && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName()) {
            IElementParameter param=node.getElementParameter(""String_Node_Str"");
            if (param != null) {
              boolean found=false;
              SalesforceSchemaConnection salesforceConnection=(SalesforceSchemaConnection)repositoryConnection;
              List<SalesforceModuleUnit> units=salesforceConnection.getModules();
              for (              SalesforceModuleUnit unit : units) {
                if (unit.getLabel() != null && unit.getLabel().equals(param.getValue())) {
                  found=true;
                  break;
                }
              }
              if (!found) {
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
                needBuildIn=true;
              }
            }
          }
          for (          IElementParameter param : node.getElementParameters()) {
            if (needBuildIn) {
              break;
            }
            if (param.getRepositoryValue() == null || param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
              continue;
            }
            if (param.getFieldType() == EParameterFieldType.SCHEMA_REFERENCE) {
              continue;
            }
            String repositoryValue=param.getRepositoryValue();
            String relatedComponent=node.getComponent().getName();
            if ((repositoryValue != null) && (param.isShow(node.getElementParameters()) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")) || (node instanceof INode && ((INode)node).getComponent().getName().equals(""String_Node_Str"")))) {
              if ((param.getFieldType().equals(EParameterFieldType.FILE) && isXsdPath) || (repositoryConnection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue) && !((SalesforceSchemaConnection)repositoryConnection).isUseCustomModuleName())) {
                continue;
              }
              IMetadataTable table=null;
              if (!node.getMetadataList().isEmpty()) {
                table=node.getMetadataList().get(0);
              }
              Object objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,repositoryValue,table,relatedComponent);
              if (objectValue == null || ""String_Node_Str"".equals(objectValue)) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    Object objectValueFromESB=service.getValue(item,repositoryValue,node);
                    if (objectValueFromESB != null) {
                      objectValue=objectValueFromESB;
                    }
                  }
                }
              }
              if (param.getName().equals(EParameterName.CDC_TYPE_MODE.getName()) && item instanceof DatabaseConnectionItem) {
                if (PluginChecker.isCDCPluginLoaded()) {
                  ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
                  if (service != null) {
                    try {
                      List<IRepositoryViewObject> all;
                      all=CorePlugin.getDefault().getProxyRepositoryFactory().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
                      for (                      IRepositoryViewObject obj : all) {
                        Item tempItem=obj.getProperty().getItem();
                        if (tempItem instanceof DatabaseConnectionItem) {
                          String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)tempItem);
                          if (cdcLinkId != null && item.getProperty().getId().equals(cdcLinkId)) {
                            objectValue=RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)tempItem).getConnection(),repositoryValue,node.getMetadataList().get(0));
                            break;
                          }
                        }
                      }
                    }
 catch (                    PersistenceException e) {
                      ExceptionHandler.process(e);
                    }
                  }
                }
              }
              Object value=param.getValue();
              if (objectValue != null) {
                if ((param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && UpdatesConstants.TYPE.equals(param.getRepositoryValue()))) {
                  boolean found=false;
                  String[] list=param.getListRepositoryItems();
                  for (int i=0; (i < list.length) && (!found); i++) {
                    if (objectValue.equals(list[i])) {
                      found=true;
                    }
                  }
                  if (!found) {
                    sameValues=false;
                  }
                }
 else {
                  if (param.getFieldType().equals(EParameterFieldType.TABLE)) {
                    List<Map<String,Object>> oldList=(List<Map<String,Object>>)value;
                    String name=param.getName();
                    if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) && !oldList.isEmpty() && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && objectMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))&& ((oldMap.get(""String_Node_Str"") == null && objectMap.get(""String_Node_Str"") == null) || (oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"") != null && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null && objectValue instanceof List) {
                      List repList=(List)objectValue;
                      if (oldList.size() == repList.size()) {
                        for (                        Map<String,Object> line : oldList) {
                          final String sheetName=""String_Node_Str"";
                          Object oldValue=line.get(sheetName);
                          if (oldValue instanceof String && repList.get(0) instanceof Map) {
                            boolean found=false;
                            for (                            Map map : (List<Map>)repList) {
                              Object repValue=map.get(sheetName);
                              if (oldValue.equals(repValue)) {
                                found=true;
                                break;
                              }
                            }
                            if (!found) {
                              sameValues=false;
                              break;
                            }
                          }
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
 else                     if ((""String_Node_Str"".equals(param.getName()) || ""String_Node_Str"".equals(param.getName()) || param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      List<Map<String,Object>> filterBuildInList=collectHadoopPropertiesList(oldList);
                      if (filterBuildInList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < filterBuildInList.size(); i++) {
                          Map<String,Object> oldMap=filterBuildInList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if ((param.getName().equals(""String_Node_Str"")) && oldList != null && objectValue instanceof List) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str"")) && oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
 else                     if (param.getName().equals(""String_Node_Str"") && oldList != null) {
                      List objectList=(List)objectValue;
                      if (oldList.size() != objectList.size()) {
                        sameValues=false;
                      }
 else {
                        for (int i=0; i < oldList.size(); i++) {
                          Map<String,Object> oldMap=oldList.get(i);
                          Map<String,Object> objectMap=(Map<String,Object>)objectList.get(i);
                          if (oldMap.get(""String_Node_Str"").equals(objectMap.get(""String_Node_Str""))) {
                            sameValues=true;
                          }
 else {
                            sameValues=false;
                            break;
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof String && objectValue instanceof String) {
                    if (!value.equals(""String_Node_Str"") && !value.equals(objectValue)) {
                      if (repositoryConnection instanceof XmlFileConnection) {
                        if ((((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"") || ((XmlFileConnection)repositoryConnection).getXmlFilePath().endsWith(""String_Node_Str"")) && repositoryValue.equals(""String_Node_Str"")) {
                        }
 else {
                          sameValues=false;
                        }
                      }
 else {
                        sameValues=false;
                      }
                    }
                    if (repositoryValue.equals(""String_Node_Str"")) {
                      IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
                      if (paramEncoding != null) {
                        if (repositoryConnection instanceof FTPConnection) {
                          if (((FTPConnection)repositoryConnection).getEcoding() != null) {
                            paramEncoding.setValue(((FTPConnection)repositoryConnection).getEcoding());
                          }
 else {
                            paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                          }
                        }
                      }
                    }
                  }
 else                   if (value instanceof Boolean && objectValue instanceof Boolean) {
                    sameValues=((Boolean)value).equals(objectValue);
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && UpdatesConstants.XML_MAPPING.equals(repositoryValue)) {
                List<Map<String,Object>> newMaps=RepositoryToComponentProperty.getXMLMappingValue(repositoryConnection,node.getMetadataList(),getColumnRenamedMap());
                if ((value instanceof List) && newMaps != null) {
                  List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                  if (oldMaps.size() != newMaps.size()) {
                    sameValues=false;
                    break;
                  }
                  for (int i=0; i < newMaps.size() && sameValues; i++) {
                    Map<String,Object> newmap=newMaps.get(i);
                    Map<String,Object> oldmap=null;
                    if (i < oldMaps.size()) {
                      oldmap=oldMaps.get(i);
                    }
                    if (oldmap != null && sameValues) {
                      Object o=newmap.get(UpdatesConstants.QUERY);
                      if (o != null) {
                        sameValues=newmap.get(UpdatesConstants.QUERY).equals(oldmap.get(UpdatesConstants.QUERY));
                      }
 else {
                        sameValues=oldmap.get(UpdatesConstants.QUERY) == null;
                      }
                    }
                    if (newmap.get(UpdatesConstants.SCHEMA) != null) {
                      if (!newmap.get(UpdatesConstants.SCHEMA).equals(newmap.get(UpdatesConstants.SCHEMA))) {
                        oldmap=null;
                        for (int j=0; j < oldMaps.size(); j++) {
                          Map<String,Object> m=oldMaps.get(j);
                          if (newmap.get(UpdatesConstants.SCHEMA).equals(m.get(UpdatesConstants.SCHEMA))) {
                            oldmap=m;
                          }
                        }
                      }
                      if (oldmap == null) {
                        sameValues=false;
                      }
 else {
                        Object o=newmap.get(UpdatesConstants.MAPPING);
                        if (o != null) {
                          sameValues=o.equals(oldmap.get(UpdatesConstants.MAPPING));
                        }
 else {
                          sameValues=oldmap.get(UpdatesConstants.MAPPING) == null;
                        }
                      }
                    }
                    if (!sameValues) {
                      break;
                    }
                  }
                }
              }
 else               if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getName().equals(""String_Node_Str"")) {
                objectValue=RepositoryToComponentProperty.getValue(repositoryConnection,param.getName(),node.getMetadataList().get(0));
                if (value == null) {
                  sameValues=false;
                  break;
                }
                if (objectValue == null) {
                  sameValues=false;
                  break;
                }
                List<Map<String,Object>> oldMaps=(List<Map<String,Object>>)value;
                List repList=(List)objectValue;
                if (oldMaps.size() == repList.size()) {
                  for (                  Map<String,Object> line : oldMaps) {
                    final String sheetName=""String_Node_Str"";
                    Object oldValue=line.get(sheetName);
                    if (oldValue instanceof String && repList.get(0) instanceof String) {
                      boolean found=false;
                      for (                      String str : (List<String>)repList) {
                        Object repValue=TalendTextUtils.addQuotes(str);
                        if (oldValue.equals(repValue)) {
                          found=true;
                          break;
                        }
                      }
                      if (!found) {
                        sameValues=false;
                        break;
                      }
                    }
                  }
                }
 else {
                  sameValues=false;
                }
              }
            }
            if (!sameValues) {
              break;
            }
          }
          if (onlySimpleShow || !sameValues) {
            result=new UpdateCheckResult(node);
            result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,item,source);
          }
          for (          IElementParameter param : node.getElementParameters()) {
            String repositoryValue=param.getRepositoryValue();
            if (param.getRepositoryProperty() != null && !param.getRepositoryProperty().equals(curPropertyParam.getName())) {
              continue;
            }
            if (repositoryValue != null && (!param.getName().equals(EParameterName.PROPERTY_TYPE.getName())) && param.getFieldType() != EParameterFieldType.MEMO_SQL && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(param.getRepositoryValue())) && !(""String_Node_Str"".equals(node.getComponent().getName()) && param.getName().equals(UpdatesConstants.MAPPING)) && !(""String_Node_Str"".equals(node.getComponent().getName()) && ""String_Node_Str"".equals(repositoryValue)) && param.isShow(node.getElementParameters())) {
              param.setRepositoryValueUsed(true);
              param.setReadOnly(true);
            }
          }
          List<UpdateResult> contextResults=checkParameterContextMode(node.getElementParameters(),(ConnectionItem)lastVersion.getProperty().getItem(),null);
          if (contextResults != null) {
            propertiesResults.addAll(contextResults);
          }
        }
 else         if (item != null && ""String_Node_Str"".equalsIgnoreCase(item.getFileExtension())) {
          ITDQPatternService service=null;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQPatternService.class)) {
            service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
          }
          if (service != null) {
            if (node.getLabel().startsWith(""String_Node_Str"")) {
              IElementParameter schemasTableParam=node.getElementParameter(""String_Node_Str"");
              if (schemasTableParam != null) {
                List<Map> listValue=(List<Map>)schemasTableParam.getValue();
                for (                Map onePattern : listValue) {
                  if (StringUtils.equals(item.getProperty().getId(),(String)onePattern.get(""String_Node_Str""))) {
                    if (!service.isSameName(item,(String)onePattern.get(""String_Node_Str""))) {
                      String name=getItemNewName(item);
                      onePattern.put(""String_Node_Str"",name);
                      result=createUpdateCheckResult(node,propertiesResults,schemasTableParam);
                    }
                    String regex=service.getRegex(node,item);
                    if (!StringUtils.equals(regex,(String)onePattern.get(""String_Node_Str""))) {
                      onePattern.put(""String_Node_Str"",regex);
                      result=new UpdateCheckResult(node);
                      result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,schemasTableParam);
                    }
                  }
                }
              }
            }
 else {
              IElementParameter nameParam=node.getElementParameter(""String_Node_Str"");
              if (!service.isSameName(item,(String)nameParam.getValue())) {
                String name=getItemNewName(item);
                nameParam.setValue(name);
                result=createUpdateCheckResult(node,propertiesResults,nameParam);
              }
              String regex=service.getRegex(node,item);
              IElementParameter reParam=node.getElementParameter(""String_Node_Str"");
              if (!StringUtils.equals(regex,(String)reParam.getValue())) {
                reParam.setValue(regex);
                result=new UpdateCheckResult(node);
                result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.UPDATE,reParam);
              }
            }
          }
        }
 else {
          result=new UpdateCheckResult(node);
          result.setResult(EUpdateItemType.NODE_PROPERTY,EUpdateResult.BUIL_IN,repositoryPropertyParam);
        }
        if (result != null) {
          if (!openedProcesses.contains(getProcess())) {
            result.setFromItem(true);
          }
          result.setJob(getProcess());
          setConfigrationForReadOnlyJob(result);
          propertiesResults.add(result);
        }
      }
    }
  }
  return propertiesResults;
}",0.9612011477993776
117980,"/** 
 * Created and executes a request
 * @param uri the request URI
 * @param httpEntity the entity to send.
 * @param method HTTP method
 * @return the response to the request.
 * @throws ServiceUnavailableException
 */
protected HttpResponse createAndExecuteRequest(URI uri,HttpEntity httpEntity,HttpMethod method) throws ServiceUnavailableException {
  boolean hasRetried=false;
  while (true) {
    try {
      httpClient=(DefaultHttpClient)httpClientFactory.create(null,null);
      HttpRequestBase request=null;
      if (method == HttpMethod.POST) {
        request=new HttpPost(uri);
      }
 else       if (method == HttpMethod.PATCH) {
        request=new HttpPatch(uri);
      }
 else       if (method == HttpMethod.DELETE) {
        request=new HttpDelete(uri);
      }
 else {
        throw new HttpClientException(""String_Node_Str"" + method);
      }
      request.addHeader(HttpHeader.AUTHORIZATION,""String_Node_Str"" + authResult.getAccessToken());
      if (request instanceof HttpEntityEnclosingRequestBase) {
        ((HttpEntityEnclosingRequestBase)request).setEntity(httpEntity);
      }
      HttpResponse response=httpClient.execute(request);
      request.releaseConnection();
      if (isResponseSuccess(response.getStatusLine().getStatusCode())) {
        EntityUtils.consume(response.getEntity());
        return response;
      }
 else {
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED && !hasRetried) {
          refreshToken();
          hasRetried=true;
          continue;
        }
        HttpEntity entity=response.getEntity();
        String message=null;
        if (entity != null) {
          message=odataClient.getDeserializer(ContentType.JSON).toError(entity.getContent()).getMessage();
        }
 else {
          message=response.getStatusLine().getReasonPhrase();
        }
        throw new HttpClientException(message);
      }
    }
 catch (    Exception e) {
      throw new HttpClientException(e);
    }
  }
}","/** 
 * Created and executes a request
 * @param uri the request URI
 * @param httpEntity the entity to send.
 * @param method HTTP method
 * @return the response to the request.
 * @throws ServiceUnavailableException
 */
protected HttpResponse createAndExecuteRequest(URI uri,HttpEntity httpEntity,HttpMethod method) throws ServiceUnavailableException {
  boolean hasRetried=false;
  while (true) {
    try {
      httpClient=(DefaultHttpClient)httpClientFactory.create(null,null);
      HttpRequestBase request=null;
      if (method == HttpMethod.POST) {
        request=new HttpPost(uri);
      }
 else       if (method == HttpMethod.PATCH) {
        request=new HttpPatch(uri);
      }
 else       if (method == HttpMethod.DELETE) {
        request=new HttpDelete(uri);
      }
 else {
        throw new HttpClientException(""String_Node_Str"" + method);
      }
      request.addHeader(HttpHeader.AUTHORIZATION,""String_Node_Str"" + authResult.getAccessToken());
      if (request instanceof HttpEntityEnclosingRequestBase) {
        ((HttpEntityEnclosingRequestBase)request).setEntity(httpEntity);
      }
      HttpResponse response=httpClient.execute(request);
      if (isResponseSuccess(response.getStatusLine().getStatusCode())) {
        request.releaseConnection();
        EntityUtils.consume(response.getEntity());
        return response;
      }
 else {
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED && !hasRetried) {
          refreshToken();
          hasRetried=true;
          continue;
        }
        HttpEntity entity=response.getEntity();
        String message=null;
        if (entity != null) {
          message=odataClient.getDeserializer(ContentType.JSON).toError(entity.getContent()).getMessage();
        }
 else {
          message=response.getStatusLine().getReasonPhrase();
        }
        throw new HttpClientException(message);
      }
    }
 catch (    Exception e) {
      throw new HttpClientException(e);
    }
  }
}",0.962907268170426
117981,"@Override protected ElementParameterType getParameterType(NodeType node,String paramName){
  if (node != null && !hasAPI) {
    ElementParameterType apiParamType=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
    if (apiParamType == null) {
      ParameterUtilTool.addParameterType(node,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    hasAPI=true;
  }
  String componentName=node.getComponentName();
  ElementParameterType paramType=ParameterUtilTool.findParameterType(node,paramName);
  if (node != null && paramType != null) {
    Object value=ParameterUtilTool.convertParameterValue(paramType);
    if (""String_Node_Str"".equals(paramName)) {
      if (""String_Node_Str"".equals(String.valueOf(value))) {
        paramType.setValue(""String_Node_Str"");
      }
 else {
        paramType.setValue(""String_Node_Str"");
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
      ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType batchSize=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      if (operation != null && leadSelector != null) {
        Object operationValue=ParameterUtilTool.convertParameterValue(operation);
        Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
        if (!(""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue))) && batchSize != null) {
          Object batchSizeValue=ParameterUtilTool.convertParameterValue(batchSize);
          paramType.setValue(String.valueOf(batchSizeValue));
        }
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
      ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType maxReturn=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      if (operation != null && leadSelector != null) {
        Object operationValue=ParameterUtilTool.convertParameterValue(operation);
        Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
        if (""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue)) && maxReturn != null) {
          Object maxReturnValue=ParameterUtilTool.convertParameterValue(maxReturn);
          paramType.setValue(String.valueOf(maxReturnValue));
        }
      }
    }
  }
  return paramType;
}","@Override protected ElementParameterType getParameterType(NodeType node,String paramName){
  ElementParameterType paramType=ParameterUtilTool.findParameterType(node,paramName);
  if (""String_Node_Str"".equals(paramName) && paramType == null) {
    ParameterUtilTool.addParameterType(node,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    paramType=ParameterUtilTool.findParameterType(node,paramName);
  }
  if (node != null && paramType != null) {
    String componentName=node.getComponentName();
    Object value=ParameterUtilTool.convertParameterValue(paramType);
    if (""String_Node_Str"".equals(paramName)) {
      if (""String_Node_Str"".equals(String.valueOf(value))) {
        paramType.setValue(""String_Node_Str"");
      }
 else {
        paramType.setValue(""String_Node_Str"");
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
      ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType batchSize=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType maxReturn=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      Object batchSizeValue=ParameterUtilTool.convertParameterValue(batchSize);
      if (operation != null && leadSelector != null) {
        Object operationValue=ParameterUtilTool.convertParameterValue(operation);
        Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
        Object maxReturnValue=ParameterUtilTool.convertParameterValue(maxReturn);
        if (""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue)) && maxReturnValue != null) {
          paramType.setValue(String.valueOf(maxReturnValue));
        }
 else {
          paramType.setValue(String.valueOf(batchSizeValue));
        }
      }
 else {
        paramType.setValue(String.valueOf(batchSizeValue));
      }
    }
  }
  return paramType;
}",0.5580631924497332
117982,"/** 
 * Test if the selected item is a node.
 * @return true/false
 */
@SuppressWarnings(""String_Node_Str"") private boolean canPerformAction(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  List parts=getSelectedObjects();
  if (parts.size() == 1) {
    Object o=parts.get(0);
    if (!(o instanceof NodePart)) {
      return false;
    }
    nodePart=(NodePart)o;
    if (!(nodePart.getModel() instanceof Node)) {
      return false;
    }
    Node node=(Node)nodePart.getModel();
    if (!node.isActivate()) {
      return false;
    }
    if (node.getJobletNode() != null) {
      return false;
    }
    if (connecType.hasConnectionCategory(IConnectionCategory.EXECUTION_ORDER)) {
      if (!(Boolean)node.getPropertyValue(EParameterName.STARTABLE.getName()) || (!node.getProcessStartNode(false).equals(node))) {
        if (!node.isELTMapComponent()) {
          boolean jobletOk=false;
          if (PluginChecker.isJobLetPluginLoaded()) {
            IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
            if (service != null && service.isJobletComponent(node)) {
              jobletOk=true;
            }
          }
          if (!jobletOk) {
            return false;
          }
        }
      }
    }
    menuList=new ArrayList<String>();
    if (curNodeConnector == null) {
      curNodeConnector=node.getConnectorFromType(connecType);
      if (curNodeConnector == null) {
        return false;
      }
    }
    if (curNodeConnector.getMaxLinkOutput() != -1) {
      if (curNodeConnector.getCurLinkNbOutput() >= curNodeConnector.getMaxLinkOutput()) {
        return false;
      }
    }
    if (curNodeConnector.getMaxLinkOutput() == 0) {
      return false;
    }
    if (curNodeConnector.getName().equals(EConnectionType.TABLE.getName())) {
      List<? extends IConnection> tableRefs=node.getOutgoingConnections(EConnectionType.TABLE_REF);
      if (tableRefs != null && 0 < tableRefs.size()) {
        return false;
      }
    }
    if (!curNodeConnector.isMultiSchema()) {
    }
    if (curNodeConnector.isMultiSchema()) {
      for (int i=0; i < node.getMetadataList().size(); i++) {
        IMetadataTable table=(node.getMetadataList().get(i));
        String value=table.getAdditionalProperties().get(ISINPUT);
        if (value != null && value.equals(TRUE)) {
          continue;
        }
        String name=table.getTableName();
        if (name.equals(node.getUniqueName())) {
          continue;
        }
        if (table.getAttachedConnector() == null || table.getAttachedConnector().equals(curNodeConnector.getName())) {
          if (connecType == EConnectionType.TABLE) {
            name=table.getLabel() + ""String_Node_Str"" + name+ ""String_Node_Str"";
          }
          boolean nameUsed=false;
          for (          Connection connec : (List<Connection>)node.getOutgoingConnections()) {
            if (connec.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)) {
              if (connec.getMetadataTable().getTableName().equals(table.getTableName())) {
                nameUsed=true;
              }
            }
          }
          if (!nameUsed) {
            menuList.add(name);
          }
        }
      }
      if ((curNodeConnector.getMaxLinkOutput() == -1 || node.getMetadataList().size() < curNodeConnector.getMaxLinkOutput()) && curNodeConnector.isBuiltIn()) {
        menuList.add(getNewOutputMenuName());
      }
    }
 else {
      String menuName;
      boolean addDefaultName=false;
      IMetadataTable table=null;
      for (int i=0; i < node.getMetadataList().size(); i++) {
        table=(node.getMetadataList().get(i));
        if (table.getTableName().equals(node.getUniqueName())) {
          break;
        }
      }
      if (node.getComponent().getName().contains(""String_Node_Str"") && node.checkSchemaForEBCDIC(table) && curNodeConnector.getCurLinkNbOutput() > 0) {
        return false;
      }
      if (connecType == EConnectionType.TABLE) {
        addDefaultName=addDefaultName();
        menuName=getNewOutputMenuName();
      }
 else {
        menuName=curNodeConnector.getMenuName();
      }
      if (!addDefaultName) {
        setText(menuName);
        menuList.add(menuName);
      }
    }
    return true;
  }
  return false;
}","/** 
 * Test if the selected item is a node.
 * @return true/false
 */
@SuppressWarnings(""String_Node_Str"") private boolean canPerformAction(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  List parts=getSelectedObjects();
  if (parts.size() == 1) {
    Object o=parts.get(0);
    if (!(o instanceof NodePart)) {
      return false;
    }
    nodePart=(NodePart)o;
    if (!(nodePart.getModel() instanceof Node)) {
      return false;
    }
    Node node=(Node)nodePart.getModel();
    if (!node.isActivate()) {
      return false;
    }
    if (node.getJobletNode() != null) {
      return false;
    }
    if (curNodeConnector != null && ""String_Node_Str"".equals(curNodeConnector.getName())) {
      if (node.getProcess() != null && !ComponentCategory.CATEGORY_4_DI.getName().equals(node.getProcess().getComponentsType())) {
        return false;
      }
    }
    if (connecType.hasConnectionCategory(IConnectionCategory.EXECUTION_ORDER)) {
      if (!(Boolean)node.getPropertyValue(EParameterName.STARTABLE.getName()) || (!node.getProcessStartNode(false).equals(node))) {
        if (!node.isELTMapComponent()) {
          boolean jobletOk=false;
          if (PluginChecker.isJobLetPluginLoaded()) {
            IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
            if (service != null && service.isJobletComponent(node)) {
              jobletOk=true;
            }
          }
          if (!jobletOk) {
            return false;
          }
        }
      }
    }
    menuList=new ArrayList<String>();
    if (curNodeConnector == null) {
      curNodeConnector=node.getConnectorFromType(connecType);
      if (curNodeConnector == null) {
        return false;
      }
    }
    if (curNodeConnector.getMaxLinkOutput() != -1) {
      if (curNodeConnector.getCurLinkNbOutput() >= curNodeConnector.getMaxLinkOutput()) {
        return false;
      }
    }
    if (curNodeConnector.getMaxLinkOutput() == 0) {
      return false;
    }
    if (curNodeConnector.getName().equals(EConnectionType.TABLE.getName())) {
      List<? extends IConnection> tableRefs=node.getOutgoingConnections(EConnectionType.TABLE_REF);
      if (tableRefs != null && 0 < tableRefs.size()) {
        return false;
      }
    }
    if (!curNodeConnector.isMultiSchema()) {
    }
    if (curNodeConnector.isMultiSchema()) {
      for (int i=0; i < node.getMetadataList().size(); i++) {
        IMetadataTable table=(node.getMetadataList().get(i));
        String value=table.getAdditionalProperties().get(ISINPUT);
        if (value != null && value.equals(TRUE)) {
          continue;
        }
        String name=table.getTableName();
        if (name.equals(node.getUniqueName())) {
          continue;
        }
        if (table.getAttachedConnector() == null || table.getAttachedConnector().equals(curNodeConnector.getName())) {
          if (connecType == EConnectionType.TABLE) {
            name=table.getLabel() + ""String_Node_Str"" + name+ ""String_Node_Str"";
          }
          boolean nameUsed=false;
          for (          Connection connec : (List<Connection>)node.getOutgoingConnections()) {
            if (connec.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)) {
              if (connec.getMetadataTable().getTableName().equals(table.getTableName())) {
                nameUsed=true;
              }
            }
          }
          if (!nameUsed) {
            menuList.add(name);
          }
        }
      }
      if ((curNodeConnector.getMaxLinkOutput() == -1 || node.getMetadataList().size() < curNodeConnector.getMaxLinkOutput()) && curNodeConnector.isBuiltIn()) {
        menuList.add(getNewOutputMenuName());
      }
    }
 else {
      String menuName;
      boolean addDefaultName=false;
      IMetadataTable table=null;
      for (int i=0; i < node.getMetadataList().size(); i++) {
        table=(node.getMetadataList().get(i));
        if (table.getTableName().equals(node.getUniqueName())) {
          break;
        }
      }
      if (node.getComponent().getName().contains(""String_Node_Str"") && node.checkSchemaForEBCDIC(table) && curNodeConnector.getCurLinkNbOutput() > 0) {
        return false;
      }
      if (connecType == EConnectionType.TABLE) {
        addDefaultName=addDefaultName();
        menuName=getNewOutputMenuName();
      }
 else {
        menuName=curNodeConnector.getMenuName();
      }
      if (!addDefaultName) {
        setText(menuName);
        menuList.add(menuName);
      }
    }
    return true;
  }
  return false;
}",0.9710128707330722
117983,"@After public void clean(){
  if (workFolder != null) {
    FilesUtils.deleteFolder(workFolder,true);
  }
  CodeGeneratorActivator.getDefault().getPreferenceStore().setValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,new JSONObject().toString());
}","@After public void clean(){
  if (workFolder != null) {
    FilesUtils.deleteFolder(workFolder,true);
  }
  CodeGeneratorActivator.getDefault().getPreferenceStore().setValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,new JSONArray().toString());
}",0.978805394990366
117984,"private void testEmpty(UserComponentsProviderTestClass provider) throws Exception {
  File installationFolder=provider.getInstallationFolder();
  Assert.assertTrue(installationFolder.exists());
  Assert.assertEquals(0,installationFolder.list().length);
  String installedComponentsValues=CodeGeneratorActivator.getDefault().getPreferenceStore().getString(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS);
  JSONObject newCFComponentsJson=new JSONObject();
  if (StringUtils.isNotEmpty(installedComponentsValues)) {
    newCFComponentsJson=new JSONObject(installedComponentsValues);
  }
  Assert.assertEquals(0,newCFComponentsJson.length());
}","private void testEmpty(UserComponentsProviderTestClass provider) throws Exception {
  File installationFolder=provider.getInstallationFolder();
  Assert.assertTrue(installationFolder.exists());
  Assert.assertEquals(0,installationFolder.list().length);
  String installedComponentsValues=CodeGeneratorActivator.getDefault().getPreferenceStore().getString(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS);
  JSONArray newCFComponentsJson=new JSONArray();
  if (StringUtils.isNotEmpty(installedComponentsValues)) {
    newCFComponentsJson=new JSONArray(installedComponentsValues);
  }
  Assert.assertEquals(0,newCFComponentsJson.length());
  final JSONObject needInstalledNewCFComponents=provider.getNeedInstalledNewCFComponents();
  Assert.assertNotNull(needInstalledNewCFComponents);
  Assert.assertEquals(0,needInstalledNewCFComponents.length());
}",0.6232558139534884
117985,"@Before public void setup() throws Exception {
  workFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
  CodeGeneratorActivator.getDefault().getPreferenceStore().setValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,new JSONObject().toString());
  final Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final IProject project=ResourceUtils.getProject(currentProject);
  final IFolder projectComponentsFolder=project.getFolder(ERepositoryObjectType.getFolderName(ERepositoryObjectType.COMPONENTS));
  if (projectComponentsFolder.exists()) {
    FilesUtils.deleteFolder(projectComponentsFolder.getLocation().toFile(),false);
  }
  projectComponentsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
}","@Before public void setup() throws Exception {
  workFolder=FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
  CodeGeneratorActivator.getDefault().getPreferenceStore().setValue(IComponentPreferenceConstant.INSTALLED_USER_COMPONENTS,new JSONArray().toString());
  final Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final IProject project=ResourceUtils.getProject(currentProject);
  final IFolder projectComponentsFolder=project.getFolder(ERepositoryObjectType.getFolderName(ERepositoryObjectType.COMPONENTS));
  if (projectComponentsFolder.exists()) {
    FilesUtils.deleteFolder(projectComponentsFolder.getLocation().toFile(),false);
  }
  projectComponentsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
}",0.9927200529450696
117986,"public static IBuildJobHandler createBuildJobHandler(ProcessItem processItem,String contextName,String version,Map<ExportChoice,Object> exportChoiceMap){
  return createBuildJobHandler(processItem,version,contextName,exportChoiceMap,(String)null);
}","public static IBuildJobHandler createBuildJobHandler(ProcessItem processItem,String contextName,String version,Map<ExportChoice,Object> exportChoiceMap){
  return createBuildJobHandler(processItem,contextName,version,exportChoiceMap,(String)null);
}",0.9518072289156626
117987,"@Override protected ElementParameterType getParameterType(NodeType node,String paramName){
  if (node != null && !hasAPI) {
    ElementParameterType apiParamType=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
    if (apiParamType == null) {
      ParameterUtilTool.addParameterType(node,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    hasAPI=true;
  }
  String componentName=node.getComponentName();
  ElementParameterType paramType=ParameterUtilTool.findParameterType(node,paramName);
  if (node != null && paramType != null) {
    Object value=ParameterUtilTool.convertParameterValue(paramType);
    if (""String_Node_Str"".equals(paramName)) {
      if (""String_Node_Str"".equals(String.valueOf(value))) {
        paramType.setValue(""String_Node_Str"");
      }
 else {
        paramType.setValue(""String_Node_Str"");
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
      ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType batchSize=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      if (operation != null && leadSelector != null) {
        Object operationValue=ParameterUtilTool.convertParameterValue(operation);
        Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
        if (!(""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue))) && batchSize != null) {
          Object batchSizeValue=ParameterUtilTool.convertParameterValue(batchSize);
          paramType.setValue(batchSizeValue);
        }
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
      ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType maxReturn=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      if (operation != null && leadSelector != null) {
        Object operationValue=ParameterUtilTool.convertParameterValue(operation);
        Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
        if (""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue)) && maxReturn != null) {
          Object maxReturnValue=ParameterUtilTool.convertParameterValue(maxReturn);
          paramType.setValue(maxReturnValue);
        }
      }
    }
  }
  return paramType;
}","@Override protected ElementParameterType getParameterType(NodeType node,String paramName){
  if (node != null && !hasAPI) {
    ElementParameterType apiParamType=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
    if (apiParamType == null) {
      ParameterUtilTool.addParameterType(node,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    hasAPI=true;
  }
  String componentName=node.getComponentName();
  ElementParameterType paramType=ParameterUtilTool.findParameterType(node,paramName);
  if (node != null && paramType != null) {
    Object value=ParameterUtilTool.convertParameterValue(paramType);
    if (""String_Node_Str"".equals(paramName)) {
      if (""String_Node_Str"".equals(String.valueOf(value))) {
        paramType.setValue(""String_Node_Str"");
      }
 else {
        paramType.setValue(""String_Node_Str"");
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
      ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType batchSize=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      if (operation != null && leadSelector != null) {
        Object operationValue=ParameterUtilTool.convertParameterValue(operation);
        Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
        if (!(""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue))) && batchSize != null) {
          Object batchSizeValue=ParameterUtilTool.convertParameterValue(batchSize);
          paramType.setValue(String.valueOf(batchSizeValue));
        }
      }
    }
    if (""String_Node_Str"".equals(paramName) && ""String_Node_Str"".equals(componentName)) {
      ElementParameterType operation=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType leadSelector=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      ElementParameterType maxReturn=ParameterUtilTool.findParameterType(node,""String_Node_Str"");
      if (operation != null && leadSelector != null) {
        Object operationValue=ParameterUtilTool.convertParameterValue(operation);
        Object leadSelectorValue=ParameterUtilTool.convertParameterValue(leadSelector);
        if (""String_Node_Str"".equals(String.valueOf(operationValue)) && ""String_Node_Str"".equals(String.valueOf(leadSelectorValue)) && maxReturn != null) {
          Object maxReturnValue=ParameterUtilTool.convertParameterValue(maxReturn);
          paramType.setValue(String.valueOf(maxReturnValue));
        }
      }
    }
  }
  return paramType;
}",0.9941818181818182
117988,"@Test public void testLoadComponents(){
  ComponentService componentService=ComponentsUtils.getComponentService();
  Set<ComponentDefinition> componentDefinitions=componentService.getAllComponents();
  Set<IComponent> coms=ComponentsFactoryProvider.getInstance().getComponents();
  List<IComponent> comList=new ArrayList<IComponent>();
  for (  ComponentDefinition componentDefinition : componentDefinitions) {
    for (    IComponent com : coms) {
      if (com.getName().equals(componentDefinition.getName())) {
        comList.add(com);
        break;
      }
    }
  }
  coms.removeAll(comList);
  ComponentsUtils.loadComponents(componentService);
  coms=ComponentsFactoryProvider.getInstance().getComponents();
  for (  ComponentDefinition componentDefinition : componentDefinitions) {
    if (componentDefinition.getName().equals(""String_Node_Str"")) {
      continue;
    }
    for (    IComponent com : coms) {
      if (com.getName().equals(componentDefinition.getName())) {
        assertFalse(""String_Node_Str"" + componentDefinition.getName(),true);
      }
    }
  }
}","@Test public void testLoadComponents(){
  ComponentService componentService=ComponentsUtils.getComponentService();
  Set<ComponentDefinition> componentDefinitions=componentService.getAllComponents();
  Set<IComponent> coms=ComponentsFactoryProvider.getInstance().getComponents();
  List<IComponent> comList=new ArrayList<IComponent>();
  for (  ComponentDefinition componentDefinition : componentDefinitions) {
    for (    IComponent com : coms) {
      if (com.getName().equals(componentDefinition.getName())) {
        comList.add(com);
        break;
      }
    }
  }
  coms.removeAll(comList);
  ComponentsUtils.loadComponents(componentService);
  coms=ComponentsFactoryProvider.getInstance().getComponents();
  for (  ComponentDefinition componentDefinition : componentDefinitions) {
    if (!componentDefinition.getName().equals(""String_Node_Str"")) {
      continue;
    }
    for (    IComponent com : coms) {
      if (com.getName().equals(componentDefinition.getName())) {
        assertFalse(""String_Node_Str"" + componentDefinition.getName(),true);
      }
    }
  }
}",0.999536822603057
117989,"@Override public boolean isAvailable(String componentName){
  if (Boolean.getBoolean(""String_Node_Str"")) {
    if (!componentName.equals(""String_Node_Str"")) {
      return false;
    }
  }
  return true;
}","@Override public boolean isAvailable(String componentName){
  if (Boolean.getBoolean(""String_Node_Str"")) {
    if (componentName.equals(""String_Node_Str"")) {
      return false;
    }
  }
  return true;
}",0.9975550122249388
117990,"@Override protected ITableLabelProvider createLabelProvider(){
  return new ITableLabelProvider(){
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    public String getColumnText(    Object element,    int columnIndex){
      String value=((String)element);
      if (columnIndex == 0) {
        return value.replace(""String_Node_Str"",""String_Node_Str"");
      }
      throw new IllegalStateException();
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
;
}","@Override protected ITableLabelProvider createLabelProvider(){
  return new ITableLabelProvider(){
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    public String getColumnText(    Object element,    int columnIndex){
      String value=((String)element);
      if (columnIndex == 0) {
        return value;
      }
      throw new IllegalStateException();
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
;
}",0.969029593943565
117991,"@Override protected List<String> readString(String stringList){
  if (stringList == null || ""String_Node_Str"".equals(stringList)) {
    return EMPTY_STRING_LIST;
  }
  ArrayList<String> result=new ArrayList<String>(50);
  for (  String tmp : stringList.split(""String_Node_Str"")) {
    if (tmp != null && !""String_Node_Str"".equals(tmp)) {
      result.add(tmp);
    }
  }
  return result;
}","@Override protected List<String> readString(String stringList){
  return new JobVMArgumentsUtil().readString(stringList);
}",0.3671875
117992,"public String getColumnText(Object element,int columnIndex){
  String value=((String)element);
  if (columnIndex == 0) {
    return value.replace(""String_Node_Str"",""String_Node_Str"");
  }
  throw new IllegalStateException();
}","public String getColumnText(Object element,int columnIndex){
  String value=((String)element);
  if (columnIndex == 0) {
    return value;
  }
  throw new IllegalStateException();
}",0.8894348894348895
117993,"@Override protected String writeString(List<String> items){
  int size=items.size();
  StringBuffer buf=new StringBuffer(size * 50);
  buf.append(""String_Node_Str"");
  for (int i=0; i < size; i++) {
    buf.append(items.get(i).trim().replaceAll(""String_Node_Str"",""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  return buf.toString();
}","@Override protected String writeString(List<String> items){
  return new JobVMArgumentsUtil().writeString(items);
}",0.3620689655172414
117994,"protected void generatePom(){
  initJobClasspath();
  try {
    IMavenPomCreator createTemplatePom=createMavenPomCreator();
    if (createTemplatePom != null) {
      boolean previousValue=ProcessUtils.jarNeedsToContainsContext();
      ProcessUtils.setJarWithContext(ProcessUtils.needsToHaveContextInsideJar((ProcessItem)property.getItem()));
      createTemplatePom.create(null);
      ProcessUtils.setJarWithContext(previousValue);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","protected void generatePom(){
  initJobClasspath();
  try {
    IMavenPomCreator createTemplatePom=createMavenPomCreator();
    if (createTemplatePom != null) {
      boolean previousValue=ProcessUtils.jarNeedsToContainContext();
      ProcessUtils.setJarWithContext(ProcessUtils.needsToHaveContextInsideJar((ProcessItem)property.getItem()));
      createTemplatePom.create(null);
      ProcessUtils.setJarWithContext(previousValue);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9990147783251232
117995,"protected StringBuffer getProfileArgs(){
  StringBuffer profileBuffer=new StringBuffer();
  profileBuffer.append(TalendMavenConstants.PREFIX_PROFILE);
  profileBuffer.append(SPACE);
  addArg(profileBuffer,true,true,TalendMavenConstants.PROFILE_DEFAULT_SETTING);
  addArg(profileBuffer,isOptionChoosed(ExportChoice.needSourceCode),TalendMavenConstants.PROFILE_INCLUDE_JAVA_SOURCES);
  boolean isBinaries=isOptionChoosed(ExportChoice.binaries);
  addArg(profileBuffer,!isBinaries,TalendMavenConstants.PROFILE_INCLUDE_MAVEN_RESOURCES);
  if (needDQSurvivorshipRules()) {
    addArg(profileBuffer,true,TalendMavenConstants.PROFILE_INCLUDE_SURVIVORSHIP_RULES);
  }
  addArg(profileBuffer,isOptionChoosed(ExportChoice.needJobItem) || itemDependencies,TalendMavenConstants.PROFILE_INCLUDE_ITEMS);
  addArg(profileBuffer,isOptionChoosed(ExportChoice.includeLibs),TalendMavenConstants.PROFILE_INCLUDE_LIBS);
  addArg(profileBuffer,isBinaries,TalendMavenConstants.PROFILE_INCLUDE_BINARIES);
  addArg(profileBuffer,isLog4jEnable() && isBinaries,TalendMavenConstants.PROFILE_INCLUDE_RUNNING_LOG4J);
  addArg(profileBuffer,isLog4jEnable() && !isBinaries,TalendMavenConstants.PROFILE_INCLUDE_LOG4J);
  addArg(profileBuffer,isBinaries && isOptionChoosed(ExportChoice.needContext),TalendMavenConstants.PROFILE_INCLUDE_CONTEXTS,ProcessUtils.jarNeedsToContainsContext());
  addArg(profileBuffer,isOptionChoosed(ExportChoice.includeTestSource),TalendMavenConstants.PROFILE_INCLUDE_TEST_SOURCES);
  addArg(profileBuffer,isOptionChoosed(ExportChoice.executeTests),TalendMavenConstants.PROFILE_INCLUDE_TEST_REPORTS);
  addArg(profileBuffer,needXmlMappings(),TalendMavenConstants.PROFILE_INCLUDE_XMLMAPPINGS);
  addArg(profileBuffer,needXmlMappings() && isBinaries,TalendMavenConstants.PROFILE_INCLUDE_RUNNING_XMLMAPPINGS);
  if (needXmlMappings()) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      coreService.synchronizeMapptingXML();
      coreService.syncLog4jSettings();
    }
  }
  boolean isAssemblyNeeded=exportChoice.get(ExportChoice.needAssembly) == null || isOptionChoosed(ExportChoice.needAssembly);
  addArg(profileBuffer,isAssemblyNeeded,TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  if (needRules()) {
    addArg(profileBuffer,true,TalendMavenConstants.PROFILE_INCLUDE_RULES);
  }
  if (needPigUDFs()) {
    addArg(profileBuffer,isBinaries,TalendMavenConstants.PROFILE_INCLUDE_PIGUDFS_BINARIES);
    addArg(profileBuffer,!isBinaries,TalendMavenConstants.PROFILE_INCLUDE_PIGUDFS_JAVA_SOURCES);
  }
  return profileBuffer;
}","protected StringBuffer getProfileArgs(){
  StringBuffer profileBuffer=new StringBuffer();
  profileBuffer.append(TalendMavenConstants.PREFIX_PROFILE);
  profileBuffer.append(SPACE);
  addArg(profileBuffer,true,true,TalendMavenConstants.PROFILE_DEFAULT_SETTING);
  addArg(profileBuffer,isOptionChoosed(ExportChoice.needSourceCode),TalendMavenConstants.PROFILE_INCLUDE_JAVA_SOURCES);
  boolean isBinaries=isOptionChoosed(ExportChoice.binaries);
  addArg(profileBuffer,!isBinaries,TalendMavenConstants.PROFILE_INCLUDE_MAVEN_RESOURCES);
  if (needDQSurvivorshipRules()) {
    addArg(profileBuffer,true,TalendMavenConstants.PROFILE_INCLUDE_SURVIVORSHIP_RULES);
  }
  addArg(profileBuffer,isOptionChoosed(ExportChoice.needJobItem) || itemDependencies,TalendMavenConstants.PROFILE_INCLUDE_ITEMS);
  addArg(profileBuffer,isOptionChoosed(ExportChoice.includeLibs),TalendMavenConstants.PROFILE_INCLUDE_LIBS);
  addArg(profileBuffer,isBinaries,TalendMavenConstants.PROFILE_INCLUDE_BINARIES);
  addArg(profileBuffer,isLog4jEnable() && isBinaries,TalendMavenConstants.PROFILE_INCLUDE_RUNNING_LOG4J);
  addArg(profileBuffer,isLog4jEnable() && !isBinaries,TalendMavenConstants.PROFILE_INCLUDE_LOG4J);
  addArg(profileBuffer,isBinaries && isOptionChoosed(ExportChoice.needContext),TalendMavenConstants.PROFILE_INCLUDE_CONTEXTS,ProcessUtils.jarNeedsToContainContext());
  addArg(profileBuffer,isOptionChoosed(ExportChoice.includeTestSource),TalendMavenConstants.PROFILE_INCLUDE_TEST_SOURCES);
  addArg(profileBuffer,isOptionChoosed(ExportChoice.executeTests),TalendMavenConstants.PROFILE_INCLUDE_TEST_REPORTS);
  addArg(profileBuffer,needXmlMappings(),TalendMavenConstants.PROFILE_INCLUDE_XMLMAPPINGS);
  addArg(profileBuffer,needXmlMappings() && isBinaries,TalendMavenConstants.PROFILE_INCLUDE_RUNNING_XMLMAPPINGS);
  if (needXmlMappings()) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      coreService.synchronizeMapptingXML();
      coreService.syncLog4jSettings();
    }
  }
  boolean isAssemblyNeeded=exportChoice.get(ExportChoice.needAssembly) == null || isOptionChoosed(ExportChoice.needAssembly);
  addArg(profileBuffer,isAssemblyNeeded,TalendMavenConstants.PROFILE_PACKAGING_AND_ASSEMBLY);
  if (needRules()) {
    addArg(profileBuffer,true,TalendMavenConstants.PROFILE_INCLUDE_RULES);
  }
  if (needPigUDFs()) {
    addArg(profileBuffer,isBinaries,TalendMavenConstants.PROFILE_INCLUDE_PIGUDFS_BINARIES);
    addArg(profileBuffer,!isBinaries,TalendMavenConstants.PROFILE_INCLUDE_PIGUDFS_JAVA_SOURCES);
  }
  return profileBuffer;
}",0.9998133980220192
117996,"/** 
 * DOC hcw Comment method ""createContents"".
 * @param composite
 */
@Override Control createScdContents(Composite parent){
  SashForm sashForm=new SashForm(parent,SWT.VERTICAL | SWT.SMOOTH);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(sashForm);
  sashForm.setLayout(new GridLayout(1,true));
  sashForm.SASH_WIDTH=1;
  Composite sashPart1=new Composite(sashForm,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).equalWidth(true).spacing(20,10).applyTo(sashPart1);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(sashPart1);
  Composite filterUnusedComposite=new Composite(sashPart1,SWT.NONE);
  GridLayoutFactory.swtDefaults().margins(0,0).spacing(0,0).applyTo(filterUnusedComposite);
  GridDataFactory.fillDefaults().span(1,2).grab(true,true).applyTo(filterUnusedComposite);
  ViewerFilter filter=createFilter(filterUnusedComposite);
  unusedFields=new FieldSection(filterUnusedComposite,scdManager,false,false);
  unusedFields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(198,195,198));
  unusedFields.setTableInput(scdManager.getUnusedFields());
  unusedFields.getTableViewer().addFilter(filter);
  unusedFields.setSortable(true);
  GridDataFactory.swtDefaults().grab(true,true).align(SWT.FILL,SWT.FILL).applyTo(unusedFields.getControl());
  addContextHelp(unusedFields.getTableViewer().getTable(),""String_Node_Str"");
  type0Fields=new FieldSection(sashPart1,scdManager,false,false);
  type0Fields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(255,146,0));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(type0Fields.getControl());
  type0Fields.setTableInput(scdManager.getType0Table());
  addContextHelp(type0Fields.getTableViewer().getTable(),""String_Node_Str"");
  type1Fields=new FieldSection(sashPart1,scdManager,false,false,ScdParameterConstants.DROP_COPY_TYPE1FIELDS);
  type1Fields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(255,203,0));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(type1Fields.getControl());
  type1Fields.setTableInput(scdManager.getType1Table());
  addContextHelp(type1Fields.getTableViewer().getTable(),""String_Node_Str"");
  Composite sashPart2=new Composite(sashForm,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).equalWidth(true).spacing(20,10).applyTo(sashPart2);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(sashPart2);
  sourceKeys=new FieldSection(sashPart2,scdManager,false,false,ScdParameterConstants.DROP_COPY_SOURCEKEYS);
  sourceKeys.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(156,0,255));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(sourceKeys.getControl());
  sourceKeys.setTableInput(scdManager.getSourceKeys());
  addContextHelp(sourceKeys.getTableViewer().getTable(),""String_Node_Str"");
  type2Fields=new Type2Section(sashPart2,scdManager,ScdParameterConstants.DROP_COPY_TYPE2FIELDS);
  type2Fields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(255,255,0));
  GridDataFactory.swtDefaults().span(1,2).align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(type2Fields.getControl());
  type2Fields.setTableInput(scdManager.getType2Table());
  if (scdManager.getVersionData() != null) {
    type2Fields.setVersionInput(scdManager.getVersionData());
  }
 else {
    type2Fields.setVersionInput(new Versioning());
  }
  addContextHelp(type2Fields.getTableViewer().getTable(),""String_Node_Str"");
  surrogateKeys=new SurrogateSection(sashPart2,scdManager);
  surrogateKeys.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(214,40,255));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(surrogateKeys.getControl());
  surrogateKeys.setTableInput(scdManager.getSurrogateKeys());
  surrogateKeys.addContextHelp(this);
  Composite sashPart3=new Composite(sashForm,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).equalWidth(true).spacing(20,10).applyTo(sashPart3);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(sashPart3);
  Label placeHolder=new Label(sashPart3,SWT.NONE);
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(placeHolder);
  type3Fields=new Type3Section(sashPart3,scdManager);
  type3Fields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(24,182,255));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(type3Fields.getControl());
  type3Fields.setTableInput(scdManager.getType3Table());
  addContextHelp(type3Fields.getTable(),""String_Node_Str"");
  scdManager.setUnusedFieldsSource(unusedFields);
  ScdSection[] sections={surrogateKeys,sourceKeys,type0Fields,type1Fields,type2Fields,type3Fields};
  for (  ScdSection scd : sections) {
    scdManager.addUnusedFieldsTarget(scd);
  }
  sashForm.setSashWidth(3);
  int totalHeight=getDialogSize().y;
  sashForm.setWeights(new int[]{totalHeight / 4,totalHeight / 2,totalHeight / 4});
  return sashForm;
}","/** 
 * DOC hcw Comment method ""createContents"".
 * @param composite
 */
@Override Control createScdContents(Composite parent){
  SashForm sashForm=new SashForm(parent,SWT.VERTICAL | SWT.SMOOTH);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(sashForm);
  sashForm.setLayout(new GridLayout(1,true));
  sashForm.SASH_WIDTH=1;
  Composite sashPart1=new Composite(sashForm,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).equalWidth(true).spacing(20,10).applyTo(sashPart1);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(sashPart1);
  Composite filterUnusedComposite=new Composite(sashPart1,SWT.NONE);
  GridLayoutFactory.swtDefaults().margins(0,0).spacing(0,0).applyTo(filterUnusedComposite);
  GridDataFactory.fillDefaults().span(1,2).grab(true,true).applyTo(filterUnusedComposite);
  ViewerFilter filter=createFilter(filterUnusedComposite);
  unusedFields=new FieldSection(filterUnusedComposite,scdManager,false,false);
  unusedFields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(198,195,198));
  unusedFields.setTableInput(scdManager.getUnusedFields());
  unusedFields.getTableViewer().addFilter(filter);
  unusedFields.setSortable(true);
  GridDataFactory.swtDefaults().grab(true,true).align(SWT.FILL,SWT.FILL).applyTo(unusedFields.getControl());
  addContextHelp(unusedFields.getTableViewer().getTable(),""String_Node_Str"");
  type0Fields=new FieldSection(sashPart1,scdManager,false,false);
  type0Fields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(255,146,0));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(type0Fields.getControl());
  GridData fieldsData=new GridData(GridData.FILL_BOTH);
  fieldsData.heightHint=100;
  type0Fields.getControl().setLayoutData(fieldsData);
  type0Fields.setTableInput(scdManager.getType0Table());
  addContextHelp(type0Fields.getTableViewer().getTable(),""String_Node_Str"");
  type1Fields=new FieldSection(sashPart1,scdManager,false,false,ScdParameterConstants.DROP_COPY_TYPE1FIELDS);
  type1Fields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(255,203,0));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(type1Fields.getControl());
  type1Fields.getControl().setLayoutData(fieldsData);
  type1Fields.setTableInput(scdManager.getType1Table());
  addContextHelp(type1Fields.getTableViewer().getTable(),""String_Node_Str"");
  Composite sashPart2=new Composite(sashForm,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).equalWidth(true).spacing(20,10).applyTo(sashPart2);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(sashPart2);
  sourceKeys=new FieldSection(sashPart2,scdManager,false,false,ScdParameterConstants.DROP_COPY_SOURCEKEYS);
  sourceKeys.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(156,0,255));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(sourceKeys.getControl());
  sourceKeys.setTableInput(scdManager.getSourceKeys());
  addContextHelp(sourceKeys.getTableViewer().getTable(),""String_Node_Str"");
  type2Fields=new Type2Section(sashPart2,scdManager,ScdParameterConstants.DROP_COPY_TYPE2FIELDS);
  type2Fields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(255,255,0));
  GridDataFactory.swtDefaults().span(1,2).align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(type2Fields.getControl());
  type2Fields.setTableInput(scdManager.getType2Table());
  if (scdManager.getVersionData() != null) {
    type2Fields.setVersionInput(scdManager.getVersionData());
  }
 else {
    type2Fields.setVersionInput(new Versioning());
  }
  addContextHelp(type2Fields.getTableViewer().getTable(),""String_Node_Str"");
  surrogateKeys=new SurrogateSection(sashPart2,scdManager);
  surrogateKeys.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(214,40,255));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(surrogateKeys.getControl());
  surrogateKeys.setTableInput(scdManager.getSurrogateKeys());
  surrogateKeys.addContextHelp(this);
  Composite sashPart3=new Composite(sashForm,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).equalWidth(true).spacing(20,10).applyTo(sashPart3);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(sashPart3);
  Label placeHolder=new Label(sashPart3,SWT.NONE);
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(placeHolder);
  type3Fields=new Type3Section(sashPart3,scdManager);
  type3Fields.setTitle(Messages.getString(""String_Node_Str""),SWTResourceManager.getColor(24,182,255));
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(type3Fields.getControl());
  type3Fields.setTableInput(scdManager.getType3Table());
  addContextHelp(type3Fields.getTable(),""String_Node_Str"");
  scdManager.setUnusedFieldsSource(unusedFields);
  ScdSection[] sections={surrogateKeys,sourceKeys,type0Fields,type1Fields,type2Fields,type3Fields};
  for (  ScdSection scd : sections) {
    scdManager.addUnusedFieldsTarget(scd);
  }
  sashForm.setSashWidth(3);
  int totalHeight=getDialogSize().y;
  sashForm.setWeights(new int[]{totalHeight / 4,totalHeight / 2,totalHeight / 4});
  return sashForm;
}",0.981631293423432
117997,"@Override public void undo(){
  connection.setName(oldName);
  IElementParameter elementParameter=connection.getElementParameter(EParameterName.UNIQUE_NAME.getName());
  if (elementParameter != null) {
    if (connection.getLineStyle().hasConnectionCategory(IConnectionCategory.TABLE)) {
      connection.setPropertyValue(EParameterName.UNIQUE_NAME.getName(),oldMetaName);
    }
 else {
      connection.setPropertyValue(EParameterName.UNIQUE_NAME.getName(),oldName);
    }
  }
  if (connection.getLineStyle().hasConnectionCategory(IConnectionCategory.UNIQUE_NAME)) {
    connection.getSource().getProcess().removeUniqueConnectionName(newName);
    connection.getSource().getProcess().addUniqueConnectionName(oldName);
  }
  ConnectionListController.renameConnectionInElement(newName,oldName,connection.getSource());
  IExternalNode externalNode=connection.getTarget().getExternalNode();
  if (externalNode != null) {
    externalNode.renameInputConnection(newName,oldName);
  }
  externalNode=connection.getSource().getExternalNode();
  if (externalNode != null) {
    externalNode.renameOutputConnection(newName,oldName);
  }
  ((Process)connection.getSource().getProcess()).checkProcess();
}","@Override public void undo(){
  connection.setName(oldName);
  IElementParameter elementParameter=connection.getElementParameter(EParameterName.UNIQUE_NAME.getName());
  if (elementParameter != null) {
    if (connection.getLineStyle().hasConnectionCategory(IConnectionCategory.TABLE)) {
      connection.setPropertyValue(EParameterName.UNIQUE_NAME.getName(),oldMetaName);
    }
 else {
      connection.setPropertyValue(EParameterName.UNIQUE_NAME.getName(),oldName);
    }
  }
  if (connection.getLineStyle().hasConnectionCategory(IConnectionCategory.UNIQUE_NAME)) {
    connection.getSource().getProcess().removeUniqueConnectionName(newName);
    connection.getSource().getProcess().addUniqueConnectionName(oldName);
  }
  ConnectionListController.renameConnectionInElement(newName,oldName,connection.getSource());
  IExternalNode externalNode=connection.getTarget().getExternalNode();
  if (externalNode != null) {
    externalNode.renameInputConnection(newName,oldName);
  }
  externalNode=connection.getSource().getExternalNode();
  if (externalNode != null) {
    externalNode.renameOutputConnection(newName,oldName);
  }
  UpgradeElementHelper.renameData(connection.getTarget(),newName,oldName);
  ((Process)connection.getSource().getProcess()).checkProcess();
}",0.969549330085262
117998,"@Override public void execute(){
  oldName=connection.getName();
  connection.setName(newName);
  IElementParameter elementParameter=connection.getElementParameter(EParameterName.UNIQUE_NAME.getName());
  if (elementParameter != null) {
    if (connection.getLineStyle().hasConnectionCategory(IConnectionCategory.TABLE)) {
      oldMetaName=connection.getMetaName();
      connection.setPropertyValue(EParameterName.UNIQUE_NAME.getName(),connection.getMetaName());
    }
 else {
      connection.setPropertyValue(EParameterName.UNIQUE_NAME.getName(),newName);
    }
  }
  if (connection.getLineStyle().hasConnectionCategory(IConnectionCategory.UNIQUE_NAME)) {
    connection.getSource().getProcess().removeUniqueConnectionName(oldName);
    connection.getSource().getProcess().addUniqueConnectionName(newName);
  }
  ConnectionListController.renameConnectionInElement(oldName,newName,connection.getSource());
  ConnectionListController.renameConnectionInElement(oldName,newName,connection.getTarget());
  IExternalNode externalNode=connection.getTarget().getExternalNode();
  if (externalNode != null) {
    externalNode.renameInputConnection(oldName,newName);
  }
  externalNode=connection.getSource().getExternalNode();
  if (externalNode != null) {
    externalNode.renameOutputConnection(oldName,newName);
  }
  ((Process)connection.getSource().getProcess()).checkProcess();
}","@Override public void execute(){
  oldName=connection.getName();
  connection.setName(newName);
  IElementParameter elementParameter=connection.getElementParameter(EParameterName.UNIQUE_NAME.getName());
  if (elementParameter != null) {
    if (connection.getLineStyle().hasConnectionCategory(IConnectionCategory.TABLE)) {
      oldMetaName=connection.getMetaName();
      connection.setPropertyValue(EParameterName.UNIQUE_NAME.getName(),connection.getMetaName());
    }
 else {
      connection.setPropertyValue(EParameterName.UNIQUE_NAME.getName(),newName);
    }
  }
  if (connection.getLineStyle().hasConnectionCategory(IConnectionCategory.UNIQUE_NAME)) {
    connection.getSource().getProcess().removeUniqueConnectionName(oldName);
    connection.getSource().getProcess().addUniqueConnectionName(newName);
  }
  ConnectionListController.renameConnectionInElement(oldName,newName,connection.getSource());
  ConnectionListController.renameConnectionInElement(oldName,newName,connection.getTarget());
  IExternalNode externalNode=connection.getTarget().getExternalNode();
  if (externalNode != null) {
    externalNode.renameInputConnection(oldName,newName);
  }
  externalNode=connection.getSource().getExternalNode();
  if (externalNode != null) {
    externalNode.renameOutputConnection(oldName,newName);
  }
  UpgradeElementHelper.renameData(connection.getTarget(),oldName,newName);
  ((Process)connection.getSource().getProcess()).checkProcess();
}",0.9735449735449736
117999,"@Override protected boolean filterRepositoryNode(RepositoryNode node){
  if (node == null) {
    return false;
  }
  if (node.isBin()) {
    return false;
  }
  if (node.getObject() != null) {
    ERepositoryStatus status=FACTORY.getStatus(node.getObject());
    if (status == ERepositoryStatus.LOCK_BY_OTHER || (status == ERepositoryStatus.LOCK_BY_USER && RepositoryManager.isOpenedItemInEditor(node.getObject()))) {
      return false;
    }
  }
  ERepositoryObjectType type=node.getObjectType();
  if (type == null) {
    if (node.getProperties(EProperties.LABEL) instanceof ERepositoryObjectType) {
      type=(ERepositoryObjectType)node.getProperties(EProperties.LABEL);
    }
    if (type == null) {
      return false;
    }
  }
  if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.PROCESS_MR || type == ERepositoryObjectType.PROCESS_ROUTE || type == ERepositoryObjectType.PROCESS_SPARK || type == ERepositoryObjectType.PROCESS_SPARKSTREAMING || type == ERepositoryObjectType.PROCESS_STORM) {
    return true;
  }
  return false;
}","@Override protected boolean filterRepositoryNode(RepositoryNode node){
  if (node == null) {
    return false;
  }
  if (node.isBin()) {
    return false;
  }
  if (node.getObject() != null) {
    ERepositoryStatus status=FACTORY.getStatus(node.getObject());
    if (status == ERepositoryStatus.LOCK_BY_OTHER || (status == ERepositoryStatus.LOCK_BY_USER && RepositoryManager.isOpenedItemInEditor(node.getObject()))) {
      return false;
    }
  }
  ERepositoryObjectType type=node.getObjectType();
  if (type == null) {
    if (node.getProperties(EProperties.LABEL) instanceof ERepositoryObjectType) {
      type=(ERepositoryObjectType)node.getProperties(EProperties.LABEL);
    }
    if (type == null) {
      return false;
    }
  }
  if (type == ERepositoryObjectType.FOLDER) {
    if (node.getObject() instanceof Folder) {
      type=((Folder)node.getObject()).getContentType();
    }
  }
  if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.PROCESS_MR || type == ERepositoryObjectType.valueOf(NODENAME_ROUTE_DESIGNS) || type == ERepositoryObjectType.PROCESS_ROUTE || type == ERepositoryObjectType.PROCESS_SPARK || type == ERepositoryObjectType.PROCESS_SPARKSTREAMING || type == ERepositoryObjectType.PROCESS_STORM) {
    return true;
  }
  return false;
}",0.9049850873455476
118000,"@Test public void testLoadComponents(){
  ComponentService componentService=ComponentsUtils.getComponentService();
  Set<ComponentDefinition> componentDefinitions=componentService.getAllComponents();
  Set<IComponent> coms=ComponentsFactoryProvider.getInstance().getComponents();
  List<IComponent> comList=new ArrayList<IComponent>();
  for (  ComponentDefinition componentDefinition : componentDefinitions) {
    for (    IComponent com : coms) {
      if (com.getName().equals(componentDefinition.getName())) {
        comList.add(com);
        break;
      }
    }
  }
  coms.removeAll(comList);
  ComponentsUtils.loadComponents(componentService);
  coms=ComponentsFactoryProvider.getInstance().getComponents();
  for (  ComponentDefinition componentDefinition : componentDefinitions) {
    boolean foundCom=false;
    if (componentDefinition.getName().equals(""String_Node_Str"")) {
      continue;
    }
    for (    IComponent com : coms) {
      if (com.getName().equals(componentDefinition.getName())) {
        foundCom=true;
        break;
      }
    }
    assertFalse(foundCom);
  }
}","@Test public void testLoadComponents(){
  ComponentService componentService=ComponentsUtils.getComponentService();
  Set<ComponentDefinition> componentDefinitions=componentService.getAllComponents();
  Set<IComponent> coms=ComponentsFactoryProvider.getInstance().getComponents();
  List<IComponent> comList=new ArrayList<IComponent>();
  for (  ComponentDefinition componentDefinition : componentDefinitions) {
    for (    IComponent com : coms) {
      if (com.getName().equals(componentDefinition.getName())) {
        comList.add(com);
        break;
      }
    }
  }
  coms.removeAll(comList);
  ComponentsUtils.loadComponents(componentService);
  coms=ComponentsFactoryProvider.getInstance().getComponents();
  for (  ComponentDefinition componentDefinition : componentDefinitions) {
    if (componentDefinition.getName().equals(""String_Node_Str"")) {
      continue;
    }
    for (    IComponent com : coms) {
      if (com.getName().equals(componentDefinition.getName())) {
        assertFalse(""String_Node_Str"" + componentDefinition.getName(),true);
      }
    }
  }
}",0.9319227230910764
