record_number,buggy_code,fixed_code,code_similarity
131001,"private DSSDocument getAttachment(){
  logger.debug(""String_Node_Str"");
  DSSDocument attachment;
  if (dataFiles.size() == 0) {
    String errorMessage=""String_Node_Str"";
    logger.error(errorMessage);
    throw new DigiDoc4JException(errorMessage);
  }
  Iterator<String> iterator=dataFiles.keySet().iterator();
  attachment=getDssDocumentFromDataFile(dataFiles.get(iterator.next()));
  while (iterator.hasNext()) {
    String fileName=iterator.next();
    attachment.setNextDocument(getDssDocumentFromDataFile(dataFiles.get(fileName)));
  }
  return attachment;
}","private DSSDocument getAttachment(){
  logger.debug(""String_Node_Str"");
  if (dataFiles.size() == 0) {
    String errorMessage=""String_Node_Str"";
    logger.error(errorMessage);
    throw new DigiDoc4JException(errorMessage);
  }
  Iterator<String> iterator=dataFiles.keySet().iterator();
  DSSDocument firstAttachment=getDssDocumentFromDataFile(dataFiles.get(iterator.next()));
  DSSDocument lastAttachment=firstAttachment;
  while (iterator.hasNext()) {
    String fileName=iterator.next();
    DSSDocument newAttachment=getDssDocumentFromDataFile(dataFiles.get(fileName));
    lastAttachment.setNextDocument(newAttachment);
    lastAttachment=newAttachment;
  }
  return firstAttachment;
}",0.7132644956314536
131002,"private void loadSignatures(SignedDocumentValidator validator){
  logger.debug(""String_Node_Str"");
  Map<String,SimpleReport> simpleReports=loadValidationResults(validator);
  List<AdvancedSignature> signatureList=validator.getSignatures();
  additionalVerificationErrors=new HashMap<>();
  for (  AdvancedSignature advancedSignature : signatureList) {
    List<DigiDoc4JException> validationErrors=new ArrayList<>();
    String reportSignatureId=advancedSignature.getId();
    additionalVerificationErrors.put(reportSignatureId,validatePolicy(advancedSignature));
    DigiDoc4JException referenceError=validateSignedPropertiesReference(advancedSignature);
    if (referenceError != null)     additionalVerificationErrors.get(reportSignatureId).add(referenceError);
    SimpleReport simpleReport=getSimpleReport(simpleReports,reportSignatureId);
    if (simpleReport != null) {
      for (      Conclusion.BasicInfo error : simpleReport.getErrors(reportSignatureId)) {
        String errorMessage=error.toString();
        logger.info(errorMessage);
        if (errorMessage.contains(MessageTag.BBB_XCV_ISCR_ANS.getMessage()))         validationErrors.add(new CertificateRevokedException(errorMessage));
 else         validationErrors.add(new DigiDoc4JException(errorMessage));
      }
    }
    validationErrors.addAll(additionalVerificationErrors.get(reportSignatureId));
    signatures.add(new BDocSignature((XAdESSignature)advancedSignature,validationErrors));
  }
}","private void loadSignatures(SignedDocumentValidator validator){
  logger.debug(""String_Node_Str"");
  Map<String,SimpleReport> simpleReports=loadValidationResults(validator);
  List<AdvancedSignature> signatureList=validator.getSignatures();
  additionalVerificationErrors=new LinkedHashMap<>();
  for (  AdvancedSignature advancedSignature : signatureList) {
    List<DigiDoc4JException> validationErrors=new ArrayList<>();
    String reportSignatureId=advancedSignature.getId();
    additionalVerificationErrors.put(reportSignatureId,validatePolicy(advancedSignature));
    DigiDoc4JException referenceError=validateSignedPropertiesReference(advancedSignature);
    if (referenceError != null)     additionalVerificationErrors.get(reportSignatureId).add(referenceError);
    SimpleReport simpleReport=getSimpleReport(simpleReports,reportSignatureId);
    if (simpleReport != null) {
      for (      Conclusion.BasicInfo error : simpleReport.getErrors(reportSignatureId)) {
        String errorMessage=error.toString();
        logger.info(errorMessage);
        if (errorMessage.contains(MessageTag.BBB_XCV_ISCR_ANS.getMessage()))         validationErrors.add(new CertificateRevokedException(errorMessage));
 else         validationErrors.add(new DigiDoc4JException(errorMessage));
      }
    }
    validationErrors.addAll(additionalVerificationErrors.get(reportSignatureId));
    signatures.add(new BDocSignature((XAdESSignature)advancedSignature,validationErrors));
  }
}",0.9979633401221996
131003,"private void extend(SignatureLevel signatureLevel){
  if (signatureLevel == dssSignatureParameters.getSignatureLevel())   throw new DigiDoc4JException(""String_Node_Str"");
  commonCertificateVerifier.setTrustedCertSource(configuration.getTSL());
  SKOnlineOCSPSource ocspSource=new SKOnlineOCSPSource(configuration);
  ocspSource.setUserAgent(Helper.createUserAgent(this));
  commonCertificateVerifier.setOcspSource(ocspSource);
  asicService.setTspSource(new OnlineTSPSource(getConfiguration().getTspSource()));
  dssSignatureParameters.setSignatureLevel(signatureLevel);
  signedDocument=new InMemoryDocument(asicService.extendDocument(signedDocument,dssSignatureParameters).getBytes(),signedDocument.getName(),signedDocument.getMimeType());
  signatures=new ArrayList<>();
  SignedDocumentValidator validator=ASiCXMLDocumentValidator.fromDocument(signedDocument);
  validate(validator);
  List<AdvancedSignature> signatureList=validator.getSignatures();
  for (  AdvancedSignature advancedSignature : signatureList) {
    signatures.add(new BDocSignature((XAdESSignature)advancedSignature));
  }
}","private void extend(SignatureLevel signatureLevel){
  if (signatureLevel == dssSignatureParameters.getSignatureLevel())   throw new DigiDoc4JException(""String_Node_Str"");
  commonCertificateVerifier.setTrustedCertSource(configuration.getTSL());
  SKOnlineOCSPSource ocspSource=new SKOnlineOCSPSource(configuration);
  ocspSource.setUserAgent(Helper.createUserAgent(this));
  commonCertificateVerifier.setOcspSource(ocspSource);
  asicService.setTspSource(new OnlineTSPSource(getConfiguration().getTspSource()));
  dssSignatureParameters.setSignatureLevel(signatureLevel);
  DSSDocument extendedDocument=asicService.extendDocument(signedDocument,dssSignatureParameters);
  signedDocument=new InMemoryDocument(extendedDocument.getBytes(),signedDocument.getName(),signedDocument.getMimeType());
  signatures=new ArrayList<>();
  SignedDocumentValidator validator=ASiCXMLDocumentValidator.fromDocument(signedDocument);
  validate(validator);
  List<AdvancedSignature> signatureList=validator.getSignatures();
  for (  AdvancedSignature advancedSignature : signatureList) {
    signatures.add(new BDocSignature((XAdESSignature)advancedSignature));
  }
}",0.9221183800623052
131004,"/** 
 * Creates in memory document container.
 * @param data     file content
 * @param fileName file name with path
 * @param mimeType MIME type of the data file, for example 'text/plain' or 'application/msword'
 */
public DataFile(byte[] data,String fileName,String mimeType){
  document=new InMemoryDocument(data,fileName,MimeType.fromCode(mimeType));
}","/** 
 * Creates in memory document container.
 * @param data     file content
 * @param fileName file name with path
 * @param mimeType MIME type of the data file, for example 'text/plain' or 'application/msword'
 */
public DataFile(byte[] data,String fileName,String mimeType){
  loadDocument(data,fileName,mimeType);
}",0.9289940828402368
131005,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Object item=adapter.getItem(position);
  ((MainActivity)getActivity()).playRadio((Radio)item);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Object item=list.getAdapter().getItem(position);
  ((MainActivity)getActivity()).playRadio((Radio)item);
}",0.96875
131006,"@Override public void gotoPlayingItemPosition(PlayableItem playingItem){
  Radio playingRadio=(Radio)playingItem;
  for (int i=0; i < adapter.getCount(); i++) {
    Object item=adapter.getItem(i);
    if (item instanceof Radio) {
      if (item.equals(playingRadio)) {
        final int position=i;
        list.post(new Runnable(){
          @Override public void run(){
            list.smoothScrollToPosition(position);
          }
        }
);
        break;
      }
    }
  }
}","@Override public void gotoPlayingItemPosition(PlayableItem playingItem){
  Radio playingRadio=(Radio)playingItem;
  for (int i=0; i < list.getAdapter().getCount(); i++) {
    Object item=list.getAdapter().getItem(i);
    if (item instanceof Radio) {
      if (item.equals(playingRadio)) {
        final int position=i;
        list.post(new Runnable(){
          @Override public void run(){
            list.smoothScrollToPosition(position);
          }
        }
);
        break;
      }
    }
  }
}",0.951219512195122
131007,"@Override public void updateListView(){
  MainActivity activity=(MainActivity)getActivity();
  Radio playingRadio=null;
  if (activity.getCurrentPlayingItem() instanceof Radio)   playingRadio=(Radio)activity.getCurrentPlayingItem();
  adapter=new RadioArrayAdapter(this,Radio.getRadios(),playingRadio);
  list.setAdapter(adapter);
}","@Override public void updateListView(){
  MainActivity activity=(MainActivity)getActivity();
  Radio playingRadio=null;
  if (activity.getCurrentPlayingItem() instanceof Radio)   playingRadio=(Radio)activity.getCurrentPlayingItem();
  RadioArrayAdapter adapter=new RadioArrayAdapter(this,Radio.getRadios(),playingRadio);
  list.setAdapter(adapter);
}",0.9736070381231672
131008,"public void getImageAsync(PlayableItem item,ImageView imageView){
  Bitmap image;
synchronized (cache) {
    image=cache.get(item.getPlayableUri());
  }
  if (image == null) {
    ImageLoaderTask imageLoader=new ImageLoaderTask(item,imageView);
    imageLoader.execute();
  }
 else {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
}","public void getImageAsync(PlayableItem item,ImageView imageView){
  Bitmap image;
synchronized (cache) {
    image=cache.get(item.getPlayableUri());
  }
  if (image == null && item.hasImage()) {
    ImageLoaderTask imageLoader=new ImageLoaderTask(item,imageView);
    imageLoader.execute();
  }
 else {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
}",0.974900924702774
131009,"public ImagesCache(Context context){
  imagesSize=(int)context.getResources().getDimension(R.dimen.songImageSize);
  cache=new LruCache<String,Bitmap>(Constants.IMAGES_CACHE_SIZE);
}","public ImagesCache(Context context){
  imagesSize=(int)context.getResources().getDimension(R.dimen.songImageSize);
  cache=new LruCache<>(Constants.IMAGES_CACHE_SIZE);
}",0.9629629629629628
131010,"@Override protected void onPostExecute(Bitmap image){
  if (image != null) {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
 else {
    imageView.setImageDrawable(null);
  }
}","@Override protected void onPostExecute(Bitmap image){
  if (image != null) {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
}",0.8663101604278075
131011,"public void getImageAsync(PlayableItem item,ImageView imageView){
  Bitmap image=null;
synchronized (cache) {
    image=cache.get(item.getPlayableUri());
  }
  if (image == null) {
    ImageLoaderTask imageLoader=new ImageLoaderTask(item,imageView);
    imageLoader.execute();
  }
 else {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
}","public void getImageAsync(PlayableItem item,ImageView imageView){
  Bitmap image;
synchronized (cache) {
    image=cache.get(item.getPlayableUri());
  }
  if (image == null) {
    ImageLoaderTask imageLoader=new ImageLoaderTask(item,imageView);
    imageLoader.execute();
  }
 else {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
}",0.993270524899058
131012,"public BrowserArrayAdapter(BrowserFragment fragment,ArrayList<Object> values,BrowserSong playingSong){
  super(fragment.getActivity(),R.layout.song_item,values);
  this.values=values;
  this.playingSong=playingSong;
  this.fragment=fragment;
  activity=(MainActivity)fragment.getActivity();
  this.imagesCache=((MusicPlayerApplication)activity.getApplication()).imagesCache;
  inflater=activity.getLayoutInflater();
  songImage=activity.getResources().getDrawable(R.drawable.audio);
}","public BrowserArrayAdapter(BrowserFragment fragment,ArrayList<Object> values,BrowserSong playingSong){
  super(fragment.getActivity(),R.layout.song_item,values);
  this.values=values;
  this.playingSong=playingSong;
  this.fragment=fragment;
  activity=(MainActivity)fragment.getActivity();
  this.imagesCache=((MusicPlayerApplication)activity.getApplication()).imagesCache;
  inflater=activity.getLayoutInflater();
}",0.925638179800222
131013,"@Override public View getView(int position,View view,ViewGroup parent){
  int type=getItemViewType(position);
  Object value=values.get(position);
  ViewHolder viewHolder;
  if (view == null) {
    viewHolder=new ViewHolder();
    if (type == TYPE_DIRECTORY) {
      view=inflater.inflate(R.layout.folder_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textViewFolderItemFolder);
      viewHolder.menu=(ImageButton)view.findViewById(R.id.buttonMenu);
    }
 else     if (type == TYPE_SONG) {
      view=inflater.inflate(R.layout.song_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textViewSongItemTitle);
      viewHolder.artist=(TextView)view.findViewById(R.id.textViewSongItemArtist);
      viewHolder.image=(ImageView)view.findViewById(R.id.imageViewItemImage);
      viewHolder.card=view.findViewById(R.id.card);
      viewHolder.menu=(ImageButton)view.findViewById(R.id.buttonMenu);
    }
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  if (type == TYPE_DIRECTORY) {
    final File file=(File)value;
    viewHolder.title.setText(file.getName());
    final PopupMenu popup=new PopupMenu(fragment.getActivity(),viewHolder.menu);
    popup.getMenuInflater().inflate(R.menu.contextmenu_browserdirectory,popup.getMenu());
    popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
switch (item.getItemId()) {
case R.id.menu_addFolderToPlaylist:
          AddToPlaylistDialog.showDialog(activity,file);
        return true;
case R.id.menu_setAsBaseFolder:
      activity.setBaseFolder(file);
    return true;
}
return true;
}
}
);
viewHolder.menu.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
popup.show();
}
}
);
}
 else if (type == TYPE_SONG) {
final BrowserSong song=(BrowserSong)value;
String trackNumber=""String_Node_Str"";
if (song.getTrackNumber() != null) trackNumber=song.getTrackNumber() + ""String_Node_Str"";
viewHolder.title.setText(trackNumber + song.getTitle());
viewHolder.artist.setText(song.getArtist());
if (song.equals(playingSong)) {
viewHolder.card.setBackgroundResource(R.drawable.card_playing);
viewHolder.image.setImageResource(R.drawable.play_orange);
}
 else {
viewHolder.card.setBackgroundResource(R.drawable.card);
viewHolder.image.setImageDrawable(songImage);
if (song.hasImage()) {
imagesCache.getImageAsync(song,viewHolder.image);
}
}
viewHolder.menu.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
AddToPlaylistDialog.showDialog(activity,song);
}
}
);
}
viewHolder.menu.setFocusable(false);
view.setTag(viewHolder);
return view;
}","@Override public View getView(int position,View view,ViewGroup parent){
  int type=getItemViewType(position);
  Object value=values.get(position);
  ViewHolder viewHolder;
  if (view == null) {
    viewHolder=new ViewHolder();
    if (type == TYPE_DIRECTORY) {
      view=inflater.inflate(R.layout.folder_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textViewFolderItemFolder);
      viewHolder.menu=(ImageButton)view.findViewById(R.id.buttonMenu);
    }
 else     if (type == TYPE_SONG) {
      view=inflater.inflate(R.layout.song_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textViewSongItemTitle);
      viewHolder.artist=(TextView)view.findViewById(R.id.textViewSongItemArtist);
      viewHolder.image=(ImageView)view.findViewById(R.id.imageViewItemImage);
      viewHolder.card=view.findViewById(R.id.card);
      viewHolder.menu=(ImageButton)view.findViewById(R.id.buttonMenu);
    }
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  if (type == TYPE_DIRECTORY) {
    final File file=(File)value;
    viewHolder.title.setText(file.getName());
    final PopupMenu popup=new PopupMenu(fragment.getActivity(),viewHolder.menu);
    popup.getMenuInflater().inflate(R.menu.contextmenu_browserdirectory,popup.getMenu());
    popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      MenuItem item){
switch (item.getItemId()) {
case R.id.menu_addFolderToPlaylist:
          AddToPlaylistDialog.showDialog(activity,file);
        return true;
case R.id.menu_setAsBaseFolder:
      activity.setBaseFolder(file);
    return true;
}
return true;
}
}
);
viewHolder.menu.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
popup.show();
}
}
);
}
 else if (type == TYPE_SONG) {
final BrowserSong song=(BrowserSong)value;
String trackNumber=""String_Node_Str"";
if (song.getTrackNumber() != null) trackNumber=song.getTrackNumber() + ""String_Node_Str"";
viewHolder.title.setText(trackNumber + song.getTitle());
viewHolder.artist.setText(song.getArtist());
if (song.equals(playingSong)) {
viewHolder.card.setBackgroundResource(R.drawable.card_playing);
viewHolder.image.setImageResource(R.drawable.play_orange);
}
 else {
viewHolder.card.setBackgroundResource(R.drawable.card);
viewHolder.image.setImageResource(R.drawable.audio);
if (song.hasImage()) {
imagesCache.getImageAsync(song,viewHolder.image);
}
}
viewHolder.menu.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
AddToPlaylistDialog.showDialog(activity,song);
}
}
);
}
viewHolder.menu.setFocusable(false);
view.setTag(viewHolder);
return view;
}",0.9946166697605346
131014,"@Override public View getView(int position,View view,ViewGroup parent){
  final BrowserSong song=songs.get(position);
  ViewHolder viewHolder;
  if (view == null) {
    viewHolder=new ViewHolder();
    view=inflater.inflate(R.layout.song_item,parent,false);
    viewHolder.title=(TextView)view.findViewById(R.id.textViewSongItemTitle);
    viewHolder.artist=(TextView)view.findViewById(R.id.textViewSongItemArtist);
    viewHolder.image=(ImageView)view.findViewById(R.id.imageViewItemImage);
    viewHolder.menu=(ImageButton)view.findViewById(R.id.buttonMenu);
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  viewHolder.title.setText(song.getTitle());
  viewHolder.artist.setText(song.getArtist());
  imagesCache.getImageAsync(song,viewHolder.image);
  viewHolder.menu.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      AddToPlaylistDialog.showDialog(activity,song);
    }
  }
);
  viewHolder.menu.setFocusable(false);
  view.setTag(viewHolder);
  return view;
}","@Override public View getView(int position,View view,ViewGroup parent){
  final BrowserSong song=songs.get(position);
  ViewHolder viewHolder;
  if (view == null) {
    viewHolder=new ViewHolder();
    view=inflater.inflate(R.layout.song_item,parent,false);
    viewHolder.title=(TextView)view.findViewById(R.id.textViewSongItemTitle);
    viewHolder.artist=(TextView)view.findViewById(R.id.textViewSongItemArtist);
    viewHolder.image=(ImageView)view.findViewById(R.id.imageViewItemImage);
    viewHolder.menu=(ImageButton)view.findViewById(R.id.buttonMenu);
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  viewHolder.title.setText(song.getTitle());
  viewHolder.artist.setText(song.getArtist());
  viewHolder.image.setImageResource(R.drawable.audio);
  imagesCache.getImageAsync(song,viewHolder.image);
  viewHolder.menu.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      AddToPlaylistDialog.showDialog(activity,song);
    }
  }
);
  viewHolder.menu.setFocusable(false);
  view.setTag(viewHolder);
  return view;
}",0.9738965353583294
131015,"public void quitApplication(){
  stopService(serviceIntent);
  finish();
}","public void quitApplication(){
  app.currentPage=-1;
  stopService(serviceIntent);
  finish();
}",0.8705882352941177
131016,"public void getImageAsync(PlayableItem item,ImageView imageView){
  Bitmap image=null;
synchronized (cache) {
    image=cache.get(item.getPlayableUri());
  }
  if (image == null) {
    imageView.setImageDrawable(songImage);
    ImageLoaderTask imageLoader=new ImageLoaderTask(item,imageView);
    imageLoader.execute();
  }
 else {
    imageView.setImageBitmap(image);
  }
}","public void getImageAsync(PlayableItem item,ImageView imageView){
  Bitmap image=null;
synchronized (cache) {
    image=cache.get(item.getPlayableUri());
  }
  if (image == null) {
    imageView.setImageDrawable(songImage);
    ImageLoaderTask imageLoader=new ImageLoaderTask(item,imageView);
    imageLoader.execute();
  }
 else {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
}",0.945638432364096
131017,"private void startRoutine(){
  updatePlayingItem();
  updateExtendedMenu();
  if (searchSong != null) {
    boolean ok=musicService.playItem(searchSong);
    if (!ok)     Utils.showMessageDialog(this,R.string.errorSong,R.string.errorSongMessage);
    gotoPlayingItemPosition();
    searchSong=null;
  }
  if (intentFile != null) {
    BrowserSong song=new BrowserSong(intentFile);
    playItem(song);
    intentFile=null;
  }
  if (startPollingThread)   startPollingThread();
}","private void startRoutine(){
  updateExtendedMenu();
  if (searchSong != null) {
    playItem(searchSong);
    gotoPlayingItemPosition();
    searchSong=null;
  }
 else {
    updatePlayingItem();
  }
  if (intentFile != null) {
    BrowserSong song=new BrowserSong(intentFile);
    playItem(song);
    intentFile=null;
  }
 else {
    updatePlayingItem();
  }
  if (startPollingThread)   startPollingThread();
}",0.759009009009009
131018,"public ImagesCache(Context context){
  imagesSize=(int)context.getResources().getDimension(R.dimen.songImageSize);
  cache=new LruCache<String,Bitmap>(Constants.IMAGES_CACHE_SIZE);
  songImage=context.getResources().getDrawable(R.drawable.audio);
}","public ImagesCache(Context context){
  imagesSize=(int)context.getResources().getDimension(R.dimen.songImageSize);
  cache=new LruCache<String,Bitmap>(Constants.IMAGES_CACHE_SIZE);
}",0.8465116279069768
131019,"public void getImageAsync(PlayableItem item,ImageView imageView){
  Bitmap image=null;
synchronized (cache) {
    image=cache.get(item.getPlayableUri());
  }
  if (image == null) {
    imageView.setImageDrawable(songImage);
    ImageLoaderTask imageLoader=new ImageLoaderTask(item,imageView);
    imageLoader.execute();
  }
 else {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
}","public void getImageAsync(PlayableItem item,ImageView imageView){
  Bitmap image=null;
synchronized (cache) {
    image=cache.get(item.getPlayableUri());
  }
  if (image == null) {
    ImageLoaderTask imageLoader=new ImageLoaderTask(item,imageView);
    imageLoader.execute();
  }
 else {
    imageView.setImageBitmap(image);
    imageView.setVisibility(View.VISIBLE);
  }
}",0.4905183312262958
131020,"public BrowserArrayAdapter(MainActivity activity,ArrayList<Object> values,BrowserSong playingSong){
  super(activity,values);
  this.playingSong=playingSong;
  this.imagesCache=((MusicPlayerApplication)activity.getApplication()).imagesCache;
}","public BrowserArrayAdapter(MainActivity activity,ArrayList<Object> values,BrowserSong playingSong){
  super(activity,values);
  this.playingSong=playingSong;
  this.imagesCache=((MusicPlayerApplication)activity.getApplication()).imagesCache;
  songImage=activity.getResources().getDrawable(R.drawable.audio);
}",0.8788426763110307
131021,"@Override public View getView(int position,View view,ViewGroup parent){
  int type=getItemViewType(position);
  Object value=values.get(position);
  ViewHolder viewHolder;
  if (view == null) {
    viewHolder=new ViewHolder();
    if (type == TYPE_ACTION) {
      view=inflater.inflate(R.layout.action_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textView);
      viewHolder.title.setTextColor(view.getResources().getColor(R.color.orange1));
      viewHolder.image=(ImageView)view.findViewById(R.id.imageView);
      viewHolder.image.setImageResource(R.drawable.back);
    }
 else     if (type == TYPE_DIRECTORY) {
      view=inflater.inflate(R.layout.folder_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textViewFolderItemFolder);
    }
 else     if (type == TYPE_SONG) {
      view=inflater.inflate(R.layout.song_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textViewSongItemTitle);
      viewHolder.artist=(TextView)view.findViewById(R.id.textViewSongItemArtist);
      viewHolder.image=(ImageView)view.findViewById(R.id.imageViewItemImage);
      viewHolder.card=view.findViewById(R.id.card);
    }
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  if (type == TYPE_ACTION) {
    Action action=(Action)value;
    viewHolder.title.setText(action.msg);
  }
 else   if (type == TYPE_DIRECTORY) {
    File file=(File)value;
    viewHolder.title.setText(file.getName());
  }
 else   if (type == TYPE_SONG) {
    BrowserSong song=(BrowserSong)value;
    String trackNumber=""String_Node_Str"";
    if (song.getTrackNumber() != null)     trackNumber=song.getTrackNumber() + ""String_Node_Str"";
    viewHolder.title.setText(trackNumber + song.getTitle());
    viewHolder.artist.setText(song.getArtist());
    if (song.equals(playingSong)) {
      viewHolder.card.setBackgroundResource(R.drawable.card_playing);
      viewHolder.image.setImageResource(R.drawable.play_orange);
    }
 else {
      viewHolder.card.setBackgroundResource(R.drawable.card);
      if (song.hasImage()) {
        imagesCache.getImageAsync(song,viewHolder.image);
      }
    }
  }
  view.setTag(viewHolder);
  return view;
}","@Override public View getView(int position,View view,ViewGroup parent){
  int type=getItemViewType(position);
  Object value=values.get(position);
  ViewHolder viewHolder;
  if (view == null) {
    viewHolder=new ViewHolder();
    if (type == TYPE_ACTION) {
      view=inflater.inflate(R.layout.action_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textView);
      viewHolder.title.setTextColor(view.getResources().getColor(R.color.orange1));
      viewHolder.image=(ImageView)view.findViewById(R.id.imageView);
      viewHolder.image.setImageResource(R.drawable.back);
    }
 else     if (type == TYPE_DIRECTORY) {
      view=inflater.inflate(R.layout.folder_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textViewFolderItemFolder);
    }
 else     if (type == TYPE_SONG) {
      view=inflater.inflate(R.layout.song_item,parent,false);
      viewHolder.title=(TextView)view.findViewById(R.id.textViewSongItemTitle);
      viewHolder.artist=(TextView)view.findViewById(R.id.textViewSongItemArtist);
      viewHolder.image=(ImageView)view.findViewById(R.id.imageViewItemImage);
      viewHolder.card=view.findViewById(R.id.card);
    }
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  if (type == TYPE_ACTION) {
    Action action=(Action)value;
    viewHolder.title.setText(action.msg);
  }
 else   if (type == TYPE_DIRECTORY) {
    File file=(File)value;
    viewHolder.title.setText(file.getName());
  }
 else   if (type == TYPE_SONG) {
    BrowserSong song=(BrowserSong)value;
    String trackNumber=""String_Node_Str"";
    if (song.getTrackNumber() != null)     trackNumber=song.getTrackNumber() + ""String_Node_Str"";
    viewHolder.title.setText(trackNumber + song.getTitle());
    viewHolder.artist.setText(song.getArtist());
    if (song.equals(playingSong)) {
      viewHolder.card.setBackgroundResource(R.drawable.card_playing);
      viewHolder.image.setImageResource(R.drawable.play_orange);
    }
 else {
      viewHolder.card.setBackgroundResource(R.drawable.card);
      viewHolder.image.setImageDrawable(songImage);
      if (song.hasImage()) {
        imagesCache.getImageAsync(song,viewHolder.image);
      }
    }
  }
  view.setTag(viewHolder);
  return view;
}",0.9882882882882884
131022,"public EntityShip getEntity(World world){
  if (!isOK())   return null;
  EntityShip entity=new EntityShip(world);
  entity.setPilotSeat(shipMarkingBlock.blockMeta & 3,shipMarkingBlock.coords.chunkPosX - xOffset,shipMarkingBlock.coords.chunkPosY - yOffset,shipMarkingBlock.coords.chunkPosZ - zOffset);
  entity.getShipChunk().setCreationSpotBiomeGen(world.getBiomeGenForCoords(shipMarkingBlock.coords.chunkPosX,shipMarkingBlock.coords.chunkPosZ));
  boolean flag=world.getGameRules().getGameRuleBooleanValue(""String_Node_Str"");
  world.getGameRules().setOrCreateGameRule(""String_Node_Str"",""String_Node_Str"");
  try {
    TileEntity tileentity;
    int ix, iy, iz;
    for (    LocatedBlock lb : assembledBlocks) {
      ix=lb.coords.chunkPosX - xOffset;
      iy=lb.coords.chunkPosY - yOffset;
      iz=lb.coords.chunkPosZ - zOffset;
      tileentity=lb.tileEntity;
      if (tileentity != null || lb.block.hasTileEntity(lb.blockMeta) && (tileentity=world.getTileEntity(lb.coords.chunkPosX,lb.coords.chunkPosY,lb.coords.chunkPosZ)) != null) {
        world.removeTileEntity(lb.coords.chunkPosX,lb.coords.chunkPosY,lb.coords.chunkPosZ);
        tileentity.validate();
        tileentity.updateContainingBlockInfo();
        tileentity.blockType=lb.block;
        tileentity.blockMetadata=lb.blockMeta;
      }
      if (entity.getShipChunk().setBlockIDWithMetadata(ix,iy,iz,lb.block,lb.blockMeta)) {
        entity.getShipChunk().setTileEntity(ix,iy,iz,tileentity);
        world.setBlock(lb.coords.chunkPosX,lb.coords.chunkPosY,lb.coords.chunkPosZ,Blocks.air,1,2);
      }
    }
    for (    LocatedBlock block : assembledBlocks) {
      world.setBlockToAir(block.coords.chunkPosX,block.coords.chunkPosY,block.coords.chunkPosZ);
    }
  }
 catch (  Exception e) {
    resultCode=RESULT_ERROR_OCCURED;
    e.printStackTrace();
    return null;
  }
 finally {
    world.getGameRules().setOrCreateGameRule(""String_Node_Str"",String.valueOf(flag));
  }
  entity.getShipChunk().setChunkModified();
  entity.getShipChunk().onChunkLoad();
  entity.setLocationAndAngles(xOffset + entity.getShipChunk().getCenterX(),yOffset,zOffset + entity.getShipChunk().getCenterZ(),0F,0F);
  return entity;
}","public EntityShip getEntity(World world){
  if (!isOK())   return null;
  EntityShip entity=new EntityShip(world);
  entity.setPilotSeat(shipMarkingBlock.blockMeta & 3,shipMarkingBlock.coords.chunkPosX - xOffset,shipMarkingBlock.coords.chunkPosY - yOffset,shipMarkingBlock.coords.chunkPosZ - zOffset);
  entity.getShipChunk().setCreationSpotBiomeGen(world.getBiomeGenForCoords(shipMarkingBlock.coords.chunkPosX,shipMarkingBlock.coords.chunkPosZ));
  boolean flag=world.getGameRules().getGameRuleBooleanValue(""String_Node_Str"");
  world.getGameRules().setOrCreateGameRule(""String_Node_Str"",""String_Node_Str"");
  try {
    TileEntity tileentity;
    int ix, iy, iz;
    for (    LocatedBlock lb : assembledBlocks) {
      ix=lb.coords.chunkPosX - xOffset;
      iy=lb.coords.chunkPosY - yOffset;
      iz=lb.coords.chunkPosZ - zOffset;
      tileentity=lb.tileEntity;
      if (tileentity != null || lb.block.hasTileEntity(lb.blockMeta) && (tileentity=world.getTileEntity(lb.coords.chunkPosX,lb.coords.chunkPosY,lb.coords.chunkPosZ)) != null) {
        tileentity.validate();
      }
      if (entity.getShipChunk().setBlockIDWithMetadata(ix,iy,iz,lb.block,lb.blockMeta)) {
        entity.getShipChunk().setTileEntity(ix,iy,iz,tileentity);
        world.setBlock(lb.coords.chunkPosX,lb.coords.chunkPosY,lb.coords.chunkPosZ,Blocks.air,1,2);
      }
    }
    for (    LocatedBlock block : assembledBlocks) {
      world.setBlockToAir(block.coords.chunkPosX,block.coords.chunkPosY,block.coords.chunkPosZ);
    }
  }
 catch (  Exception e) {
    resultCode=RESULT_ERROR_OCCURED;
    e.printStackTrace();
    return null;
  }
 finally {
    world.getGameRules().setOrCreateGameRule(""String_Node_Str"",String.valueOf(flag));
  }
  entity.getShipChunk().setChunkModified();
  entity.getShipChunk().onChunkLoad();
  entity.setLocationAndAngles(xOffset + entity.getShipChunk().getCenterX(),yOffset,zOffset + entity.getShipChunk().getCenterZ(),0F,0F);
  return entity;
}",0.9355539464156408
131023,"public AssembleResult doDisassemble(){
  World world=ship.worldObj;
  MobileChunk chunk=ship.getShipChunk();
  AssembleResult result=new AssembleResult();
  result.xOffset=Integer.MAX_VALUE;
  result.yOffset=Integer.MAX_VALUE;
  result.zOffset=Integer.MAX_VALUE;
  int currentrot=Math.round(ship.rotationYaw / 90F) & 3;
  int deltarot=(-currentrot) & 3;
  ship.rotationYaw=currentrot * 90F;
  ship.rotationPitch=0F;
  float yaw=currentrot * MathHelperMod.PI_HALF;
  boolean flag=world.getGameRules().getGameRuleBooleanValue(""String_Node_Str"");
  world.getGameRules().setOrCreateGameRule(""String_Node_Str"",""String_Node_Str"");
  List<LocatedBlock> postlist=new ArrayList<LocatedBlock>(4);
  float ox=-chunk.getCenterX();
  float oy=-chunk.minY();
  float oz=-chunk.getCenterZ();
  Vec3 vec=Vec3.createVectorHelper(0D,0D,0D);
  TileEntity tileentity;
  Block block;
  int meta;
  int ix, iy, iz;
  for (int i=chunk.minX(); i < chunk.maxX(); i++) {
    for (int j=chunk.minY(); j < chunk.maxY(); j++) {
      for (int k=chunk.minZ(); k < chunk.maxZ(); k++) {
        block=chunk.getBlock(i,j,k);
        meta=chunk.getBlockMetadata(i,j,k);
        if (block == Blocks.air) {
          if (meta == 1)           continue;
        }
 else         if (block.isAir(world,i,j,k))         continue;
        tileentity=chunk.getTileEntity(i,j,k);
        meta=ArchimedesShipMod.instance.metaRotations.getRotatedMeta(block,meta,deltarot);
        vec.xCoord=i + ox;
        vec.yCoord=j + oy;
        vec.zCoord=k + oz;
        vec.rotateAroundY(yaw);
        ix=MathHelperMod.round_double(vec.xCoord + ship.posX);
        iy=MathHelperMod.round_double(vec.yCoord + ship.posY);
        iz=MathHelperMod.round_double(vec.zCoord + ship.posZ);
        if (!world.setBlock(ix,iy,iz,block,meta,2) || block != world.getBlock(ix,iy,iz)) {
          postlist.add(new LocatedBlock(block,meta,tileentity,new ChunkPosition(ix,iy,iz)));
          continue;
        }
        if (meta != world.getBlockMetadata(ix,iy,iz)) {
          world.setBlockMetadataWithNotify(ix,iy,iz,meta,2);
        }
        if (tileentity != null) {
          if (tileentity instanceof IShipTileEntity) {
            ((IShipTileEntity)tileentity).setParentShip(null,i,j,k);
          }
          NBTTagCompound comp=new NBTTagCompound();
          tileentity.writeToNBT(comp);
          TileEntity temp=new TileEntity();
          world.setTileEntity(ix,iy,iz,temp.createAndLoadEntity(comp));
          tileentity.readFromNBT(comp);
          tileentity.blockMetadata=meta;
        }
        if (!ArchimedesShipMod.instance.metaRotations.hasBlock(block)) {
          rotateBlock(block,world,ix,iy,iz,currentrot);
          block=world.getBlock(ix,iy,iz);
          meta=world.getBlockMetadata(ix,iy,iz);
          tileentity=world.getTileEntity(ix,iy,iz);
        }
        LocatedBlock lb=new LocatedBlock(block,meta,tileentity,new ChunkPosition(ix,iy,iz));
        result.assembleBlock(lb);
        if (block == ArchimedesShipMod.blockMarkShip && i == ship.seatX && j == ship.seatY && k == ship.seatZ) {
          result.shipMarkingBlock=lb;
        }
      }
    }
  }
  world.getGameRules().setOrCreateGameRule(""String_Node_Str"",String.valueOf(flag));
  for (  LocatedBlock ilb : postlist) {
    ix=ilb.coords.chunkPosX;
    iy=ilb.coords.chunkPosY;
    iz=ilb.coords.chunkPosZ;
    ArchimedesShipMod.modLog.debug(""String_Node_Str"" + ilb.toString());
    world.setBlock(ix,iy,iz,ilb.block,ilb.blockMeta,0);
    result.assembleBlock(ilb);
  }
  ship.setDead();
  if (result.shipMarkingBlock == null || !(result.shipMarkingBlock.tileEntity instanceof TileEntityHelm)) {
    result.resultCode=AssembleResult.RESULT_MISSING_MARKER;
  }
 else {
    result.checkConsistent(world);
  }
  return result;
}","public AssembleResult doDisassemble(){
  World world=ship.worldObj;
  MobileChunk chunk=ship.getShipChunk();
  AssembleResult result=new AssembleResult();
  result.xOffset=Integer.MAX_VALUE;
  result.yOffset=Integer.MAX_VALUE;
  result.zOffset=Integer.MAX_VALUE;
  int currentrot=Math.round(ship.rotationYaw / 90F) & 3;
  int deltarot=(-currentrot) & 3;
  ship.rotationYaw=currentrot * 90F;
  ship.rotationPitch=0F;
  float yaw=currentrot * MathHelperMod.PI_HALF;
  boolean flag=world.getGameRules().getGameRuleBooleanValue(""String_Node_Str"");
  world.getGameRules().setOrCreateGameRule(""String_Node_Str"",""String_Node_Str"");
  List<LocatedBlock> postlist=new ArrayList<LocatedBlock>(4);
  float ox=-chunk.getCenterX();
  float oy=-chunk.minY();
  float oz=-chunk.getCenterZ();
  Vec3 vec=Vec3.createVectorHelper(0D,0D,0D);
  TileEntity tileentity;
  Block block;
  int meta;
  int ix, iy, iz;
  for (int i=chunk.minX(); i < chunk.maxX(); i++) {
    for (int j=chunk.minY(); j < chunk.maxY(); j++) {
      for (int k=chunk.minZ(); k < chunk.maxZ(); k++) {
        block=chunk.getBlock(i,j,k);
        meta=chunk.getBlockMetadata(i,j,k);
        if (block == Blocks.air) {
          if (meta == 1)           continue;
        }
 else         if (block.isAir(world,i,j,k))         continue;
        tileentity=chunk.getTileEntity(i,j,k);
        meta=ArchimedesShipMod.instance.metaRotations.getRotatedMeta(block,meta,deltarot);
        vec.xCoord=i + ox;
        vec.yCoord=j + oy;
        vec.zCoord=k + oz;
        vec.rotateAroundY(yaw);
        ix=MathHelperMod.round_double(vec.xCoord + ship.posX);
        iy=MathHelperMod.round_double(vec.yCoord + ship.posY);
        iz=MathHelperMod.round_double(vec.zCoord + ship.posZ);
        if (!world.setBlock(ix,iy,iz,block,meta,2) || block != world.getBlock(ix,iy,iz)) {
          postlist.add(new LocatedBlock(block,meta,tileentity,new ChunkPosition(ix,iy,iz)));
          continue;
        }
        if (meta != world.getBlockMetadata(ix,iy,iz)) {
          world.setBlockMetadataWithNotify(ix,iy,iz,meta,2);
        }
        if (tileentity != null) {
          if (tileentity instanceof IShipTileEntity) {
            ((IShipTileEntity)tileentity).setParentShip(null,i,j,k);
          }
          tileentity.validate();
          world.setTileEntity(ix,iy,iz,tileentity);
        }
        if (!ArchimedesShipMod.instance.metaRotations.hasBlock(block)) {
          rotateBlock(block,world,ix,iy,iz,currentrot);
          block=world.getBlock(ix,iy,iz);
          meta=world.getBlockMetadata(ix,iy,iz);
          tileentity=world.getTileEntity(ix,iy,iz);
        }
        LocatedBlock lb=new LocatedBlock(block,meta,tileentity,new ChunkPosition(ix,iy,iz));
        result.assembleBlock(lb);
        if (block == ArchimedesShipMod.blockMarkShip && i == ship.seatX && j == ship.seatY && k == ship.seatZ) {
          result.shipMarkingBlock=lb;
        }
      }
    }
  }
  world.getGameRules().setOrCreateGameRule(""String_Node_Str"",String.valueOf(flag));
  for (  LocatedBlock ilb : postlist) {
    ix=ilb.coords.chunkPosX;
    iy=ilb.coords.chunkPosY;
    iz=ilb.coords.chunkPosZ;
    ArchimedesShipMod.modLog.debug(""String_Node_Str"" + ilb.toString());
    world.setBlock(ix,iy,iz,ilb.block,ilb.blockMeta,0);
    result.assembleBlock(ilb);
  }
  ship.setDead();
  if (result.shipMarkingBlock == null || !(result.shipMarkingBlock.tileEntity instanceof TileEntityHelm)) {
    result.resultCode=AssembleResult.RESULT_MISSING_MARKER;
  }
 else {
    result.checkConsistent(world);
  }
  return result;
}",0.9579739904175224
131024,"public boolean setBlockIDWithMetadata(int x,int y,int z,Block block,int meta){
  if (block == null)   return false;
  ExtendedBlockStorage storage=getBlockStorageOrCreate(x,y,z);
  int i=x & 15;
  int j=y & 15;
  int k=z & 15;
  Block currentblock=storage.getBlockByExtId(i,j,k);
  int currentmeta=storage.getExtBlockMetadata(i,j,k);
  if (currentblock == block && currentmeta == meta) {
    return false;
  }
  storage.func_150818_a(i,j,k,block);
  storage.setExtBlockMetadata(i,j,k,meta);
  if (boundsInit) {
    minX=Math.min(minX,x);
    minY=Math.min(minY,y);
    minZ=Math.min(minZ,z);
    maxX=Math.max(maxX,x + 1);
    maxY=Math.max(maxY,y + 1);
    maxZ=Math.max(maxZ,z + 1);
  }
 else {
    boundsInit=true;
    minX=x;
    minY=y;
    minZ=z;
    maxX=x + 1;
    maxY=y + 1;
    maxZ=z + 1;
  }
  blockCount++;
  setChunkModified();
  TileEntity tileentity;
  if (block.hasTileEntity(meta)) {
    tileentity=getTileEntity(x,y,z);
    if (tileentity == null) {
      tileentity=block.createTileEntity(worldObj,meta);
      setTileEntity(x,y,z,tileentity);
    }
    if (tileentity != null) {
      tileentity.updateContainingBlockInfo();
      tileentity.blockType=block;
      tileentity.blockMetadata=meta;
    }
  }
  return true;
}","public boolean setBlockIDWithMetadata(int x,int y,int z,Block block,int meta){
  if (block == null)   return false;
  ExtendedBlockStorage storage=getBlockStorageOrCreate(x,y,z);
  int i=x & 15;
  int j=y & 15;
  int k=z & 15;
  Block currentblock=storage.getBlockByExtId(i,j,k);
  int currentmeta=storage.getExtBlockMetadata(i,j,k);
  if (currentblock == block && currentmeta == meta) {
    return false;
  }
  storage.func_150818_a(i,j,k,block);
  storage.setExtBlockMetadata(i,j,k,meta);
  if (boundsInit) {
    minX=Math.min(minX,x);
    minY=Math.min(minY,y);
    minZ=Math.min(minZ,z);
    maxX=Math.max(maxX,x + 1);
    maxY=Math.max(maxY,y + 1);
    maxZ=Math.max(maxZ,z + 1);
  }
 else {
    boundsInit=true;
    minX=x;
    minY=y;
    minZ=z;
    maxX=x + 1;
    maxY=y + 1;
    maxZ=z + 1;
  }
  blockCount++;
  setChunkModified();
  TileEntity tileentity;
  if (block.hasTileEntity(meta)) {
    tileentity=getTileEntity(x,y,z);
    if (tileentity == null) {
      setTileEntity(x,y,z,tileentity);
    }
    if (tileentity != null) {
      tileentity.updateContainingBlockInfo();
      tileentity.blockType=block;
      tileentity.blockMetadata=meta;
    }
  }
  return true;
}",0.9769926047658176
131025,"/** 
 * Gets the TileEntity for a given block in this chunk
 */
@Override public TileEntity getTileEntity(int x,int y,int z){
  ChunkPosition chunkposition=new ChunkPosition(x,y,z);
  TileEntity tileentity=chunkTileEntityMap.get(chunkposition);
  if (tileentity != null && tileentity.isInvalid()) {
    chunkTileEntityMap.remove(chunkposition);
    tileentity=null;
  }
  if (tileentity == null) {
    Block block=getBlock(x,y,z);
    int meta=getBlockMetadata(x,y,z);
    if (block == null || !block.hasTileEntity(meta)) {
      return null;
    }
    tileentity=block.createTileEntity(worldObj,meta);
    setTileEntity(x,y,z,tileentity);
    tileentity=chunkTileEntityMap.get(chunkposition);
  }
  return tileentity;
}","/** 
 * Gets the TileEntity for a given block in this chunk
 */
@Override public TileEntity getTileEntity(int x,int y,int z){
  ChunkPosition chunkposition=new ChunkPosition(x,y,z);
  TileEntity tileentity=chunkTileEntityMap.get(chunkposition);
  if (tileentity == null) {
    Block block=getBlock(x,y,z);
    int meta=getBlockMetadata(x,y,z);
    if (block == null || !block.hasTileEntity(meta)) {
      return null;
    }
    tileentity=block.createTileEntity(worldObj,meta);
    setTileEntity(x,y,z,tileentity);
    tileentity=chunkTileEntityMap.get(chunkposition);
  }
  return tileentity;
}",0.9049429657794676
131026,"public void setTileEntity(int x,int y,int z,TileEntity tileentity){
  if (tileentity == null || tileentity.isInvalid()) {
    return;
  }
  setChunkBlockTileEntity(x,y,z,tileentity);
}","public void setTileEntity(int x,int y,int z,TileEntity tileentity){
  if (tileentity == null) {
    return;
  }
  setChunkBlockTileEntity(x,y,z,tileentity);
}",0.9239766081871345
131027,"/** 
 * Sets the TileEntity for a given block in this chunk
 */
private void setChunkBlockTileEntity(int x,int y,int z,TileEntity tileentity){
  ChunkPosition chunkposition=new ChunkPosition(x,y,z);
  tileentity.setWorldObj(worldObj);
  int ox=tileentity.xCoord;
  int oy=tileentity.yCoord;
  int oz=tileentity.zCoord;
  tileentity.xCoord=x;
  tileentity.yCoord=y;
  tileentity.zCoord=z;
  Block block=getBlock(x,y,z);
  if (block != null && block.hasTileEntity(getBlockMetadata(x,y,z))) {
    if (chunkTileEntityMap.containsKey(chunkposition)) {
      chunkTileEntityMap.get(chunkposition).invalidate();
    }
    tileentity.blockMetadata=getBlockMetadata(x,y,z);
    tileentity.validate();
    chunkTileEntityMap.put(chunkposition,tileentity);
    if (tileentity instanceof IShipTileEntity) {
      ((IShipTileEntity)tileentity).setParentShip(entityShip,ox,oy,oz);
    }
    if (isChunkLoaded) {
      worldObj.addTileEntity(tileentity);
    }
  }
}","/** 
 * Sets the TileEntity for a given block in this chunk
 */
private void setChunkBlockTileEntity(int x,int y,int z,TileEntity tileentity){
  ChunkPosition chunkposition=new ChunkPosition(x,y,z);
  tileentity.setWorldObj(worldObj);
  int ox=tileentity.xCoord;
  int oy=tileentity.yCoord;
  int oz=tileentity.zCoord;
  tileentity.xCoord=x;
  tileentity.yCoord=y;
  tileentity.zCoord=z;
  Block block=getBlock(x,y,z);
  if (block != null && block.hasTileEntity(getBlockMetadata(x,y,z))) {
    tileentity.blockMetadata=getBlockMetadata(x,y,z);
    tileentity.invalidate();
    chunkTileEntityMap.put(chunkposition,tileentity);
    if (tileentity instanceof IShipTileEntity) {
      ((IShipTileEntity)tileentity).setParentShip(entityShip,ox,oy,oz);
    }
  }
}",0.8116959064327486
131028,"public void finishedLoading(boolean reload){
  StringBuilder output=new StringBuilder();
  int highestCount=0;
  String centerPoint=""String_Node_Str"";
  for (  Map.Entry<String,String> entry : latlngs.entrySet()) {
    List<AwsData> events=keyValueMap.get(entry.getValue());
    output.append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"").append(events.size()).append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    output.append(""String_Node_Str"");
    String cityName=entry.getValue();
    if (cityName != null && cityName.trim().length() > 0) {
      int totalEvents=events.size();
      if (totalEvents > highestCount) {
        centerPoint=entry.getKey();
        highestCount=totalEvents;
      }
    }
  }
  String html=getHTML();
  html=html.replaceAll(""String_Node_Str"",output.toString());
  html=html.replaceAll(""String_Node_Str"",centerPoint);
  writeGeoDataHtml(html);
  String htmlFileUri=new File(FileUtils.getFullPathToFile(HTML_FILENAME)).toURI().toString();
  webEngine.load(htmlFileUri);
}","public void finishedLoading(boolean reload){
  StringBuilder output=new StringBuilder();
  int highestCount=0;
  String centerPoint=""String_Node_Str"";
  for (  Map.Entry<String,String> entry : latlngs.entrySet()) {
    List<AwsData> events=keyValueMap.get(entry.getValue());
    if (!entry.getValue().contains(""String_Node_Str"")) {
      output.append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"").append(events.size()).append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
      output.append(""String_Node_Str"");
      String cityName=entry.getValue();
      if (cityName != null && cityName.trim().length() > 0) {
        int totalEvents=events.size();
        if (totalEvents > highestCount) {
          centerPoint=entry.getKey();
          highestCount=totalEvents;
        }
      }
    }
  }
  String html=getHTML();
  html=html.replaceAll(""String_Node_Str"",output.toString());
  html=html.replaceAll(""String_Node_Str"",centerPoint);
  writeGeoDataHtml(html);
  String htmlFileUri=new File(FileUtils.getFullPathToFile(HTML_FILENAME)).toURI().toString();
  webEngine.load(htmlFileUri);
}",0.8946648426812586
131029,"private void addToKeyValueMap(Event event){
  try {
    String propertyValue=EventUtils.getEventProperty(this.widget.getSeriesField(),event);
    if (propertyValue != null) {
      List<Event> events;
      if (!keyValueMap.containsKey(propertyValue)) {
        events=new ArrayList<>();
      }
 else {
        events=keyValueMap.get(propertyValue);
      }
      events.add(event);
      keyValueMap.put(propertyValue,events);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
  }
}","private void addToKeyValueMap(Event event){
  try {
    String propertyValue=EventUtils.getEventProperty(this.widget.getSeriesField(),event);
    if (propertyValue != null) {
      List<Event> events=keyValueMap.get(propertyValue);
      if (events == null) {
        events=new ArrayList<>();
      }
      events.add(event);
      keyValueMap.put(propertyValue,events);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
  }
}",0.849846782431052
131030,"public void newEvent(Event event){
  allEvents.add(event);
  try {
    String latLng=event.getLatLng();
    if (latLng != null && !latlngs.containsKey(latLng)) {
      String propertyValue=EventUtils.getEventProperty(this.widget.getSeriesField(),event);
      latlngs.put(latLng,propertyValue);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
  }
  addToKeyValueMap(event);
}","public void newEvent(Event event){
  allEvents.add(event);
  try {
    String latLng=event.getLatLng();
    if (latLng != null && latLng.length() > 0 && !latlngs.containsKey(latLng)) {
      String propertyValue=EventUtils.getEventProperty(this.widget.getSeriesField(),event);
      latlngs.put(latLng,propertyValue);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
  }
  addToKeyValueMap(event);
}",0.9727810650887574
131031,"public void finishedLoading(boolean reload){
  StringBuilder output=new StringBuilder();
  int highestCount=0;
  String centerPoint=""String_Node_Str"";
  for (  Map.Entry<String,String> entry : latlngs.entrySet()) {
    List<Event> events=keyValueMap.get(entry.getValue());
    output.append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"").append(events.size()).append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    output.append(""String_Node_Str"");
    String cityName=entry.getValue();
    if (cityName != null && cityName.trim().length() > 0) {
      int totalEvents=events.size();
      if (totalEvents > highestCount) {
        centerPoint=entry.getKey();
        highestCount=totalEvents;
      }
    }
  }
  String html=getHTML();
  html=html.replaceAll(""String_Node_Str"",output.toString());
  html=html.replaceAll(""String_Node_Str"",centerPoint);
  writeGeoDataHtml(html);
  webEngine.load(""String_Node_Str"" + FileUtils.getFullPathToFile(HTML_FILENAME));
}","public void finishedLoading(boolean reload){
  StringBuilder output=new StringBuilder();
  int highestCount=0;
  String centerPoint=""String_Node_Str"";
  for (  Map.Entry<String,String> entry : latlngs.entrySet()) {
    List<Event> events=keyValueMap.get(entry.getValue());
    output.append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"").append(events.size()).append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    output.append(""String_Node_Str"");
    String cityName=entry.getValue();
    if (cityName != null && cityName.trim().length() > 0) {
      int totalEvents=events.size();
      if (totalEvents > highestCount) {
        centerPoint=entry.getKey();
        highestCount=totalEvents;
      }
    }
  }
  String html=getHTML();
  html=html.replaceAll(""String_Node_Str"",output.toString());
  html=html.replaceAll(""String_Node_Str"",centerPoint);
  writeGeoDataHtml(html);
  String htmlFileUri=new File(FileUtils.getFullPathToFile(HTML_FILENAME)).toURI().toString();
  webEngine.load(htmlFileUri);
}",0.9461948618516725
131032,"@Override public String toString(){
  StringBuilder modelData=new StringBuilder();
  if (getEventVersion() != null) {
    modelData.append(getEventVersion()).append(""String_Node_Str"");
  }
  if (getUserIdentity() != null) {
    modelData.append(getUserIdentity().toString()).append(""String_Node_Str"");
  }
  if (getEventTime() != null) {
    modelData.append(getEventTime()).append(""String_Node_Str"");
  }
  if (getEventSource() != null) {
    modelData.append(getEventSource()).append(""String_Node_Str"");
  }
  if (getEventName() != null) {
    modelData.append(getEventName()).append(""String_Node_Str"");
  }
  if (getAwsRegion() != null) {
    modelData.append(getAwsRegion()).append(""String_Node_Str"");
  }
  if (getSourceIPAddress() != null) {
    modelData.append(getSourceIPAddress()).append(""String_Node_Str"");
  }
  if (getUserAgent() != null) {
    modelData.append(getUserAgent()).append(""String_Node_Str"");
  }
  if (getRequestParameters() != null) {
    modelData.append(getRequestParameters().toString()).append(""String_Node_Str"");
  }
  if (getResponseElements() != null) {
    modelData.append(getResponseElements().toString()).append(""String_Node_Str"");
  }
  if (getRequestId() != null) {
    modelData.append(getRequestId()).append(""String_Node_Str"");
  }
  if (getEventId() != null) {
    modelData.append(getEventId()).append(""String_Node_Str"");
  }
  if (getErrorCode() != null) {
    modelData.append(getErrorCode()).append(""String_Node_Str"");
  }
  if (getErrorMessage() != null) {
    modelData.append(getErrorMessage()).append(""String_Node_Str"");
  }
  if (getReadOnly() != null) {
    modelData.append(getReadOnly()).append(""String_Node_Str"");
  }
  if (getEventType() != null) {
    modelData.append(getEventType()).append(""String_Node_Str"");
  }
  if (getRecipientAccountId() != null) {
    modelData.append(getRecipientAccountId()).append(""String_Node_Str"");
  }
  if (getAdditionalEventData() != null) {
    modelData.append(getAdditionalEventData().toString()).append(""String_Node_Str"");
  }
  if (getContinent() != null) {
    modelData.append(getContinent()).append(""String_Node_Str"");
  }
  if (getCountry() != null) {
    modelData.append(getCountry()).append(""String_Node_Str"");
  }
  if (getCity() != null) {
    modelData.append(getCity()).append(""String_Node_Str"");
  }
  if (getLatLng() != null) {
    modelData.append(getLatLng()).append(""String_Node_Str"");
  }
  return modelData.toString();
}","@Override public String toString(){
  StringBuilder modelData=new StringBuilder();
  if (getEventVersion() != null) {
    modelData.append(getEventVersion()).append(""String_Node_Str"");
  }
  if (getUserIdentity() != null) {
    modelData.append(getUserIdentity().toString()).append(""String_Node_Str"");
  }
  if (getEventTime() != null) {
    modelData.append(getEventTime()).append(""String_Node_Str"");
  }
  if (getEventSource() != null) {
    modelData.append(getEventSource()).append(""String_Node_Str"");
  }
  if (getEventName() != null) {
    modelData.append(getEventName()).append(""String_Node_Str"");
  }
  if (getAwsRegion() != null) {
    modelData.append(getAwsRegion()).append(""String_Node_Str"");
  }
  if (getSourceIPAddress() != null) {
    modelData.append(getSourceIPAddress()).append(""String_Node_Str"");
  }
  if (getUserAgent() != null) {
    modelData.append(getUserAgent()).append(""String_Node_Str"");
  }
  if (getRequestParameters() != null) {
    modelData.append(getRequestParameters().toString()).append(""String_Node_Str"");
  }
  if (getResponseElements() != null) {
    modelData.append(getResponseElements().toString()).append(""String_Node_Str"");
  }
  if (getRequestId() != null) {
    modelData.append(getRequestId()).append(""String_Node_Str"");
  }
  if (getEventId() != null) {
    modelData.append(getEventId()).append(""String_Node_Str"");
  }
  if (getErrorCode() != null) {
    modelData.append(getErrorCode()).append(""String_Node_Str"");
  }
  if (getErrorMessage() != null) {
    modelData.append(getErrorMessage()).append(""String_Node_Str"");
  }
  if (getReadOnly() != null) {
    modelData.append(getReadOnly()).append(""String_Node_Str"");
  }
  if (getEventType() != null) {
    modelData.append(getEventType()).append(""String_Node_Str"");
  }
  if (getRecipientAccountId() != null) {
    modelData.append(getRecipientAccountId()).append(""String_Node_Str"");
  }
  if (getContinent() != null) {
    modelData.append(getContinent()).append(""String_Node_Str"");
  }
  if (getCountry() != null) {
    modelData.append(getCountry()).append(""String_Node_Str"");
  }
  if (getCity() != null) {
    modelData.append(getCity()).append(""String_Node_Str"");
  }
  if (getLatLng() != null) {
    modelData.append(getLatLng()).append(""String_Node_Str"");
  }
  return modelData.toString();
}",0.947457269466132
131033,"private void processStream(InputStream stream,CompositeFilter filter){
  List<Event> events=createEvents(uncompress(stream));
  for (  Event event : events) {
    geoService.populateGeoData(event);
    EventUtils.addTimestamp(event);
    if (filter.passes(event)) {
      eventDb.add(event);
      for (      EventServiceListener l : listeners) {
        l.newEvent(event);
      }
    }
  }
}","private void processStream(InputStream stream,CompositeFilter filter){
  List<Event> events=createEvents(uncompress(stream));
  for (  Event event : events) {
    EventUtils.addTimestamp(event);
    if (filter.passes(event)) {
      try {
        geoService.populateGeoData(event);
      }
 catch (      Exception e) {
        LOGGER.log(Level.WARNING,""String_Node_Str"");
      }
      eventDb.add(event);
      for (      EventServiceListener l : listeners) {
        l.newEvent(event);
      }
    }
  }
}",0.7866666666666666
131034,"CityResponse getCityResponse(InetAddress ipAddress) throws GeoIp2Exception, IOException {
  return reader.city(ipAddress);
}","CityResponse getCityResponse(InetAddress ipAddress) throws GeoIp2Exception, IOException, AddressNotFoundException {
  return reader.city(ipAddress);
}",0.9051094890510948
131035,"/** 
 * Returns the full path to the CloudTrail Viewer directory within the System defined user.home.
 * @return Full path to cloudtrailviewer directory ending in a forward slash '/'
 */
public static String getApplicationDirectory(){
  return System.getProperty(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}","/** 
 * Returns the full path to the CloudTrail Viewer directory within the System defined user.home.
 * @return Full path to cloudtrailviewer directory ending in a forward slash '/'
 */
public static String getApplicationDirectory(){
  StringBuilder appDir=new StringBuilder().append(System.getProperty(""String_Node_Str"",""String_Node_Str"")).append(File.separator).append(""String_Node_Str"").append(File.separator);
  return appDir.toString();
}",0.814621409921671
131036,"@FXML private void doSecurity(){
  dashboardService.addWidgetToDashboard(new DashboardWidget(""String_Node_Str""));
}","@FXML private void doSecurity(){
  DashboardWidget newWidget=new DashboardWidget(""String_Node_Str"");
  configureFixedWidgets(newWidget);
  newWidget.setTitle(""String_Node_Str"");
  newWidget.setSeriesField(""String_Node_Str"");
  dashboardService.addWidgetToDashboard(newWidget);
}",0.4071246819338422
131037,"@FXML private void doError(){
  dashboardService.addWidgetToDashboard(new DashboardWidget(""String_Node_Str""));
}","@FXML private void doError(){
  DashboardWidget newWidget=new DashboardWidget(""String_Node_Str"");
  configureFixedWidgets(newWidget);
  newWidget.setTitle(""String_Node_Str"");
  newWidget.setSeriesField(""String_Node_Str"");
  dashboardService.addWidgetToDashboard(newWidget);
}",0.3979328165374677
131038,"@FXML private void doResource(){
  dashboardService.addWidgetToDashboard(new DashboardWidget(""String_Node_Str""));
}","@FXML private void doResource(){
  DashboardWidget newWidget=new DashboardWidget(""String_Node_Str"");
  configureFixedWidgets(newWidget);
  newWidget.setTitle(""String_Node_Str"");
  newWidget.setSeriesField(""String_Node_Str"");
  dashboardService.addWidgetToDashboard(newWidget);
}",0.4071246819338422
131039,"@Override public void updateItem(S3ListModel model,boolean empty){
  super.updateItem(model,empty);
  if (model != null) {
    if (model.getFileType() == S3ListModel.FILE_DIR) {
      icon.setGraphic(folder);
    }
 else     if (model.getFileType() == S3ListModel.FILE_DOC) {
      icon.setGraphic(file);
    }
 else {
      icon.setGraphic(parent);
    }
    name.setText(model.getName());
    setText(null);
    setGraphic(layout);
  }
}","@Override public void updateItem(S3ListModel model,boolean empty){
  super.updateItem(model,empty);
  if (model != null) {
    if (model.getFileType() == S3ListModel.FILE_DIR) {
      icon.setGraphic(folder);
    }
 else     if (model.getFileType() == S3ListModel.FILE_DOC) {
      icon.setGraphic(file);
    }
 else {
      icon.setGraphic(parent);
    }
    name.setText(model.getName());
    setText(null);
    setGraphic(layout);
  }
 else {
    setText(null);
    setGraphic(null);
  }
}",0.9409237379162192
131040,"public void setWidget(DashboardWidget widget){
  this.widget=widget;
  if (widget.getTitle() != null) {
    title.setText(widget.getTitle());
  }
 else {
    updateButton.setText(""String_Node_Str"");
  }
  if (widget.getType() != null && type != null) {
    type.setValue(widget.getType());
  }
  if (widget.getSeriesField() != null) {
    series.setValue(new KeyStringValue(widget.getSeriesField(),""String_Node_Str""));
  }
}","public void setWidget(DashboardWidget widget){
  this.widget=widget;
  if (widget.getTitle() != null) {
    title.setText(widget.getTitle());
  }
 else {
    updateButton.setText(""String_Node_Str"");
  }
  if (widget.getType() != null && type != null) {
    type.setValue(widget.getType());
  }
  ObservableList<KeyStringValue> items=series.getItems();
  for (  KeyStringValue val : items) {
    String itemValue=val.getValue();
    if (itemValue.equalsIgnoreCase(widget.getSeriesField())) {
      series.setValue(val);
      break;
    }
  }
}",0.6783867631851086
131041,"@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equalsIgnoreCase(ACTION_LOAD)) {
    CompositeFilter filters=FILTER_PANEL.getFilters();
    if (current_mode == EnhancedS3FileChooser.MODE_SCAN && !filters.allFiltersConfigured()) {
      JOptionPane.showMessageDialog(CloudTrailViewer.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      btnLoad.setEnabled(false);
      return;
    }
    loadClicked=true;
    btnLoad.setEnabled(false);
    btnLoad.setText(""String_Node_Str"");
    StringBuilder query=new StringBuilder();
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"").append(fileList.getPrefix()).append(""String_Node_Str"");
    query.append(""String_Node_Str"").append(currentAccount.getId());
    DbManager.getInstance().doInsertUpdate(query.toString());
  }
  fileList.dialogClosing();
  dialog.setVisible(false);
}","@Override public void actionPerformed(ActionEvent e){
  String newAccount=(String)accountCombo.getSelectedItem();
  currentAccount=ACCOUNT_MAP.get(newAccount);
  setCurrentAccount(currentAccount);
  fileList.init();
}",0.1202872531418312
131042,"private EnhancedS3FileChooser(Frame frame){
  super(frame,""String_Node_Str"",true);
  this.setLayout(new BorderLayout());
  JComboBox accountCombo=new JComboBox(ACCOUNT_LIST);
  accountCombo.setMinimumSize(new Dimension(200,30));
  accountCombo.setPreferredSize(new Dimension(200,30));
  accountCombo.setMaximumSize(new Dimension(200,30));
  JPanel accountPanel=new JPanel();
  accountPanel.setBorder(BorderFactory.createEmptyBorder(5,0,5,0));
  accountPanel.setLayout(new BoxLayout(accountPanel,BoxLayout.X_AXIS));
  accountPanel.add(Box.createHorizontalGlue());
  accountPanel.add(new JLabel(""String_Node_Str""));
  accountPanel.add(accountCombo);
  accountPanel.add(Box.createHorizontalGlue());
  FILTER_PANEL.setPreferredSize(new Dimension(400,400));
  fileList.registerListener(this);
  JPanel mainArea;
  if (current_mode == EnhancedS3FileChooser.MODE_SCAN) {
    mainArea=new JPanel(new GridLayout(1,2));
    mainArea.add(FILTER_PANEL);
    mainArea.add(fileList);
  }
 else {
    mainArea=new JPanel(new BorderLayout());
    mainArea.add(fileList,BorderLayout.CENTER);
  }
  mainArea.setBorder(BorderFactory.createMatteBorder(1,0,1,0,Color.lightGray));
  btnLoad.setActionCommand(ACTION_LOAD);
  btnLoad.addActionListener(this);
  btnLoad.setEnabled(false);
  getRootPane().setDefaultButton(btnLoad);
  JButton btnCancel=new JButton(""String_Node_Str"");
  btnCancel.addActionListener(this);
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.LINE_AXIS));
  buttonPanel.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
  buttonPanel.add(new JLabel(""String_Node_Str""));
  buttonPanel.add(Box.createHorizontalGlue());
  buttonPanel.add(btnCancel);
  buttonPanel.add(Box.createRigidArea(new Dimension(10,0)));
  buttonPanel.add(btnLoad);
  Container contentPane=getContentPane();
  contentPane.add(accountPanel,BorderLayout.PAGE_START);
  contentPane.add(mainArea,BorderLayout.CENTER);
  contentPane.add(buttonPanel,BorderLayout.PAGE_END);
  this.setResizable(false);
  pack();
  setLocationRelativeTo(frame);
}","private EnhancedS3FileChooser(Frame frame){
  super(frame,""String_Node_Str"",true);
  this.setLayout(new BorderLayout());
  final JComboBox accountCombo=new JComboBox(ACCOUNT_LIST);
  accountCombo.setMinimumSize(new Dimension(200,30));
  accountCombo.setPreferredSize(new Dimension(200,30));
  accountCombo.setMaximumSize(new Dimension(200,30));
  accountCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String newAccount=(String)accountCombo.getSelectedItem();
      currentAccount=ACCOUNT_MAP.get(newAccount);
      setCurrentAccount(currentAccount);
      fileList.init();
    }
  }
);
  JPanel accountPanel=new JPanel();
  accountPanel.setBorder(BorderFactory.createEmptyBorder(5,0,5,0));
  accountPanel.setLayout(new BoxLayout(accountPanel,BoxLayout.X_AXIS));
  accountPanel.add(Box.createHorizontalGlue());
  accountPanel.add(new JLabel(""String_Node_Str""));
  accountPanel.add(accountCombo);
  accountPanel.add(Box.createHorizontalGlue());
  FILTER_PANEL.setPreferredSize(new Dimension(400,400));
  fileList.registerListener(this);
  JPanel mainArea;
  if (current_mode == EnhancedS3FileChooser.MODE_SCAN) {
    mainArea=new JPanel(new GridLayout(1,2));
    mainArea.add(FILTER_PANEL);
    mainArea.add(fileList);
  }
 else {
    mainArea=new JPanel(new BorderLayout());
    mainArea.add(fileList,BorderLayout.CENTER);
  }
  mainArea.setBorder(BorderFactory.createMatteBorder(1,0,1,0,Color.lightGray));
  btnLoad.setActionCommand(ACTION_LOAD);
  btnLoad.addActionListener(this);
  btnLoad.setEnabled(false);
  getRootPane().setDefaultButton(btnLoad);
  JButton btnCancel=new JButton(""String_Node_Str"");
  btnCancel.addActionListener(this);
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.LINE_AXIS));
  buttonPanel.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
  buttonPanel.add(new JLabel(""String_Node_Str""));
  buttonPanel.add(Box.createHorizontalGlue());
  buttonPanel.add(btnCancel);
  buttonPanel.add(Box.createRigidArea(new Dimension(10,0)));
  buttonPanel.add(btnLoad);
  Container contentPane=getContentPane();
  contentPane.add(accountPanel,BorderLayout.PAGE_START);
  contentPane.add(mainArea,BorderLayout.CENTER);
  contentPane.add(buttonPanel,BorderLayout.PAGE_END);
  this.setResizable(false);
  pack();
  setLocationRelativeTo(frame);
}",0.9292474087426768
131043,"private static void getAccounts(){
  List<AwsAccount> accounts=AccountDao.getAllAccountsWithBucket();
  for (  AwsAccount account : accounts) {
    String name=account.getName();
    ACCOUNT_MAP.put(name,account);
    ACCOUNT_LIST.addElement(name);
    currentAccount=account;
    String setActive=""String_Node_Str"" + currentAccount.getId();
    DbManager.getInstance().doInsertUpdate(setActive);
  }
}","private static void getAccounts(){
  List<AwsAccount> accounts=AccountDao.getAllAccountsWithBucket();
  for (  AwsAccount account : accounts) {
    String name=account.getName();
    if (!ACCOUNT_MAP.containsKey(name)) {
      ACCOUNT_MAP.put(name,account);
      ACCOUNT_LIST.addElement(name);
      if (ACCOUNT_MAP.size() == 1) {
        setCurrentAccount(account);
      }
    }
  }
}",0.6590621039290241
131044,"/** 
 * Sets the needle that should be used to filter the contents of the table.
 * @param needle 
 */
public void setFilterString(String needle){
  filterTextField.setText(needle);
  filterUpdate();
  tableModel.reloadTableModel();
}","/** 
 * Sets the needle that should be used to filter the contents of the table.
 * @param needle 
 */
public void setFilterString(String needle){
  filterTextField.setText(needle);
  filterUpdate();
}",0.9241379310344828
131045,"private void filterUpdate(){
  String text=filterTextField.getText();
  this.eventDb.getFilter().setNeedle(text);
}","private void filterUpdate(){
  String text=filterTextField.getText();
  this.eventDb.getFilter().setNeedle(text);
  tableModel.reloadTableModel();
}",0.8745247148288974
131046,"private void loadS3files(boolean is_scan){
  List<AwsAccount> accounts=AccountDao.getAllAccounts(false);
  if (!accounts.isEmpty()) {
    int mode=EnhancedS3FileChooser.MODE_OPEN;
    if (is_scan) {
      mode=EnhancedS3FileChooser.MODE_SCAN;
    }
    application.newS3Files(EnhancedS3FileChooser.showDialog(CloudTrailViewer.frame,mode));
  }
 else {
    JOptionPane.showMessageDialog(CloudTrailViewer.frame,""String_Node_Str"");
  }
}","private void loadS3files(boolean is_scan){
  List<AwsAccount> accounts=AccountDao.getAllAccounts(false);
  if (!accounts.isEmpty()) {
    int mode=EnhancedS3FileChooser.MODE_OPEN;
    if (is_scan) {
      mode=EnhancedS3FileChooser.MODE_SCAN;
    }
    LoadFileRequest request=EnhancedS3FileChooser.showDialog(CloudTrailViewer.frame,mode);
    if (request != null) {
      application.newS3Files(request);
    }
  }
 else {
    JOptionPane.showMessageDialog(CloudTrailViewer.frame,""String_Node_Str"");
  }
}",0.7936170212765957
131047,"@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equalsIgnoreCase(ACTION_LOAD)) {
    CompositeFilter filters=FILTER_PANEL.getFilters();
    if (current_mode == EnhancedS3FileChooser.MODE_SCAN && !filters.allFiltersConfigured()) {
      JOptionPane.showMessageDialog(CloudTrailViewer.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      btnLoad.setEnabled(false);
      return;
    }
    btnLoad.setEnabled(false);
    btnLoad.setText(""String_Node_Str"");
    StringBuilder query=new StringBuilder();
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"").append(fileList.getPrefix()).append(""String_Node_Str"");
    query.append(""String_Node_Str"").append(currentAccount.getId());
    DbManager.getInstance().doInsertUpdate(query.toString());
  }
  fileList.dialogClosing();
  dialog.setVisible(false);
}","@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equalsIgnoreCase(ACTION_LOAD)) {
    CompositeFilter filters=FILTER_PANEL.getFilters();
    if (current_mode == EnhancedS3FileChooser.MODE_SCAN && !filters.allFiltersConfigured()) {
      JOptionPane.showMessageDialog(CloudTrailViewer.frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      btnLoad.setEnabled(false);
      return;
    }
    loadClicked=true;
    btnLoad.setEnabled(false);
    btnLoad.setText(""String_Node_Str"");
    StringBuilder query=new StringBuilder();
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"").append(fileList.getPrefix()).append(""String_Node_Str"");
    query.append(""String_Node_Str"").append(currentAccount.getId());
    DbManager.getInstance().doInsertUpdate(query.toString());
  }
  fileList.dialogClosing();
  dialog.setVisible(false);
}",0.9875846501128668
131048,"/** 
 * Shows the Dialog.
 * @param parent The Frame to which the dialog will be associated
 * @param mode Mode dialog should operate
 * @return a List of String that are S3 bucket keys.
 */
public static LoadFileRequest showDialog(Component parent,int mode){
  current_mode=mode;
  getAccounts();
  fileList=new S3FileList(current_mode,currentAccount);
  Frame frame=JOptionPane.getFrameForComponent(parent);
  dialog=new EnhancedS3FileChooser(frame);
  if (fileList.init()) {
    dialog.setVisible(true);
  }
  return new LoadFileRequest(fileList.getSelectedFiles(),FILTER_PANEL.getFilters());
}","/** 
 * Shows the Dialog.
 * @param parent The Frame to which the dialog will be associated
 * @param mode Mode dialog should operate
 * @return a List of String that are S3 bucket keys.
 */
public static LoadFileRequest showDialog(Component parent,int mode){
  current_mode=mode;
  getAccounts();
  fileList=new S3FileList(current_mode,currentAccount);
  Frame frame=JOptionPane.getFrameForComponent(parent);
  dialog=new EnhancedS3FileChooser(frame);
  if (fileList.init()) {
    dialog.setVisible(true);
  }
  if (loadClicked) {
    return new LoadFileRequest(fileList.getSelectedFiles(),FILTER_PANEL.getFilters());
  }
 else {
    return null;
  }
}",0.9552
131049,"/** 
 * @return the responseElements
 */
private Map getResponseElements(){
  return responseElements;
}","/** 
 * @return the responseElements
 */
public Map getResponseElements(){
  return responseElements;
}",0.9565217391304348
131050,"private void updateChart(String eventName){
  try {
    String fqcp=PACKAGE + resourceTypes.get(eventName);
    Class c=Class.forName(fqcp);
    String source=customGroup.getSelection().getActionCommand();
    Map<String,Integer> metadataByOccurance=new HashMap<>();
    for (    Event event : eventDb.getEvents()) {
      ResourceMetaData md=(ResourceMetaData)c.newInstance();
      md.populate(event);
      String meta=md.getValueForMenuItem(source);
      int count=0;
      if (metadataByOccurance.containsKey(meta)) {
        count=metadataByOccurance.get(meta);
      }
      count++;
      metadataByOccurance.put(meta,count);
    }
    List<Map.Entry<String,Integer>> sorted=entriesSortedByValues(metadataByOccurance);
    int top=getTopXValue();
    List<Map.Entry<String,Integer>> topX=chartUtils.getTopX(sorted,top);
    updateChart(topX);
  }
 catch (  ClassNotFoundException|InstantiationException|IllegalAccessException ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
}","private void updateChart(String eventName){
  try {
    String fqcp=PACKAGE + resourceTypes.get(eventName);
    Class c=Class.forName(fqcp);
    String source=customGroup.getSelection().getActionCommand();
    Map<String,Integer> metadataByOccurance=new HashMap<>();
    for (    Event event : eventDb.getEvents()) {
      ResourceMetaData md=(ResourceMetaData)c.newInstance();
      md.populate(event);
      int count=0;
      List<String> values=md.getValuesForMenuItem(source);
      if (values != null) {
        for (        String value : values) {
          if (metadataByOccurance.containsKey(value)) {
            count=metadataByOccurance.get(value);
          }
          count++;
          metadataByOccurance.put(value,count);
        }
      }
    }
    List<Map.Entry<String,Integer>> sorted=entriesSortedByValues(metadataByOccurance);
    int top=getTopXValue();
    List<Map.Entry<String,Integer>> topX=chartUtils.getTopX(sorted,top);
    updateChart(topX);
  }
 catch (  ClassNotFoundException|InstantiationException|IllegalAccessException ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
}",0.880188679245283
131051,"@Override public void populate(Event event){
  Map requestParams=event.getRequestParameters();
  engine=(String)requestParams.get(""String_Node_Str"");
  cacheNodeType=(String)requestParams.get(""String_Node_Str"");
}","@Override public void populate(Event event){
  Map requestParams=event.getRequestParameters();
  engine.add((String)requestParams.get(""String_Node_Str""));
  cacheNodeType.add((String)requestParams.get(""String_Node_Str""));
}",0.9678899082568808
131052,"@Override public void populate(Event event){
  Map requestParams=event.getRequestParameters();
  dBInstanceClass=(String)requestParams.get(""String_Node_Str"");
  engine=(String)requestParams.get(""String_Node_Str"");
  allocatedStorage=(String)requestParams.get(""String_Node_Str"");
}","@Override public void populate(Event event){
  Map requestParams=event.getRequestParameters();
  dBInstanceClass.add((String)requestParams.get(""String_Node_Str""));
  engine.add((String)requestParams.get(""String_Node_Str""));
  allocatedStorage.add((String)requestParams.get(""String_Node_Str""));
}",0.928695652173913
131053,"@Override public void populate(Event event){
  eventSource=event.getEventSource();
  userAgent=event.getUserAgent();
  if (event.getUserIdentity() != null) {
    userIdentityPrincipalId=event.getUserIdentity().getPrincipalId();
    userIdentityArn=event.getUserIdentity().getArn();
    userIdentityUsername=event.getUserIdentity().getUserName();
    userIdentityInvokedBy=event.getUserIdentity().getInvokedBy();
    if (event.getUserIdentity().getSessionContext() != null && event.getUserIdentity().getSessionContext().getSessionIssuer() != null) {
      sessionContextPrincipalId=event.getUserIdentity().getSessionContext().getSessionIssuer().getPrincipalId();
      sessionContextArn=event.getUserIdentity().getSessionContext().getSessionIssuer().getArn();
      sessionContextUsername=event.getUserIdentity().getSessionContext().getSessionIssuer().getUserName();
    }
  }
}","@Override public void populate(Event event){
  eventSource.add(event.getEventSource());
  userAgent.add(event.getUserAgent());
  if (event.getUserIdentity() != null) {
    userIdentityPrincipalId.add(event.getUserIdentity().getPrincipalId());
    userIdentityArn.add(event.getUserIdentity().getArn());
    userIdentityUsername.add(event.getUserIdentity().getUserName());
    userIdentityInvokedBy.add(event.getUserIdentity().getInvokedBy());
    if (event.getUserIdentity().getSessionContext() != null && event.getUserIdentity().getSessionContext().getSessionIssuer() != null) {
      sessionContextPrincipalId.add(event.getUserIdentity().getSessionContext().getSessionIssuer().getPrincipalId());
      sessionContextArn.add(event.getUserIdentity().getSessionContext().getSessionIssuer().getArn());
      sessionContextUsername.add(event.getUserIdentity().getSessionContext().getSessionIssuer().getUserName());
    }
  }
}",0.9649805447470816
131054,"@Override public void populate(Event event){
  Map requestParams=event.getRequestParameters();
  Map instancesSet=(Map)requestParams.get(""String_Node_Str"");
  List<Map> items=(List)instancesSet.get(""String_Node_Str"");
  Map item=items.get(0);
  imageId=(String)item.get(""String_Node_Str"");
  instanceType=(String)requestParams.get(""String_Node_Str"");
  az=(String)requestParams.get(""String_Node_Str"");
}","@Override public void populate(Event event){
  Map responseParams=event.getResponseElements();
  if (responseParams != null && responseParams.containsKey(""String_Node_Str"")) {
    Map instancesSet=(Map)responseParams.get(""String_Node_Str"");
    List<Map> items=(List)instancesSet.get(""String_Node_Str"");
    for (    Map item : items) {
      imageId.add((String)item.get(""String_Node_Str""));
      instanceType.add((String)item.get(""String_Node_Str""));
      Map placement=(Map)item.get(""String_Node_Str"");
      az.add((String)placement.get(""String_Node_Str""));
    }
  }
}",0.2085889570552147
131055,"private void addSelectedKeys(){
  if (s3List.getSelectedValue() != null) {
    String selected=prefix + ((S3ListModel)s3List.getSelectedValue()).getPath();
    if (scanning && selected.endsWith(""String_Node_Str"")) {
      addFolderFiles(selected);
    }
 else {
      List<S3ListModel> selectedItems=s3List.getSelectedValuesList();
      for (      S3ListModel key : selectedItems) {
        selected_keys.add(prefix + key.getPath());
      }
    }
  }
}","private void addSelectedKeys(){
  if (s3List.getSelectedValue() != null) {
    String selected=prefix + s3List.getSelectedValue().getPath();
    if (scanning && selected.endsWith(""String_Node_Str"")) {
      addFolderFiles(selected);
    }
 else {
      List<S3ListModel> selectedItems=s3List.getSelectedValuesList();
      for (      S3ListModel key : selectedItems) {
        selected_keys.add(prefix + key.getPath());
      }
    }
  }
}",0.980963045912654
131056,"@Override public boolean elementsSelected(ListSelectionType type,Object... elements){
  if (type == NavigationListener.ListSelectionType.SINGLE_CLICK) {
    StringBuilder path=new StringBuilder();
    String selected=(String)elements[0];
    String[] path_elements=navigationPanel.getBreadCrumbPath();
    for (    String element : path_elements) {
      if (!element.equalsIgnoreCase(selected)) {
        path.append(element).append(""String_Node_Str"");
      }
 else {
        path.append(element).append(""String_Node_Str"");
        break;
      }
    }
    prefix=path.toString();
    reloadContents();
  }
  return true;
}","@Override public boolean elementsSelected(ListSelectionType type,Object... elements){
  if (type == NavigationListener.ListSelectionType.SINGLE_CLICK) {
    StringBuilder path=new StringBuilder();
    String selected=(String)elements[0];
    String[] path_elements=navigationPanel.getBreadCrumbPath();
    for (    String element : path_elements) {
      if (!element.equalsIgnoreCase(selected)) {
        path.append(element).append(""String_Node_Str"");
      }
 else {
        path.append(element).append(""String_Node_Str"");
        break;
      }
    }
    updateAccountPrefix(path.toString());
    reloadContents();
  }
  return true;
}",0.985759493670886
131057,"/** 
 * returns the current S3 Prefix
 * @return 
 */
String getPrefix(){
  return this.prefix;
}","/** 
 * returns the current S3 Prefix
 * @return current S3 Prefix
 */
String getPrefix(){
  return this.prefix;
}",0.919431279620853
131058,"private void handleDoubleClickEvent(){
  String selected=((S3ListModel)s3List.getSelectedValue()).getPath();
  if (selected.equalsIgnoreCase(MOVE_BACK)) {
    int lastSlash=prefix.lastIndexOf('/');
    String tmpPrefix=prefix.substring(0,lastSlash);
    if (tmpPrefix.contains(""String_Node_Str"")) {
      lastSlash=tmpPrefix.lastIndexOf('/') + 1;
      prefix=tmpPrefix.substring(0,lastSlash);
    }
 else {
      prefix=""String_Node_Str"";
    }
    reloadContents();
  }
 else {
    int firstSlash=selected.indexOf('/');
    if (firstSlash == 0) {
      selected=selected.substring(1,selected.length());
    }
    int lastSlash=selected.lastIndexOf('/') + 1;
    if (lastSlash == selected.length()) {
      prefix=prefix + selected;
      reloadContents();
    }
 else {
      addSelectedKeys();
      currentAccount.setPrefix(prefix);
      for (      S3FileListListener l : listeners) {
        l.selectionComplete();
      }
    }
  }
}","private void handleDoubleClickEvent(){
  String selected=s3List.getSelectedValue().getPath();
  if (selected.equalsIgnoreCase(MOVE_BACK)) {
    int lastSlash=prefix.lastIndexOf('/');
    String tmpPrefix=prefix.substring(0,lastSlash);
    prefix=""String_Node_Str"";
    if (tmpPrefix.contains(""String_Node_Str"")) {
      lastSlash=tmpPrefix.lastIndexOf('/') + 1;
      prefix=tmpPrefix.substring(0,lastSlash);
    }
    updateAccountPrefix(prefix);
    reloadContents();
  }
 else {
    int firstSlash=selected.indexOf('/');
    if (firstSlash == 0) {
      selected=selected.substring(1,selected.length());
    }
    int lastSlash=selected.lastIndexOf('/') + 1;
    if (lastSlash == selected.length()) {
      prefix=prefix + selected;
      updateAccountPrefix(prefix);
      reloadContents();
    }
 else {
      addSelectedKeys();
      updateAccountPrefix(prefix);
      for (      S3FileListListener l : listeners) {
        l.selectionComplete();
      }
    }
  }
}",0.9089958158995816
131059,"@Override public void mouseClicked(MouseEvent e){
  if (e.getClickCount() == 2) {
    handleDoubleClickEvent();
  }
 else   if (e.getClickCount() == 1) {
    String selected=((S3ListModel)s3List.getSelectedValue()).getPath();
    if (!scanning && selected.contains(""String_Node_Str"")) {
      notifyListenersOfSelection(false);
    }
 else {
      notifyListenersOfSelection(true);
    }
  }
}","@Override public void mouseClicked(MouseEvent e){
  if (e.getClickCount() == 2) {
    handleDoubleClickEvent();
  }
 else   if (e.getClickCount() == 1) {
    String selected=s3List.getSelectedValue().getPath();
    if (!scanning && selected.contains(""String_Node_Str"")) {
      notifyListenersOfSelection(false);
    }
 else {
      notifyListenersOfSelection(true);
    }
  }
}",0.9779507133592736
131060,"/** 
 * Sets the AWS Account that the class will use to read files from
 * @param newAccount new Account
 */
private void setAccount(AwsAccount newAccount){
  this.currentAccount=newAccount;
  this.prefix=newAccount.getPrefix();
}","/** 
 * Sets the AWS Account that the class will use to read files from
 * @param newAccount new Account
 */
public void setAccount(AwsAccount newAccount){
  this.currentAccount=newAccount;
  this.prefix=newAccount.getPrefix();
}",0.9760348583877996
131061,"private String getHTML(){
  StringBuilder result=new StringBuilder();
  ClassLoader classLoader=getClass().getClassLoader();
  File file=new File(classLoader.getResource(""String_Node_Str"").getFile());
  try (Scanner scanner=new Scanner(file)){
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      result.append(line).append(""String_Node_Str"");
    }
    scanner.close();
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
  return result.toString();
}","private String getHTML(){
  StringBuilder result=new StringBuilder();
  ClassLoader classLoader=this.getClass().getClassLoader();
  InputStreamReader io=new InputStreamReader(classLoader.getResourceAsStream(""String_Node_Str""));
  try (BufferedReader br=new BufferedReader(io)){
    String line;
    while ((line=br.readLine()) != null) {
      result.append(line).append(""String_Node_Str"");
    }
  }
 catch (  IOException ioe) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ioe);
  }
  return result.toString();
}",0.7482993197278912
131062,"private GeoIpUtils(){
  try {
    ClassLoader classLoader=GeoIpUtils.class.getClassLoader();
    File database=new File(classLoader.getResource(GEO_FILE).getFile());
    reader=new DatabaseReader.Builder(database).build();
  }
 catch (  IOException ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
}","private GeoIpUtils(){
  try {
    ClassLoader classLoader=this.getClass().getClassLoader();
    reader=new DatabaseReader.Builder(classLoader.getResourceAsStream(GEO_FILE)).build();
  }
 catch (  IOException ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
}",0.7785234899328859
131063,"private void terminateInstances(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,LinkedHashMap> resourceSet=(LinkedHashMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}","private void terminateInstances(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,ArrayList> resourceSet=(LinkedTreeMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}",0.9490662139219016
131064,"private void createTags(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,LinkedHashMap> resourceSet=(LinkedHashMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}","private void createTags(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,ArrayList> resourceSet=(LinkedTreeMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}",0.9483648881239244
131065,"private void stopInstances(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,LinkedHashMap> resourceSet=(LinkedHashMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}","private void stopInstances(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,ArrayList> resourceSet=(LinkedTreeMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}",0.9486301369863014
131066,"private void describeInstances(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,LinkedHashMap> resourceSet=(LinkedHashMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}","private void describeInstances(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,ArrayList> resourceSet=(LinkedTreeMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}",0.9489795918367347
131067,"private void rebootInstances(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,LinkedHashMap> resourceSet=(LinkedHashMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}","private void rebootInstances(Event event,RequestInfo resources){
  Map requestParameters=event.getRequestParameters();
  if (requestParameters != null && requestParameters.containsKey(""String_Node_Str"")) {
    Map<String,ArrayList> resourceSet=(LinkedTreeMap)requestParameters.get(""String_Node_Str"");
    if (resourceSet != null) {
      List<Map> items=(List)resourceSet.get(""String_Node_Str"");
      if (items != null) {
        for (        Map instance : items) {
          resources.addResource(EC2_INSTANCE,(String)instance.get(""String_Node_Str""));
        }
      }
    }
  }
}",0.9488054607508531
131068,"/** 
 * Default Constructor.
 * @param serviceName Name of the service that panel will be showing
 * @param f The feature that panel will be showing
 */
public ServicesOverviewPanel(String serviceName,Feature f){
  this.setLayout(new BorderLayout());
  this.setMinimumSize(new Dimension(250,130));
  this.setMaximumSize(new Dimension(250,130));
  this.setPreferredSize(new Dimension(250,130));
  this.setBackground(Color.white);
  this.setOpaque(true);
  this.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.black));
  JLabel title=new JLabel(serviceName);
  title.setAlignmentX(CENTER_ALIGNMENT);
  JPanel labelPanel=new JPanel();
  labelPanel.setLayout(new BoxLayout(labelPanel,BoxLayout.PAGE_AXIS));
  labelPanel.add(Box.createHorizontalGlue());
  labelPanel.add(title);
  labelPanel.add(Box.createHorizontalGlue());
  labelPanel.setOpaque(false);
  awsCountPanel=new CountPanel(""String_Node_Str"",new Color(51,102,153),f);
  iamCountPanel=new CountPanel(""String_Node_Str"",new Color(102,153,153),f);
  JPanel countsPanel=new JPanel(new GridLayout(1,2));
  countsPanel.add(awsCountPanel);
  countsPanel.add(iamCountPanel);
  awsEpsPanel=new EpsPanel(new Color(51,102,153));
  iamEpsPanel=new EpsPanel(new Color(102,153,153));
  JPanel epsPanel=new JPanel(new GridLayout(1,2));
  epsPanel.add(awsEpsPanel);
  epsPanel.add(iamEpsPanel);
  JPanel statsContainer=new JPanel(new BorderLayout());
  statsContainer.add(countsPanel,BorderLayout.CENTER);
  statsContainer.add(epsPanel,BorderLayout.PAGE_END);
  JPanel totalPanel=new JPanel();
  totalPanel.add(new JLabel(""String_Node_Str""));
  totalPanel.add(totalLabel);
  this.add(labelPanel,BorderLayout.PAGE_START);
  this.add(statsContainer,BorderLayout.CENTER);
  this.add(totalPanel,BorderLayout.PAGE_END);
}","/** 
 * Default Constructor.
 * @param serviceName Name of the service that panel will be showing
 * @param f The feature that panel will be showing
 */
public ServicesOverviewPanel(String serviceName,Feature f){
  this.setLayout(new BorderLayout());
  this.setMinimumSize(new Dimension(250,130));
  this.setMaximumSize(new Dimension(250,130));
  this.setPreferredSize(new Dimension(250,130));
  this.setBackground(Color.white);
  this.setOpaque(true);
  this.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.black));
  JLabel title=new JLabel(serviceName,SwingConstants.CENTER);
  title.setAlignmentX(CENTER_ALIGNMENT);
  JPanel labelPanel=new JPanel();
  labelPanel.setLayout(new BoxLayout(labelPanel,BoxLayout.PAGE_AXIS));
  labelPanel.add(Box.createHorizontalGlue());
  labelPanel.add(title);
  labelPanel.add(Box.createHorizontalGlue());
  labelPanel.setOpaque(false);
  awsCountPanel=new CountPanel(""String_Node_Str"",new Color(51,102,153),f);
  iamCountPanel=new CountPanel(""String_Node_Str"",new Color(102,153,153),f);
  JPanel countsPanel=new JPanel(new GridLayout(1,2));
  countsPanel.add(awsCountPanel);
  countsPanel.add(iamCountPanel);
  awsEpsPanel=new EpsPanel(new Color(51,102,153));
  iamEpsPanel=new EpsPanel(new Color(102,153,153));
  JPanel epsPanel=new JPanel(new GridLayout(1,2));
  epsPanel.add(awsEpsPanel);
  epsPanel.add(iamEpsPanel);
  JPanel statsContainer=new JPanel(new BorderLayout());
  statsContainer.add(countsPanel,BorderLayout.CENTER);
  statsContainer.add(epsPanel,BorderLayout.PAGE_END);
  JPanel totalPanel=new JPanel(new GridLayout(1,2));
  totalPanel.add(new JLabel(""String_Node_Str"",SwingConstants.CENTER));
  totalPanel.add(totalLabel);
  this.add(labelPanel,BorderLayout.PAGE_START);
  this.add(statsContainer,BorderLayout.CENTER);
  this.add(totalPanel,BorderLayout.PAGE_END);
}",0.9824659059281936
131069,"private void writeGeoDataHtml(String htmtContent){
  try {
    File f=new File(getFileName());
    f.delete();
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
  try (BufferedWriter out=new BufferedWriter(new FileWriter(getFileName()))){
    out.write(htmtContent);
    out.close();
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
}","private void writeGeoDataHtml(String htmtContent){
  try {
    File f=new File(getFileName());
    if (!f.delete()) {
      LOGGER.log(Level.WARNING,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
  try (BufferedWriter out=new BufferedWriter(new FileWriter(getFileName()))){
    out.write(htmtContent);
    out.close();
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
}",0.9016018306636157
131070,"/** 
 * Added a new event to the count.
 * @param event 
 */
public void newEvent(Event event){
  this.events.add(event);
  eventCount.setText(String.valueOf(this.events.size()));
  Font labelFont=eventCount.getFont();
  if (eventCount.getText().length() >= 5) {
    eventCount.setFont(new Font(labelFont.getName(),labelFont.getStyle(),14));
  }
  this.revalidate();
}","/** 
 * Added a new event to the count.
 * @param event 
 */
public void newEvent(Event event){
  this.events.add(event);
  eventCount.setText(String.valueOf(this.events.size()));
  Font labelFont=eventCount.getFont();
  if (eventCount.getText().length() >= 5) {
    eventCount.setFont(new Font(labelFont.getName(),labelFont.getStyle(),18));
  }
  this.revalidate();
}",0.9972826086956522
131071,"/** 
 * Default Constructor
 * @param name Name to be show on the panel
 * @param bgColour Colour for the background of the panel
 * @param f Reference to feature that show be informed when clicked.
 */
public CountPanel(String name,Color bgColour,Feature f){
  super(new BorderLayout());
  this.feature=f;
  this.setBackground(bgColour);
  this.setMinimumSize(new Dimension(125,65));
  this.setMaximumSize(new Dimension(125,65));
  this.setPreferredSize(new Dimension(125,65));
  this.setOpaque(true);
  eventCount.setToolTipText(""String_Node_Str"");
  eventCount.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  eventCount.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (!sorted) {
        Collections.sort(events,new TimeStampComparator());
        sorted=true;
      }
      feature.showEventsTable(events);
    }
  }
);
  Font labelFont=eventCount.getFont();
  eventCount.setForeground(Color.white);
  eventCount.setAlignmentX(CENTER_ALIGNMENT);
  eventCount.setFont(new Font(labelFont.getName(),labelFont.getStyle(),16));
  JPanel countPanel=new JPanel();
  countPanel.setLayout(new BoxLayout(countPanel,BoxLayout.PAGE_AXIS));
  countPanel.add(Box.createHorizontalGlue());
  countPanel.add(Box.createVerticalGlue());
  countPanel.add(eventCount);
  countPanel.add(Box.createHorizontalGlue());
  countPanel.add(Box.createVerticalGlue());
  countPanel.setOpaque(false);
  this.add(countPanel,BorderLayout.CENTER);
  JLabel title=new JLabel(name);
  title.setForeground(Color.white);
  title.setAlignmentX(CENTER_ALIGNMENT);
  JPanel titlePanel=new JPanel();
  titlePanel.setLayout(new BoxLayout(titlePanel,BoxLayout.PAGE_AXIS));
  titlePanel.add(Box.createHorizontalGlue());
  titlePanel.add(title,BorderLayout.CENTER);
  titlePanel.add(Box.createHorizontalGlue());
  titlePanel.setOpaque(false);
  this.add(titlePanel,BorderLayout.PAGE_START);
}","/** 
 * Default Constructor
 * @param name Name to be show on the panel
 * @param bgColour Colour for the background of the panel
 * @param f Reference to feature that show be informed when clicked.
 */
public CountPanel(String name,Color bgColour,Feature f){
  super(new BorderLayout());
  this.feature=f;
  this.setBackground(bgColour);
  this.setMinimumSize(new Dimension(125,65));
  this.setMaximumSize(new Dimension(125,65));
  this.setPreferredSize(new Dimension(125,65));
  this.setOpaque(true);
  eventCount.setToolTipText(""String_Node_Str"");
  eventCount.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  eventCount.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (!sorted) {
        Collections.sort(events,new TimeStampComparator());
        sorted=true;
      }
      feature.showEventsTable(events);
    }
  }
);
  Font labelFont=eventCount.getFont();
  eventCount.setForeground(Color.white);
  eventCount.setFont(new Font(labelFont.getName(),labelFont.getStyle(),20));
  eventCount.setMinimumSize(new Dimension(115,45));
  eventCount.setMaximumSize(new Dimension(115,45));
  eventCount.setPreferredSize(new Dimension(115,45));
  JPanel countPanel=new JPanel();
  countPanel.setLayout(new BoxLayout(countPanel,BoxLayout.PAGE_AXIS));
  countPanel.add(Box.createHorizontalGlue());
  countPanel.add(Box.createVerticalGlue());
  countPanel.add(eventCount);
  countPanel.add(Box.createHorizontalGlue());
  countPanel.add(Box.createVerticalGlue());
  countPanel.setOpaque(false);
  this.add(countPanel,BorderLayout.CENTER);
  JLabel title=new JLabel(name);
  title.setForeground(Color.white);
  title.setAlignmentX(CENTER_ALIGNMENT);
  JPanel titlePanel=new JPanel();
  titlePanel.setLayout(new BoxLayout(titlePanel,BoxLayout.PAGE_AXIS));
  titlePanel.add(Box.createHorizontalGlue());
  titlePanel.add(title,BorderLayout.CENTER);
  titlePanel.add(Box.createHorizontalGlue());
  titlePanel.setOpaque(false);
  this.add(titlePanel,BorderLayout.PAGE_START);
}",0.6793313069908815
131072,"private void addValueToRequestInfo(RequestInfo requestInfo,String resourceName,Object paramValue,boolean resource){
  if (resourceMap.containsKey(resourceName)) {
    resourceName=resourceMap.get(resourceName);
  }
  try {
    if (paramValue instanceof String) {
      if (resource) {
        requestInfo.addResource(resourceName,(String)paramValue);
      }
 else {
        requestInfo.addParameter(resourceName,(String)paramValue);
      }
    }
 else     if (paramValue instanceof Integer || paramValue instanceof Boolean) {
      if (resource) {
        requestInfo.addResource(resourceName,String.valueOf(paramValue));
      }
 else {
        requestInfo.addParameter(resourceName,String.valueOf(paramValue));
      }
    }
 else     if (paramValue instanceof ArrayList) {
      List<Object> values=(ArrayList)paramValue;
      for (      Object value : values) {
        addValueToRequestInfo(requestInfo,resourceName,value,resource);
      }
    }
 else     if (paramValue instanceof LinkedHashMap) {
      Map values=(LinkedHashMap)paramValue;
      Set<String> keys=values.keySet();
      Iterator<String> it=keys.iterator();
      while (it.hasNext()) {
        String key=it.next();
        Object value=values.get(key);
        addValueToRequestInfo(requestInfo,key,value,resource);
      }
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
}","private void addValueToRequestInfo(RequestInfo requestInfo,String resourceName,Object paramValue,boolean resource){
  if (resourceMap != null && resourceMap.containsKey(resourceName)) {
    resourceName=resourceMap.get(resourceName);
  }
  try {
    if (paramValue instanceof String) {
      if (resource) {
        requestInfo.addResource(resourceName,(String)paramValue);
      }
 else {
        requestInfo.addParameter(resourceName,(String)paramValue);
      }
    }
 else     if (paramValue instanceof Integer || paramValue instanceof Boolean) {
      if (resource) {
        requestInfo.addResource(resourceName,String.valueOf(paramValue));
      }
 else {
        requestInfo.addParameter(resourceName,String.valueOf(paramValue));
      }
    }
 else     if (paramValue instanceof ArrayList) {
      List<Object> values=(ArrayList)paramValue;
      for (      Object value : values) {
        addValueToRequestInfo(requestInfo,resourceName,value,resource);
      }
    }
 else     if (paramValue instanceof LinkedHashMap) {
      Map values=(LinkedHashMap)paramValue;
      Set<String> keys=values.keySet();
      Iterator<String> it=keys.iterator();
      while (it.hasNext()) {
        String key=it.next();
        Object value=values.get(key);
        addValueToRequestInfo(requestInfo,key,value,resource);
      }
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
}",0.991817858413376
131073,"private void processStream(InputStream stream,CompositeFilter filter){
  List<Event> events=createEvents(uncompress(stream));
  for (  Event event : events) {
    GeoIpUtils.getInstance().populateGeoData(event);
    if (filter.passes(event)) {
      event.getResourceInfo();
      EventUtils.addTimestamp(event);
      eventDb.addEvent(event);
    }
  }
}","private void processStream(InputStream stream,CompositeFilter filter){
  List<Event> events=createEvents(uncompress(stream));
  for (  Event event : events) {
    GeoIpUtils.getInstance().populateGeoData(event);
    EventUtils.addTimestamp(event);
    if (filter.passes(event)) {
      event.getResourceInfo();
      eventDb.addEvent(event);
    }
  }
}",0.8954802259887006
131074,"private static void getAccounts(){
  String query=""String_Node_Str"";
  List<ResultSetRow> rows=DbManager.getInstance().executeCursorStatement(query);
  for (  ResultSetRow row : rows) {
    String name=(String)row.get(""String_Node_Str"");
    AwsAccount account=new AwsAccount((Integer)row.get(""String_Node_Str""),name,(String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""));
    accountMap.put(name,account);
    accountList.addElement(name);
    currentAccount=account;
  }
  prefix=currentAccount.getPrefix();
}","private static void getAccounts(){
  String query=""String_Node_Str"";
  List<ResultSetRow> rows=DbManager.getInstance().executeCursorStatement(query);
  for (  ResultSetRow row : rows) {
    String name=(String)row.get(""String_Node_Str"");
    AwsAccount account=new AwsAccount((Integer)row.get(""String_Node_Str""),name,(String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""));
    accountMap.put(name,account);
    accountList.addElement(name);
    currentAccount=account;
    String setActive=""String_Node_Str"" + currentAccount.getId();
    DbManager.getInstance().doInsertUpdate(setActive);
  }
  prefix=currentAccount.getPrefix();
}",0.9132947976878611
131075,"protected void updateChart(List<Map.Entry<String,Integer>> chartData){
  chartCards.removeAll();
  String style=styleGroup.getSelection().getActionCommand();
  String orientationCommand=orientationGroup.getSelection().getActionCommand();
  PlotOrientation orientation=PlotOrientation.VERTICAL;
  if (orientationCommand.contains(""String_Node_Str"")) {
    orientation=PlotOrientation.HORIZONTAL;
  }
  ChartPanel cp=ChartFactory.createChart(style,chartData,320,240,orientation);
  chartCards.add(cp,""String_Node_Str"");
  chartCards.revalidate();
  for (int i=defaultTableModel.getRowCount() - 1; i >= 0; i--) {
    defaultTableModel.removeRow(i);
  }
  LegendItemCollection legendItems=((ChartPanel)chartCards.getComponent(0)).getChart().getPlot().getLegendItems();
  for (  Map.Entry entry : chartData) {
    Color col=null;
    String key=(String)entry.getKey();
    for (int i=0; i < legendItems.getItemCount(); i++) {
      LegendItem item=legendItems.get(i);
      if (item.getLabel().equalsIgnoreCase(key)) {
        col=(Color)item.getFillPaint();
      }
    }
    defaultTableModel.addRow(new Object[]{col,key,entry.getValue()});
  }
}","protected void updateChart(List<Map.Entry<String,Integer>> chartData){
  chartCards.removeAll();
  for (int i=defaultTableModel.getRowCount() - 1; i >= 0; i--) {
    defaultTableModel.removeRow(i);
  }
  if (chartData != null && chartData.size() > 0) {
    String style=styleGroup.getSelection().getActionCommand();
    String orientationCommand=orientationGroup.getSelection().getActionCommand();
    PlotOrientation orientation=PlotOrientation.VERTICAL;
    if (orientationCommand.contains(""String_Node_Str"")) {
      orientation=PlotOrientation.HORIZONTAL;
    }
    ChartPanel cp=ChartFactory.createChart(style,chartData,320,240,orientation);
    chartCards.add(cp,""String_Node_Str"");
    chartCards.revalidate();
    LegendItemCollection legendItems=((ChartPanel)chartCards.getComponent(0)).getChart().getPlot().getLegendItems();
    for (    Map.Entry entry : chartData) {
      Color col=null;
      String key=(String)entry.getKey();
      for (int i=0; i < legendItems.getItemCount(); i++) {
        LegendItem item=legendItems.get(i);
        if (item.getLabel().equalsIgnoreCase(key)) {
          col=(Color)item.getFillPaint();
        }
      }
      defaultTableModel.addRow(new Object[]{col,key,entry.getValue()});
    }
  }
}",0.7049937054133445
131076,"private S3FileChooser(Frame frame){
  super(frame,""String_Node_Str"",true);
  final JButton btnLoad=new JButton(""String_Node_Str"");
  btnLoad.setActionCommand(""String_Node_Str"");
  btnLoad.addActionListener(this);
  getRootPane().setDefaultButton(btnLoad);
  JButton btnCancel=new JButton(""String_Node_Str"");
  btnCancel.addActionListener(this);
  s3ListModel.clear();
  s3List=new JList(s3ListModel);
  s3List.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent mouseEvent){
      if (mouseEvent.getClickCount() == 2) {
        handleDoubleClickEvent();
      }
 else       if (mouseEvent.getClickCount() == 1) {
        String selected=((S3ListModel)s3List.getSelectedValue()).getPath();
        if (selected.contains(""String_Node_Str"")) {
          btnLoad.setEnabled(false);
        }
 else {
          btnLoad.setEnabled(true);
        }
      }
    }
  }
);
  s3List.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  s3List.setLayoutOrientation(JList.VERTICAL);
  s3List.setVisibleRowCount(-1);
  s3List.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      JLabel label=(JLabel)super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      S3ListModel model=(S3ListModel)value;
      if (model.getFileType() == S3ListModel.FILE_DIR) {
        label.setIcon(UIManager.getIcon(""String_Node_Str""));
      }
 else       if (model.getFileType() == S3ListModel.FILE_DOC) {
        label.setIcon(UIManager.getIcon(""String_Node_Str""));
      }
      label.setText(model.getAlias());
      return label;
    }
  }
);
  JScrollPane listScroller=new JScrollPane(s3List);
  listScroller.setPreferredSize(new Dimension(400,480));
  listScroller.setAlignmentX(LEFT_ALIGNMENT);
  JPanel listPane=new JPanel();
  listPane.setLayout(new BoxLayout(listPane,BoxLayout.PAGE_AXIS));
  listPane.add(Box.createRigidArea(new Dimension(0,5)));
  listPane.add(listScroller);
  listPane.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  JPanel buttonPane=new JPanel();
  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.LINE_AXIS));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));
  buttonPane.add(loadingLabel);
  buttonPane.add(Box.createHorizontalGlue());
  buttonPane.add(btnCancel);
  buttonPane.add(Box.createRigidArea(new Dimension(10,0)));
  buttonPane.add(btnLoad);
  Container contentPane=getContentPane();
  contentPane.add(getToolbar(),BorderLayout.PAGE_START);
  contentPane.add(listPane,BorderLayout.CENTER);
  contentPane.add(buttonPane,BorderLayout.PAGE_END);
  pack();
  setLocationRelativeTo(frame);
  SwingWorker worker=new SwingWorker<Void,Void>(){
    @Override public Void doInBackground(){
      reloadContents();
      return null;
    }
  }
;
  worker.execute();
}","private S3FileChooser(Frame frame){
  super(frame,""String_Node_Str"",true);
  final JButton btnLoad=new JButton(""String_Node_Str"");
  btnLoad.setActionCommand(""String_Node_Str"");
  btnLoad.addActionListener(this);
  getRootPane().setDefaultButton(btnLoad);
  JButton btnCancel=new JButton(""String_Node_Str"");
  btnCancel.addActionListener(this);
  s3ListModel.clear();
  s3List=new JList(s3ListModel);
  s3List.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent mouseEvent){
      if (mouseEvent.getClickCount() == 2) {
        handleDoubleClickEvent();
      }
 else       if (mouseEvent.getClickCount() == 1) {
        String selected=((S3ListModel)s3List.getSelectedValue()).getPath();
        if (selected.contains(""String_Node_Str"")) {
          btnLoad.setEnabled(false);
        }
 else {
          btnLoad.setEnabled(true);
        }
      }
    }
  }
);
  s3List.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  s3List.setLayoutOrientation(JList.VERTICAL);
  s3List.setVisibleRowCount(-1);
  s3List.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      JLabel label=(JLabel)super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      S3ListModel model=(S3ListModel)value;
      if (model.getFileType() == S3ListModel.FILE_DIR) {
        label.setIcon(UIManager.getIcon(""String_Node_Str""));
      }
 else       if (model.getFileType() == S3ListModel.FILE_DOC) {
        label.setIcon(UIManager.getIcon(""String_Node_Str""));
      }
      label.setText(model.getAlias());
      return label;
    }
  }
);
  JScrollPane listScroller=new JScrollPane(s3List);
  listScroller.setPreferredSize(new Dimension(400,480));
  listScroller.setAlignmentX(LEFT_ALIGNMENT);
  JPanel listPane=new JPanel();
  listPane.setLayout(new BoxLayout(listPane,BoxLayout.PAGE_AXIS));
  listPane.add(Box.createRigidArea(new Dimension(0,5)));
  listPane.add(listScroller);
  listPane.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  JPanel buttonPane=new JPanel();
  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.LINE_AXIS));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));
  buttonPane.add(loadingLabel);
  buttonPane.add(Box.createHorizontalGlue());
  buttonPane.add(btnCancel);
  buttonPane.add(Box.createRigidArea(new Dimension(10,0)));
  buttonPane.add(btnLoad);
  Container contentPane=getContentPane();
  contentPane.add(getToolbar(),BorderLayout.PAGE_START);
  contentPane.add(listPane,BorderLayout.CENTER);
  contentPane.add(buttonPane,BorderLayout.PAGE_END);
  pack();
  setLocationRelativeTo(frame);
  reloadContents();
}",0.9737945492662474
131077,"private void reloadContents(){
  loadingLabel.setVisible(true);
  this.s3ListModel.clear();
  String bucketName=currentAccount.getBucket();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest();
  listObjectsRequest.setBucketName(bucketName);
  listObjectsRequest.setPrefix(prefix);
  listObjectsRequest.setDelimiter(""String_Node_Str"");
  AWSCredentials credentials=new BasicAWSCredentials(currentAccount.getKey(),currentAccount.getSecret());
  AmazonS3 s3Client=new AmazonS3Client(credentials);
  try {
    ObjectListing objectListing=s3Client.listObjects(listObjectsRequest);
    if (prefix.trim().length() != 0) {
      S3ListModel model=new S3ListModel(MOVE_BACK,MOVE_BACK,S3ListModel.FILE_BACK);
      this.s3ListModel.addElement(model);
    }
    List<String> directories=objectListing.getCommonPrefixes();
    for (    String directory : directories) {
      String dir=stripPrefix(directory);
      int lastSlash=dir.lastIndexOf(""String_Node_Str"");
      String strippeDir=dir.substring(0,lastSlash);
      String alias=dir;
      if (isAccountNumber(strippeDir)) {
        if (aliasMap.containsKey(strippeDir)) {
          alias=aliasMap.get(strippeDir);
        }
      }
      S3ListModel model=new S3ListModel(dir,alias,S3ListModel.FILE_DIR);
      this.s3ListModel.addElement(model);
    }
    List<S3ObjectSummary> objectSummaries=objectListing.getObjectSummaries();
    for (    final S3ObjectSummary objectSummary : objectSummaries) {
      String file=stripPrefix(objectSummary.getKey());
      S3ListModel model=new S3ListModel(file,file,S3ListModel.FILE_DOC);
      this.s3ListModel.addElement(model);
    }
    loadingLabel.setVisible(false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void reloadContents(){
  loadingLabel.setVisible(true);
  this.revalidate();
  this.s3ListModel.clear();
  String bucketName=currentAccount.getBucket();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest();
  listObjectsRequest.setBucketName(bucketName);
  listObjectsRequest.setPrefix(prefix);
  listObjectsRequest.setDelimiter(""String_Node_Str"");
  AWSCredentials credentials=new BasicAWSCredentials(currentAccount.getKey(),currentAccount.getSecret());
  AmazonS3 s3Client=new AmazonS3Client(credentials);
  try {
    ObjectListing objectListing=s3Client.listObjects(listObjectsRequest);
    if (prefix.trim().length() != 0) {
      S3ListModel model=new S3ListModel(MOVE_BACK,MOVE_BACK,S3ListModel.FILE_BACK);
      this.s3ListModel.addElement(model);
    }
    List<String> directories=objectListing.getCommonPrefixes();
    for (    String directory : directories) {
      String dir=stripPrefix(directory);
      int lastSlash=dir.lastIndexOf(""String_Node_Str"");
      String strippeDir=dir.substring(0,lastSlash);
      String alias=dir;
      if (isAccountNumber(strippeDir)) {
        if (aliasMap.containsKey(strippeDir)) {
          alias=aliasMap.get(strippeDir);
        }
      }
      S3ListModel model=new S3ListModel(dir,alias,S3ListModel.FILE_DIR);
      this.s3ListModel.addElement(model);
    }
    List<S3ObjectSummary> objectSummaries=objectListing.getObjectSummaries();
    for (    final S3ObjectSummary objectSummary : objectSummaries) {
      String file=stripPrefix(objectSummary.getKey());
      S3ListModel model=new S3ListModel(file,file,S3ListModel.FILE_DOC);
      this.s3ListModel.addElement(model);
    }
    loadingLabel.setVisible(false);
    this.revalidate();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9874643874643876
131078,"@Override public Object getValueAt(int rowIndex,int columnIndex){
  Event event=getEventAt(rowIndex);
  Object value=null;
switch (columnIndex) {
case 0:
    value=TableUtils.getFormatedDateTime(event.getTimestamp());
  ;
break;
case 1:
value=TableUtils.getInvokedBy(event);
break;
case 2:
value=TableUtils.getService(event);
break;
case 3:
value=event.getEventName();
break;
case 4:
value=ResourceLookup.getResourceInfo(event).getTypes();
break;
case 5:
value=ResourceLookup.getResourceInfo(event).getNames();
break;
case 6:
value=event.getEventVersion();
break;
case 7:
value=event.getAwsRegion();
break;
case 8:
value=event.getSourceIPAddress();
break;
case 9:
value=event.getUserAgent();
break;
case 10:
value=event.getErrorCode();
break;
case 11:
value=event.getErrorMessage();
break;
case 12:
value=event.getRequestId();
break;
case 13:
value=event.getEventId();
break;
case 14:
value=event.getEventType();
break;
case 15:
value=event.getApiVersion();
break;
}
return value;
}","@Override public Object getValueAt(int rowIndex,int columnIndex){
  Event event=getEventAt(rowIndex);
  Object value=null;
switch (columnIndex) {
case 0:
    value=TableUtils.getFormatedDateTime(event.getTimestamp());
  break;
case 1:
value=TableUtils.getInvokedBy(event);
break;
case 2:
value=TableUtils.getService(event);
break;
case 3:
value=event.getEventName();
break;
case 4:
value=ResourceLookup.getResourceInfo(event).getTypes();
break;
case 5:
value=ResourceLookup.getResourceInfo(event).getNames();
break;
case 6:
value=event.getEventVersion();
break;
case 7:
value=event.getAwsRegion();
break;
case 8:
value=event.getSourceIPAddress();
break;
case 9:
value=event.getEventSource();
break;
case 10:
value=event.getUserAgent();
break;
case 11:
value=event.getErrorCode();
break;
case 12:
value=event.getErrorMessage();
break;
case 13:
value=event.getRequestId();
break;
case 14:
value=event.getEventId();
break;
case 15:
value=event.getEventType();
break;
case 16:
value=event.getApiVersion();
break;
}
return value;
}",0.9382470119521912
131079,"@Override public Void doInBackground(){
  int count=0;
  String query=""String_Node_Str"";
  List<ResultSetRow> results=DbManager.getInstance().executeCursorStatement(query);
  if (results.size() != 1) {
    return null;
  }
  ResultSetRow row=results.get(0);
  AWSCredentials credentials=new BasicAWSCredentials((String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""));
  AmazonS3 s3Client=new AmazonS3Client(credentials);
  String bucketName=(String)row.get(""String_Node_Str"");
  if (request.getFilter() == null) {
    request.setFilter(new AllFilter());
  }
  List<String> filenames=request.getFilenames();
  int total=filenames.size();
  for (  String filename : filenames) {
    count++;
    for (    EventLoaderListener l : listeners) {
      l.processingFile(count,total);
    }
    try (InputStream stream=loadEventFromS3(s3Client,bucketName,filename)){
      processStream(stream,request.getFilter());
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  EventLoaderListener l : listeners) {
    l.finishedLoading();
  }
  return null;
}","@Override public Void doInBackground(){
  int count=0;
  String query=""String_Node_Str"";
  List<ResultSetRow> results=DbManager.getInstance().executeCursorStatement(query);
  if (results.size() != 1) {
    return null;
  }
  ResultSetRow row=results.get(0);
  String key=(String)row.get(""String_Node_Str"");
  String secret=(String)row.get(""String_Node_Str"");
  AWSCredentials credentials=new BasicAWSCredentials(key,secret);
  AmazonS3 s3Client=new AmazonS3Client(credentials);
  String bucketName=(String)row.get(""String_Node_Str"");
  if (request.getFilter() == null) {
    request.setFilter(new AllFilter());
  }
  List<String> filenames=request.getFilenames();
  int total=filenames.size();
  for (  String filename : filenames) {
    count++;
    for (    EventLoaderListener l : listeners) {
      l.processingFile(count,total);
    }
    try (InputStream stream=loadEventFromS3(s3Client,bucketName,filename)){
      processStream(stream,request.getFilter());
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  EventLoaderListener l : listeners) {
    l.finishedLoading();
  }
  return null;
}",0.923931623931624
131080,"/** 
 * Loads events from S3
 * @param request 
 */
public void loadEventsFromS3(final LoadFileRequest request){
  SwingWorker worker=new SwingWorker<Void,Void>(){
    @Override public Void doInBackground(){
      int count=0;
      String query=""String_Node_Str"";
      List<ResultSetRow> results=DbManager.getInstance().executeCursorStatement(query);
      if (results.size() != 1) {
        return null;
      }
      ResultSetRow row=results.get(0);
      AWSCredentials credentials=new BasicAWSCredentials((String)row.get(""String_Node_Str""),(String)row.get(""String_Node_Str""));
      AmazonS3 s3Client=new AmazonS3Client(credentials);
      String bucketName=(String)row.get(""String_Node_Str"");
      if (request.getFilter() == null) {
        request.setFilter(new AllFilter());
      }
      List<String> filenames=request.getFilenames();
      int total=filenames.size();
      for (      String filename : filenames) {
        count++;
        for (        EventLoaderListener l : listeners) {
          l.processingFile(count,total);
        }
        try (InputStream stream=loadEventFromS3(s3Client,bucketName,filename)){
          processStream(stream,request.getFilter());
        }
 catch (        IOException ioe) {
          ioe.printStackTrace();
        }
catch (        Exception e) {
          e.printStackTrace();
        }
      }
      for (      EventLoaderListener l : listeners) {
        l.finishedLoading();
      }
      return null;
    }
  }
;
  worker.execute();
}","/** 
 * Loads events from S3
 * @param request 
 */
public void loadEventsFromS3(final LoadFileRequest request){
  SwingWorker worker=new SwingWorker<Void,Void>(){
    @Override public Void doInBackground(){
      int count=0;
      String query=""String_Node_Str"";
      List<ResultSetRow> results=DbManager.getInstance().executeCursorStatement(query);
      if (results.size() != 1) {
        return null;
      }
      ResultSetRow row=results.get(0);
      String key=(String)row.get(""String_Node_Str"");
      String secret=(String)row.get(""String_Node_Str"");
      AWSCredentials credentials=new BasicAWSCredentials(key,secret);
      AmazonS3 s3Client=new AmazonS3Client(credentials);
      String bucketName=(String)row.get(""String_Node_Str"");
      if (request.getFilter() == null) {
        request.setFilter(new AllFilter());
      }
      List<String> filenames=request.getFilenames();
      int total=filenames.size();
      for (      String filename : filenames) {
        count++;
        for (        EventLoaderListener l : listeners) {
          l.processingFile(count,total);
        }
        try (InputStream stream=loadEventFromS3(s3Client,bucketName,filename)){
          processStream(stream,request.getFilter());
        }
 catch (        IOException ioe) {
          ioe.printStackTrace();
        }
catch (        Exception e) {
          e.printStackTrace();
        }
      }
      for (      EventLoaderListener l : listeners) {
        l.finishedLoading();
      }
      return null;
    }
  }
;
  worker.execute();
}",0.9388961892247044
131081,"@Override public void actionPerformed(ActionEvent e){
  JComboBox cb=(JComboBox)e.getSource();
  String newSelection=(String)cb.getSelectedItem();
  currentAccount=accountMap.get(newSelection);
  String update=""String_Node_Str"";
  DbManager.getInstance().doInsertUpdate(update);
  String setActive=""String_Node_Str"" + currentAccount.getId();
  DbManager.getInstance().doInsertUpdate(setActive);
  prefix=currentAccount.getPrefix();
  reloadContents();
}","@Override public void actionPerformed(ActionEvent e){
  JComboBox cb=(JComboBox)e.getSource();
  String newSelection=(String)cb.getSelectedItem();
  if (newSelection != null) {
    currentAccount=accountMap.get(newSelection);
    String update=""String_Node_Str"";
    DbManager.getInstance().doInsertUpdate(update);
    String setActive=""String_Node_Str"" + currentAccount.getId();
    DbManager.getInstance().doInsertUpdate(setActive);
    prefix=currentAccount.getPrefix();
    reloadContents();
  }
}",0.949685534591195
131082,"private void reloadContents(){
  loadingLabel.setVisible(true);
  this.s3ListModel.clear();
  String bucketName=currentAccount.getBucket();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest();
  listObjectsRequest.setBucketName(bucketName);
  listObjectsRequest.setPrefix(prefix);
  listObjectsRequest.setDelimiter(""String_Node_Str"");
  AWSCredentials credentials=new BasicAWSCredentials(currentAccount.getKey(),currentAccount.getSecret());
  AmazonS3 s3Client=new AmazonS3Client(credentials);
  ObjectListing objectListing=s3Client.listObjects(listObjectsRequest);
  if (prefix.trim().length() != 0) {
    S3ListModel model=new S3ListModel(MOVE_BACK,MOVE_BACK,S3ListModel.FILE_BACK);
    this.s3ListModel.addElement(model);
  }
  List<String> directories=objectListing.getCommonPrefixes();
  for (  String directory : directories) {
    String dir=stripPrefix(directory);
    int lastSlash=dir.lastIndexOf(""String_Node_Str"");
    String strippeDir=dir.substring(0,lastSlash);
    String alias=dir;
    if (isAccountNumber(strippeDir)) {
      if (aliasMap.containsKey(strippeDir)) {
        alias=aliasMap.get(strippeDir);
      }
    }
    S3ListModel model=new S3ListModel(dir,alias,S3ListModel.FILE_DIR);
    this.s3ListModel.addElement(model);
  }
  List<S3ObjectSummary> objectSummaries=objectListing.getObjectSummaries();
  for (  final S3ObjectSummary objectSummary : objectSummaries) {
    String file=stripPrefix(objectSummary.getKey());
    S3ListModel model=new S3ListModel(file,file,S3ListModel.FILE_DOC);
    this.s3ListModel.addElement(model);
  }
  loadingLabel.setVisible(false);
}","private void reloadContents(){
  loadingLabel.setVisible(true);
  this.s3ListModel.clear();
  String bucketName=currentAccount.getBucket();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest();
  listObjectsRequest.setBucketName(bucketName);
  listObjectsRequest.setPrefix(prefix);
  listObjectsRequest.setDelimiter(""String_Node_Str"");
  AWSCredentials credentials=new BasicAWSCredentials(currentAccount.getKey(),currentAccount.getSecret());
  AmazonS3 s3Client=new AmazonS3Client(credentials);
  try {
    ObjectListing objectListing=s3Client.listObjects(listObjectsRequest);
    if (prefix.trim().length() != 0) {
      S3ListModel model=new S3ListModel(MOVE_BACK,MOVE_BACK,S3ListModel.FILE_BACK);
      this.s3ListModel.addElement(model);
    }
    List<String> directories=objectListing.getCommonPrefixes();
    for (    String directory : directories) {
      String dir=stripPrefix(directory);
      int lastSlash=dir.lastIndexOf(""String_Node_Str"");
      String strippeDir=dir.substring(0,lastSlash);
      String alias=dir;
      if (isAccountNumber(strippeDir)) {
        if (aliasMap.containsKey(strippeDir)) {
          alias=aliasMap.get(strippeDir);
        }
      }
      S3ListModel model=new S3ListModel(dir,alias,S3ListModel.FILE_DIR);
      this.s3ListModel.addElement(model);
    }
    List<S3ObjectSummary> objectSummaries=objectListing.getObjectSummaries();
    for (    final S3ObjectSummary objectSummary : objectSummaries) {
      String file=stripPrefix(objectSummary.getKey());
      S3ListModel model=new S3ListModel(file,file,S3ListModel.FILE_DOC);
      this.s3ListModel.addElement(model);
    }
    loadingLabel.setVisible(false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9635167464114832
131083,"private JToolBar getToolbar(){
  JToolBar toolbar=new JToolBar();
  toolbar.setFloatable(false);
  JButton btnHome=new JButton();
  ToolBarUtils.addImageToButton(btnHome,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  btnHome.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent mouseEvent){
      prefix=""String_Node_Str"";
      reloadContents();
    }
  }
);
  toolbar.add(btnHome);
  JComboBox accountCombo=new JComboBox(accountList);
  accountCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JComboBox cb=(JComboBox)e.getSource();
      String newSelection=(String)cb.getSelectedItem();
      currentAccount=accountMap.get(newSelection);
      String update=""String_Node_Str"";
      DbManager.getInstance().doInsertUpdate(update);
      String setActive=""String_Node_Str"" + currentAccount.getId();
      DbManager.getInstance().doInsertUpdate(setActive);
      prefix=currentAccount.getPrefix();
      reloadContents();
    }
  }
);
  toolbar.add(accountCombo);
  return toolbar;
}","private JToolBar getToolbar(){
  JToolBar toolbar=new JToolBar();
  toolbar.setFloatable(false);
  JButton btnHome=new JButton();
  ToolBarUtils.addImageToButton(btnHome,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  btnHome.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent mouseEvent){
      prefix=""String_Node_Str"";
      reloadContents();
    }
  }
);
  toolbar.add(btnHome);
  JComboBox accountCombo=new JComboBox(accountList);
  accountCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JComboBox cb=(JComboBox)e.getSource();
      String newSelection=(String)cb.getSelectedItem();
      if (newSelection != null) {
        currentAccount=accountMap.get(newSelection);
        String update=""String_Node_Str"";
        DbManager.getInstance().doInsertUpdate(update);
        String setActive=""String_Node_Str"" + currentAccount.getId();
        DbManager.getInstance().doInsertUpdate(setActive);
        prefix=currentAccount.getPrefix();
        reloadContents();
      }
    }
  }
);
  toolbar.add(accountCombo);
  return toolbar;
}",0.9751332149200712
131084,"@Override public void actionPerformed(ActionEvent e){
  if (""String_Node_Str"".equals(e.getActionCommand())) {
    if (!isBucketValid() || !isKeyValid() || !isSecretValid()) {
      return;
    }
    account=new AwsAccount(0,name.getText(),bucket.getText(),key.getText(),String.valueOf(secret.getPassword()),""String_Node_Str"");
  }
  AwsAccountDialog.dialog.setVisible(false);
}","@Override public void actionPerformed(ActionEvent e){
  if (""String_Node_Str"".equals(e.getActionCommand())) {
    account=new AwsAccount(0,name.getText(),bucket.getText(),key.getText(),String.valueOf(secret.getPassword()),""String_Node_Str"");
  }
  AwsAccountDialog.dialog.setVisible(false);
}",0.3677130044843049
131085,"/** 
 * Checks if there any any updates to the database required and applies them.
 */
public void sync(){
  Integer currentVersion=0;
  Connection dbTest=getDbConnection();
  if (dbTest == null) {
    System.out.println(""String_Node_Str"");
    String url=getDbUrl();
    Properties properties=new Properties();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    try {
      DriverManager.getConnection(url,properties);
    }
 catch (    SQLException ex1) {
      Logger.getLogger(PreferencesController.class.getName()).log(Level.SEVERE,null,ex1);
    }
  }
 else {
    currentVersion=getCurrentDbVersion();
  }
  Connection conn=getDbConnection();
  if (conn != null) {
    Migrations.createVersion1(conn,currentVersion);
    Migrations.createVersion2(conn,currentVersion);
    Migrations.createVersion3(conn,currentVersion);
    Migrations.createVersion4(conn,currentVersion);
  }
}","/** 
 * Checks if there any any updates to the database required and applies them.
 */
public void sync(){
  CurrentDbVersion currentVersion=new CurrentDbVersion();
  Connection dbTest=getDbConnection();
  if (dbTest == null) {
    System.out.println(""String_Node_Str"");
    String url=getDbUrl();
    Properties properties=new Properties();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    try {
      DriverManager.getConnection(url,properties);
    }
 catch (    SQLException ex1) {
      Logger.getLogger(PreferencesController.class.getName()).log(Level.SEVERE,null,ex1);
    }
  }
 else {
    currentVersion.setDbVersion(getCurrentDbVersion());
  }
  Connection conn=getDbConnection();
  if (conn != null) {
    Migrations.createVersion1(conn,currentVersion);
    Migrations.createVersion2(conn,currentVersion);
    Migrations.createVersion3(conn,currentVersion);
    Migrations.createVersion4(conn,currentVersion);
  }
}",0.9661572052401748
131086,"public static void createVersion4(Connection conn,Integer currentVersion){
  if (currentVersion < 4) {
    StringBuilder createVersionTable=new StringBuilder();
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    DbManager.getInstance().doExecute(createVersionTable.toString());
    String insertQuery=""String_Node_Str"";
    DbManager.getInstance().doInsertUpdate(insertQuery);
    currentVersion=4;
  }
}","public static void createVersion4(Connection conn,CurrentDbVersion currentVersion){
  if (currentVersion.getDbVersion() < 4) {
    StringBuilder createVersionTable=new StringBuilder();
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    DbManager.getInstance().doExecute(createVersionTable.toString());
    StringBuilder query=new StringBuilder();
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    DbManager.getInstance().doInsertUpdate(query.toString());
    String insertQuery=""String_Node_Str"";
    DbManager.getInstance().doInsertUpdate(insertQuery);
    currentVersion.setDbVersion(4);
  }
}",0.7008928571428571
131087,"public static void createVersion3(Connection conn,Integer currentVersion){
  if (currentVersion < 3) {
    StringBuilder createVersionTable=new StringBuilder();
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    DbManager.getInstance().doExecute(createVersionTable.toString());
    String insertQuery=""String_Node_Str"";
    DbManager.getInstance().doInsertUpdate(insertQuery);
    currentVersion=3;
  }
}","public static void createVersion3(Connection conn,CurrentDbVersion currentVersion){
  if (currentVersion.getDbVersion() < 3) {
    StringBuilder createVersionTable=new StringBuilder();
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    DbManager.getInstance().doExecute(createVersionTable.toString());
    String insertQuery=""String_Node_Str"";
    DbManager.getInstance().doInsertUpdate(insertQuery);
    currentVersion.setDbVersion(3);
  }
}",0.9432773109243696
131088,"public static void createVersion2(Connection conn,Integer currentVersion){
  if (currentVersion < 2) {
    StringBuilder createVersionTable=new StringBuilder();
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    DbManager.getInstance().doExecute(createVersionTable.toString());
    String insertQuery=""String_Node_Str"";
    DbManager.getInstance().doInsertUpdate(insertQuery);
    currentVersion=2;
  }
}","public static void createVersion2(Connection conn,CurrentDbVersion currentVersion){
  if (currentVersion.getDbVersion() < 2) {
    StringBuilder createVersionTable=new StringBuilder();
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    createVersionTable.append(""String_Node_Str"");
    DbManager.getInstance().doExecute(createVersionTable.toString());
    StringBuilder query=new StringBuilder();
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    query.append(""String_Node_Str"");
    DbManager.getInstance().doInsertUpdate(query.toString());
    String insertQuery=""String_Node_Str"";
    DbManager.getInstance().doInsertUpdate(insertQuery);
    currentVersion.setDbVersion(2);
  }
}",0.722664735698769
131089,"public static void createVersion1(Connection conn,Integer currentVersion){
  if (currentVersion < 1) {
    if (!doesTableExists(conn,""String_Node_Str"")) {
      StringBuilder createPrefTable=new StringBuilder();
      createPrefTable.append(""String_Node_Str"");
      createPrefTable.append(""String_Node_Str"");
      createPrefTable.append(""String_Node_Str"");
      createPrefTable.append(""String_Node_Str"");
      DbManager.getInstance().doExecute(createPrefTable.toString());
    }
    if (!doesTableExists(conn,""String_Node_Str"")) {
      StringBuilder createCredentialsTable=new StringBuilder();
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      DbManager.getInstance().doExecute(createCredentialsTable.toString());
    }
    if (!doesTableExists(conn,""String_Node_Str"")) {
      StringBuilder createCredentialsTable=new StringBuilder();
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      DbManager.getInstance().doExecute(createCredentialsTable.toString());
    }
    if (!doesTableExists(conn,""String_Node_Str"")) {
      StringBuilder createVersionTable=new StringBuilder();
      createVersionTable.append(""String_Node_Str"");
      createVersionTable.append(""String_Node_Str"");
      createVersionTable.append(""String_Node_Str"");
      DbManager.getInstance().doExecute(createVersionTable.toString());
      String insertQuery=""String_Node_Str"";
      DbManager.getInstance().doInsertUpdate(insertQuery);
    }
    currentVersion=1;
  }
}","public static void createVersion1(Connection conn,CurrentDbVersion currentVersion){
  if (currentVersion.getDbVersion() < 1) {
    if (!doesTableExists(conn,""String_Node_Str"")) {
      StringBuilder createPrefTable=new StringBuilder();
      createPrefTable.append(""String_Node_Str"");
      createPrefTable.append(""String_Node_Str"");
      createPrefTable.append(""String_Node_Str"");
      createPrefTable.append(""String_Node_Str"");
      DbManager.getInstance().doExecute(createPrefTable.toString());
    }
    if (!doesTableExists(conn,""String_Node_Str"")) {
      StringBuilder createCredentialsTable=new StringBuilder();
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      DbManager.getInstance().doExecute(createCredentialsTable.toString());
    }
    if (!doesTableExists(conn,""String_Node_Str"")) {
      StringBuilder createCredentialsTable=new StringBuilder();
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      createCredentialsTable.append(""String_Node_Str"");
      DbManager.getInstance().doExecute(createCredentialsTable.toString());
    }
    if (!doesTableExists(conn,""String_Node_Str"")) {
      StringBuilder createVersionTable=new StringBuilder();
      createVersionTable.append(""String_Node_Str"");
      createVersionTable.append(""String_Node_Str"");
      createVersionTable.append(""String_Node_Str"");
      DbManager.getInstance().doExecute(createVersionTable.toString());
      String insertQuery=""String_Node_Str"";
      DbManager.getInstance().doInsertUpdate(insertQuery);
    }
    currentVersion.setDbVersion(1);
  }
}",0.985427135678392
131090,"public void eventLoadingComplete(){
  tableModel.orderTimeStamps();
  sideBar.eventLoadingComplete();
}","public void eventLoadingComplete(){
  sideBar.eventLoadingComplete();
}",0.8160919540229885
131091,"/** 
 * Adds a new Event to the database
 * @param event object to be added
 */
public void addEvent(Event event){
  events.add(event);
  if (this.statusBar != null) {
    this.statusBar.setLoadedEvents(this.events.size());
  }
  fireUpdate(event);
}","/** 
 * Adds a new Event to the database
 * @param event object to be added
 */
public void addEvent(Event event){
  events.add(event);
  Collections.sort(events,new TimeStampComparator());
  if (this.statusBar != null) {
    this.statusBar.setLoadedEvents(this.events.size());
  }
  fireUpdate(event);
}",0.9025270758122744
131092,"private void addInternal(Event event){
  if (filter.passesFilter(event)) {
    filteredEvents.add(event);
  }
}","private void addInternal(Event event){
  if (filter.passesFilter(event)) {
    filteredEvents.add(event);
    Collections.sort(filteredEvents,new TimeStampComparator());
  }
}",0.7762237762237763
131093,"/** 
 * Default Constructor
 */
public CloudTrailViewerApplication(){
  super(""String_Node_Str"");
  database=new FilteredEventDatabase(filter);
  eventLoader=new EventLoader(database);
  eventLoader.addEventLoaderListener(this);
  sidePanelToolBar=new SidePanelToolBar(this);
  featureToolBar=new FeatureToolBar(this);
  defineFeatures();
  buildUI();
}","/** 
 * Default Constructor
 */
public CloudTrailViewerApplication(){
  super(""String_Node_Str"");
  database=new FilteredEventDatabase(filter,statusBar);
  eventLoader=new EventLoader(database);
  eventLoader.addEventLoaderListener(this);
  sidePanelToolBar=new SidePanelToolBar(this);
  featureToolBar=new FeatureToolBar(this);
  defineFeatures();
  buildUI();
}",0.9860335195530726
131094,"private void buildStatusBar(){
  this.setBackground(Color.WHITE);
  JPanel leftSection=new JPanel();
  leftSection.add(loadedEvents);
  JPanel middleSection=new JPanel();
  middleSection.add(statusMessage);
  JPanel rightSection=new JPanel();
  rightSection.add(loadedEvents);
  this.setLayout(new GridLayout(0,3));
  this.add(leftSection);
  this.add(middleSection);
  this.add(rightSection);
  this.setVisible(true);
}","private void buildStatusBar(){
  JPanel leftSection=new JPanel();
  leftSection.add(loadedEvents);
  JPanel middleSection=new JPanel();
  middleSection.add(statusMessage);
  JPanel rightSection=new JPanel();
  rightSection.add(loadedEvents);
  this.setLayout(new GridLayout(0,3));
  this.add(leftSection);
  this.add(middleSection);
  this.add(rightSection);
  this.setVisible(true);
}",0.9565217391304348
131095,"/** 
 * Adds a new Event to the database
 * @param event object to be added
 */
public void addEvent(Event event){
  events.add(event);
  fireUpdate(event);
}","/** 
 * Adds a new Event to the database
 * @param event object to be added
 */
public void addEvent(Event event){
  events.add(event);
  if (this.statusBar != null) {
    this.statusBar.setLoadedEvents(this.events.size());
  }
  fireUpdate(event);
}",0.7745098039215687
131096,"/** 
 * Default Constructor
 * @param filter Filter to be use for filtering
 */
public FilteredEventDatabase(Filter filter){
  this.filter=filter;
  this.filter.addListener(this);
}","public FilteredEventDatabase(Filter filter,StatusBar sbar){
  super(sbar);
  this.filter=filter;
  this.filter.addListener(this);
}",0.6474358974358975
131097,"private ChartDialog(Frame frame){
  super(frame,""String_Node_Str"",true);
  final JButton btnLoad=new JButton(""String_Node_Str"");
  btnLoad.setActionCommand(""String_Node_Str"");
  btnLoad.addActionListener(this);
  getRootPane().setDefaultButton(btnLoad);
  JButton btnCancel=new JButton(""String_Node_Str"");
  btnCancel.addActionListener(this);
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.LINE_AXIS));
  buttonPanel.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));
  buttonPanel.add(Box.createHorizontalGlue());
  buttonPanel.add(btnCancel);
  buttonPanel.add(Box.createRigidArea(new Dimension(10,0)));
  buttonPanel.add(btnLoad);
  JPanel optionsPanel=new JPanel();
  optionsPanel.setLayout(new GridLayout(4,2));
  chartStyleCombo=new JComboBox(styles);
  chartSourceCombo=new JComboBox(sources);
  chartTypeCombo=new JComboBox(type);
  ignoreRootCheckBox=new JCheckBox();
  optionsPanel.add(new JLabel(""String_Node_Str""));
  optionsPanel.add(chartStyleCombo);
  optionsPanel.add(new JLabel(""String_Node_Str""));
  optionsPanel.add(chartSourceCombo);
  optionsPanel.add(new JLabel(""String_Node_Str""));
  optionsPanel.add(chartTypeCombo);
  optionsPanel.add(new JLabel(""String_Node_Str""));
  optionsPanel.add(ignoreRootCheckBox);
  Container contentPane=getContentPane();
  contentPane.add(optionsPanel,BorderLayout.CENTER);
  contentPane.add(buttonPanel,BorderLayout.PAGE_END);
  pack();
  setLocationRelativeTo(frame);
}","private ChartDialog(Frame frame){
  super(frame,""String_Node_Str"",true);
  final JButton btnLoad=new JButton(""String_Node_Str"");
  btnLoad.setActionCommand(""String_Node_Str"");
  btnLoad.addActionListener(this);
  getRootPane().setDefaultButton(btnLoad);
  JButton btnCancel=new JButton(""String_Node_Str"");
  btnCancel.setActionCommand(""String_Node_Str"");
  btnCancel.addActionListener(this);
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.LINE_AXIS));
  buttonPanel.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));
  buttonPanel.add(Box.createHorizontalGlue());
  buttonPanel.add(btnCancel);
  buttonPanel.add(Box.createRigidArea(new Dimension(10,0)));
  buttonPanel.add(btnLoad);
  JPanel optionsPanel=new JPanel();
  optionsPanel.setLayout(new GridLayout(4,2));
  chartStyleCombo=new JComboBox(styles);
  chartSourceCombo=new JComboBox(sources);
  chartTypeCombo=new JComboBox(type);
  chartTypeCombo.setActionCommand(""String_Node_Str"");
  chartTypeCombo.addActionListener(this);
  ignoreRootCheckBox=new JCheckBox();
  optionsPanel.add(new JLabel(""String_Node_Str""));
  optionsPanel.add(chartStyleCombo);
  optionsPanel.add(new JLabel(""String_Node_Str""));
  optionsPanel.add(chartSourceCombo);
  optionsPanel.add(new JLabel(""String_Node_Str""));
  optionsPanel.add(chartTypeCombo);
  optionsPanel.add(new JLabel(""String_Node_Str""));
  optionsPanel.add(ignoreRootCheckBox);
  Container contentPane=getContentPane();
  contentPane.add(optionsPanel,BorderLayout.CENTER);
  contentPane.add(buttonPanel,BorderLayout.PAGE_END);
  pack();
  setLocationRelativeTo(frame);
}",0.9532107131332688
131098,"@Override public void actionPerformed(ActionEvent e){
  if (""String_Node_Str"".equals(e.getActionCommand())) {
    chartData=new ChartData();
    chartData.setChartSource(chartSourceCombo.getSelectedItem().toString());
    chartData.setChartStyle(chartStyleCombo.getSelectedItem().toString());
    chartData.setChartType(chartTypeCombo.getSelectedItem().toString());
    chartData.setIgnoreRoot(ignoreRootCheckBox.isSelected());
  }
  ChartDialog.dialog.setVisible(false);
}","@Override public void actionPerformed(ActionEvent e){
  String actionCommand=e.getActionCommand();
switch (actionCommand) {
case ""String_Node_Str"":
    ChartDialog.dialog.setVisible(false);
  break;
case ""String_Node_Str"":
chartData=new ChartData();
chartData.setChartSource(chartSourceCombo.getSelectedItem().toString());
chartData.setChartStyle(chartStyleCombo.getSelectedItem().toString());
chartData.setChartType(chartTypeCombo.getSelectedItem().toString());
chartData.setIgnoreRoot(ignoreRootCheckBox.isSelected());
ChartDialog.dialog.setVisible(false);
break;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"" + chartTypeCombo.getSelectedItem().toString());
break;
}
}",0.5578583765112263
131099,"@Override public void actionPerformed(ActionEvent e){
  String actionCommand=e.getActionCommand();
switch (actionCommand) {
case ""String_Node_Str"":
    createChart();
  break;
case ""String_Node_Str"":
createAllEventsTable();
break;
case ""String_Node_Str"":
securityScan();
break;
}
}","@Override public void actionPerformed(ActionEvent e){
  String actionCommand=e.getActionCommand();
switch (actionCommand) {
case ""String_Node_Str"":
    showChart();
  break;
case ""String_Node_Str"":
showTable(false);
break;
case ""String_Node_Str"":
showTable(true);
break;
case ""String_Node_Str"":
securityScan();
break;
}
}",0.8704318936877077
131100,"private void buildToolBar(){
  this.setFloatable(false);
  this.setLayout(new BorderLayout());
  JButton btnNewChart=new JButton();
  btnNewChart.setActionCommand(""String_Node_Str"");
  btnNewChart.setToolTipText(""String_Node_Str"");
  btnNewChart.addActionListener(this);
  ClassLoader cl=this.getClass().getClassLoader();
  try {
    btnNewChart.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    btnNewChart.setText(""String_Node_Str"");
  }
  JButton btnEvents=new JButton();
  btnEvents.setActionCommand(""String_Node_Str"");
  btnEvents.setToolTipText(""String_Node_Str"");
  btnEvents.addActionListener(this);
  try {
    btnEvents.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    btnEvents.setText(""String_Node_Str"");
  }
  JButton btnSecurityScan=new JButton();
  btnSecurityScan.setActionCommand(""String_Node_Str"");
  btnSecurityScan.setToolTipText(""String_Node_Str"");
  btnSecurityScan.addActionListener(this);
  try {
    btnSecurityScan.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    btnSecurityScan.setText(""String_Node_Str"");
  }
  JPanel buttonsPanel=new JPanel();
  buttonsPanel.setLayout(new BoxLayout(buttonsPanel,BoxLayout.LINE_AXIS));
  buttonsPanel.add(btnNewChart);
  buttonsPanel.add(btnEvents);
  buttonsPanel.add(btnSecurityScan);
  this.add(buttonsPanel,BorderLayout.WEST);
  this.add(new JPanel(),BorderLayout.CENTER);
  JPanel searchPanel=new JPanel();
  searchPanel.setLayout(new BorderLayout());
  searchPanel.setPreferredSize(new Dimension(250,20));
  try {
    JLabel searchIcon=new JLabel();
    searchIcon.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
    searchPanel.add(searchIcon,BorderLayout.WEST);
  }
 catch (  Exception e) {
  }
  searchBox.setSize(220,20);
  searchBox.addKeyListener(this);
  searchPanel.add(searchBox,BorderLayout.CENTER);
  this.add(searchPanel,BorderLayout.EAST);
}","private void buildToolBar(){
  this.setFloatable(false);
  this.setLayout(new BorderLayout());
  JButton btnNewChart=new JButton();
  btnNewChart.setActionCommand(""String_Node_Str"");
  btnNewChart.setToolTipText(""String_Node_Str"");
  btnNewChart.addActionListener(this);
  ClassLoader cl=this.getClass().getClassLoader();
  try {
    btnNewChart.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    btnNewChart.setText(""String_Node_Str"");
  }
  JButton btnTable=new JButton();
  btnTable.setActionCommand(""String_Node_Str"");
  btnTable.setToolTipText(""String_Node_Str"");
  btnTable.addActionListener(this);
  try {
    btnTable.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    btnTable.setText(""String_Node_Str"");
  }
  JButton btnCombined=new JButton();
  btnCombined.setActionCommand(""String_Node_Str"");
  btnCombined.setToolTipText(""String_Node_Str"");
  btnCombined.addActionListener(this);
  try {
    btnCombined.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    btnCombined.setText(""String_Node_Str"");
  }
  JButton btnSecurityScan=new JButton();
  btnSecurityScan.setActionCommand(""String_Node_Str"");
  btnSecurityScan.setToolTipText(""String_Node_Str"");
  btnSecurityScan.addActionListener(this);
  try {
    btnSecurityScan.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    btnSecurityScan.setText(""String_Node_Str"");
  }
  JPanel buttonsPanel=new JPanel();
  buttonsPanel.setLayout(new BoxLayout(buttonsPanel,BoxLayout.LINE_AXIS));
  buttonsPanel.add(btnNewChart);
  buttonsPanel.add(btnTable);
  buttonsPanel.add(btnCombined);
  buttonsPanel.add(btnSecurityScan);
  this.add(buttonsPanel,BorderLayout.WEST);
  this.add(new JPanel(),BorderLayout.CENTER);
  JPanel searchPanel=new JPanel();
  searchPanel.setLayout(new BorderLayout());
  searchPanel.setPreferredSize(new Dimension(250,20));
  try {
    JLabel searchIcon=new JLabel();
    searchIcon.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
    searchPanel.add(searchIcon,BorderLayout.WEST);
  }
 catch (  Exception e) {
  }
  searchBox.setSize(220,20);
  searchBox.addKeyListener(this);
  searchPanel.add(searchBox,BorderLayout.CENTER);
  this.add(searchPanel,BorderLayout.EAST);
}",0.8983050847457628
131101,"@Override public void finishedLoading(){
  lblFirstEvent.setText(sdf.format(firstEvent));
  lblLastEvent.setText(sdf.format(lastEvent));
  newMessage(""String_Node_Str"");
}","@Override public void finishedLoading(){
  lblFirstEvent.setText(EventUtils.getFormatedDateTime(firstEvent));
  lblLastEvent.setText(EventUtils.getFormatedDateTime(lastEvent));
  newMessage(""String_Node_Str"");
}",0.7853403141361257
131102,"private void updateTextArea(){
  if (chartEvents != null) {
    int count=0;
    StringBuilder dataString=new StringBuilder();
    for (    Map.Entry entry : chartEvents) {
      if (count >= chartData.getTop()) {
        break;
      }
      dataString.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(AbstractInternalFrame.NEWLINE);
      count++;
    }
    tabbedTextArea.setText(dataString.toString());
  }
}","private void updateTextArea(){
  if (chartEvents != null && chartEvents.size() > 0) {
    int count=0;
    StringBuilder dataString=new StringBuilder();
    for (    Map.Entry entry : chartEvents) {
      if (count >= chartData.getTop()) {
        break;
      }
      dataString.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(AbstractInternalFrame.NEWLINE);
      count++;
    }
    tabbedTextArea.setText(dataString.toString());
  }
}",0.9715536105032824
131103,"private void createChart(){
  int count=chartData.getTop();
  if (chartEvents.size() < chartData.getTop()) {
    count=chartEvents.size();
  }
  List<Map.Entry<String,Integer>> topEvents=new ArrayList<>();
  for (int i=0; i < count; i++) {
    topEvents.add(chartEvents.get(i));
  }
  chartPanel=ChartCreator.createChart(topEvents,chartData);
  if (chartPanel != null) {
    chartPanel.addChartMouseListener(this);
  }
}","private void createChart(){
  if (chartEvents != null && chartEvents.size() > 0) {
    int count=chartData.getTop();
    if (chartEvents.size() < chartData.getTop()) {
      count=chartEvents.size();
    }
    List<Map.Entry<String,Integer>> topEvents=new ArrayList<>();
    for (int i=0; i < count; i++) {
      topEvents.add(chartEvents.get(i));
    }
    chartPanel=ChartCreator.createChart(topEvents,chartData);
    if (chartPanel != null) {
      chartPanel.addChartMouseListener(this);
    }
  }
}",0.8992416034669556
131104,"private void reloadTable(){
  for (int i=defaultTableModel.getRowCount() - 1; i >= 0; i--) {
    defaultTableModel.removeRow(i);
  }
  if (chartEvents != null && chartEvents.size() > 0) {
    int count=0;
    for (    Map.Entry entry : chartEvents) {
      defaultTableModel.addRow(new Object[]{entry.getKey(),entry.getValue()});
      count++;
      if (count >= chartData.getTop()) {
        break;
      }
    }
  }
}","private void reloadTable(){
  if (chartEvents != null && chartEvents.size() > 0) {
    for (int i=defaultTableModel.getRowCount() - 1; i >= 0; i--) {
      defaultTableModel.removeRow(i);
    }
    int count=0;
    for (    Map.Entry entry : chartEvents) {
      defaultTableModel.addRow(new Object[]{entry.getKey(),entry.getValue()});
      count++;
      if (count >= chartData.getTop()) {
        break;
      }
    }
  }
}",0.8605200945626478
131105,"@Override public void finishedLoading(){
  generateData(events);
  this.revalidate();
}","@Override public void finishedLoading(){
  generateData(events);
  createTpsChart();
  this.revalidate();
}",0.8969072164948454
131106,"@Override public void newEvents(List<Event> eventLoaderEvent){
  for (  Event event : eventLoaderEvent) {
    if (scanActions != null && scanActions.size() > 0 && scanActions.contains(event.getEventName())) {
      events.add(event);
    }
 else {
      filters.setFilterCriteria(scanNeedle);
      if (filters.passesFilter(event)) {
        events.add(event);
      }
    }
  }
}","@Override public void newEvents(List<Event> eventLoaderEvent){
  for (  Event event : eventLoaderEvent) {
    if (scanActions != null && scanActions.size() > 0 && scanActions.contains(event.getEventName())) {
      events.add(event);
      eventsTableModel.addEvent(event);
    }
 else {
      filters.setFilterCriteria(scanNeedle);
      if (filters.passesFilter(event)) {
        events.add(event);
        eventsTableModel.addEvent(event);
      }
    }
  }
}",0.9026128266033254
131107,"private void buildUI(){
  this.setSize(640,480);
  final EventsTable table=new EventsTable(eventsTableModel);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getFirstIndex() >= 0) {
        Event event=eventsTableModel.getEventAt(table.getSelectedRow());
        showEventDetail(event);
      }
    }
  }
);
  table.setVisible(true);
  JButton btnShowChart=new JButton();
  btnShowChart.setActionCommand(""String_Node_Str"");
  btnShowChart.setToolTipText(""String_Node_Str"");
  try {
    ClassLoader cl=this.getClass().getClassLoader();
    btnShowChart.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    btnShowChart.setText(""String_Node_Str"");
  }
  btnShowChart.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      createAndShowChart();
    }
  }
);
  JToolBar toolbar=new JToolBar();
  toolbar.setFloatable(false);
  toolbar.add(btnShowChart);
  JScrollPane eventsScrollPane=new JScrollPane(table);
  JSplitPane split=new JSplitPane();
  split.add(eventsScrollPane,JSplitPane.LEFT);
  split.add(getEventDetailPanel(),JSplitPane.RIGHT);
  split.setOneTouchExpandable(true);
  split.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
  split.setDividerSize(2);
  split.setAutoscrolls(false);
  split.setDividerLocation(400);
  add(toolbar,BorderLayout.NORTH);
  add(split,BorderLayout.CENTER);
}","private void buildUI(){
  this.setSize(640,480);
  final EventsTable table=new EventsTable(eventsTableModel);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getFirstIndex() >= 0) {
        Event event=eventsTableModel.getEventAt(table.getSelectedRow());
        showEventDetail(event);
      }
    }
  }
);
  table.setVisible(true);
  JButton btnShowChart=new JButton();
  btnShowChart.setActionCommand(""String_Node_Str"");
  btnShowChart.setToolTipText(""String_Node_Str"");
  try {
    ClassLoader cl=this.getClass().getClassLoader();
    btnShowChart.setIcon(new ImageIcon(cl.getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
    btnShowChart.setText(""String_Node_Str"");
  }
  btnShowChart.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      createAndShowChart();
    }
  }
);
  JToolBar toolbar=new JToolBar();
  toolbar.setFloatable(false);
  toolbar.add(btnShowChart);
  JScrollPane eventsScrollPane=new JScrollPane(table);
  JSplitPane split=new JSplitPane();
  split.add(eventsScrollPane,JSplitPane.LEFT);
  split.add(getEventDetailPanel(),JSplitPane.RIGHT);
  split.setOneTouchExpandable(true);
  split.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
  split.setDividerSize(10);
  split.setAutoscrolls(false);
  split.setDividerLocation(this.getWidth() - 300);
  split.setResizeWeight(1.0);
  add(toolbar,BorderLayout.NORTH);
  add(split,BorderLayout.CENTER);
}",0.9825829773250082
131108,"@Override public void sourceUpdated(String newSource){
  chartData.setChartSource(newSource);
  updateChart();
}","@Override public void sourceUpdated(String newSource){
  chartData.setChartSource(newSource);
  updatePanel(chartData.getTop());
}",0.9173553719008264
131109,"@Override public void styleUpdated(String newStyle){
  chartData.setChartStyle(newStyle);
  updateChart();
}","@Override public void styleUpdated(String newStyle){
  chartData.setChartStyle(newStyle);
  updatePanel(chartData.getTop());
}",0.9145299145299144
131110,"@Override public void orientationUpdated(PlotOrientation newOrientation){
  chartData.setOrientation(newOrientation);
  updateChart();
}","@Override public void orientationUpdated(PlotOrientation newOrientation){
  chartData.setOrientation(newOrientation);
  updatePanel(chartData.getTop());
}",0.9310344827586208
131111,"/** 
 * Default contructor.
 */
public TriDataPanelMenu(){
  this.add(getTopMenu());
  this.add(getStyleMenu());
  this.add(getOrientationMenu());
  this.add(getSourceMenu());
}","/** 
 * Default constructor.
 */
public TriDataPanelMenu(){
  this.add(getTopMenu());
  this.add(getStyleMenu());
  this.add(getOrientationMenu());
  this.add(getSourceMenu());
}",0.9971830985915492
131112,"private void handleSourceActions(String actionCommand){
switch (actionCommand) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    fireSourceUpdated(actionCommand);
  break;
}
}","private void handleSourceActions(String actionCommand){
  fireSourceUpdated(actionCommand);
}",0.2735294117647059
131113,"/** 
 * Register a listener to the class.
 * @param l A class that implments TriDataPanelMenuListener
 */
public void addListener(TriDataPanelMenuListener l){
  listeners.add(l);
}","/** 
 * Register a listener to the class.
 * @param l A class that implements TriDataPanelMenuListener
 */
public void addListener(TriDataPanelMenuListener l){
  listeners.add(l);
}",0.997229916897507
131114,"private S3FileChooserDialog(Frame frame){
  super(frame,""String_Node_Str"",true);
  final JButton btnLoad=new JButton(""String_Node_Str"");
  btnLoad.setActionCommand(""String_Node_Str"");
  btnLoad.addActionListener(this);
  getRootPane().setDefaultButton(btnLoad);
  JButton btnCancel=new JButton(""String_Node_Str"");
  btnCancel.addActionListener(this);
  s3List=new JList(s3ListModel);
  s3List.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent mouseEvent){
      if (mouseEvent.getClickCount() == 2) {
        handleDoubleClickEvent();
      }
 else       if (mouseEvent.getClickCount() == 1) {
        String selected=s3List.getSelectedValue().toString();
        if (selected.contains(""String_Node_Str"")) {
          btnLoad.setEnabled(false);
        }
 else {
          btnLoad.setEnabled(true);
        }
      }
    }
  }
);
  s3List.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  s3List.setLayoutOrientation(JList.VERTICAL);
  s3List.setVisibleRowCount(-1);
  JScrollPane listScroller=new JScrollPane(s3List);
  listScroller.setPreferredSize(new Dimension(400,480));
  listScroller.setAlignmentX(LEFT_ALIGNMENT);
  JPanel listPane=new JPanel();
  listPane.setLayout(new BoxLayout(listPane,BoxLayout.PAGE_AXIS));
  listPane.add(Box.createRigidArea(new Dimension(0,5)));
  listPane.add(listScroller);
  listPane.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  JPanel buttonPane=new JPanel();
  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.LINE_AXIS));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));
  buttonPane.add(Box.createHorizontalGlue());
  buttonPane.add(btnCancel);
  buttonPane.add(Box.createRigidArea(new Dimension(10,0)));
  buttonPane.add(btnLoad);
  Container contentPane=getContentPane();
  contentPane.add(listPane,BorderLayout.CENTER);
  contentPane.add(buttonPane,BorderLayout.PAGE_END);
  reloadContents();
  pack();
  setLocationRelativeTo(frame);
}","private S3FileChooserDialog(Frame frame){
  super(frame,""String_Node_Str"",true);
  final JButton btnLoad=new JButton(""String_Node_Str"");
  btnLoad.setActionCommand(""String_Node_Str"");
  btnLoad.addActionListener(this);
  getRootPane().setDefaultButton(btnLoad);
  JButton btnCancel=new JButton(""String_Node_Str"");
  btnCancel.addActionListener(this);
  s3ListModel.clear();
  s3List=new JList(s3ListModel);
  s3List.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent mouseEvent){
      if (mouseEvent.getClickCount() == 2) {
        handleDoubleClickEvent();
      }
 else       if (mouseEvent.getClickCount() == 1) {
        String selected=s3List.getSelectedValue().toString();
        if (selected.contains(""String_Node_Str"")) {
          btnLoad.setEnabled(false);
        }
 else {
          btnLoad.setEnabled(true);
        }
      }
    }
  }
);
  s3List.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  s3List.setLayoutOrientation(JList.VERTICAL);
  s3List.setVisibleRowCount(-1);
  JScrollPane listScroller=new JScrollPane(s3List);
  listScroller.setPreferredSize(new Dimension(400,480));
  listScroller.setAlignmentX(LEFT_ALIGNMENT);
  JPanel listPane=new JPanel();
  listPane.setLayout(new BoxLayout(listPane,BoxLayout.PAGE_AXIS));
  listPane.add(Box.createRigidArea(new Dimension(0,5)));
  listPane.add(listScroller);
  listPane.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  JPanel buttonPane=new JPanel();
  buttonPane.setLayout(new BoxLayout(buttonPane,BoxLayout.LINE_AXIS));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(0,10,10,10));
  buttonPane.add(Box.createHorizontalGlue());
  buttonPane.add(btnCancel);
  buttonPane.add(Box.createRigidArea(new Dimension(10,0)));
  buttonPane.add(btnLoad);
  Container contentPane=getContentPane();
  contentPane.add(listPane,BorderLayout.CENTER);
  contentPane.add(buttonPane,BorderLayout.PAGE_END);
  reloadContents();
  pack();
  setLocationRelativeTo(frame);
}",0.9942138364779874
131115,"private String stripPrefix(String key){
  String stripped=key;
  if (this.prefix.trim().length() > 0) {
    int prefixLength=this.prefix.length() - 1;
    stripped=key.substring(prefixLength,key.length());
    int firstSlash=stripped.indexOf(""String_Node_Str"");
    if (firstSlash == 0) {
      stripped=stripped.substring(1,stripped.length());
    }
  }
  return stripped;
}","private String stripPrefix(String key){
  String stripped=key;
  if (S3FileChooserDialog.prefix.trim().length() > 0) {
    int prefixLength=S3FileChooserDialog.prefix.length() - 1;
    stripped=key.substring(prefixLength,key.length());
    int firstSlash=stripped.indexOf(""String_Node_Str"");
    if (firstSlash == 0) {
      stripped=stripped.substring(1,stripped.length());
    }
  }
  return stripped;
}",0.941025641025641
131116,"public static List<String> showDialog(Component parent){
  String s3_location=PropertiesSingleton.getInstance().getProperty(""String_Node_Str"");
  if (s3_location != null) {
    prefix=s3_location;
  }
  Frame frame=JOptionPane.getFrameForComponent(parent);
  dialog=new S3FileChooserDialog(frame);
  dialog.setVisible(true);
  return selectedKeys;
}","public static List<String> showDialog(Component parent){
  selectedKeys.clear();
  String s3_location=PropertiesSingleton.getInstance().getProperty(""String_Node_Str"");
  if (s3_location != null) {
    prefix=s3_location;
  }
  Frame frame=JOptionPane.getFrameForComponent(parent);
  dialog=new S3FileChooserDialog(frame);
  dialog.setVisible(true);
  return selectedKeys;
}",0.9667590027700832
131117,"private void addSelectedKeys(){
  List<String> selectedItems=s3List.getSelectedValuesList();
  for (  String key : selectedItems) {
    selectedKeys.add(this.prefix + key);
  }
}","private void addSelectedKeys(){
  List<String> selectedItems=s3List.getSelectedValuesList();
  for (  String key : selectedItems) {
    selectedKeys.add(S3FileChooserDialog.prefix + key);
  }
}",0.9487870619946092
131118,"private void showEventsByServiceChart(){
  if (eventsDatabase.getEventsPerService().size() > 0) {
    ChartData chartData=new ChartData();
    chartData.setChartStyle(""String_Node_Str"");
    chartData.setChartSource(""String_Node_Str"");
    List<Map.Entry<String,Integer>> events=EventUtils.entriesSortedByValues(eventsDatabase.getEventsPerService());
    ChartWindow chart=new ChartWindow(chartData,events);
    chart.setVisible(true);
    jCloudTrailViewer.DESKTOP.add(chart);
    try {
      chart.setSelected(true);
    }
 catch (    java.beans.PropertyVetoException pve) {
    }
  }
 else {
    JOptionPane.showMessageDialog(jCloudTrailViewer.DESKTOP,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
  }
}","private void showEventsByServiceChart(){
  if (eventsDatabase.getEventsPerService().size() > 0) {
    ChartData chartData=new ChartData();
    chartData.setChartStyle(""String_Node_Str"");
    chartData.setChartSource(""String_Node_Str"");
    chartData.setTop(5);
    ChartWindow chart=new ChartWindow(chartData,eventsDatabase.getEvents());
    chart.setVisible(true);
    jCloudTrailViewer.DESKTOP.add(chart);
    try {
      chart.setSelected(true);
    }
 catch (    java.beans.PropertyVetoException pve) {
    }
  }
 else {
    JOptionPane.showMessageDialog(jCloudTrailViewer.DESKTOP,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
  }
}",0.849493487698987
131119,"private void buildMenu(){
  fileChooser.setMultiSelectionEnabled(true);
  menuScanTextField.addKeyListener(this);
  JMenu menuFile=new JMenu(""String_Node_Str"");
  JMenuItem exit=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent t){
      System.exit(0);
    }
  }
);
  menuFile.add(exit);
  JMenu menuEvents=new JMenu(""String_Node_Str"");
  JMenuItem loadLocal=new JMenuItem(""String_Node_Str"");
  loadLocal.setActionCommand(""String_Node_Str"");
  loadLocal.addActionListener(this);
  JMenuItem loadS3=new JMenuItem(""String_Node_Str"");
  loadS3.setActionCommand(""String_Node_Str"");
  loadS3.addActionListener(this);
  if (!PropertiesSingleton.getInstance().validS3Credentials()) {
    loadS3.setEnabled(false);
  }
  JMenuItem clearDatabase=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent t){
      eventsDatabase.clear();
    }
  }
);
  menuEvents.add(loadLocal);
  menuEvents.add(loadS3);
  menuEvents.addSeparator();
  menuEvents.add(clearDatabase);
  JMenu menuServices=new JMenu(""String_Node_Str"");
  JMenuItem eventsByService=new JMenuItem(""String_Node_Str"");
  eventsByService.setActionCommand(""String_Node_Str"");
  eventsByService.addActionListener(this);
  menuServices.add(eventsByService);
  JMenu menuScan=new JMenu(""String_Node_Str"");
  menuScan.add(menuScanTextField);
  menuScan.addSeparator();
  menuScan.addMenuListener(new MenuListener(){
    @Override public void menuCanceled(    MenuEvent e){
    }
    @Override public void menuDeselected(    MenuEvent e){
    }
    @Override public void menuSelected(    MenuEvent e){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          menuScanTextField.grabFocus();
        }
      }
);
    }
  }
);
  menusMap.put(""String_Node_Str"",menuScan);
  JMenu menuAbout=new JMenu(""String_Node_Str"");
  JMenuItem about=new JMenuItem(""String_Node_Str"" + jCloudTrailViewer.VERSION);
  menuAbout.add(about);
  this.add(menuFile);
  this.add(menuEvents);
  this.add(menuServices);
  this.add(menuScan);
  createMenusFromFile();
  this.add(menuAbout);
}","private void buildMenu(){
  fileChooser.setMultiSelectionEnabled(true);
  menuScanTextField.addKeyListener(this);
  JMenu menuFile=new JMenu(""String_Node_Str"");
  JMenuItem exit=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent t){
      System.exit(0);
    }
  }
);
  menuFile.add(exit);
  JMenu menuEvents=new JMenu(""String_Node_Str"");
  JMenuItem loadLocal=new JMenuItem(""String_Node_Str"");
  loadLocal.setActionCommand(""String_Node_Str"");
  loadLocal.addActionListener(this);
  JMenuItem loadS3=new JMenuItem(""String_Node_Str"");
  loadS3.setActionCommand(""String_Node_Str"");
  loadS3.addActionListener(this);
  if (!PropertiesSingleton.getInstance().validS3Credentials()) {
    loadS3.setEnabled(false);
  }
  JMenuItem clearDatabase=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent t){
      eventsDatabase.clear();
    }
  }
);
  menuEvents.add(loadLocal);
  menuEvents.add(loadS3);
  menuEvents.addSeparator();
  menuEvents.add(clearDatabase);
  JMenu menuServices=new JMenu(""String_Node_Str"");
  JMenuItem eventsByService=new JMenuItem(""String_Node_Str"");
  eventsByService.setActionCommand(""String_Node_Str"");
  eventsByService.addActionListener(this);
  menuServices.add(eventsByService);
  JPanel scanSearchPanel=new JPanel();
  scanSearchPanel.setBackground(Color.WHITE);
  scanSearchPanel.setLayout(new BorderLayout());
  JLabel iconLabel=new JLabel();
  try {
    iconLabel.setIcon(new ImageIcon(this.getClass().getClassLoader().getResource(""String_Node_Str"")));
  }
 catch (  Exception e) {
  }
  scanSearchPanel.add(iconLabel,BorderLayout.WEST);
  scanSearchPanel.add(menuScanTextField,BorderLayout.CENTER);
  JMenu menuScan=new JMenu(""String_Node_Str"");
  menuScan.add(scanSearchPanel);
  menuScan.addSeparator();
  menuScan.addMenuListener(new MenuListener(){
    @Override public void menuCanceled(    MenuEvent e){
    }
    @Override public void menuDeselected(    MenuEvent e){
    }
    @Override public void menuSelected(    MenuEvent e){
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          menuScanTextField.grabFocus();
        }
      }
);
    }
  }
);
  menusMap.put(""String_Node_Str"",menuScan);
  JMenu menuAbout=new JMenu(""String_Node_Str"");
  JMenuItem about=new JMenuItem(""String_Node_Str"" + jCloudTrailViewer.VERSION);
  menuAbout.add(about);
  this.add(menuFile);
  this.add(menuEvents);
  this.add(menuServices);
  this.add(menuScan);
  createMenusFromFile();
  this.add(menuAbout);
}",0.890107572242143
131120,"private void updateChartEvents(boolean chart3d){
  generateInitialChartData();
  updateChart(chart3d);
}","private void updateChartEvents(String style,boolean chart3d){
  chartData.setChartStyle(style);
  generateInitialChartData();
  updateChart(chart3d);
}",0.8156862745098039
131121,"private void createChart(boolean chart3d){
  if (mnuPie.getState() || mnuPie3d.getState()) {
    chartPanel=ChartCreator.createTopPieChart(chartData.getTop(),chartEvents,chart3d);
  }
 else   if (mnuBar.getState() || mnuBar3d.getState()) {
    chartPanel=ChartCreator.createBarChart(chartData.getTop(),chartEvents,chartData.getChartSource(),""String_Node_Str"",PlotOrientation.VERTICAL,chart3d);
  }
  if (chartPanel != null) {
    chartPanel.addChartMouseListener(this);
  }
}","private void createChart(boolean chart3d){
  if (mnuPie.isSelected() || mnuPie3d.isSelected()) {
    chartPanel=ChartCreator.createTopPieChart(chartData.getTop(),chartEvents,chart3d);
  }
 else   if (mnuBar.isSelected() || mnuBar3d.isSelected()) {
    chartPanel=ChartCreator.createBarChart(chartData.getTop(),chartEvents,chartData.getChartSource(),""String_Node_Str"",PlotOrientation.VERTICAL,chart3d);
  }
  if (chartPanel != null) {
    chartPanel.addChartMouseListener(this);
  }
}",0.9248434237995824
131122,"private void buildDisplay(boolean showMenu){
  this.setLayout(new BorderLayout());
  if (chartData.getTop() == 5) {
    mnuTop5.setState(true);
  }
 else   if (chartData.getTop() == 10) {
    mnuTop10.setState(true);
  }
  if (chartData.getChartStyle().equalsIgnoreCase(""String_Node_Str"")) {
    mnuPie.setState(true);
  }
 else   if (chartData.getChartStyle().equalsIgnoreCase(""String_Node_Str"")) {
    mnuBar.setState(true);
  }
  createChart(false);
  if (chartPanel != null) {
    tabs.addTab(""String_Node_Str"",chartPanel);
  }
  defaultTableModel.addColumn(""String_Node_Str"");
  defaultTableModel.addColumn(""String_Node_Str"");
  JTable table=new JTable(defaultTableModel);
  JScrollPane tablecrollPane=new JScrollPane(table);
  reloadTable();
  tabs.addTab(""String_Node_Str"",tablecrollPane);
  updateTextArea();
  JScrollPane tabbedDataScrollPane=new JScrollPane(tabbedTextArea);
  tabs.addTab(""String_Node_Str"",tabbedDataScrollPane);
  if (showMenu) {
    this.add(getChartMenu(),BorderLayout.NORTH);
  }
  this.add(tabs,BorderLayout.CENTER);
}","private void buildDisplay(boolean showMenu){
  this.setLayout(new BorderLayout());
  selectInitialMenus();
  createChart(false);
  if (chartPanel != null) {
    tabs.addTab(""String_Node_Str"",chartPanel);
  }
  defaultTableModel.addColumn(""String_Node_Str"");
  defaultTableModel.addColumn(""String_Node_Str"");
  JTable table=new JTable(defaultTableModel);
  JScrollPane tablecrollPane=new JScrollPane(table);
  reloadTable();
  tabs.addTab(""String_Node_Str"",tablecrollPane);
  updateTextArea();
  JScrollPane tabbedDataScrollPane=new JScrollPane(tabbedTextArea);
  tabs.addTab(""String_Node_Str"",tabbedDataScrollPane);
  if (showMenu) {
    this.add(getChartMenu(),BorderLayout.NORTH);
  }
  this.add(tabs,BorderLayout.CENTER);
}",0.795045045045045
131123,"public JMenuBar getChartMenu(){
  mnuTop5.setActionCommand(""String_Node_Str"");
  mnuTop5.addActionListener(this);
  mnuTop10.setActionCommand(""String_Node_Str"");
  mnuTop10.addActionListener(this);
  JMenu menuTop=new JMenu(""String_Node_Str"");
  menuTop.add(mnuTop5);
  menuTop.add(mnuTop10);
  mnuPie.setActionCommand(""String_Node_Str"");
  mnuPie.addActionListener(this);
  mnuPie3d.setActionCommand(""String_Node_Str"");
  mnuPie3d.addActionListener(this);
  mnuBar.setActionCommand(""String_Node_Str"");
  mnuBar.addActionListener(this);
  mnuBar3d.setActionCommand(""String_Node_Str"");
  mnuBar3d.addActionListener(this);
  JMenu menuStyle=new JMenu(""String_Node_Str"");
  menuStyle.add(mnuPie);
  menuStyle.add(mnuPie3d);
  menuStyle.add(mnuBar);
  menuStyle.add(mnuBar3d);
  JMenu menuChart=new JMenu(""String_Node_Str"");
  menuChart.add(menuTop);
  menuChart.add(menuStyle);
  JMenuBar menuBar=new JMenuBar();
  menuBar.add(menuChart);
  return menuBar;
}","public JMenuBar getChartMenu(){
  mnuTop5.setActionCommand(""String_Node_Str"");
  mnuTop5.addActionListener(this);
  mnuTop10.setActionCommand(""String_Node_Str"");
  mnuTop10.addActionListener(this);
  ButtonGroup topGroup=new ButtonGroup();
  topGroup.add(mnuTop5);
  topGroup.add(mnuTop10);
  JMenu menuTop=new JMenu(""String_Node_Str"");
  menuTop.add(mnuTop5);
  menuTop.add(mnuTop10);
  mnuPie.setActionCommand(""String_Node_Str"");
  mnuPie.addActionListener(this);
  mnuPie3d.setActionCommand(""String_Node_Str"");
  mnuPie3d.addActionListener(this);
  mnuBar.setActionCommand(""String_Node_Str"");
  mnuBar.addActionListener(this);
  mnuBar3d.setActionCommand(""String_Node_Str"");
  mnuBar3d.addActionListener(this);
  ButtonGroup styleGroup=new ButtonGroup();
  styleGroup.add(mnuPie);
  styleGroup.add(mnuPie3d);
  styleGroup.add(mnuBar);
  styleGroup.add(mnuBar3d);
  JMenu menuStyle=new JMenu(""String_Node_Str"");
  menuStyle.add(mnuPie);
  menuStyle.add(mnuPie3d);
  menuStyle.add(mnuBar);
  menuStyle.add(mnuBar3d);
  JMenu menuChart=new JMenu(""String_Node_Str"");
  menuChart.add(menuTop);
  menuChart.add(menuStyle);
  JMenuBar menuBar=new JMenuBar();
  menuBar.add(menuChart);
  return menuBar;
}",0.8863109048723898
131124,"private void updatePanel(int top){
  boolean chart3d=false;
  if (mnuPie3d.getState() || mnuBar3d.getState()) {
    chart3d=true;
  }
  chartData.setTop(top);
  updateChartEvents(chart3d);
  reloadTable();
  updateTextArea();
}","private void updatePanel(int top){
  boolean chart3d=false;
  if (mnuPie3d.isSelected() || mnuBar3d.isSelected()) {
    chart3d=true;
  }
  chartData.setTop(top);
  updateChartEvents(chartData.getChartStyle(),chart3d);
  reloadTable();
  updateTextArea();
}",0.8801652892561983
131125,"@Override public void actionPerformed(ActionEvent e){
  String actionCommand=e.getActionCommand();
switch (actionCommand) {
case ""String_Node_Str"":
    mnuTop5.setState(true);
  mnuTop10.setState(false);
updatePanel(5);
break;
case ""String_Node_Str"":
mnuTop5.setState(false);
mnuTop10.setState(true);
updatePanel(10);
break;
case ""String_Node_Str"":
mnuPie.setState(true);
mnuBar.setState(false);
mnuPie3d.setState(false);
mnuBar3d.setState(false);
chartData.setChartStyle(""String_Node_Str"");
updateChartEvents(false);
break;
case ""String_Node_Str"":
mnuPie.setState(false);
mnuBar.setState(true);
mnuPie3d.setState(false);
mnuBar3d.setState(false);
chartData.setChartStyle(""String_Node_Str"");
updateChartEvents(false);
break;
case ""String_Node_Str"":
mnuPie.setState(false);
mnuBar.setState(false);
mnuPie3d.setState(true);
mnuBar3d.setState(false);
chartData.setChartStyle(""String_Node_Str"");
updateChartEvents(true);
break;
case ""String_Node_Str"":
mnuPie.setState(false);
mnuBar.setState(false);
mnuPie3d.setState(false);
mnuBar3d.setState(true);
chartData.setChartStyle(""String_Node_Str"");
updateChartEvents(true);
break;
}
}","@Override public void actionPerformed(ActionEvent e){
  String actionCommand=e.getActionCommand();
switch (actionCommand) {
case ""String_Node_Str"":
    updatePanel(5);
  break;
case ""String_Node_Str"":
updatePanel(10);
break;
case ""String_Node_Str"":
updateChartEvents(""String_Node_Str"",false);
break;
case ""String_Node_Str"":
;
updateChartEvents(""String_Node_Str"",false);
break;
case ""String_Node_Str"":
updateChartEvents(""String_Node_Str"",true);
break;
case ""String_Node_Str"":
updateChartEvents(""String_Node_Str"",true);
break;
}
}",0.3107617896009673
131126,"public static String getEventProperty(String property,Event event){
  String requiredValue=null;
  if (property.indexOf(""String_Node_Str"") > 1) {
    String[] parts=property.split(Pattern.quote(""String_Node_Str""));
    Object subClassObj=callMethod(parts[0],event);
    if (parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      UserIdentity userIdentity=(UserIdentity)subClassObj;
      requiredValue=(String)callMethod(parts[1],userIdentity);
    }
  }
 else {
    requiredValue=(String)callMethod(property,event);
  }
  return requiredValue;
}","public static String getEventProperty(String property,Object event){
  String requiredValue;
  if (property.contains(""String_Node_Str"")) {
    int pos=property.indexOf(""String_Node_Str"");
    String field=property.substring(0,pos);
    Object subClass=callMethod(field,event);
    if (subClass != null) {
      property=property.substring(pos + 1);
      return getEventProperty(property,subClass);
    }
 else {
      return null;
    }
  }
 else {
    requiredValue=(String)callMethod(property,event);
  }
  return requiredValue;
}",0.2634508348794063
131127,"private void buildUI(){
  this.setSize(jCloudTrailViewer.DESKTOP.getWidth() - 50,jCloudTrailViewer.DESKTOP.getHeight() - 50);
  JPanel sidePanel=new JPanel();
  sidePanel.setLayout(new BoxLayout(sidePanel,BoxLayout.Y_AXIS));
  sidePanel.add(triPanel);
  this.setJMenuBar(triPanel.getChartMenu());
  sidePanel.add(getEventDetailPanel());
  JPanel mainPanel=new JPanel();
  mainPanel.setLayout(new BorderLayout());
  createTpsChart();
  mainPanel.add(tpsPanel,BorderLayout.NORTH);
  final EventsTable table=new EventsTable(eventsTableModel);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getFirstIndex() >= 0) {
        Event event=eventsTableModel.getEventAt(table.getSelectedRow());
        showEventDetail(event);
      }
    }
  }
);
  table.setSize(new Dimension(400,205));
  table.setVisible(true);
  JScrollPane eventsScrollPane=new JScrollPane(table);
  mainPanel.add(eventsScrollPane,BorderLayout.CENTER);
  JSplitPane split=new JSplitPane();
  split.add(mainPanel,JSplitPane.LEFT);
  split.add(sidePanel,JSplitPane.RIGHT);
  split.setOneTouchExpandable(true);
  split.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
  split.setDividerSize(10);
  split.setAutoscrolls(false);
  split.setDividerLocation(this.getWidth() - 300);
  split.setResizeWeight(1.0);
  this.add(split,BorderLayout.CENTER);
  this.validate();
}","private void buildUI(){
  this.setSize(jCloudTrailViewer.DESKTOP.getWidth() - 50,jCloudTrailViewer.DESKTOP.getHeight() - 50);
  JPanel sidePanel=new JPanel();
  sidePanel.setLayout(new BoxLayout(sidePanel,BoxLayout.Y_AXIS));
  sidePanel.add(triPanel);
  sidePanel.add(getEventDetailPanel());
  JPanel mainPanel=new JPanel();
  mainPanel.setLayout(new BorderLayout());
  createTpsChart();
  mainPanel.add(tpsPanel,BorderLayout.NORTH);
  final EventsTable table=new EventsTable(eventsTableModel);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getFirstIndex() >= 0) {
        Event event=eventsTableModel.getEventAt(table.getSelectedRow());
        showEventDetail(event);
      }
    }
  }
);
  table.setSize(new Dimension(400,205));
  table.setVisible(true);
  JScrollPane eventsScrollPane=new JScrollPane(table);
  mainPanel.add(eventsScrollPane,BorderLayout.CENTER);
  JSplitPane split=new JSplitPane();
  split.add(mainPanel,JSplitPane.LEFT);
  split.add(sidePanel,JSplitPane.RIGHT);
  split.setOneTouchExpandable(true);
  split.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
  split.setDividerSize(10);
  split.setAutoscrolls(false);
  split.setDividerLocation(this.getWidth() - 300);
  split.setResizeWeight(1.0);
  this.add(split,BorderLayout.CENTER);
  this.validate();
}",0.9840595111583422
131128,"public CombinedPanel(String title,List<Event> logEvents,MenuDefinition menuDefinition){
  super(title);
  chartData.setTop(5);
  chartData.setChartSource(""String_Node_Str"");
  chartData.setChartType(""String_Node_Str"");
  triPanel=new TriDataPanel(chartData);
  if (logEvents != null) {
    events=logEvents;
    generateData(logEvents);
    buildUI();
  }
 else {
    chartData.setChartSource(menuDefinition.getProperty());
    if (menuDefinition.getActions() != null) {
      scanActions=menuDefinition.getActions();
    }
    if (menuDefinition.getContains() != null) {
      EventFilter filter=null;
      if (menuDefinition.getContains().contains(""String_Node_Str"")) {
        String[] parts=menuDefinition.getContains().split(""String_Node_Str"");
        String filterName=parts[0];
        try {
          Class c=Class.forName(""String_Node_Str"" + filterName);
          filter=(EventFilter)c.newInstance();
        }
 catch (        ClassNotFoundException|InstantiationException|IllegalAccessException ex) {
          Logger.getLogger(ScanTablePanel.class.getName()).log(Level.SEVERE,null,ex);
        }
        scanNeedle=parts[1];
      }
 else {
        filter=new FreeformFilter();
        scanNeedle=menuDefinition.getContains();
      }
      if (filter != null) {
        filters.addEventFilter(filter);
      }
    }
    eventLoader.addListener(this);
    int scanDialogResult=0;
    if (PropertiesSingleton.getInstance().validS3Credentials()) {
      scanDialogResult=showScanDialog();
    }
    if (scanDialogResult == 0) {
      buildUI();
      eventLoader.showFileBrowser();
    }
 else     if (scanDialogResult == 1) {
      buildUI();
      eventLoader.showS3Browser();
    }
 else {
      this.dispose();
    }
  }
}","public CombinedPanel(String title,List<Event> logEvents,MenuDefinition menuDefinition){
  super(title);
  chartData.setTop(5);
  chartData.setChartSource(""String_Node_Str"");
  chartData.setChartType(""String_Node_Str"");
  triPanel=new TriDataPanel(chartData,true);
  if (logEvents != null) {
    events=logEvents;
    generateData(logEvents);
    buildUI();
  }
 else {
    if (menuDefinition.getProperty() != null) {
      chartData.setChartSource(menuDefinition.getProperty());
    }
    if (menuDefinition.getActions() != null) {
      scanActions=menuDefinition.getActions();
    }
    if (menuDefinition.getContains() != null) {
      EventFilter filter=null;
      if (menuDefinition.getContains().contains(""String_Node_Str"")) {
        String[] parts=menuDefinition.getContains().split(""String_Node_Str"");
        String filterName=parts[0];
        try {
          Class c=Class.forName(""String_Node_Str"" + filterName);
          filter=(EventFilter)c.newInstance();
        }
 catch (        ClassNotFoundException|InstantiationException|IllegalAccessException ex) {
          Logger.getLogger(ScanTablePanel.class.getName()).log(Level.SEVERE,null,ex);
        }
        scanNeedle=parts[1];
      }
 else {
        filter=new FreeformFilter();
        scanNeedle=menuDefinition.getContains();
      }
      if (filter != null) {
        filters.addEventFilter(filter);
      }
    }
    eventLoader.addListener(this);
    int scanDialogResult=0;
    if (PropertiesSingleton.getInstance().validS3Credentials()) {
      scanDialogResult=showScanDialog();
    }
    if (scanDialogResult == 0) {
      buildUI();
      eventLoader.showFileBrowser();
    }
 else     if (scanDialogResult == 1) {
      buildUI();
      eventLoader.showS3Browser();
    }
 else {
      this.dispose();
    }
  }
}",0.9827537461125248
131129,"private void loadFromS3Files(final List<String> keys){
  if (keys != null && keys.size() > 0) {
    AWSCredentials credentials=new BasicAWSCredentials(PropertiesSingleton.getInstance().getProperty(""String_Node_Str""),PropertiesSingleton.getInstance().getProperty(""String_Node_Str""));
    AmazonS3 s3Client=new AmazonS3Client(credentials);
    String bucketName=PropertiesSingleton.getInstance().getProperty(""String_Node_Str"");
    int numFiles=keys.size();
    int count=0;
    for (    String key : keys) {
      count++;
      try {
        postMessage(""String_Node_Str"" + count + ""String_Node_Str""+ numFiles);
        readS3File(s3Client,bucketName,key);
      }
 catch (      IOException ex) {
        Logger.getLogger(EventLoader.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    for (    EventLoaderListener l : listeners) {
      l.finishedLoading();
    }
    postMessage(""String_Node_Str"");
  }
}","private void loadFromS3Files(final List<String> keys){
  if (keys != null && keys.size() > 0) {
    AWSCredentials credentials=new BasicAWSCredentials(PropertiesSingleton.getInstance().getProperty(""String_Node_Str""),PropertiesSingleton.getInstance().getProperty(""String_Node_Str""));
    AmazonS3 s3Client=new AmazonS3Client(credentials);
    String bucketName=PropertiesSingleton.getInstance().getProperty(""String_Node_Str"");
    int numFiles=keys.size();
    int count=0;
    for (    String key : keys) {
      count++;
      try {
        postMessage(""String_Node_Str"" + count + ""String_Node_Str""+ numFiles);
        readS3File(s3Client,bucketName,key);
      }
 catch (      Exception ex) {
        Logger.getLogger(EventLoader.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
    for (    EventLoaderListener l : listeners) {
      l.finishedLoading();
    }
    postMessage(""String_Node_Str"");
  }
}",0.9989071038251366
131130,"protected void addTabbedChartDetail(int width,int height){
  createChart(width,height);
  if (chartPanel != null) {
    tabs.addTab(""String_Node_Str"",chartPanel);
  }
  JTable table=new JTable(defaultTableModel);
  table.setPreferredSize(new Dimension(480,260));
  reloadTable();
  tabs.addTab(""String_Node_Str"",table);
  updateTextArea();
  tabs.addTab(""String_Node_Str"",eventDetailTextArea);
}","protected void addTabbedChartDetail(int width,int height){
  createChart(width,height);
  if (chartPanel != null) {
    tabs.addTab(""String_Node_Str"",chartPanel);
  }
  JTable table=new JTable(defaultTableModel);
  JScrollPane tablecrollPane=new JScrollPane(table);
  table.setPreferredSize(new Dimension(480,260));
  reloadTable();
  tabs.addTab(""String_Node_Str"",tablecrollPane);
  updateTextArea();
  JScrollPane tabbedDataScrollPane=new JScrollPane(tabbedTextArea);
  tabs.addTab(""String_Node_Str"",tabbedDataScrollPane);
}",0.8186753528773073
131131,"public AbstractInternalFrame(String title){
  super(title,true,true,false,true);
  this.setLayout(new BorderLayout());
  eventDetailTextArea.setFont(new Font(""String_Node_Str"",Font.PLAIN,10));
  chartData.setChartStyle(""String_Node_Str"");
  chartData.setTop(5);
  defaultTableModel.addColumn(""String_Node_Str"");
  defaultTableModel.addColumn(""String_Node_Str"");
}","public AbstractInternalFrame(String title){
  super(title,true,true,false,true);
  this.setLayout(new BorderLayout());
  eventDetailTextArea.setFont(new Font(""String_Node_Str"",Font.PLAIN,10));
  tabbedTextArea.setFont(new Font(""String_Node_Str"",Font.PLAIN,10));
  chartData.setChartStyle(""String_Node_Str"");
  chartData.setTop(5);
  defaultTableModel.addColumn(""String_Node_Str"");
  defaultTableModel.addColumn(""String_Node_Str"");
}",0.9132075471698112
131132,"@Override protected void updateTextArea(){
  if (events != null) {
    StringBuilder dataString=new StringBuilder();
    for (    Map.Entry entry : chartEvents) {
      dataString.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(NEWLINE);
    }
    eventDetailTextArea.setText(dataString.toString());
  }
}","@Override protected void updateTextArea(){
  if (events != null) {
    StringBuilder dataString=new StringBuilder();
    for (    Map.Entry entry : chartEvents) {
      dataString.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(NEWLINE);
    }
    tabbedTextArea.setText(dataString.toString());
  }
}",0.9746646795827124
131133,"@Override protected void updateTextArea(){
  if (chartEvents != null) {
    int count=0;
    StringBuilder dataString=new StringBuilder();
    for (    Map.Entry entry : chartEvents) {
      if (count >= chartData.getTop()) {
        break;
      }
      dataString.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(NEWLINE);
      count++;
    }
    eventDetailTextArea.setText(dataString.toString());
  }
}","@Override protected void updateTextArea(){
  if (chartEvents != null) {
    int count=0;
    StringBuilder dataString=new StringBuilder();
    for (    Map.Entry entry : chartEvents) {
      if (count >= chartData.getTop()) {
        break;
      }
      dataString.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(NEWLINE);
      count++;
    }
    tabbedTextArea.setText(dataString.toString());
  }
}",0.9805269186712484
131134,"@Override protected void updateTextArea(){
  if (chartEvents != null) {
    int count=0;
    StringBuilder dataString=new StringBuilder();
    for (    Map.Entry entry : chartEvents) {
      if (count >= chartData.getTop()) {
        break;
      }
      dataString.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(NEWLINE);
      count++;
    }
    eventDetailTextArea.setText(dataString.toString());
  }
}","@Override protected void updateTextArea(){
  if (chartEvents != null) {
    int count=0;
    StringBuilder dataString=new StringBuilder();
    for (    Map.Entry entry : chartEvents) {
      if (count >= chartData.getTop()) {
        break;
      }
      dataString.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(NEWLINE);
      count++;
    }
    tabbedTextArea.setText(dataString.toString());
  }
}",0.9805269186712484
131135,"private void showEventsByServiceChart(){
  ChartData chartData=new ChartData();
  chartData.setChartStyle(""String_Node_Str"");
  chartData.setChartSource(""String_Node_Str"");
  List<Map.Entry<String,Integer>> events=EventUtils.entriesSortedByValues(eventsDatabase.getEventsPerService());
  ChartWindow chart=new ChartWindow(chartData,events);
  chart.setVisible(true);
  jCloudTrailViewer.DESKTOP.add(chart);
  try {
    chart.setSelected(true);
  }
 catch (  java.beans.PropertyVetoException pve) {
  }
}","private void showEventsByServiceChart(){
  if (eventsDatabase.getEventsPerService().size() > 0) {
    ChartData chartData=new ChartData();
    chartData.setChartStyle(""String_Node_Str"");
    chartData.setChartSource(""String_Node_Str"");
    List<Map.Entry<String,Integer>> events=EventUtils.entriesSortedByValues(eventsDatabase.getEventsPerService());
    ChartWindow chart=new ChartWindow(chartData,events);
    chart.setVisible(true);
    jCloudTrailViewer.DESKTOP.add(chart);
    try {
      chart.setSelected(true);
    }
 catch (    java.beans.PropertyVetoException pve) {
    }
  }
 else {
    JOptionPane.showMessageDialog(jCloudTrailViewer.DESKTOP,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
  }
}",0.8185516680227828
131136,"@Override public void chartMouseClicked(ChartMouseEvent cme){
  if (cme.getTrigger().getClickCount() == 2) {
    Object object=cme.getEntity();
    ChartEntity cie=(ChartEntity)object;
    if (chartData.getChartStyle().equalsIgnoreCase(""String_Node_Str"")) {
      PieSectionEntity categoryItemEntity=(PieSectionEntity)cie;
      chartSelect=categoryItemEntity.getSectionKey().toString();
    }
 else     if (chartData.getChartStyle().equalsIgnoreCase(""String_Node_Str"")) {
      CategoryItemEntity categoryItemEntity=(CategoryItemEntity)cie;
      chartSelect=categoryItemEntity.getCategory().toString();
    }
    if (chartSelect != null) {
      filters.setFilterCriteria(chartSelect);
      List<Event> filteredEvents=filters.filterEvents(events);
      TableWindow window=new TableWindow(""String_Node_Str"" + chartSelect,filteredEvents);
      window.setVisible(true);
      jCloudTrailViewer.DESKTOP.add(window);
      try {
        window.setSelected(true);
      }
 catch (      java.beans.PropertyVetoException pve) {
      }
    }
  }
}","@Override public void chartMouseClicked(ChartMouseEvent cme){
  if (cme.getTrigger().getClickCount() == 2) {
    Object object=cme.getEntity();
    ChartEntity cie=(ChartEntity)object;
    if (chartData.getChartStyle().equalsIgnoreCase(""String_Node_Str"")) {
      PieSectionEntity categoryItemEntity=(PieSectionEntity)cie;
      chartSelect=categoryItemEntity.getSectionKey().toString();
    }
 else     if (chartData.getChartStyle().equalsIgnoreCase(""String_Node_Str"")) {
      CategoryItemEntity categoryItemEntity=(CategoryItemEntity)cie;
      chartSelect=categoryItemEntity.getCategory().toString();
    }
    if (chartSelect != null && events != null) {
      filters.setFilterCriteria(chartSelect);
      List<Event> filteredEvents=filters.filterEvents(events);
      TableWindow window=new TableWindow(""String_Node_Str"" + chartSelect,filteredEvents);
      window.setVisible(true);
      jCloudTrailViewer.DESKTOP.add(window);
      try {
        window.setSelected(true);
      }
 catch (      java.beans.PropertyVetoException pve) {
      }
    }
  }
}",0.9914529914529916
131137,"protected void addTabbedChartDetail(int width,int height){
  createChart(width,height);
  if (chartPanel != null) {
    tabs.addTab(""String_Node_Str"",chartPanel);
  }
  JTable table=new JTable(defaultTableModel);
  JScrollPane tablecrollPane=new JScrollPane(table);
  table.setPreferredSize(new Dimension(480,260));
  reloadTable();
  tabs.addTab(""String_Node_Str"",tablecrollPane);
  updateTextArea();
  JScrollPane tabbedDataScrollPane=new JScrollPane(tabbedTextArea);
  tabs.addTab(""String_Node_Str"",tabbedDataScrollPane);
}","protected void addTabbedChartDetail(int width,int height){
  createChart(width,height);
  if (chartPanel != null) {
    tabs.addTab(""String_Node_Str"",chartPanel);
  }
  JTable table=new JTable(defaultTableModel);
  JScrollPane tablecrollPane=new JScrollPane(table);
  reloadTable();
  tabs.addTab(""String_Node_Str"",tablecrollPane);
  updateTextArea();
  JScrollPane tabbedDataScrollPane=new JScrollPane(tabbedTextArea);
  tabs.addTab(""String_Node_Str"",tabbedDataScrollPane);
}",0.9500998003992016
131138,"protected void reloadTable(){
  for (int i=defaultTableModel.getRowCount() - 1; i >= 0; i--) {
    defaultTableModel.removeRow(i);
  }
  if (events != null && events.size() > 0) {
    for (    Entry entry : chartEvents) {
      defaultTableModel.addRow(new Object[]{entry.getKey(),entry.getValue()});
    }
  }
 else   if (eventMap.size() > 0) {
    Set<Entry<String,Integer>> entries=eventMap.entrySet();
    Iterator<Entry<String,Integer>> entriesIt=entries.iterator();
    while (entriesIt.hasNext()) {
      Entry entry=entriesIt.next();
      defaultTableModel.addRow(new Object[]{entry.getKey(),entry.getValue()});
    }
  }
}","protected void reloadTable(){
  for (int i=defaultTableModel.getRowCount() - 1; i >= 0; i--) {
    defaultTableModel.removeRow(i);
  }
  if (chartEvents != null && chartEvents.size() > 0) {
    for (    Entry entry : chartEvents) {
      defaultTableModel.addRow(new Object[]{entry.getKey(),entry.getValue()});
    }
  }
}",0.6477987421383647
131139,"@Override public void newEvents(List<Event> events){
}","@Override public void newEvents(List<Event> newEvents){
}",0.972972972972973
131140,"private void tpsPerService(List<Event> events){
  for (  Event event : events) {
    String eventName=event.getEventName();
    if (inTopX(event)) {
      int tpsCount=1;
      String dateTime=event.getEventTime();
      if (tpsMap.containsKey(eventName)) {
        Map<String,Integer> serviceTps=tpsMap.get(eventName);
        if (serviceTps.containsKey(dateTime)) {
          tpsCount=serviceTps.get(dateTime);
          tpsCount++;
          serviceTps.put(dateTime,tpsCount);
          tpsMap.put(eventName,serviceTps);
        }
 else {
          serviceTps.put(dateTime,tpsCount);
          tpsMap.put(eventName,serviceTps);
        }
      }
 else {
        Map<String,Integer> serviceTps=new HashMap<>();
        serviceTps.put(dateTime,tpsCount);
        tpsMap.put(eventName,serviceTps);
      }
    }
  }
}","private void tpsPerService(List<Event> eventsData){
  for (  Event event : eventsData) {
    String eventName=event.getEventName();
    if (inTopX(event)) {
      int tpsCount=1;
      String dateTime=event.getEventTime();
      if (tpsMap.containsKey(eventName)) {
        Map<String,Integer> serviceTps=tpsMap.get(eventName);
        if (serviceTps.containsKey(dateTime)) {
          tpsCount=serviceTps.get(dateTime);
          tpsCount++;
          serviceTps.put(dateTime,tpsCount);
          tpsMap.put(eventName,serviceTps);
        }
 else {
          serviceTps.put(dateTime,tpsCount);
          tpsMap.put(eventName,serviceTps);
        }
      }
 else {
        Map<String,Integer> serviceTps=new HashMap<>();
        serviceTps.put(dateTime,tpsCount);
        tpsMap.put(eventName,serviceTps);
      }
    }
  }
}",0.995127892813642
131141,"public CombinedPanel(String title,List<Event> events,MenuDefinition menuDefinition){
  super(title);
  if (events != null) {
    generateData(events);
    buildUI();
  }
 else {
    if (menuDefinition.getActions() != null) {
      scanActions=menuDefinition.getActions();
    }
    if (menuDefinition.getContains() != null) {
      EventFilter filter=null;
      if (menuDefinition.getContains().contains(""String_Node_Str"")) {
        String[] parts=menuDefinition.getContains().split(""String_Node_Str"");
        String filterName=parts[0];
        try {
          Class c=Class.forName(""String_Node_Str"" + filterName);
          filter=(EventFilter)c.newInstance();
        }
 catch (        ClassNotFoundException|InstantiationException|IllegalAccessException ex) {
          Logger.getLogger(ScanTablePanel.class.getName()).log(Level.SEVERE,null,ex);
        }
        scanNeedle=parts[1];
      }
 else {
        filter=new FreeformFilter();
        scanNeedle=menuDefinition.getContains();
      }
      if (filter != null) {
        filters.addEventFilter(filter);
      }
    }
    eventLoader.addListener(this);
    int scanDialogResult=showScanDialog();
    if (scanDialogResult == 0) {
      eventLoader.showFileBrowser();
    }
 else     if (scanDialogResult == 1) {
      eventLoader.showS3Browser();
    }
 else {
      this.dispose();
    }
  }
}","public CombinedPanel(String title,List<Event> logEvents,MenuDefinition menuDefinition){
  super(title);
  if (logEvents != null) {
    events=logEvents;
    generateData(logEvents);
    buildUI();
  }
 else {
    if (menuDefinition.getActions() != null) {
      scanActions=menuDefinition.getActions();
    }
    if (menuDefinition.getContains() != null) {
      EventFilter filter=null;
      if (menuDefinition.getContains().contains(""String_Node_Str"")) {
        String[] parts=menuDefinition.getContains().split(""String_Node_Str"");
        String filterName=parts[0];
        try {
          Class c=Class.forName(""String_Node_Str"" + filterName);
          filter=(EventFilter)c.newInstance();
        }
 catch (        ClassNotFoundException|InstantiationException|IllegalAccessException ex) {
          Logger.getLogger(ScanTablePanel.class.getName()).log(Level.SEVERE,null,ex);
        }
        scanNeedle=parts[1];
      }
 else {
        filter=new FreeformFilter();
        scanNeedle=menuDefinition.getContains();
      }
      if (filter != null) {
        filters.addEventFilter(filter);
      }
    }
    eventLoader.addListener(this);
    int scanDialogResult=showScanDialog();
    if (scanDialogResult == 0) {
      eventLoader.showFileBrowser();
    }
 else     if (scanDialogResult == 1) {
      eventLoader.showS3Browser();
    }
 else {
      this.dispose();
    }
  }
}",0.9865503453289712
131142,"private void generateData(List<Event> events){
  chartData.setChartSource(""String_Node_Str"");
  chartData.setTop(5);
  chartData.setChartStyle(""String_Node_Str"");
  chartData.setChartType(""String_Node_Str"");
  chartEvents=EventUtils.getRequiredEvents(events,chartData);
  tpsPerService(events);
  eventsTableModel.setData(events);
}","private void generateData(List<Event> eventsData){
  chartData.setChartSource(""String_Node_Str"");
  chartData.setTop(5);
  chartData.setChartStyle(""String_Node_Str"");
  chartData.setChartType(""String_Node_Str"");
  generateInitialChartData();
  tpsPerService(eventsData);
  eventsTableModel.setData(eventsData);
}",0.8571428571428571
131143,"@Override public void finishedLoading(){
  chartEvents=EventUtils.entriesSortedByValues(eventMap);
  addTabbedChartDetail(480,160);
  this.validate();
}","@Override public void finishedLoading(){
  generateInitialChartData();
  addTabbedChartDetail(480,160);
  this.validate();
}",0.7681159420289855
131144,"@Override public void newEvents(List<Event> scannedEvents){
  for (  Event event : scannedEvents) {
    String value=EventUtils.getEventProperty(menuDefinition.getProperty(),event);
    if (value != null) {
      int count=1;
      if (eventMap.containsKey(value)) {
        count=eventMap.get(value) + 1;
      }
      eventMap.put(value,count);
    }
  }
}","@Override public void newEvents(List<Event> newEvents){
  for (  Event event : newEvents) {
    String value=EventUtils.getEventProperty(chartData.getChartSource(),event);
    if (value != null) {
      events.add(event);
    }
  }
}",0.6463620981387479
131145,"public ScanChartPanel(MenuDefinition menuDef){
  super(menuDef.getName());
  menuDefinition=menuDef;
  eventLoader.addListener(this);
  int scanDialogResult=showScanDialog();
  if (scanDialogResult == 0) {
    eventLoader.showFileBrowser();
    buildUI();
  }
 else   if (scanDialogResult == 1) {
    eventLoader.showS3Browser();
    buildUI();
  }
 else {
    this.dispose();
  }
}","public ScanChartPanel(MenuDefinition menuDef){
  super(menuDef.getName());
  chartData.setChartSource(menuDef.getProperty());
  eventLoader.addListener(this);
  int scanDialogResult=showScanDialog();
  if (scanDialogResult == 0) {
    eventLoader.showFileBrowser();
    buildUI();
  }
 else   if (scanDialogResult == 1) {
    eventLoader.showS3Browser();
    buildUI();
  }
 else {
    this.dispose();
  }
}",0.9302915082382764
131146,"public ChartWindow(ChartData chartData,List data){
  super(chartData.getChartSource());
  triPanel=new TriDataPanel(chartData);
  Object firstDataElement=data.get(0);
  if (firstDataElement instanceof Event) {
    events=data;
    chartEvents=null;
  }
 else {
    events=null;
    chartEvents=data;
  }
  filters.addEventFilter(new FreeformFilter());
  buildGui();
  if ((events != null && !events.isEmpty()) || (chartEvents != null && !chartEvents.isEmpty())) {
    triPanel.setEvents(events);
  }
 else {
    this.add(new JLabel(""String_Node_Str""),BorderLayout.CENTER);
  }
}","public ChartWindow(ChartData chartData,List data){
  super(chartData.getChartSource());
  triPanel=new TriDataPanel(chartData);
  events=data;
  filters.addEventFilter(new FreeformFilter());
  buildGui();
  if (events != null && !events.isEmpty()) {
    triPanel.setEvents(events);
  }
 else {
    this.add(new JLabel(""String_Node_Str""),BorderLayout.CENTER);
  }
}",0.7579617834394905
131147,"private void buildUI(){
  this.setSize(640,480);
  JButton btnShowChart=new JButton();
  btnShowChart.setActionCommand(""String_Node_Str"");
  btnShowChart.setToolTipText(""String_Node_Str"");
  try {
    URL imageUrl=jCloudTrailViewer.class.getResource(""String_Node_Str"");
    btnShowChart.setIcon(new ImageIcon(imageUrl));
  }
 catch (  Exception e) {
    btnShowChart.setText(""String_Node_Str"");
  }
  btnShowChart.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      List<Event> events=null;
      int tabId=tabs.getSelectedIndex();
switch (tabId) {
case 0:
        events=errorTableModel.getEvents();
      break;
case 1:
    events=iamTableModel.getEvents();
  break;
case 2:
events=securityTableModel.getEvents();
break;
}
if (events != null) {
ChartData chartData=ChartDialog.showDialog(jCloudTrailViewer.DESKTOP);
if (chartData != null) {
List<Map.Entry<String,Integer>> chartMetrics=eventUtils.getRequiredEvents(events,chartData);
ChartWindow chart=new ChartWindow(chartData,chartMetrics);
chart.setVisible(true);
jCloudTrailViewer.DESKTOP.add(chart);
try {
chart.setSelected(true);
}
 catch (java.beans.PropertyVetoException pve) {
}
}
}
}
}
);
JToolBar toolbar=new JToolBar();
toolbar.setFloatable(false);
toolbar.add(btnShowChart);
final EventsTable errorTable=new EventsTable(errorTableModel);
errorTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
if (e.getFirstIndex() >= 0) {
Event event=errorTableModel.getEventAt(errorTable.getSelectedRow());
showEventDetail(event);
}
}
}
);
errorTable.setVisible(true);
JScrollPane errorScrollPane=new JScrollPane(errorTable);
final EventsTable iamTable=new EventsTable(iamTableModel);
iamTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
if (e.getFirstIndex() >= 0) {
Event event=iamTableModel.getEventAt(iamTable.getSelectedRow());
showEventDetail(event);
}
}
}
);
iamTable.setVisible(true);
JScrollPane iamScrollPane=new JScrollPane(iamTable);
final EventsTable securityTable=new EventsTable(securityTableModel);
securityTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
if (e.getFirstIndex() >= 0) {
Event event=securityTableModel.getEventAt(securityTable.getSelectedRow());
showEventDetail(event);
}
}
}
);
securityTable.setVisible(true);
JScrollPane securityScrollPane=new JScrollPane(securityTable);
tabs.add(""String_Node_Str"",errorScrollPane);
tabs.add(""String_Node_Str"",iamScrollPane);
tabs.add(""String_Node_Str"",securityScrollPane);
JSplitPane split=new JSplitPane();
split.add(tabs,JSplitPane.LEFT);
split.add(getEventDetailPanel(),JSplitPane.RIGHT);
split.setOneTouchExpandable(true);
split.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
split.setDividerSize(2);
split.setAutoscrolls(false);
split.setDividerLocation(400);
addStatusBar();
add(toolbar,BorderLayout.NORTH);
add(split,BorderLayout.CENTER);
}","private void buildUI(){
  this.setSize(640,480);
  JButton btnShowChart=new JButton();
  btnShowChart.setActionCommand(""String_Node_Str"");
  btnShowChart.setToolTipText(""String_Node_Str"");
  try {
    URL imageUrl=jCloudTrailViewer.class.getResource(""String_Node_Str"");
    btnShowChart.setIcon(new ImageIcon(imageUrl));
  }
 catch (  Exception e) {
    btnShowChart.setText(""String_Node_Str"");
  }
  btnShowChart.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      List<Event> events=null;
      int tabId=tabs.getSelectedIndex();
switch (tabId) {
case 0:
        events=errorTableModel.getEvents();
      break;
case 1:
    events=iamTableModel.getEvents();
  break;
case 2:
events=securityTableModel.getEvents();
break;
}
if (events != null) {
ChartData chartData=ChartDialog.showDialog(jCloudTrailViewer.DESKTOP);
if (chartData != null) {
ChartWindow chart=new ChartWindow(chartData,events);
chart.setVisible(true);
jCloudTrailViewer.DESKTOP.add(chart);
try {
chart.setSelected(true);
}
 catch (java.beans.PropertyVetoException pve) {
}
}
}
}
}
);
JToolBar toolbar=new JToolBar();
toolbar.setFloatable(false);
toolbar.add(btnShowChart);
final EventsTable errorTable=new EventsTable(errorTableModel);
errorTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
if (e.getFirstIndex() >= 0) {
Event event=errorTableModel.getEventAt(errorTable.getSelectedRow());
showEventDetail(event);
}
}
}
);
errorTable.setVisible(true);
JScrollPane errorScrollPane=new JScrollPane(errorTable);
final EventsTable iamTable=new EventsTable(iamTableModel);
iamTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
if (e.getFirstIndex() >= 0) {
Event event=iamTableModel.getEventAt(iamTable.getSelectedRow());
showEventDetail(event);
}
}
}
);
iamTable.setVisible(true);
JScrollPane iamScrollPane=new JScrollPane(iamTable);
final EventsTable securityTable=new EventsTable(securityTableModel);
securityTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
if (e.getFirstIndex() >= 0) {
Event event=securityTableModel.getEventAt(securityTable.getSelectedRow());
showEventDetail(event);
}
}
}
);
securityTable.setVisible(true);
JScrollPane securityScrollPane=new JScrollPane(securityTable);
tabs.add(""String_Node_Str"",errorScrollPane);
tabs.add(""String_Node_Str"",iamScrollPane);
tabs.add(""String_Node_Str"",securityScrollPane);
JSplitPane split=new JSplitPane();
split.add(tabs,JSplitPane.LEFT);
split.add(getEventDetailPanel(),JSplitPane.RIGHT);
split.setOneTouchExpandable(true);
split.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
split.setDividerSize(2);
split.setAutoscrolls(false);
split.setDividerLocation(400);
addStatusBar();
add(toolbar,BorderLayout.NORTH);
add(split,BorderLayout.CENTER);
}",0.967869500741473
131148,"@Override public void actionPerformed(ActionEvent e){
  List<Event> events=null;
  int tabId=tabs.getSelectedIndex();
switch (tabId) {
case 0:
    events=errorTableModel.getEvents();
  break;
case 1:
events=iamTableModel.getEvents();
break;
case 2:
events=securityTableModel.getEvents();
break;
}
if (events != null) {
ChartData chartData=ChartDialog.showDialog(jCloudTrailViewer.DESKTOP);
if (chartData != null) {
List<Map.Entry<String,Integer>> chartMetrics=eventUtils.getRequiredEvents(events,chartData);
ChartWindow chart=new ChartWindow(chartData,chartMetrics);
chart.setVisible(true);
jCloudTrailViewer.DESKTOP.add(chart);
try {
chart.setSelected(true);
}
 catch (java.beans.PropertyVetoException pve) {
}
}
}
}","@Override public void actionPerformed(ActionEvent e){
  List<Event> events=null;
  int tabId=tabs.getSelectedIndex();
switch (tabId) {
case 0:
    events=errorTableModel.getEvents();
  break;
case 1:
events=iamTableModel.getEvents();
break;
case 2:
events=securityTableModel.getEvents();
break;
}
if (events != null) {
ChartData chartData=ChartDialog.showDialog(jCloudTrailViewer.DESKTOP);
if (chartData != null) {
ChartWindow chart=new ChartWindow(chartData,events);
chart.setVisible(true);
jCloudTrailViewer.DESKTOP.add(chart);
try {
chart.setSelected(true);
}
 catch (java.beans.PropertyVetoException pve) {
}
}
}
}",0.8539325842696629
131149,"protected void fillDebugInfo(Element element,Node node){
  if (!context.isDebug())   return;
  Token token=sourceMiner.findToken(node);
  int lineNumber=token.getLine();
  String sourceFile=context.getSourcePath() != null ? context.getSourcePath() : null;
  MDDExtensionUtils.addDebugInfo(element,sourceFile,lineNumber);
}","protected void fillDebugInfo(Element element,Node node){
  if (!context.isDebug())   return;
  Token token=null;
  while (token == null && node != null) {
    token=sourceMiner.findToken(node);
    node=node.parent();
  }
  if (token == null)   return;
  int lineNumber=token.getLine();
  String sourceFile=context.getSourcePath() != null ? context.getSourcePath() : null;
  MDDExtensionUtils.addDebugInfo(element,sourceFile,lineNumber);
}",0.8462549277266754
131150,"private void drawPage(PdfDocument.Page page){
  Canvas canvas=page.getCanvas();
  StringBuilder token=new StringBuilder();
  int titleBaseLine=72;
  int leftMargin=54;
  Paint paint=new Paint();
  paint.setColor(Color.BLACK);
  paint.setTextSize(20);
  canvas.drawText(context.getString(R.string.app_name),leftMargin,titleBaseLine,paint);
  paint.setTextSize(14);
  token.append(""String_Node_Str"" + UColor.getRGB(RGBRColor));
  token.append(""String_Node_Str"" + UColor.getRGB(RGBGColor));
  token.append(""String_Node_Str"" + UColor.getRGB(RGBBColor));
  canvas.drawText(token.toString(),leftMargin,titleBaseLine + 25,paint);
  token=new StringBuilder();
  token.append(""String_Node_Str"" + UColor.getRGB(RGBOpacity));
  canvas.drawText(token.toString(),leftMargin,titleBaseLine + 50,paint);
  token=new StringBuilder();
  float[] hsb=UColor.RGBToHSB(RGBRColor,RGBGColor,RGBBColor);
  token.append(""String_Node_Str"" + String.format(""String_Node_Str"",hsb[0]));
  token.append(""String_Node_Str"" + String.format(""String_Node_Str"",(hsb[1] * 100.0f)));
  token.append(""String_Node_Str"" + String.format(""String_Node_Str"",(hsb[2] * 100.0f)));
  canvas.drawText(token.toString(),leftMargin,titleBaseLine + 75,paint);
  token=new StringBuilder();
  token.append(""String_Node_Str"" + String.format(""String_Node_Str"",UColor.RGBToHex(RGBOpacity),UColor.RGBToHex(RGBRColor),UColor.RGBToHex(RGBGColor),UColor.RGBToHex(RGBBColor)));
  canvas.drawText(token.toString(),leftMargin,titleBaseLine + 100,paint);
  paint.setColor(Color.argb((int)RGBOpacity,(int)RGBRColor,(int)RGBGColor,(int)RGBBColor));
  canvas.drawRect(leftMargin,titleBaseLine + 125,126,269,paint);
  if (message != null) {
    paint.setColor(Color.BLACK);
    paint.setTextSize(11);
    canvas.drawText(message,leftMargin,294,paint);
  }
}","private void drawPage(PdfDocument.Page page){
  Canvas canvas=page.getCanvas();
  StringBuilder token=new StringBuilder();
  int titleBaseLine=72;
  int leftMargin=54;
  Paint paint=new Paint();
  paint.setColor(Color.BLACK);
  paint.setTextSize(20);
  canvas.drawText(context.getString(R.string.app_name),leftMargin,titleBaseLine,paint);
  paint.setTextSize(14);
  token.append(""String_Node_Str"");
  token.append(UColor.getRGB(RGBRColor));
  token.append(""String_Node_Str"");
  token.append(UColor.getRGB(RGBGColor));
  token.append(""String_Node_Str"");
  token.append(UColor.getRGB(RGBBColor));
  canvas.drawText(token.toString(),leftMargin,titleBaseLine + 25,paint);
  token=new StringBuilder();
  token.append(""String_Node_Str"");
  token.append(UColor.getRGB(RGBOpacity));
  canvas.drawText(token.toString(),leftMargin,titleBaseLine + 50,paint);
  token=new StringBuilder();
  float[] hsb=UColor.RGBToHSB(RGBRColor,RGBGColor,RGBBColor);
  token.append(""String_Node_Str"");
  token.append(String.format(""String_Node_Str"",hsb[0]));
  token.append(""String_Node_Str"");
  token.append(String.format(""String_Node_Str"",(hsb[1] * 100.0f)));
  token.append(""String_Node_Str"");
  token.append(String.format(""String_Node_Str"",(hsb[2] * 100.0f)));
  canvas.drawText(token.toString(),leftMargin,titleBaseLine + 75,paint);
  token=new StringBuilder();
  token.append(""String_Node_Str"");
  token.append(String.format(""String_Node_Str"",UColor.RGBToHex(RGBOpacity),UColor.RGBToHex(RGBRColor),UColor.RGBToHex(RGBGColor),UColor.RGBToHex(RGBBColor)));
  canvas.drawText(token.toString(),leftMargin,titleBaseLine + 100,paint);
  paint.setColor(Color.argb((int)RGBOpacity,(int)RGBRColor,(int)RGBGColor,(int)RGBBColor));
  canvas.drawRect(leftMargin,titleBaseLine + 125,126,269,paint);
  if (message != null) {
    paint.setColor(Color.BLACK);
    paint.setTextSize(11);
    canvas.drawText(message,leftMargin,294,paint);
  }
}",0.9544715447154472
131151,"/** 
 * @param rgbRColor
 * @param rgbGColor
 * @param rgbBColor
 * @param rgbOpacity
 * @return
 */
public static String getColorMessage(float rgbRColor,float rgbGColor,float rgbBColor,float rgbOpacity){
  StringBuilder message=new StringBuilder();
  message.append(""String_Node_Str"");
  message.append(System.getProperty(""String_Node_Str""));
  message.append(""String_Node_Str"");
  message.append(""String_Node_Str"" + UColor.getRGB(rgbRColor));
  message.append(""String_Node_Str"" + UColor.getRGB(rgbGColor));
  message.append(""String_Node_Str"" + UColor.getRGB(rgbBColor));
  message.append(System.getProperty(""String_Node_Str""));
  message.append(""String_Node_Str"" + UColor.getRGB(rgbOpacity));
  message.append(System.getProperty(""String_Node_Str""));
  message.append(""String_Node_Str"");
  float[] hsb=UColor.RGBToHSB(rgbRColor,rgbGColor,rgbBColor);
  message.append(""String_Node_Str"" + String.format(""String_Node_Str"",hsb[0]));
  message.append(""String_Node_Str"" + String.format(""String_Node_Str"",(hsb[1] * 100.0f)));
  message.append(""String_Node_Str"" + String.format(""String_Node_Str"",(hsb[2] * 100.0f)));
  message.append(System.getProperty(""String_Node_Str""));
  message.append(""String_Node_Str"" + String.format(""String_Node_Str"",UColor.RGBToHex(rgbOpacity),UColor.RGBToHex(rgbRColor),UColor.RGBToHex(rgbGColor),UColor.RGBToHex(rgbBColor)));
  message.append(System.getProperty(""String_Node_Str""));
  return message.toString();
}","/** 
 * @param rgbRColor
 * @param rgbGColor
 * @param rgbBColor
 * @param rgbOpacity
 * @return
 */
public static String getColorMessage(float rgbRColor,float rgbGColor,float rgbBColor,float rgbOpacity){
  StringBuilder message=new StringBuilder();
  message.append(""String_Node_Str"");
  message.append(System.getProperty(""String_Node_Str""));
  message.append(""String_Node_Str"");
  message.append(""String_Node_Str"");
  message.append(UColor.getRGB(rgbRColor));
  message.append(""String_Node_Str"");
  message.append(UColor.getRGB(rgbGColor));
  message.append(""String_Node_Str"");
  message.append(UColor.getRGB(rgbBColor));
  message.append(System.getProperty(""String_Node_Str""));
  message.append(""String_Node_Str"");
  message.append(UColor.getRGB(rgbOpacity));
  message.append(System.getProperty(""String_Node_Str""));
  message.append(""String_Node_Str"");
  float[] hsb=UColor.RGBToHSB(rgbRColor,rgbGColor,rgbBColor);
  message.append(""String_Node_Str"");
  message.append(String.format(""String_Node_Str"",hsb[0]));
  message.append(""String_Node_Str"");
  message.append(String.format(""String_Node_Str"",(hsb[1] * 100.0f)));
  message.append(""String_Node_Str"");
  message.append(String.format(""String_Node_Str"",(hsb[2] * 100.0f)));
  message.append(System.getProperty(""String_Node_Str""));
  message.append(""String_Node_Str"");
  message.append(String.format(""String_Node_Str"",UColor.RGBToHex(rgbOpacity),UColor.RGBToHex(rgbRColor),UColor.RGBToHex(rgbGColor),UColor.RGBToHex(rgbBColor)));
  message.append(System.getProperty(""String_Node_Str""));
  return message.toString();
}",0.9387890884896872
131152,"public static String getPaletteMessage(Context context,String filename,ArrayList<PaletteSwatch> swatches){
  StringBuilder message=new StringBuilder();
  message.append(""String_Node_Str"");
  message.append(System.getProperty(""String_Node_Str""));
  if (!""String_Node_Str"".equals(filename)) {
    message.append(""String_Node_Str"" + filename);
    message.append(System.getProperty(""String_Node_Str""));
  }
  for (  PaletteSwatch swatch : swatches) {
    message.append(UPalette.getSwatchDescription(context,swatch.getType()));
    message.append(""String_Node_Str"");
    message.append(""String_Node_Str"");
    message.append(""String_Node_Str"" + Integer.toHexString(swatch.getRgb()).toUpperCase());
    message.append(System.getProperty(""String_Node_Str""));
  }
  return message.toString();
}","public static String getPaletteMessage(Context context,String filename,ArrayList<PaletteSwatch> swatches){
  StringBuilder message=new StringBuilder();
  message.append(""String_Node_Str"");
  message.append(System.getProperty(""String_Node_Str""));
  if (!""String_Node_Str"".equals(filename)) {
    message.append(""String_Node_Str"");
    message.append(filename);
    message.append(System.getProperty(""String_Node_Str""));
  }
  for (  PaletteSwatch swatch : swatches) {
    message.append(UPalette.getSwatchDescription(context,swatch.getType()));
    message.append(""String_Node_Str"");
    message.append(""String_Node_Str"");
    message.append(""String_Node_Str"");
    message.append(Integer.toHexString(swatch.getRgb()).toUpperCase());
    message.append(System.getProperty(""String_Node_Str""));
  }
  return message.toString();
}",0.9690210656753409
131153,"private void drawPage(PdfDocument.Page page){
  Canvas canvas=page.getCanvas();
  StringBuilder token;
  int titleBaseLine=72;
  int leftMargin=54;
  Paint paint=new Paint();
  paint.setColor(Color.BLACK);
  paint.setTextSize(20);
  canvas.drawText(context.getString(R.string.app_name),leftMargin,titleBaseLine,paint);
  paint.setTextSize(16);
  canvas.drawText(filename + ""String_Node_Str"",leftMargin,titleBaseLine + 25,paint);
  paint.setTextSize(14);
  for (int i=0; i < swatches.size(); i++) {
    paint.setColor(Color.BLACK);
    token=new StringBuilder();
    token.append(""String_Node_Str"" + UPalette.getSwatchDescription(context,swatches.get(i).getType()));
    canvas.drawText(token.toString(),leftMargin,titleBaseLine + (50 + (i * 100)),paint);
    token=new StringBuilder();
    token.append(""String_Node_Str"" + Integer.toHexString(swatches.get(i).getRgb()).toUpperCase());
    canvas.drawText(token.toString(),leftMargin,titleBaseLine + (75 + (i * 100)),paint);
    paint.setColor(swatches.get(i).getRgb());
    canvas.drawRect(leftMargin,titleBaseLine + (90 + (i * 100)),126,titleBaseLine + (90 + (i * 100)) + 30,paint);
  }
  if (message != null) {
    paint.setColor(Color.BLACK);
    paint.setTextSize(10);
    canvas.drawText(message,leftMargin,titleBaseLine + (50 + (swatches.size() * 100)) + 10,paint);
  }
}","private void drawPage(PdfDocument.Page page){
  Canvas canvas=page.getCanvas();
  StringBuilder token;
  int titleBaseLine=72;
  int leftMargin=54;
  Paint paint=new Paint();
  paint.setColor(Color.BLACK);
  paint.setTextSize(20);
  canvas.drawText(context.getString(R.string.app_name),leftMargin,titleBaseLine,paint);
  paint.setTextSize(16);
  canvas.drawText(filename + ""String_Node_Str"",leftMargin,titleBaseLine + 25,paint);
  paint.setTextSize(14);
  for (int i=0; i < swatches.size(); i++) {
    paint.setColor(Color.BLACK);
    token=new StringBuilder();
    token.append(""String_Node_Str"");
    token.append(UPalette.getSwatchDescription(context,swatches.get(i).getType()));
    canvas.drawText(token.toString(),leftMargin,titleBaseLine + (50 + (i * 100)),paint);
    token=new StringBuilder();
    token.append(""String_Node_Str"");
    token.append(Integer.toHexString(swatches.get(i).getRgb()).toUpperCase());
    canvas.drawText(token.toString(),leftMargin,titleBaseLine + (75 + (i * 100)),paint);
    paint.setColor(swatches.get(i).getRgb());
    canvas.drawRect(leftMargin,titleBaseLine + (90 + (i * 100)),126,titleBaseLine + (90 + (i * 100)) + 30,paint);
  }
  if (message != null) {
    paint.setColor(Color.BLACK);
    paint.setTextSize(10);
    canvas.drawText(message,leftMargin,titleBaseLine + (50 + (swatches.size() * 100)) + 10,paint);
  }
}",0.9828869047619048
131154,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  LayoutInflater inflater=getActivity().getLayoutInflater();
  View view=inflater.inflate(R.layout.dialog_rgba_insertion,null);
  ButterKnife.inject(this,view);
  pickerR.setMinValue(0);
  pickerR.setMaxValue(255);
  pickerG.setMinValue(0);
  pickerG.setMaxValue(255);
  pickerB.setMinValue(0);
  pickerB.setMaxValue(255);
  pickerA.setMinValue(0);
  pickerA.setMaxValue(255);
  if (getArguments() != null) {
    rgbaValues=getArguments().getShortArray(ARG_RGBA_VALUES);
  }
  if (rgbaValues != null) {
    pickerR.setValue(rgbaValues[0]);
    pickerG.setValue(rgbaValues[1]);
    pickerB.setValue(rgbaValues[2]);
    pickerA.setValue(rgbaValues[3]);
  }
 else {
    pickerR.setValue(0);
    pickerG.setValue(0);
    pickerB.setValue(0);
    pickerA.setValue(0);
  }
  builder.setView(view).setTitle(getString(R.string.rgba_insertion_dialog_title)).setPositiveButton(getString(R.string.print_color_dialog_message_set),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
      short[] rgbaValues=new short[]{(short)pickerR.getValue(),(short)pickerG.getValue(),(short)pickerB.getValue(),(short)pickerA.getValue()};
      EventBus.getDefault().post(new RGBAInsertionEvent(rgbaValues));
      RgbaInsertionFragment.this.getDialog().cancel();
    }
  }
);
  return builder.create();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  LayoutInflater inflater=getActivity().getLayoutInflater();
  View view=inflater.inflate(R.layout.dialog_rgba_insertion,null);
  ButterKnife.inject(this,view);
  pickerR.setMinValue(0);
  pickerR.setMaxValue(255);
  pickerG.setMinValue(0);
  pickerG.setMaxValue(255);
  pickerB.setMinValue(0);
  pickerB.setMaxValue(255);
  pickerA.setMinValue(0);
  pickerA.setMaxValue(255);
  if (getArguments() != null) {
    rgbaValues=getArguments().getShortArray(ARG_RGBA_VALUES);
  }
  if (rgbaValues != null) {
    pickerR.setValue(rgbaValues[0]);
    pickerG.setValue(rgbaValues[1]);
    pickerB.setValue(rgbaValues[2]);
    pickerA.setValue(rgbaValues[3]);
  }
 else {
    pickerR.setValue(0);
    pickerG.setValue(0);
    pickerB.setValue(0);
    pickerA.setValue(0);
  }
  builder.setView(view).setTitle(getString(R.string.rgba_insertion_dialog_title)).setPositiveButton(getString(R.string.print_color_dialog_message_set),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
      pickerR.clearFocus();
      pickerG.clearFocus();
      pickerB.clearFocus();
      pickerA.clearFocus();
      short[] rgbaValues=new short[]{(short)pickerR.getValue(),(short)pickerG.getValue(),(short)pickerB.getValue(),(short)pickerA.getValue()};
      EventBus.getDefault().post(new RGBAInsertionEvent(rgbaValues));
      RgbaInsertionFragment.this.getDialog().cancel();
    }
  }
);
  return builder.create();
}",0.9634703196347032
131155,"@Override public void onClick(DialogInterface dialog,int id){
  short[] rgbaValues=new short[]{(short)pickerR.getValue(),(short)pickerG.getValue(),(short)pickerB.getValue(),(short)pickerA.getValue()};
  EventBus.getDefault().post(new RGBAInsertionEvent(rgbaValues));
  RgbaInsertionFragment.this.getDialog().cancel();
}","@Override public void onClick(DialogInterface dialog,int id){
  pickerR.clearFocus();
  pickerG.clearFocus();
  pickerB.clearFocus();
  pickerA.clearFocus();
  short[] rgbaValues=new short[]{(short)pickerR.getValue(),(short)pickerG.getValue(),(short)pickerB.getValue(),(short)pickerA.getValue()};
  EventBus.getDefault().post(new RGBAInsertionEvent(rgbaValues));
  RgbaInsertionFragment.this.getDialog().cancel();
}",0.8692098092643051
131156,"public static FactorGraph read(BufferedReader in){
  try {
    log.debug(""String_Node_Str"");
    IntObjectHashMap<Var> vars=new IntObjectHashMap<Var>();
    List<Factor> factors=new ArrayList<>();
    List<String> buffer=new ArrayList<String>();
    int numFactors=Integer.valueOf(readNextLineTrimmed(in,buffer));
    readNextLineTrimmed(in,buffer);
    for (int i=0; i < numFactors; i++) {
      int numVars=Integer.valueOf(readNextLineTrimmed(in,buffer));
      int[] varIds=toIntArray(readNextLineTrimmed(in,buffer));
      if (numVars != varIds.length) {
        String msg=String.format(""String_Node_Str"",i,numVars,varIds.length);
        throw new IllegalStateException(msg);
      }
      ArrayUtils.reverse(varIds);
      int[] dims=toIntArray(readNextLineTrimmed(in,buffer));
      if (numVars != dims.length) {
        String msg=String.format(""String_Node_Str"",i,numVars,dims.length);
        throw new IllegalStateException(msg);
      }
      ArrayUtils.reverse(dims);
      VarSet vs=new VarSet();
      for (int v=0; v < numVars; v++) {
        if (!vars.containsKey(varIds[v])) {
          vars.put(varIds[v],new Var(VarType.PREDICTED,dims[v],""String_Node_Str"" + varIds[v],null));
        }
        vs.add(vars.get(varIds[v]));
      }
      int[] iv2vs=new int[numVars];
      Arrays.fill(iv2vs,-1);
      for (int v=0; v < vs.size(); v++) {
        iv2vs[v]=vs.indexOf(vars.get(varIds[v]));
      }
      int numNonZeros=Integer.valueOf(readNextLineTrimmed(in,buffer));
      Tensor srcFac=new Tensor(RealAlgebra.getInstance(),dims);
      for (int j=0; j < numNonZeros; j++) {
        String[] pair=whitespace.split(readNextLineTrimmed(in,buffer));
        int idx=Integer.valueOf(pair[0]);
        double val=Double.valueOf(pair[1]);
        srcFac.setValue(idx,val);
      }
      ExplicitFactor dstFac=new ExplicitFactor(vs);
      DimIter iter=new DimIter(dims);
      while (iter.hasNext()) {
        int[] srcIdx=iter.next();
        int[] dstIdx=new int[srcIdx.length];
        for (int v=0; v < srcIdx.length; v++) {
          dstIdx[v]=srcIdx[iv2vs[v]];
        }
        double val=srcFac.get(srcIdx);
        dstFac.set(Math.log(val),dstIdx);
      }
      factors.add(dstFac);
      readNextLineTrimmed(in,buffer);
    }
    in.close();
    log.debug(""String_Node_Str"");
    FactorGraph fg=new FactorGraph();
    for (    Factor f : factors) {
      fg.addFactor(f);
    }
    return fg;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public static FactorGraph read(BufferedReader in){
  try {
    log.debug(""String_Node_Str"");
    IntObjectHashMap<Var> vars=new IntObjectHashMap<Var>();
    List<Factor> factors=new ArrayList<>();
    List<String> buffer=new ArrayList<String>();
    int numFactors=Integer.valueOf(readNextLineTrimmed(in,buffer));
    readNextLineTrimmed(in,buffer);
    for (int i=0; i < numFactors; i++) {
      int numVars=Integer.valueOf(readNextLineTrimmed(in,buffer));
      int[] varIds=toIntArray(readNextLineTrimmed(in,buffer));
      if (numVars != varIds.length) {
        String msg=String.format(""String_Node_Str"",i,numVars,varIds.length);
        throw new IllegalStateException(msg);
      }
      int[] dims=toIntArray(readNextLineTrimmed(in,buffer));
      if (numVars != dims.length) {
        String msg=String.format(""String_Node_Str"",i,numVars,dims.length);
        throw new IllegalStateException(msg);
      }
      VarSet vs=new VarSet();
      Var[] varArray=new Var[numVars];
      for (int v=0; v < numVars; v++) {
        if (!vars.containsKey(varIds[v])) {
          Var newVar=new Var(VarType.PREDICTED,dims[v],""String_Node_Str"" + varIds[v],null);
          vars.put(varIds[v],newVar);
        }
        Var thisVar=vars.get(varIds[v]);
        if (thisVar.getNumStates() != dims[v]) {
          String msg=String.format(""String_Node_Str"",varIds[v],thisVar.getNumStates(),dims[v]);
          throw new IllegalStateException(msg);
        }
        varArray[v]=thisVar;
        vs.add(thisVar);
      }
      int numNonZeros=Integer.valueOf(readNextLineTrimmed(in,buffer));
      ExplicitFactor dstFac=new ExplicitFactor(vs);
      dstFac.fill(Double.NEGATIVE_INFINITY);
      for (int j=0; j < numNonZeros; j++) {
        String[] pair=whitespace.split(readNextLineTrimmed(in,buffer));
        int libdaiIx=Integer.valueOf(pair[0]);
        int cix=libDaiIxToConfigId(libdaiIx,dims,varArray,vs);
        System.out.println(""String_Node_Str"");
        System.out.println(ArrayUtils.toString(varIds));
        System.out.println(ArrayUtils.toString(Tensor.unravelIndexMatlab(libdaiIx,dims)));
        System.out.println(""String_Node_Str"");
        System.out.println(ArrayUtils.toString(vs.stream().map(v -> v.getName()).toArray()));
        System.out.println(ArrayUtils.toString(Tensor.unravelIndex(cix,vs.getDims())));
        double val=Math.log(Double.valueOf(pair[1]));
        System.out.println(String.format(""String_Node_Str"",cix,val));
        dstFac.setValue(cix,val);
      }
      factors.add(dstFac);
      readNextLineTrimmed(in,buffer);
    }
    in.close();
    log.debug(""String_Node_Str"");
    FactorGraph fg=new FactorGraph();
    for (    Factor f : factors) {
      fg.addFactor(f);
    }
    return fg;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.6715741789354474
131157,"public static void write(FactorGraph fg,BufferedWriter out){
  try {
    out.write(String.format(""String_Node_Str"",fg.getNumFactors(),fg.getNumVars(),fg.getNumEdges()));
    out.write(getNumNonGlobalFactors(fg) + ""String_Node_Str"");
    out.write(""String_Node_Str"");
    for (    Factor f : fg.getFactors()) {
      if (!(f instanceof GlobalFactor)) {
        VarSet vars=f.getVars();
        out.write(vars.size() + ""String_Node_Str"");
        for (int v=vars.size() - 1; v >= 0; v--) {
          out.write(""String_Node_Str"" + vars.get(v).getId());
          if (v > 0) {
            out.write(""String_Node_Str"");
          }
        }
        out.write(""String_Node_Str"");
        for (int v=vars.size() - 1; v >= 0; v--) {
          out.write(""String_Node_Str"" + vars.get(v).getNumStates());
          if (v > 0) {
            out.write(""String_Node_Str"");
          }
        }
        out.write(""String_Node_Str"");
        int n=vars.calcNumConfigs();
        out.write(n + ""String_Node_Str"");
        for (int c=0; c < n; c++) {
          out.write(String.format(""String_Node_Str"",c,Math.exp(f.getLogUnormalizedScore(c))));
        }
        out.write(""String_Node_Str"");
      }
 else {
        log.warn(""String_Node_Str"",f.getClass());
      }
    }
    out.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public static void write(FactorGraph fg,BufferedWriter out){
  try {
    out.write(String.format(""String_Node_Str"",fg.getNumFactors(),fg.getNumVars(),fg.getNumEdges()));
    out.write(getNumNonGlobalFactors(fg) + ""String_Node_Str"");
    out.write(""String_Node_Str"");
    for (    Factor f : fg.getFactors()) {
      if (!(f instanceof GlobalFactor)) {
        VarSet vars=f.getVars();
        out.write(vars.size() + ""String_Node_Str"");
        out.write(vars.stream().map(v -> Integer.toString(v.getId())).collect(Collectors.joining(""String_Node_Str"")));
        out.write(""String_Node_Str"");
        out.write(vars.stream().map(v -> Integer.toString(v.getNumStates())).collect(Collectors.joining(""String_Node_Str"")));
        out.write(""String_Node_Str"");
        int n=vars.calcNumConfigs();
        int nNonZero=0;
        for (int c=0; c < n; c++) {
          if (Math.exp(f.getLogUnormalizedScore(c)) > 0) {
            nNonZero++;
          }
        }
        out.write(nNonZero + ""String_Node_Str"");
        for (int c=0; c < n; c++) {
          double prob=Math.exp(f.getLogUnormalizedScore(c));
          if (prob > 0) {
            out.write(String.format(""String_Node_Str"",configIdToLibDaiIx(c,vars),prob));
          }
        }
        out.write(""String_Node_Str"");
      }
 else {
        log.warn(""String_Node_Str"",f.getClass());
      }
    }
    out.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.5438282647584973
131158,"public static void assertArrayEquals(boolean[] a1,boolean[] a2){
  Assert.assertEquals(a1.length,a2.length);
  for (int i=0; i < a1.length; i++) {
    Assert.assertEquals(""String_Node_Str"" + i,a1[i],a2[i]);
  }
}","public static void assertArrayEquals(String[] a1,String[] a2){
  Assert.assertArrayEquals(a1,a2);
}",0.5401929260450161
131159,"/** 
 * Forward pass: y = \sum_i \sum_{x_i} (b(x_i) - b*(x_i))^2 , where b*(x_i) are the marginals given by taking the gold variable assignment as a point mass distribution. Note the sum is over all variable assignments to the predicted variables.
 */
public Tensor forward(){
  VarTensor[] varBeliefs=inf.getOutput().varBeliefs;
  double l2dist=s.zero();
  for (  Var v : vc.getVars()) {
    if (v.getType() == VarType.PREDICTED) {
      VarTensor marg=varBeliefs[v.getId()];
      int goldState=vc.getState(v);
      for (int c=0; c < marg.size(); c++) {
        double goldMarg=(c == goldState) ? s.one() : s.zero();
        double predMarg=marg.getValue(c);
        double diff=s.minus(Math.max(goldMarg,predMarg),Math.min(goldMarg,predMarg));
        l2dist=s.plus(l2dist,s.times(diff,diff));
      }
    }
  }
  y=Tensor.getScalarTensor(s,l2dist);
  return y;
}","/** 
 * Forward pass: y = \sum_i \sum_{x_i} (b(x_i) - b*(x_i))^2 , where b*(x_i) are the marginals given by taking the gold variable assignment as a point mass distribution. Note the sum is over all variable assignments to the predicted variables.
 */
public Tensor forward(){
  VarTensor[] varBeliefs=inf.getOutput().varBeliefs;
  double l2dist=s.zero();
  for (  Var v : vc.getVars()) {
    if (v.getType() == VarType.PREDICTED) {
      VarTensor marg=varBeliefs[v.getId()];
      int goldState=vc.getState(v);
      for (int c=0; c < marg.size(); c++) {
        double goldMarg=(c == goldState) ? s.one() : s.zero();
        double predMarg=marg.getValue(c);
        double diff=s.minus(Math.max(goldMarg,predMarg),Math.min(goldMarg,predMarg));
        l2dist=s.plus(l2dist,s.times(diff,diff));
      }
    }
  }
  if (s.lt(l2dist,s.zero())) {
    log.warn(""String_Node_Str"" + l2dist);
  }
  y=Tensor.getScalarTensor(s,l2dist);
  return y;
}",0.9574820541137492
131160,"@Override public Module<Tensor> getInstance(FgModelIdentity mid,FactorGraph fg,VarConfig goldConfig,double weight,int curIter,int maxIter){
  Module<Tensor> mt=mtFac.getInstance(mid,fg,goldConfig,1.0,curIter,maxIter);
  ScalarMultiply scale=new ScalarMultiply(mt,weight);
  return new TopoOrder<Tensor>(QLists.getList(mid,scale.getInputs().get(1)),scale,""String_Node_Str"");
}","@Override public Module<Tensor> getInstance(FgModelIdentity mid,FactorGraph fg,VarConfig goldConfig,double weight,int curIter,int maxIter){
  Module<Tensor> mt=mtFac.getInstance(mid,fg,goldConfig,1.0,curIter,maxIter);
  Algebra s=mt.getAlgebra();
  ScalarMultiply scale=new ScalarMultiply(mt,s.fromReal(weight));
  return new TopoOrder<Tensor>(QLists.getList(mid,scale.getInputs().get(1)),scale,""String_Node_Str"");
}",0.9481668773704172
131161,"public static FgModel trainErma(FgModel model,FgExampleList data,Regularizer r,boolean sgd){
  BeliefPropagationPrm bpPrm=new BeliefPropagationPrm();
  bpPrm.schedule=BpScheduleType.TREE_LIKE;
  bpPrm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  bpPrm.normalizeMessages=false;
  bpPrm.s=RealAlgebra.getInstance();
  CrfTrainerPrm prm=new CrfTrainerPrm();
  prm.infFactory=bpPrm;
  prm.bFactory=bpPrm;
  prm.dlFactory=new MeanSquaredErrorFactory();
  prm.trainer=Trainer.ERMA;
  if (sgd) {
    SGDPrm optPrm=new SGDPrm();
    optPrm.numPasses=10;
    optPrm.batchSize=2;
    optPrm.autoSelectLr=false;
    optPrm.sched.setEta0(0.2);
    prm.batchOptimizer=new SGD(optPrm);
    prm.optimizer=null;
  }
 else {
    prm.batchOptimizer=null;
    prm.optimizer=new MalletLBFGS(new MalletLBFGSPrm());
  }
  prm.regularizer=r;
  CrfTrainer trainer=new CrfTrainer(prm);
  trainer.train(model,data);
  return model;
}","public static FgModel trainErma(FgModel model,FgExampleList data,Regularizer r,boolean sgd){
  BeliefPropagationPrm bpPrm=new BeliefPropagationPrm();
  bpPrm.schedule=BpScheduleType.TREE_LIKE;
  bpPrm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  bpPrm.normalizeMessages=false;
  bpPrm.s=RealAlgebra.getInstance();
  CrfTrainerPrm prm=new CrfTrainerPrm();
  prm.infFactory=bpPrm;
  prm.bFactory=bpPrm;
  prm.dlFactory=new L2DistanceFactory();
  prm.trainer=Trainer.ERMA;
  if (sgd) {
    SGDPrm optPrm=new SGDPrm();
    optPrm.numPasses=10;
    optPrm.batchSize=2;
    optPrm.autoSelectLr=false;
    optPrm.sched.setEta0(0.2);
    prm.batchOptimizer=new SGD(optPrm);
    prm.optimizer=null;
  }
 else {
    prm.batchOptimizer=null;
    prm.optimizer=new MalletLBFGS(new MalletLBFGSPrm());
  }
  prm.regularizer=r;
  CrfTrainer trainer=new CrfTrainer(prm);
  trainer.train(model,data);
  return model;
}",0.985539488320356
131162,"private void testSimpleGradient(Algebra s){
  double[] params=new double[]{0.0,0.0,0.0,0.0};
  helpSimpleGradient(params,new ExpectedRecallFactory(),Trainer.ERMA,new double[]{-0.125,0.125,0.125,-0.125},s);
  helpSimpleGradient(params,new MeanSquaredErrorFactory(),Trainer.ERMA,new double[]{-0.25,0.25,0.25,-0.25},s);
  helpSimpleGradient(params,null,Trainer.CLL,new double[]{0.25,-0.25,-0.25,0.25},s);
  params=new double[]{1.0,2.0,3.0,4.0};
  helpSimpleGradient(params,new ExpectedRecallFactory(),Trainer.ERMA,new double[]{-0.0983,0.0983,0.0983,-0.0983},s);
  helpSimpleGradient(params,new MeanSquaredErrorFactory(),Trainer.ERMA,new double[]{-0.2875,0.2875,0.1058,-0.1058},s);
  helpSimpleGradient(params,null,Trainer.CLL,new double[]{0.3655,-0.3655,-0.1345,0.1345},s);
}","private void testSimpleGradient(Algebra s){
  double[] params=new double[]{0.0,0.0,0.0,0.0};
  helpSimpleGradient(params,new ExpectedRecallFactory(),Trainer.ERMA,new double[]{-0.125,0.125,0.125,-0.125},s);
  helpSimpleGradient(params,new L2DistanceFactory(),Trainer.ERMA,new double[]{-0.25,0.25,0.25,-0.25},s);
  helpSimpleGradient(params,null,Trainer.CLL,new double[]{0.25,-0.25,-0.25,0.25},s);
  params=new double[]{1.0,2.0,3.0,4.0};
  helpSimpleGradient(params,new ExpectedRecallFactory(),Trainer.ERMA,new double[]{-0.0983,0.0983,0.0983,-0.0983},s);
  helpSimpleGradient(params,new L2DistanceFactory(),Trainer.ERMA,new double[]{-0.2875,0.2875,0.1058,-0.1058},s);
  helpSimpleGradient(params,null,Trainer.CLL,new double[]{0.3655,-0.3655,-0.1345,0.1345},s);
}",0.9660574412532638
131163,"@Override public void init(UFgExample ex,FactorTemplateList fts){
  this.feats=new FeatureVector[ex.getFactorGraph().getNumFactors()];
  this.featExtractor.init(ex,fts);
}","@Deprecated public void init(FactorGraph fg){
  this.feats=new FeatureVector[fg.getNumFactors()];
}",0.6370370370370371
131164,"private void skipNonIncluded(){
  while (!included[iter.i][iter.j][iter.k]) {
    hasNext=iter.next();
  }
}","private void skipNonIncluded(){
  while (hasNext && !included[iter.i][iter.j][iter.k]) {
    hasNext=iter.next();
  }
}",0.9515418502202644
131165,"/** 
 * The case of data == null should only be allowed in testing. 
 */
public void init(FgExampleList data){
  if (data == null && !prm.includeUnsupportedFeatures) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (data == null && prm.featCountCutoff > 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (templates.isGrowing() && data != null) {
    log.info(""String_Node_Str"");
    extractAllFeats(data,templates);
    templates.stopGrowth();
    feAlphabet.stopGrowth();
  }
  numTemplates=templates.size();
  this.included=new boolean[numTemplates][][];
  for (int t=0; t < numTemplates; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    included[t]=new boolean[numConfigs][numFeats];
  }
  BoolArrays.fill(included,true);
  if (!prm.includeUnsupportedFeatures) {
    prm.featCountCutoff=Math.max(prm.featCountCutoff,1);
  }
  if (prm.featCountCutoff >= 1) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    IntIntDenseVector[][] counts=countFeatures(data,templates);
    excludeByFeatCount(counts);
  }
  for (int t=0; t < included.length; t++) {
    FactorTemplate template=templates.get(t);
    FeatureNames alphabet=template.getAlphabet();
    for (int k=0; k < alphabet.size(); k++) {
      if (alphabet.isBiasFeature(k)) {
        for (int c=0; c < included[t].length; c++) {
          included[t][c][k]=true;
        }
      }
    }
  }
  numParams=feAlphabet.size();
  this.indices=new int[numTemplates][][];
  for (int t=0; t < indices.length; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    indices[t]=new int[numConfigs][numFeats];
    for (int c=0; c < indices[t].length; c++) {
      for (int k=0; k < indices[t][c].length; k++) {
        indices[t][c][k]=included[t][c][k] ? numParams++ : -1;
      }
    }
  }
  reservedOffset=numParams;
  numParams+=reservedMax;
  if (reservedMax > 0) {
    log.debug(""String_Node_Str"",reservedMax,reservedOffset);
  }
  numParams=Math.max(numParams,featureHashModMax);
  initialized=true;
}","/** 
 * The case of data == null should only be allowed in testing. 
 */
public void init(FgExampleList data){
  if (data == null && !prm.includeUnsupportedFeatures) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (data == null && prm.featCountCutoff > 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (templates.isGrowing() && data != null) {
    log.info(""String_Node_Str"");
    extractAllFeats(data,templates);
    templates.stopGrowth();
    feAlphabet.stopGrowth();
  }
  numTemplates=templates.size();
  this.included=new boolean[numTemplates][][];
  for (int t=0; t < numTemplates; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    included[t]=new boolean[numConfigs][numFeats];
  }
  BoolArrays.fill(included,true);
  if (!prm.includeUnsupportedFeatures) {
    prm.featCountCutoff=Math.max(prm.featCountCutoff,1);
  }
  if (prm.featCountCutoff >= 1) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    IntIntDenseVector[][] counts=countFeatures(data,templates);
    excludeByFeatCount(counts);
  }
  for (int t=0; t < included.length; t++) {
    FactorTemplate template=templates.get(t);
    FeatureNames alphabet=template.getAlphabet();
    for (int k=0; k < alphabet.size(); k++) {
      if (alphabet.isBiasFeature(k)) {
        for (int c=0; c < included[t].length; c++) {
          included[t][c][k]=true;
        }
      }
    }
  }
  numParams=feAlphabet.size();
  this.indices=new int[numTemplates][][];
  for (int t=0; t < indices.length; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    indices[t]=new int[numConfigs][numFeats];
    for (int c=0; c < indices[t].length; c++) {
      for (int k=0; k < indices[t][c].length; k++) {
        indices[t][c][k]=included[t][c][k] ? numParams++ : -1;
      }
    }
  }
  reservedOffset=numParams;
  numParams+=reservedMax;
  if (reservedMax > 0) {
    log.debug(""String_Node_Str"",reservedMax,reservedOffset);
  }
  if (fcmAlphabet.size() > 0) {
    log.debug(""String_Node_Str"",fcmAlphabet.size());
  }
  fcmAlphabet.stopGrowth();
  numParams=Math.max(numParams,featureHashModMax);
  initialized=true;
}",0.9740978525570068
131166,"public void printModel(Writer writer) throws IOException {
  Iterator<String> iter=null;
  if (paramNames != null) {
    iter=paramNames.iterator();
  }
  for (int i=0; i < numParams; i++) {
    if (paramNames != null) {
      writer.write(iter.next());
    }
 else {
      writer.write(String.format(""String_Node_Str"",i));
    }
    writer.write(""String_Node_Str"");
    writer.write(String.format(""String_Node_Str"",params.get(i)));
    writer.write(""String_Node_Str"");
  }
  writer.flush();
}","public void printModel(Writer writer) throws IOException {
  Iterator<String> iter=null;
  if (paramNames != null) {
    iter=paramNames.iterator();
  }
  for (int i=0; i < numParams; i++) {
    if (paramNames != null && iter.hasNext()) {
      writer.write(iter.next());
    }
 else {
      writer.write(String.format(""String_Node_Str"",i));
    }
    writer.write(""String_Node_Str"");
    writer.write(String.format(""String_Node_Str"",params.get(i)));
    writer.write(""String_Node_Str"");
  }
  writer.flush();
}",0.9820717131474104
131167,"public static void init(File reportOut,boolean useLog4j){
  ReporterManager.useLog4j=useLog4j;
  if (wr != null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    if (reportOut != null) {
      wr=new StreamReporter(new FileOutputStream(reportOut));
    }
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e);
  }
  initialized=true;
  for (  Class<?> clazz : reps.keySet()) {
    InitReporter rl=(InitReporter)reps.get(clazz);
    rl.set(getReporter(clazz));
  }
  reps=null;
}","public static void init(File reportOut,boolean useLogger){
  if (initialized) {
    log.warn(""String_Node_Str"");
  }
  ReporterManager.useLogger=useLogger;
  if (wr != null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    if (reportOut != null) {
      wr=new StreamReporter(new FileOutputStream(reportOut));
    }
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e);
  }
  initialized=true;
  if (reps != null) {
    for (    Class<?> clazz : reps.keySet()) {
      InitReporter rep=(InitReporter)reps.get(clazz);
      rep.set(getReporter(clazz));
    }
    reps=null;
  }
}",0.8568920105355575
131168,"public static Reporter getReporter(Class<?> clazz){
  Reporter r;
  if (!initialized) {
    r=new InitReporter();
    reps.put(clazz,r);
  }
 else   if (useLog4j && wr != null) {
    r=new ReporterList(new Log4jReporter(clazz),wr);
  }
 else   if (useLog4j && wr == null) {
    r=new Log4jReporter(clazz);
  }
 else   if (!useLog4j && wr != null) {
    r=wr;
  }
 else {
    r=new ReporterList();
  }
  return r;
}","public static Reporter getReporter(Class<?> clazz){
  Reporter r;
  if (!initialized) {
    r=new InitReporter();
    reps.put(clazz,r);
  }
 else   if (useLogger && wr != null) {
    r=new ReporterList(new Log4jReporter(clazz),wr);
  }
 else   if (useLogger && wr == null) {
    r=new Log4jReporter(clazz);
  }
 else   if (!useLogger && wr != null) {
    r=wr;
  }
 else {
    r=new ReporterList();
  }
  return r;
}",0.7051744885679904
131169,"/** 
 * Gets a topological sort for the graph, where the depth-first search is cutoff by an input set.
 * @param inputs The input set which is excluded from the graph.
 * @param root The root of the graph.
 * @param deps Functional description of the graph's dependencies.
 * @return The topological sort.
 */
public static <T>List<T> toposort(final Set<T> inputSet,T root,final Deps<T> deps){
  checkIsValidLeafSet(inputSet,root,deps);
  Deps<T> cutoffDeps=getCutoffDeps(inputSet,deps);
  return Toposort.toposort(root,cutoffDeps);
}","/** 
 * Gets a topological sort for the graph, where the depth-first search is cutoff by an input set.
 * @param inputSet The input set which is excluded from the graph.
 * @param root The root of the graph.
 * @param deps Functional description of the graph's dependencies.
 * @param isFullCut Whether the input set is a full cut of the graph.
 * @return The topological sort.
 */
public static <T>List<T> toposort(final Set<T> inputSet,T root,final Deps<T> deps,boolean isFullCut){
  checkAreDescendentsOf(inputSet,root,deps);
  if (isFullCut) {
    checkIsFullCut(inputSet,root,deps);
  }
  Deps<T> cutoffDeps=getCutoffDeps(inputSet,deps);
  return Toposort.toposort(root,cutoffDeps);
}",0.7424366312346689
131170,"public EmpiricalRisk(FactorGraph fg,VarConfig goldConfig,Module<MVecFgModel> mid,BeliefsModuleFactory bFactory,DlFactory dlFactory,int curIter,int maxIter){
  super();
  this.mid=mid;
  try (TimerAdder t0=new TimerAdder(tot)){
    try (TimerAdder t=new TimerAdder(initTimer)){
      effm=new FactorsModule(mid,fg,bFactory.getAlgebra());
      inf=bFactory.getBeliefsModule(effm,fg);
      dl=dlFactory.getDl(goldConfig,effm,inf,curIter,maxIter);
      shallowCopy(new TopoOrder<Tensor>(QLists.getList(mid),dl,""String_Node_Str""));
    }
   }
 }","public EmpiricalRisk(FactorGraph fg,VarConfig goldConfig,Module<MVecFgModel> mid,BeliefsModuleFactory bFactory,DlFactory dlFactory,int curIter,int maxIter){
  super();
  this.mid=mid;
  try (TimerAdder t0=new TimerAdder(tot)){
    try (TimerAdder t=new TimerAdder(initTimer)){
      effm=new FactorsModule(mid,fg,bFactory.getAlgebra());
      inf=bFactory.getBeliefsModule(effm,fg);
      dl=dlFactory.getDl(goldConfig,effm,inf,curIter,maxIter);
      shallowCopy(new TopoOrder<Tensor>(QLists.getList(mid),dl,""String_Node_Str"",false));
    }
   }
 }",0.9945054945054944
131171,"@Test public void testTopoSortWithInputs2(){
  List<String> valid=Arrays.asList(new String[]{""String_Node_Str""});
  Deps<String> deps=new DiamondGraph();
  List<String> sort=Toposort.toposort(QLists.getList(""String_Node_Str""),""String_Node_Str"",deps);
  System.out.println(sort);
  assertTrue(valid.contains(sort.toString()));
}","@Test public void testTopoSortWithInputs2(){
  List<String> valid=Arrays.asList(new String[]{""String_Node_Str""});
  Deps<String> deps=new DiamondGraph();
  List<String> sort=Toposort.toposort(QLists.getList(""String_Node_Str""),""String_Node_Str"",deps,true);
  System.out.println(sort);
  assertTrue(valid.contains(sort.toString()));
}",0.992412746585736
131172,"@Test public void testTopoSortWithInputs(){
  Prng.seed(1l);
  List<String> valid=Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  for (  int i : QLists.getList(0,1,2)) {
    Deps<String> deps=new ShuffledSimpleGraph(i * 3);
    List<String> sort=Toposort.toposort(QLists.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",deps);
    if (valid.contains(sort.toString())) {
      System.out.println(""String_Node_Str"" + i);
    }
    System.out.println(sort);
    assertTrue(valid.contains(sort.toString()));
  }
}","@Test public void testTopoSortWithInputs(){
  Prng.seed(1l);
  List<String> valid=Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  for (  int i : QLists.getList(0,1,2)) {
    Deps<String> deps=new ShuffledSimpleGraph(i * 3);
    List<String> sort=Toposort.toposort(QLists.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",deps,true);
    if (valid.contains(sort.toString())) {
      System.out.println(""String_Node_Str"" + i);
    }
    System.out.println(sort);
    assertTrue(valid.contains(sort.toString()));
  }
}",0.9959514170040484
131173,"@Test public void testTopoSortWithBadInputs(){
  SimpleGraph deps=new SimpleGraph();
  try {
    Toposort.toposort(QLists.getList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",deps);
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    Toposort.toposort(QLists.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",deps);
    fail();
  }
 catch (  IllegalStateException e) {
  }
}","@Test public void testTopoSortWithBadInputs(){
  SimpleGraph deps=new SimpleGraph();
  try {
    Toposort.toposort(QLists.getList(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",deps,true);
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    Toposort.toposort(QLists.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",deps,true);
    fail();
  }
 catch (  IllegalStateException e) {
  }
}",0.988558352402746
131174,"public static void assertEqualMarginals(FactorGraph fg,FgInferencer bf,FgInferencer bp,double tolerance){
  for (  Var var : fg.getVars()) {
{
      VarTensor bfm=bf.getMarginals(var);
      VarTensor bpm=bp.getMarginals(var);
      if (!bfm.equals(bpm,tolerance)) {
        assertEquals(bfm,bpm);
      }
    }
{
      VarTensor bfm=bf.getLogMarginals(var);
      VarTensor bpm=bp.getLogMarginals(var);
      if (!bfm.equals(bpm,tolerance)) {
        assertEquals(bfm,bpm);
      }
    }
  }
  for (  Factor f : fg.getFactors()) {
{
      VarTensor bfm=bf.getMarginals(f);
      VarTensor bpm=bp.getMarginals(f);
      if (!bfm.equals(bpm,tolerance)) {
        assertEquals(bfm,bpm);
      }
    }
{
      VarTensor bfm=bf.getLogMarginals(f);
      VarTensor bpm=bp.getLogMarginals(f);
      if (!bfm.equals(bpm,tolerance)) {
        assertEquals(bfm,bpm);
      }
    }
  }
  assertEquals(bf.getPartition(),bp.getPartition(),tolerance);
  assertEquals(bf.getLogPartition(),bp.getLogPartition(),tolerance);
}","public static void assertEqualMarginals(FactorGraph fg,FgInferencer bf,FgInferencer bp,double tolerance,boolean compareGlobalFactors){
  for (  Var var : fg.getVars()) {
{
      VarTensor bfm=bf.getMarginals(var);
      VarTensor bpm=bp.getMarginals(var);
      if (!bfm.equals(bpm,tolerance)) {
        assertEquals(bfm,bpm);
      }
    }
{
      VarTensor bfm=bf.getLogMarginals(var);
      VarTensor bpm=bp.getLogMarginals(var);
      if (!bfm.equals(bpm,tolerance)) {
        assertEquals(bfm,bpm);
      }
    }
  }
  for (  Factor f : fg.getFactors()) {
    if (!compareGlobalFactors && f instanceof GlobalFactor) {
      continue;
    }
{
      VarTensor bfm=bf.getMarginals(f);
      VarTensor bpm=bp.getMarginals(f);
      if (!bfm.equals(bpm,tolerance)) {
        assertEquals(bfm,bpm);
      }
    }
{
      VarTensor bfm=bf.getLogMarginals(f);
      VarTensor bpm=bp.getLogMarginals(f);
      if (!bfm.equals(bpm,tolerance)) {
        assertEquals(bfm,bpm);
      }
    }
  }
  assertEquals(bf.getPartition(),bp.getPartition(),tolerance);
  assertEquals(bf.getLogPartition(),bp.getLogPartition(),tolerance);
}",0.9469732519943688
131175,"protected void addEdgeToOrder(int e,BipartiteGraph<Var,Factor> bg,boolean[] markedGF){
  if (!bg.isT1T2(e) && bg.t2E(e) instanceof GlobalFactor) {
    if (!markedGF[bg.parentE(e)]) {
      order.add(bg.t2E(e));
      markedGF[bg.parentE(e)]=true;
      log.warn(""String_Node_Str"");
    }
  }
 else {
    order.add(e);
  }
}","protected void addEdgeToOrder(int e,BipartiteGraph<Var,Factor> bg,boolean[] markedGF,boolean warnGF){
  if (!bg.isT1T2(e) && bg.t2E(e) instanceof GlobalFactor) {
    if (!markedGF[bg.parentE(e)]) {
      order.add(bg.t2E(e));
      markedGF[bg.parentE(e)]=true;
      if (warnGF) {
        log.warn(""String_Node_Str"");
      }
    }
  }
 else {
    order.add(e);
  }
}",0.934876989869754
131176,"public RandomMpSchedule(FactorGraph fg){
  BipartiteGraph<Var,Factor> bg=fg.getBipgraph();
  order=new ArrayList<Object>();
  for (int v=0; v < fg.getNumVars(); v++) {
    for (int nb=0; nb < bg.numNbsT1(v); nb++) {
      order.add(bg.edgeT1(v,nb));
    }
  }
  for (int f=0; f < fg.getNumFactors(); f++) {
    if (bg.t2E(f) instanceof GlobalFactor) {
      order.add(bg.t2E(f));
    }
 else {
      for (int nb=0; nb < bg.numNbsT2(f); nb++) {
        order.add(bg.edgeT2(f,nb));
      }
    }
  }
}","public RandomMpSchedule(FactorGraph fg){
  BipartiteGraph<Var,Factor> bg=fg.getBipgraph();
  order=new ArrayList<Object>();
  for (int v=0; v < fg.getNumVars(); v++) {
    for (int nb=0; nb < bg.numNbsT1(v); nb++) {
      order.add(bg.edgeT1(v,nb));
    }
  }
  for (int f=0; f < fg.getNumFactors(); f++) {
    if (bg.getT2s().get(f) instanceof GlobalFactor) {
      order.add(bg.getT2s().get(f));
    }
 else {
      for (int nb=0; nb < bg.numNbsT2(f); nb++) {
        order.add(bg.edgeT2(f,nb));
      }
    }
  }
}",0.9744094488188976
131177,"@Override public Tensor forward(){
  fmLatPred=new FactorsModule(mid,fgLatPred,s);
  fmLatPred.forward();
  fgLat=CrfObjective.getFgLat(fgLatPred,goldConfig);
  fmLat=new FactorsModule(mid,fgLat,s);
  fmLat.forward();
  infLatPred=infFactory.getInferencer(fgLatPred);
  infLatPred.run();
  infLat=infFactory.getInferencer(fgLat);
  infLat.run();
  double ll=CrfObjective.getValue(fgLat,infLat,fgLatPred,infLatPred,-1,goldConfig,weight);
  y=Scalar.getInstance(s,ll);
  return y;
}","@Override public Tensor forward(){
  fmLatPred=new FactorsModule(mid,fgLatPred,facS);
  fmLatPred.forward();
  fgLat=CrfObjective.getFgLat(fgLatPred,goldConfig);
  fmLat=new FactorsModule(mid,fgLat,facS);
  fmLat.forward();
  infLatPred=infFactory.getInferencer(fgLatPred);
  infLatPred.run();
  infLat=infFactory.getInferencer(fgLat);
  infLat.run();
  double ll=CrfObjective.getValue(fgLat,infLat,fgLatPred,infLatPred,-1,goldConfig,weight);
  y=Scalar.getInstance(s,ll);
  return y;
}",0.989648033126294
131178,"@Override public Module<Tensor> getInstance(FgModelIdentity mid,FactorGraph fg,VarConfig goldConfig,double weight,int curIter,int maxIter){
  if (weight != 1.0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (true || hasLatentVars(fg)) {
    return new MarginalLogLikelihood(mid,fg,infFactory,goldConfig);
  }
 else {
    return new LogLikelihood(mid,fg,infFactory,goldConfig);
  }
}","@Override public Module<Tensor> getInstance(FgModelIdentity mid,FactorGraph fg,VarConfig goldConfig,double weight,int curIter,int maxIter){
  if (weight != 1.0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (hasLatentVars(fg)) {
    return new MarginalLogLikelihood(mid,fg,infFactory,goldConfig);
  }
 else {
    return new LogLikelihood(mid,fg,infFactory,goldConfig);
  }
}",0.9900497512437813
131179,"@Override public void addExpectedPartials(IFgModel counts,VarTensor factorMarginal,double multiplier){
  int numConfigs=factorMarginal.getVars().calcNumConfigs();
  for (int c=0; c < numConfigs; c++) {
    double prob=factorMarginal.getValue(c);
    FeatureVector fv=getFeatures(c);
    counts.addAfterScaling(fv,multiplier * prob);
  }
}","@Override public void addExpectedPartials(IFgModel counts,VarTensor factorMarginal,double multiplier){
  log.trace(""String_Node_Str"",factorMarginal);
  int numConfigs=factorMarginal.getVars().calcNumConfigs();
  for (int c=0; c < numConfigs; c++) {
    double prob=factorMarginal.getValue(c);
    FeatureVector fv=getFeatures(c);
    counts.addAfterScaling(fv,multiplier * prob);
  }
}",0.9349930843706776
131180,"@Override public Tensor forward(){
  fmLatPred=new FactorsModule(mid,fgLatPred,facS);
  fmLatPred.forward();
  fgLat=CrfObjective.getFgLat(fgLatPred,goldConfig);
  fmLat=new FactorsModule(mid,fgLat,facS);
  fmLat.forward();
  infLatPred=infFactory.getInferencer(fgLatPred);
  infLatPred.run();
  infLat=infFactory.getInferencer(fgLat);
  infLat.run();
  double ll=CrfObjective.getValue(fgLat,infLat,fgLatPred,infLatPred,-1,goldConfig,weight);
  y=Scalar.getInstance(s,ll);
  return y;
}","@Override public Tensor forward(){
  fmLatPred=new FactorsModule(mid,fgLatPred,s);
  fmLatPred.forward();
  fgLat=CrfObjective.getFgLat(fgLatPred,goldConfig);
  fmLat=new FactorsModule(mid,fgLat,s);
  fmLat.forward();
  infLatPred=infFactory.getInferencer(fgLatPred);
  infLatPred.run();
  infLat=infFactory.getInferencer(fgLat);
  infLat.run();
  double numerator=s.fromLogProb(infLat.getLogPartition());
  double denominator=s.fromLogProb(infLatPred.getLogPartition());
  double ll=s.divide(numerator,denominator);
  log.trace(String.format(""String_Node_Str"",ll,numerator,denominator));
  if (ll > MAX_LOG_LIKELIHOOD) {
    log.warn(""String_Node_Str"" + ll);
  }
  return y=Scalar.getInstance(s,ll);
}",0.3501683501683502
131181,"public MarginalLikelihood(Module<MVecFgModel> mid,FactorGraph fg,FgInferencerFactory infFactory,VarConfig goldConfig,double weight){
  super(LogSemiring.getInstance());
  this.mid=mid;
  this.fgLatPred=fg;
  this.infFactory=infFactory;
  this.goldConfig=goldConfig;
  this.weight=weight;
}","public MarginalLikelihood(Module<MVecFgModel> mid,FactorGraph fg,FgInferencerFactory infFactory,VarConfig goldConfig){
  super(LogSignAlgebra.getInstance());
  this.mid=mid;
  this.fgLatPred=fg;
  this.infFactory=infFactory;
  this.goldConfig=goldConfig;
}",0.9027522935779816
131182,"@Test public void testErmaGradientLinearChainWithLoops(){
  FgAndVars fgv=FactorGraphTest.getLinearChainFgWithVars();
  FactorGraph fg=fgv.fg;
  ExplicitFactor loop0=new ExplicitFactor(new VarSet(fgv.t0,fgv.t2));
  ExplicitFactor loop1=new ExplicitFactor(new VarSet(fgv.w0,fgv.w2));
  ExplicitFactor loop2=new ExplicitFactor(new VarSet(fgv.t0,fgv.t1,fgv.t2));
  ExplicitFactor loop3=new ExplicitFactor(new VarSet(fgv.w0,fgv.w1,fgv.w2));
  fg.addFactor(loop0);
  fg.addFactor(loop1);
  fg.addFactor(loop2);
  fg.addFactor(loop3);
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(fgv.w0,0);
  goldConfig.put(fgv.w1,1);
  goldConfig.put(fgv.w2,0);
  goldConfig.put(fgv.t1,1);
  goldConfig.put(fgv.t2,1);
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  prm.schedule=BpScheduleType.TREE_LIKE;
  prm.maxIterations=2;
  prm.s=s;
  prm.normalizeMessages=true;
  testGradientByFiniteDifferences(fg,goldConfig,prm);
}","@Test public void testErmaGradientLinearChainWithLoops(){
  FgAndVars fgv=FactorGraphsForTests.getLinearChainFgWithVars();
  FactorGraph fg=fgv.fg;
  ExplicitFactor loop0=new ExplicitFactor(new VarSet(fgv.t0,fgv.t2));
  ExplicitFactor loop1=new ExplicitFactor(new VarSet(fgv.w0,fgv.w2));
  ExplicitFactor loop2=new ExplicitFactor(new VarSet(fgv.t0,fgv.t1,fgv.t2));
  ExplicitFactor loop3=new ExplicitFactor(new VarSet(fgv.w0,fgv.w1,fgv.w2));
  fg.addFactor(loop0);
  fg.addFactor(loop1);
  fg.addFactor(loop2);
  fg.addFactor(loop3);
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(fgv.w0,0);
  goldConfig.put(fgv.w1,1);
  goldConfig.put(fgv.w2,0);
  goldConfig.put(fgv.t1,1);
  goldConfig.put(fgv.t2,1);
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  prm.schedule=BpScheduleType.TREE_LIKE;
  prm.maxIterations=2;
  prm.s=s;
  prm.normalizeMessages=true;
  testGradientByFiniteDifferences(fg,goldConfig,prm);
}",0.9973642593568792
131183,"@Test public void testErmaGradientWithGlobalExplicitFactor(){
  FgAndVars fgv=FactorGraphTest.getLinearChainFgWithVars();
  FactorGraph fg=fgv.fg;
  ExplicitFactor loop0=new GlobalExplicitFactor(new VarSet(fgv.t0,fgv.t1,fgv.t2));
  loop0.setValue(0,2);
  loop0.setValue(1,3);
  loop0.setValue(2,5);
  loop0.setValue(3,7);
  loop0.setValue(4,11);
  loop0.setValue(5,15);
  loop0.setValue(6,19);
  loop0.setValue(7,23);
  fg.addFactor(loop0);
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(fgv.w0,0);
  goldConfig.put(fgv.w1,1);
  goldConfig.put(fgv.w2,0);
  goldConfig.put(fgv.t1,1);
  goldConfig.put(fgv.t2,1);
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.updateOrder=BpUpdateOrder.PARALLEL;
  prm.maxIterations=10;
  prm.s=s;
  prm.normalizeMessages=true;
  testGradientByFiniteDifferences(fg,goldConfig,prm);
}","@Test public void testErmaGradientWithGlobalExplicitFactor(){
  FgAndVars fgv=FactorGraphsForTests.getLinearChainFgWithVars();
  FactorGraph fg=fgv.fg;
  ExplicitFactor loop0=new GlobalExplicitFactor(new VarSet(fgv.t0,fgv.t1,fgv.t2));
  loop0.setValue(0,2);
  loop0.setValue(1,3);
  loop0.setValue(2,5);
  loop0.setValue(3,7);
  loop0.setValue(4,11);
  loop0.setValue(5,15);
  loop0.setValue(6,19);
  loop0.setValue(7,23);
  fg.addFactor(loop0);
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(fgv.w0,0);
  goldConfig.put(fgv.w1,1);
  goldConfig.put(fgv.w2,0);
  goldConfig.put(fgv.t1,1);
  goldConfig.put(fgv.t2,1);
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.updateOrder=BpUpdateOrder.PARALLEL;
  prm.maxIterations=10;
  prm.s=s;
  prm.normalizeMessages=true;
  testGradientByFiniteDifferences(fg,goldConfig,prm);
}",0.9969456322541234
131184,"@Test public void testErmaGradientLinearChain(){
  FgAndVars fgv=FactorGraphTest.getLinearChainFgWithVars();
  FactorGraph fg=fgv.fg;
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(fgv.w0,0);
  goldConfig.put(fgv.w1,1);
  goldConfig.put(fgv.w2,0);
  goldConfig.put(fgv.t1,1);
  goldConfig.put(fgv.t2,1);
  testGradientByFiniteDifferences(fg,goldConfig);
}","@Test public void testErmaGradientLinearChain(){
  FgAndVars fgv=FactorGraphsForTests.getLinearChainFgWithVars();
  FactorGraph fg=fgv.fg;
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(fgv.w0,0);
  goldConfig.put(fgv.w1,1);
  goldConfig.put(fgv.w2,0);
  goldConfig.put(fgv.t1,1);
  goldConfig.put(fgv.t2,1);
  testGradientByFiniteDifferences(fg,goldConfig);
}",0.9931972789115646
131185,"private void testOneVarHelper(Algebra s){
  FactorGraph fg=new FactorGraph();
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0));
  emit0.setValue(0,1.1);
  emit0.setValue(1,1.9);
  fg.addFactor(emit0);
  for (  Factor f : fg.getFactors()) {
    ((VarTensor)f).convertRealToLog();
  }
  BruteForceInferencer bf=new BruteForceInferencer(fg,s);
  bf.run();
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.maxIterations=10;
  prm.s=s;
  ErmaBp bp=new ErmaBp(fg,prm);
  bp.run();
  assertEqualMarginals(fg,bf,bp);
}","private void testOneVarHelper(Algebra s){
  FactorGraph fg=FactorGraphsForTests.getOneVarFg();
  BruteForceInferencer bf=new BruteForceInferencer(fg,s);
  bf.run();
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.maxIterations=10;
  prm.s=s;
  ErmaBp bp=new ErmaBp(fg,prm);
  bp.run();
  assertEqualMarginals(fg,bf,bp);
}",0.6591166477916195
131186,"@Before public void setUp(){
  FgAndVars fgv=FactorGraphTest.getLinearChainFgWithVars();
  VarTensor[] xsa=new VarTensor[3];
  xsa[0]=new VarTensor(fgv.emit0);
  xsa[1]=new VarTensor(fgv.emit1);
  xsa[2]=new VarTensor(fgv.tran0);
  MVecArray<VarTensor> xs=new MVecArray<>(xsa);
  for (int a=0; a < xs.dim(); a++) {
    xs.get(a).exp();
  }
  modIn=new Identity<MVecArray<VarTensor>>(xs);
}","@Before public void setUp(){
  FgAndVars fgv=FactorGraphsForTests.getLinearChainFgWithVars();
  VarTensor[] xsa=new VarTensor[3];
  xsa[0]=new VarTensor(fgv.emit0);
  xsa[1]=new VarTensor(fgv.emit1);
  xsa[2]=new VarTensor(fgv.tran0);
  MVecArray<VarTensor> xs=new MVecArray<>(xsa);
  for (int a=0; a < xs.dim(); a++) {
    xs.get(a).exp();
  }
  modIn=new Identity<MVecArray<VarTensor>>(xs);
}",0.983397190293742
131187,"public void testUpdatingOfTemplates(){
  FactorGraph fg=FactorGraphTest.getLinearChainGraph();
  VarConfig vc=new VarConfig();
  for (  Var v : fg.getVars()) {
    vc.put(v,0);
  }
  FactorTemplateList fts=new FactorTemplateList();
  LFgExample ex=new LabeledFgExample(fg,vc,new SimpleVCObsFeatureExtractor(fts),fts);
  FgExampleMemoryStore data=new FgExampleMemoryStore();
  data.add(ex);
  System.out.println(fts);
  assertEquals(2,fts.size());
  assertEquals(2,fts.getNumObsFeats());
}","public void testUpdatingOfTemplates(){
  FactorGraph fg=FactorGraphsForTests.getLinearChainGraph();
  VarConfig vc=new VarConfig();
  for (  Var v : fg.getVars()) {
    vc.put(v,0);
  }
  FactorTemplateList fts=new FactorTemplateList();
  LFgExample ex=new LabeledFgExample(fg,vc,new SimpleVCObsFeatureExtractor(fts),fts);
  FgExampleMemoryStore data=new FgExampleMemoryStore();
  data.add(ex);
  System.out.println(fts);
  assertEquals(2,fts.size());
  assertEquals(2,fts.getNumObsFeats());
}",0.9949031600407748
131188,"public static FactorGraph getLinearChainGraph(){
  FactorGraph fg=FactorGraphTest.getLinearChainGraph();
  return fg;
}","public static FactorGraph getLinearChainGraph(){
  FactorGraph fg=FactorGraphsForTests.getLinearChainGraph();
  return fg;
}",0.9794238683127572
131189,"public void init(FgExampleList data){
  if (templates.isGrowing() && data != null) {
    log.info(""String_Node_Str"");
    extractAllFeats(data,templates);
    templates.stopGrowth();
    feAlphabet.stopGrowth();
  }
  numTemplates=templates.size();
  this.included=new boolean[numTemplates][][];
  for (int t=0; t < numTemplates; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    included[t]=new boolean[numConfigs][numFeats];
  }
  BoolArrays.fill(included,true);
  if (!prm.includeUnsupportedFeatures) {
    prm.featCountCutoff=Math.max(prm.featCountCutoff,1);
  }
  if (prm.featCountCutoff >= 1) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    IntIntDenseVector[][] counts=countFeatures(data,templates);
    excludeByFeatCount(counts);
  }
  for (int t=0; t < included.length; t++) {
    FactorTemplate template=templates.get(t);
    FeatureNames alphabet=template.getAlphabet();
    for (int k=0; k < alphabet.size(); k++) {
      if (alphabet.isBiasFeature(k)) {
        for (int c=0; c < included[t].length; c++) {
          included[t][c][k]=true;
        }
      }
    }
  }
  numParams=feAlphabet.size();
  this.indices=new int[numTemplates][][];
  for (int t=0; t < indices.length; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    indices[t]=new int[numConfigs][numFeats];
    for (int c=0; c < indices[t].length; c++) {
      for (int k=0; k < indices[t][c].length; k++) {
        indices[t][c][k]=included[t][c][k] ? numParams++ : -1;
      }
    }
  }
  numParams=Math.max(numParams,featureHashModMax);
  initialized=true;
}","/** 
 * The case of data == null should only be allowed in testing. 
 */
public void init(FgExampleList data){
  if (data == null && !prm.includeUnsupportedFeatures) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (data == null && prm.featCountCutoff > 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (templates.isGrowing() && data != null) {
    log.info(""String_Node_Str"");
    extractAllFeats(data,templates);
    templates.stopGrowth();
    feAlphabet.stopGrowth();
  }
  numTemplates=templates.size();
  this.included=new boolean[numTemplates][][];
  for (int t=0; t < numTemplates; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    included[t]=new boolean[numConfigs][numFeats];
  }
  BoolArrays.fill(included,true);
  if (!prm.includeUnsupportedFeatures) {
    prm.featCountCutoff=Math.max(prm.featCountCutoff,1);
  }
  if (prm.featCountCutoff >= 1) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    IntIntDenseVector[][] counts=countFeatures(data,templates);
    excludeByFeatCount(counts);
  }
  for (int t=0; t < included.length; t++) {
    FactorTemplate template=templates.get(t);
    FeatureNames alphabet=template.getAlphabet();
    for (int k=0; k < alphabet.size(); k++) {
      if (alphabet.isBiasFeature(k)) {
        for (int c=0; c < included[t].length; c++) {
          included[t][c][k]=true;
        }
      }
    }
  }
  numParams=feAlphabet.size();
  this.indices=new int[numTemplates][][];
  for (int t=0; t < indices.length; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    indices[t]=new int[numConfigs][numFeats];
    for (int c=0; c < indices[t].length; c++) {
      for (int k=0; k < indices[t][c].length; k++) {
        indices[t][c][k]=included[t][c][k] ? numParams++ : -1;
      }
    }
  }
  numParams=Math.max(numParams,featureHashModMax);
  initialized=true;
}",0.9198844234305228
131190,"@Test public void testNumParams(){
  FactorTemplateList fts=getFtl();
  ObsFeatureConjoiner ofc=new ObsFeatureConjoiner(new ObsFeatureConjoinerPrm(),fts);
  ofc.init(null);
  assertEquals((3 * 2) * 2 + 2 * 1,ofc.getNumParams());
}","@Test public void testNumParams(){
  FactorTemplateList fts=getFtl();
  ObsFeatureConjoinerPrm prm=new ObsFeatureConjoinerPrm();
  prm.featCountCutoff=-1;
  prm.includeUnsupportedFeatures=true;
  ObsFeatureConjoiner ofc=new ObsFeatureConjoiner(prm,fts);
  ofc.init(null);
  assertEquals((3 * 2) * 2 + 2 * 1,ofc.getNumParams());
}",0.7871198568872988
131191,"/** 
 * Gets the marginal conditional log-likelihood of the i'th example for the given model parameters. We return: <p> \log p(y|x) = \log \sum_z p(y, z | x) </p> where y are the predicted variables, x are the observed variables, and z are the latent variables.
 * @param fgLat The factor graph with the predicted and observed variables clamped. 
 * @param infLat The inferencer for fgLat.
 * @param fgLatPred The factor graph with the observed variables clamped. 
 * @param infLatPred The inferencer for fgLatPred.
 * @param i The data example.
 */
public double getValue(LFgExample ex,FactorGraph fgLat,FgInferencer infLat,FactorGraph fgLatPred,FgInferencer infLatPred,int i){
  double numerator=infLat.getLogPartition();
  double denominator=infLatPred.getLogPartition();
  int numFullyClamped=0;
  for (int a=0; a < fgLatPred.getNumFactors(); a++) {
    Factor f=fgLatPred.getFactor(a);
    boolean isNumeratorClamped=fgLat.getFactor(a).getVars().size() == 0;
    boolean isDenominatorClamped=fgLatPred.getFactor(a).getVars().size() == 0;
    if (f instanceof GlobalFactor) {
      GlobalFactor gf=(GlobalFactor)f;
      if (isNumeratorClamped) {
        VarConfig goldConfig=ex.getGoldConfig().getIntersection(fgLatPred.getFactor(a).getVars());
        numerator+=gf.getLogUnormalizedScore(goldConfig);
        numFullyClamped++;
        if (isDenominatorClamped) {
          denominator+=gf.getLogUnormalizedScore(goldConfig);
        }
      }
    }
 else {
      if (isNumeratorClamped) {
        int goldConfig=ex.getGoldConfig().getConfigIndexOfSubset(f.getVars());
        numerator+=f.getLogUnormalizedScore(goldConfig);
        numFullyClamped++;
        if (isDenominatorClamped) {
          denominator+=f.getLogUnormalizedScore(goldConfig);
        }
      }
    }
  }
  double ll=numerator - denominator;
  log.trace(String.format(""String_Node_Str"",ll,numerator,denominator));
  log.trace(String.format(""String_Node_Str"",numFullyClamped,fgLatPred.getFactors().size()));
  if (ll > MAX_LOG_LIKELIHOOD) {
    log.warn(""String_Node_Str"" + i + ""String_Node_Str""+ ll);
  }
  return ll * ex.getWeight();
}","/** 
 * Gets the marginal conditional log-likelihood of the i'th example for the given model parameters. We return: <p> \log p(y|x) = \log \sum_z p(y, z | x) </p> where y are the predicted variables, x are the observed variables, and z are the latent variables.
 * @param fgLat The factor graph with the predicted and observed variables clamped. 
 * @param infLat The inferencer for fgLat.
 * @param fgLatPred The factor graph with the observed variables clamped. 
 * @param infLatPred The inferencer for fgLatPred.
 * @param i The data example.
 * @param goldConfig The assignment to the predicted variables.
 * @param weight The weight of this training example.
 * @return The weighted CLL.
 */
public static double getValue(FactorGraph fgLat,FgInferencer infLat,FactorGraph fgLatPred,FgInferencer infLatPred,int i,VarConfig goldConfig,double weight){
  double numerator=infLat.getLogPartition();
  double denominator=infLatPred.getLogPartition();
  int numFullyClamped=0;
  for (int a=0; a < fgLatPred.getNumFactors(); a++) {
    Factor f=fgLatPred.getFactor(a);
    boolean isNumeratorClamped=fgLat.getFactor(a).getVars().size() == 0;
    boolean isDenominatorClamped=fgLatPred.getFactor(a).getVars().size() == 0;
    if (f instanceof GlobalFactor) {
      GlobalFactor gf=(GlobalFactor)f;
      if (isNumeratorClamped) {
        VarConfig facConfig=goldConfig.getIntersection(fgLatPred.getFactor(a).getVars());
        numerator+=gf.getLogUnormalizedScore(facConfig);
        numFullyClamped++;
        if (isDenominatorClamped) {
          denominator+=gf.getLogUnormalizedScore(facConfig);
        }
      }
    }
 else {
      if (isNumeratorClamped) {
        int facConfig=goldConfig.getConfigIndexOfSubset(f.getVars());
        numerator+=f.getLogUnormalizedScore(facConfig);
        numFullyClamped++;
        if (isDenominatorClamped) {
          denominator+=f.getLogUnormalizedScore(facConfig);
        }
      }
    }
  }
  double ll=numerator - denominator;
  log.trace(String.format(""String_Node_Str"",ll,numerator,denominator));
  log.trace(String.format(""String_Node_Str"",numFullyClamped,fgLatPred.getFactors().size()));
  if (ll > MAX_LOG_LIKELIHOOD) {
    log.warn(""String_Node_Str"" + i + ""String_Node_Str""+ ll);
  }
  return ll * weight;
}",0.8946767192140735
131192,"/** 
 * Computes the expected feature counts for a factor graph, and adds them to the gradient after scaling them.
 * @param ex 
 * @param inferencer The inferencer for a clamped factor graph, which has already been run.
 * @param multiplier The value which the expected features will be multiplied by.
 * @param gradient The OUTPUT gradient vector to which the scaled expected features will be added.
 * @param factorId The id of the factor.
 * @param featCache The feature cache for the clamped factor graph, on which the inferencer was run.
 */
private void addExpectedFeatureCounts(FactorGraph fg,LFgExample ex,FgInferencer inferencer,double multiplier,IFgModel gradient){
  for (int factorId=0; factorId < fg.getNumFactors(); factorId++) {
    Factor f=fg.getFactor(factorId);
    if (f instanceof GlobalFactor) {
      ((GlobalFactor)f).addExpectedFeatureCounts(gradient,multiplier,inferencer,factorId);
    }
 else {
      VarTensor marg=inferencer.getMarginalsForFactorId(factorId);
      f.addExpectedFeatureCounts(gradient,marg,multiplier);
    }
  }
}","/** 
 * Computes the expected feature counts for a factor graph, and adds them to the gradient after scaling them.
 * @param fg The factor graph.
 * @param inferencer The inferencer for a clamped factor graph, which has already been run.
 * @param multiplier The value which the expected features will be multiplied by.
 * @param gradient The OUTPUT gradient vector to which the scaled expected features will be added.
 */
private static void addExpectedFeatureCounts(FactorGraph fg,FgInferencer inferencer,double multiplier,IFgModel gradient){
  for (int factorId=0; factorId < fg.getNumFactors(); factorId++) {
    Factor f=fg.getFactor(factorId);
    if (f instanceof GlobalFactor) {
      ((GlobalFactor)f).addExpectedFeatureCounts(gradient,multiplier,inferencer,factorId);
    }
 else {
      VarTensor marg=inferencer.getMarginalsForFactorId(factorId);
      f.addExpectedFeatureCounts(gradient,marg,multiplier);
    }
  }
}",0.9066265060240964
131193,"public void accumWithException(FgModel model,int i,Accumulator ac){
  Timer t0=new Timer();
  t0.start();
  LFgExample ex=data.get(i);
  Timer t=new Timer();
  t.reset();
  t.start();
  FactorGraph fgLat=ex.getFgLat();
  FactorGraph fgLatPred=ex.getFgLatPred();
  fgLat.updateFromModel(model);
  fgLatPred.updateFromModel(model);
  t.stop();
  updTimer.add(t);
  t.reset();
  t.start();
  FgInferencer infLat=infFactory.getInferencer(fgLat);
  FgInferencer infLatPred=infFactory.getInferencer(fgLatPred);
  t.stop();
  infTimer.add(t);
  t.reset();
  t.start();
  infLat.run();
  infLatPred.run();
  t.stop();
  infTimer.add(t);
  if (ac.accumValue) {
    t.reset();
    t.start();
    if (useMseForValue) {
      ac.value+=-getMseLoss(ex,infLatPred);
    }
 else {
      ac.value+=getValue(ex,fgLat,infLat,fgLatPred,infLatPred,i);
    }
    t.stop();
    valTimer.add(t);
  }
  if (ac.accumGradient) {
    t.reset();
    t.start();
    addGradient(ex,ac.getGradient(),fgLat,infLat,fgLatPred,infLatPred);
    t.stop();
    gradTimer.add(t);
  }
  if (ac.accumWeight) {
    ac.weight+=ex.getWeight();
  }
  if (ac.accumLoss) {
  }
  t0.stop();
  tot.add(t0);
}","public void accumWithException(FgModel model,int i,Accumulator ac){
  Timer t0=new Timer();
  t0.start();
  LFgExample ex=data.get(i);
  Timer t=new Timer();
  t.reset();
  t.start();
  FactorGraph fgLat=ex.getFgLat();
  FactorGraph fgLatPred=ex.getFgLatPred();
  fgLat.updateFromModel(model);
  fgLatPred.updateFromModel(model);
  t.stop();
  updTimer.add(t);
  t.reset();
  t.start();
  FgInferencer infLat=infFactory.getInferencer(fgLat);
  FgInferencer infLatPred=infFactory.getInferencer(fgLatPred);
  t.stop();
  infTimer.add(t);
  t.reset();
  t.start();
  infLat.run();
  infLatPred.run();
  t.stop();
  infTimer.add(t);
  if (ac.accumValue) {
    t.reset();
    t.start();
    if (useMseForValue) {
      ac.value+=-getMseLoss(infLatPred,ex.getGoldConfig(),ex.getWeight());
    }
 else {
      ac.value+=getValue(fgLat,infLat,fgLatPred,infLatPred,i,ex.getGoldConfig(),ex.getWeight());
    }
    t.stop();
    valTimer.add(t);
  }
  if (ac.accumGradient) {
    t.reset();
    t.start();
    addGradient(fgLat,infLat,fgLatPred,infLatPred,ex.getWeight(),ac.getGradient());
    t.stop();
    gradTimer.add(t);
  }
  if (ac.accumWeight) {
    ac.weight+=ex.getWeight();
  }
  if (ac.accumLoss) {
  }
  t0.stop();
  tot.add(t0);
}",0.8202341137123745
131194,"/** 
 * Adds the gradient of the marginal conditional log-likelihood for a particular example to the gradient vector.
 * @param gradient The gradient vector to which this example's contributionis added.
 * @param fgLat The factor graph with the predicted and observed variables clamped. 
 * @param infLat The inferencer for fgLat.
 * @param fgLatPred The factor graph with the observed variables clamped. 
 * @param infLatPred The inferencer for fgLatPred.
 * @param i The data example.
 */
public void addGradient(LFgExample ex,IFgModel gradient,FactorGraph fgLat,FgInferencer infLat,FactorGraph fgLatPred,FgInferencer infLatPred){
  addExpectedFeatureCounts(fgLat,ex,infLat,1.0 * ex.getWeight(),gradient);
  addExpectedFeatureCounts(fgLatPred,ex,infLatPred,-1.0 * ex.getWeight(),gradient);
}","/** 
 * Adds the gradient of the marginal conditional log-likelihood for a particular example to the gradient vector.
 * @param fgLat The factor graph with the predicted and observed variables clamped. 
 * @param infLat The inferencer for fgLat.
 * @param fgLatPred The factor graph with the observed variables clamped. 
 * @param infLatPred The inferencer for fgLatPred.
 * @param weight The weight of the training example.
 * @param gradient The OUTPUT gradient vector to which this example's contributionis added.
 */
private static void addGradient(FactorGraph fgLat,FgInferencer infLat,FactorGraph fgLatPred,FgInferencer infLatPred,double weight,IFgModel gradient){
  addExpectedFeatureCounts(fgLat,infLat,1.0 * weight,gradient);
  addExpectedFeatureCounts(fgLatPred,infLatPred,-1.0 * weight,gradient);
}",0.4269662921348314
131195,"/** 
 * Gets the ""expected"" feature counts. 
 */
public FeatureVector getExpectedFeatureCounts(FgModel model,double[] params){
  model.updateModelFromDoubles(params);
  FgModel feats=model.getDenseCopy();
  feats.zero();
  for (int i=0; i < data.size(); i++) {
    LFgExample ex=data.get(i);
    FactorGraph fgLatPred=ex.getFgLatPred();
    fgLatPred.updateFromModel(model);
    FgInferencer infLatPred=infFactory.getInferencer(fgLatPred);
    infLatPred.run();
    addExpectedFeatureCounts(fgLatPred,ex,infLatPred,1.0 * ex.getWeight(),feats);
  }
  double[] f=new double[model.getNumParams()];
  feats.updateDoublesFromModel(f);
  return new FeatureVector(f);
}","/** 
 * Gets the ""expected"" feature counts. 
 */
public FeatureVector getExpectedFeatureCounts(FgModel model,double[] params){
  model.updateModelFromDoubles(params);
  FgModel feats=model.getDenseCopy();
  feats.zero();
  for (int i=0; i < data.size(); i++) {
    LFgExample ex=data.get(i);
    FactorGraph fgLatPred=ex.getFgLatPred();
    fgLatPred.updateFromModel(model);
    FgInferencer infLatPred=infFactory.getInferencer(fgLatPred);
    infLatPred.run();
    addExpectedFeatureCounts(fgLatPred,infLatPred,1.0 * ex.getWeight(),feats);
  }
  double[] f=new double[model.getNumParams()];
  feats.updateDoublesFromModel(f);
  return new FeatureVector(f);
}",0.9977289931869796
131196,"private double getMseLoss(LFgExample ex,FgInferencer infLatPred){
  MseMarginalEvaluator mse=new MseMarginalEvaluator();
  return mse.evaluate(ex.getGoldConfig(),infLatPred);
}","/** 
 * Gets the mean-squared error of the i'th example for the given model parameters.
 * @param infLatPred The inferencer for fgLatPred.
 * @param goldConfig The assignment to the predicted variables.
 * @param weight The weight of this training example.
 * @return The weighted MSE.
 */
private static double getMseLoss(FgInferencer infLatPred,VarConfig goldConfig,double weight){
  MseMarginalEvaluator mse=new MseMarginalEvaluator();
  return mse.evaluate(goldConfig,infLatPred) * weight;
}",0.3278688524590163
131197,"/** 
 * Gets the ""observed"" feature counts. 
 */
public FeatureVector getObservedFeatureCounts(FgModel model,double[] params){
  model.updateModelFromDoubles(params);
  FgModel feats=model.getDenseCopy();
  feats.zero();
  for (int i=0; i < data.size(); i++) {
    LFgExample ex=data.get(i);
    FactorGraph fgLat=ex.getFgLat();
    fgLat.updateFromModel(model);
    FgInferencer infLat=infFactory.getInferencer(fgLat);
    infLat.run();
    addExpectedFeatureCounts(fgLat,ex,infLat,1.0 * ex.getWeight(),feats);
  }
  double[] f=new double[model.getNumParams()];
  feats.updateDoublesFromModel(f);
  return new FeatureVector(f);
}","/** 
 * Gets the ""observed"" feature counts. 
 */
public FeatureVector getObservedFeatureCounts(FgModel model,double[] params){
  model.updateModelFromDoubles(params);
  FgModel feats=model.getDenseCopy();
  feats.zero();
  for (int i=0; i < data.size(); i++) {
    LFgExample ex=data.get(i);
    FactorGraph fgLat=ex.getFgLat();
    fgLat.updateFromModel(model);
    FgInferencer infLat=infFactory.getInferencer(fgLat);
    infLat.run();
    addExpectedFeatureCounts(fgLat,infLat,1.0 * ex.getWeight(),feats);
  }
  double[] f=new double[model.getNumParams()];
  feats.updateDoublesFromModel(f);
  return new FeatureVector(f);
}",0.9976133651551312
131198,"/** 
 * Increments the current state of \a forVars (prefix) and returns linear index of the current state of indexVars. 
 */
public int next(){
  int curIndex=_index;
  if (_index >= 0) {
    int i=0;
    while (i < _state.length) {
      _index+=_sum[i];
      if (++_state[i] < _ranges[i])       break;
      _index-=_sum[i] * _ranges[i];
      _state[i]=0;
      i++;
    }
    if (i == _state.length)     _index=-1;
  }
  return curIndex;
}","/** 
 * Increments the current state of \a forVars (prefix) and returns linear index of the current state of indexVars. 
 */
public int next(){
  int curIndex=_index;
  if (_index >= 0) {
    int i=_state.length - 1;
    while (i >= 0) {
      _index+=_sum[i];
      if (++_state[i] < _ranges[i])       break;
      _index-=_sum[i] * _ranges[i];
      _state[i]=0;
      i--;
    }
    if (i == -1)     _index=-1;
  }
  return curIndex;
}",0.90702947845805
131199,"/** 
 * Construct IndexFor object from \a indexVars and \a forVars. 
 */
public IndexFor(final VarSet indexVars,final VarSet forVars){
  long sum=1;
  _state=new int[forVars.size()];
  _ranges=new int[forVars.size()];
  _sum=new long[forVars.size()];
  int cur=0;
  Iterator<Var> jIter=forVars.iterator();
  Iterator<Var> iIter=indexVars.iterator();
  Var j=jIter.hasNext() ? jIter.next() : null;
  for (Var i=iIter.hasNext() ? iIter.next() : null; i != null; i=iIter.hasNext() ? iIter.next() : null) {
    for (; j != null && j.compareTo(i) <= 0; j=jIter.hasNext() ? jIter.next() : null) {
      _ranges[cur]=j.getNumStates();
      _sum[cur]=(i.equals(j)) ? sum : 0;
      cur++;
    }
    sum*=i.getNumStates();
  }
  for (; j != null; j=jIter.hasNext() ? jIter.next() : null) {
    _ranges[cur]=j.getNumStates();
    _sum[cur]=0l;
    cur++;
  }
  _index=0;
  assert(cur == _state.length);
}","/** 
 * Construct IndexFor object from \a indexVars and \a forVars. 
 */
public IndexFor(final VarSet indexVars,final VarSet forVars){
  long sum=1;
  _state=new int[forVars.size()];
  _ranges=new int[forVars.size()];
  _sum=new long[forVars.size()];
  for (int ii=0; ii < indexVars.size(); ii++) {
    Var i=indexVars.get(ii);
    sum*=i.getNumStates();
  }
  int cur=0;
  int jj=0;
  for (int ii=0; ii < indexVars.size(); ii++) {
    Var i=indexVars.get(ii);
    sum/=i.getNumStates();
    for (; jj < forVars.size() && forVars.get(jj).compareTo(i) <= 0; jj++) {
      Var j=forVars.get(jj);
      _ranges[cur]=j.getNumStates();
      _sum[cur]=(i.equals(j)) ? sum : 0;
      cur++;
    }
  }
  for (; jj < forVars.size(); jj++) {
    Var j=forVars.get(jj);
    _ranges[cur]=j.getNumStates();
    _sum[cur]=0l;
    cur++;
  }
  _index=0;
  assert(cur == _state.length);
}",0.4796380090497738
131200,"/** 
 * Gets the index of the configuration of the variables where all those in config  have the specified value, and all other variables in vars have the zero state.
 * @param vars The variable set over which to iterate.
 * @param config An assignment to a subset of vars.
 * @return The configuration index.
 */
public static int getConfigIndex(VarSet vars,VarConfig config){
  int configIndex=0;
  int numStatesProd=1;
  for (  Var var : vars) {
    int state=config.getState(var,0);
    configIndex+=state * numStatesProd;
    numStatesProd*=var.getNumStates();
  }
  return configIndex;
}","/** 
 * Gets the index of the configuration of the variables where all those in config  have the specified value, and all other variables in vars have the zero state.
 * @param vars The variable set over which to iterate.
 * @param config An assignment to a subset of vars.
 * @return The configuration index.
 */
public static int getConfigIndex(VarSet vars,VarConfig config){
  int configIndex=0;
  int numStatesProd=1;
  for (int v=vars.size() - 1; v >= 0; v--) {
    Var var=vars.get(v);
    int state=config.getState(var,0);
    configIndex+=state * numStatesProd;
    numStatesProd*=var.getNumStates();
  }
  return configIndex;
}",0.950366151342555
131201,"/** 
 * Gets the index of this configuration for the given variable set. This is used to provide a unique index for each setting of the the variables in a VarSet.
 */
public int getConfigIndexOfSubset(VarSet vars){
  int configIndex=0;
  int numStatesProd=1;
  for (  Var var : vars) {
    int state=config.get(var);
    configIndex+=state * numStatesProd;
    numStatesProd*=var.getNumStates();
    if (numStatesProd <= 0) {
      throw new IllegalStateException(""String_Node_Str"" + numStatesProd);
    }
  }
  return configIndex;
}","/** 
 * Gets the index of this configuration for the given variable set. This is used to provide a unique index for each setting of the the variables in a VarSet.
 */
public int getConfigIndexOfSubset(VarSet vars){
  int configIndex=0;
  int numStatesProd=1;
  for (int v=vars.size() - 1; v >= 0; v--) {
    Var var=vars.get(v);
    int state=config.get(var);
    configIndex+=state * numStatesProd;
    numStatesProd*=var.getNumStates();
    if (numStatesProd <= 0) {
      throw new IllegalStateException(""String_Node_Str"" + numStatesProd);
    }
  }
  return configIndex;
}",0.9431920649233544
131202,"/** 
 * Returns a string representation of the VarTensor, which (optionally) excludes zero-valued rows. 
 */
public String toString(boolean sparse){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (  Var var : vars) {
    String name=var.getName();
    name=name.substring(Math.max(0,name.length() - 5));
    sb.append(String.format(""String_Node_Str"",name));
  }
  sb.append(String.format(""String_Node_Str"",""String_Node_Str""));
  for (int c=0; c < vars.calcNumConfigs(); c++) {
    if (!sparse || values[c] != 0.0) {
      int[] states=vars.getVarConfigAsArray(c);
      for (      int state : states) {
        sb.append(String.format(""String_Node_Str"",state));
      }
      sb.append(String.format(""String_Node_Str"",values[c]));
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","/** 
 * Returns a string representation of the VarTensor, which (optionally) excludes zero-valued rows. 
 */
public String toString(boolean sparse){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (  Var var : vars) {
    String name=var.getName();
    name=name.substring(Math.max(0,name.length() - 5));
    sb.append(String.format(""String_Node_Str"",name));
  }
  sb.append(String.format(""String_Node_Str"",""String_Node_Str""));
  for (int c=0; c < vars.calcNumConfigs(); c++) {
    if (!sparse || values[c] != 0.0) {
      int[] states=vars.getVarConfigAsArray(c);
      for (int i=0; i < states.length; i++) {
        int state=states[i];
        Var v=vars.get(i);
        if (v.getStateNames() != null) {
          sb.append(String.format(""String_Node_Str"",v.getStateNames().get(state)));
        }
 else {
          sb.append(String.format(""String_Node_Str"",state));
        }
      }
      sb.append(String.format(""String_Node_Str"",values[c]));
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.849680170575693
131203,"@Test public void testGlobalExplicitFactor() throws IOException {
  FactorGraph fg=getThreeConnectedComponentsFactorGraph();
  VarSet allVars=new VarSet(fg.getVars().toArray(new Var[0]));
  ExplicitFactor gf=new GlobalExplicitFactor(allVars);
  gf.setValue(0,2);
  gf.setValue(1,3);
  gf.setValue(2,5);
  gf.setValue(3,7);
  gf.setValue(4,11);
  gf.setValue(5,15);
  gf.setValue(6,19);
  gf.setValue(7,23);
  gf.convertRealToLog();
  fg.addFactor(gf);
  Algebra s=LogSemiring.LOG_SEMIRING;
  BruteForceInferencer bf=new BruteForceInferencer(fg,s);
  bf.run();
  ErmaBp bp=runDefaultBpForAcyclic(s,fg);
  System.out.println(bp.isConverged());
  assertEqualMarginals(fg,bf,bp);
}","@Test public void testGlobalExplicitFactor() throws IOException {
  FactorGraph fg=getThreeConnectedComponentsFactorGraph();
  VarSet allVars=new VarSet(fg.getVars().toArray(new Var[0]));
  ExplicitFactor gf=new GlobalExplicitFactor(allVars);
  gf.setValue(0,2);
  gf.setValue(1,3);
  gf.setValue(2,5);
  gf.setValue(3,7);
  gf.setValue(4,11);
  gf.setValue(5,15);
  gf.setValue(6,19);
  gf.setValue(7,23);
  gf.convertRealToLog();
  fg.addFactor(gf);
  Algebra s=LogSemiring.LOG_SEMIRING;
  BruteForceInferencer bf=new BruteForceInferencer(fg,s);
  bf.run();
  ErmaBp bp=runDefaultBpForAcyclic(s,fg);
  System.out.println(bp.isConverged());
  assertEqualMarginals(fg,bf,bp,1e-12);
}",0.9955882352941176
131204,"public void testPartitionWithAdditionalVariableHelper(Algebra s,boolean normalizeMessages){
  double[] root=new double[]{1,2};
  double[][] child=new double[][]{{0,3},{4,0}};
  FgAndLinks fgl=getFgl(root,child);
  FactorGraph fg=fgl.fg;
  LinkVar[] rootVars=fgl.rootVars;
  LinkVar[][] childVars=fgl.childVars;
  int n=fgl.n;
  Var roleVar=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  ExplicitFactor roleFac=new ExplicitFactor(new VarSet(roleVar,childVars[0][1]));
  roleFac.setValue(0,2);
  roleFac.setValue(1,3);
  roleFac.setValue(2,5);
  roleFac.setValue(3,7);
  System.out.println(roleFac);
  roleFac.convertRealToLog();
  fg.addFactor(roleFac);
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.maxIterations=1;
  prm.s=s;
  prm.schedule=BpScheduleType.TREE_LIKE;
  prm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  prm.normalizeMessages=normalizeMessages;
  ErmaBp bp=new ErmaBp(fg,prm);
  bp.run();
  BfsMpSchedule schedule=new BfsMpSchedule(fg);
  System.out.println();
  for (  Object edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        System.out.format(""String_Node_Str"",i,j,getExpectedCount(bp,rootVars,childVars,i,j));
      }
    }
  }
  double Z=3 * 3 + 3 * 7 + 8 * 2 + 8 * 5;
  assertEquals(Z,bp.getPartition(),1e-3);
  assertEquals((3 * 3 + 3 * 7) / Z,getExpectedCount(bp,rootVars,childVars,-1,0),1e-3);
  assertEquals((8 * 2 + 8 * 5) / Z,getExpectedCount(bp,rootVars,childVars,1,0),1e-3);
  BruteForceInferencer bf=new BruteForceInferencer(fg,s);
  bf.run();
  ErmaBpForwardTest.assertEqualMarginals(fg,bf,bp,1e-10);
}","public void testPartitionWithAdditionalVariableHelper(Algebra s,boolean normalizeMessages){
  double[] root=new double[]{1,2};
  double[][] child=new double[][]{{0,3},{4,0}};
  FgAndLinks fgl=getFgl(root,child);
  FactorGraph fg=fgl.fg;
  LinkVar[] rootVars=fgl.rootVars;
  LinkVar[][] childVars=fgl.childVars;
  int n=fgl.n;
  Var roleVar=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  ExplicitFactor roleFac=new ExplicitFactor(new VarSet(roleVar,childVars[0][1]));
  roleFac.setValue(0,2);
  roleFac.setValue(1,5);
  roleFac.setValue(2,3);
  roleFac.setValue(3,7);
  System.out.println(roleFac);
  roleFac.convertRealToLog();
  fg.addFactor(roleFac);
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.maxIterations=1;
  prm.s=s;
  prm.schedule=BpScheduleType.TREE_LIKE;
  prm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  prm.normalizeMessages=normalizeMessages;
  ErmaBp bp=new ErmaBp(fg,prm);
  bp.run();
  BfsMpSchedule schedule=new BfsMpSchedule(fg);
  System.out.println();
  for (  Object edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        System.out.format(""String_Node_Str"",i,j,getExpectedCount(bp,rootVars,childVars,i,j));
      }
    }
  }
  double Z=3 * 3 + 3 * 7 + 8 * 2 + 8 * 5;
  assertEquals(Z,bp.getPartition(),1e-3);
  assertEquals((3 * 3 + 3 * 7) / Z,getExpectedCount(bp,rootVars,childVars,-1,0),1e-3);
  assertEquals((8 * 2 + 8 * 5) / Z,getExpectedCount(bp,rootVars,childVars,1,0),1e-3);
  BruteForceInferencer bf=new BruteForceInferencer(fg,s);
  bf.run();
  ErmaBpForwardTest.assertEqualMarginals(fg,bf,bp,1e-10);
}",0.985414235705951
131205,"@Test public void testReadSimple() throws IOException {
  FactorGraph fg=readSimpleFg();
  assertEquals(2,fg.getNumFactors());
  assertEquals(3,fg.getNumVars());
}","@Test public void testReadSimple() throws IOException {
  FactorGraph fg=readSimpleFg();
  assertEquals(2,fg.getNumFactors());
  assertEquals(3,fg.getNumVars());
  System.out.println(fg);
  for (  Factor f : fg.getFactors()) {
    VarTensor vt=BruteForceInferencer.safeNewVarTensor(RealAlgebra.REAL_ALGEBRA,f);
    System.out.println(vt);
  }
  VarTensor vt0=BruteForceInferencer.safeNewVarTensor(RealAlgebra.REAL_ALGEBRA,fg.getFactors().get(0));
  VarTensor vt1=BruteForceInferencer.safeNewVarTensor(RealAlgebra.REAL_ALGEBRA,fg.getFactors().get(1));
  assertEquals(""String_Node_Str"",vt0.getVars().get(0).getName());
  assertEquals(""String_Node_Str"",vt0.getVars().get(1).getName());
  assertEquals(""String_Node_Str"",vt0.getVars().get(2).getName());
  VarConfig vc0=new VarConfig();
  vc0.put(vt0.getVars().get(0),""String_Node_Str"");
  vc0.put(vt0.getVars().get(1),""String_Node_Str"");
  vc0.put(vt0.getVars().get(2),""String_Node_Str"");
  assertEquals(0.8,vt0.getValue(vc0.getConfigIndex()),1e-13);
  VarConfig vc1=new VarConfig();
  vc1.put(vt1.getVars().get(0),""String_Node_Str"");
  vc1.put(vt1.getVars().get(1),""String_Node_Str"");
  assertEquals(0.6,vt1.getValue(vc1.getConfigIndex()),1e-13);
}",0.2400589101620029
131206,"@Test public void testOnSimpleProb() throws IOException {
  Algebra s=RealAlgebra.REAL_ALGEBRA;
  FactorGraph fg=readSimpleFg();
  BruteForceInferencer bf=new BruteForceInferencer(fg,s);
  testInfOnSimpleGraph(fg,bf);
}","/** 
 * VarTensor [ A     B     C  |  value YY   Yes   Yes  |  0.800000 YY   Yes    No  |  0.200000 YY    No   Yes  |  0.500000 YY    No    No  |  0.500000 NN   Yes   Yes  |  0.600000 NN   Yes    No  |  0.400000 NN    No   Yes  |  0.100000 NN    No    No  |  0.900000 ] VarTensor [ A     B  |  value YY   Yes  |  0.600000 YY    No  |  0.400000 NN   Yes  |  0.150000 NN    No  |  0.850000 ] Current  joint:  VarTensor [ A     B     C  |  value YY   Yes   Yes  |  0.480000 YY   Yes    No  |  0.120000 YY    No   Yes  |  0.200000 YY    No    No  |  0.200000 NN   Yes   Yes  |  0.0900000 NN   Yes    No  |  0.0600000 NN    No   Yes  |  0.0850000 NN    No    No  |  0.765000 ]
 * @throws IOException
 */
@Test public void testOnSimpleProb() throws IOException {
  Algebra s=RealAlgebra.REAL_ALGEBRA;
  FactorGraph fg=readSimpleFg();
  BruteForceInferencer bf=new BruteForceInferencer(fg,s);
  bf.run();
  System.out.println(""String_Node_Str"" + bf.getJointFactor());
  testInfOnSimpleGraph(fg,bf);
}",0.3613861386138614
131207,"public static void testInfOnLinearChainGraph(FactorGraph fg,FgInferencer bp){
  bp.run();
  VarTensor marg;
  double[] goldMarg;
  marg=bp.getMarginals(fg.getVar(0));
  goldMarg=new double[]{0.079,0.920};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-2);
  marg=bp.getLogMarginals(fg.getVar(0));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-2);
  marg=bp.getMarginals(fg.getFactor(3));
  goldMarg=new double[]{0.013146806000337095,0.1774818810045508,0.06607112759143771,0.7433001854036744};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-4);
  marg=bp.getLogMarginals(fg.getFactor(3));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-4);
  double goldPartition=0.5932;
  assertEquals(goldPartition,bp.getPartition(),1e-2);
  assertEquals(FastMath.log(goldPartition),bp.getLogPartition(),1e-2);
}","public static void testInfOnLinearChainGraph(FactorGraph fg,FgInferencer bp){
  bp.run();
  VarTensor marg;
  double[] goldMarg;
  marg=bp.getMarginals(fg.getVar(0));
  goldMarg=new double[]{0.079,0.920};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-2);
  marg=bp.getLogMarginals(fg.getVar(0));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-2);
  marg=bp.getMarginals(fg.getFactor(3));
  goldMarg=new double[]{0.013146806000337095,0.06607112759143771,0.1774818810045508,0.7433001854036744};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-4);
  marg=bp.getLogMarginals(fg.getFactor(3));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-4);
  double goldPartition=0.5932;
  assertEquals(goldPartition,bp.getPartition(),1e-2);
  assertEquals(FastMath.log(goldPartition),bp.getLogPartition(),1e-2);
}",0.9785637727759914
131208,"public static void testInfOnSimpleGraph(FactorGraph fg,FgInferencer bp){
  bp.run();
  VarTensor marg;
  double[] goldMarg;
  assertEquals(""String_Node_Str"",fg.getVar(0).getName());
  marg=bp.getMarginals(fg.getVar(0));
  goldMarg=new double[]{0.5,0.5};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-2);
  marg=bp.getLogMarginals(fg.getVar(0));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-2);
  assertEquals(""String_Node_Str"",fg.getVar(1).getName());
  marg=bp.getMarginals(fg.getVar(1));
  goldMarg=new double[]{0.375,0.625};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  marg=bp.getLogMarginals(fg.getVar(1));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  assertEquals(""String_Node_Str"",fg.getVar(2).getName());
  marg=bp.getMarginals(fg.getVar(2));
  goldMarg=new double[]{0.4275,0.5725};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  marg=bp.getLogMarginals(fg.getVar(2));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  assertEquals(new VarSet(fg.getVar(0),fg.getVar(1)),fg.getFactor(1).getVars());
  marg=bp.getMarginals(fg.getFactor(1));
  goldMarg=new double[]{0.3,0.075,0.2,0.425};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  marg=bp.getLogMarginals(fg.getFactor(1));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  double goldPartition=2.00;
  assertEquals(goldPartition,bp.getPartition(),1e-2);
  assertEquals(FastMath.log(goldPartition),bp.getLogPartition(),1e-2);
}","public static void testInfOnSimpleGraph(FactorGraph fg,FgInferencer bp){
  bp.run();
  VarTensor marg;
  double[] goldMarg;
  assertEquals(""String_Node_Str"",fg.getVar(0).getName());
  marg=bp.getMarginals(fg.getVar(0));
  goldMarg=new double[]{0.5,0.5};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-2);
  marg=bp.getLogMarginals(fg.getVar(0));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-2);
  assertEquals(""String_Node_Str"",fg.getVar(1).getName());
  marg=bp.getMarginals(fg.getVar(1));
  goldMarg=new double[]{0.375,0.625};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  marg=bp.getLogMarginals(fg.getVar(1));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  assertEquals(""String_Node_Str"",fg.getVar(2).getName());
  marg=bp.getMarginals(fg.getVar(2));
  goldMarg=new double[]{0.4275,0.5725};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  marg=bp.getLogMarginals(fg.getVar(2));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  assertEquals(new VarSet(fg.getVar(0),fg.getVar(1)),fg.getFactor(1).getVars());
  marg=bp.getMarginals(fg.getFactor(1));
  goldMarg=new double[]{0.3,0.2,0.075,0.425};
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  marg=bp.getLogMarginals(fg.getFactor(1));
  goldMarg=DoubleArrays.getLog(goldMarg);
  JUnitUtils.assertArrayEquals(goldMarg,marg.getValues(),1e-3);
  double goldPartition=2.00;
  assertEquals(goldPartition,bp.getPartition(),1e-2);
  assertEquals(FastMath.log(goldPartition),bp.getLogPartition(),1e-2);
}",0.9976387249114522
131209,"/** 
 * Gets a simple linear chain CRF consisting of 3 words and 3 tags. 
 */
public static FactorGraph getLinearChainGraph(){
  FactorGraph fg=new FactorGraph();
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  Var t1=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  Var t2=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0));
  ExplicitFactor emit1=new ExplicitFactor(new VarSet(t1));
  ExplicitFactor emit2=new ExplicitFactor(new VarSet(t2));
  emit0.setValue(0,0.1);
  emit0.setValue(1,0.9);
  emit1.setValue(0,0.3);
  emit1.setValue(1,0.7);
  emit2.setValue(0,0.5);
  emit2.setValue(1,0.5);
  ExplicitFactor tran0=new ExplicitFactor(new VarSet(t0,t1));
  ExplicitFactor tran1=new ExplicitFactor(new VarSet(t1,t2));
  tran0.fill(1);
  tran0.setValue(0,0.2);
  tran0.setValue(1,0.3);
  tran0.setValue(2,0.4);
  tran0.setValue(3,0.5);
  tran1.fill(1);
  tran1.setValue(0,1.2);
  tran1.setValue(1,1.3);
  tran1.setValue(2,1.4);
  tran1.setValue(3,1.5);
  fg.addFactor(emit0);
  fg.addFactor(emit1);
  fg.addFactor(emit2);
  fg.addFactor(tran0);
  fg.addFactor(tran1);
  for (  Factor f : fg.getFactors()) {
    ((ExplicitFactor)f).convertRealToLog();
  }
  return fg;
}","/** 
 * Gets a simple linear chain CRF consisting of 3 words and 3 tags. 
 */
public static FactorGraph getLinearChainGraph(){
  FactorGraph fg=new FactorGraph();
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  Var t1=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  Var t2=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0));
  ExplicitFactor emit1=new ExplicitFactor(new VarSet(t1));
  ExplicitFactor emit2=new ExplicitFactor(new VarSet(t2));
  emit0.setValue(0,0.1);
  emit0.setValue(1,0.9);
  emit1.setValue(0,0.3);
  emit1.setValue(1,0.7);
  emit2.setValue(0,0.5);
  emit2.setValue(1,0.5);
  ExplicitFactor tran0=new ExplicitFactor(new VarSet(t0,t1));
  ExplicitFactor tran1=new ExplicitFactor(new VarSet(t1,t2));
  tran0.fill(1);
  tran0.setValue(0,0.2);
  tran0.setValue(1,0.4);
  tran0.setValue(2,0.3);
  tran0.setValue(3,0.5);
  tran1.fill(1);
  tran1.setValue(0,1.2);
  tran1.setValue(1,1.4);
  tran1.setValue(2,1.3);
  tran1.setValue(3,1.5);
  fg.addFactor(emit0);
  fg.addFactor(emit1);
  fg.addFactor(emit2);
  fg.addFactor(tran0);
  fg.addFactor(tran1);
  for (  Factor f : fg.getFactors()) {
    ((ExplicitFactor)f).convertRealToLog();
  }
  return fg;
}",0.8936
131210,"public static FgAndVars getLinearChainFgWithVars(){
  FactorGraph fg=new FactorGraph();
  Var w0=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var w1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var w2=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var t1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var t2=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0,w0));
  ExplicitFactor emit1=new ExplicitFactor(new VarSet(t1,w1));
  ExplicitFactor emit2=new ExplicitFactor(new VarSet(t2,w2));
  emit0.setValue(0,0.1);
  emit0.setValue(1,0.9);
  emit1.setValue(0,0.3);
  emit1.setValue(1,0.7);
  emit2.setValue(0,0.5);
  emit2.setValue(1,0.5);
  ExplicitFactor tran0=new ExplicitFactor(new VarSet(t0,t1));
  ExplicitFactor tran1=new ExplicitFactor(new VarSet(t1,t2));
  tran0.fill(1);
  tran0.setValue(0,0.2);
  tran0.setValue(1,0.3);
  tran0.setValue(2,0.4);
  tran0.setValue(3,0.5);
  tran1.fill(1);
  tran1.setValue(0,1.2);
  tran1.setValue(1,1.3);
  tran1.setValue(2,1.4);
  tran1.setValue(3,1.5);
  fg.addFactor(emit0);
  fg.addFactor(emit1);
  fg.addFactor(emit2);
  fg.addFactor(tran0);
  fg.addFactor(tran1);
  for (  Factor f : fg.getFactors()) {
    ((ExplicitFactor)f).convertRealToLog();
  }
  FgAndVars fgv=new FgAndVars();
  fgv.fg=fg;
  fgv.w0=w0;
  fgv.w1=w1;
  fgv.w2=w2;
  fgv.t0=t0;
  fgv.t1=t1;
  fgv.t2=t2;
  fgv.emit0=emit0;
  fgv.emit1=emit1;
  fgv.emit2=emit2;
  fgv.tran0=tran0;
  fgv.tran1=tran1;
  return fgv;
}","public static FgAndVars getLinearChainFgWithVars(){
  FactorGraph fg=new FactorGraph();
  Var w0=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var w1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var w2=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var t1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  Var t2=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0,w0));
  ExplicitFactor emit1=new ExplicitFactor(new VarSet(t1,w1));
  ExplicitFactor emit2=new ExplicitFactor(new VarSet(t2,w2));
  emit0.setValue(0,0.1);
  emit0.setValue(1,0.9);
  emit1.setValue(0,0.3);
  emit1.setValue(1,0.7);
  emit2.setValue(0,0.5);
  emit2.setValue(1,0.5);
  ExplicitFactor tran0=new ExplicitFactor(new VarSet(t0,t1));
  ExplicitFactor tran1=new ExplicitFactor(new VarSet(t1,t2));
  tran0.fill(1);
  tran0.setValue(0,0.2);
  tran0.setValue(1,0.4);
  tran0.setValue(2,0.3);
  tran0.setValue(3,0.5);
  tran1.fill(1);
  tran1.setValue(0,1.2);
  tran1.setValue(1,1.4);
  tran1.setValue(2,1.3);
  tran1.setValue(3,1.5);
  fg.addFactor(emit0);
  fg.addFactor(emit1);
  fg.addFactor(emit2);
  fg.addFactor(tran0);
  fg.addFactor(tran1);
  for (  Factor f : fg.getFactors()) {
    ((ExplicitFactor)f).convertRealToLog();
  }
  FgAndVars fgv=new FgAndVars();
  fgv.fg=fg;
  fgv.w0=w0;
  fgv.w1=w1;
  fgv.w2=w2;
  fgv.t0=t0;
  fgv.t1=t1;
  fgv.t2=t2;
  fgv.emit0=emit0;
  fgv.emit1=emit1;
  fgv.emit2=emit2;
  fgv.tran0=tran0;
  fgv.tran1=tran1;
  return fgv;
}",0.7031082529474812
131211,"@Test public void testGetState(){
  Var v0=getVar(0,2);
  Var v1=getVar(1,3);
  Var v2=getVar(2,5);
  VarSet vars1=new VarSet();
  vars1.add(v0);
  vars1.add(v1);
  vars1.add(v2);
  VarSet vars2=new VarSet();
  vars2.add(v1);
  vars2.add(v2);
  IndexFor iter=new IndexFor(vars1,vars2);
  while (iter.hasNext()) {
    System.out.println(Arrays.toString(iter.getState()));
    iter.next();
  }
}","@Test public void testGetState(){
  Var v0=getVar(0,2);
  Var v1=getVar(1,3);
  Var v2=getVar(2,5);
  Var v3=getVar(3,7);
  VarSet vars1=new VarSet();
  vars1.add(v0);
  vars1.add(v1);
  vars1.add(v2);
  vars1.add(v3);
  VarSet vars2=new VarSet();
  vars2.add(v1);
  vars2.add(v3);
  IndexFor iter=new IndexFor(vars1,vars2);
  while (iter.hasNext()) {
    System.out.println(Arrays.toString(iter.getState()));
    System.out.println(iter.next());
  }
  iter.reset();
  for (int b=0; b < 3; b++) {
    for (int d=0; d < 7; d++) {
      assertTrue(iter.hasNext());
      System.out.println(Arrays.toString(iter.getState()));
      Assert.assertArrayEquals(new int[]{b,d},iter.getState());
      int aa=0;
      int cc=0;
      assertEquals(aa * 3 * 5* 7 + b * 5 * 7 + cc * 7 + d,iter.next());
    }
  }
  assertFalse(iter.hasNext());
}",0.6394779771615008
131212,"/** 
 * this is the ""no-allocation"" version of the non-void method of the same name.
 */
public void getVarConfigAsArray(int configIndex,int[] putInto){
  if (putInto.length != this.size())   throw new IllegalArgumentException();
  int i=0;
  for (  Var var : this) {
    putInto[i++]=configIndex % var.getNumStates();
    configIndex/=var.getNumStates();
  }
}","/** 
 * this is the ""no-allocation"" version of the non-void method of the same name.
 */
public void getVarConfigAsArray(int configIndex,int[] putInto){
  if (putInto.length != this.size())   throw new IllegalArgumentException();
  int i=putInto.length - 1;
  for (int v=this.size() - 1; v >= 0; v--) {
    Var var=this.get(v);
    putInto[i--]=configIndex % var.getNumStates();
    configIndex/=var.getNumStates();
  }
}",0.8721227621483376
131213,"public NaryTree(String symbol,int start,int end,ArrayList<NaryTree> children,boolean isLexical){
  this.symbol=symbol;
  this.start=start;
  this.end=end;
  this.children=children;
  this.isLexical=isLexical;
  this.parent=null;
  for (  NaryTree child : children) {
    child.parent=this;
  }
}","public NaryTree(String symbol,int start,int end,ArrayList<NaryTree> children,boolean isLexical){
  this.symbol=symbol;
  this.start=start;
  this.end=end;
  this.children=children;
  this.isLexical=isLexical;
  this.parent=null;
  if (children != null) {
    for (    NaryTree child : children) {
      child.parent=this;
    }
  }
}",0.9331210191082804
131214,"/** 
 * Treats all the input modules as if they were concatenated into a long vector, and computes the size of that vector.
 */
public static int getOutputSize(List<? extends Module<? extends MVec>> mods){
  int totInDimension=0;
  for (  Module<?> mod : mods) {
    totInDimension+=mod.getOutput().size();
  }
  return totInDimension;
}","/** 
 * Treats all the input modules as if they were concatenated into a long vector, and computes the size of that vector.
 */
public static int getOutputSize(List<? extends Module<?>> mods){
  int totInDimension=0;
  for (  Module<?> mod : mods) {
    totInDimension+=mod.getOutput().size();
  }
  return totInDimension;
}",0.9803328290468988
131215,"/** 
 * Parses the command line arguments and sets any of public static fields annotated with @Opt that have been registered with this   {@link ArgParser} via {@link #registerClass(Class)}.
 */
public void parseArgs(String[] args) throws ParseException {
  CommandLine cmd=null;
  CommandLineParser parser=new PosixParser();
  cmd=parser.parse(options,args);
  fieldValueMap=new HashMap<>();
  try {
    for (    Option apacheOpt : optionFieldMap.keySet()) {
      Field field=optionFieldMap.get(apacheOpt);
      if (cmd.hasOption(apacheOpt.getLongOpt())) {
        String value=apacheOpt.hasArg() ? cmd.getOptionValue(apacheOpt.getLongOpt()) : ""String_Node_Str"";
        if (Modifier.isStatic(field.getModifiers())) {
          setStaticField(field,cmd.getOptionValue(apacheOpt.getLongOpt()));
        }
 else {
          fieldValueMap.put(field,value);
        }
      }
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Parses the command line arguments and sets any of public static fields annotated with @Opt that have been registered with this   {@link ArgParser} via {@link #registerClass(Class)}.
 */
public void parseArgs(String[] args) throws ParseException {
  CommandLine cmd=null;
  CommandLineParser parser=new PosixParser();
  cmd=parser.parse(options,args);
  fieldValueMap=new HashMap<>();
  try {
    for (    Option apacheOpt : optionFieldMap.keySet()) {
      Field field=optionFieldMap.get(apacheOpt);
      if (cmd.hasOption(apacheOpt.getLongOpt())) {
        String value=apacheOpt.hasArg() ? cmd.getOptionValue(apacheOpt.getLongOpt()) : ""String_Node_Str"";
        if (Modifier.isStatic(field.getModifiers())) {
          setStaticField(field,value);
        }
 else {
          fieldValueMap.put(field,value);
        }
      }
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.975092739798622
131216,"@Override public double evaluate(AnnoSentenceCollection predSents,AnnoSentenceCollection goldSents,String name){
  int numTot=0;
  int numIncorrect=0;
  for (int i=0; i < predSents.size(); i++) {
    AnnoSentence predSent=predSents.get(i);
    AnnoSentence goldSent=goldSents.get(i);
    for (int c=0; c < goldSent.size(); c++) {
      if (skipPunctuation && DepParseAccuracy.isPunctuation(goldSent.getWord(c))) {
        continue;
      }
      int p=goldSent.getParent(c);
      if (predSent.getDepEdgeMask().isPruned(p,c)) {
        numIncorrect++;
        break;
      }
    }
    numTot++;
  }
  int numCorrect=numTot - numIncorrect;
  log.info(String.format(""String_Node_Str"",name,numCorrect,numTot,(double)numCorrect / numTot));
  return numTot - numCorrect;
}","@Override public double evaluate(AnnoSentenceCollection predSents,AnnoSentenceCollection goldSents,String name){
  int numTot=0;
  int numIncorrect=0;
  for (int i=0; i < predSents.size(); i++) {
    AnnoSentence predSent=predSents.get(i);
    AnnoSentence goldSent=goldSents.get(i);
    for (int c=0; c < goldSent.size(); c++) {
      if (skipPunctuation && DepParseAccuracy.isPunctuation(goldSent.getWord(c))) {
        continue;
      }
      int p=goldSent.getParent(c);
      DepEdgeMask predMask=predSent.getDepEdgeMask();
      if (predMask != null && predMask.isPruned(p,c)) {
        numIncorrect++;
        break;
      }
    }
    numTot++;
  }
  int numCorrect=numTot - numIncorrect;
  log.info(String.format(""String_Node_Str"",name,numCorrect,numTot,(double)numCorrect / numTot));
  return numTot - numCorrect;
}",0.9428032683846638
131217,"@Override public Tensor forward(){
  Tensor mark=markIn.getOutput();
  Tensor left=leftIn.getOutput();
  Tensor right=rightIn.getOutput();
  Tensor.checkEqualSize(left,right);
  y=new Tensor(left);
  left.fill(s.zero());
  for (int c=0; c < y.size(); c++) {
    Tensor t=(mark.getValue(c) == s.zero()) ? left : right;
    y.setValue(c,t.getValue(c));
  }
  return y;
}","@Override public Tensor forward(){
  Tensor mark=markIn.getOutput();
  Tensor left=leftIn.getOutput();
  Tensor right=rightIn.getOutput();
  Tensor.checkEqualSize(left,right);
  y=new Tensor(left);
  y.fill(s.zero());
  for (int c=0; c < y.size(); c++) {
    Tensor t=(mark.getValue(c) == s.zero()) ? left : right;
    y.setValue(c,t.getValue(c));
  }
  return y;
}",0.9931787175989086
131218,"public double call(double v){
  assertEquals(y.get(),v,1e-13);
  y.decrement();
  return v;
}","public double call(double v){
  assertEquals(y.v,v,1e-13);
  y.v--;
  return v;
}",0.8850574712643678
131219,"@Test public void testUpdateDoublesAndModel(){
  int numParams=(3 * 2) * 2 + 2 * 1;
  FgModel model=new FgModel(numParams);
  final MutableInt x=new MutableInt(0);
  model.apply(new LambdaUnaryOpDouble(){
    public double call(    double v){
      x.increment();
      return x.get();
    }
  }
);
  double[] params=new double[model.getNumParams()];
  model.updateDoublesFromModel(params);
  JUnitUtils.assertArrayEquals(new double[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14},params,1e-13);
  DoubleSort.sortDesc(params);
  model.updateModelFromDoubles(params);
  final MutableInt y=new MutableInt(14);
  model.apply(new LambdaUnaryOpDouble(){
    public double call(    double v){
      assertEquals(y.get(),v,1e-13);
      y.decrement();
      return v;
    }
  }
);
}","@Test public void testUpdateDoublesAndModel(){
  int numParams=(3 * 2) * 2 + 2 * 1;
  FgModel model=new FgModel(numParams);
  final MutableInt x=new MutableInt(0);
  model.apply(new LambdaUnaryOpDouble(){
    public double call(    double v){
      x.v++;
      return x.v;
    }
  }
);
  double[] params=new double[model.getNumParams()];
  model.updateDoublesFromModel(params);
  JUnitUtils.assertArrayEquals(new double[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14},params,1e-13);
  DoubleSort.sortDesc(params);
  model.updateModelFromDoubles(params);
  final MutableInt y=new MutableInt(14);
  model.apply(new LambdaUnaryOpDouble(){
    public double call(    double v){
      assertEquals(y.v,v,1e-13);
      y.v--;
      return v;
    }
  }
);
}",0.9733688415446072
131220,"@Test public void testApply(){
  int numParams=(3 * 2) * 2 + 2 * 1;
  FgModel model=new FgModel(numParams);
  assertEquals(numParams,model.getNumParams());
  final MutableInt x=new MutableInt(0);
  model.apply(new LambdaUnaryOpDouble(){
    public double call(    double v){
      assertEquals(0.0,v,1e-13);
      x.increment();
      return 1.0;
    }
  }
);
  assertEquals(numParams,x.get());
  model.apply(new LambdaUnaryOpDouble(){
    public double call(    double v){
      assertEquals(1.0,v,1e-13);
      return 1.0;
    }
  }
);
}","@Test public void testApply(){
  int numParams=(3 * 2) * 2 + 2 * 1;
  FgModel model=new FgModel(numParams);
  assertEquals(numParams,model.getNumParams());
  final MutableInt x=new MutableInt(0);
  model.apply(new LambdaUnaryOpDouble(){
    public double call(    double v){
      assertEquals(0.0,v,1e-13);
      x.v++;
      return 1.0;
    }
  }
);
  assertEquals(numParams,x.v);
  model.apply(new LambdaUnaryOpDouble(){
    public double call(    double v){
      assertEquals(1.0,v,1e-13);
      return 1.0;
    }
  }
);
}",0.9812382739212008
131221,"private static VarSet createVarSet(int n,VarType type){
  VarSet vars=new VarSet();
  for (int i=0; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        String name=LinkVar.getDefaultName(i,j);
        vars.add(new LinkVar(type,name,i,j));
      }
    }
  }
  for (int j=0; j < n; j++) {
    String name=String.format(""String_Node_Str"",WallDepTreeNode.WALL_POSITION,j);
    vars.add(new LinkVar(type,name,WallDepTreeNode.WALL_POSITION,j));
  }
  return vars;
}","private static VarSet createVarSet(int n,VarType type){
  VarSet vars=new VarSet();
  for (int i=0; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        String name=LinkVar.getDefaultName(i,j);
        vars.add(new LinkVar(type,name,i,j));
      }
    }
  }
  for (int j=0; j < n; j++) {
    String name=String.format(""String_Node_Str"",ParentsArray.WALL_POSITION,j);
    vars.add(new LinkVar(type,name,ParentsArray.WALL_POSITION,j));
  }
  return vars;
}",0.9435146443514644
131222,"@Override public double getLogUnormalizedScore(VarConfig vc){
  LogSemiring s=Algebras.LOG_SEMIRING;
  if (!hasOneParentPerToken(n,vc)) {
    log.trace(""String_Node_Str"");
    return s.zero();
  }
  int[] parents=getParents(n,vc);
  if (!DepTree.isDepTree(parents,true,InsideOutsideDepParse.singleRoot)) {
    log.trace(""String_Node_Str"");
    return s.zero();
  }
  return s.one();
}","@Override public double getLogUnormalizedScore(VarConfig vc){
  LogSemiring s=Algebras.LOG_SEMIRING;
  if (!hasOneParentPerToken(n,vc)) {
    log.trace(""String_Node_Str"");
    return s.zero();
  }
  int[] parents=getParents(n,vc);
  if (!ParentsArray.isDepTree(parents,true,InsideOutsideDepParse.singleRoot)) {
    log.trace(""String_Node_Str"");
    return s.zero();
  }
  return s.one();
}",0.9754204398447608
131223,"private static VarSet createVarSet(int n,VarType type){
  VarSet vars=new VarSet();
  for (int i=0; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        String name=LinkVar.getDefaultName(i,j);
        vars.add(new LinkVar(type,name,i,j));
      }
    }
  }
  for (int j=0; j < n; j++) {
    String name=String.format(""String_Node_Str"",WallDepTreeNode.WALL_POSITION,j);
    vars.add(new LinkVar(type,name,WallDepTreeNode.WALL_POSITION,j));
  }
  return vars;
}","private static VarSet createVarSet(int n,VarType type){
  VarSet vars=new VarSet();
  for (int i=0; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        String name=LinkVar.getDefaultName(i,j);
        vars.add(new LinkVar(type,name,i,j));
      }
    }
  }
  for (int j=0; j < n; j++) {
    String name=String.format(""String_Node_Str"",ParentsArray.WALL_POSITION,j);
    vars.add(new LinkVar(type,name,ParentsArray.WALL_POSITION,j));
  }
  return vars;
}",0.9435146443514644
131224,"@Override public double getLogUnormalizedScore(VarConfig vc){
  LogSemiring s=Algebras.LOG_SEMIRING;
  if (!hasOneParentPerToken(n,vc)) {
    log.warn(""String_Node_Str"");
    return s.zero();
  }
  int[] parents=getParents(n,vc);
  if (!DepTree.isDepTree(parents,true,InsideOutsideDepParse.singleRoot)) {
    log.warn(""String_Node_Str"");
    return s.zero();
  }
  return s.one();
}","@Override public double getLogUnormalizedScore(VarConfig vc){
  LogSemiring s=Algebras.LOG_SEMIRING;
  if (!hasOneParentPerToken(n,vc)) {
    log.warn(""String_Node_Str"");
    return s.zero();
  }
  int[] parents=getParents(n,vc);
  if (!ParentsArray.isDepTree(parents,true,InsideOutsideDepParse.singleRoot)) {
    log.warn(""String_Node_Str"");
    return s.zero();
  }
  return s.one();
}",0.9752925877763328
131225,"@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>T[] copyOfArray(T[] orig){
  if (orig == null) {
    return null;
  }
  T[] clone=Arrays.copyOf(orig,orig.length);
  for (int v=0; v < clone.length; v++) {
    if (orig[v] != null) {
      clone[v]=(T)orig[v].copy();
    }
  }
  return clone;
}","@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>T[] copyOfArray(T[] orig){
  if (orig == null) {
    return null;
  }
  T[] clone=Arrays.copyOf(orig,orig.length);
  for (int v=0; v < clone.length; v++) {
    if (orig[v] != null) {
      MVec copy=orig[v].copy();
      if (!copy.getClass().equals(orig[v].getClass())) {
        throw new RuntimeException(orig[v].getClass() + ""String_Node_Str"" + ""String_Node_Str""+ copy.getClass());
      }
      clone[v]=(T)copy;
    }
  }
  return clone;
}",0.7226277372262774
131226,"@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>T[] copyAndConvertAlgebraOfArray(T[] orig,Algebra newS){
  if (orig == null) {
    return null;
  }
  T[] clone=Arrays.copyOf(orig,orig.length);
  for (int v=0; v < clone.length; v++) {
    if (orig[v] != null) {
      clone[v]=(T)orig[v].copyAndConvertAlgebra(newS);
    }
  }
  return clone;
}","@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>T[] copyAndConvertAlgebraOfArray(T[] orig,Algebra newS){
  if (orig == null) {
    return null;
  }
  T[] clone=Arrays.copyOf(orig,orig.length);
  for (int v=0; v < clone.length; v++) {
    if (orig[v] != null) {
      MVec copy=orig[v].copyAndConvertAlgebra(newS);
      if (!copy.getClass().equals(orig[v].getClass())) {
        throw new RuntimeException(orig[v].getClass() + ""String_Node_Str"" + ""String_Node_Str""+ copy.getClass());
      }
      clone[v]=(T)copy;
    }
  }
  return clone;
}",0.7272727272727273
131227,"@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>void addArray(T[] b1,T[] addend){
}","public static <T extends MVec>void addArray(T[] b1,T[] addend){
}",0.7784431137724551
131228,"public VarTensor copyAndConvertAlgebra(Algebra newS){
  VarTensor t=new VarTensor(newS,this.vars);
  t.setFromDiffAlgebra(this);
  return t;
}","@Override public VarTensor copyAndConvertAlgebra(Algebra newS){
  VarTensor t=new VarTensor(newS,this.vars);
  t.setFromDiffAlgebra(this);
  return t;
}",0.9659863945578232
131229,"public double getTemperature(int curIter,int maxIter){
}","/** 
 * Computes the temperature using a linear annealing schedule. 
 */
public double getTemperature(int curIter,int maxIter){
}",0.6054054054054054
131230,"public static void checkForRequiredAnnotations(JointNlpEncoderPrm prm,AnnoSentenceCollection sents){
  try {
    AnnoSentence sent=sents.get(0);
    if (prm.fePrm.srlFePrm.fePrm.useTemplates) {
      if (prm.fgPrm.includeSrl) {
        TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.srlFePrm.fePrm.soloTemplates);
        TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.srlFePrm.fePrm.pairTemplates);
      }
    }
    if (prm.fgPrm.includeDp && !prm.fePrm.dpFePrm.onlyFast) {
      TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.dpFePrm.firstOrderTpls);
      if (prm.fgPrm.dpPrm.grandparentFactors || prm.fgPrm.dpPrm.arbitrarySiblingFactors) {
        TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.dpFePrm.secondOrderTpls);
      }
    }
  }
 catch (  IllegalStateException e) {
    log.error(e.getMessage());
    log.trace(""String_Node_Str"",e);
  }
}","public static void checkForRequiredAnnotations(JointNlpEncoderPrm prm,AnnoSentenceCollection sents){
  try {
    if (sents.size() == 0) {
      return;
    }
    AnnoSentence sent=sents.get(0);
    if (prm.fePrm.srlFePrm.fePrm.useTemplates) {
      if (prm.fgPrm.includeSrl) {
        TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.srlFePrm.fePrm.soloTemplates);
        TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.srlFePrm.fePrm.pairTemplates);
      }
    }
    if (prm.fgPrm.includeDp && !prm.fePrm.dpFePrm.onlyFast) {
      TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.dpFePrm.firstOrderTpls);
      if (prm.fgPrm.dpPrm.grandparentFactors || prm.fgPrm.dpPrm.arbitrarySiblingFactors) {
        TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.dpFePrm.secondOrderTpls);
      }
    }
  }
 catch (  IllegalStateException e) {
    log.error(e.getMessage());
    log.trace(""String_Node_Str"",e);
  }
}",0.9738666666666668
131231,"private static CrfTrainerPrm getCrfTrainerPrm() throws ParseException {
  FgInferencerFactory infPrm=getInfFactory();
  CrfTrainerPrm prm=new CrfTrainerPrm();
  prm.infFactory=infPrm;
  if (infPrm instanceof BeliefsModuleFactory) {
    prm.bFactory=(BeliefsModuleFactory)infPrm;
  }
  if (optimizer == Optimizer.LBFGS) {
    prm.optimizer=getMalletLbfgs();
    prm.batchOptimizer=null;
  }
 else   if (optimizer == Optimizer.QN) {
    prm.optimizer=getStanfordLbfgs();
    prm.batchOptimizer=null;
  }
 else   if (optimizer == Optimizer.SGD || optimizer == Optimizer.ASGD || optimizer == Optimizer.ADAGRAD || optimizer == Optimizer.ADADELTA) {
    prm.optimizer=null;
    SGDPrm sgdPrm=getSgdPrm();
    if (optimizer == Optimizer.SGD) {
      BottouSchedulePrm boPrm=new BottouSchedulePrm();
      boPrm.initialLr=sgdInitialLr;
      boPrm.lambda=1.0 / l2variance;
      sgdPrm.sched=new BottouSchedule(boPrm);
    }
 else     if (optimizer == Optimizer.ASGD) {
      BottouSchedulePrm boPrm=new BottouSchedulePrm();
      boPrm.initialLr=sgdInitialLr;
      boPrm.lambda=1.0 / l2variance;
      boPrm.power=0.75;
      sgdPrm.sched=new BottouSchedule(boPrm);
      sgdPrm.averaging=true;
    }
 else     if (optimizer == Optimizer.ADAGRAD) {
      AdaGradSchedulePrm adaGradPrm=new AdaGradSchedulePrm();
      adaGradPrm.eta=adaGradEta;
      adaGradPrm.constantAddend=adaDeltaConstantAddend;
      sgdPrm.sched=new AdaGradSchedule(adaGradPrm);
    }
 else     if (optimizer == Optimizer.ADADELTA) {
      AdaDeltaPrm adaDeltaPrm=new AdaDeltaPrm();
      adaDeltaPrm.decayRate=adaDeltaDecayRate;
      adaDeltaPrm.constantAddend=adaDeltaConstantAddend;
      sgdPrm.sched=new AdaDelta(adaDeltaPrm);
      sgdPrm.autoSelectLr=false;
    }
    prm.batchOptimizer=new SGD(sgdPrm);
  }
 else   if (optimizer == Optimizer.ADAGRAD_COMID) {
    AdaGradComidL2Prm sgdPrm=new AdaGradComidL2Prm();
    setSgdPrm(sgdPrm);
    sgdPrm.l2Lambda=1.0 / l2variance;
    sgdPrm.eta=adaGradEta;
    sgdPrm.constantAddend=adaDeltaConstantAddend;
    sgdPrm.sched=null;
    prm.optimizer=null;
    prm.batchOptimizer=new AdaGradComidL2(sgdPrm);
  }
 else   if (optimizer == Optimizer.FOBOS) {
    SGDFobosPrm sgdPrm=new SGDFobosPrm();
    setSgdPrm(sgdPrm);
    sgdPrm.l2Lambda=1.0 / l2variance;
    BottouSchedulePrm boPrm=new BottouSchedulePrm();
    boPrm.initialLr=sgdInitialLr;
    boPrm.lambda=1.0 / l2variance;
    sgdPrm.sched=new BottouSchedule(boPrm);
    prm.optimizer=null;
    prm.batchOptimizer=new SGDFobos(sgdPrm);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + optimizer);
  }
  if (regularizer == RegularizerType.L2) {
    prm.regularizer=new L2(l2variance);
  }
 else   if (regularizer == RegularizerType.NONE) {
    prm.regularizer=null;
  }
 else {
    throw new ParseException(""String_Node_Str"" + regularizer);
  }
  prm.numThreads=threads;
  prm.useMseForValue=useMseForValue;
  prm.trainer=trainer;
  if (prm.trainer == Trainer.ERMA && CorpusHandler.getPredAts().equals(Lists.getList(AT.DEP_TREE))) {
    if (dpLoss == ErmaLoss.DP_DECODE_LOSS) {
      DepParseDecodeLossFactory lossPrm=new DepParseDecodeLossFactory();
      lossPrm.annealMse=dpAnnealMse;
      lossPrm.startTemp=dpStartTemp;
      lossPrm.endTemp=dpEndTemp;
      prm.dlFactory=lossPrm;
    }
 else     if (dpLoss == ErmaLoss.MSE) {
      prm.dlFactory=new MeanSquaredErrorFactory();
    }
 else     if (dpLoss == ErmaLoss.EXPECTED_RECALL) {
      prm.dlFactory=new ExpectedRecallFactory();
    }
  }
  return prm;
}","private static CrfTrainerPrm getCrfTrainerPrm() throws ParseException {
  FgInferencerFactory infPrm=getInfFactory();
  CrfTrainerPrm prm=new CrfTrainerPrm();
  prm.infFactory=infPrm;
  if (infPrm instanceof BeliefsModuleFactory) {
    prm.bFactory=(BeliefsModuleFactory)infPrm;
  }
  if (optimizer == Optimizer.LBFGS) {
    prm.optimizer=getMalletLbfgs();
    prm.batchOptimizer=null;
  }
 else   if (optimizer == Optimizer.QN) {
    prm.optimizer=getStanfordLbfgs();
    prm.batchOptimizer=null;
  }
 else   if (optimizer == Optimizer.SGD || optimizer == Optimizer.ASGD || optimizer == Optimizer.ADAGRAD || optimizer == Optimizer.ADADELTA) {
    prm.optimizer=null;
    SGDPrm sgdPrm=getSgdPrm();
    if (optimizer == Optimizer.SGD) {
      BottouSchedulePrm boPrm=new BottouSchedulePrm();
      boPrm.initialLr=sgdInitialLr;
      boPrm.lambda=1.0 / l2variance;
      sgdPrm.sched=new BottouSchedule(boPrm);
    }
 else     if (optimizer == Optimizer.ASGD) {
      BottouSchedulePrm boPrm=new BottouSchedulePrm();
      boPrm.initialLr=sgdInitialLr;
      boPrm.lambda=1.0 / l2variance;
      boPrm.power=0.75;
      sgdPrm.sched=new BottouSchedule(boPrm);
      sgdPrm.averaging=true;
    }
 else     if (optimizer == Optimizer.ADAGRAD) {
      AdaGradSchedulePrm adaGradPrm=new AdaGradSchedulePrm();
      adaGradPrm.eta=adaGradEta;
      adaGradPrm.constantAddend=adaGradConstantAddend;
      sgdPrm.sched=new AdaGradSchedule(adaGradPrm);
    }
 else     if (optimizer == Optimizer.ADADELTA) {
      AdaDeltaPrm adaDeltaPrm=new AdaDeltaPrm();
      adaDeltaPrm.decayRate=adaDeltaDecayRate;
      adaDeltaPrm.constantAddend=adaDeltaConstantAddend;
      sgdPrm.sched=new AdaDelta(adaDeltaPrm);
      sgdPrm.autoSelectLr=false;
    }
    prm.batchOptimizer=new SGD(sgdPrm);
  }
 else   if (optimizer == Optimizer.ADAGRAD_COMID) {
    AdaGradComidL2Prm sgdPrm=new AdaGradComidL2Prm();
    setSgdPrm(sgdPrm);
    sgdPrm.l2Lambda=1.0 / l2variance;
    sgdPrm.eta=adaGradEta;
    sgdPrm.constantAddend=adaGradConstantAddend;
    sgdPrm.sched=null;
    prm.optimizer=null;
    prm.batchOptimizer=new AdaGradComidL2(sgdPrm);
  }
 else   if (optimizer == Optimizer.FOBOS) {
    SGDFobosPrm sgdPrm=new SGDFobosPrm();
    setSgdPrm(sgdPrm);
    sgdPrm.l2Lambda=1.0 / l2variance;
    BottouSchedulePrm boPrm=new BottouSchedulePrm();
    boPrm.initialLr=sgdInitialLr;
    boPrm.lambda=1.0 / l2variance;
    sgdPrm.sched=new BottouSchedule(boPrm);
    prm.optimizer=null;
    prm.batchOptimizer=new SGDFobos(sgdPrm);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + optimizer);
  }
  if (regularizer == RegularizerType.L2) {
    prm.regularizer=new L2(l2variance);
  }
 else   if (regularizer == RegularizerType.NONE) {
    prm.regularizer=null;
  }
 else {
    throw new ParseException(""String_Node_Str"" + regularizer);
  }
  prm.numThreads=threads;
  prm.useMseForValue=useMseForValue;
  prm.trainer=trainer;
  if (prm.trainer == Trainer.ERMA && CorpusHandler.getPredAts().equals(Lists.getList(AT.DEP_TREE))) {
    if (dpLoss == ErmaLoss.DP_DECODE_LOSS) {
      DepParseDecodeLossFactory lossPrm=new DepParseDecodeLossFactory();
      lossPrm.annealMse=dpAnnealMse;
      lossPrm.startTemp=dpStartTemp;
      lossPrm.endTemp=dpEndTemp;
      prm.dlFactory=lossPrm;
    }
 else     if (dpLoss == ErmaLoss.MSE) {
      prm.dlFactory=new MeanSquaredErrorFactory();
    }
 else     if (dpLoss == ErmaLoss.EXPECTED_RECALL) {
      prm.dlFactory=new ExpectedRecallFactory();
    }
  }
  return prm;
}",0.9974307736226092
131232,"public void preOrderTraversal(FnO1ToVoid<NaryTree> function){
  function.call(this);
  if (children != null) {
    for (    NaryTree child : children) {
      child.postOrderTraversal(function);
    }
  }
}","public void preOrderTraversal(FnO1ToVoid<NaryTree> function){
  function.call(this);
  if (children != null) {
    for (    NaryTree child : children) {
      child.preOrderTraversal(function);
    }
  }
}",0.9343065693430656
131233,"@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>T[] copyOfArray(T[] orig){
  if (orig == null) {
    return null;
  }
  T[] clone=Arrays.copyOf(orig,orig.length);
  for (int v=0; v < clone.length; v++) {
    if (orig[v] != null) {
      clone[v]=(T)orig[v].copy();
    }
  }
  return clone;
}","@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>T[] copyOfArray(T[] orig){
  if (orig == null) {
    return null;
  }
  T[] clone=Arrays.copyOf(orig,orig.length);
  for (int v=0; v < clone.length; v++) {
    if (orig[v] != null) {
      MVec copy=orig[v].copy();
      if (!copy.getClass().equals(orig[v].getClass())) {
        throw new RuntimeException(orig[v].getClass() + ""String_Node_Str"" + ""String_Node_Str""+ copy.getClass());
      }
      clone[v]=(T)copy;
    }
  }
  return clone;
}",0.7226277372262774
131234,"@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>T[] copyAndConvertAlgebraOfArray(T[] orig,Algebra newS){
  if (orig == null) {
    return null;
  }
  T[] clone=Arrays.copyOf(orig,orig.length);
  for (int v=0; v < clone.length; v++) {
    if (orig[v] != null) {
      clone[v]=(T)orig[v].copyAndConvertAlgebra(newS);
    }
  }
  return clone;
}","@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>T[] copyAndConvertAlgebraOfArray(T[] orig,Algebra newS){
  if (orig == null) {
    return null;
  }
  T[] clone=Arrays.copyOf(orig,orig.length);
  for (int v=0; v < clone.length; v++) {
    if (orig[v] != null) {
      MVec copy=orig[v].copyAndConvertAlgebra(newS);
      if (!copy.getClass().equals(orig[v].getClass())) {
        throw new RuntimeException(orig[v].getClass() + ""String_Node_Str"" + ""String_Node_Str""+ copy.getClass());
      }
      clone[v]=(T)copy;
    }
  }
  return clone;
}",0.7272727272727273
131235,"@SuppressWarnings(""String_Node_Str"") public static <T extends MVec>void addArray(T[] b1,T[] addend){
}","public static <T extends MVec>void addArray(T[] b1,T[] addend){
}",0.7784431137724551
131236,"public VarTensor copyAndConvertAlgebra(Algebra newS){
  VarTensor t=new VarTensor(newS,this.vars);
  t.setFromDiffAlgebra(this);
  return t;
}","@Override public VarTensor copyAndConvertAlgebra(Algebra newS){
  VarTensor t=new VarTensor(newS,this.vars);
  t.setFromDiffAlgebra(this);
  return t;
}",0.9659863945578232
131237,"public static void initDefaultPool(int numThreads){
  Threads.defaultPool=Executors.newFixedThreadPool(numThreads);
  Threads.numThreads=numThreads;
}","public static void initDefaultPool(int numThreads){
  if (numThreads == 1) {
    Threads.defaultPool=MoreExecutors.newDirectExecutorService();
    Threads.numThreads=1;
  }
 else {
    log.info(""String_Node_Str"",numThreads);
    Threads.defaultPool=Executors.newFixedThreadPool(numThreads);
    Threads.numThreads=numThreads;
  }
}",0.4948024948024948
131238,"/** 
 * @param srlIsSyntax If true, we put SRL annotations in as dependency parses. Dependency edges from root (gov=-1) represent predicates, with the edge type giving the predicate sense. Arguments are dependents of their predicate token, with the dependency label capturing the argument label (e.g. ""ARG0"" and ""ARG1""). Otherwise, we create a SituationMention for every predicate, which have proper Arguments, each of which includes an EntityMention that is added to its own EntityMentionSet (all EntityMentions created by this tool in a document are unioned before making an EntityMentionSet).
 */
public ConcreteWriter(ConcreteWriterPrm prm){
  this.timestamp=System.currentTimeMillis();
  this.prm=prm;
}","public ConcreteWriter(ConcreteWriterPrm prm){
  this.timestamp=System.currentTimeMillis();
  this.prm=prm;
}",0.2647058823529412
131239,"/** 
 * Sets the include flag for each annotation type to true, or warns if it's not supported. 
 */
public void addAnnoTypes(Collection<AT> ats){
  for (  AT at : ats) {
switch (at) {
case DEP_TREE:
      this.addDepParse=true;
    break;
case SRL:
  this.addSrl=true;
break;
case NER:
this.addNerMentions=true;
break;
case RELATIONS:
this.addRelations=true;
break;
default :
log.warn(""String_Node_Str"",at);
}
}
}","/** 
 * Sets the include flag for each annotation type to true, or warns if it's not supported. 
 */
public void addAnnoTypes(Collection<AT> ats){
  this.addDepParse=ats.contains(AT.DEP_TREE);
  this.addSrl=ats.contains(AT.SRL);
  this.addNerMentions=ats.contains(AT.NER);
  this.addRelations=ats.contains(AT.RELATIONS);
  EnumSet<AT> others=EnumSet.complementOf(EnumSet.of(AT.DEP_TREE,AT.SRL,AT.NER,AT.RELATIONS));
  for (  AT at : ats) {
    if (others.contains(at)) {
      log.warn(""String_Node_Str"",at);
    }
  }
}",0.4539614561027837
131240,"public static UFgExample get2ndOrderFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new FastDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.useProjDepTreeFactor=true;
  fgPrm.grandparentFactors=true;
  fgPrm.siblingFactors=true;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}","public static UFgExample get2ndOrderFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new BitshiftDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.useProjDepTreeFactor=true;
  fgPrm.grandparentFactors=true;
  fgPrm.siblingFactors=true;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}",0.9942922374429224
131241,"public static UFgExample get2ndOrderGraOnlyFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new FastDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.grandparentFactors=false;
  fgPrm.siblingFactors=false;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}","public static UFgExample get2ndOrderGraOnlyFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new BitshiftDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.grandparentFactors=false;
  fgPrm.siblingFactors=false;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}",0.9941176470588236
131242,"public static UFgExample get1stOrderFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new FastDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.useProjDepTreeFactor=true;
  fgPrm.grandparentFactors=false;
  fgPrm.siblingFactors=false;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}","public static UFgExample get1stOrderFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new BitshiftDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.useProjDepTreeFactor=true;
  fgPrm.grandparentFactors=false;
  fgPrm.siblingFactors=false;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}",0.9943052391799544
131243,"public static UFgExample get2ndOrderFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new FastDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.useProjDepTreeFactor=true;
  fgPrm.grandparentFactors=true;
  fgPrm.siblingFactors=false;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}","public static UFgExample get2ndOrderFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new BitshiftDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.useProjDepTreeFactor=true;
  fgPrm.grandparentFactors=true;
  fgPrm.siblingFactors=false;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}",0.9942987457240592
131244,"@Override public FeatureVector calcObsFeatureVector(ObsFeExpFamFactor factor){
  ObsFeTypedFactor f=(ObsFeTypedFactor)factor;
  FeatureNames alphabet=fts.getTemplate(f).getAlphabet();
  Enum<?> ft=f.getFactorType();
  VarSet vars=f.getVars();
  FeatureVector feats=new FeatureVector();
  if (ft == SrlFactorTemplate.ROLE_UNARY || ft == SrlFactorTemplate.SENSE_ROLE_BINARY) {
    Var var=vars.iterator().next();
    int parent=((RoleVar)var).getParent();
    int child=((RoleVar)var).getChild();
    FastDepParseFe.addArcFactoredMSTFeats(isent,parent,child,feats,false,false);
  }
 else   if (ft == SrlFactorTemplate.SENSE_UNARY) {
    SenseVar var=(SenseVar)vars.iterator().next();
    int parent=var.getParent();
    FastDepParseFe.addArcFactoredMSTFeats(isent,-1,parent,feats,false,false);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  int[] idxs=feats.getInternalIndices();
  int used=feats.getUsed();
  for (int i=0; i < used; i++) {
    idxs[i]=alphabet.lookupIndex(idxs[i]);
  }
  return feats;
}","@Override public FeatureVector calcObsFeatureVector(ObsFeExpFamFactor factor){
  ObsFeTypedFactor f=(ObsFeTypedFactor)factor;
  FeatureNames alphabet=fts.getTemplate(f).getAlphabet();
  Enum<?> ft=f.getFactorType();
  VarSet vars=f.getVars();
  FeatureVector feats=new FeatureVector();
  if (ft == SrlFactorTemplate.ROLE_UNARY || ft == SrlFactorTemplate.SENSE_ROLE_BINARY) {
    Var var=vars.iterator().next();
    int parent=((RoleVar)var).getParent();
    int child=((RoleVar)var).getChild();
    BitshiftDepParseFeatures.addArcFactoredMSTFeats(isent,parent,child,feats,false,false,featureHashMod);
  }
 else   if (ft == SrlFactorTemplate.SENSE_UNARY) {
    SenseVar var=(SenseVar)vars.iterator().next();
    int parent=var.getParent();
    BitshiftDepParseFeatures.addArcFactoredMSTFeats(isent,-1,parent,feats,false,false,featureHashMod);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  int[] idxs=feats.getInternalIndices();
  int used=feats.getUsed();
  for (int i=0; i < used; i++) {
    idxs[i]=alphabet.lookupIndex(idxs[i]);
  }
  return feats;
}",0.970616113744076
131245,"public FastSrlFeatureExtractor(AnnoSentence sent,CorpusStatistics cs,int featureHashMod,FactorTemplateList fts){
  this.isent=new IntAnnoSentence(sent,cs.store);
  FastDepParseFeatureExtractor.featureHashMod=featureHashMod;
  this.fts=fts;
}","public FastSrlFeatureExtractor(AnnoSentence sent,CorpusStatistics cs,int featureHashMod,FactorTemplateList fts){
  this.isent=new IntAnnoSentence(sent,cs.store);
  this.featureHashMod=featureHashMod;
  this.fts=fts;
}",0.9301310043668122
131246,"private Function getValidationFn(final AnnoSentenceCollection devInput,final AnnoSentenceCollection devGold){
  if (devInput == null || devGold == null) {
    return null;
  }
  final JointNlpAnnotator anno=this;
  final Evaluator eval;
  if (CorpusHandler.getPredAts().equals(Lists.getList(AT.DEP_TREE))) {
    eval=new DepParseAccuracy(prm.dpSkipPunctuation);
  }
 else   if (CorpusHandler.getPredAts().equals(Lists.getList(AT.SRL))) {
    SrlEvaluatorPrm evalPrm=new SrlEvaluatorPrm();
    evalPrm.evalSense=prm.buPrm.fgPrm.srlPrm.predictSense;
    evalPrm.evalPredicatePosition=prm.buPrm.fgPrm.srlPrm.predictPredPos;
    evalPrm.evalRoles=(prm.buPrm.fgPrm.srlPrm.roleStructure != RoleStructure.NO_ROLES);
    eval=new SrlEvaluator(evalPrm);
  }
 else   if (CorpusHandler.getPredAts().equals(Lists.getList(AT.REL_LABELS))) {
    eval=new RelationEvaluator();
  }
 else {
    log.warn(""String_Node_Str"");
    return null;
  }
  JointNlpFgExamplesBuilder builder=new JointNlpFgExamplesBuilder(prm.buPrm,model.getOfc(),model.getCs(),false);
  final FgExampleList devData=builder.getData(devInput,null);
  return new Function(){
    @Override public double getValue(    IntDoubleVector point){
      anno.annotate(devInput,devData);
      return eval.evaluate(devInput,devGold,""String_Node_Str"");
    }
    @Override public int getNumDimensions(){
      return -1;
    }
  }
;
}","private Function getValidationFn(final AnnoSentenceCollection devInput,final AnnoSentenceCollection devGold){
  if (devInput == null || devGold == null) {
    return null;
  }
  final JointNlpAnnotator anno=this;
  final Evaluator eval;
  if (CorpusHandler.getPredAts().equals(Lists.getList(AT.DEP_TREE))) {
    eval=new DepParseAccuracy(prm.dpSkipPunctuation);
  }
 else   if (CorpusHandler.getPredAts().equals(Lists.getList(AT.SRL)) || CorpusHandler.getPredAts().equals(Lists.getList(AT.SRL_PRED_IDX,AT.SRL))) {
    SrlEvaluatorPrm evalPrm=new SrlEvaluatorPrm();
    evalPrm.evalSense=prm.buPrm.fgPrm.srlPrm.predictSense;
    evalPrm.evalPredicatePosition=prm.buPrm.fgPrm.srlPrm.predictPredPos;
    evalPrm.evalRoles=(prm.buPrm.fgPrm.srlPrm.roleStructure != RoleStructure.NO_ROLES);
    eval=new SrlEvaluator(evalPrm);
  }
 else   if (CorpusHandler.getPredAts().equals(Lists.getList(AT.REL_LABELS))) {
    eval=new RelationEvaluator();
  }
 else {
    log.warn(""String_Node_Str"");
    return null;
  }
  JointNlpFgExamplesBuilder builder=new JointNlpFgExamplesBuilder(prm.buPrm,model.getOfc(),model.getCs(),false);
  final FgExampleList devData=builder.getData(devInput,null);
  return new Function(){
    @Override public double getValue(    IntDoubleVector point){
      anno.annotate(devInput,devData);
      return eval.evaluate(devInput,devGold,""String_Node_Str"");
    }
    @Override public int getNumDimensions(){
      return -1;
    }
  }
;
}",0.9731448763250884
131247,"private String getLabel(DepGraph dg,int p,int c){
  String label=dg.get(p,c);
  if (label == null) {
    return NO_LABEL;
  }
 else   if (!prm.labeled || (p == -1 && !prm.evalSense)) {
    return SOME_LABEL;
  }
 else {
    return label;
  }
}","private String getLabel(DepGraph dg,int p,int c){
  if (dg == null) {
    return null;
  }
  String label=dg.get(p,c);
  if (label == null) {
    return NO_LABEL;
  }
 else   if (!prm.labeled || (p == -1 && !prm.evalSense)) {
    return SOME_LABEL;
  }
 else {
    return label;
  }
}",0.922201138519924
131248,"public static SrlGraph getSrlGraphFromVarConfig(VarConfig vc,int n){
  int srlVarCount=0;
  SrlGraph srlGraph=new SrlGraph(n);
  for (  Var v : vc.getVars()) {
    if (v instanceof RoleVar && v.getType() != VarType.LATENT) {
      RoleVar role=(RoleVar)v;
      SrlPred pred=srlGraph.getPredAt(role.getParent());
      if (pred == null) {
        String sense=""String_Node_Str"";
        pred=new SrlPred(role.getParent(),sense);
      }
      SrlArg arg=srlGraph.getArgAt(role.getChild());
      if (arg == null) {
        arg=new SrlArg(role.getChild());
      }
      SrlEdge edge=new SrlEdge(pred,arg,vc.getStateName(role));
      srlGraph.addEdge(edge);
      srlVarCount++;
    }
 else     if (v instanceof SenseVar && v.getType() == VarType.PREDICTED) {
      SenseVar sense=(SenseVar)v;
      String predLabel=vc.getStateName(sense);
      if (""String_Node_Str"".equals(predLabel)) {
      }
 else {
        SrlPred pred=srlGraph.getPredAt(sense.getParent());
        if (pred == null) {
          pred=new SrlPred(sense.getParent(),predLabel);
          srlGraph.addPred(pred);
        }
 else {
          pred.setLabel(predLabel);
        }
      }
      srlVarCount++;
    }
  }
  if (srlVarCount > 0) {
    return srlGraph;
  }
 else {
    return null;
  }
}","public static SrlGraph getSrlGraphFromVarConfig(VarConfig vc,int n){
  int srlVarCount=0;
  SrlGraph srlGraph=new SrlGraph(n);
  for (  Var v : vc.getVars()) {
    if (v instanceof RoleVar && v.getType() != VarType.LATENT) {
      RoleVar role=(RoleVar)v;
      String stateName=vc.getStateName(role);
      if (!""String_Node_Str"".equals(stateName)) {
        SrlPred pred=srlGraph.getPredAt(role.getParent());
        if (pred == null) {
          String sense=""String_Node_Str"";
          pred=new SrlPred(role.getParent(),sense);
        }
        SrlArg arg=srlGraph.getArgAt(role.getChild());
        if (arg == null) {
          arg=new SrlArg(role.getChild());
        }
        SrlEdge edge=new SrlEdge(pred,arg,stateName);
        srlGraph.addEdge(edge);
      }
      srlVarCount++;
    }
 else     if (v instanceof SenseVar && v.getType() == VarType.PREDICTED) {
      SenseVar sense=(SenseVar)v;
      String predLabel=vc.getStateName(sense);
      if (""String_Node_Str"".equals(predLabel)) {
      }
 else {
        SrlPred pred=srlGraph.getPredAt(sense.getParent());
        if (pred == null) {
          pred=new SrlPred(sense.getParent(),predLabel);
          srlGraph.addPred(pred);
        }
 else {
          pred.setLabel(predLabel);
        }
      }
      srlVarCount++;
    }
  }
  if (srlVarCount > 0) {
    return srlGraph;
  }
 else {
    return null;
  }
}",0.88
131249,"@Override public FeatureVector calcFeatureVector(FeExpFamFactor factor,int configId){
  FeTypedFactor f=(FeTypedFactor)factor;
  Enum<?> ft=f.getFactorType();
  VarSet vars=f.getVars();
  int[] vc=vars.getVarConfigAsArray(configId);
  if (ArrayUtils.contains(vc,LinkVar.FALSE)) {
    return emptyFv;
  }
  FeatureVector feats=new FeatureVector();
  if (ft == DepParseFactorTemplate.LINK_UNARY) {
    LinkVar var=(LinkVar)vars.get(0);
    int p=var.getParent();
    int c=var.getChild();
    FastDepParseFe.addArcFactoredMSTFeats(isent,p,c,feats,false,true);
  }
 else   if (ft == DepParseFactorTemplate.LINK_SIBLING) {
    SibFeTypedFactor f2=(SibFeTypedFactor)f;
    FastDepParseFe.add2ndOrderSiblingFeats(isent,f2.p,f2.c,f2.s,feats);
  }
 else   if (ft == DepParseFactorTemplate.LINK_GRANDPARENT) {
    GraFeTypedFactor f2=(GraFeTypedFactor)f;
    FastDepParseFe.add2ndOrderGrandparentFeats(isent,f2.g,f2.p,f2.c,feats);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  return feats;
}","@Override public FeatureVector calcFeatureVector(FeExpFamFactor factor,int configId){
  int i=0;
  while (alphabet.size() < featureHashMod) {
    alphabet.lookupIndex(i++);
  }
  FeTypedFactor f=(FeTypedFactor)factor;
  Enum<?> ft=f.getFactorType();
  VarSet vars=f.getVars();
  int[] vc=vars.getVarConfigAsArray(configId);
  if (ArrayUtils.contains(vc,LinkVar.FALSE)) {
    return emptyFv;
  }
  FeatureVector feats=new FeatureVector();
  if (ft == DepParseFactorTemplate.LINK_UNARY) {
    LinkVar var=(LinkVar)vars.get(0);
    int p=var.getParent();
    int c=var.getChild();
    FastDepParseFe.addArcFactoredMSTFeats(isent,p,c,feats,false,true);
  }
 else   if (ft == DepParseFactorTemplate.LINK_SIBLING) {
    SibFeTypedFactor f2=(SibFeTypedFactor)f;
    FastDepParseFe.add2ndOrderSiblingFeats(isent,f2.p,f2.c,f2.s,feats);
  }
 else   if (ft == DepParseFactorTemplate.LINK_GRANDPARENT) {
    GraFeTypedFactor f2=(GraFeTypedFactor)f;
    FastDepParseFe.add2ndOrderGrandparentFeats(isent,f2.g,f2.p,f2.c,feats);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  return feats;
}",0.9569332702318978
131250,"public FastDepParseFeatureExtractor(AnnoSentence sent,CorpusStatistics cs,int featureHashMod,FeatureNames alphabet){
  this.isent=new IntAnnoSentence(sent,cs.store);
  this.featureHashMod=featureHashMod;
  int i=0;
  while (alphabet.size() < featureHashMod) {
    alphabet.lookupIndex(i++);
  }
}","public FastDepParseFeatureExtractor(AnnoSentence sent,CorpusStatistics cs,int featureHashMod,FeatureNames alphabet){
  this.isent=new IntAnnoSentence(sent,cs.store);
  this.featureHashMod=featureHashMod;
  this.alphabet=alphabet;
}",0.7969639468690702
131251,"public List<List<FeatTemplate>> selectFeatureTemplates(List<FeatTemplate> allTpls,List<ValExtractor> valExts,AnnoSentenceCollection sents,CorpusStatisticsPrm csPrm,int numToSelect){
  if (allTpls.size() <= numToSelect) {
    List<List<FeatTemplate>> selected=new ArrayList<List<FeatTemplate>>();
    for (int c=0; c < valExts.size(); c++) {
      selected.add(allTpls);
    }
    return selected;
  }
  if (prm.maxNumSentences < sents.size()) {
    log.info(""String_Node_Str"" + prm.maxNumSentences + ""String_Node_Str"");
    sents=sents.subList(0,prm.maxNumSentences);
  }
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  for (int c=0; c < valExts.size(); c++) {
    ValExtractor valExt=valExts.get(c);
    valExt.init(sents,prm.valueHashMod);
    log.info(String.format(""String_Node_Str"",c,valExt.getName(),valExt.getNumVals()));
  }
  log.info(""String_Node_Str"");
  Pair<double[][],int[]> pair=computeInformationGain(allTpls,valExts,sents,cs);
  double[][] ig=pair.get1();
  int[] featCount=pair.get2();
  try {
    Writer writer=null;
    if (prm.outFile != null) {
      log.info(""String_Node_Str"" + prm.outFile);
      writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(prm.outFile,true),""String_Node_Str""));
    }
    List<List<FeatTemplate>> selected=new ArrayList<List<FeatTemplate>>();
    for (int c=0; c < valExts.size(); c++) {
      selected.add(filterFeatTemplates(allTpls,valExts.get(c),ig[c],featCount,writer,numToSelect));
    }
    if (writer != null) {
      writer.close();
    }
    return selected;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public List<List<FeatTemplate>> selectFeatureTemplates(List<FeatTemplate> allTpls,List<ValExtractor> valExts,AnnoSentenceCollection inputSents,AnnoSentenceCollection goldSents,CorpusStatisticsPrm csPrm,int numToSelect){
  if (allTpls.size() <= numToSelect) {
    List<List<FeatTemplate>> selected=new ArrayList<List<FeatTemplate>>();
    for (int c=0; c < valExts.size(); c++) {
      selected.add(allTpls);
    }
    return selected;
  }
  if (prm.maxNumSentences < goldSents.size()) {
    log.info(""String_Node_Str"" + prm.maxNumSentences + ""String_Node_Str"");
    inputSents=inputSents.subList(0,prm.maxNumSentences);
    goldSents=goldSents.subList(0,prm.maxNumSentences);
  }
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(inputSents);
  for (int c=0; c < valExts.size(); c++) {
    ValExtractor valExt=valExts.get(c);
    valExt.init(goldSents,prm.valueHashMod);
    log.info(String.format(""String_Node_Str"",c,valExt.getName(),valExt.getNumVals()));
  }
  log.info(""String_Node_Str"");
  Pair<double[][],int[]> pair=computeInformationGain(allTpls,valExts,inputSents,goldSents,cs);
  double[][] ig=pair.get1();
  int[] featCount=pair.get2();
  try {
    Writer writer=null;
    if (prm.outFile != null) {
      log.info(""String_Node_Str"" + prm.outFile);
      writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(prm.outFile,true),""String_Node_Str""));
    }
    List<List<FeatTemplate>> selected=new ArrayList<List<FeatTemplate>>();
    for (int c=0; c < valExts.size(); c++) {
      selected.add(filterFeatTemplates(allTpls,valExts.get(c),ig[c],featCount,writer,numToSelect));
    }
    if (writer != null) {
      writer.close();
    }
    return selected;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9570082449941107
131252,"private List<FeatTemplate> getFeatTemplatesForSrl(AnnoSentenceCollection sents,CorpusStatisticsPrm csPrm,List<FeatTemplate> unigrams,ValExtractor valExt){
}","private List<FeatTemplate> getFeatTemplatesForSrl(AnnoSentenceCollection inputSents,AnnoSentenceCollection goldSents,CorpusStatisticsPrm csPrm,List<FeatTemplate> unigrams,ValExtractor valExt){
}",0.8914285714285715
131253,"@Override public Object call() throws Exception {
  computeInformationGain(t,allTpls,valExts,sents,cs,ig,featCount);
  return null;
}","@Override public Object call() throws Exception {
  computeInformationGain(t,allTpls,valExts,inputSents,goldSents,cs,ig,featCount);
  return null;
}",0.9466192170818504
131254,"public IGComputer(int t,List<FeatTemplate> allTpls,List<ValExtractor> valExts,AnnoSentenceCollection sents,CorpusStatistics cs,double[][] ig,int[] featCount){
  super();
  this.t=t;
  this.allTpls=allTpls;
  this.valExts=valExts;
  this.sents=sents;
  this.cs=cs;
  this.ig=ig;
  this.featCount=featCount;
}","public IGComputer(int t,List<FeatTemplate> allTpls,List<ValExtractor> valExts,AnnoSentenceCollection inputSents,AnnoSentenceCollection goldSents,CorpusStatistics cs,double[][] ig,int[] featCount){
  super();
  this.t=t;
  this.allTpls=allTpls;
  this.valExts=valExts;
  this.inputSents=inputSents;
  this.goldSents=goldSents;
  this.cs=cs;
  this.ig=ig;
  this.featCount=featCount;
}",0.8666666666666667
131255,"@Override public void train(AnnoSentenceCollection trainInput,AnnoSentenceCollection trainGold,AnnoSentenceCollection devInput,AnnoSentenceCollection devGold){
  featureSelection(trainGold,fePrm);
}","@Override public void train(AnnoSentenceCollection trainInput,AnnoSentenceCollection trainGold,AnnoSentenceCollection devInput,AnnoSentenceCollection devGold){
  featureSelection(trainInput,trainGold,fePrm);
}",0.972972972972973
131256,"/** 
 * Do feature selection and update fePrm with the chosen feature templates.
 */
private static void featureSelection(AnnoSentenceCollection sents,JointNlpFeatureExtractorPrm fePrm){
  if (modelIn != null) {
    return;
  }
  SrlFeatureExtractorPrm srlFePrm=fePrm.srlFePrm;
  removeAts(fePrm);
  if (useTemplates && featureSelection) {
    CorpusStatisticsPrm csPrm=getCorpusStatisticsPrm();
    IGFeatureTemplateSelectorPrm prm=getInformationGainFeatureSelectorPrm();
    SrlFeatTemplates sft=new SrlFeatTemplates(srlFePrm.fePrm.soloTemplates,srlFePrm.fePrm.pairTemplates,null);
    IGFeatureTemplateSelector ig=new IGFeatureTemplateSelector(prm);
    sft=ig.getFeatTemplatesForSrl(sents,csPrm,sft);
    fePrm.srlFePrm.fePrm.soloTemplates=sft.srlSense;
    fePrm.srlFePrm.fePrm.pairTemplates=sft.srlArg;
  }
  if (CorpusHandler.getGoldOnlyAts().contains(AT.SRL) && acl14DepFeats) {
    fePrm.dpFePrm.firstOrderTpls=srlFePrm.fePrm.pairTemplates;
  }
  if (useTemplates) {
    log.info(""String_Node_Str"" + srlFePrm.fePrm.soloTemplates.size());
    log.info(""String_Node_Str"" + srlFePrm.fePrm.pairTemplates.size());
    if (senseFeatTplsOut != null) {
      TemplateWriter.write(senseFeatTplsOut,srlFePrm.fePrm.soloTemplates);
    }
    if (argFeatTplsOut != null) {
      TemplateWriter.write(argFeatTplsOut,srlFePrm.fePrm.pairTemplates);
    }
  }
}","/** 
 * Do feature selection and update fePrm with the chosen feature templates.
 */
private static void featureSelection(AnnoSentenceCollection inputSents,AnnoSentenceCollection goldSents,JointNlpFeatureExtractorPrm fePrm){
  if (modelIn != null) {
    return;
  }
  SrlFeatureExtractorPrm srlFePrm=fePrm.srlFePrm;
  removeAts(fePrm);
  if (useTemplates && featureSelection) {
    CorpusStatisticsPrm csPrm=getCorpusStatisticsPrm();
    IGFeatureTemplateSelectorPrm prm=getInformationGainFeatureSelectorPrm();
    SrlFeatTemplates sft=new SrlFeatTemplates(srlFePrm.fePrm.soloTemplates,srlFePrm.fePrm.pairTemplates,null);
    IGFeatureTemplateSelector ig=new IGFeatureTemplateSelector(prm);
    sft=ig.getFeatTemplatesForSrl(inputSents,goldSents,csPrm,sft);
    fePrm.srlFePrm.fePrm.soloTemplates=sft.srlSense;
    fePrm.srlFePrm.fePrm.pairTemplates=sft.srlArg;
  }
  if (CorpusHandler.getGoldOnlyAts().contains(AT.SRL) && acl14DepFeats) {
    fePrm.dpFePrm.firstOrderTpls=srlFePrm.fePrm.pairTemplates;
  }
  if (useTemplates) {
    log.info(""String_Node_Str"" + srlFePrm.fePrm.soloTemplates.size());
    log.info(""String_Node_Str"" + srlFePrm.fePrm.pairTemplates.size());
    if (senseFeatTplsOut != null) {
      TemplateWriter.write(senseFeatTplsOut,srlFePrm.fePrm.soloTemplates);
    }
    if (argFeatTplsOut != null) {
      TemplateWriter.write(argFeatTplsOut,srlFePrm.fePrm.pairTemplates);
    }
  }
}",0.9793403407031532
131257,"private void ensureHighLowSupport(){
  if (cachedSupports) {
    return;
  }
  if (cs == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  ensureRootPath();
  String parentPos;
  boolean haveArgLow=false;
  boolean havePredLow=false;
  int i;
  this.lowSupportNoun=-1;
  this.highSupportNoun=-1;
  this.lowSupportVerb=-1;
  this.highSupportVerb=-1;
  for (  Pair<Integer,Dir> a : rootPath) {
    i=a.get1();
    if (i == -1) {
      break;
    }
    parentPos=sent.getPosTag(i);
    if (LanguageConstants.isNoun(parentPos,cs.getLanguage())) {
      if (!haveArgLow) {
        haveArgLow=true;
        this.lowSupportNoun=i;
        this.highSupportNoun=i;
      }
 else {
        this.highSupportNoun=i;
      }
    }
 else     if (LanguageConstants.isVerb(parentPos,cs.getLanguage())) {
      if (!havePredLow) {
        havePredLow=true;
        this.lowSupportVerb=i;
        this.highSupportVerb=i;
      }
 else {
        this.highSupportVerb=i;
      }
    }
  }
  cachedSupports=true;
}","private void ensureHighLowSupport(){
  if (cachedSupports) {
    return;
  }
  if (cs == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  ensureRootPath();
  String parentPos;
  boolean haveArgLow=false;
  boolean havePredLow=false;
  int i;
  this.lowSupportNoun=-1;
  this.highSupportNoun=-1;
  this.lowSupportVerb=-1;
  this.highSupportVerb=-1;
  if (rootPath != null) {
    for (    Pair<Integer,Dir> a : rootPath) {
      i=a.get1();
      if (i == -1) {
        break;
      }
      parentPos=sent.getPosTag(i);
      if (LanguageConstants.isNoun(parentPos,cs.getLanguage())) {
        if (!haveArgLow) {
          haveArgLow=true;
          this.lowSupportNoun=i;
          this.highSupportNoun=i;
        }
 else {
          this.highSupportNoun=i;
        }
      }
 else       if (LanguageConstants.isVerb(parentPos,cs.getLanguage())) {
        if (!havePredLow) {
          havePredLow=true;
          this.lowSupportVerb=i;
          this.highSupportVerb=i;
        }
 else {
          this.highSupportVerb=i;
        }
      }
    }
  }
  cachedSupports=true;
}",0.9581005586592178
131258,"private void ensureDpPathShare(){
  if (dpPathShare != null) {
    return;
  }
  this.dpPathShare=new ArrayList<Pair<Integer,DepTree.Dir>>();
  List<Pair<Integer,Dir>> argRootPath=aTok.getRootPath();
  List<Pair<Integer,Dir>> predRootPath=pTok.getRootPath();
  int i=argRootPath.size() - 1;
  int j=predRootPath.size() - 1;
  Pair<Integer,DepTree.Dir> argP=argRootPath.get(i);
  Pair<Integer,DepTree.Dir> predP=predRootPath.get(j);
  while (argP.equals(predP)) {
    this.dpPathShare.add(argP);
    if (i == 0 || j == 0) {
      break;
    }
    i--;
    j--;
    argP=argRootPath.get(i);
    predP=predRootPath.get(j);
  }
  Collections.reverse(this.dpPathShare);
  int r;
  if (this.dpPathShare.isEmpty()) {
    r=-1;
    this.dpPathPred=new ArrayList<Pair<Integer,Dir>>();
    this.dpPathArg=new ArrayList<Pair<Integer,Dir>>();
  }
 else {
    r=this.dpPathShare.get(0).get1();
    this.dpPathPred=DepTree.getDependencyPath(pidx,r,parents);
    this.dpPathArg=DepTree.getDependencyPath(aidx,r,parents);
  }
}","private void ensureDpPathShare(){
}",0.0669216061185468
131259,"/** 
 * Gets features of the form:  path(lca(p,c),root).bc0+dir.noDup children(p).bc0.seq line(p,c).t.noDup
 * @param tpl Structured feature template.
 * @param local Local observations.
 * @param feats The feature list to which this will be added.
 */
protected void addListFeature(FeatTemplate3 tpl,LocalObservations local,List<String> feats){
  PositionList pl=tpl.pl;
  TokProperty prop=tpl.prop;
  EdgeProperty eprop=tpl.eprop;
  ListModifier lmod=tpl.lmod;
  if (prop == null && eprop == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  List<String> vals;
switch (pl) {
case CHILDREN_P:
case NO_FAR_CHILDREN_P:
case CHILDREN_C:
case NO_FAR_CHILDREN_C:
case LINE_P_C:
case LINE_RI_RK:
case BTWN_P_C:
    if (eprop != null) {
      throw new IllegalStateException(""String_Node_Str"" + eprop + ""String_Node_Str""+ tpl);
    }
 else     if (prop == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  List<Integer> posList=getPositionList(pl,local);
vals=getTokPropsForList(prop,posList);
listAndPathHelper(vals,lmod,tpl,feats);
return;
case PATH_P_C:
case PATH_C_LCA:
case PATH_P_LCA:
case PATH_LCA_ROOT:
List<Pair<Integer,Dir>> path=getPath(pl,local);
vals=getTokPropsForPath(prop,eprop,path);
listAndPathHelper(vals,lmod,tpl,feats);
return;
default :
throw new IllegalStateException();
}
}","/** 
 * Gets features of the form:  path(lca(p,c),root).bc0+dir.noDup children(p).bc0.seq line(p,c).t.noDup
 * @param tpl Structured feature template.
 * @param local Local observations.
 * @param feats The feature list to which this will be added.
 */
protected void addListFeature(FeatTemplate3 tpl,LocalObservations local,List<String> feats){
  PositionList pl=tpl.pl;
  TokProperty prop=tpl.prop;
  EdgeProperty eprop=tpl.eprop;
  ListModifier lmod=tpl.lmod;
  if (prop == null && eprop == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  List<String> vals;
switch (pl) {
case CHILDREN_P:
case NO_FAR_CHILDREN_P:
case CHILDREN_C:
case NO_FAR_CHILDREN_C:
case LINE_P_C:
case LINE_RI_RK:
case BTWN_P_C:
    if (eprop != null) {
      throw new IllegalStateException(""String_Node_Str"" + eprop + ""String_Node_Str""+ tpl);
    }
 else     if (prop == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  List<Integer> posList=getPositionList(pl,local);
vals=getTokPropsForList(prop,posList);
listAndPathHelper(vals,lmod,tpl,feats);
return;
case PATH_P_C:
case PATH_C_LCA:
case PATH_P_LCA:
case PATH_LCA_ROOT:
List<Pair<Integer,Dir>> path=getPath(pl,local);
if (path != null) {
vals=getTokPropsForPath(prop,eprop,path);
listAndPathHelper(vals,lmod,tpl,feats);
}
 else {
feats.add(toFeat(tpl.getName(),""String_Node_Str""));
}
return;
default :
throw new IllegalStateException();
}
}",0.9694989106753812
131260,"public int getCountOfNonConsecutivesInPath(){
  List<Pair<Integer,Dir>> path=getDependencyPath();
  int count=0;
  if (path.size() > 0) {
    for (int i=1; i < path.size(); i++) {
      int current=path.get(i).get1();
      int previous=path.get(i - 1).get1();
      if (Math.abs(current - previous) != 1) {
        count++;
      }
    }
  }
  return count;
}","public int getCountOfNonConsecutivesInPath(){
  List<Pair<Integer,Dir>> path=getDependencyPath();
  int count=0;
  if (path != null && path.size() > 0) {
    for (int i=1; i < path.size(); i++) {
      int current=path.get(i).get1();
      int previous=path.get(i - 1).get1();
      if (Math.abs(current - previous) != 1) {
        count++;
      }
    }
  }
  return count;
}",0.9782608695652174
131261,"private String getOtherFeatSingleton(OtherFeat template,LocalObservations local){
  int pidx=local.getPidx();
  int cidx=local.getCidx();
  FeaturizedTokenPair pair=getFeatTokPair(pidx,cidx);
switch (template) {
case DISTANCE:
    return Integer.toString(Math.abs(pidx - cidx));
case GENEOLOGY:
  return pair.getGeneologicalRelation();
case RELATIVE:
return pair.getRelativePosition();
case CONTINUITY:
return Integer.toString(pair.getCountOfNonConsecutivesInPath());
case PATH_LEN:
return Integer.toString(binInt(pair.getDependencyPath().size(),0,2,5,10,20,30,40));
case SENT_LEN:
return Integer.toString(binInt(fSent.size(),0,2,5,10,20,30,40));
case RULE_IS_UNARY:
return local.getRule().isUnary() ? ""String_Node_Str"" : ""String_Node_Str"";
default :
throw new IllegalStateException();
}
}","private String getOtherFeatSingleton(OtherFeat template,LocalObservations local){
  int pidx=local.getPidx();
  int cidx=local.getCidx();
  FeaturizedTokenPair pair=getFeatTokPair(pidx,cidx);
switch (template) {
case DISTANCE:
    return Integer.toString(Math.abs(pidx - cidx));
case GENEOLOGY:
  return pair.getGeneologicalRelation();
case RELATIVE:
return pair.getRelativePosition();
case CONTINUITY:
return Integer.toString(pair.getCountOfNonConsecutivesInPath());
case PATH_LEN:
List<Pair<Integer,Dir>> depPath=pair.getDependencyPath();
int pathLen=depPath == null ? 0 : depPath.size();
return Integer.toString(binInt(pathLen,0,2,5,10,20,30,40));
case SENT_LEN:
return Integer.toString(binInt(fSent.size(),0,2,5,10,20,30,40));
case RULE_IS_UNARY:
return local.getRule().isUnary() ? ""String_Node_Str"" : ""String_Node_Str"";
default :
throw new IllegalStateException();
}
}",0.914560770156438
131262,"@Override public void train(AnnoSentenceCollection trainInput,AnnoSentenceCollection trainGold,AnnoSentenceCollection devInput,AnnoSentenceCollection devGold){
  for (  AnnoSentence sent : trainGold) {
    new LabelSequence<String>(alphabet,sent.getPosTags());
  }
  alphabet.stopGrowth();
  mat=new DenseIntegerMatrix(alphabet.size(),alphabet.size());
  mat.fill(0);
  for (  AnnoSentence sent : trainGold) {
    LabelSequence<String> tagSeq=new LabelSequence<String>(alphabet,sent.getPosTags());
    int[] tags=tagSeq.getLabelIds();
    int[] parents=sent.getParents();
    for (int c=0; c < parents.length; c++) {
      int p=parents[c];
      if (p == -1) {
        continue;
      }
      int dist=Math.abs(p - c);
      if (dist > mat.get(tags[p],tags[c])) {
        mat.set(tags[p],tags[c],dist);
      }
    }
  }
}","@Override public void train(AnnoSentenceCollection trainInput,AnnoSentenceCollection trainGold,AnnoSentenceCollection devInput,AnnoSentenceCollection devGold){
  for (  AnnoSentence sent : trainGold) {
    new LabelSequence<String>(alphabet,sent.getPosTags());
  }
  mat=new DenseIntegerMatrix(alphabet.size(),alphabet.size());
  mat.fill(0);
  for (  AnnoSentence sent : trainGold) {
    LabelSequence<String> tagSeq=new LabelSequence<String>(alphabet,sent.getPosTags());
    int[] tags=tagSeq.getLabelIds();
    int[] parents=sent.getParents();
    for (int c=0; c < parents.length; c++) {
      int p=parents[c];
      if (p == -1) {
        continue;
      }
      int dist=Math.abs(p - c);
      if (dist > mat.get(tags[p],tags[c])) {
        mat.set(tags[p],tags[c],dist);
      }
    }
  }
}",0.9845774213448488
131263,"/** 
 * Compares marginals and MBR decode for different numbers of BP iterations. Prng.seed(12345); 2 iters vs. 10 iters: Errors: marginals=93 parents=36 5 iters vs. 10 iters: Errors: marginals=14 parents=2 6 iters vs. 10 iters: Errors: marginals=8 parents=2 9 iters vs. 10 iters: Errors: marginals=1 parents=0 Prng.seed(123456789101112l); 2 iters vs. 10 iters: Errors: marginals=94 parents=51 5 iters vs. 10 iters: Errors: marginals=61 parents=23 6 iters vs. 10 iters: Errors: marginals=42 parents=11 9 iters vs. 10 iters: Errors: marginals=35 parents=16
 */
@Test public void testEqualMarginalsAndParentsNumBpIters(){
  AnnoSentenceCollection sents=AnnoSentenceReaderSpeedTest.readPtbYmConllx();
  int numParams=1000000;
  FgModel model=new FgModel(numParams);
  Prng.seed(123456789101112l);
  model.setRandomStandardNormal();
  CorpusStatistics cs=new CorpusStatistics(new CorpusStatisticsPrm());
  cs.init(sents);
  FeatureNames alphabet=new FeatureNames();
  boolean onlyFast=true;
  int s=0;
  int n=0;
  int numSentsWithDiffMargs=0;
  int numSentsWithDiffParents=0;
  Timer t=new Timer();
  t.start();
  for (  AnnoSentence sent : sents) {
    if (sent.size() > 10) {
      continue;
    }
    FactorGraph fg1, fg2;
    ErmaBp bp1, bp2;
    int[] parents1, parents2;
{
      UFgExample ex=get2ndOrderFg(sent,cs,alphabet,numParams,onlyFast);
      fg1=ex.getFgLatPred();
      fg1.updateFromModel(model);
      bp1=DepParseInferenceSpeedTest.runBp(fg1,6);
      DepParseDecoder decode=new DepParseDecoder();
      parents1=decode.decode(bp1,ex,sent);
    }
{
      UFgExample ex=get2ndOrderFg(sent,cs,alphabet,numParams,onlyFast);
      fg2=ex.getFgLatPred();
      fg2.updateFromModel(model);
      bp2=DepParseInferenceSpeedTest.runBp(fg2,10);
      DepParseDecoder decode=new DepParseDecoder();
      parents2=decode.decode(bp2,ex,sent);
    }
    try {
      assertEqualMarginals(fg1,bp1,fg2,bp2,1);
    }
 catch (    AssertionError e) {
      numSentsWithDiffMargs++;
    }
    try {
      assertArrayEquals(parents1,parents2);
    }
 catch (    AssertionError e) {
      numSentsWithDiffParents++;
    }
    n+=sent.size();
    if (s++ % 1 == 0) {
      t.stop();
      System.out.println(String.format(""String_Node_Str"",s,n,n / t.totSec()));
      t.start();
    }
    if (s > 102) {
      break;
    }
  }
  t.stop();
  System.out.printf(""String_Node_Str"",numSentsWithDiffMargs,numSentsWithDiffParents);
  System.out.println(""String_Node_Str"" + t.totSec());
  System.out.println(""String_Node_Str"" + (sents.getNumTokens() / t.totSec()));
}","/** 
 * Compares marginals and MBR decode for different numbers of BP iterations. Prng.seed(12345); 2 iters vs. 10 iters: Errors: marginals=93 parents=36 5 iters vs. 10 iters: Errors: marginals=14 parents=2 6 iters vs. 10 iters: Errors: marginals=8 parents=2 9 iters vs. 10 iters: Errors: marginals=1 parents=0 Prng.seed(123456789101112l); 2 iters vs. 10 iters: Errors: marginals=94 parents=51 5 iters vs. 10 iters: Errors: marginals=61 parents=23 6 iters vs. 10 iters: Errors: marginals=42 parents=11 9 iters vs. 10 iters: Errors: marginals=35 parents=16
 */
@Test public void testEqualMarginalsAndParentsNumBpIters(){
  AnnoSentenceCollection sents=AnnoSentenceReaderSpeedTest.readPtbYmConllx();
  int numParams=1000000;
  FgModel model=new FgModel(numParams);
  Prng.seed(123456789101112l);
  model.setRandomStandardNormal();
  CorpusStatistics cs=new CorpusStatistics(new CorpusStatisticsPrm());
  cs.init(sents);
  FeatureNames alphabet=new FeatureNames();
  boolean onlyFast=true;
  int s=0;
  int n=0;
  int numSentsWithDiffMargs=0;
  int numSentsWithDiffParents=0;
  Timer t=new Timer();
  t.start();
  for (  AnnoSentence sent : sents) {
    if (sent.size() > 10) {
      continue;
    }
    FactorGraph fg1, fg2;
    ErmaBp bp1, bp2;
    int[] parents1, parents2;
{
      UFgExample ex=get2ndOrderFg(sent,cs,alphabet,numParams,onlyFast);
      fg1=ex.getFgLatPred();
      fg1.updateFromModel(model);
      bp1=DepParseInferenceSpeedTest.runBp(fg1,5);
      DepParseDecoder decode=new DepParseDecoder();
      parents1=decode.decode(bp1,ex,sent);
    }
{
      UFgExample ex=get2ndOrderFg(sent,cs,alphabet,numParams,onlyFast);
      fg2=ex.getFgLatPred();
      fg2.updateFromModel(model);
      bp2=DepParseInferenceSpeedTest.runBp(fg2,10);
      DepParseDecoder decode=new DepParseDecoder();
      parents2=decode.decode(bp2,ex,sent);
    }
    try {
      assertEqualMarginals(fg1,bp1,fg2,bp2,1);
    }
 catch (    AssertionError e) {
      numSentsWithDiffMargs++;
    }
    try {
      assertArrayEquals(parents1,parents2);
    }
 catch (    AssertionError e) {
      numSentsWithDiffParents++;
    }
    n+=sent.size();
    if (s++ % 1 == 0) {
      t.stop();
      System.out.println(String.format(""String_Node_Str"",s,n,n / t.totSec()));
      t.start();
    }
    if (s > 102) {
      break;
    }
  }
  t.stop();
  System.out.printf(""String_Node_Str"",numSentsWithDiffMargs,numSentsWithDiffParents);
  System.out.println(""String_Node_Str"" + t.totSec());
  System.out.println(""String_Node_Str"" + (sents.getNumTokens() / t.totSec()));
}",0.9996081504702194
131264,"/** 
 * Commenting out lines 80 and 83 in FastDepParseFeatureExtractor allows this test to (correctly) pass. // FastDepParseFe.add2ndOrderSiblingFeats(isent, f2.i, f2.j, f2.k, feats); // FastDepParseFe.add2ndOrderGrandparentFeats(isent, f2.k, f2.i, f2.j, feats); This compares the behavior a first-order model and a second-order model where the second order model has  some extra ""dummy"" factors that are only multiplying in the value 1.
 */
public void testEqualMarginalsAndParentsFirstVsSecondOrder(){
  AnnoSentenceCollection sents=AnnoSentenceReaderSpeedTest.readPtbYmConllx();
  int numParams=1000000;
  FgModel model=new FgModel(numParams);
  model.setRandomStandardNormal();
  CorpusStatistics cs=new CorpusStatistics(new CorpusStatisticsPrm());
  cs.init(sents);
  FeatureNames alphabet=new FeatureNames();
  boolean onlyFast=true;
  int s=0;
  int n=0;
  Timer t=new Timer();
  t.start();
  for (  AnnoSentence sent : sents) {
    FactorGraph fg1, fg2;
    ErmaBp bp1, bp2;
    int[] parents1, parents2;
{
      UFgExample ex=DepParseFactorGraphBuilderSpeedTest.get1stOrderFg(sent,cs,alphabet,numParams,onlyFast);
      fg1=ex.getFgLatPred();
      fg1.updateFromModel(model);
      bp1=DepParseInferenceSpeedTest.runBp(fg1);
      DepParseDecoder decode=new DepParseDecoder();
      parents1=decode.decode(bp1,ex,sent);
    }
{
      UFgExample ex=get2ndOrderFg(sent,cs,alphabet,numParams,onlyFast);
      fg2=ex.getFgLatPred();
      fg2.updateFromModel(model);
      bp2=DepParseInferenceSpeedTest.runBp(fg2);
      DepParseDecoder decode=new DepParseDecoder();
      parents2=decode.decode(bp2,ex,sent);
    }
    assertEqualMarginals(fg1,bp1,fg2,bp2,1e-7);
    assertArrayEquals(parents1,parents2);
    n+=sent.size();
    if (s++ % 1 == 0) {
      t.stop();
      System.out.println(String.format(""String_Node_Str"",s,n,n / t.totSec()));
      t.start();
    }
    if (s > 102) {
      break;
    }
  }
  t.stop();
  System.out.println(""String_Node_Str"" + t.totSec());
  System.out.println(""String_Node_Str"" + (sents.getNumTokens() / t.totSec()));
}","/** 
 * Commenting out lines 80 and 83 in   {@link FastDepParseFeatureExtractor} allows this test to (correctly) pass.// FastDepParseFe.add2ndOrderSiblingFeats(isent, f2.i, f2.j, f2.k, feats); // FastDepParseFe.add2ndOrderGrandparentFeats(isent, f2.k, f2.i, f2.j, feats); This compares the behavior a first-order model and a second-order model where the second order model has  some extra ""dummy"" factors that are only multiplying in the value 1. Errors: marginals=6 parents=0
 */
@Test public void testEqualMarginalsAndParentsFirstVsSecondOrder(){
  AnnoSentenceCollection sents=AnnoSentenceReaderSpeedTest.readPtbYmConllx();
  int numParams=1000000;
  FgModel model=new FgModel(numParams);
  model.setRandomStandardNormal();
  CorpusStatistics cs=new CorpusStatistics(new CorpusStatisticsPrm());
  cs.init(sents);
  FeatureNames alphabet=new FeatureNames();
  boolean onlyFast=true;
  int numSentsWithDiffMargs=0;
  int numSentsWithDiffParents=0;
  int s=0;
  int n=0;
  Timer t=new Timer();
  t.start();
  for (  AnnoSentence sent : sents) {
    if (sent.size() > 10) {
      continue;
    }
    FactorGraph fg1, fg2;
    ErmaBp bp1, bp2;
    int[] parents1, parents2;
{
      UFgExample ex=DepParseFactorGraphBuilderSpeedTest.get1stOrderFg(sent,cs,alphabet,numParams,onlyFast);
      fg1=ex.getFgLatPred();
      fg1.updateFromModel(model);
      bp1=DepParseInferenceSpeedTest.runBp(fg1);
      DepParseDecoder decode=new DepParseDecoder();
      parents1=decode.decode(bp1,ex,sent);
    }
{
      UFgExample ex=get2ndOrderFg(sent,cs,alphabet,numParams,onlyFast);
      fg2=ex.getFgLatPred();
      fg2.updateFromModel(model);
      bp2=DepParseInferenceSpeedTest.runBp(fg2);
      DepParseDecoder decode=new DepParseDecoder();
      parents2=decode.decode(bp2,ex,sent);
    }
    try {
      assertEqualMarginals(fg1,bp1,fg2,bp2,1e-5);
    }
 catch (    AssertionError e) {
      System.out.println(e.getMessage());
      numSentsWithDiffMargs++;
    }
    try {
      assertArrayEquals(parents1,parents2);
    }
 catch (    AssertionError e) {
      numSentsWithDiffParents++;
    }
    n+=sent.size();
    if (s++ % 1 == 0) {
      t.stop();
      System.out.println(String.format(""String_Node_Str"",s,n,n / t.totSec()));
      t.start();
    }
    if (s > 102) {
      break;
    }
  }
  t.stop();
  System.out.printf(""String_Node_Str"",numSentsWithDiffMargs,numSentsWithDiffParents);
  System.out.println(""String_Node_Str"" + t.totSec());
  System.out.println(""String_Node_Str"" + (sents.getNumTokens() / t.totSec()));
}",0.8860318152102855
131265,"@Test public void testExactVsApproxInf2ndOrderGraOnly(){
}","@Test public void testExactVsApproxInf2ndOrderGraOnly(){
  AnnoSentenceCollection sents=AnnoSentenceReaderSpeedTest.readPtbYmConllx();
  int numParams=1000000;
  FgModel model=new FgModel(numParams);
  Prng.seed(123456789101112l);
  model.setRandomStandardNormal();
  CorpusStatistics cs=new CorpusStatistics(new CorpusStatisticsPrm());
  cs.init(sents);
  FeatureNames alphabet=new FeatureNames();
  boolean onlyFast=true;
  int s=0;
  int n=0;
  double sumDiffs=0;
  int diffCount=0;
  int numSentsWithDiffMargs=0;
  int numToksWithDiffParents=0;
  Timer t=new Timer();
  t.start();
  for (  AnnoSentence sent : sents) {
    if (sent.size() > 10) {
      continue;
    }
    FactorGraph fg1, fg2;
    EdgeScores es1, es2;
    FgInferencer bp1, bp2;
    int[] parents1, parents2;
{
      UFgExample ex=get2ndOrderGraOnlyFg(sent,cs,alphabet,numParams,onlyFast);
      fg1=ex.getFgLatPred();
      fg1.updateFromModel(model);
      bp1=DepParseInferenceSpeedTest.runBp(fg1,10);
      DepParseDecoder decode=new DepParseDecoder();
      parents1=decode.decode(bp1,ex,sent);
    }
{
      UFgExample ex=get2ndOrderGraOnlyFg(sent,cs,alphabet,numParams,onlyFast);
      fg2=ex.getFgLatPred();
      fg2.updateFromModel(model);
      bp2=new O2AllGraFgInferencer(fg2,Algebras.LOG_SIGN_ALGEBRA);
      bp2.run();
      DepParseDecoder decode=new DepParseDecoder();
      parents2=decode.decode(bp2,ex,sent);
    }
    try {
      assertEqualMarginals(fg1,bp1,fg2,bp2,1);
    }
 catch (    AssertionError e) {
      numSentsWithDiffMargs++;
    }
    for (int c=0; c < parents1.length; c++) {
      if (parents1[c] != parents2[c]) {
        numToksWithDiffParents++;
      }
    }
    n+=sent.size();
    if (s++ % 1 == 0) {
      t.stop();
      System.out.println(String.format(""String_Node_Str"",s,n,n / t.totSec()));
      t.start();
    }
    if (s > 102) {
      break;
    }
  }
  t.stop();
  System.out.printf(""String_Node_Str"",numSentsWithDiffMargs,numToksWithDiffParents);
  System.out.printf(""String_Node_Str"",sumDiffs / diffCount);
  System.out.println(""String_Node_Str"" + t.totSec());
  System.out.println(""String_Node_Str"" + (sents.getNumTokens() / t.totSec()));
}",0.0520880107768298
131266,protected abstract VarTensor getVarBeliefs(Var var);,"/** 
 * Gets the normalized variable beliefs in the semiring of the inferencer. 
 */
protected abstract VarTensor getVarBeliefs(Var var);",0.5502645502645502
131267,protected abstract VarTensor getFactorBeliefs(Factor factor);,"/** 
 * Gets the normalized factor beliefs in the semiring of the inferencer. 
 */
protected abstract VarTensor getFactorBeliefs(Factor factor);",0.5951219512195122
131268,public abstract double getPartitionBelief();,"/** 
 * Gets the partition belief in the semiring of the inferencer. 
 */
public abstract double getPartitionBelief();",0.5432098765432098
131269,"/** 
 * Can be used for either sibling or grandparent features. 
 */
private static void addTripletFeatures(IntAnnoSentence sent,int p,int c,int s,FeatureVector feats,byte flags){
  short pWord=(p < 0) ? TOK_WALL_INT : sent.getWord(p);
  short cWord=(c < 0) ? TOK_WALL_INT : sent.getWord(c);
  short sWord=(s < 0) ? TOK_WALL_INT : sent.getWord(s);
  byte pPos=(p < 0) ? TOK_WALL_INT : sent.getCposTag(p);
  byte cPos=(c < 0) ? TOK_WALL_INT : sent.getCposTag(c);
  byte sPos=(s < 0) ? TOK_WALL_INT : sent.getCposTag(s);
  byte templ=0;
  addFeat(feats,encodeFeatureBBB_(templ++,flags,pPos,cPos,sPos));
  addFeat(feats,encodeFeatureBB__(templ++,flags,pPos,sPos));
  addFeat(feats,encodeFeatureBB__(templ++,flags,cPos,sPos));
  if (extraTriplets) {
    addFeat(feats,encodeFeatureBB__(templ++,flags,pPos,cPos));
  }
  addFeat(feats,encodeFeatureSB__(templ++,flags,sWord,pPos));
  addFeat(feats,encodeFeatureSB__(templ++,flags,sWord,cPos));
  addFeat(feats,encodeFeatureSB__(templ++,flags,pWord,sPos));
  addFeat(feats,encodeFeatureSB__(templ++,flags,cWord,sPos));
  if (extraTriplets) {
    addFeat(feats,encodeFeatureSB__(templ++,flags,cWord,pPos));
    addFeat(feats,encodeFeatureSB__(templ++,flags,pWord,cPos));
  }
  addFeat(feats,encodeFeatureSS__(templ++,flags,pWord,sWord));
  addFeat(feats,encodeFeatureSS__(templ++,flags,cWord,sWord));
  if (extraTriplets) {
    addFeat(feats,encodeFeatureSS__(templ++,flags,pWord,cWord));
  }
}","/** 
 * Can be used for either sibling or grandparent features. 
 */
private static void addTripletFeatures(IntAnnoSentence sent,int p,int c,int s,FeatureVector feats,byte flags){
  short pWord=(p < 0) ? TOK_WALL_INT : sent.getWord(p);
  short cWord=(c < 0) ? TOK_WALL_INT : sent.getWord(c);
  short sWord=(s < 0) ? TOK_WALL_INT : sent.getWord(s);
  byte pCpos=(p < 0) ? TOK_WALL_INT : sent.getCposTag(p);
  byte cCpos=(c < 0) ? TOK_WALL_INT : sent.getCposTag(c);
  byte sCpos=(s < 0) ? TOK_WALL_INT : sent.getCposTag(s);
  byte templ=0;
  addFeat(feats,encodeFeatureBBB_(templ++,flags,pCpos,cCpos,sCpos));
  addFeat(feats,encodeFeatureBB__(TriTs.HQ_SQ,flags,pCpos,sCpos));
  addFeat(feats,encodeFeatureBB__(TriTs.MQ_SQ,flags,cCpos,sCpos));
  if (extraTriplets) {
    addFeat(feats,encodeFeatureBB__(TriTs.HQ_MQ,flags,pCpos,cCpos));
  }
  addFeat(feats,encodeFeatureSB__(TriTs.SW_HQ,flags,sWord,pCpos));
  addFeat(feats,encodeFeatureSB__(TriTs.SW_MQ,flags,sWord,cCpos));
  addFeat(feats,encodeFeatureSB__(TriTs.HW_SQ,flags,pWord,sCpos));
  addFeat(feats,encodeFeatureSB__(TriTs.MW_SQ,flags,cWord,sCpos));
  if (extraTriplets) {
    addFeat(feats,encodeFeatureSB__(TriTs.MW_HQ,flags,cWord,pCpos));
    addFeat(feats,encodeFeatureSB__(TriTs.HW_MQ,flags,pWord,cCpos));
  }
  addFeat(feats,encodeFeatureSS__(TriTs.HW_SW,flags,pWord,sWord));
  addFeat(feats,encodeFeatureSS__(TriTs.MW_SW,flags,cWord,sWord));
  if (extraTriplets) {
    addFeat(feats,encodeFeatureSS__(TriTs.HW_MW,flags,pWord,cWord));
  }
}",0.7826975476839237
131270,"@Override public void annotate(AnnoSentenceCollection inputSents){
  log.info(""String_Node_Str"" + pruneModel);
  JointNlpFgModel model=(JointNlpFgModel)Files.deserialize(pruneModel);
  ObsFeatureConjoiner ofc=model.getOfc();
  CorpusStatistics cs=model.getCs();
  JointNlpFeatureExtractorPrm fePrm=model.getFePrm();
  exPrm.fgPrm.includeSrl=false;
  exPrm.fgPrm.dpPrm=new DepParseFactorGraphBuilderPrm();
  exPrm.fgPrm.dpPrm.linkVarType=VarType.PREDICTED;
  exPrm.fgPrm.dpPrm.grandparentFactors=false;
  exPrm.fgPrm.dpPrm.siblingFactors=false;
  exPrm.fgPrm.dpPrm.unaryFactors=true;
  exPrm.fgPrm.dpPrm.useProjDepTreeFactor=true;
  exPrm.fgPrm.dpPrm.pruneEdges=true;
  exPrm.fePrm=fePrm;
  JointNlpFgExamplesBuilder builder=new JointNlpFgExamplesBuilder(exPrm,ofc,cs,false);
  FgExampleList data=builder.getData(inputSents,null);
  log.info(""String_Node_Str"");
  int numEdgesTot=0;
  int numEdgesKept=0;
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < inputSents.size(); i++) {
    LFgExample ex=data.get(i);
    AnnoSentence inputSent=inputSents.get(i);
    JointNlpDecoder decoder=new JointNlpDecoder(dPrm);
    AnnoSentence predSent=decoder.decode(model,ex,inputSent);
    int[] parents=predSent.getParents();
    if (parents != null) {
      inputSent.setParents(parents);
    }
    DepEdgeMask mask=predSent.getDepEdgeMask();
    if (mask != null) {
      if (inputSent.getDepEdgeMask() == null) {
        inputSent.setDepEdgeMask(mask);
      }
 else {
        inputSent.getDepEdgeMask().and(mask);
      }
    }
    numEdgesKept+=mask.getCount();
    int n=predSent.getWords().size();
    numEdgesTot+=n * n;
  }
  timer.stop();
  log.info(String.format(""String_Node_Str"",inputSents.getNumTokens() / timer.totSec()));
  int numEdgesPruned=numEdgesTot - numEdgesKept;
  log.info(String.format(""String_Node_Str"",numEdgesPruned,numEdgesTot,(double)numEdgesPruned / numEdgesTot));
}","@Override public void annotate(AnnoSentenceCollection inputSents){
  log.info(""String_Node_Str"" + pruneModel);
  JointNlpFgModel model=(JointNlpFgModel)Files.deserialize(pruneModel);
  ObsFeatureConjoiner ofc=model.getOfc();
  CorpusStatistics cs=model.getCs();
  JointNlpFeatureExtractorPrm fePrm=model.getFePrm();
  exPrm.fgPrm.includeSrl=false;
  exPrm.fgPrm.dpPrm=new DepParseFactorGraphBuilderPrm();
  exPrm.fgPrm.dpPrm.linkVarType=VarType.PREDICTED;
  exPrm.fgPrm.dpPrm.grandparentFactors=false;
  exPrm.fgPrm.dpPrm.siblingFactors=false;
  exPrm.fgPrm.dpPrm.unaryFactors=true;
  exPrm.fgPrm.dpPrm.useProjDepTreeFactor=true;
  exPrm.fgPrm.dpPrm.pruneEdges=true;
  exPrm.fePrm=fePrm;
  JointNlpFgExamplesBuilder builder=new JointNlpFgExamplesBuilder(exPrm,ofc,cs,false);
  FgExampleList data=builder.getData(inputSents,null);
  log.info(""String_Node_Str"");
  int numEdgesTot=0;
  int numEdgesKept=0;
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < inputSents.size(); i++) {
    LFgExample ex=data.get(i);
    AnnoSentence inputSent=inputSents.get(i);
    DepEdgeMaskDecoder decoder=new DepEdgeMaskDecoder(dPrm.maskPrm);
    FactorGraph fgLatPred=ex.getFgLatPred();
    fgLatPred.updateFromModel(model);
    FgInferencer infLatPred=dPrm.mbrPrm.infFactory.getInferencer(fgLatPred);
    infLatPred.run();
    DepEdgeMask mask=decoder.decode(infLatPred,ex,inputSent);
    if (mask != null) {
      if (inputSent.getDepEdgeMask() == null) {
        inputSent.setDepEdgeMask(mask);
      }
 else {
        inputSent.getDepEdgeMask().and(mask);
      }
    }
    numEdgesKept+=mask.getCount();
    int n=inputSent.getWords().size();
    numEdgesTot+=n * n;
  }
  timer.stop();
  log.info(String.format(""String_Node_Str"",inputSents.getNumTokens() / timer.totSec()));
  int numEdgesPruned=numEdgesTot - numEdgesKept;
  log.info(String.format(""String_Node_Str"",numEdgesPruned,numEdgesTot,(double)numEdgesPruned / numEdgesTot));
}",0.7822916666666667
131271,"private AnnoSentence decode(UFgExample ex,MbrDecoder mbrDecoder,FgInferencer inf,AnnoSentence sent){
  JointNlpFactorGraph fg=(JointNlpFactorGraph)ex.getOriginalFactorGraph();
  int n=fg.getSentenceLength();
  VarConfig mbrVarConfig=mbrDecoder.getMbrVarConfig();
  AnnoSentence predSent=sent.getShallowCopy();
  SrlGraph srlGraph=SrlDecoder.getSrlGraphFromVarConfig(mbrVarConfig,n);
  if (srlGraph != null) {
    predSent.setSrlGraph(srlGraph);
  }
  int[] parents=(new DepParseDecoder()).decode(inf,ex,sent);
  if (parents != null) {
    DepParseDecoder.addDepParseAssignment(parents,fg.getDpBuilder(),mbrVarConfig);
    predSent.setParents(parents);
  }
  DepEdgeMask depEdgeMask=(new DepEdgeMaskDecoder(prm.maskPrm)).decode(inf,ex,sent);
  if (depEdgeMask != null) {
    predSent.setDepEdgeMask(depEdgeMask);
  }
  List<String> rels=RelationsDecoder.getRelLabelsFromVarConfig(mbrVarConfig);
  if (rels != null) {
    predSent.setRelLabels(rels);
  }
  return predSent;
}","private AnnoSentence decode(UFgExample ex,MbrDecoder mbrDecoder,FgInferencer inf,AnnoSentence sent){
  JointNlpFactorGraph fg=(JointNlpFactorGraph)ex.getOriginalFactorGraph();
  int n=fg.getSentenceLength();
  VarConfig mbrVarConfig=mbrDecoder.getMbrVarConfig();
  AnnoSentence predSent=sent.getShallowCopy();
  SrlGraph srlGraph=SrlDecoder.getSrlGraphFromVarConfig(mbrVarConfig,n);
  if (srlGraph != null) {
    predSent.setSrlGraph(srlGraph);
  }
  int[] parents=(new DepParseDecoder()).decode(inf,ex,sent);
  if (parents != null) {
    DepParseDecoder.addDepParseAssignment(parents,fg.getDpBuilder(),mbrVarConfig);
    predSent.setParents(parents);
  }
  List<String> rels=RelationsDecoder.getRelLabelsFromVarConfig(mbrVarConfig);
  if (rels != null) {
    predSent.setRelLabels(rels);
  }
  return predSent;
}",0.780515117581187
131272,"private void addEmbeddingFeatures(LocalObservations local,ObjFeatVec<String> fv){
  NerMention m1=local.getNe1();
  NerMention m2=local.getNe2();
  Span m1span=m1.getSpan();
  Span m2span=m2.getSpan();
  FeaturizedSentence fsent=new FeaturizedSentence(sent,null);
  String ne1=m1.getEntityType();
  String ne2=m2.getEntityType();
  String ne1ne2=ne1 + ne2;
switch (RelationsOptions.embFeatType) {
case FULL:
    Pair<List<LabeledSpan>,IntArrayList> chunkPair=getSpansFromBIO(sent.getChunks(),true);
  List<LabeledSpan> chunks=chunkPair.get1();
IntArrayList tokIdxToChunkIdx=chunkPair.get2();
int c1=tokIdxToChunkIdx.get(m1.getHead());
int c2=tokIdxToChunkIdx.get(m2.getHead());
int[] chunkHeads=getHeadsOfSpans(chunks,sent.getParents());
for (int b=c1 + 1; b <= c2 - 1; b++) {
int i=chunkHeads[b];
addEmbFeat(""String_Node_Str"",i,fv);
addEmbFeat(""String_Node_Str"" + ne1,i,fv);
addEmbFeat(""String_Node_Str"" + ne2,i,fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,i,fv);
}
case FULL_NO_CHUNKS:
Span btwn=Span.getSpanBtwn(m1span,m2span);
for (int i=btwn.start(); i < btwn.end(); i++) {
addEmbFeat(""String_Node_Str"",i,fv);
addEmbFeat(""String_Node_Str"" + ne1,i,fv);
addEmbFeat(""String_Node_Str"" + ne2,i,fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,i,fv);
}
FeaturizedTokenPair ftp=fsent.getFeatTokPair(m1.getHead(),m2.getHead());
List<Pair<Integer,Dir>> depPath=ftp.getDependencyPath();
if (depPath != null) {
for (Pair<Integer,DepTree.Dir> pair : depPath) {
int i=pair.get1();
addEmbFeat(""String_Node_Str"",i,fv);
addEmbFeat(""String_Node_Str"" + ne1,i,fv);
addEmbFeat(""String_Node_Str"" + ne2,i,fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,i,fv);
}
}
 else {
log.warn(""String_Node_Str"");
}
addEmbFeat(""String_Node_Str"",m1.getHead() - 1,fv);
addEmbFeat(""String_Node_Str"",m1.getHead() + 1,fv);
addEmbFeat(""String_Node_Str"",m1.getHead() - 2,fv);
addEmbFeat(""String_Node_Str"",m1.getHead() + 2,fv);
addEmbFeat(""String_Node_Str"",m2.getHead() - 1,fv);
addEmbFeat(""String_Node_Str"",m2.getHead() + 1,fv);
addEmbFeat(""String_Node_Str"",m2.getHead() - 2,fv);
addEmbFeat(""String_Node_Str"",m2.getHead() + 2,fv);
case HEAD_TYPE:
addEmbFeat(""String_Node_Str"" + ne1,m1.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne2,m1.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,m1.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne1,m2.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne2,m2.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,m2.getHead(),fv);
case HEAD_ONLY:
addEmbFeat(""String_Node_Str"",m1.getHead(),fv);
addEmbFeat(""String_Node_Str"",m2.getHead(),fv);
}
}","private void addEmbeddingFeatures(LocalObservations local,ObjFeatVec<String> fv){
  NerMention m1=local.getNe1();
  NerMention m2=local.getNe2();
  Span m1span=m1.getSpan();
  Span m2span=m2.getSpan();
  FeaturizedSentence fsent=new FeaturizedSentence(sent,null);
  String ne1=m1.getEntityType();
  String ne2=m2.getEntityType();
  String ne1ne2=ne1 + ne2;
switch (RelationsOptions.embFeatType) {
case FULL:
    Pair<List<LabeledSpan>,IntArrayList> chunkPair=getSpansFromBIO(sent.getChunks(),true);
  List<LabeledSpan> chunks=chunkPair.get1();
IntArrayList tokIdxToChunkIdx=chunkPair.get2();
int c1=tokIdxToChunkIdx.get(m1.getHead());
int c2=tokIdxToChunkIdx.get(m2.getHead());
int[] chunkHeads=getHeadsOfSpans(chunks,sent.getParents());
for (int b=c1 + 1; b <= c2 - 1; b++) {
int i=chunkHeads[b];
addEmbFeat(""String_Node_Str"",i,fv);
addEmbFeat(""String_Node_Str"" + ne1,i,fv);
addEmbFeat(""String_Node_Str"" + ne2,i,fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,i,fv);
}
case FULL_NO_CHUNKS:
Span btwn=new Span(m1.getHead() + 1,m2.getHead());
for (int i=btwn.start(); i < btwn.end(); i++) {
addEmbFeat(""String_Node_Str"",i,fv);
addEmbFeat(""String_Node_Str"" + ne1,i,fv);
addEmbFeat(""String_Node_Str"" + ne2,i,fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,i,fv);
}
FeaturizedTokenPair ftp=fsent.getFeatTokPair(m1.getHead(),m2.getHead());
List<Pair<Integer,Dir>> depPath=ftp.getDependencyPath();
if (depPath != null) {
for (Pair<Integer,DepTree.Dir> pair : depPath) {
int i=pair.get1();
addEmbFeat(""String_Node_Str"",i,fv);
addEmbFeat(""String_Node_Str"" + ne1,i,fv);
addEmbFeat(""String_Node_Str"" + ne2,i,fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,i,fv);
}
}
 else {
log.warn(""String_Node_Str"");
}
addEmbFeat(""String_Node_Str"",m1.getHead() - 1,fv);
addEmbFeat(""String_Node_Str"",m1.getHead() + 1,fv);
addEmbFeat(""String_Node_Str"",m1.getHead() - 2,fv);
addEmbFeat(""String_Node_Str"",m1.getHead() + 2,fv);
addEmbFeat(""String_Node_Str"",m2.getHead() - 1,fv);
addEmbFeat(""String_Node_Str"",m2.getHead() + 1,fv);
addEmbFeat(""String_Node_Str"",m2.getHead() - 2,fv);
addEmbFeat(""String_Node_Str"",m2.getHead() + 2,fv);
case HEAD_TYPE:
addEmbFeat(""String_Node_Str"" + ne1,m1.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne2,m1.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,m1.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne1,m2.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne2,m2.getHead(),fv);
addEmbFeat(""String_Node_Str"" + ne1ne2,m2.getHead(),fv);
case HEAD_ONLY:
addEmbFeat(""String_Node_Str"",m1.getHead(),fv);
addEmbFeat(""String_Node_Str"",m2.getHead(),fv);
}
}",0.9881796690307328
131273,"public static int getNumBtwn(AnnoSentence sent,NerMention m1,NerMention m2){
  Span btwn=Span.getSpanBtwn(m1.getSpan(),m2.getSpan());
  int numMentsBtwn=0;
  for (  NerMention m : sent.getNamedEntities()) {
    if (m != m1 && m != m2 && btwn.contains(m.getSpan().start())) {
      numMentsBtwn++;
    }
  }
  return numMentsBtwn;
}","public static int getNumBtwn(AnnoSentence sent,NerMention m1,NerMention m2){
  int m1h=m1.getHead();
  int m2h=m2.getHead();
  Span btwn=new Span(Math.min(m1h,m2h),Math.max(m1h,m2h));
  int numMentsBtwn=0;
  for (  NerMention m : sent.getNamedEntities()) {
    if (m != m1 && m != m2 && btwn.contains(m.getSpan().start())) {
      numMentsBtwn++;
    }
  }
  return numMentsBtwn;
}",0.4831460674157303
131274,"@Override public void train(AnnoSentenceCollection trainInput,AnnoSentenceCollection trainGold,AnnoSentenceCollection devInput,AnnoSentenceCollection devGold){
  for (  Annotator anno : pipeline) {
    if (anno instanceof Trainable) {
      ((Trainable)anno).train(trainInput,trainGold,devInput,devGold);
    }
    anno.annotate(trainInput);
    anno.annotate(devInput);
  }
}","@Override public void train(AnnoSentenceCollection trainInput,AnnoSentenceCollection trainGold,AnnoSentenceCollection devInput,AnnoSentenceCollection devGold){
  for (  Annotator anno : pipeline) {
    if (anno instanceof Trainable) {
      ((Trainable)anno).train(trainInput,trainGold,devInput,devGold);
    }
    anno.annotate(trainInput);
    if (devInput != null) {
      anno.annotate(devInput);
    }
  }
}",0.9543147208121828
131275,"private void loadTest() throws IOException {
  AnnoSentenceReaderPrm prm=getDefaultReaderPrm();
  prm.name=""String_Node_Str"";
  prm.maxNumSentences=testMaxNumSentences;
  prm.maxSentenceLength=testMaxSentenceLength;
  AnnoSentenceReader reader=new AnnoSentenceReader(prm);
  reader.loadSents(test,testType);
  testGoldSents=reader.getData();
  testGoldSents=testGoldSents.getWithAtsRemoved(getRemoveAts());
  if (testGoldOut != null) {
    AnnoSentenceWriterPrm wPrm=new AnnoSentenceWriterPrm();
    wPrm.name=""String_Node_Str"";
    AnnoSentenceWriter writer=new AnnoSentenceWriter(wPrm);
    writer.write(testGoldOut,getTestTypeOut(),testGoldSents);
  }
  testInputSents=testGoldSents.getWithAtsRemoved(getGoldOnlyAts());
}","private void loadTest() throws IOException {
  AnnoSentenceReaderPrm prm=getDefaultReaderPrm();
  prm.name=""String_Node_Str"";
  prm.maxNumSentences=testMaxNumSentences;
  prm.maxSentenceLength=testMaxSentenceLength;
  AnnoSentenceReader reader=new AnnoSentenceReader(prm);
  reader.loadSents(test,testType);
  testGoldSents=reader.getData();
  testGoldSents=testGoldSents.getWithAtsRemoved(getRemoveAts());
  if (testGoldSents != null && testGoldOut != null) {
    AnnoSentenceWriterPrm wPrm=new AnnoSentenceWriterPrm();
    wPrm.name=""String_Node_Str"";
    AnnoSentenceWriter writer=new AnnoSentenceWriter(wPrm);
    writer.write(testGoldOut,getTestTypeOut(),testGoldSents);
  }
  testInputSents=testGoldSents.getWithAtsRemoved(getGoldOnlyAts());
}",0.9830278343516632
131276,"private void loadDev() throws IOException {
  if (dev != null && devType != null) {
    readDev();
  }
  if (hasTrain() && propTrainAsDev > 0) {
    loadTrainAsDev();
  }
  if (devGoldOut != null) {
    AnnoSentenceWriterPrm wPrm=new AnnoSentenceWriterPrm();
    wPrm.name=""String_Node_Str"";
    AnnoSentenceWriter writer=new AnnoSentenceWriter(wPrm);
    writer.write(devGoldOut,getDevTypeOut(),devGoldSents);
  }
}","private void loadDev() throws IOException {
  if (dev != null && devType != null) {
    readDev();
  }
  if (hasTrain() && propTrainAsDev > 0) {
    loadTrainAsDev();
  }
  if (devGoldSents != null && devGoldOut != null) {
    AnnoSentenceWriterPrm wPrm=new AnnoSentenceWriterPrm();
    wPrm.name=""String_Node_Str"";
    AnnoSentenceWriter writer=new AnnoSentenceWriter(wPrm);
    writer.write(devGoldOut,getDevTypeOut(),devGoldSents);
  }
}",0.97196261682243
131277,"private Function getValidationFn(final AnnoSentenceCollection devInput,final AnnoSentenceCollection devGold){
  final Annotator anno=this;
  final Evaluator eval;
  if (CorpusHandler.getPredAts().equals(Lists.getList(AT.DEP_TREE))) {
    eval=new DepParseEvaluator();
  }
 else   if (CorpusHandler.getPredAts().equals(Lists.getList(AT.SRL))) {
    eval=new SrlEvaluator();
  }
 else   if (CorpusHandler.getPredAts().equals(Lists.getList(AT.REL_LABELS))) {
    eval=new RelationEvaluator();
  }
 else {
    log.warn(""String_Node_Str"");
    return null;
  }
  return new Function(){
    @Override public double getValue(    IntDoubleVector point){
      anno.annotate(devInput);
      return eval.evaluate(devInput,devGold,""String_Node_Str"");
    }
    @Override public int getNumDimensions(){
      return -1;
    }
  }
;
}","private Function getValidationFn(final AnnoSentenceCollection devInput,final AnnoSentenceCollection devGold){
  if (devInput == null || devGold == null) {
    return null;
  }
  final Annotator anno=this;
  final Evaluator eval;
  if (CorpusHandler.getPredAts().equals(Lists.getList(AT.DEP_TREE))) {
    eval=new DepParseEvaluator();
  }
 else   if (CorpusHandler.getPredAts().equals(Lists.getList(AT.SRL))) {
    eval=new SrlEvaluator();
  }
 else   if (CorpusHandler.getPredAts().equals(Lists.getList(AT.REL_LABELS))) {
    eval=new RelationEvaluator();
  }
 else {
    log.warn(""String_Node_Str"");
    return null;
  }
  return new Function(){
    @Override public double getValue(    IntDoubleVector point){
      anno.annotate(devInput);
      return eval.evaluate(devInput,devGold,""String_Node_Str"");
    }
    @Override public int getNumDimensions(){
      return -1;
    }
  }
;
}",0.9614035087719298
131278,"public FactorTemplate(VarSet vars,FeatureNames alphabet,Object key){
  super();
  if (VarSet.getVarsOfType(vars,VarType.OBSERVED).size() != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.numConfigs=vars.calcNumConfigs();
  this.alphabet=alphabet;
  this.key=key;
  this.vars=vars;
}","public FactorTemplate(VarSet vars,FeatureNames alphabet,Object key){
  super();
  if (VarSet.getVarsOfType(vars,VarType.OBSERVED).size() != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.numConfigs=vars.calcNumConfigs();
  this.alphabet=alphabet;
  this.key=key;
  Var[] tmpVars=new Var[vars.size()];
  int i=0;
  for (  Var v : vars) {
    tmpVars[i++]=new Var(v.getType(),v.getNumStates(),v.getName(),v.getStateNames());
  }
  this.vars=new VarSet(tmpVars);
}",0.733921815889029
131279,"private void addEmbFeat(String fname,int i,FeatureNames alphabet,FeatureVector fv){
  if (i < 0 || sent.size() <= i) {
    return;
  }
  double[] embed=sent.getEmbed(i);
  for (int d=0; d < embed.length; d++) {
    int fidx=alphabet.lookupIndex(fname + ""String_Node_Str"" + d);
    fv.add(fidx,embed[d]);
  }
}","private void addEmbFeat(String fname,int i,FeatureNames alphabet,FeatureVector fv){
  if (i < 0 || sent.size() <= i) {
    return;
  }
  double[] embed=sent.getEmbed(i);
  for (int d=0; d < embed.length; d++) {
    int fidx=alphabet.lookupIndex(fname + ""String_Node_Str"" + d);
    if (fidx != -1) {
      fv.add(fidx,embed[d]);
    }
  }
}",0.9537037037037036
131280,"/** 
 * Prune to only the most likely K (e.g. 10) heads per token from the first-order model. Also for each token, prune any heads for which the marginal probability is less than propMaxMarg (e.g. 0.0001) times the maximum head marginal for that token. This follows footnote 10 in Martins et al. (2013).
 */
@Override public DepEdgeMask decode(FgInferencer inf,UFgExample ex,AnnoSentence sent){
  FactorGraph fg=ex.getFgLatPred();
  int n=sent.size();
  Pair<EdgeScores,Integer> pair=DepParseDecoder.getEdgeScores(inf,fg,n);
  EdgeScores scores=pair.get1();
  int linkVarCount=pair.get2();
  if (linkVarCount > 0) {
    return getDepEdgeMask(scores,prm.pruneMargProp,prm.maxPrunedHeads);
  }
 else {
    return null;
  }
}","/** 
 * Prune to only the most likely K (e.g. 10) heads per token from the first-order model. Also for each token, prune any heads for which the marginal probability is less than propMaxMarg (e.g. 0.0001) times the maximum head marginal for that token. This follows footnote 10 in Martins et al. (2013).
 */
@Override public DepEdgeMask decode(FgInferencer inf,UFgExample ex,AnnoSentence sent){
  FactorGraph fg=ex.getFgLatPred();
  int n=sent.size();
  Pair<EdgeScores,Integer> pair=DepParseDecoder.getEdgeScores(inf,fg,n);
  EdgeScores scores=pair.get1();
  int linkVarCount=pair.get2();
  if (linkVarCount > 0) {
    return getDepEdgeMask(scores,prm.pruneMargProp,prm.maxPrunedHeads,prm.includeMbrParse);
  }
 else {
    return null;
  }
}",0.9863387978142076
131281,"private static void checkValidMask(int n,DepEdgeMask mask){
  for (int c=0; c < n; c++) {
    if (mask.getParentCount(c) == 0) {
      String msg=String.format(""String_Node_Str"") + mask;
      throw new IllegalStateException(msg);
    }
  }
}","private static void checkValidMask(int n,DepEdgeMask mask){
  for (int c=0; c < n; c++) {
    if (mask.getParentCount(c) == 0) {
      String msg=String.format(""String_Node_Str"") + mask;
      throw new IllegalStateException(msg);
    }
  }
  if (InsideOutsideDepParse.singleRoot && !mask.allowsSingleRootTrees()) {
    log.warn(""String_Node_Str"");
  }
 else   if (!InsideOutsideDepParse.singleRoot && !mask.allowsMultiRootTrees()) {
    log.warn(""String_Node_Str"");
  }
}",0.6778711484593838
131282,"/** 
 * See   {@link #decode(FgInferencer,UFgExample,AnnoSentence)}. 
 */
public static DepEdgeMask getDepEdgeMask(EdgeScores scores,double propMaxMarg,int maxPrunedHeads){
  int n=scores.root.length;
  DepEdgeMask mask=new DepEdgeMask(n,true);
  pruneByCount(scores,maxPrunedHeads,mask);
  pruneByMaxMarginal(scores,propMaxMarg,mask);
  checkValidMask(n,mask);
  return mask;
}","/** 
 * See   {@link #decode(FgInferencer,UFgExample,AnnoSentence)}. 
 */
public static DepEdgeMask getDepEdgeMask(EdgeScores scores,double propMaxMarg,int maxPrunedHeads,boolean includeMbrParse){
  int n=scores.root.length;
  DepEdgeMask mask=new DepEdgeMask(n,true);
  pruneByCount(scores,maxPrunedHeads,mask);
  pruneByMaxMarginal(scores,propMaxMarg,mask);
  if (includeMbrParse) {
    mask.keepEdgesFromTree(DepParseDecoder.getParents(scores));
  }
  checkValidMask(n,mask);
  return mask;
}",0.865979381443299
131283,"@Test public void testGetDepEdgeMaskCount(){
  DepEdgeMask mask=DepEdgeMaskDecoder.getDepEdgeMask(scores,0,99);
  System.out.println(mask);
  assertNoneArePruned(mask);
  mask=DepEdgeMaskDecoder.getDepEdgeMask(scores,0,1);
  System.out.println(mask);
  assertOnlyMostLikelyAreKept(mask);
}","@Test public void testGetDepEdgeMaskCount(){
  DepEdgeMask mask=DepEdgeMaskDecoder.getDepEdgeMask(scores,0,99,true);
  System.out.println(mask);
  assertNoneArePruned(mask);
  mask=DepEdgeMaskDecoder.getDepEdgeMask(scores,0,1,true);
  System.out.println(mask);
  assertOnlyMostLikelyAreKept(mask);
}",0.9829931972789115
131284,"@Test public void testGetDepEdgeMaskPropMaxMarg(){
  double propMaxMarg=0.1;
  DepEdgeMask mask=DepEdgeMaskDecoder.getDepEdgeMask(scores,propMaxMarg,99);
  System.out.println(mask);
  assertNoneArePruned(mask);
  propMaxMarg=0.5;
  mask=DepEdgeMaskDecoder.getDepEdgeMask(scores,propMaxMarg,99);
  System.out.println(mask);
  assertOnlyMostLikelyAreKept(mask);
}","@Test public void testGetDepEdgeMaskPropMaxMarg(){
  double propMaxMarg=0.1;
  DepEdgeMask mask=DepEdgeMaskDecoder.getDepEdgeMask(scores,propMaxMarg,99,true);
  System.out.println(mask);
  assertNoneArePruned(mask);
  propMaxMarg=0.5;
  mask=DepEdgeMaskDecoder.getDepEdgeMask(scores,propMaxMarg,99,true);
  System.out.println(mask);
  assertOnlyMostLikelyAreKept(mask);
}",0.9863387978142076
131285,"public static int[] getParents(EdgeScores scores){
  int n=scores.root.length;
  int[] parents=new int[n];
  Arrays.fill(parents,DepTree.EMPTY_POSITION);
  ProjectiveDependencyParser.parseSingleRoot(scores.root,scores.child,parents);
  return parents;
}","public static int[] getParents(EdgeScores scores){
  int n=scores.root.length;
  int[] parents=new int[n];
  Arrays.fill(parents,DepTree.EMPTY_POSITION);
  if (InsideOutsideDepParse.singleRoot) {
    ProjectiveDependencyParser.parseSingleRoot(scores.root,scores.child,parents);
  }
 else {
    ProjectiveDependencyParser.parseMultiRoot(scores.root,scores.child,parents);
  }
  return parents;
}",0.7357032457496137
131286,"@Override public void annotate(AnnoSentenceCollection inputSents){
  log.info(""String_Node_Str"" + pruneModel);
  JointNlpFgModel model=(JointNlpFgModel)Files.deserialize(pruneModel);
  ObsFeatureConjoiner ofc=model.getOfc();
  CorpusStatistics cs=model.getCs();
  JointNlpFeatureExtractorPrm fePrm=model.getFePrm();
  exPrm.fgPrm.includeSrl=false;
  exPrm.fgPrm.dpPrm=new DepParseFactorGraphBuilderPrm();
  exPrm.fgPrm.dpPrm.linkVarType=VarType.PREDICTED;
  exPrm.fgPrm.dpPrm.grandparentFactors=false;
  exPrm.fgPrm.dpPrm.siblingFactors=false;
  exPrm.fgPrm.dpPrm.unaryFactors=true;
  exPrm.fgPrm.dpPrm.useProjDepTreeFactor=true;
  exPrm.fePrm=fePrm;
  JointNlpFgExamplesBuilder builder=new JointNlpFgExamplesBuilder(exPrm,ofc,cs,false);
  FgExampleList data=builder.getData(inputSents);
  log.info(""String_Node_Str"");
  int numEdgesTot=0;
  int numEdgesKept=0;
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < inputSents.size(); i++) {
    LFgExample ex=data.get(i);
    AnnoSentence inputSent=inputSents.get(i);
    JointNlpDecoder decoder=new JointNlpDecoder(dPrm);
    AnnoSentence predSent=decoder.decode(model,ex,inputSent);
    DepEdgeMask mask=predSent.getDepEdgeMask();
    if (mask != null) {
      if (inputSent.getDepEdgeMask() == null) {
        inputSent.setDepEdgeMask(mask);
      }
 else {
        inputSent.getDepEdgeMask().and(mask);
      }
    }
    numEdgesKept+=mask.getCount();
    int n=predSent.getWords().size();
    numEdgesTot+=n * n;
  }
  timer.stop();
  log.info(String.format(""String_Node_Str"",inputSents.getNumTokens() / timer.totSec()));
  int numEdgesPruned=numEdgesTot - numEdgesKept;
  log.info(String.format(""String_Node_Str"",numEdgesPruned,numEdgesTot,(double)numEdgesPruned / numEdgesTot));
}","@Override public void annotate(AnnoSentenceCollection inputSents){
  log.info(""String_Node_Str"" + pruneModel);
  JointNlpFgModel model=(JointNlpFgModel)Files.deserialize(pruneModel);
  ObsFeatureConjoiner ofc=model.getOfc();
  CorpusStatistics cs=model.getCs();
  JointNlpFeatureExtractorPrm fePrm=model.getFePrm();
  exPrm.fgPrm.includeSrl=false;
  exPrm.fgPrm.dpPrm=new DepParseFactorGraphBuilderPrm();
  exPrm.fgPrm.dpPrm.linkVarType=VarType.PREDICTED;
  exPrm.fgPrm.dpPrm.grandparentFactors=false;
  exPrm.fgPrm.dpPrm.siblingFactors=false;
  exPrm.fgPrm.dpPrm.unaryFactors=true;
  exPrm.fgPrm.dpPrm.useProjDepTreeFactor=true;
  exPrm.fgPrm.dpPrm.pruneEdges=true;
  exPrm.fePrm=fePrm;
  JointNlpFgExamplesBuilder builder=new JointNlpFgExamplesBuilder(exPrm,ofc,cs,false);
  FgExampleList data=builder.getData(inputSents);
  log.info(""String_Node_Str"");
  int numEdgesTot=0;
  int numEdgesKept=0;
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < inputSents.size(); i++) {
    LFgExample ex=data.get(i);
    AnnoSentence inputSent=inputSents.get(i);
    JointNlpDecoder decoder=new JointNlpDecoder(dPrm);
    AnnoSentence predSent=decoder.decode(model,ex,inputSent);
    DepEdgeMask mask=predSent.getDepEdgeMask();
    if (mask != null) {
      if (inputSent.getDepEdgeMask() == null) {
        inputSent.setDepEdgeMask(mask);
      }
 else {
        inputSent.getDepEdgeMask().and(mask);
      }
    }
    numEdgesKept+=mask.getCount();
    int n=predSent.getWords().size();
    numEdgesTot+=n * n;
  }
  timer.stop();
  log.info(String.format(""String_Node_Str"",inputSents.getNumTokens() / timer.totSec()));
  int numEdgesPruned=numEdgesTot - numEdgesKept;
  log.info(String.format(""String_Node_Str"",numEdgesPruned,numEdgesTot,(double)numEdgesPruned / numEdgesTot));
}",0.9895273138975376
131287,"@Override public void annotate(AnnoSentenceCollection sents){
  if (mat == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  int numEdgesTot=0;
  int numEdgesKept=0;
  for (  AnnoSentence sent : sents) {
    DepEdgeMask mask=sent.getDepEdgeMask();
    if (mask == null) {
      mask=new DepEdgeMask(sent.size(),true);
      sent.setDepEdgeMask(mask);
    }
    LabelSequence<String> tagSeq=new LabelSequence<String>(alphabet,sent.getPosTags());
    int[] tags=tagSeq.getLabelIds();
    for (int i=0; i < tags.length; i++) {
      for (int j=0; j < tags.length; j++) {
        if (tags[i] >= mat.getNumRows() || tags[j] >= mat.getNumRows()) {
          continue;
        }
        int dist=Math.abs(i - j);
        if (dist > mat.get(tags[i],tags[j])) {
          mask.setIsPruned(i,j,true);
          if (log.isTraceEnabled()) {
            log.trace(String.format(""String_Node_Str"",alphabet.lookupObject(tags[i]),alphabet.lookupObject(tags[j]),dist));
          }
        }
 else {
          numEdgesKept++;
        }
        numEdgesTot++;
      }
    }
    numEdgesTot+=sent.size();
    if (InsideOutsideDepParse.singleRoot && !mask.allowsSinglyRootedTrees()) {
      log.warn(""String_Node_Str"");
      log.trace(String.format(""String_Node_Str"",sent.getWords().toString(),mask.toString()));
      if (sent.getParents() != null) {
        log.trace(""String_Node_Str"" + Arrays.toString(sent.getParents()));
      }
    }
  }
  int numEdgesPruned=numEdgesTot - numEdgesKept;
  log.info(String.format(""String_Node_Str"",numEdgesPruned,numEdgesTot,(double)numEdgesPruned / numEdgesTot));
}","@Override public void annotate(AnnoSentenceCollection sents){
  if (mat == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  int numEdgesTot=0;
  int numEdgesKept=0;
  for (  AnnoSentence sent : sents) {
    DepEdgeMask mask=sent.getDepEdgeMask();
    if (mask == null) {
      mask=new DepEdgeMask(sent.size(),true);
      sent.setDepEdgeMask(mask);
    }
    LabelSequence<String> tagSeq=new LabelSequence<String>(alphabet,sent.getPosTags());
    int[] tags=tagSeq.getLabelIds();
    for (int i=0; i < tags.length; i++) {
      for (int j=0; j < tags.length; j++) {
        if (tags[i] >= mat.getNumRows() || tags[j] >= mat.getNumRows()) {
          continue;
        }
        int dist=Math.abs(i - j);
        if (dist > mat.get(tags[i],tags[j])) {
          mask.setIsPruned(i,j,true);
          if (log.isTraceEnabled()) {
            log.trace(String.format(""String_Node_Str"",alphabet.lookupObject(tags[i]),alphabet.lookupObject(tags[j]),dist));
          }
        }
 else {
          numEdgesKept++;
        }
        numEdgesTot++;
      }
    }
    numEdgesTot+=sent.size();
    if (InsideOutsideDepParse.singleRoot && !mask.allowsSingleRootTrees()) {
      log.warn(""String_Node_Str"");
      log.trace(String.format(""String_Node_Str"",sent.getWords().toString(),mask.toString()));
      if (sent.getParents() != null) {
        log.trace(""String_Node_Str"" + Arrays.toString(sent.getParents()));
      }
    }
 else     if (!InsideOutsideDepParse.singleRoot && !mask.allowsMultiRootTrees()) {
      log.warn(""String_Node_Str"");
    }
  }
  int numEdgesPruned=numEdgesTot - numEdgesKept;
  log.info(String.format(""String_Node_Str"",numEdgesPruned,numEdgesTot,(double)numEdgesPruned / numEdgesTot));
}",0.9172165566886624
131288,"public static Pair<List<LabeledSpan>,IntArrayList> getSpansFromBIO(List<String> tags){
}","public static Pair<List<LabeledSpan>,IntArrayList> getSpansFromBIO(List<String> tags,boolean includeOutside){
}",0.8844221105527639
131289,"private void addEmbFeat(String fname,int i,ObjFeatVec<String> fv){
  if (i < 0 || sent.size() <= i) {
    return;
  }
  double[] embed=sent.getEmbed(i);
  for (int d=0; d < embed.length; d++) {
    fv.add(fname + ""String_Node_Str"" + d,embed[d]);
  }
}","private void addEmbFeat(String fname,int i,ObjFeatVec<String> fv){
  if (i < 0 || sent.size() <= i) {
    return;
  }
  double[] embed=sent.getEmbed(i);
  if (embed != null) {
    for (int d=0; d < embed.length; d++) {
      fv.add(fname + ""String_Node_Str"" + d,embed[d]);
    }
  }
}",0.9271028037383178
131290,"private LFgExample getExample(AnnoSentence sent,int[] parents,boolean labeledExample){
  FeatureExtractor fe=prm.dpFePrm.onlyFast ? new FastDepParseFeatureExtractor(sent,cs,prm.dpFePrm.featureHashMod) : new DepParseFeatureExtractor(prm.dpFePrm,sent,cs,feAlphabet);
  fe=new FeatureCache(fe);
  FactorGraph fg=new FactorGraph();
  DepParseFactorGraphBuilder dp=new DepParseFactorGraphBuilder(prm.dpPrm);
  dp.build(sent.getWords(),sent.getDepEdgeMask(),fe,fg);
  VarConfig goldConfig=new VarConfig();
  addDepParseTrainAssignment(parents,dp,goldConfig);
  if (labeledExample) {
    return new LabeledFgExample(fg,goldConfig,fe);
  }
 else {
    return new UnlabeledFgExample(fg,goldConfig,fe);
  }
}","private LFgExample getExample(AnnoSentence sent,int[] parents,boolean labeledExample){
  FeatureExtractor fe=prm.dpFePrm.onlyFast ? new FastDepParseFeatureExtractor(sent,cs,prm.dpFePrm.featureHashMod,feAlphabet) : new DepParseFeatureExtractor(prm.dpFePrm,sent,cs,feAlphabet);
  fe=new FeatureCache(fe);
  FactorGraph fg=new FactorGraph();
  DepParseFactorGraphBuilder dp=new DepParseFactorGraphBuilder(prm.dpPrm);
  dp.build(sent.getWords(),sent.getDepEdgeMask(),fe,fg);
  VarConfig goldConfig=new VarConfig();
  addDepParseTrainAssignment(parents,dp,goldConfig);
  if (labeledExample) {
    return new LabeledFgExample(fg,goldConfig,fe);
  }
 else {
    return new UnlabeledFgExample(fg,goldConfig,fe);
  }
}",0.992181947405828
131291,"public static UFgExample get1stOrderFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new FastDepParseFeatureExtractor(sent,cs,numParams) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.grandparentFactors=false;
  fgPrm.siblingFactors=false;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}","public static UFgExample get1stOrderFg(AnnoSentence sent,CorpusStatistics cs,FeatureNames alphabet,int numParams,boolean onlyFast){
  FactorGraph fg=new FactorGraph();
  DepParseFeatureExtractorPrm fePrm=new DepParseFeatureExtractorPrm();
  fePrm.featureHashMod=numParams;
  fePrm.firstOrderTpls=TemplateSets.getFromResource(TemplateSets.mcdonaldDepFeatsResource);
  FeatureExtractor fe=onlyFast ? new FastDepParseFeatureExtractor(sent,cs,numParams,alphabet) : new DepParseFeatureExtractor(fePrm,sent,cs,alphabet);
  DepParseFactorGraphBuilderPrm fgPrm=new DepParseFactorGraphBuilderPrm();
  fgPrm.grandparentFactors=false;
  fgPrm.siblingFactors=false;
  DepParseFactorGraphBuilder builder=new DepParseFactorGraphBuilder(fgPrm);
  builder.build(sent,fe,fg);
  UnlabeledFgExample ex=new UnlabeledFgExample(fg,new VarConfig());
  return ex;
}",0.9946204423191872
131292,"public FastDepParseFeatureExtractor(AnnoSentence sent,CorpusStatistics cs,int featureHashMod){
  this.isent=new IntAnnoSentence(sent,cs.store);
  this.featureHashMod=featureHashMod;
}","public FastDepParseFeatureExtractor(AnnoSentence sent,CorpusStatistics cs,int featureHashMod,FeatureNames alphabet){
  this.isent=new IntAnnoSentence(sent,cs.store);
  this.featureHashMod=featureHashMod;
  int i=0;
  while (alphabet.size() < featureHashMod) {
    alphabet.lookupIndex(i++);
  }
}",0.7640918580375783
131293,"private LFgExample getExample(AnnoSentence sent,AnnoSentence gold,boolean labeledExample){
  ObsFeatureExtractor srlFe=new SrlFeatureExtractor(prm.fePrm.srlFePrm,sent,cs);
  srlFe=new ObsFeatureCache(srlFe);
  FeatureExtractor dpFe=prm.fePrm.dpFePrm.onlyFast ? new FastDepParseFeatureExtractor(sent,cs,prm.fePrm.dpFePrm.featureHashMod) : new DepParseFeatureExtractor(prm.fePrm.dpFePrm,sent,cs,ofc.getFeAlphabet());
  dpFe=new FeatureCache(dpFe);
  ObsFeatureExtractor relFe=new RelObsFe(prm.fgPrm.relPrm,sent,ofc.getTemplates());
  relFe=new ObsFeatureCache(relFe);
  JointNlpFactorGraph fg=new JointNlpFactorGraph(prm.fgPrm,sent,cs,srlFe,ofc,dpFe,relFe);
  log.trace(""String_Node_Str"" + fg.getNumVars() + ""String_Node_Str""+ fg.getNumFactors()+ ""String_Node_Str""+ fg.getNumEdges());
  VarConfig vc=new VarConfig();
  if (prm.fgPrm.includeDp) {
    if (gold != null && gold.getParents() != null) {
      DepParseEncoder.addDepParseTrainAssignment(gold.getParents(),fg.getDpBuilder(),vc);
    }
 else     if (sent.getParents() != null && prm.fgPrm.includeDp && prm.fgPrm.dpPrm.linkVarType == VarType.OBSERVED) {
      DepParseEncoder.addDepParseTrainAssignment(sent.getParents(),fg.getDpBuilder(),vc);
    }
  }
  if (prm.fgPrm.includeSrl) {
    if (gold != null && gold.getSrlGraph() != null) {
      SrlEncoder.addSrlTrainAssignment(sent,gold.getSrlGraph(),fg.getSrlBuilder(),vc,prm.fgPrm.srlPrm.predictSense,prm.fgPrm.srlPrm.predictPredPos);
    }
  }
  if (prm.fgPrm.includeRel) {
    if (gold != null && gold.getRelLabels() != null) {
      RelationsEncoder.addRelVarAssignments(sent,gold.getRelLabels(),fg.getRelBuilder(),vc);
    }
  }
  LFgExample ex;
  FactorTemplateList fts=ofc.getTemplates();
  if (labeledExample) {
    ex=new LabeledFgExample(fg,vc,srlFe,fts);
  }
 else {
    ex=new UnlabeledFgExample(fg,vc,srlFe,fts);
  }
  dpFe.init(ex);
  relFe.init(ex,fts);
  return ex;
}","private LFgExample getExample(AnnoSentence sent,AnnoSentence gold,boolean labeledExample){
  ObsFeatureExtractor srlFe=new SrlFeatureExtractor(prm.fePrm.srlFePrm,sent,cs);
  srlFe=new ObsFeatureCache(srlFe);
  FeatureExtractor dpFe=prm.fePrm.dpFePrm.onlyFast ? new FastDepParseFeatureExtractor(sent,cs,prm.fePrm.dpFePrm.featureHashMod,ofc.getFeAlphabet()) : new DepParseFeatureExtractor(prm.fePrm.dpFePrm,sent,cs,ofc.getFeAlphabet());
  dpFe=new FeatureCache(dpFe);
  ObsFeatureExtractor relFe=new RelObsFe(prm.fgPrm.relPrm,sent,ofc.getTemplates());
  relFe=new ObsFeatureCache(relFe);
  JointNlpFactorGraph fg=new JointNlpFactorGraph(prm.fgPrm,sent,cs,srlFe,ofc,dpFe,relFe);
  log.trace(""String_Node_Str"" + fg.getNumVars() + ""String_Node_Str""+ fg.getNumFactors()+ ""String_Node_Str""+ fg.getNumEdges());
  VarConfig vc=new VarConfig();
  if (prm.fgPrm.includeDp) {
    if (gold != null && gold.getParents() != null) {
      DepParseEncoder.addDepParseTrainAssignment(gold.getParents(),fg.getDpBuilder(),vc);
    }
 else     if (sent.getParents() != null && prm.fgPrm.includeDp && prm.fgPrm.dpPrm.linkVarType == VarType.OBSERVED) {
      DepParseEncoder.addDepParseTrainAssignment(sent.getParents(),fg.getDpBuilder(),vc);
    }
  }
  if (prm.fgPrm.includeSrl) {
    if (gold != null && gold.getSrlGraph() != null) {
      SrlEncoder.addSrlTrainAssignment(sent,gold.getSrlGraph(),fg.getSrlBuilder(),vc,prm.fgPrm.srlPrm.predictSense,prm.fgPrm.srlPrm.predictPredPos);
    }
  }
  if (prm.fgPrm.includeRel) {
    if (gold != null && gold.getRelLabels() != null) {
      RelationsEncoder.addRelVarAssignments(sent,gold.getRelLabels(),fg.getRelBuilder(),vc);
    }
  }
  LFgExample ex;
  FactorTemplateList fts=ofc.getTemplates();
  if (labeledExample) {
    ex=new LabeledFgExample(fg,vc,srlFe,fts);
  }
 else {
    ex=new UnlabeledFgExample(fg,vc,srlFe,fts);
  }
  dpFe.init(ex);
  relFe.init(ex,fts);
  return ex;
}",0.9947368421052633
131294,"private void accum(IntDoubleVector params,int[] batch,final Accumulator ac){
  boolean isFullDataset=(batch.length == numExamples);
  if (isFullDataset) {
    ac.accumValue=true;
    ac.accumTrainLoss=true;
    ac.accumDevLoss=true;
    ac.accumWeight=true;
  }
  if (ac.accumGradient) {
    this.gradient.zero();
    ac.gradient=this.gradient;
  }
  model.setParams(params);
  if (numThreads == 1) {
    for (int i=0; i < batch.length; i++) {
      log.trace(""String_Node_Str"" + i);
      exObj.accum(model,batch[i],ac);
    }
  }
 else {
    TaskFactory<Object> factory=new TaskFactory<Object>(){
      public Callable<Object> getTask(      int i){
        return new AccumValueGradientOfExample(ac,i);
      }
    }
;
    Threads.safelyParallelizeBatch(pool,batch,factory);
  }
  if (ac.accumValue) {
    ac.value/=batch.length;
  }
  if (ac.accumGradient) {
    ac.gradient.scale(1.0 / batch.length);
  }
  if (isFullDataset) {
    log.info(String.format(""String_Node_Str"",ac.value,ac.trainLoss,ac.devLoss,ac.weight));
    exObj.report();
  }
}","private void accum(IntDoubleVector params,int[] batch,final Accumulator ac){
  boolean isFullDataset=(batch.length == numExamples);
  if (isFullDataset) {
    ac.accumValue=true;
    ac.accumTrainLoss=true;
    ac.accumDevLoss=true;
    ac.accumWeight=true;
  }
  if (ac.accumGradient) {
    if (isFullDataset) {
      this.gradient.zero();
      ac.gradient=this.gradient;
    }
 else {
      ac.gradient=this.gradient.getSparseZeroedCopy();
    }
  }
  model.setParams(params);
  if (numThreads == 1) {
    for (int i=0; i < batch.length; i++) {
      log.trace(""String_Node_Str"" + i);
      exObj.accum(model,batch[i],ac);
    }
  }
 else {
    TaskFactory<Object> factory=new TaskFactory<Object>(){
      public Callable<Object> getTask(      int i){
        return new AccumValueGradientOfExample(ac,i);
      }
    }
;
    Threads.safelyParallelizeBatch(pool,batch,factory);
  }
  if (ac.accumValue) {
    ac.value/=batch.length;
  }
  if (ac.accumGradient) {
    ac.gradient.scale(1.0 / batch.length);
  }
  if (isFullDataset) {
    log.info(String.format(""String_Node_Str"",ac.value,ac.trainLoss,ac.devLoss,ac.weight));
    exObj.report();
  }
}",0.9290909090909092
131295,"private void backwardGlobalFactorToVar(GlobalFactor globalFac){
  FgNode node=fg.getNode(globalFac);
  VarTensor[] inMsgs=getMsgs(node,msgs,CUR_MSG,IN_MSG);
  VarTensor[] inMsgsAdj=getMsgs(node,msgsAdj,CUR_MSG,IN_MSG);
  VarTensor[] outMsgsAdj=getMsgs(node,msgsAdj,NEW_MSG,OUT_MSG);
  globalFac.backwardCreateMessages(inMsgs,outMsgsAdj,inMsgsAdj);
}","private void backwardGlobalFactorToVar(GlobalFactor globalFac){
  if (globalFac.getVars().size() == 0) {
    return;
  }
  FgNode node=fg.getNode(globalFac);
  VarTensor[] inMsgs=getMsgs(node,msgs,CUR_MSG,IN_MSG);
  VarTensor[] inMsgsAdj=getMsgs(node,msgsAdj,CUR_MSG,IN_MSG);
  VarTensor[] outMsgsAdj=getMsgs(node,msgsAdj,NEW_MSG,OUT_MSG);
  globalFac.backwardCreateMessages(inMsgs,outMsgsAdj,inMsgsAdj);
}",0.924503311258278
131296,"private void forwardGlobalFacToVar(GlobalFactor globalFac){
  log.trace(""String_Node_Str"");
  FgNode node=fg.getNode(globalFac);
  VarTensor[] inMsgs=getMsgs(node,msgs,CUR_MSG,IN_MSG);
  VarTensor[] outMsgs=getMsgs(node,msgs,NEW_MSG,OUT_MSG);
  globalFac.createMessages(inMsgs,outMsgs);
}","private void forwardGlobalFacToVar(GlobalFactor globalFac){
  if (globalFac.getVars().size() == 0) {
    return;
  }
  log.trace(""String_Node_Str"");
  FgNode node=fg.getNode(globalFac);
  VarTensor[] inMsgs=getMsgs(node,msgs,CUR_MSG,IN_MSG);
  VarTensor[] outMsgs=getMsgs(node,msgs,NEW_MSG,OUT_MSG);
  globalFac.createMessages(inMsgs,outMsgs);
}",0.909952606635071
131297,"public int hashCode(){
  throw new RuntimeException(""String_Node_Str"");
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((entitySubType == null) ? 0 : entitySubType.hashCode());
  result=prime * result + ((entityType == null) ? 0 : entityType.hashCode());
  result=prime * result + head;
  result=prime * result + ((id == null) ? 0 : id.hashCode());
  result=prime * result + ((phraseType == null) ? 0 : phraseType.hashCode());
  result=prime * result + ((span == null) ? 0 : span.hashCode());
  return result;
}",0.1067615658362989
131298,"public boolean equals(){
  throw new RuntimeException(""String_Node_Str"");
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  NerMention other=(NerMention)obj;
  if (entitySubType == null) {
    if (other.entitySubType != null)     return false;
  }
 else   if (!entitySubType.equals(other.entitySubType))   return false;
  if (entityType == null) {
    if (other.entityType != null)     return false;
  }
 else   if (!entityType.equals(other.entityType))   return false;
  if (head != other.head)   return false;
  if (id == null) {
    if (other.id != null)     return false;
  }
 else   if (!id.equals(other.id))   return false;
  if (phraseType == null) {
    if (other.phraseType != null)     return false;
  }
 else   if (!phraseType.equals(other.phraseType))   return false;
  if (span == null) {
    if (other.span != null)     return false;
  }
 else   if (!span.equals(other.span))   return false;
  return true;
}",0.0576368876080691
131299,"@Override public int compareTo(NerMention other){
  if (this.span == null && other.span == null) {
    return 0;
  }
 else   if (this.span == null) {
    return -1;
  }
 else   if (other.span == null) {
    return 1;
  }
  return this.span.compareTo(other.span);
}","@Override public int compareTo(NerMention other){
  int diff=ObjectUtils.compare(this.span,other.span);
  if (diff != 0) {
    return diff;
  }
  diff=ObjectUtils.compare(this.entityType,other.entityType);
  if (diff != 0) {
    return diff;
  }
  diff=ObjectUtils.compare(this.entitySubType,other.entitySubType);
  if (diff != 0) {
    return diff;
  }
  diff=ObjectUtils.compare(this.phraseType,other.phraseType);
  if (diff != 0) {
    return diff;
  }
  diff=ObjectUtils.compare(this.head,other.head);
  if (diff != 0) {
    return diff;
  }
  diff=ObjectUtils.compare(this.id,other.id);
  return diff;
}",0.1903669724770642
131300,"/** 
 * Gets the span intervening between two spans.
 */
public static Span getSpanBtwn(Span span1,Span span2){
  Span btwn;
  if (span1.isBefore(span2)) {
    btwn=new Span(span1.end(),span2.start());
  }
 else {
    btwn=new Span(span2.end(),span1.start());
  }
  return btwn;
}","/** 
 * Gets the span intervening between two spans.
 */
public static Span getSpanBtwn(Span span1,Span span2){
  if (span1.end <= span2.start) {
    return new Span(span1.end,span2.start);
  }
 else   if (span2.end <= span1.start) {
    return new Span(span2.end,span1.start);
  }
 else {
    return new Span(span1.start,span1.start);
  }
}",0.5861513687600645
131301,"private static void checkGoldConfig(FactorGraph fg,VarConfig goldConfig){
  for (  Var var : fg.getVars()) {
    if (var.getType() != VarType.LATENT && goldConfig.getState(var,-1) == -1) {
      throw new IllegalStateException(""String_Node_Str"" + var);
    }
  }
}","private static void checkGoldConfig(FactorGraph fg,VarConfig goldConfig){
  for (  Var var : fg.getVars()) {
    if (var.getType() != VarType.LATENT && goldConfig.getState(var,-1) == -1) {
      int numNonLat=VarSet.getVarsOfType(fg.getVars(),VarType.OBSERVED).size() + VarSet.getVarsOfType(fg.getVars(),VarType.PREDICTED).size();
      log.error(String.format(""String_Node_Str"",numNonLat,goldConfig.size()));
      throw new IllegalStateException(""String_Node_Str"" + var);
    }
  }
}",0.7049399198931909
131302,"private LFgExample getExample(AnnoSentence sent,AnnoSentence gold,boolean labeledExample){
  ObsFeatureExtractor obsFe=new SrlFeatureExtractor(prm.fePrm.srlFePrm,sent,cs);
  obsFe=new ObsFeatureCache(obsFe);
  FeatureExtractor fe=new DepParseFeatureExtractor(prm.fePrm.dpFePrm,sent,cs,ofc.getFeAlphabet());
  fe=new FeatureCache(fe);
  JointNlpFactorGraph fg=new JointNlpFactorGraph(prm.fgPrm,sent,cs,obsFe,ofc,fe);
  log.trace(""String_Node_Str"" + fg.getNumVars() + ""String_Node_Str""+ fg.getNumFactors()+ ""String_Node_Str""+ fg.getNumEdges());
  VarConfig vc=new VarConfig();
  if (gold != null && gold.getParents() != null) {
    DepParseEncoder.addDepParseTrainAssignment(gold.getParents(),fg.getDpBuilder(),vc);
  }
 else   if (sent.getParents() != null && prm.fgPrm.includeDp && prm.fgPrm.dpPrm.linkVarType == VarType.OBSERVED) {
    DepParseEncoder.addDepParseTrainAssignment(sent.getParents(),fg.getDpBuilder(),vc);
  }
  if (gold != null && gold.getSrlGraph() != null) {
    SrlEncoder.addSrlTrainAssignment(sent,gold.getSrlGraph(),fg.getSrlBuilder(),vc,prm.fgPrm.srlPrm.predictSense,prm.fgPrm.srlPrm.predictPredPos);
  }
  if (gold != null && gold.getRelations() != null) {
    RelationsEncoder.addRelVarAssignments(sent,gold.getRelations(),fg.getRelBuilder(),vc);
  }
  LFgExample ex;
  FactorTemplateList fts=ofc.getTemplates();
  if (labeledExample) {
    ex=new LabeledFgExample(fg,vc,obsFe,fts);
  }
 else {
    ex=new UnlabeledFgExample(fg,vc,obsFe,fts);
  }
  fe.init(ex);
  return ex;
}","private LFgExample getExample(AnnoSentence sent,AnnoSentence gold,boolean labeledExample){
  ObsFeatureExtractor obsFe=new SrlFeatureExtractor(prm.fePrm.srlFePrm,sent,cs);
  obsFe=new ObsFeatureCache(obsFe);
  FeatureExtractor fe=new DepParseFeatureExtractor(prm.fePrm.dpFePrm,sent,cs,ofc.getFeAlphabet());
  fe=new FeatureCache(fe);
  JointNlpFactorGraph fg=new JointNlpFactorGraph(prm.fgPrm,sent,cs,obsFe,ofc,fe);
  log.trace(""String_Node_Str"" + fg.getNumVars() + ""String_Node_Str""+ fg.getNumFactors()+ ""String_Node_Str""+ fg.getNumEdges());
  VarConfig vc=new VarConfig();
  if (prm.fgPrm.includeDp) {
    if (gold != null && gold.getParents() != null) {
      DepParseEncoder.addDepParseTrainAssignment(gold.getParents(),fg.getDpBuilder(),vc);
    }
 else     if (sent.getParents() != null && prm.fgPrm.includeDp && prm.fgPrm.dpPrm.linkVarType == VarType.OBSERVED) {
      DepParseEncoder.addDepParseTrainAssignment(sent.getParents(),fg.getDpBuilder(),vc);
    }
  }
  if (prm.fgPrm.includeSrl) {
    if (gold != null && gold.getSrlGraph() != null) {
      SrlEncoder.addSrlTrainAssignment(sent,gold.getSrlGraph(),fg.getSrlBuilder(),vc,prm.fgPrm.srlPrm.predictSense,prm.fgPrm.srlPrm.predictPredPos);
    }
  }
  if (prm.fgPrm.includeRel) {
    if (gold != null && gold.getRelations() != null) {
      RelationsEncoder.addRelVarAssignments(sent,gold.getRelations(),fg.getRelBuilder(),vc);
    }
  }
  LFgExample ex;
  FactorTemplateList fts=ofc.getTemplates();
  if (labeledExample) {
    ex=new LabeledFgExample(fg,vc,obsFe,fts);
  }
 else {
    ex=new UnlabeledFgExample(fg,vc,obsFe,fts);
  }
  fe.init(ex);
  return ex;
}",0.960025583626479
131303,"public static void checkForRequiredAnnotations(JointNlpEncoderPrm prm,AnnoSentenceCollection sents){
  AnnoSentence sent=sents.get(0);
  if (prm.fePrm.srlFePrm.fePrm.useTemplates) {
    if (prm.fgPrm.includeSrl) {
      TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.srlFePrm.fePrm.soloTemplates);
      TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.srlFePrm.fePrm.pairTemplates);
    }
  }
  if (prm.fgPrm.includeDp) {
    TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.dpFePrm.firstOrderTpls);
    if (prm.fgPrm.dpPrm.grandparentFactors || prm.fgPrm.dpPrm.siblingFactors) {
      TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.dpFePrm.secondOrderTpls);
    }
  }
  if (prm.fgPrm.includeRel) {
    TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fgPrm.relPrm.templates);
  }
}","public static void checkForRequiredAnnotations(JointNlpEncoderPrm prm,AnnoSentenceCollection sents){
  AnnoSentence sent=sents.get(0);
  if (prm.fePrm.srlFePrm.fePrm.useTemplates) {
    if (prm.fgPrm.includeSrl) {
      TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.srlFePrm.fePrm.soloTemplates);
      TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.srlFePrm.fePrm.pairTemplates);
    }
  }
  if (prm.fgPrm.includeDp) {
    TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.dpFePrm.firstOrderTpls);
    if (prm.fgPrm.dpPrm.grandparentFactors || prm.fgPrm.dpPrm.siblingFactors) {
      TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fePrm.dpFePrm.secondOrderTpls);
    }
  }
  if (prm.fgPrm.includeRel && prm.fgPrm.relPrm.templates != null) {
    TemplateLanguage.assertRequiredAnnotationTypes(sent,prm.fgPrm.relPrm.templates);
  }
}",0.9780346820809248
131304,"private static JointNlpFgExampleBuilderPrm getSrlFgExampleBuilderPrm(JointNlpEncoder.JointNlpFeatureExtractorPrm fePrm){
  JointNlpFgExampleBuilderPrm prm=new JointNlpFgExampleBuilderPrm();
  prm.fgPrm.dpPrm.linkVarType=linkVarType;
  prm.fgPrm.dpPrm.useProjDepTreeFactor=useProjDepTreeFactor;
  prm.fgPrm.dpPrm.unaryFactors=unaryFactors;
  prm.fgPrm.dpPrm.excludeNonprojectiveGrandparents=excludeNonprojectiveGrandparents;
  prm.fgPrm.dpPrm.grandparentFactors=grandparentFactors;
  prm.fgPrm.dpPrm.siblingFactors=siblingFactors;
  prm.fgPrm.dpPrm.pruneEdges=pruneByDist || pruneByModel;
  prm.fgPrm.srlPrm.makeUnknownPredRolesLatent=makeUnknownPredRolesLatent;
  prm.fgPrm.srlPrm.roleStructure=roleStructure;
  prm.fgPrm.srlPrm.allowPredArgSelfLoops=allowPredArgSelfLoops;
  prm.fgPrm.srlPrm.unaryFactors=unaryFactors;
  prm.fgPrm.srlPrm.binarySenseRoleFactors=binarySenseRoleFactors;
  prm.fgPrm.srlPrm.predictSense=predictSense;
  prm.fgPrm.srlPrm.predictPredPos=predictPredPos;
  if (includeRel) {
    prm.fgPrm.relPrm.templates=getFeatTpls(relFeatTpls);
    prm.fgPrm.relPrm.featureHashMod=featureHashMod;
  }
  prm.fgPrm.includeDp=includeDp;
  prm.fgPrm.includeSrl=includeSrl;
  prm.fgPrm.includeRel=includeRel;
  prm.fePrm=fePrm;
  prm.exPrm.cacheType=cacheType;
  prm.exPrm.gzipped=gzipCache;
  prm.exPrm.maxEntriesInMemory=maxEntriesInMemory;
  return prm;
}","private static JointNlpFgExampleBuilderPrm getSrlFgExampleBuilderPrm(JointNlpEncoder.JointNlpFeatureExtractorPrm fePrm){
  JointNlpFgExampleBuilderPrm prm=new JointNlpFgExampleBuilderPrm();
  prm.fgPrm.dpPrm.linkVarType=linkVarType;
  prm.fgPrm.dpPrm.useProjDepTreeFactor=useProjDepTreeFactor;
  prm.fgPrm.dpPrm.unaryFactors=unaryFactors;
  prm.fgPrm.dpPrm.excludeNonprojectiveGrandparents=excludeNonprojectiveGrandparents;
  prm.fgPrm.dpPrm.grandparentFactors=grandparentFactors;
  prm.fgPrm.dpPrm.siblingFactors=siblingFactors;
  prm.fgPrm.dpPrm.pruneEdges=pruneByDist || pruneByModel;
  prm.fgPrm.srlPrm.makeUnknownPredRolesLatent=makeUnknownPredRolesLatent;
  prm.fgPrm.srlPrm.roleStructure=roleStructure;
  prm.fgPrm.srlPrm.allowPredArgSelfLoops=allowPredArgSelfLoops;
  prm.fgPrm.srlPrm.unaryFactors=unaryFactors;
  prm.fgPrm.srlPrm.binarySenseRoleFactors=binarySenseRoleFactors;
  prm.fgPrm.srlPrm.predictSense=predictSense;
  prm.fgPrm.srlPrm.predictPredPos=predictPredPos;
  if (includeRel) {
    if (relFeatTpls != null) {
      prm.fgPrm.relPrm.templates=getFeatTpls(relFeatTpls);
    }
    prm.fgPrm.relPrm.featureHashMod=featureHashMod;
  }
  prm.fgPrm.includeDp=includeDp;
  prm.fgPrm.includeSrl=includeSrl;
  prm.fgPrm.includeRel=includeRel;
  prm.fePrm=fePrm;
  prm.exPrm.cacheType=cacheType;
  prm.exPrm.gzipped=gzipCache;
  prm.exPrm.maxEntriesInMemory=maxEntriesInMemory;
  return prm;
}",0.9642985935809592
131305,"@Test public void testToFromReal(){
  toFromCheck(1);
  toFromCheck(-1);
  toFromCheck(Double.POSITIVE_INFINITY);
  toFromCheck(Double.NEGATIVE_INFINITY);
  toFromCheck(Double.NaN);
  int i=0, j=0;
  double nan3=(double)i / j;
  toFromCheck(nan3);
}","@Test public void testToFromReal(){
  toFromCheck(1);
  toFromCheck(0);
  toFromCheck(-1);
  toFromCheck(Double.POSITIVE_INFINITY);
  toFromCheck(Double.NEGATIVE_INFINITY);
  toFromCheck(Double.NaN);
  int i=0, j=0;
  double nan3=(double)i / j;
  toFromCheck(nan3);
}",0.9651162790697676
131306,"@Override public double toLogProb(double nonReal){
  return fromReal(FastMath.log(toReal(nonReal)));
}","@Override public double toLogProb(double nonReal){
  return FastMath.log(toReal(nonReal));
}",0.9484536082474226
131307,"@Override public double fromLogProb(double logProb){
  return fromReal(FastMath.exp(toReal(logProb)));
}","@Override public double fromLogProb(double logProb){
  return fromReal(FastMath.exp(logProb));
}",0.96
131308,"@Override public Module<Tensor> getDl(VarConfig goldConfig,ExpFamFactorsModule effm,Module<Beliefs> inf,int curIter,int maxIter){
  double temperature=getTemperature(curIter,maxIter);
  TensorIdentity temp=new TensorIdentity(Tensor.getScalarTensor(Algebras.REAL_ALGEBRA,temperature));
  if (annealMse) {
    double prop=(double)curIter / maxIter;
    Module<Tensor> mse=new MeanSquaredError(inf,goldConfig);
    Module<Tensor> dep=new DepParseDecodeLoss(inf,goldConfig,temp);
    Module<Tensor> lin=new ElemLinear(mse,dep,(1.0 - prop),prop);
    return new TopoOrder<Tensor>(Lists.getList(inf),lin);
  }
 else {
    return new DepParseDecodeLoss(inf,goldConfig,temp);
  }
}","@Override public Module<Tensor> getDl(VarConfig goldConfig,ExpFamFactorsModule effm,Module<Beliefs> inf,int curIter,int maxIter){
  double temperature=getTemperature(curIter,maxIter);
  TensorIdentity temp=new TensorIdentity(Tensor.getScalarTensor(Algebras.REAL_ALGEBRA,temperature));
  if (annealMse) {
    double prop=(double)curIter / maxIter;
    Module<Tensor> mse=new MeanSquaredError(inf,goldConfig);
    Module<Tensor> dep=new DepParseDecodeLoss(inf,goldConfig,temp);
    Module<Tensor> lin=new ElemLinear(mse,dep,(1.0 - prop),prop);
    return new TopoOrder<Tensor>(Lists.getList(inf,temp),lin);
  }
 else {
    return new DepParseDecodeLoss(inf,goldConfig,temp);
  }
}",0.996299037749815
131309,"private void backwardSendMessage(FgEdge edge,VarTensor oldMsg){
  int i=edge.getId();
  msgs[i].newMessage=msgs[i].message;
  msgs[i].message=oldMsg;
  VarTensor tmp=msgsAdj[i].newMessage;
  tmp.multiply(0);
  msgsAdj[i].newMessage=msgsAdj[i].message;
  msgsAdj[i].message=tmp;
  logTraceMsgUpdate(""String_Node_Str"",msgsAdj[i].newMessage,edge);
}","private void backwardSendMessage(FgEdge edge,VarTensor oldMsg){
  int i=edge.getId();
  msgs[i].newMessage=msgs[i].message;
  msgs[i].message=oldMsg;
  VarTensor tmp=msgsAdj[i].newMessage;
  tmp.multiply(s.zero());
  msgsAdj[i].newMessage=msgsAdj[i].message;
  msgsAdj[i].message=tmp;
  logTraceMsgUpdate(""String_Node_Str"",msgsAdj[i].newMessage,edge);
}",0.9871244635193132
131310,"@Test public void testErmaCompareMessagesWithExplicitTreeFactor(){
  compareErmaMessagesWithExplicitTreeFactor(Algebras.REAL_ALGEBRA,true,false);
}","@Test public void testErmaCompareMessagesWithExplicitTreeFactor(){
  compareErmaMessagesWithExplicitTreeFactor(Algebras.REAL_ALGEBRA,true,false);
  compareErmaMessagesWithExplicitTreeFactor(Algebras.REAL_ALGEBRA,true,true);
  compareErmaMessagesWithExplicitTreeFactor(Algebras.LOG_SIGN_ALGEBRA,true,false);
  compareErmaMessagesWithExplicitTreeFactor(Algebras.LOG_SIGN_ALGEBRA,true,true);
}",0.547486033519553
131311,"public void compareErmaMessagesWithExplicitTreeFactor(Algebra s,boolean normalizeMessages,boolean makeLoopy){
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.s=s;
  prm.updateOrder=BpUpdateOrder.PARALLEL;
  prm.maxIterations=1;
  prm.normalizeMessages=normalizeMessages;
  FactorGraph fgExpl=get2WordSentFactorGraph(true,makeLoopy);
  ErmaBp bpExpl=new ErmaBp(fgExpl,prm);
  bpExpl.forward();
  FactorGraph fgDp=get2WordSentFactorGraph(false,makeLoopy);
  ErmaBp bpDp=new ErmaBp(fgDp,prm);
  bpDp.forward();
  System.out.println(""String_Node_Str"");
  assertEqualMessages(fgExpl,bpExpl.getMessages(),bpDp.getMessages());
  System.out.println(""String_Node_Str"");
  assertEqualVarTensors(bpExpl.getOutput().varBeliefs,bpDp.getOutput().varBeliefs);
  assertEqualVarTensors(bpExpl.getOutput().facBeliefs,bpDp.getOutput().facBeliefs);
  System.out.println(""String_Node_Str"" + bpExpl.getPartition());
  System.out.println(""String_Node_Str"" + bpDp.getPartition());
  assertEquals(bpExpl.getLogPartition(),bpDp.getLogPartition(),1e-10);
  for (int v=0; v < fgDp.getNumVars(); v++) {
    LinkVar link=(LinkVar)fgDp.getVar(v);
    double adj=0.0;
    if ((link.getParent() == -1 && link.getChild() == 1) || (link.getParent() == 1 && link.getChild() == 0)) {
      adj=1.0;
    }
    bpExpl.getOutputAdj().varBeliefs[v].setValue(LinkVar.TRUE,adj);
    bpDp.getOutputAdj().varBeliefs[v].setValue(LinkVar.TRUE,adj);
  }
  bpExpl.backward();
  bpDp.backward();
  System.out.println(""String_Node_Str"");
  assertEqualMessages(fgExpl,bpExpl.getMessagesAdj(),bpDp.getMessagesAdj());
  assertEqualVarTensors(bpExpl.getPotentialsAdj(),bpDp.getPotentialsAdj());
}","public void compareErmaMessagesWithExplicitTreeFactor(Algebra s,boolean normalizeMessages,boolean makeLoopy){
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.s=s;
  prm.updateOrder=BpUpdateOrder.PARALLEL;
  prm.maxIterations=1;
  prm.normalizeMessages=normalizeMessages;
  FactorGraph fgExpl=get2WordSentFactorGraph(true,makeLoopy);
  ErmaBp bpExpl=new ErmaBp(fgExpl,prm);
  bpExpl.forward();
  FactorGraph fgDp=get2WordSentFactorGraph(false,makeLoopy);
  ErmaBp bpDp=new ErmaBp(fgDp,prm);
  bpDp.forward();
  System.out.println(""String_Node_Str"");
  assertEqualMessages(fgExpl,bpExpl.getMessages(),bpDp.getMessages());
  System.out.println(""String_Node_Str"");
  assertEqualVarTensors(bpExpl.getOutput().varBeliefs,bpDp.getOutput().varBeliefs);
  assertEqualVarTensors(bpExpl.getOutput().facBeliefs,bpDp.getOutput().facBeliefs);
  System.out.println(""String_Node_Str"" + bpExpl.getPartition());
  System.out.println(""String_Node_Str"" + bpDp.getPartition());
  assertEquals(bpExpl.getLogPartition(),bpDp.getLogPartition(),1e-10);
  for (int v=0; v < fgDp.getNumVars(); v++) {
    LinkVar link=(LinkVar)fgDp.getVar(v);
    double adj=0.0;
    if ((link.getParent() == -1 && link.getChild() == 1) || (link.getParent() == 1 && link.getChild() == 0)) {
      adj=1.0;
    }
    bpExpl.getOutputAdj().varBeliefs[v].setValue(LinkVar.TRUE,adj);
    bpDp.getOutputAdj().varBeliefs[v].setValue(LinkVar.TRUE,adj);
  }
  System.out.println(""String_Node_Str"");
  bpExpl.backward();
  System.out.println(""String_Node_Str"");
  bpDp.backward();
  System.out.println(""String_Node_Str"");
  assertEqualMessages(fgExpl,bpExpl.getMessagesAdj(),bpDp.getMessagesAdj());
  assertEqualVarTensors(bpExpl.getPotentialsAdj(),bpDp.getPotentialsAdj());
}",0.9754931261207412
131312,"public void forwardAndBackward(FgNode parent,Messages[] msgs,Messages[] msgsAdj,boolean isForward){
  Algebra s=msgs[0].message.getAlgebra();
  Tensor tmTrueIn=getMsgs(parent,msgs,LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  Tensor tmFalseIn=getMsgs(parent,msgs,LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  TensorIdentity mTrueIn=new TensorIdentity(tmTrueIn);
  TensorIdentity mFalseIn=new TensorIdentity(tmFalseIn);
  Algebra tmpS=(isForward) ? Algebras.LOG_SEMIRING : Algebras.LOG_SIGN_ALGEBRA;
  ProjDepTreeModule dep=new ProjDepTreeModule(mTrueIn,mFalseIn,tmpS);
  dep.forward();
  if (isForward) {
    Tensor pair=dep.getOutput();
    Tensor tmTrueOut=pair.select(0,1);
    Tensor tmFalseOut=pair.select(0,0);
    setMsgs(parent,msgs,tmTrueOut,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    setMsgs(parent,msgs,tmFalseOut,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
  }
 else {
    Tensor tTrue=getMsgs(parent,msgsAdj,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    Tensor tFalse=getMsgs(parent,msgsAdj,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
    Tensor pairAdj=dep.getOutputAdj();
    Tensor tmTrueOutAdj=pairAdj.select(0,1);
    Tensor tmFalseOutAdj=pairAdj.select(0,0);
    tmTrueOutAdj.elemAdd(tTrue);
    tmFalseOutAdj.elemAdd(tFalse);
    dep.backward();
    addMsgs(parent,msgsAdj,mTrueIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
    addMsgs(parent,msgsAdj,mFalseIn.getOutputAdj(),LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  }
}","public void forwardAndBackward(FgNode parent,Messages[] msgs,Messages[] msgsAdj,boolean isForward){
  Algebra s=msgs[0].message.getAlgebra();
  Tensor tmTrueIn=getMsgs(parent,msgs,LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  Tensor tmFalseIn=getMsgs(parent,msgs,LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  TensorIdentity mTrueIn=new TensorIdentity(tmTrueIn);
  TensorIdentity mFalseIn=new TensorIdentity(tmFalseIn);
  Algebra tmpS=(isForward) ? Algebras.LOG_SEMIRING : Algebras.LOG_SIGN_ALGEBRA;
  ProjDepTreeModule dep=new ProjDepTreeModule(mTrueIn,mFalseIn,tmpS);
  dep.forward();
  if (isForward) {
    Tensor pair=dep.getOutput();
    Tensor tmTrueOut=pair.select(0,1);
    Tensor tmFalseOut=pair.select(0,0);
    setMsgs(parent,msgs,tmTrueOut,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    setMsgs(parent,msgs,tmFalseOut,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
  }
 else {
    Tensor tTrue=getMsgs(parent,msgsAdj,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    Tensor tFalse=getMsgs(parent,msgsAdj,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
    Tensor pairAdj=dep.getOutputAdj();
    pairAdj.addTensor(tTrue,0,1);
    pairAdj.addTensor(tFalse,0,0);
    dep.backward();
    addMsgs(parent,msgsAdj,mTrueIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
    addMsgs(parent,msgsAdj,mFalseIn.getOutputAdj(),LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  }
}",0.9302848575712144
131313,"public DepTensorToBeliefs(Module<Tensor> dep,Module<Beliefs> inf){
  super(dep.getAlgebra());
  this.depIn=dep;
  this.inf=inf;
}","/** 
 * Constructor.
 * @param dep The tensor representation of the edge marginals.
 * @param inf The reference beliefs used only to determine the correct set of variables.
 */
public DepTensorToBeliefs(Module<Tensor> dep,Module<Beliefs> inf){
  super(dep.getAlgebra());
  this.depIn=dep;
  this.inf=inf;
}",0.593103448275862
131314,"@Override public Beliefs forward(){
}","/** 
 * Forward pass: b(e_{p,c} = True) = d_{p,c} b(e_{p,c} = False) = 1.0 - d_{p,c} Abbreviated: t_i = m_i f_i = 1.0 - m_i
 */
@Override public Beliefs forward(){
}",0.3663366336633663
131315,"@Override public void backward(){
}","/** 
 * Backward pass: dG/dm_i += dG/dt_i*dt_i/dm_i + dG/df_i*df_i/dm_i = dG/dt_i - dG/df_i
 */
@Override public void backward(){
}",0.4216867469879518
131316,"@Test public void testSimple(){
  Tensor t1=new Tensor(s,2,2);
  t1.setValuesOnly(TensorUtils.getVectorFromValues(s,.2,.3,.5,.7));
  TensorIdentity id1=new TensorIdentity(t1);
  BeliefsIdentity inf=DepTensorFromBeliefsTest.getBeliefsModule();
  DepTensorToBeliefs mod=new DepTensorToBeliefs(id1,inf);
  Beliefs out=mod.forward();
  assertEquals(null,out.varBeliefs[0]);
  assertEquals(null,out.varBeliefs[1]);
  assertEquals(.3,out.varBeliefs[2].getValue(0),1e-13);
  assertEquals(.7,out.varBeliefs[2].getValue(1),1e-13);
  assertEquals(.5,out.varBeliefs[3].getValue(0),1e-13);
  assertEquals(.5,out.varBeliefs[3].getValue(1),1e-13);
  Beliefs outAdj=mod.getOutputAdj();
  outAdj.fill(2.2);
  mod.backward();
  Tensor inAdj=id1.getOutputAdj();
  assertEquals(0.0,inAdj.get(0,0),1e-13);
  assertEquals(0.0,inAdj.get(0,1),1e-13);
  assertEquals(2.2,inAdj.get(1,0),1e-13);
  assertEquals(2.2,inAdj.get(1,1),1e-13);
}","@Test public void testSimple(){
  Tensor t1=new Tensor(s,2,2);
  t1.setValuesOnly(TensorUtils.getVectorFromValues(s,.2,.3,.5,.7));
  TensorIdentity id1=new TensorIdentity(t1);
  BeliefsIdentity inf=DepTensorFromBeliefsTest.getBeliefsModule();
  DepTensorToBeliefs mod=new DepTensorToBeliefs(id1,inf);
  Beliefs out=mod.forward();
  assertEquals(null,out.varBeliefs[0]);
  assertEquals(null,out.varBeliefs[1]);
  assertEquals(.3,out.varBeliefs[2].getValue(0),1e-13);
  assertEquals(.7,out.varBeliefs[2].getValue(1),1e-13);
  assertEquals(.5,out.varBeliefs[3].getValue(0),1e-13);
  assertEquals(.5,out.varBeliefs[3].getValue(1),1e-13);
  Beliefs outAdj=mod.getOutputAdj();
  outAdj.fill(0.0);
  outAdj.varBeliefs[2].set(2.2,1);
  outAdj.varBeliefs[3].set(2.2,0);
  mod.backward();
  Tensor inAdj=id1.getOutputAdj();
  assertEquals(0.0,inAdj.get(0,0),1e-13);
  assertEquals(0.0,inAdj.get(0,1),1e-13);
  assertEquals(-2.2,inAdj.get(1,0),1e-13);
  assertEquals(2.2,inAdj.get(1,1),1e-13);
}",0.959409594095941
131317,"@Test public void testDotProduct(){
  Tensor t1=TensorUtils.getVectorFromValues(s,2,3,5);
  Tensor t2=TensorUtils.getVectorFromValues(s,-4,6,7);
  assertEquals(2 * -4 + 3 * 6 + 5 * 7,t1.getDotProduct(t2),1e-13);
}","@Test public void testDotProduct(){
  for (  Algebra s : two) {
    Tensor t1=TensorUtils.getVectorFromValues(s,s.fromReal(2),s.fromReal(3),s.fromReal(5));
    Tensor t2=TensorUtils.getVectorFromValues(s,s.fromReal(-4),s.fromReal(6),s.fromReal(7));
    assertEquals(s.fromReal(2 * -4 + 3 * 6 + 5 * 7),t1.getDotProduct(t2),1e-13);
  }
}",0.7627737226277372
131318,"@Test public void testValueOperations(){
  Tensor f1=new Tensor(s,2);
  f1.setValue(0,0);
  f1.setValue(1,1);
  f1.fill(2);
  JUnitUtils.assertArrayEquals(new double[]{2,2},f1.getValues(),1e-13);
  f1.setValue(0,1);
  f1.add(2);
  JUnitUtils.assertArrayEquals(new double[]{3,4},f1.getValues(),1e-13);
  f1.multiply(0.5);
  JUnitUtils.assertArrayEquals(new double[]{1.5,2},f1.getValues(),1e-13);
  assertEquals(1.5,f1.getValue(0),1e-13);
  assertEquals(2.0,f1.getValue(1),1e-13);
}","private void testValueOperations(Algebra s){
  Tensor f1=new Tensor(s,2);
  f1.setValue(0,s.fromReal(0));
  f1.setValue(1,s.fromReal(1));
  f1.fill(s.fromReal(2));
  JUnitUtils.assertArrayEquals(Algebras.getFromReal(new double[]{2,2},s),f1.getValues(),1e-13);
  f1.setValue(0,s.fromReal(1));
  f1.add(s.fromReal(2));
  JUnitUtils.assertArrayEquals(Algebras.getFromReal(new double[]{3,4},s),f1.getValues(),1e-13);
  f1.multiply(s.fromReal(0.5));
  JUnitUtils.assertArrayEquals(Algebras.getFromReal(new double[]{1.5,2},s),f1.getValues(),1e-13);
  assertEquals(s.fromReal(1.5),f1.getValue(0),1e-13);
  assertEquals(s.fromReal(2.0),f1.getValue(1),1e-13);
}",0.773851590106007
131319,"@Test public void testGetSetAddSubWithIndices(){
  Tensor t1=new Tensor(s,2,3,5);
  double val;
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(0,t1.set(val++,i,j,k),1e-13);
      }
    }
  }
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(val,t1.set(val,i,j,k),1e-13);
        val++;
      }
    }
  }
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(val++,t1.get(i,j,k),1e-13);
      }
    }
  }
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(val,t1.add(val,i,j,k),1e-13);
        assertEquals(val * 2,t1.get(i,j,k),1e-13);
        val++;
      }
    }
  }
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(val * 2,t1.subtract(val,i,j,k),1e-13);
        assertEquals(val,t1.get(i,j,k),1e-13);
        val++;
      }
    }
  }
}","private void testGetSetAddSubWithIndices(Algebra s){
  Tensor t1=new Tensor(s,2,3,5);
  double val;
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(s.fromReal(0),t1.set(val++,i,j,k),1e-13);
      }
    }
  }
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(val,t1.set(val,i,j,k),1e-13);
        val++;
      }
    }
  }
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(val++,t1.get(i,j,k),1e-13);
      }
    }
  }
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        assertEquals(val,t1.add(val,i,j,k),1e-13);
        double exp=s.times(s.fromReal(2),val);
        assertEquals(exp,t1.get(i,j,k),1e-13);
        val++;
      }
    }
  }
  val=0;
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 5; k++) {
        double exp=s.times(s.fromReal(2),val);
        assertEquals(exp,t1.subtract(val,i,j,k),1e-13);
        assertEquals(val,t1.get(i,j,k),1e-13);
        val++;
      }
    }
  }
}",0.9340753424657534
131320,"@Test public void testFactorAddIdentical(){
  Tensor f1=new Tensor(s,2,3);
  f1.fill(1);
  f1.setValue(2,2);
  f1.setValue(3,3);
  Tensor f2=new Tensor(s,2,3);
  f2.fill(2);
  f2.setValue(2,5);
  f2.setValue(5,7);
  System.out.println(""String_Node_Str"" + f1);
  System.out.println(""String_Node_Str"" + f2);
  f1.elemAdd(f2);
  System.out.println(""String_Node_Str"" + f1);
  JUnitUtils.assertArrayEquals(new double[]{3.0,3.0,7.0,5.0,3.0,8.0},f1.getValues(),1e-13);
}","private void testFactorAddIdentical(Algebra s){
  Tensor f1=new Tensor(s,2,3);
  f1.fill(s.fromReal(1));
  f1.setValue(2,s.fromReal(2));
  f1.setValue(3,s.fromReal(3));
  Tensor f2=new Tensor(s,2,3);
  f2.fill(s.fromReal(2));
  f2.setValue(2,s.fromReal(5));
  f2.setValue(5,s.fromReal(7));
  System.out.println(""String_Node_Str"" + f1);
  System.out.println(""String_Node_Str"" + f2);
  f1.elemAdd(f2);
  System.out.println(""String_Node_Str"" + f1);
  JUnitUtils.assertArrayEquals(Algebras.getFromReal(new double[]{3.0,3.0,7.0,5.0,3.0,8.0},s),f1.getValues(),1e-13);
}",0.6003898635477583
131321,"public void forwardAndBackward(FgNode parent,Messages[] msgs,Messages[] msgsAdj,boolean isForward){
  Algebra s=msgs[0].message.getAlgebra();
  Tensor tmTrueIn=getMsgs(parent,msgs,LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  Tensor tmFalseIn=getMsgs(parent,msgs,LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  TensorIdentity mTrueIn=new TensorIdentity(tmTrueIn);
  TensorIdentity mFalseIn=new TensorIdentity(tmFalseIn);
  Algebra tmpS=(isForward) ? new LogSemiring() : new LogSignAlgebra();
  ProjDepTreeModule dep=new ProjDepTreeModule(mTrueIn,mFalseIn,tmpS);
  dep.forward();
  if (isForward) {
    Tensor pair=dep.getOutput();
    Tensor tmTrueOut=pair.select(0,1);
    Tensor tmFalseOut=pair.select(0,0);
    setMsgs(parent,msgs,tmTrueOut,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    setMsgs(parent,msgs,tmFalseOut,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
  }
 else {
    Tensor tTrue=getMsgs(parent,msgsAdj,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    Tensor tFalse=getMsgs(parent,msgsAdj,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
    Tensor pairAdj=dep.getOutputAdj();
    Tensor tmTrueOutAdj=pairAdj.select(0,1);
    Tensor tmFalseOutAdj=pairAdj.select(0,0);
    tmTrueOutAdj.elemAdd(tTrue);
    tmFalseOutAdj.elemAdd(tFalse);
    dep.backward();
    addMsgs(parent,msgsAdj,mTrueIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
    addMsgs(parent,msgsAdj,mFalseIn.getOutputAdj(),LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  }
}","public void forwardAndBackward(FgNode parent,Messages[] msgs,Messages[] msgsAdj,boolean isForward){
  Algebra s=msgs[0].message.getAlgebra();
  Tensor tmTrueIn=getMsgs(parent,msgs,LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  Tensor tmFalseIn=getMsgs(parent,msgs,LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  TensorIdentity mTrueIn=new TensorIdentity(tmTrueIn);
  TensorIdentity mFalseIn=new TensorIdentity(tmFalseIn);
  Algebra tmpS=(isForward) ? Algebras.LOG_SEMIRING : Algebras.LOG_SIGN_ALGEBRA;
  ProjDepTreeModule dep=new ProjDepTreeModule(mTrueIn,mFalseIn,tmpS);
  dep.forward();
  if (isForward) {
    Tensor pair=dep.getOutput();
    Tensor tmTrueOut=pair.select(0,1);
    Tensor tmFalseOut=pair.select(0,0);
    setMsgs(parent,msgs,tmTrueOut,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    setMsgs(parent,msgs,tmFalseOut,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
  }
 else {
    Tensor tTrue=getMsgs(parent,msgsAdj,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    Tensor tFalse=getMsgs(parent,msgsAdj,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
    Tensor pairAdj=dep.getOutputAdj();
    Tensor tmTrueOutAdj=pairAdj.select(0,1);
    Tensor tmFalseOutAdj=pairAdj.select(0,0);
    tmTrueOutAdj.elemAdd(tTrue);
    tmFalseOutAdj.elemAdd(tFalse);
    dep.backward();
    addMsgs(parent,msgsAdj,mTrueIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
    addMsgs(parent,msgsAdj,mFalseIn.getOutputAdj(),LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  }
}",0.9748999636231356
131322,"Module<Tensor> getModule(Module<Tensor> m1,Module<Tensor> m2);","Module<Y> getModule(Module<W> m1,Module<X> m2);",0.8073394495412844
131323,"/** 
 * Evaluates a tensor module by finite differences. This tensor module takes one tensor as input, and will be tested on multiple semirings.
 */
public static void evalTensor1ByFiniteDiffs(Tensor1Factory fact,Module<Tensor> in1){
}","/** 
 * Evaluates a tensor module by finite differences. This tensor module takes one tensor as input, and will be tested on multiple semirings.
 */
public static void evalTensor1ByFiniteDiffs(Tensor1Factory fact,Module<Tensor> in1){
  evalOneToOneByFiniteDiffs(fact,in1);
}",0.9233791748526524
131324,"/** 
 * Evaluates a tensor module by finite differences. This tensor module takes two tensors as input, and will be tested on multiple semirings.
 */
public static void evalTensor2ByFiniteDiffs(Tensor2Factory fact,Module<Tensor> in1,Module<Tensor> in2){
}","/** 
 * Evaluates a tensor module by finite differences. This tensor module takes two tensors as input, and will be tested on multiple semirings.
 */
public static void evalTensor2ByFiniteDiffs(Tensor2Factory fact,Module<Tensor> in1,Module<Tensor> in2){
  evalTwoToOneByFiniteDiffs(fact,in1,in2);
}",0.922242314647378
131325,"/** 
 * Evaluates a tensor module by finite differences. This tensor module takes two tensors as input, and will be tested on multiple semirings. NOTE: This method is just a variant of the one above which always makes the input to the tested module non-negative.
 */
public static void evalTensor2ByFiniteDiffsAbs(Tensor2Factory fact,Module<Tensor> in1,Module<Tensor> in2){
}","/** 
 * Evaluates a tensor module by finite differences. This tensor module takes two tensors as input, and will be tested on multiple semirings. NOTE: This method is just a variant of the one above which always makes the input to the tested module non-negative.
 */
public static void evalTensor2ByFiniteDiffsAbs(Tensor2Factory fact,Module<Tensor> in1,Module<Tensor> in2){
  evalTwoToOneByFiniteDiffsAbs(fact,in1,in2);
}",0.942211055276382
131326,"/** 
 * Evaluates a tensor module by finite differences. This tensor module takes one tensor as input, and will be tested on multiple semirings. NOTE: This method is just a variant of the one above which always makes the input to the tested module non-negative.
 */
public static void evalTensor1ByFiniteDiffsAbs(Tensor1Factory fact,Module<Tensor> in1){
}","/** 
 * Evaluates a tensor module by finite differences. This tensor module takes one tensor as input, and will be tested on multiple semirings. NOTE: This method is just a variant of the one above which always makes the input to the tested module non-negative.
 */
public static void evalTensor1ByFiniteDiffsAbs(Tensor1Factory fact,Module<Tensor> in1){
  evalOneToOneByFiniteDiffsAbs(fact,in1);
}",0.9441489361702128
131327,"private static void evalTensor1(Tensor t1,Tensor expT1Adj,Tensor1Factory fact,Tensor expOut,double adjFill,Algebra tmpS){
  TensorIdentity id1=new TensorIdentity(t1);
  ConvertAlgebra id1Co=new ConvertAlgebra(id1,tmpS);
  Module<Tensor> ea=fact.getModule(id1Co);
  ConvertAlgebra eaCo=new ConvertAlgebra(ea,t1.getAlgebra());
  TopoOrder topo=new TopoOrder();
  topo.add(id1);
  topo.add(id1Co);
  topo.add(ea);
  topo.add(eaCo);
  Tensor out=topo.forward();
  assertTensorEqual(expOut,out,1e-10);
  assertTrue(out == topo.getOutput());
  topo.getOutputAdj().fill(adjFill);
  topo.backward();
  assertTensorEqual(expT1Adj,id1.getOutputAdj(),1e-10);
}","private static void evalTensor1(Tensor t1,Tensor expT1Adj,Tensor1Factory fact,Tensor expOut,double adjFill,Algebra tmpS){
  TensorIdentity id1=new TensorIdentity(t1);
  ConvertAlgebra<Tensor> id1Co=new ConvertAlgebra<Tensor>(id1,tmpS);
  Module<Tensor> ea=fact.getModule(id1Co);
  ConvertAlgebra<Tensor> eaCo=new ConvertAlgebra<Tensor>(ea,t1.getAlgebra());
  TopoOrder topo=new TopoOrder();
  topo.add(id1);
  topo.add(id1Co);
  topo.add(ea);
  topo.add(eaCo);
  Tensor out=topo.forward();
  assertTensorEqual(expOut,out,1e-10);
  assertTrue(out == topo.getOutput());
  topo.getOutputAdj().fill(adjFill);
  topo.backward();
  assertTensorEqual(expT1Adj,id1.getOutputAdj(),1e-10);
}",0.97593984962406
131328,"private static void evalTensor2(Tensor t1,Tensor expT1Adj,Tensor t2,Tensor expT2Adj,Tensor2Factory fact,Tensor expOut,double adjFill,Algebra tmpS){
  Tensor.checkSameAlgebra(t1,t2);
  TensorIdentity id1=new TensorIdentity(t1);
  ConvertAlgebra id1Co=new ConvertAlgebra(id1,tmpS);
  TensorIdentity id2=new TensorIdentity(t2);
  ConvertAlgebra id2Co=new ConvertAlgebra(id2,tmpS);
  Module<Tensor> main=fact.getModule(id1Co,id2Co);
  ConvertAlgebra mainCo=new ConvertAlgebra(main,t1.getAlgebra());
  TopoOrder topo=new TopoOrder();
  topo.add(id1);
  topo.add(id1Co);
  topo.add(id2);
  topo.add(id2Co);
  topo.add(main);
  topo.add(mainCo);
  Tensor out=topo.forward();
  assertTensorEqual(expOut,out,1e-13);
  assertTrue(out == topo.getOutput());
  topo.getOutputAdj().fill(adjFill);
  topo.backward();
  assertTensorEqual(expT1Adj,id1.getOutputAdj(),1e-13);
  assertTensorEqual(expT2Adj,id2.getOutputAdj(),1e-13);
}","private static void evalTensor2(Tensor t1,Tensor expT1Adj,Tensor t2,Tensor expT2Adj,Tensor2Factory fact,Tensor expOut,double adjFill,Algebra tmpS){
  Tensor.checkSameAlgebra(t1,t2);
  TensorIdentity id1=new TensorIdentity(t1);
  ConvertAlgebra<Tensor> id1Co=new ConvertAlgebra<Tensor>(id1,tmpS);
  TensorIdentity id2=new TensorIdentity(t2);
  ConvertAlgebra<Tensor> id2Co=new ConvertAlgebra<Tensor>(id2,tmpS);
  Module<Tensor> main=fact.getModule(id1Co,id2Co);
  ConvertAlgebra<Tensor> mainCo=new ConvertAlgebra<Tensor>(main,t1.getAlgebra());
  TopoOrder topo=new TopoOrder();
  topo.add(id1);
  topo.add(id1Co);
  topo.add(id2);
  topo.add(id2Co);
  topo.add(main);
  topo.add(mainCo);
  Tensor out=topo.forward();
  assertTensorEqual(expOut,out,1e-13);
  assertTrue(out == topo.getOutput());
  topo.getOutputAdj().fill(adjFill);
  topo.backward();
  assertTensorEqual(expT1Adj,id1.getOutputAdj(),1e-13);
  assertTensorEqual(expT2Adj,id2.getOutputAdj(),1e-13);
}",0.97444089456869
131329,List<? extends Module<? extends ModuleTensor>> getInputs();,List<? extends Module<? extends ModuleTensor<?>>> getInputs();,0.975206611570248
131330,"public void add(Module<? extends ModuleTensor> m){
  topoOrder.add(m);
  s=m.getAlgebra();
}","public void add(Module<? extends ModuleTensor<?>> m){
  topoOrder.add(m);
  s=m.getAlgebra();
}",0.983957219251337
131331,"@Override public void backward(){
  List<Module<? extends ModuleTensor>> revTopo=Lists.reverse(topoOrder);
  for (  Module<? extends ModuleTensor> m : revTopo) {
    m.backward();
  }
}","@Override public void backward(){
  List<Module<? extends ModuleTensor<?>>> revTopo=Lists.reverse(topoOrder);
  for (  Module<? extends ModuleTensor<?>> m : revTopo) {
    m.backward();
  }
}",0.9840425531914894
131332,"@Override public List<Module<? extends ModuleTensor>> getInputs(){
  List inputs=new ArrayList();
  for (  Module m : topoOrder) {
    inputs.add(m);
  }
  return inputs;
}","@Override public List<Module<? extends ModuleTensor<?>>> getInputs(){
  List inputs=new ArrayList();
  for (  Module m : topoOrder) {
    inputs.add(m);
  }
  return inputs;
}",0.9913544668587896
131333,"public List<Module<? extends ModuleTensor>> getTopoOrder(){
  return topoOrder;
}","public List<Module<? extends ModuleTensor<?>>> getTopoOrder(){
  return topoOrder;
}",0.9818181818181818
131334,"public BeliefsIdentity(Beliefs b){
  super(b.s);
  this.b=b;
}","public BeliefsIdentity(Beliefs b){
  super(b.s);
  this.y=b;
}",0.9838709677419356
131335,"@Override public Beliefs forward(){
  return b;
}","@Override public Beliefs forward(){
  return y;
}",0.979591836734694
131336,"@Override public void zeroOutputAdj(){
  mTrueOut.zeroOutputAdj();
  mFalseOut.zeroOutputAdj();
}","@Override public void zeroOutputAdj(){
  for (  Module<?> m : topoOrder) {
    m.zeroOutputAdj();
  }
}",0.66
131337,"@Override public List<? extends Object> getInputs(){
  return Lists.getList(leftIn,rightIn);
}","@Override public List<Module<Tensor>> getInputs(){
  return Lists.getList(leftIn,rightIn);
}",0.8817204301075269
131338,"@Override public Pair<Tensor,Tensor> getOutputAdj(){
  return new Pair<Tensor,Tensor>(mTrueOut.getOutputAdj(),mFalseOut.getOutputAdj());
}","@Override public Tensor getOutputAdj(){
  return comb.getOutputAdj();
}",0.6602870813397129
131339,"@Override public Pair<Tensor,Tensor> getOutput(){
  return new Pair<Tensor,Tensor>(mTrueOut.getOutput(),mFalseOut.getOutput());
}","@Override public Tensor getOutput(){
  return comb.getOutput();
}",0.6494845360824743
131340,"/** 
 * @inheritDoc 
 */
@Override public void accum(FgModel model,int i,Accumulator ac){
  final Timer t0=new Timer();
  t0.start();
  final Timer t=new Timer();
  final LFgExample ex=data.get(i);
  final FactorGraph fg=ex.getFgLatPred();
  final VarConfig goldConfig=ex.getGoldConfig();
  Algebra s=infFactory.getAlgebra();
  t.reset();
  t.start();
  ExpFamFactorsModule effm=new ExpFamFactorsModule(fg,model,s);
  ErmaBp inf=(ErmaBp)infFactory.getInferencer(fg);
  inf.setEffm(effm);
  Module<Tensor> dl=dlFactory.getDl(fg,goldConfig,inf,ac.curIter,ac.maxIter);
  t.stop();
  initTimer.add(t);
  t.reset();
  t.start();
  effm.forward();
  t.stop();
  updTimer.add(t);
  t.reset();
  t.start();
  inf.forward();
  t.stop();
  infTimer.add(t);
  t.reset();
  t.start();
  dl.forward();
  t.stop();
  valTimer.add(t);
  if (ac.accumValue) {
    t.reset();
    t.start();
    ac.value+=dl.getOutput().get(0);
    t.stop();
    valTimer.add(t);
  }
  if (ac.accumGradient) {
    t.reset();
    t.start();
    dl.getOutputAdj().fill(1.0);
    dl.backward();
    inf.backward();
    effm.backward();
    ac.gradient.add(effm.getModelAdj());
    t.stop();
    gradTimer.add(t);
  }
  if (ac.accumWeight) {
    ac.weight+=ex.getWeight();
  }
  if (ac.accumTrainLoss) {
    ac.trainLoss+=dl.getOutput().get(0);
  }
  t0.stop();
  tot.add(t0);
}","/** 
 * @inheritDoc 
 */
@Override public void accum(FgModel model,int i,Accumulator ac){
  final Timer t0=new Timer();
  t0.start();
  final Timer t=new Timer();
  final LFgExample ex=data.get(i);
  final FactorGraph fg=ex.getFgLatPred();
  final VarConfig goldConfig=ex.getGoldConfig();
  t.reset();
  t.start();
  ExpFamFactorsModule effm=new ExpFamFactorsModule(fg,model,infFactory.getAlgebra());
  ErmaBp inf=(ErmaBp)infFactory.getInferencer(fg);
  inf.setEffm(effm);
  Module<Tensor> dl=dlFactory.getDl(fg,goldConfig,inf,ac.curIter,ac.maxIter);
  t.stop();
  initTimer.add(t);
  t.reset();
  t.start();
  effm.forward();
  t.stop();
  updTimer.add(t);
  t.reset();
  t.start();
  inf.forward();
  t.stop();
  infTimer.add(t);
  t.reset();
  t.start();
  dl.forward();
  t.stop();
  valTimer.add(t);
  Algebra outS=dl.getAlgebra();
  double loss=outS.toReal(dl.getOutput().get(0));
  if (ac.accumValue) {
    t.reset();
    t.start();
    ac.value+=loss;
    t.stop();
    valTimer.add(t);
  }
  if (ac.accumGradient) {
    t.reset();
    t.start();
    dl.getOutputAdj().fill(outS.one());
    dl.backward();
    inf.backward();
    effm.backward();
    ac.gradient.add(effm.getModelAdj());
    t.stop();
    gradTimer.add(t);
  }
  if (ac.accumWeight) {
    ac.weight+=ex.getWeight();
  }
  if (ac.accumTrainLoss) {
    ac.trainLoss+=loss;
  }
  t0.stop();
  tot.add(t0);
}",0.82560706401766
131341,"/** 
 * Gets the strides for the given dimensions. The stride for dimension i (stride[i]) denotes the step forward in values array necessary to increase the index for that dimension by 1.
 */
private static int[] getStrides(int[] dims){
  int rightmost=dims.length - 1;
  int[] strides=new int[dims.length];
  strides[rightmost]=1;
  for (int i=rightmost - 1; i >= 0; i--) {
    strides[i]=dims[i + 1] * strides[i + 1];
  }
  return strides;
}","/** 
 * Gets the strides for the given dimensions. The stride for dimension i (stride[i]) denotes the step forward in values array necessary to increase the index for that dimension by 1.
 */
private static int[] getStrides(int[] dims){
  int rightmost=dims.length - 1;
  int[] strides=new int[dims.length];
  if (dims.length > 0) {
    strides[rightmost]=1;
    for (int i=rightmost - 1; i >= 0; i--) {
      strides[i]=dims[i + 1] * strides[i + 1];
    }
  }
  return strides;
}",0.9122426868905742
131342,"/** 
 * Reads a Bayesian Network from a network InputStream and a CPD InputStream, and returns a factor graph representation of it.
 */
public FactorGraph readBnAsFg(InputStream networkIs,InputStream cpdIs) throws IOException {
  BufferedReader networkReader=new BufferedReader(new InputStreamReader(networkIs));
  int numVars=Integer.parseInt(networkReader.readLine().trim());
  varMap=new HashMap<String,Var>();
  VarSet allVars=new VarSet();
  for (int i=0; i < numVars; i++) {
    Var var=parseVar(networkReader.readLine());
    allVars.add(var);
    varMap.put(var.getName(),var);
  }
  assert(allVars.size() == numVars);
  networkReader.close();
  BufferedReader cpdReader=new BufferedReader(new InputStreamReader(cpdIs));
  factorMap=new LinkedHashMap<VarSet,ExplicitFactor>();
  String line;
  while ((line=cpdReader.readLine()) != null) {
    VarConfig config=new VarConfig();
    String[] assns=whitespaceOrComma.split(line);
    for (int i=0; i < assns.length - 1; i++) {
      String assn=assns[i];
      String[] va=equals.split(assn);
      assert(va.length == 2);
      String varName=va[0];
      String stateName=va[1];
      config.put(varMap.get(varName),stateName);
    }
    double value=Double.parseDouble(assns[assns.length - 1]);
    VarSet vars=config.getVars();
    ExplicitFactor f=factorMap.get(vars);
    if (f == null) {
      f=new ExplicitFactor(vars);
    }
    f.setValue(config.getConfigIndex(),value);
    factorMap.put(vars,f);
  }
  cpdReader.close();
  FactorGraph fg=new FactorGraph();
  for (  ExplicitFactor f : factorMap.values()) {
    fg.addFactor(f);
  }
  return fg;
}","/** 
 * Reads a Bayesian Network from a network InputStream and a CPD InputStream, and returns a factor graph representation of it.
 */
public FactorGraph readBnAsFg(InputStream networkIs,InputStream cpdIs) throws IOException {
  BufferedReader networkReader=new BufferedReader(new InputStreamReader(networkIs));
  int numVars=Integer.parseInt(networkReader.readLine().trim());
  varMap=new HashMap<String,Var>();
  VarSet allVars=new VarSet();
  for (int i=0; i < numVars; i++) {
    Var var=parseVar(networkReader.readLine());
    allVars.add(var);
    varMap.put(var.getName(),var);
  }
  assert(allVars.size() == numVars);
  networkReader.close();
  BufferedReader cpdReader=new BufferedReader(new InputStreamReader(cpdIs));
  factorMap=new LinkedHashMap<VarSet,ExplicitFactor>();
  String line;
  while ((line=cpdReader.readLine()) != null) {
    VarConfig config=new VarConfig();
    String[] assns=whitespaceOrComma.split(line);
    for (int i=0; i < assns.length - 1; i++) {
      String assn=assns[i];
      String[] va=equals.split(assn);
      assert(va.length == 2);
      String varName=va[0];
      String stateName=va[1];
      config.put(varMap.get(varName),stateName);
    }
    double value=Double.parseDouble(assns[assns.length - 1]);
    value=FastMath.log(value);
    VarSet vars=config.getVars();
    ExplicitFactor f=factorMap.get(vars);
    if (f == null) {
      f=new ExplicitFactor(vars);
    }
    f.setValue(config.getConfigIndex(),value);
    factorMap.put(vars,f);
  }
  cpdReader.close();
  FactorGraph fg=new FactorGraph();
  for (  ExplicitFactor f : factorMap.values()) {
    fg.addFactor(f);
  }
  return fg;
}",0.99049371358479
131343,"private void unnormalizeAdjInPlace(VarTensor dist,VarTensor distAdj,double unormSum){
  VarTensor unormAdj=distAdj;
  double dotProd=dist.getDotProduct(distAdj);
  unormAdj.subtract(dotProd);
  unormAdj.divide(unormSum);
  logTraceMsgUpdate(""String_Node_Str"",distAdj,null);
}","private void unnormalizeAdjInPlace(VarTensor dist,VarTensor distAdj,double unormSum){
  if (unormSum == s.zero()) {
    throw new IllegalArgumentException(""String_Node_Str"" + dist + ""String_Node_Str""+ distAdj+ ""String_Node_Str""+ unormSum);
  }
  VarTensor unormAdj=distAdj;
  double dotProd=dist.getDotProduct(distAdj);
  unormAdj.subtract(dotProd);
  unormAdj.divide(unormSum);
  logTraceMsgUpdate(""String_Node_Str"",distAdj,null);
}",0.7768361581920904
131344,"/** 
 * Gets this factor as a VarTensor. This will always return a new object. See also safeGetVarTensor(). 
 */
public static VarTensor safeNewVarTensor(Algebra s,Factor f){
  VarTensor factor;
  if (f instanceof VarTensor) {
    factor=((VarTensor)f).copyAndConvertAlgebra(s);
  }
 else {
    factor=new VarTensor(s,f.getVars());
    for (int c=0; c < factor.size(); c++) {
      factor.setValue(c,s.fromLogProb(f.getLogUnormalizedScore(c)));
    }
  }
  return factor;
}","/** 
 * Gets this factor as a VarTensor. This will always return a new object. See also safeGetVarTensor(). 
 */
public static VarTensor safeNewVarTensor(Algebra s,Factor f){
  VarTensor factor;
  factor=new VarTensor(s,f.getVars());
  for (int c=0; c < factor.size(); c++) {
    factor.setValue(c,s.fromLogProb(f.getLogUnormalizedScore(c)));
  }
  return factor;
}",0.8353221957040573
131345,"public ExpFamFactorsModule(FactorGraph fg,FgModel model,Algebra s){
  if (!(s.equals(Algebras.LOG_SEMIRING) || s.equals(Algebras.REAL_ALGEBRA))) {
    throw new IllegalArgumentException(""String_Node_Str"" + s);
  }
  this.fg=fg;
  this.model=model;
  this.s=s;
}","public ExpFamFactorsModule(FactorGraph fg,FgModel model,Algebra s){
  this.fg=fg;
  this.model=model;
  this.s=s;
}",0.6117021276595744
131346,"@Override public void backward(){
}","@Override public void backward(){
  modelAdj=model.getSparseZeroedCopy();
  for (int a=0; a < y.length; a++) {
    Factor factor=fg.getFactor(a);
    if (!(factor instanceof GlobalFactor)) {
      VarTensor factorMarginal=new VarTensor(yAdj[a]);
      factorMarginal.prod(y[a]);
      factorMarginal=factorMarginal.copyAndConvertAlgebra(Algebras.REAL_ALGEBRA);
      factor.addExpectedFeatureCounts(modelAdj,factorMarginal,Algebras.REAL_ALGEBRA.one());
    }
  }
}",0.1402805611222445
131347,"public FgModel train(FgModel model,FgExampleList data){
  ExampleObjective exObj;
  boolean isMinimize;
  if (prm.trainer == Trainer.ERMA) {
    exObj=new ErmaObjective(data,prm.infFactory,prm.dlFactory);
    isMinimize=true;
  }
 else {
    exObj=new CrfObjective(data,prm.infFactory,prm.useMseForValue);
    isMinimize=false;
  }
  AvgBatchObjective objective=new AvgBatchObjective(exObj,model,prm.numThreads);
  if (prm.optimizer != null) {
    DifferentiableFunction fn=objective;
    if (prm.regularizer != null) {
      prm.regularizer.setNumDimensions(model.getNumParams());
      fn=new DifferentiableFunctionOpts.AddFunctions(objective,prm.regularizer);
    }
    if (isMinimize == true) {
      prm.optimizer.minimize(fn,model.getParams());
    }
 else {
      prm.optimizer.maximize(fn,model.getParams());
    }
    log.info(""String_Node_Str"" + fn.getValue(model.getParams()));
  }
 else {
    DifferentiableBatchFunction fn=objective;
    if (prm.regularizer != null) {
      prm.regularizer.setNumDimensions(model.getNumParams());
      DifferentiableBatchFunction br=new FunctionAsBatchFunction(prm.regularizer,objective.getNumExamples());
      fn=new BatchFunctionOpts.AddFunctions(objective,br);
    }
    if (isMinimize == true) {
      prm.batchOptimizer.minimize(fn,model.getParams());
    }
 else {
      prm.batchOptimizer.maximize(fn,model.getParams());
    }
    log.info(""String_Node_Str"" + fn.getValue(model.getParams(),IntSort.getIndexArray(fn.getNumExamples())));
  }
  objective.shutdown();
  return model;
}","public FgModel train(FgModel model,FgExampleList data){
  ExampleObjective exObj;
  boolean isMinimize;
  if (prm.trainer == Trainer.ERMA) {
    exObj=new ErmaObjective(data,prm.infFactory,prm.dlFactory);
    isMinimize=true;
  }
 else {
    exObj=new CrfObjective(data,prm.infFactory,prm.useMseForValue);
    isMinimize=false;
  }
  AvgBatchObjective objective=new AvgBatchObjective(exObj,model,prm.numThreads);
  Regularizer reg=prm.regularizer;
  if (prm.optimizer != null) {
    DifferentiableFunction fn=objective;
    if (reg != null) {
      reg.setNumDimensions(model.getNumParams());
      DifferentiableFunction nbr=isMinimize ? DifferentiableFunctionOpts.negate(reg) : reg;
      fn=new DifferentiableFunctionOpts.AddFunctions(objective,nbr);
    }
    if (isMinimize == true) {
      prm.optimizer.minimize(fn,model.getParams());
    }
 else {
      prm.optimizer.maximize(fn,model.getParams());
    }
    log.info(""String_Node_Str"" + fn.getValue(model.getParams()));
  }
 else {
    DifferentiableBatchFunction fn=objective;
    if (reg != null) {
      reg.setNumDimensions(model.getNumParams());
      DifferentiableBatchFunction br=new FunctionAsBatchFunction(reg,objective.getNumExamples());
      DifferentiableBatchFunction nbr=isMinimize ? new BatchFunctionOpts.NegateFunction(br) : br;
      fn=new BatchFunctionOpts.AddFunctions(objective,nbr);
    }
    if (isMinimize == true) {
      prm.batchOptimizer.minimize(fn,model.getParams());
    }
 else {
      prm.batchOptimizer.maximize(fn,model.getParams());
    }
    log.info(""String_Node_Str"" + fn.getValue(model.getParams(),IntSort.getIndexArray(fn.getNumExamples())));
  }
  objective.shutdown();
  return model;
}",0.8952912019826518
131348,"/** 
 * Computes the sum of the entries of the pointwise product of two tensors with identical domains. 
 */
public double getDotProduct(Tensor other){
  checkEqualSize(this,other);
  double dot=s.negInf();
  for (int c=0; c < this.values.length; c++) {
    dot=s.plus(dot,s.times(this.values[c],other.values[c]));
  }
  return dot;
}","/** 
 * Computes the sum of the entries of the pointwise product of two tensors with identical domains. 
 */
public double getDotProduct(Tensor other){
  checkEqualSize(this,other);
  double dot=s.zero();
  for (int c=0; c < this.values.length; c++) {
    dot=s.plus(dot,s.times(this.values[c],other.values[c]));
  }
  return dot;
}",0.984984984984985
131349,"private void initVarToFactorAdj(int i,VarTensor[] facBeliefsAdj,int varId,int facId,FgEdge edge){
  Factor fac=fg.getFactor(facId);
  VarTensor prod=BruteForceInferencer.safeNewVarTensor(s,fac);
  prod.prod(facBeliefsAdj[facId]);
  getProductOfMessages(fg.getFactorNode(facId),prod,fg.getVarNode(varId));
  msgsAdj[i].message=prod.getMarginal(new VarSet(edge.getVar()),false);
}","private void initVarToFactorAdj(int i,VarTensor[] facBeliefsAdj,int varId,int facId,FgEdge edge){
  Factor fac=fg.getFactor(facId);
  VarTensor prod=BruteForceInferencer.safeNewVarTensor(s,fac);
  prod.prod(facBeliefsAdj[facId]);
  getProductOfMessages(fg.getFactorNode(facId),prod,fg.getVarNode(varId));
  msgsAdj[i].message=prod.getMarginal(new VarSet(edge.getVar()),false);
  logTraceMsgUpdate(""String_Node_Str"",msgsAdj[i].message,edge);
}",0.9219512195121952
131350,"private void backwardVarToFactor(FgEdge edgeIA,int i){
  for (  FgEdge edgeBI : fg.getVarNode(edgeIA.getVar().getId()).getInEdges()) {
    if (edgeBI != edgeIA.getOpposing()) {
      VarTensor prod=new VarTensor(msgsAdj[i].newMessage);
      getProductOfMessages(edgeIA.getParent(),prod,edgeIA.getChild(),edgeBI.getParent());
      msgsAdj[edgeBI.getId()].message.add(prod);
    }
  }
}","private void backwardVarToFactor(FgEdge edgeIA,int i){
  for (  FgEdge edgeBI : fg.getVarNode(edgeIA.getVar().getId()).getInEdges()) {
    if (edgeBI != edgeIA.getOpposing()) {
      VarTensor prod=new VarTensor(msgsAdj[i].newMessage);
      getProductOfMessages(edgeIA.getParent(),prod,edgeIA.getChild(),edgeBI.getParent());
      msgsAdj[edgeBI.getId()].message.add(prod);
      logTraceMsgUpdate(""String_Node_Str"",msgsAdj[edgeBI.getId()].message,edgeBI);
    }
  }
}",0.9029239766081872
131351,"private void backwardFactorToVar(FgEdge edgeAI,int i){
  Factor factor=edgeAI.getFactor();
  int facId=factor.getId();
{
    VarTensor prod=new VarTensor(msgsAdj[i].newMessage);
    getProductOfMessages(edgeAI.getParent(),prod,edgeAI.getChild());
    potentialsAdj[facId].add(prod);
  }
  for (  FgEdge edgeJA : fg.getFactorNode(facId).getInEdges()) {
    if (edgeJA != edgeAI.getOpposing()) {
      VarTensor prod=BruteForceInferencer.safeNewVarTensor(s,factor);
      getProductOfMessages(edgeAI.getParent(),prod,edgeAI.getChild(),edgeJA.getParent());
      prod.prod(msgsAdj[i].newMessage);
      VarSet varJ=msgsAdj[edgeJA.getId()].message.getVars();
      msgsAdj[edgeJA.getId()].message.add(prod.getMarginal(varJ,false));
    }
  }
}","private void backwardFactorToVar(FgEdge edgeAI,int i){
  Factor factor=edgeAI.getFactor();
  int facId=factor.getId();
{
    VarTensor prod=new VarTensor(msgsAdj[i].newMessage);
    getProductOfMessages(edgeAI.getParent(),prod,edgeAI.getChild());
    potentialsAdj[facId].add(prod);
    logTraceMsgUpdate(""String_Node_Str"",potentialsAdj[facId],null);
  }
  for (  FgEdge edgeJA : fg.getFactorNode(facId).getInEdges()) {
    if (edgeJA != edgeAI.getOpposing()) {
      VarTensor prod=BruteForceInferencer.safeNewVarTensor(s,factor);
      getProductOfMessages(edgeAI.getParent(),prod,edgeAI.getChild(),edgeJA.getParent());
      prod.prod(msgsAdj[i].newMessage);
      VarSet varJ=msgsAdj[edgeJA.getId()].message.getVars();
      msgsAdj[edgeJA.getId()].message.add(prod.getMarginal(varJ,false));
      logTraceMsgUpdate(""String_Node_Str"",msgsAdj[edgeJA.getId()].message,edgeJA);
    }
  }
}",0.907305095150399
131352,"private void initFactorToVarAdj(int i,VarTensor[] varBeliefsAdj,int varId,int facId){
  msgsAdj[i].message=new VarTensor(varBeliefsAdj[varId]);
  getProductOfMessages(fg.getVarNode(varId),msgsAdj[i].message,fg.getFactorNode(facId));
}","private void initFactorToVarAdj(int i,VarTensor[] varBeliefsAdj,int varId,int facId){
  msgsAdj[i].message=new VarTensor(varBeliefsAdj[varId]);
  getProductOfMessages(fg.getVarNode(varId),msgsAdj[i].message,fg.getFactorNode(facId));
  logTraceMsgUpdate(""String_Node_Str"",msgsAdj[i].message,fg.getEdge(i));
}",0.8650646950092421
131353,"private void unnormalizeAdjInPlace(VarTensor dist,VarTensor distAdj,double unormSum){
  VarTensor unormAdj=distAdj;
  double dotProd=dist.getDotProduct(distAdj);
  unormAdj.subtract(dotProd);
  unormAdj.divide(unormSum);
}","private void unnormalizeAdjInPlace(VarTensor dist,VarTensor distAdj,double unormSum){
  VarTensor unormAdj=distAdj;
  double dotProd=dist.getDotProduct(distAdj);
  unormAdj.subtract(dotProd);
  unormAdj.divide(unormSum);
  logTraceMsgUpdate(""String_Node_Str"",distAdj,null);
}",0.8933601609657947
131354,"@Test public void testErmaGradientOneVarAssertions(){
  FactorGraph fg=new FactorGraph();
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0));
  fg.addFactor(emit0);
  emit0.setValue(0,FastMath.log(1.1));
  emit0.setValue(1,FastMath.log(1.9));
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(t0,1);
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.maxIterations=10;
  prm.logDomain=logDomain;
  ErmaBp bp=new ErmaBp(fg,prm);
  bp.forward();
  bp.getOutputAdj().varBeliefs[0].setValue(0,1.0);
  bp.getOutputAdj().varBeliefs[0].setValue(1,0.0);
  bp.backward();
{
    assertEquals(2,bp.getMessagesAdj().length);
    Messages adj0=bp.getMessagesAdj()[0];
    assertEquals(0,adj0.message.getValue(0),1e-3);
    assertEquals(0,adj0.message.getValue(1),1e-3);
    assertEquals(1.181,adj0.newMessage.getValue(0),1e-3);
    assertEquals(-0.175,adj0.newMessage.getValue(1),1e-3);
    Messages adj1=bp.getMessagesAdj()[1];
    assertEquals(0,adj1.message.getValue(0),1e-3);
    assertEquals(0,adj1.message.getValue(1),1e-3);
    assertEquals(0,adj1.newMessage.getValue(0),1e-3);
    assertEquals(0,adj1.newMessage.getValue(1),1e-3);
  }
{
    assertEquals(1,bp.getPotentialsAdj().length);
    VarTensor adj=bp.getPotentialsAdj()[0];
    assertEquals(1.181,adj.getValue(0),1e-3);
    assertEquals(-0.175,adj.getValue(1),1e-3);
  }
}","@Test public void testErmaGradientOneVarAssertions(){
  FactorGraph fg=new FactorGraph();
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0));
  fg.addFactor(emit0);
  emit0.setValue(0,FastMath.log(1.1));
  emit0.setValue(1,FastMath.log(1.9));
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(t0,1);
  ErmaBpPrm prm=new ErmaBpPrm();
  prm.maxIterations=1;
  prm.logDomain=logDomain;
  ErmaBp bp=new ErmaBp(fg,prm);
  bp.forward();
  bp.getOutputAdj().varBeliefs[0].setValue(0,1.0);
  bp.getOutputAdj().varBeliefs[0].setValue(1,0.0);
  bp.backward();
{
    assertEquals(2,bp.getMessagesAdj().length);
    Messages adj0=bp.getMessagesAdj()[0];
    assertEquals(0,adj0.message.getValue(0),1e-3);
    assertEquals(0,adj0.message.getValue(1),1e-3);
    assertEquals(1.181,adj0.newMessage.getValue(0),1e-3);
    assertEquals(-0.175,adj0.newMessage.getValue(1),1e-3);
    Messages adj1=bp.getMessagesAdj()[1];
    assertEquals(0,adj1.message.getValue(0),1e-3);
    assertEquals(0,adj1.message.getValue(1),1e-3);
    assertEquals(0,adj1.newMessage.getValue(0),1e-3);
    assertEquals(0,adj1.newMessage.getValue(1),1e-3);
  }
{
    assertEquals(1,bp.getPotentialsAdj().length);
    VarTensor adj=bp.getPotentialsAdj()[0];
    assertEquals(1.181,adj.getValue(0),1e-3);
    assertEquals(-0.175,adj.getValue(1),1e-3);
  }
}",0.9996396396396396
131355,"/** 
 * @inheritDoc 
 */
@Override public void run(){
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < msgs.length; i++) {
    msgs[i]=new Messages(s,fg.getEdge(i),s.one());
  }
  for (  Factor factor : fg.getFactors()) {
    if (factor instanceof GlobalFactor) {
      ((GlobalFactor)factor).reset();
    }
  }
  if (prm.cacheFactorBeliefs) {
    for (    FgNode node : fg.getNodes()) {
      if (node.isFactor() && !(node.getFactor() instanceof GlobalFactor)) {
        Factor f=node.getFactor();
        VarTensor fBel=new VarTensor(s,f.getVars());
        int c=f.getVars().calcNumConfigs();
        for (int i=0; i < c; i++)         fBel.setValue(i,s.fromLogProb(f.getLogUnormalizedScore(i)));
        for (        FgEdge v2f : node.getInEdges()) {
          VarTensor vBel=msgs[v2f.getId()].message;
          fBel.prod(vBel);
        }
        factorBeliefCache[f.getId()]=fBel;
      }
    }
  }
  List<FgEdge> order=null;
  for (int iter=0; iter < prm.maxIterations; iter++) {
    if (timer.totSec() > prm.timeoutSeconds) {
      break;
    }
    order=updateOrder(order,iter);
    if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
      for (      FgEdge edge : order) {
        createMessage(edge,iter);
        sendMessage(edge);
        if (isConverged()) {
          break;
        }
      }
    }
 else     if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
      for (      FgEdge edge : order) {
        createMessage(edge,iter);
      }
      for (      FgEdge edge : order) {
        sendMessage(edge);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
    }
    if (isConverged()) {
      log.trace(""String_Node_Str"" + (iter + 1));
      break;
    }
  }
  for (  Messages msg : msgs) {
    msg.newMessage=null;
  }
  timer.stop();
}","/** 
 * @inheritDoc 
 */
@Override public void run(){
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < msgs.length; i++) {
    msgs[i]=new Messages(s,fg.getEdge(i),s.one());
  }
  for (  Factor factor : fg.getFactors()) {
    if (factor instanceof GlobalFactor) {
      ((GlobalFactor)factor).reset();
    }
  }
  if (prm.cacheFactorBeliefs) {
    for (    FgNode node : fg.getNodes()) {
      if (node.isFactor() && !(node.getFactor() instanceof GlobalFactor)) {
        Factor f=node.getFactor();
        VarTensor fBel=new VarTensor(s,f.getVars());
        int c=f.getVars().calcNumConfigs();
        for (int i=0; i < c; i++)         fBel.setValue(i,s.fromLogProb(f.getLogUnormalizedScore(i)));
        for (        FgEdge v2f : node.getInEdges()) {
          VarTensor vBel=msgs[v2f.getId()].message;
          fBel.prod(vBel);
        }
        factorBeliefCache[f.getId()]=fBel;
      }
    }
  }
  List<FgEdge> order=null;
  for (int iter=-1; iter < prm.maxIterations; iter++) {
    if (timer.totSec() > prm.timeoutSeconds) {
      break;
    }
    order=updateOrder(order,iter);
    if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
      for (      FgEdge edge : order) {
        createMessage(edge,iter);
        sendMessage(edge);
        if (isConverged()) {
          break;
        }
      }
    }
 else     if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
      for (      FgEdge edge : order) {
        createMessage(edge,iter);
      }
      for (      FgEdge edge : order) {
        sendMessage(edge);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
    }
    if (isConverged()) {
      log.trace(""String_Node_Str"" + (iter + 1));
      break;
    }
  }
  for (  Messages msg : msgs) {
    msg.newMessage=null;
  }
  timer.stop();
}",0.9991714995857498
131356,"private void checkLogOddsRatios(EdgeScores es,Algebra s){
  double minOddsRatio=s.posInf();
  double maxOddsRatio=s.negInf();
  for (int p=-1; p < n; p++) {
    for (int c=0; c < n; c++) {
      double oddsRatio=es.getScore(p,c);
      if (s.lt(oddsRatio,minOddsRatio) && oddsRatio != s.zero()) {
        minOddsRatio=oddsRatio;
      }
      if (s.gt(oddsRatio,maxOddsRatio)) {
        maxOddsRatio=oddsRatio;
      }
    }
  }
  oddsRatioCount++;
  if (s.minus(s.plus(maxOddsRatio,minOddsRatio),maxOddsRatio) == s.zero()) {
    extremeOddsRatios++;
    log.debug(String.format(""String_Node_Str"",maxOddsRatio,minOddsRatio));
    log.debug(String.format(""String_Node_Str"",(double)extremeOddsRatios / oddsRatioCount,extremeOddsRatios,oddsRatioCount));
    log.debug(String.format(""String_Node_Str"",(double)unsafeLogSubtracts / logSubtractCount,unsafeLogSubtracts,logSubtractCount));
  }
}","private void checkLogOddsRatios(EdgeScores es,Algebra s){
  double minOddsRatio=s.posInf();
  double maxOddsRatio=s.minValue();
  for (int p=-1; p < n; p++) {
    for (int c=0; c < n; c++) {
      double oddsRatio=es.getScore(p,c);
      if (s.lt(oddsRatio,minOddsRatio) && oddsRatio != s.zero()) {
        minOddsRatio=oddsRatio;
      }
      if (s.gt(oddsRatio,maxOddsRatio)) {
        maxOddsRatio=oddsRatio;
      }
    }
  }
  oddsRatioCount++;
  if (s.minus(s.plus(maxOddsRatio,minOddsRatio),maxOddsRatio) == s.zero()) {
    extremeOddsRatios++;
    log.debug(String.format(""String_Node_Str"",maxOddsRatio,minOddsRatio));
    log.debug(String.format(""String_Node_Str"",(double)extremeOddsRatios / oddsRatioCount,extremeOddsRatios,oddsRatioCount));
    log.debug(String.format(""String_Node_Str"",(double)unsafeLogSubtracts / logSubtractCount,unsafeLogSubtracts,logSubtractCount));
  }
}",0.9921171171171173
131357,"public ErmaBp(final FactorGraph fg,ErmaBpPrm prm,ExpFamFactorsModule effm){
  this.fg=fg;
  this.s=prm.getAlgebra();
  this.prm=prm;
  this.effm=effm;
  if (!s.equals(effm.getAlgebra())) {
    throw new IllegalArgumentException(""String_Node_Str"" + s + ""String_Node_Str""+ effm.getAlgebra());
  }
  if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
    if (prm.schedule == BpScheduleType.TREE_LIKE) {
      sched=new BfsBpSchedule(fg);
    }
 else     if (prm.schedule == BpScheduleType.RANDOM) {
      sched=new RandomBpSchedule(fg);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + prm.schedule);
    }
  }
 else {
    sched=new BpSchedule(){
      @Override public List<FgEdge> getOrder(){
        return fg.getEdges();
      }
    }
;
  }
}","public ErmaBp(final FactorGraph fg,ErmaBpPrm prm,ExpFamFactorsModule effm){
  this.fg=fg;
  this.s=prm.getAlgebra();
  this.prm=prm;
  this.effm=effm;
  if (effm != null && !s.equals(effm.getAlgebra())) {
    throw new IllegalArgumentException(""String_Node_Str"" + s + ""String_Node_Str""+ effm.getAlgebra());
  }
  if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
    if (prm.schedule == BpScheduleType.TREE_LIKE) {
      sched=new BfsBpSchedule(fg);
    }
 else     if (prm.schedule == BpScheduleType.RANDOM) {
      sched=new RandomBpSchedule(fg);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + prm.schedule);
    }
  }
 else {
    sched=new BpSchedule(){
      @Override public List<FgEdge> getOrder(){
        return fg.getEdges();
      }
    }
;
  }
}",0.9895968790637192
131358,"/** 
 * Gets messages from the Messages[].
 * @param parent The node for this factor.
 * @param msgs The input messages.
 * @param tf Whether to get TRUE or FALSE messages.
 * @param isNew Whether to get messages from .newMessage or .message.
 * @param isIn Whether to get incoming or outgoing messages.
 * @param s The abstract algebra.
 * @return The output messages.
 */
private Tensor getMsgs(FgNode parent,Messages[] msgs,int tf,boolean isNew,boolean isIn,Algebra s){
  EdgeScores es=new EdgeScores(n,s.zero());
  DoubleArrays.fill(es.root,s.zero());
  DoubleArrays.fill(es.child,s.zero());
  List<FgEdge> edges=(isIn) ? parent.getInEdges() : parent.getOutEdges();
  for (  FgEdge edge : edges) {
    LinkVar link=(LinkVar)edge.getVar();
    VarTensor msg=(isNew) ? msgs[edge.getId()].newMessage : msgs[edge.getId()].message;
    double val=msg.getValue(tf);
    es.setScore(link.getParent(),link.getChild(),val);
  }
  return es.toTensor(s);
}","/** 
 * Gets messages from the Messages[].
 * @param parent The node for this factor.
 * @param msgs The input messages.
 * @param tf Whether to get TRUE or FALSE messages.
 * @param isNew Whether to get messages in .newMessage or .message.
 * @param isIn Whether to get incoming or outgoing messages.
 * @param s The abstract algebra.
 * @return The output messages.
 */
private Tensor getMsgs(FgNode parent,Messages[] msgs,int tf,boolean isNew,boolean isIn,Algebra s){
  EdgeScores es=new EdgeScores(n,s.zero());
  DoubleArrays.fill(es.root,s.zero());
  DoubleArrays.fill(es.child,s.zero());
  List<FgEdge> edges=(isIn) ? parent.getInEdges() : parent.getOutEdges();
  for (  FgEdge edge : edges) {
    LinkVar link=(LinkVar)edge.getVar();
    VarTensor msg=(isNew) ? msgs[edge.getId()].newMessage : msgs[edge.getId()].message;
    double val=msg.getValue(tf);
    es.setScore(link.getParent(),link.getChild(),val);
  }
  return es.toTensor(s);
}",0.9968354430379748
131359,"/** 
 * Sets messages on a Messages[].
 * @param parent The node for this factor.
 * @param msgs The output messages.
 * @param t The input messages.
 * @param tf Whether to set TRUE or FALSE messages.
 * @param isNew Whether to set messages from .newMessage or .message.
 * @param isIn Whether to set incoming or outgoing messages.
 * @param s The abstract algebra.
 */
private void setMsgs(FgNode parent,Messages[] msgs,Tensor t,int tf,boolean isNew,boolean isIn,Algebra s){
  EdgeScores es=EdgeScores.tensorToEdgeScores(t);
  List<FgEdge> edges=(isIn) ? parent.getInEdges() : parent.getOutEdges();
  for (  FgEdge edge : edges) {
    LinkVar link=(LinkVar)edge.getVar();
    VarTensor msg=(isNew) ? msgs[edge.getId()].newMessage : msgs[edge.getId()].message;
    double val=es.getScore(link.getParent(),link.getChild());
    msg.setValue(tf,val);
  }
}","/** 
 * Sets messages on a Messages[].
 * @param parent The node for this factor.
 * @param msgs The output messages.
 * @param t The input messages.
 * @param tf Whether to set TRUE or FALSE messages.
 * @param isNew Whether to set messages in .newMessage or .message.
 * @param isIn Whether to set incoming or outgoing messages.
 * @param s The abstract algebra.
 */
private void setMsgs(FgNode parent,Messages[] msgs,Tensor t,int tf,boolean isNew,boolean isIn,Algebra s){
  EdgeScores es=EdgeScores.tensorToEdgeScores(t);
  List<FgEdge> edges=(isIn) ? parent.getInEdges() : parent.getOutEdges();
  for (  FgEdge edge : edges) {
    LinkVar link=(LinkVar)edge.getVar();
    VarTensor msg=(isNew) ? msgs[edge.getId()].newMessage : msgs[edge.getId()].message;
    double val=es.getScore(link.getParent(),link.getChild());
    msg.setValue(tf,val);
  }
}",0.9964871194379392
131360,"public void forwardAndBackward(FgNode parent,Messages[] msgs,Messages[] msgsAdj,Algebra s,boolean isForward){
  Tensor tmTrueIn=getMsgs(parent,msgs,LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  Tensor tmFalseIn=getMsgs(parent,msgs,LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  TensorIdentity mTrueIn=new TensorIdentity(tmTrueIn);
  TensorIdentity mFalseIn=new TensorIdentity(tmFalseIn);
  Algebra tmpS=(isForward) ? new LogSemiring() : new LogPosNegAlgebra();
  ProjDepTreeModule dep=new ProjDepTreeModule(mTrueIn,mFalseIn,tmpS);
  dep.forward();
  if (isForward) {
    Pair<Tensor,Tensor> pair=dep.getOutput();
    Tensor tmTrueOut=pair.get1();
    Tensor tmFalseOut=pair.get2();
    setMsgs(parent,msgs,tmTrueOut,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    setMsgs(parent,msgs,tmFalseOut,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
  }
 else {
    Tensor tTrue=getMsgs(parent,msgsAdj,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    Tensor tFalse=getMsgs(parent,msgsAdj,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
    Pair<Tensor,Tensor> pairAdj=dep.getOutputAdj();
    Tensor tmTrueOutAdj=pairAdj.get1();
    Tensor tmFalseOutAdj=pairAdj.get2();
    tmTrueOutAdj.elemAdd(tTrue);
    tmFalseOutAdj.elemAdd(tFalse);
    dep.backward();
    setMsgs(parent,msgsAdj,mTrueIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
    setMsgs(parent,msgsAdj,mFalseIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  }
}","public void forwardAndBackward(FgNode parent,Messages[] msgs,Messages[] msgsAdj,Algebra s,boolean isForward){
  Tensor tmTrueIn=getMsgs(parent,msgs,LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  Tensor tmFalseIn=getMsgs(parent,msgs,LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  TensorIdentity mTrueIn=new TensorIdentity(tmTrueIn);
  TensorIdentity mFalseIn=new TensorIdentity(tmFalseIn);
  Algebra tmpS=(isForward) ? new LogSemiring() : new LogPosNegAlgebra();
  ProjDepTreeModule dep=new ProjDepTreeModule(mTrueIn,mFalseIn,tmpS);
  dep.forward();
  if (isForward) {
    Pair<Tensor,Tensor> pair=dep.getOutput();
    Tensor tmTrueOut=pair.get1();
    Tensor tmFalseOut=pair.get2();
    setMsgs(parent,msgs,tmTrueOut,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    setMsgs(parent,msgs,tmFalseOut,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
  }
 else {
    Tensor tTrue=getMsgs(parent,msgsAdj,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    Tensor tFalse=getMsgs(parent,msgsAdj,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
    Pair<Tensor,Tensor> pairAdj=dep.getOutputAdj();
    Tensor tmTrueOutAdj=pairAdj.get1();
    Tensor tmFalseOutAdj=pairAdj.get2();
    tmTrueOutAdj.elemAdd(tTrue);
    tmFalseOutAdj.elemAdd(tFalse);
    dep.backward();
    addMsgs(parent,msgsAdj,mTrueIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
    addMsgs(parent,msgsAdj,mFalseIn.getOutputAdj(),LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  }
}",0.9929394277220364
131361,"@Test public void testErmaGradient2WordGlobalFactor(){
  double[] root=new double[]{1.0,1.0};
  double[][] child=new double[][]{{0.0,1.0},{0.0,1.0}};
  FgAndLinks fgl=ProjDepTreeFactorTest.getFgl(root,child,logDomain);
  FactorGraph fg=fgl.fg;
  LinkVar[] rootVars=fgl.rootVars;
  LinkVar[][] childVars=fgl.childVars;
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(rootVars[0],0);
  goldConfig.put(rootVars[1],1);
  goldConfig.put(childVars[0][1],0);
  goldConfig.put(childVars[1][0],1);
  ErmaErFn fn=new ErmaErFn(fg,goldConfig);
  testGradientByFiniteDifferences(fn);
}","@Test public void testErmaGradient2WordGlobalFactor(){
  double[] root=new double[]{1.0,1.0};
  double[][] child=new double[][]{{0.0,1.0},{1.0,0.0}};
  FgAndLinks fgl=ProjDepTreeFactorTest.getFgl(root,child,logDomain);
  FactorGraph fg=fgl.fg;
  LinkVar[] rootVars=fgl.rootVars;
  LinkVar[][] childVars=fgl.childVars;
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(rootVars[0],0);
  goldConfig.put(rootVars[1],1);
  goldConfig.put(childVars[0][1],0);
  goldConfig.put(childVars[1][0],1);
  ErmaErFn fn=new ErmaErFn(fg,goldConfig);
  testGradientByFiniteDifferences(fn);
}",0.991394148020654
131362,"@Override public void backward(){
  final int n=graph.getNumTokens();
  scores.alphaAdj=new double[graph.getNodes().size()];
  scores.betaAdj=new double[graph.getNodes().size()];
  for (  Hypernode node : graph.getNodes()) {
    if (node instanceof PCBasicHypernode) {
      PCBasicHypernode pc=(PCBasicHypernode)node;
      int p=pc.getP();
      int c=pc.getC();
      int pp=EdgeScores.getTensorParent(p,c);
      int id=node.getId();
      scores.alphaAdj[id]=yAdj.get(ALPHA_IDX,pp,c);
      scores.betaAdj[id]=yAdj.get(BETA_IDX,pp,c);
    }
  }
  scores.betaAdj[graph.getRoot().getId()]=yAdj.get(ROOT_IDX,0,0);
  Hyperpotential w=graph.getPotentials();
  Hyperalgo.outsideAdjoint(graph,w,s,scores);
  Hyperalgo.insideAdjoint(graph,w,s,scores);
  Hyperalgo.weightAdjoint(graph,w,s,scores);
  final Tensor wAdj=weightsIn.getOutputAdj();
  HyperedgeDoubleFn lambda=new HyperedgeDoubleFn(){
    public void apply(    Hyperedge e,    double adj_w_e){
      Hypernode head=e.getHeadNode();
      if (head instanceof PCBasicHypernode) {
        PCBasicHypernode pc=(PCBasicHypernode)head;
        int p=pc.getP();
        int c=pc.getC();
        int pp=EdgeScores.getTensorParent(p,c);
        wAdj.add(adj_w_e,pp,c);
      }
    }
  }
;
  Hyperalgo.weightAdjoint(graph,w,s,scores,lambda);
}","@Override public void backward(){
  scores.alphaAdj=new double[graph.getNodes().size()];
  scores.betaAdj=new double[graph.getNodes().size()];
  DoubleArrays.fill(scores.alphaAdj,s.zero());
  DoubleArrays.fill(scores.betaAdj,s.zero());
  for (  Hypernode node : graph.getNodes()) {
    if (node instanceof PCBasicHypernode) {
      PCBasicHypernode pc=(PCBasicHypernode)node;
      int p=pc.getP();
      int c=pc.getC();
      int pp=EdgeScores.getTensorParent(p,c);
      int id=node.getId();
      scores.alphaAdj[id]=yAdj.get(ALPHA_IDX,pp,c);
      scores.betaAdj[id]=yAdj.get(BETA_IDX,pp,c);
    }
  }
  scores.betaAdj[graph.getRoot().getId()]=yAdj.get(ROOT_IDX,0,0);
  Hyperpotential w=graph.getPotentials();
  Hyperalgo.outsideAdjoint(graph,w,s,scores);
  Hyperalgo.insideAdjoint(graph,w,s,scores);
  final Tensor wAdj=weightsIn.getOutputAdj();
  HyperedgeDoubleFn lambda=new HyperedgeDoubleFn(){
    public void apply(    Hyperedge e,    double adj_w_e){
      Hypernode head=e.getHeadNode();
      if (head instanceof PCBasicHypernode) {
        PCBasicHypernode pc=(PCBasicHypernode)head;
        int p=pc.getP();
        int c=pc.getC();
        int pp=EdgeScores.getTensorParent(p,c);
        wAdj.add(adj_w_e,pp,c);
      }
    }
  }
;
  Hyperalgo.weightAdjoint(graph,w,s,scores,lambda);
}",0.8557098765432098
131363,"public static void assertFdAndAdEqual(ModuleVecFn vecFn,double epsilon,double delta){
  int numParams=vecFn.getNumDimensions();
  IntDoubleDenseVector x=getMultiZeroOneGaussian(numParams);
  int outDim=vecFn.forward(x).size();
  for (int i=0; i < outDim; i++) {
    for (int j=0; j < numParams; j++) {
      ModuleFn fn=new ModuleFn(vecFn,i);
      IntDoubleVector d=new IntDoubleDenseVector(numParams);
      d.set(j,1);
      double dotFd=StochasticGradientApproximation.getGradDotDirApprox(fn,x,d,epsilon);
      IntDoubleVector grad=fn.getGradient(x);
      double dotAd=grad.dot(d);
      double relError=Math.abs(dotFd - dotAd) / Math.max(Math.abs(dotFd),Math.abs(dotAd));
      System.out.println(""String_Node_Str"" + dotFd + ""String_Node_Str""+ dotAd+ ""String_Node_Str""+ relError);
      assertEquals(dotFd,dotAd,delta);
    }
  }
}","public static void assertFdAndAdEqual(ModuleVecFn vecFn,IntDoubleDenseVector x,double epsilon,double delta){
  int numParams=vecFn.getNumDimensions();
  int outDim=vecFn.forward(x).size();
  for (int i=0; i < outDim; i++) {
    for (int j=0; j < numParams; j++) {
      ModuleFn fn=new ModuleFn(vecFn,i);
      IntDoubleVector d=new IntDoubleDenseVector(numParams);
      d.set(j,1);
      double dotFd=StochasticGradientApproximation.getGradDotDirApprox(fn,x,d,epsilon);
      IntDoubleVector grad=fn.getGradient(x);
      double dotAd=grad.dot(d);
      double relError=Math.abs(dotFd - dotAd) / Math.max(Math.abs(dotFd),Math.abs(dotAd));
      System.out.printf(""String_Node_Str"",i,j,dotFd,dotAd,relError);
      assertEquals(dotFd,dotAd,delta);
    }
  }
}",0.899874843554443
131364,"@Override public double getValue(IntDoubleVector point){
  return vecFn.forward(point).getValue(outIdx);
}","@Override public double getValue(IntDoubleVector point){
  Tensor out=vecFn.forward(point);
  return out.getValue(outIdx);
}",0.8782608695652174
131365,"@Test public void testErmaGradientOneVar(){
  FactorGraph fg=new FactorGraph();
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0));
  fg.addFactor(emit0);
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(t0,1);
  ErmaErFn fn=new ErmaErFn(fg,goldConfig);
  Prng.seed(12345);
  fn.getGradient(getTheta(fn.getNumDimensions()));
  IntDoubleVector gradAd=testGradientByFiniteDifferences(fn);
}","@Test public void testErmaGradientOneVar(){
  FactorGraph fg=new FactorGraph();
  Var t0=new Var(VarType.PREDICTED,2,""String_Node_Str"",null);
  ExplicitFactor emit0=new ExplicitFactor(new VarSet(t0));
  fg.addFactor(emit0);
  VarConfig goldConfig=new VarConfig();
  goldConfig.put(t0,1);
  ErmaErFn fn=new ErmaErFn(fg,goldConfig);
  Prng.seed(12345);
  fn.getGradient(ModuleTestUtils.getAbsZeroOneGaussian(fn.getNumDimensions()));
  IntDoubleVector gradAd=testGradientByFiniteDifferences(fn);
}",0.9551616266944736
131366,"private static IntDoubleVector testGradientByFiniteDifferences(ErmaErFn fn){
  Prng.seed(12345);
  int numParams=fn.getNumDimensions();
  IntDoubleVector theta0=getTheta(numParams);
  System.out.println(""String_Node_Str"" + theta0);
  Prng.seed(System.currentTimeMillis());
  IntDoubleVector gradFd0=StochasticGradientApproximation.estimateGradientSpsa(fn,theta0,1000);
  IntDoubleVector gradFd1=StochasticGradientApproximation.estimateGradientSpsa(fn,theta0,1000);
  IntDoubleVector gradAd=fn.getGradient(theta0);
  System.out.println(""String_Node_Str"" + gradFd0);
  System.out.println(""String_Node_Str"" + gradFd1);
  System.out.println(""String_Node_Str"" + gradAd);
  double infNormFd=infNorm(gradFd0,gradFd1);
  double infNorm=infNorm(gradFd0,gradAd);
  System.out.println(""String_Node_Str"" + infNormFd);
  System.out.println(""String_Node_Str"" + infNorm);
  assertTrue(infNorm < 1e-1);
  return gradAd;
}","private static IntDoubleVector testGradientByFiniteDifferences(ErmaErFn fn){
  Prng.seed(12345);
  int numParams=fn.getNumDimensions();
  IntDoubleVector theta0=ModuleTestUtils.getAbsZeroOneGaussian(numParams);
  System.out.println(""String_Node_Str"" + theta0);
  Prng.seed(System.currentTimeMillis());
  IntDoubleVector gradFd0=StochasticGradientApproximation.estimateGradientSpsa(fn,theta0,1000);
  IntDoubleVector gradFd1=StochasticGradientApproximation.estimateGradientSpsa(fn,theta0,1000);
  IntDoubleVector gradAd=fn.getGradient(theta0);
  System.out.println(""String_Node_Str"" + gradFd0);
  System.out.println(""String_Node_Str"" + gradFd1);
  System.out.println(""String_Node_Str"" + gradAd);
  double infNormFd=infNorm(gradFd0,gradFd1);
  double infNorm=infNorm(gradFd0,gradAd);
  System.out.println(""String_Node_Str"" + infNormFd);
  System.out.println(""String_Node_Str"" + infNorm);
  assertTrue(infNorm < 1e-1);
  return gradAd;
}",0.9766177270255574
131367,"@Override public Tensor forward(){
  EdgeScores es=EdgeScores.tensorToEdgeScores(weightsIn.getOutput());
  scores=new Scores();
  graph=new FirstOrderDepParseHypergraph(es.root,es.child,s);
  Hyperpotential w=graph.getPotentials();
  Hyperalgo.insideAlgorithm(graph,w,s,scores);
  Hyperalgo.outsideAlgorithm(graph,w,s,scores);
  int n=graph.getNumTokens();
  y=new Tensor(3,n,n);
  y.fill(s.zero());
  for (  Hypernode node : graph.getNodes()) {
    if (node instanceof PCBasicHypernode) {
      PCBasicHypernode pc=(PCBasicHypernode)node;
      int p=pc.getP();
      int c=pc.getC();
      int pp=EdgeScores.getTensorParent(n,p,c);
      int id=node.getId();
      y.set(scores.beta[id],BETA_IDX,pp,c);
      y.set(scores.alpha[id],ALPHA_IDX,pp,c);
    }
  }
  y.set(scores.beta[graph.getRoot().getId()],ROOT_IDX,0,0);
  return y;
}","@Override public Tensor forward(){
  scores=new Scores();
  EdgeScores es=EdgeScores.tensorToEdgeScores(weightsIn.getOutput());
  graph=new FirstOrderDepParseHypergraph(es.root,es.child,s);
  Hyperpotential w=graph.getPotentials();
  Hyperalgo.insideAlgorithm(graph,w,s,scores);
  Hyperalgo.outsideAlgorithm(graph,w,s,scores);
  int n=graph.getNumTokens();
  y=new Tensor(3,n,n);
  y.fill(s.zero());
  for (  Hypernode node : graph.getNodes()) {
    if (node instanceof PCBasicHypernode) {
      PCBasicHypernode pc=(PCBasicHypernode)node;
      int p=pc.getP();
      int c=pc.getC();
      int pp=EdgeScores.getTensorParent(n,p,c);
      int id=node.getId();
      y.set(scores.beta[id],BETA_IDX,pp,c);
      y.set(scores.alpha[id],ALPHA_IDX,pp,c);
    }
  }
  y.set(scores.beta[graph.getRoot().getId()],ROOT_IDX,0,0);
  return y;
}",0.97242206235012
131368,"@Override public void backward(){
  final int n=graph.getNumTokens();
  for (  Hypernode node : graph.getNodes()) {
    if (node instanceof PCBasicHypernode) {
      PCBasicHypernode pc=(PCBasicHypernode)node;
      int p=pc.getP();
      int c=pc.getC();
      int pp=EdgeScores.getTensorParent(n,p,c);
      int id=node.getId();
      scores.alphaAdj[id]=yAdj.get(ALPHA_IDX,pp,c);
      scores.betaAdj[id]=yAdj.get(BETA_IDX,pp,c);
    }
  }
  scores.betaAdj[graph.getRoot().getId()]=yAdj.get(ROOT_IDX,0,0);
  Hyperpotential w=graph.getPotentials();
  Hyperalgo.outsideAdjoint(graph,w,s,scores);
  Hyperalgo.insideAdjoint(graph,w,s,scores);
  Hyperalgo.weightAdjoint(graph,w,s,scores);
  final Tensor wAdj=weightsIn.getOutputAdj();
  HyperedgeDoubleFn lambda=new HyperedgeDoubleFn(){
    public void apply(    Hyperedge e,    double adj_w_e){
      Hypernode head=e.getHeadNode();
      if (head instanceof PCBasicHypernode) {
        PCBasicHypernode pc=(PCBasicHypernode)head;
        int p=pc.getP();
        int c=pc.getC();
        int pp=EdgeScores.getTensorParent(n,p,c);
        wAdj.add(adj_w_e,pp,c);
      }
    }
  }
;
  Hyperalgo.weightAdjoint(graph,w,s,scores,lambda);
}","@Override public void backward(){
  final int n=graph.getNumTokens();
  scores.alphaAdj=new double[graph.getNodes().size()];
  scores.betaAdj=new double[graph.getNodes().size()];
  for (  Hypernode node : graph.getNodes()) {
    if (node instanceof PCBasicHypernode) {
      PCBasicHypernode pc=(PCBasicHypernode)node;
      int p=pc.getP();
      int c=pc.getC();
      int pp=EdgeScores.getTensorParent(n,p,c);
      int id=node.getId();
      scores.alphaAdj[id]=yAdj.get(ALPHA_IDX,pp,c);
      scores.betaAdj[id]=yAdj.get(BETA_IDX,pp,c);
    }
  }
  scores.betaAdj[graph.getRoot().getId()]=yAdj.get(ROOT_IDX,0,0);
  Hyperpotential w=graph.getPotentials();
  Hyperalgo.outsideAdjoint(graph,w,s,scores);
  Hyperalgo.insideAdjoint(graph,w,s,scores);
  Hyperalgo.weightAdjoint(graph,w,s,scores);
  final Tensor wAdj=weightsIn.getOutputAdj();
  HyperedgeDoubleFn lambda=new HyperedgeDoubleFn(){
    public void apply(    Hyperedge e,    double adj_w_e){
      Hypernode head=e.getHeadNode();
      if (head instanceof PCBasicHypernode) {
        PCBasicHypernode pc=(PCBasicHypernode)head;
        int p=pc.getP();
        int c=pc.getC();
        int pp=EdgeScores.getTensorParent(n,p,c);
        wAdj.add(adj_w_e,pp,c);
      }
    }
  }
;
  Hyperalgo.weightAdjoint(graph,w,s,scores,lambda);
}",0.9560306575231948
131369,"public static void assertFdAndAdEqual(VecFn vecFn,IntDoubleDenseVector x,double epsilon,double delta){
  int numParams=vecFn.getNumDimensions();
  int outDim=vecFn.forward(x).size();
  for (int i=0; i < outDim; i++) {
    for (int j=0; j < numParams; j++) {
      ModuleFn fn=new ModuleFn(vecFn,i);
      IntDoubleVector d=new IntDoubleDenseVector(numParams);
      d.set(j,1);
      double dotFd=StochasticGradientApproximation.getGradDotDirApprox(fn,x,d,epsilon);
      IntDoubleVector grad=fn.getGradient(x);
      double dotAd=grad.dot(d);
      double relError=Math.abs(dotFd - dotAd) / Math.max(Math.abs(dotFd),Math.abs(dotAd));
      System.out.printf(""String_Node_Str"",i,j,dotFd,dotAd,relError);
      assertEquals(dotFd,dotAd,delta);
    }
  }
}","public static void assertFdAndAdEqual(DifferentiableFunction fn,IntDoubleVector x,double epsilon,double delta){
  int numParams=fn.getNumDimensions();
  for (int j=0; j < numParams; j++) {
    IntDoubleVector d=new IntDoubleDenseVector(numParams);
    d.set(j,1);
    double dotFd=StochasticGradientApproximation.getGradDotDirApprox(fn,x,d,epsilon);
    IntDoubleVector grad=fn.getGradient(x);
    double dotAd=grad.dot(d);
    double relError=Math.abs(dotFd - dotAd) / Math.max(Math.abs(dotFd),Math.abs(dotAd));
    System.out.printf(""String_Node_Str"",j,dotFd,dotAd,relError);
    assertEquals(dotFd,dotAd,delta);
  }
}",0.8180494905385735
131370,"private static IntDoubleVector testGradientByFiniteDifferences(ErmaErFn fn){
  Prng.seed(12345);
  int numParams=fn.getNumDimensions();
  IntDoubleVector theta0=ModuleTestUtils.getAbsZeroOneGaussian(numParams);
  System.out.println(""String_Node_Str"" + theta0);
  Prng.seed(System.currentTimeMillis());
  IntDoubleVector gradFd0=StochasticGradientApproximation.estimateGradientSpsa(fn,theta0,1000);
  IntDoubleVector gradFd1=StochasticGradientApproximation.estimateGradientSpsa(fn,theta0,1000);
  IntDoubleVector gradAd=fn.getGradient(theta0);
  System.out.println(""String_Node_Str"" + gradFd0);
  System.out.println(""String_Node_Str"" + gradFd1);
  System.out.println(""String_Node_Str"" + gradAd);
  double infNormFd=infNorm(gradFd0,gradFd1);
  double infNorm=infNorm(gradFd0,gradAd);
  System.out.println(""String_Node_Str"" + infNormFd);
  System.out.println(""String_Node_Str"" + infNorm);
  assertTrue(infNorm < 1e-1);
  return gradAd;
}","private static IntDoubleVector testGradientByFiniteDifferences(ErmaErFn fn){
  Prng.seed(12345);
  int numParams=fn.getNumDimensions();
  IntDoubleVector theta0=ModuleTestUtils.getAbsZeroOneGaussian(numParams);
  System.out.println(""String_Node_Str"" + theta0);
  Prng.seed(System.currentTimeMillis());
  ModuleTestUtils.assertFdAndAdEqual(fn,theta0,1e-5,1e-8);
  IntDoubleVector gradFd0=StochasticGradientApproximation.estimateGradientSpsa(fn,theta0,1000);
  IntDoubleVector gradFd1=StochasticGradientApproximation.estimateGradientSpsa(fn,theta0,1000);
  IntDoubleVector gradAd=fn.getGradient(theta0);
  System.out.println(""String_Node_Str"" + gradFd0);
  System.out.println(""String_Node_Str"" + gradFd1);
  System.out.println(""String_Node_Str"" + gradAd);
  double infNormFd=infNorm(gradFd0,gradFd1);
  double infNorm=infNorm(gradFd0,gradAd);
  System.out.println(""String_Node_Str"" + infNormFd);
  System.out.println(""String_Node_Str"" + infNorm);
  assertTrue(infNorm < 1e-1);
  return gradAd;
}",0.8915412558380903
131371,"public void forwardAndBackward(FgNode parent,Messages[] msgs,Messages[] msgsAdj,Algebra s,boolean isForward){
  Tensor tmTrueIn=getMsgs(parent,msgs,LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  Tensor tmFalseIn=getMsgs(parent,msgs,LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  TensorIdentity mTrueIn=new TensorIdentity(tmTrueIn);
  TensorIdentity mFalseIn=new TensorIdentity(tmFalseIn);
  ProjDepTreeModule dep=new ProjDepTreeModule(mTrueIn,mFalseIn,s);
  dep.forward();
  if (isForward) {
    Pair<Tensor,Tensor> pair=dep.getOutput();
    Tensor tmTrueOut=pair.get1();
    Tensor tmFalseOut=pair.get2();
    setMsgs(parent,msgs,tmTrueOut,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    setMsgs(parent,msgs,tmFalseOut,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
  }
 else {
    Tensor tTrue=getMsgs(parent,msgsAdj,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    Tensor tFalse=getMsgs(parent,msgsAdj,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
    Pair<Tensor,Tensor> pairAdj=dep.getOutput();
    Tensor tmTrueOutAdj=pairAdj.get1();
    Tensor tmFalseOutAdj=pairAdj.get2();
    tmTrueOutAdj.elemAdd(tTrue);
    tmFalseOutAdj.elemAdd(tFalse);
    dep.backward();
    setMsgs(parent,msgsAdj,mTrueIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
    setMsgs(parent,msgsAdj,mFalseIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  }
}","public void forwardAndBackward(FgNode parent,Messages[] msgs,Messages[] msgsAdj,Algebra s,boolean isForward){
  Tensor tmTrueIn=getMsgs(parent,msgs,LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  Tensor tmFalseIn=getMsgs(parent,msgs,LinkVar.FALSE,CUR_MSG,IN_MSG,s);
  TensorIdentity mTrueIn=new TensorIdentity(tmTrueIn);
  TensorIdentity mFalseIn=new TensorIdentity(tmFalseIn);
  ProjDepTreeModule dep=new ProjDepTreeModule(mTrueIn,mFalseIn,s);
  dep.forward();
  if (isForward) {
    Pair<Tensor,Tensor> pair=dep.getOutput();
    Tensor tmTrueOut=pair.get1();
    Tensor tmFalseOut=pair.get2();
    setMsgs(parent,msgs,tmTrueOut,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    setMsgs(parent,msgs,tmFalseOut,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
  }
 else {
    Tensor tTrue=getMsgs(parent,msgsAdj,LinkVar.TRUE,NEW_MSG,OUT_MSG,s);
    Tensor tFalse=getMsgs(parent,msgsAdj,LinkVar.FALSE,NEW_MSG,OUT_MSG,s);
    Pair<Tensor,Tensor> pairAdj=dep.getOutputAdj();
    Tensor tmTrueOutAdj=pairAdj.get1();
    Tensor tmFalseOutAdj=pairAdj.get2();
    tmTrueOutAdj.elemAdd(tTrue);
    tmFalseOutAdj.elemAdd(tFalse);
    dep.backward();
    setMsgs(parent,msgsAdj,mTrueIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
    setMsgs(parent,msgsAdj,mFalseIn.getOutputAdj(),LinkVar.TRUE,CUR_MSG,IN_MSG,s);
  }
}",0.9988165680473372
131372,"/** 
 * Backward pass:  dG/dx_i += dG/dy_i dy_i/dx_i = dG/dy_i / w_i  dG/dw_i += dG/dy_i dy_i/dw_i = dG/dy_i * x_i / (- w_i^2)
 */
@Override public void backward(){
  Tensor x=modInX.getOutput();
  Tensor w=modInW.getOutput();
{
    Tensor tmp=yAdj.copy();
    tmp.elemDivide(w);
    modInX.getOutputAdj().elemAdd(tmp);
  }
{
    Tensor tmp=w.copy();
    tmp.fill(1.0);
    tmp.elemDivide(w);
    tmp.elemDivide(w);
    tmp.multiply(-1);
    tmp.elemMultiply(yAdj);
    tmp.elemMultiply(x);
    modInW.getOutputAdj().elemAdd(tmp);
  }
}","/** 
 * Backward pass:  dG/dx_i += dG/dy_i dy_i/dx_i = dG/dy_i / w_i  dG/dw_i += dG/dy_i dy_i/dw_i = dG/dy_i * x_i / (- w_i^2)
 */
@Override public void backward(){
  Tensor x=modInX.getOutput();
  Tensor w=modInW.getOutput();
{
    Tensor tmp=yAdj.copy();
    tmp.elemDivide(w);
    correctForZeros(tmp);
    modInX.getOutputAdj().elemAdd(tmp);
  }
{
    Tensor tmp=w.copy();
    tmp.fill(1.0);
    tmp.elemDivide(w);
    tmp.elemDivide(w);
    tmp.multiply(-1);
    tmp.elemMultiply(yAdj);
    tmp.elemMultiply(x);
    correctForZeros(tmp);
    modInW.getOutputAdj().elemAdd(tmp);
  }
}",0.9537366548042704
131373,"private static void checkEqualSize(Tensor t1,Tensor t2){
  if (t1.size() != t2.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public static void checkEqualSize(Tensor t1,Tensor t2){
  if (t1.size() != t2.size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9704918032786886
131374,"/** 
 * For debugging. Remove later.
 */
public Messages[] getMessages(){
  return msgs;
}","/** 
 * For testing only. 
 */
public Messages[] getMessages(){
  return msgs;
}",0.8470588235294118
131375,"public void backward(DenseFactor[] varBeliefsAdj,DenseFactor[] facBeliefsAdj){
  for (int v=0; v < varBeliefsAdj.length; v++) {
    unnormalizeAdjInPlace(varBeliefs[v],varBeliefsAdj[v],varBeliefsUnSum[v]);
  }
  for (int a=0; a < facBeliefsAdj.length; a++) {
    unnormalizeAdjInPlace(facBeliefs[a],facBeliefsAdj[a],facBeliefsUnSum[a]);
  }
  this.msgsAdj=new Messages[fg.getNumEdges()];
  for (int i=0; i < msgs.length; i++) {
    FgEdge edge=fg.getEdge(i);
    int varId=edge.getVar().getId();
    int facId=edge.getFactor().getId();
    msgsAdj[i]=new Messages(edge,prm.logDomain,prm.normalizeMessages);
    if (edge.isVarToFactor()) {
      initVarToFactorAdj(i,facBeliefsAdj,varId,facId,edge);
    }
 else     if (!(edge.getFactor() instanceof GlobalFactor)) {
      initFactorToVarAdj(i,varBeliefsAdj,varId,facId);
    }
 else {
      msgsAdj[i]=null;
    }
  }
  this.potentialsAdj=new DenseFactor[fg.getNumFactors()];
  for (int a=0; a < fg.getNumFactors(); a++) {
    initPotentialsAdj(a,facBeliefsAdj);
  }
  for (  Factor factor : fg.getFactors()) {
    if (factor instanceof GlobalFactor) {
      ((GlobalFactor)factor).reset();
    }
  }
  if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
    for (int t=tape.size() - 1; t >= 0; t--) {
      backwardSendMessage(t);
      backwardNormalize(t);
      backwardCreateMessage(t);
    }
  }
 else   if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
    int t=tape.size() - 1;
    while (t >= 0) {
      int tTop=t;
      for (; t >= 0; t--) {
        if (tape.edges.get(t) == END_OF_EDGE_CREATION) {
          break;
        }
        backwardSendMessage(t);
        backwardNormalize(t);
      }
      t=tTop;
      for (; t >= 0; t--) {
        if (tape.edges.get(t) == END_OF_EDGE_CREATION) {
          t--;
          break;
        }
        backwardCreateMessage(t);
      }
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
  }
}","public void backward(DenseFactor[] varBeliefsAdj,DenseFactor[] facBeliefsAdj){
  for (int v=0; v < varBeliefsAdj.length; v++) {
    unnormalizeAdjInPlace(varBeliefs[v],varBeliefsAdj[v],varBeliefsUnSum[v]);
  }
  for (int a=0; a < facBeliefsAdj.length; a++) {
    unnormalizeAdjInPlace(facBeliefs[a],facBeliefsAdj[a],facBeliefsUnSum[a]);
  }
  this.msgsAdj=new Messages[fg.getNumEdges()];
  for (int i=0; i < msgs.length; i++) {
    FgEdge edge=fg.getEdge(i);
    int varId=edge.getVar().getId();
    int facId=edge.getFactor().getId();
    msgsAdj[i]=new Messages(edge,prm.logDomain,prm.normalizeMessages);
    msgsAdj[i].message.scale(s.zero());
    msgsAdj[i].newMessage.scale(s.zero());
    if (edge.isVarToFactor()) {
      initVarToFactorAdj(i,facBeliefsAdj,varId,facId,edge);
    }
 else     if (!(edge.getFactor() instanceof GlobalFactor)) {
      initFactorToVarAdj(i,varBeliefsAdj,varId,facId);
    }
 else {
      msgsAdj[i]=null;
    }
  }
  this.potentialsAdj=new DenseFactor[fg.getNumFactors()];
  for (int a=0; a < fg.getNumFactors(); a++) {
    initPotentialsAdj(a,facBeliefsAdj);
  }
  for (  Factor factor : fg.getFactors()) {
    if (factor instanceof GlobalFactor) {
      ((GlobalFactor)factor).reset();
    }
  }
  if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
    for (int t=tape.size() - 1; t >= 0; t--) {
      backwardSendMessage(t);
      backwardNormalize(t);
      backwardCreateMessage(t);
    }
  }
 else   if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
    int t=tape.size() - 1;
    while (t >= 0) {
      int tTop=t;
      for (; t >= 0; t--) {
        if (tape.edges.get(t) == END_OF_EDGE_CREATION) {
          break;
        }
        backwardSendMessage(t);
        backwardNormalize(t);
      }
      t=tTop;
      for (; t >= 0; t--) {
        if (tape.edges.get(t) == END_OF_EDGE_CREATION) {
          t--;
          break;
        }
        backwardCreateMessage(t);
      }
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
  }
}",0.9789607097591888
131376,"private void backwardNormalize(int t){
  FgEdge edge=tape.edges.get(t);
  double msgSum=tape.msgSums.get(t);
  int i=edge.getId();
  if (prm.normalizeMessages) {
    unnormalizeAdjInPlace(msgs[i].newMessage,msgsAdj[i].newMessage,msgSum);
  }
}","private void backwardNormalize(int t){
  if (prm.normalizeMessages) {
    FgEdge edge=tape.edges.get(t);
    double msgSum=tape.msgSums.get(t);
    int i=edge.getId();
    unnormalizeAdjInPlace(msgs[i].newMessage,msgsAdj[i].newMessage,msgSum);
  }
}",0.8617886178861789
131377,"private void backwardSendMessage(int t){
  FgEdge edge=tape.edges.get(t);
  DenseFactor oldMsg=tape.msgs.get(t);
  int i=edge.getId();
  msgs[i].newMessage=msgs[i].message;
  msgs[i].message=oldMsg;
  msgsAdj[i].newMessage=msgsAdj[i].message;
  msgsAdj[i].message.set(s.zero());
}","private void backwardSendMessage(int t){
  FgEdge edge=tape.edges.get(t);
  DenseFactor oldMsg=tape.msgs.get(t);
  int i=edge.getId();
  msgs[i].newMessage=msgs[i].message;
  msgs[i].message=oldMsg;
  DenseFactor tmp=msgsAdj[i].newMessage;
  tmp.scale(0);
  msgsAdj[i].newMessage=msgsAdj[i].message;
  msgsAdj[i].message=tmp;
}",0.8369028006589786
131378,"public void backward(DenseFactor[] varBeliefsAdj,DenseFactor[] facBeliefsAdj){
  for (int v=0; v < varBeliefsAdj.length; v++) {
    unnormalizeAdjInPlace(varBeliefs[v],varBeliefsAdj[v],varBeliefsUnSum[v]);
  }
  for (int a=0; a < facBeliefsAdj.length; a++) {
    unnormalizeAdjInPlace(facBeliefs[a],facBeliefsAdj[a],facBeliefsUnSum[a]);
  }
  this.msgsAdj=new Messages[fg.getNumEdges()];
  for (int i=0; i < msgs.length; i++) {
    FgEdge edge=fg.getEdge(i);
    int varId=edge.getVar().getId();
    int facId=edge.getFactor().getId();
    msgsAdj[i]=new Messages(edge,prm.logDomain,prm.normalizeMessages);
    if (edge.isVarToFactor()) {
      initVarToFactorAdj(i,facBeliefsAdj,varId,facId,edge);
    }
 else     if (!(edge.getFactor() instanceof GlobalFactor)) {
      initFactorToVarAdj(i,varBeliefsAdj,varId,facId);
    }
 else {
      msgsAdj[i]=null;
    }
  }
  this.potentialsAdj=new DenseFactor[fg.getNumFactors()];
  for (int a=0; a < fg.getNumFactors(); a++) {
    initPotentialsAdj(a,facBeliefsAdj);
  }
  for (  Factor factor : fg.getFactors()) {
    if (factor instanceof GlobalFactor) {
      ((GlobalFactor)factor).reset();
    }
  }
  if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
    for (int t=tape.size() - 1; t >= 0; t--) {
      backwardSendMessage(t);
      backwardNormalize(t);
      backwardCreateMessage(t);
    }
  }
 else   if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
    int t=tape.size();
    while (t >= 0) {
      int tTop=t;
      for (; t >= 0; t--) {
        if (tape.edges.get(t) == END_OF_EDGE_CREATION) {
          break;
        }
        backwardSendMessage(t);
        backwardNormalize(t);
      }
      t=tTop;
      for (; t >= 0; t--) {
        if (tape.edges.get(t) == END_OF_EDGE_CREATION) {
          break;
        }
        backwardCreateMessage(t);
      }
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
  }
}","public void backward(DenseFactor[] varBeliefsAdj,DenseFactor[] facBeliefsAdj){
  for (int v=0; v < varBeliefsAdj.length; v++) {
    unnormalizeAdjInPlace(varBeliefs[v],varBeliefsAdj[v],varBeliefsUnSum[v]);
  }
  for (int a=0; a < facBeliefsAdj.length; a++) {
    unnormalizeAdjInPlace(facBeliefs[a],facBeliefsAdj[a],facBeliefsUnSum[a]);
  }
  this.msgsAdj=new Messages[fg.getNumEdges()];
  for (int i=0; i < msgs.length; i++) {
    FgEdge edge=fg.getEdge(i);
    int varId=edge.getVar().getId();
    int facId=edge.getFactor().getId();
    msgsAdj[i]=new Messages(edge,prm.logDomain,prm.normalizeMessages);
    if (edge.isVarToFactor()) {
      initVarToFactorAdj(i,facBeliefsAdj,varId,facId,edge);
    }
 else     if (!(edge.getFactor() instanceof GlobalFactor)) {
      initFactorToVarAdj(i,varBeliefsAdj,varId,facId);
    }
 else {
      msgsAdj[i]=null;
    }
  }
  this.potentialsAdj=new DenseFactor[fg.getNumFactors()];
  for (int a=0; a < fg.getNumFactors(); a++) {
    initPotentialsAdj(a,facBeliefsAdj);
  }
  for (  Factor factor : fg.getFactors()) {
    if (factor instanceof GlobalFactor) {
      ((GlobalFactor)factor).reset();
    }
  }
  if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
    for (int t=tape.size() - 1; t >= 0; t--) {
      backwardSendMessage(t);
      backwardNormalize(t);
      backwardCreateMessage(t);
    }
  }
 else   if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
    int t=tape.size() - 1;
    while (t >= 0) {
      int tTop=t;
      for (; t >= 0; t--) {
        if (tape.edges.get(t) == END_OF_EDGE_CREATION) {
          break;
        }
        backwardSendMessage(t);
        backwardNormalize(t);
      }
      t=tTop;
      for (; t >= 0; t--) {
        if (tape.edges.get(t) == END_OF_EDGE_CREATION) {
          t--;
          break;
        }
        backwardCreateMessage(t);
      }
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
  }
}",0.995055945875618
131379,"/** 
 * Gets a new factor graph, identical to this one, except that specified variables are clamped to their values. Each clamped variable will be removed from the factor graph. All factors, even those with zero variables will be preserved.
 * @param clampVars The variables to clamp.
 */
public FactorGraph getClamped(VarConfig clampVars){
  FactorGraph clmpFg=new FactorGraph();
  for (  Var v : this.vars) {
    clmpFg.addVar(v);
  }
  for (  Factor origFactor : this.getFactors()) {
    VarConfig factorConfig=clampVars.getIntersection(origFactor.getVars());
    Factor clmpFactor=origFactor.getClamped(factorConfig);
    clmpFg.addFactor(clmpFactor);
  }
  for (  Var v : clampVars.getVars()) {
    int c=clampVars.getState(v);
    clmpFg.addFactor(new ClampFactor(v,c));
  }
  return clmpFg;
}","/** 
 * Gets a new factor graph, identical to this one, except that specified variables are clamped to their values. Each clamped variable will be removed from the factor graph. All factors, even those with zero variables will be preserved.
 * @param clampVars The variables to clamp.
 */
public FactorGraph getClamped(VarConfig clampVars){
  FactorGraph clmpFg=new FactorGraph();
  for (  Var v : this.vars) {
    clmpFg.addVar(v);
  }
  for (  Factor origFactor : this.getFactors()) {
    if (origFactor instanceof ClampFactor) {
      clmpFg.addFactor(origFactor);
    }
 else {
      VarConfig factorConfig=clampVars.getIntersection(origFactor.getVars());
      Factor clmpFactor=origFactor.getClamped(factorConfig);
      clmpFg.addFactor(clmpFactor);
    }
  }
  for (  Var v : clampVars.getVars()) {
    int c=clampVars.getState(v);
    clmpFg.addFactor(new ClampFactor(v,c));
  }
  return clmpFg;
}",0.9208211143695014
131380,"private void backwardFactorToVar(FgEdge edgeAI,int i){
  int facId=edgeAI.getFactor().getId();
{
    DenseFactor prod=new DenseFactor(msgsAdj[i].newMessage);
    getProductOfMessages(edgeAI.getParent(),prod,edgeAI.getChild());
    VarSet varsMinusI=new VarSet(prod.getVars());
    varsMinusI.remove(edgeAI.getVar());
    potentialsAdj[facId].add(prod.getMarginal(varsMinusI,false));
  }
  for (  FgEdge edgeJA : fg.getFactorNode(facId).getInEdges()) {
    if (edgeJA != edgeAI.getOpposing()) {
      DenseFactor prod=new DenseFactor(potentialsAdj[facId]);
      getProductOfMessages(edgeAI.getParent(),prod,edgeAI.getChild(),edgeJA.getParent());
      prod.prod(msgsAdj[i].newMessage);
      VarSet varJ=msgsAdj[edgeJA.getId()].message.getVars();
      msgsAdj[edgeJA.getId()].message.add(prod.getMarginal(varJ,false));
    }
  }
}","private void backwardFactorToVar(FgEdge edgeAI,int i){
  Factor factor=edgeAI.getFactor();
  int facId=factor.getId();
{
    DenseFactor prod=new DenseFactor(msgsAdj[i].newMessage);
    getProductOfMessages(edgeAI.getParent(),prod,edgeAI.getChild());
    potentialsAdj[facId].add(prod);
  }
  for (  FgEdge edgeJA : fg.getFactorNode(facId).getInEdges()) {
    if (edgeJA != edgeAI.getOpposing()) {
      DenseFactor prod=new DenseFactor(BruteForceInferencer.safeGetDenseFactor(factor));
      getProductOfMessages(edgeAI.getParent(),prod,edgeAI.getChild(),edgeJA.getParent());
      prod.prod(msgsAdj[i].newMessage);
      VarSet varJ=msgsAdj[edgeJA.getId()].message.getVars();
      msgsAdj[edgeJA.getId()].message.add(prod.getMarginal(varJ,false));
    }
  }
}",0.8562460765850597
131381,"public static int[] getParents(List<DenseFactor> margs,List<Var> vars,int n,boolean logDomain){
  Pair<EdgeScores,Integer> pair=getEdgeScores(margs,vars,n,false,logDomain);
  EdgeScores scores=pair.get1();
  int linkVarCount=pair.get2();
  if (linkVarCount > 0) {
    int[] parents=new int[n];
    Arrays.fill(parents,DepTree.EMPTY_POSITION);
    ProjectiveDependencyParser.parse(scores.root,scores.child,parents);
    return parents;
  }
 else {
    return null;
  }
}","public static int[] getParents(List<DenseFactor> margs,List<Var> vars,int n,boolean logDomain){
  Pair<EdgeScores,Integer> pair=getEdgeScores(margs,vars,n,false,logDomain);
  EdgeScores scores=pair.get1();
  int linkVarCount=pair.get2();
  if (linkVarCount > 0) {
    final SemiringExt s=logDomain ? new LogSemiring() : new RealSemiring();
    scores.apply(new LambdaUnaryOpDouble(){
      @Override public double call(      double v){
        return s.toReal(v);
      }
    }
);
    int[] parents=new int[n];
    Arrays.fill(parents,DepTree.EMPTY_POSITION);
    ProjectiveDependencyParser.parse(scores.root,scores.child,parents);
    return parents;
  }
 else {
    return null;
  }
}",0.8121212121212121
131382,"private static Pair<EdgeScores,Integer> getEdgeScores(List<DenseFactor> margs,List<Var> vars,int n,boolean logOdds,boolean logDomain){
  SemiringExt s=logDomain ? new LogSemiring() : new RealSemiring();
  int linkVarCount=0;
  EdgeScores scores=new EdgeScores(n,Double.NEGATIVE_INFINITY);
  for (int varId=0; varId < vars.size(); varId++) {
    Var var=vars.get(varId);
    DenseFactor marg=margs.get(varId);
    if (var instanceof LinkVar && (var.getType() == VarType.LATENT || var.getType() == VarType.PREDICTED)) {
      LinkVar link=((LinkVar)var);
      int c=link.getChild();
      int p=link.getParent();
      double belief;
      if (logOdds) {
        belief=s.divide(marg.getValue(LinkVar.TRUE),marg.getValue(LinkVar.FALSE));
      }
 else {
        belief=s.toReal(marg.getValue(LinkVar.TRUE));
      }
      if (p == -1) {
        scores.root[c]=belief;
      }
 else {
        scores.child[p][c]=belief;
      }
      linkVarCount++;
    }
  }
  return new Pair<EdgeScores,Integer>(scores,linkVarCount);
}","private static Pair<EdgeScores,Integer> getEdgeScores(List<DenseFactor> margs,List<Var> vars,int n,boolean logOdds,boolean logDomain){
  SemiringExt s=logDomain ? new LogSemiring() : new RealSemiring();
  int linkVarCount=0;
  EdgeScores scores=new EdgeScores(n,Double.NEGATIVE_INFINITY);
  for (int varId=0; varId < vars.size(); varId++) {
    Var var=vars.get(varId);
    DenseFactor marg=margs.get(varId);
    if (var instanceof LinkVar && (var.getType() == VarType.LATENT || var.getType() == VarType.PREDICTED)) {
      LinkVar link=((LinkVar)var);
      int c=link.getChild();
      int p=link.getParent();
      double belief;
      if (logOdds) {
        belief=s.divide(marg.getValue(LinkVar.TRUE),marg.getValue(LinkVar.FALSE));
      }
 else {
        belief=marg.getValue(LinkVar.TRUE);
      }
      if (p == -1) {
        scores.root[c]=belief;
      }
 else {
        scores.child[p][c]=belief;
      }
      linkVarCount++;
    }
  }
  return new Pair<EdgeScores,Integer>(scores,linkVarCount);
}",0.995069033530572
131383,"public static DepEdgeMask getDepEdgeMask(List<DenseFactor> margs,List<Var> vars,int n,double propMaxMarg,boolean logDomain){
  Pair<EdgeScores,Integer> pair=getEdgeScores(margs,vars,n,false,logDomain);
  EdgeScores scores=pair.get1();
  int linkVarCount=pair.get2();
  if (linkVarCount > 0) {
    double[] maxMargForTok=new double[n];
    Arrays.fill(maxMargForTok,Double.NEGATIVE_INFINITY);
    for (int c=0; c < n; c++) {
      for (int p=-1; p < n; p++) {
        if (p == c) {
          continue;
        }
        double marg=scores.getScore(p,c);
        if (marg > maxMargForTok[c]) {
          maxMargForTok[c]=marg;
        }
      }
    }
    double logPropMaxMarg=FastMath.log(propMaxMarg);
    DepEdgeMask mask=new DepEdgeMask(n,false);
    for (int p=-1; p < n; p++) {
      for (int c=0; c < n; c++) {
        if (p == c) {
          continue;
        }
        double marg=scores.getScore(p,c);
        if (log.isTraceEnabled()) {
          log.trace(String.format(""String_Node_Str"",p,c,marg,maxMargForTok[c],logPropMaxMarg + maxMargForTok[c]));
        }
        if (marg < logPropMaxMarg + maxMargForTok[c]) {
          mask.setIsKept(p,c,false);
        }
 else {
          mask.setIsKept(p,c,true);
        }
      }
    }
    for (int c=0; c < n; c++) {
      if (mask.getParentCount(c) == 0) {
        String msg=String.format(""String_Node_Str"") + mask;
        throw new IllegalStateException(msg);
      }
    }
    return mask;
  }
 else {
    return null;
  }
}","public static DepEdgeMask getDepEdgeMask(List<DenseFactor> margs,List<Var> vars,int n,double propMaxMarg,boolean logDomain){
  SemiringExt s=logDomain ? new LogSemiring() : new RealSemiring();
  Pair<EdgeScores,Integer> pair=getEdgeScores(margs,vars,n,false,logDomain);
  EdgeScores scores=pair.get1();
  int linkVarCount=pair.get2();
  if (linkVarCount > 0) {
    double[] maxMargForTok=new double[n];
    Arrays.fill(maxMargForTok,Double.NEGATIVE_INFINITY);
    for (int c=0; c < n; c++) {
      for (int p=-1; p < n; p++) {
        if (p == c) {
          continue;
        }
        double marg=scores.getScore(p,c);
        if (marg > maxMargForTok[c]) {
          maxMargForTok[c]=marg;
        }
      }
    }
    double logPropMaxMarg=s.fromReal(propMaxMarg);
    DepEdgeMask mask=new DepEdgeMask(n,false);
    for (int p=-1; p < n; p++) {
      for (int c=0; c < n; c++) {
        if (p == c) {
          continue;
        }
        double marg=scores.getScore(p,c);
        if (log.isTraceEnabled()) {
          log.trace(String.format(""String_Node_Str"",p,c,marg,maxMargForTok[c],logPropMaxMarg + maxMargForTok[c]));
        }
        if (marg < s.times(logPropMaxMarg,maxMargForTok[c])) {
          mask.setIsKept(p,c,false);
        }
 else {
          mask.setIsKept(p,c,true);
        }
      }
    }
    for (int c=0; c < n; c++) {
      if (mask.getParentCount(c) == 0) {
        String msg=String.format(""String_Node_Str"") + mask;
        throw new IllegalStateException(msg);
      }
    }
    return mask;
  }
 else {
    return null;
  }
}",0.9668308702791462
131384,"@Override public Object call(){
  Accumulator sparseAc=new Accumulator();
synchronized (ac) {
    if (ac.accumValue) {
      log.trace(""String_Node_Str"" + i);
    }
    if (ac.accumGradient) {
      log.trace(""String_Node_Str"" + i);
      sparseAc.setGradient(ac.gradient.getSparseZeroedCopy());
    }
  }
  exObj.accum(model,i,sparseAc);
synchronized (ac) {
    ac.addAll(sparseAc);
  }
  return null;
}","@Override public Object call(){
  Accumulator sparseAc=new Accumulator();
  sparseAc.setFlagsFromOther(ac);
synchronized (ac) {
    if (ac.accumValue) {
      log.trace(""String_Node_Str"" + i);
    }
    if (ac.accumGradient) {
      log.trace(""String_Node_Str"" + i);
      sparseAc.setGradient(ac.gradient.getSparseZeroedCopy());
    }
  }
  exObj.accum(model,i,sparseAc);
synchronized (ac) {
    ac.addAll(sparseAc);
  }
  return null;
}",0.9596199524940616
131385,"/** 
 * For testing only. Converts to the graphical model's representation of the data.
 */
public FgExampleList getData(LogLinearXYData data){
  Alphabet<String> alphabet=data.getFeatAlphabet();
  List<LogLinearExample> exList=data.getData();
  if (this.alphabet == null) {
    this.alphabet=alphabet;
    this.stateNames=getStateNames(exList,data.getYAlphabet());
  }
  FgExampleMemoryStore store=new FgExampleMemoryStore();
  for (  final LogLinearExample desc : exList) {
    FgExample ex=getFgExample(desc);
    for (int i=0; i < (desc.getWeight() * 100); i++) {
      store.add(ex);
    }
  }
  return store;
}","/** 
 * For testing only. Converts to the graphical model's representation of the data.
 */
public FgExampleList getData(LogLinearXYData data){
  Alphabet<String> alphabet=data.getFeatAlphabet();
  List<LogLinearExample> exList=data.getData();
  if (this.alphabet == null) {
    this.alphabet=alphabet;
    this.stateNames=getStateNames(exList,data.getYAlphabet());
  }
  FgExampleMemoryStore store=new FgExampleMemoryStore();
  for (  final LogLinearExample desc : exList) {
    FgExample ex=getFgExample(desc);
    for (int i=0; i < desc.getWeight(); i++) {
      store.add(ex);
    }
  }
  return store;
}",0.9934640522875816
131386,"@Test public void testLogLinearModelTrainDecode2(){
  LogLinearXYData exs=new LogLinearXYData(2);
  exs.getFeatAlphabet().lookupIndex(""String_Node_Str"");
  exs.getFeatAlphabet().lookupIndex(""String_Node_Str"");
  exs.getFeatAlphabet().lookupIndex(""String_Node_Str"");
  exs.getXAlphabet().lookupIndex(""String_Node_Str"");
  exs.getYAlphabet().lookupIndex(""String_Node_Str"");
  exs.getYAlphabet().lookupIndex(""String_Node_Str"");
  FeatureVector[] fvs=new FeatureVector[4];
  for (int i=0; i < 4; i++) {
    fvs[i]=new FeatureVector();
  }
  fvs[0].add(0,1);
  fvs[0].add(1,1);
  fvs[0].add(2,1);
  fvs[1].add(0,1);
  fvs[1].add(1,1);
  fvs[2].add(0,1);
  fvs[2].add(2,1);
  fvs[3].add(0,1);
  fvs[3].add(1,1);
  exs.addEx(30,""String_Node_Str"",""String_Node_Str"",Arrays.copyOfRange(fvs,0,2));
  exs.addEx(15,""String_Node_Str"",""String_Node_Str"",Arrays.copyOfRange(fvs,0,2));
  exs.addEx(5,""String_Node_Str"",""String_Node_Str"",Arrays.copyOfRange(fvs,2,4));
  exs.addEx(21,""String_Node_Str"",""String_Node_Str"",Arrays.copyOfRange(fvs,2,4));
  List<LogLinearExample> data=exs.getData();
  LogLinearXYPrm prm=new LogLinearXYPrm();
  LogLinearXY td=new LogLinearXY(prm);
  FgModel model=td.train(exs);
  System.out.println(model);
{
    Pair<String,DenseFactor> p=td.decode(model,data.get(0));
    String predLabel=p.get1();
    DenseFactor dist=p.get2();
    System.out.println(Arrays.toString(dist.getValues()));
    assertEquals(""String_Node_Str"",predLabel);
    JUnitUtils.assertArrayEquals(new double[]{-0.56869180843596,-0.8353232329420138},dist.getValues(),1e-3);
  }
{
    Pair<String,DenseFactor> p=td.decode(model,data.get(2));
    String predLabel=p.get1();
    DenseFactor dist=p.get2();
    System.out.println(Arrays.toString(dist.getValues()));
    assertEquals(""String_Node_Str"",predLabel);
    JUnitUtils.assertArrayEquals(new double[]{-0.8277652102139692,-0.5745197983563534},dist.getValues(),1e-3);
  }
}","@Test public void testLogLinearModelTrainDecode2(){
  LogLinearXYData exs=new LogLinearXYData(2);
  exs.getFeatAlphabet().lookupIndex(""String_Node_Str"");
  exs.getFeatAlphabet().lookupIndex(""String_Node_Str"");
  exs.getFeatAlphabet().lookupIndex(""String_Node_Str"");
  exs.getXAlphabet().lookupIndex(""String_Node_Str"");
  exs.getYAlphabet().lookupIndex(""String_Node_Str"");
  exs.getYAlphabet().lookupIndex(""String_Node_Str"");
  FeatureVector[] fvs=new FeatureVector[4];
  for (int i=0; i < 4; i++) {
    fvs[i]=new FeatureVector();
  }
  fvs[0].add(0,1);
  fvs[0].add(1,1);
  fvs[0].add(2,1);
  fvs[1].add(0,1);
  fvs[1].add(1,1);
  fvs[2].add(0,1);
  fvs[2].add(2,1);
  fvs[3].add(0,1);
  fvs[3].add(1,1);
  exs.addEx(30,""String_Node_Str"",""String_Node_Str"",Arrays.copyOfRange(fvs,0,2));
  exs.addEx(15,""String_Node_Str"",""String_Node_Str"",Arrays.copyOfRange(fvs,0,2));
  exs.addEx(5,""String_Node_Str"",""String_Node_Str"",Arrays.copyOfRange(fvs,2,4));
  exs.addEx(21,""String_Node_Str"",""String_Node_Str"",Arrays.copyOfRange(fvs,2,4));
  List<LogLinearExample> data=exs.getData();
  LogLinearXYPrm prm=new LogLinearXYPrm();
  LogLinearXY td=new LogLinearXY(prm);
  FgModel model=td.train(exs);
  System.out.println(model);
{
    Pair<String,DenseFactor> p=td.decode(model,data.get(0));
    String predLabel=p.get1();
    DenseFactor dist=p.get2();
    System.out.println(Arrays.toString(dist.getValues()));
    assertEquals(""String_Node_Str"",predLabel);
  }
{
    Pair<String,DenseFactor> p=td.decode(model,data.get(2));
    String predLabel=p.get1();
    DenseFactor dist=p.get2();
    System.out.println(Arrays.toString(dist.getValues()));
    assertEquals(""String_Node_Str"",predLabel);
  }
}",0.8146911519198664
131387,"@Test public void testTrainNoLatentVars(){
  FactorTemplateList fts=new FactorTemplateList();
  ObsFeatureExtractor obsFe=new SimpleVCFeatureExtractor(fts);
  ObsFeatureConjoinerPrm prm=new ObsFeatureConjoinerPrm();
  prm.includeUnsupportedFeatures=true;
  ObsFeatureConjoiner ofc=new ObsFeatureConjoiner(prm,fts);
  FgAndVars fgv=getLinearChainFgWithVars(true,ofc,obsFe);
  VarConfig trainConfig=new VarConfig();
  trainConfig.put(fgv.w0,0);
  trainConfig.put(fgv.w1,1);
  trainConfig.put(fgv.w2,0);
  trainConfig.put(fgv.t0,0);
  trainConfig.put(fgv.t1,1);
  trainConfig.put(fgv.t2,1);
  FgExampleMemoryStore data=new FgExampleMemoryStore();
  data.add(new LabeledFgExample(fgv.fg,trainConfig,obsFe,fts));
  ofc.init(data);
  FgModel model=new FgModel(ofc.getNumParams());
  model=train(model,data);
  System.out.println(model);
  System.out.println(fts);
  System.out.println(DoubleArrays.toString(FgModelTest.getParams(model),""String_Node_Str""));
  JUnitUtils.assertArrayEquals(new double[]{3.58,-0.75,-2.16,-2.17,-3.58,0.75,2.16,2.17,-2.17,-2.17,3.59,0.75},FgModelTest.getParams(model),1e-2);
}","@Test public void testTrainNoLatentVars(){
  FactorTemplateList fts=new FactorTemplateList();
  ObsFeatureExtractor obsFe=new SimpleVCFeatureExtractor(fts);
  ObsFeatureConjoinerPrm prm=new ObsFeatureConjoinerPrm();
  prm.includeUnsupportedFeatures=true;
  ObsFeatureConjoiner ofc=new ObsFeatureConjoiner(prm,fts);
  FgAndVars fgv=getLinearChainFgWithVars(true,ofc,obsFe);
  VarConfig trainConfig=new VarConfig();
  trainConfig.put(fgv.w0,0);
  trainConfig.put(fgv.w1,1);
  trainConfig.put(fgv.w2,0);
  trainConfig.put(fgv.t0,0);
  trainConfig.put(fgv.t1,1);
  trainConfig.put(fgv.t2,1);
  FgExampleMemoryStore data=new FgExampleMemoryStore();
  data.add(new LabeledFgExample(fgv.fg,trainConfig,obsFe,fts));
  ofc.init(data);
  FgModel model=new FgModel(ofc.getNumParams());
  model=train(model,data);
  System.out.println(model);
  System.out.println(fts);
  System.out.println(DoubleArrays.toString(FgModelTest.getParams(model),""String_Node_Str""));
  JUnitUtils.assertArrayEquals(new double[]{-0.10,-0.10,0.10,0.10,-3.15,-3.15,-3.29,-3.29,5.30,5.30,1.14,1.14},FgModelTest.getParams(model),1e-2);
}",0.9144676979071884
131388,"@Test public void testTrainWithLatentVars(){
  FactorTemplateList fts=new FactorTemplateList();
  ObsFeatureExtractor obsFe=new SimpleVCFeatureExtractor(fts);
  ObsFeatureConjoinerPrm prm=new ObsFeatureConjoinerPrm();
  prm.includeUnsupportedFeatures=true;
  ObsFeatureConjoiner ofc=new ObsFeatureConjoiner(prm,fts);
  FgAndVars fgv=getLinearChainFgWithVarsLatent(true,ofc,obsFe);
  VarConfig trainConfig=new VarConfig();
  trainConfig.put(fgv.w0,0);
  trainConfig.put(fgv.w1,1);
  trainConfig.put(fgv.w2,0);
  trainConfig.put(fgv.t0,0);
  trainConfig.put(fgv.t1,1);
  trainConfig.put(fgv.t2,1);
  FgExampleMemoryStore data=new FgExampleMemoryStore();
  data.add(new LabeledFgExample(fgv.fg,trainConfig,obsFe,fts));
  ofc.init(data);
  FgModel model=new FgModel(ofc.getNumParams());
  model=train(model,data);
  System.out.println(fts);
  System.out.println(DoubleArrays.toString(FgModelTest.getParams(model),""String_Node_Str""));
  JUnitUtils.assertArrayEquals(new double[]{0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.31,0.31,-0.31,-0.31,-6.42,-6.52,10.24,2.69},FgModelTest.getParams(model),1e-2);
}","@Test public void testTrainWithLatentVars(){
  FactorTemplateList fts=new FactorTemplateList();
  ObsFeatureExtractor obsFe=new SimpleVCFeatureExtractor(fts);
  ObsFeatureConjoinerPrm prm=new ObsFeatureConjoinerPrm();
  prm.includeUnsupportedFeatures=true;
  ObsFeatureConjoiner ofc=new ObsFeatureConjoiner(prm,fts);
  FgAndVars fgv=getLinearChainFgWithVarsLatent(true,ofc,obsFe);
  VarConfig trainConfig=new VarConfig();
  trainConfig.put(fgv.w0,0);
  trainConfig.put(fgv.w1,1);
  trainConfig.put(fgv.w2,0);
  trainConfig.put(fgv.t0,0);
  trainConfig.put(fgv.t1,1);
  trainConfig.put(fgv.t2,1);
  FgExampleMemoryStore data=new FgExampleMemoryStore();
  data.add(new LabeledFgExample(fgv.fg,trainConfig,obsFe,fts));
  ofc.init(data);
  FgModel model=new FgModel(ofc.getNumParams());
  model=train(model,data);
  System.out.println(fts);
  System.out.println(DoubleArrays.toString(FgModelTest.getParams(model),""String_Node_Str""));
  JUnitUtils.assertArrayEquals(new double[]{-0.00,-0.00,-0.00,-0.00,0.01,0.01,0.01,0.01,-0.01,-0.01,-0.01,-0.01,-3.08,-3.08,-3.33,-3.33,5.25,5.25,1.16,1.16},FgModelTest.getParams(model),1e-2);
}",0.8842863574966231
131389,"@Test public void testSenseTrainAssignment() throws Exception {
  FactorTemplateList fts=new FactorTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  SimpleAnnoSentenceCollection simpleSents=new SimpleAnnoSentenceCollection();
  for (  CoNLL09Sentence s : sents) {
    s.normalizeRoleNames();
    simpleSents.add(s.toSimpleAnnoSentence(csPrm.useGoldSyntax));
  }
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(simpleSents);
  JointNlpFgExampleBuilderPrm prm=new JointNlpFgExampleBuilderPrm();
  prm.fePrm.srlFePrm.fePrm.biasOnly=true;
  prm.fgPrm.srlPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.srlPrm.predictSense=true;
  ObsFeatureConjoiner ofc=new ObsFeatureConjoiner(new ObsFeatureConjoinerPrm(),fts);
  JointNlpFgExamplesBuilder builder=new JointNlpFgExamplesBuilder(prm,ofc,cs);
  FgExampleList data=builder.getData(simpleSents);
  ofc.init(data);
  FgExample ex=data.get(0);
  VarConfig vc=ex.getGoldConfig();
  System.out.println(vc.toString().replace(""String_Node_Str"",""String_Node_Str""));
  assertEquals(18 + 1,vc.size());
  SrlGraph srlGraph=SrlDecoder.getSrlGraphFromVarConfig(vc,simpleSents.get(0).size());
  assertEquals(2,srlGraph.getPredAt(2).getPosition());
  assertEquals(""String_Node_Str"",srlGraph.getPredAt(2).getLabel());
}","@Test public void testSenseTrainAssignment() throws Exception {
  FactorTemplateList fts=new FactorTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  SimpleAnnoSentenceCollection simpleSents=new SimpleAnnoSentenceCollection();
  for (  CoNLL09Sentence s : sents) {
    s.normalizeRoleNames();
    simpleSents.add(s.toSimpleAnnoSentence(csPrm.useGoldSyntax));
  }
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(simpleSents);
  JointNlpFgExampleBuilderPrm prm=new JointNlpFgExampleBuilderPrm();
  prm.fePrm.srlFePrm.fePrm.biasOnly=true;
  prm.fgPrm.srlPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.srlPrm.predictSense=true;
  prm.fgPrm.srlPrm.predictPredPos=false;
  ObsFeatureConjoiner ofc=new ObsFeatureConjoiner(new ObsFeatureConjoinerPrm(),fts);
  JointNlpFgExamplesBuilder builder=new JointNlpFgExamplesBuilder(prm,ofc,cs);
  FgExampleList data=builder.getData(simpleSents);
  ofc.init(data);
  FgExample ex=data.get(0);
  VarConfig vc=ex.getGoldConfig();
  System.out.println(vc.toString().replace(""String_Node_Str"",""String_Node_Str""));
  assertEquals(18 + 1,vc.size());
  SrlGraph srlGraph=SrlDecoder.getSrlGraphFromVarConfig(vc,simpleSents.get(0).size());
  assertEquals(2,srlGraph.getPredAt(2).getPosition());
  assertEquals(""String_Node_Str"",srlGraph.getPredAt(2).getLabel());
}",0.9867613819825638
131390,"public static void getSrlTrainAssignment(SimpleAnnoSentence sent,JointNlpFactorGraph sfg,VarConfig vc,boolean predictSense,boolean predictPredPos){
  SrlGraph srlGraph=sent.getSrlGraph();
  if (srlGraph == null) {
    return;
  }
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      RoleVar roleVar=sfg.getRoleVar(i,j);
      if (roleVar != null && roleVar.getType() != VarType.LATENT) {
        vc.put(roleVar,""String_Node_Str"");
      }
    }
  }
  for (  SrlEdge edge : srlGraph.getEdges()) {
    int parent=edge.getPred().getPosition();
    int child=edge.getArg().getPosition();
    String roleName=edge.getLabel();
    RoleVar roleVar=sfg.getRoleVar(parent,child);
    if (roleVar != null && roleVar.getType() != VarType.LATENT) {
      int roleNameIdx=roleVar.getState(roleName);
      if (roleNameIdx == -1) {
        vc.put(roleVar,CorpusStatistics.UNKNOWN_ROLE);
      }
 else {
        vc.put(roleVar,roleNameIdx);
      }
    }
  }
  for (int i=0; i < sent.size(); i++) {
    SenseVar senseVar=sfg.getSenseVar(i);
    if (senseVar != null) {
      if (predictSense && predictPredPos) {
        if (predictPredPos && !sent.isKnownPred(i)) {
          vc.put(senseVar,""String_Node_Str"");
        }
 else {
          if (!tryPut(vc,senseVar,srlGraph.getPredAt(i).getLabel())) {
            if (!tryPut(vc,senseVar,CorpusStatistics.UNKNOWN_SENSE)) {
              vc.put(senseVar,0);
            }
          }
        }
      }
 else {
        if (sent.isKnownPred(i)) {
          vc.put(senseVar,CorpusStatistics.UNKNOWN_SENSE);
        }
 else {
          vc.put(senseVar,""String_Node_Str"");
        }
      }
    }
  }
}","public static void getSrlTrainAssignment(SimpleAnnoSentence sent,JointNlpFactorGraph sfg,VarConfig vc,boolean predictSense,boolean predictPredPos){
  SrlGraph srlGraph=sent.getSrlGraph();
  if (srlGraph == null) {
    return;
  }
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      RoleVar roleVar=sfg.getRoleVar(i,j);
      if (roleVar != null && roleVar.getType() != VarType.LATENT) {
        vc.put(roleVar,""String_Node_Str"");
      }
    }
  }
  for (  SrlEdge edge : srlGraph.getEdges()) {
    int parent=edge.getPred().getPosition();
    int child=edge.getArg().getPosition();
    String roleName=edge.getLabel();
    RoleVar roleVar=sfg.getRoleVar(parent,child);
    if (roleVar != null && roleVar.getType() != VarType.LATENT) {
      int roleNameIdx=roleVar.getState(roleName);
      if (roleNameIdx == -1) {
        vc.put(roleVar,CorpusStatistics.UNKNOWN_ROLE);
      }
 else {
        vc.put(roleVar,roleNameIdx);
      }
    }
  }
  for (int i=0; i < sent.size(); i++) {
    SenseVar senseVar=sfg.getSenseVar(i);
    if (senseVar != null) {
      if (predictSense) {
        if (predictPredPos && !sent.isKnownPred(i)) {
          vc.put(senseVar,""String_Node_Str"");
        }
 else {
          if (!tryPut(vc,senseVar,srlGraph.getPredAt(i).getLabel())) {
            if (!tryPut(vc,senseVar,CorpusStatistics.UNKNOWN_SENSE)) {
              vc.put(senseVar,0);
            }
          }
        }
      }
 else       if (predictPredPos) {
        if (sent.isKnownPred(i)) {
          vc.put(senseVar,CorpusStatistics.UNKNOWN_SENSE);
        }
 else {
          vc.put(senseVar,""String_Node_Str"");
        }
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
}",0.9590163934426228
131391,"public void testBinaryOperation(BinOp lambda){
  double x, y;
  x=1;
  y=1;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=11.11;
  y=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=-11.11;
  y=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=11.11;
  y=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=-11.11;
  y=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=11.11;
  x=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-11.11;
  x=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=11.11;
  x=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-11.11;
  x=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=0.11;
  y=0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=-0.11;
  y=0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=0.11;
  y=-0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=-0.11;
  y=-0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=0.11;
  x=0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-0.11;
  x=0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=0.11;
  x=-0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-0.11;
  x=-0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=Double.POSITIVE_INFINITY;
  y=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=Double.NEGATIVE_INFINITY;
  y=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=Double.POSITIVE_INFINITY;
  y=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=Double.NEGATIVE_INFINITY;
  y=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=Double.POSITIVE_INFINITY;
  x=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=Double.NEGATIVE_INFINITY;
  x=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=Double.POSITIVE_INFINITY;
  x=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=Double.NEGATIVE_INFINITY;
  x=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  for (int i=0; i < NUM_RANDS; i++) {
    x=Gaussian.nextDouble(0.0,1000);
    y=Gaussian.nextDouble(0.0,1000);
    assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-5);
  }
}","public void testBinaryOperation(BinOp lambda){
  double x, y;
  x=1;
  y=1;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=11.11;
  y=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=-11.11;
  y=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=11.11;
  y=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=-11.11;
  y=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=11.11;
  x=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-11.11;
  x=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=11.11;
  x=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-11.11;
  x=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  double abs=13.1313;
  y=abs;
  x=-abs;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=abs;
  x=abs;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-abs;
  x=abs;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-abs;
  x=-abs;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=0.11;
  y=0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=-0.11;
  y=0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=0.11;
  y=-0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=-0.11;
  y=-0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=0.11;
  x=0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-0.11;
  x=0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=0.11;
  x=-0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=-0.11;
  x=-0.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=Double.POSITIVE_INFINITY;
  y=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=Double.NEGATIVE_INFINITY;
  y=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=Double.POSITIVE_INFINITY;
  y=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  x=Double.NEGATIVE_INFINITY;
  y=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=Double.POSITIVE_INFINITY;
  x=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=Double.NEGATIVE_INFINITY;
  x=44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=Double.POSITIVE_INFINITY;
  x=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  y=Double.NEGATIVE_INFINITY;
  x=-44.44;
  assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-13);
  for (int i=0; i < NUM_RANDS; i++) {
    x=Gaussian.nextDouble(0.0,1000);
    y=Gaussian.nextDouble(0.0,1000);
    assertEquals(compute(lambda,x,y,sReal),compute(lambda,x,y,sLog),1e-5);
  }
}",0.9343114371457152
131392,"public SimpleAnnoSentenceCollection toSentences(Communication communication){
  SimpleAnnoSentenceCollection annoSents=new SimpleAnnoSentenceCollection();
  addSentences(communication,annoSents);
  return annoSents;
}","public SimpleAnnoSentenceCollection toSentences(Communication communication){
  SimpleAnnoSentenceCollection annoSents=new SimpleAnnoSentenceCollection();
  addSentences(communication,annoSents);
  annoSents.setSourceSents(communication);
  return annoSents;
}",0.8972746331236897
131393,"/** 
 * Gets a deep copy of these sentences with some annotation layers removed.
 * @param removeAts The annotation layers to remove.
 * @return The filtered deep copy.
 */
public SimpleAnnoSentenceCollection getWithAtsRemoved(List<AT> removeAts){
  SimpleAnnoSentenceCollection newSents=new SimpleAnnoSentenceCollection();
  for (  SimpleAnnoSentence sent : this) {
    SimpleAnnoSentence newSent=new SimpleAnnoSentence(sent);
    newSent.removeAts(removeAts);
    newSents.add(newSent);
  }
  return newSents;
}","/** 
 * Gets a deep copy of these sentences with some annotation layers removed.
 * @param removeAts The annotation layers to remove.
 * @return The filtered deep copy.
 */
public SimpleAnnoSentenceCollection getWithAtsRemoved(List<AT> removeAts){
  SimpleAnnoSentenceCollection newSents=new SimpleAnnoSentenceCollection();
  newSents.sourceSents=this.sourceSents;
  for (  SimpleAnnoSentence sent : this) {
    SimpleAnnoSentence newSent=new SimpleAnnoSentence(sent);
    newSent.removeAts(removeAts);
    newSents.add(newSent);
  }
  return newSents;
}",0.9615745079662604
131394,"@Override public void init(FgExample ex){
  FactorGraph fg=ex.getFgLatPred();
  this.feats=new FeatureVector[fg.getNumFactors()][];
  for (int a=0; a < fg.getNumFactors(); a++) {
    Factor f=fg.getFactor(a);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof DenseFactor) {
      int numConfigs=f.getVars().calcNumConfigs();
      numConfigs=(numConfigs == 0) ? 1 : numConfigs;
      feats[a]=new FeatureVector[numConfigs];
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
}","@Override public void init(FgExample ex){
  this.featExtractor.init(ex);
  FactorGraph fg=ex.getFgLatPred();
  this.feats=new FeatureVector[fg.getNumFactors()][];
  for (int a=0; a < fg.getNumFactors(); a++) {
    Factor f=fg.getFactor(a);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof DenseFactor) {
      int numConfigs=f.getVars().calcNumConfigs();
      numConfigs=(numConfigs == 0) ? 1 : numConfigs;
      feats[a]=new FeatureVector[numConfigs];
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
}",0.971894832275612
131395,"/** 
 * Creates a new CoNLL09Sentence with both columns set for each field (i.e. PLEMMA and LEMMA are both set from the values on the SimpleAnnoSentence). The reason for setting both is that the CoNLL-2009 evaluation script uses the ""gold"" columns for evaluation, but we might want to utilize the predictions in some downstream task.
 */
public static CoNLL09Sentence fromSimpleAnnoSentence(SimpleAnnoSentence sent){
  List<CoNLL09Token> toks=new ArrayList<CoNLL09Token>();
  for (int i=0; i < sent.size(); i++) {
    CoNLL09Token tok=new CoNLL09Token();
    tok.setId(i + 1);
    tok.setForm(sent.getWord(i));
    tok.setPlemma(sent.getLemma(i));
    tok.setPpos(sent.getPosTag(i));
    tok.setPfeat(sent.getFeats(i));
    tok.setPhead(sent.getParent(i) + 1);
    tok.setPdeprel(sent.getDeprel(i));
    tok.setLemma(sent.getLemma(i));
    tok.setPos(sent.getPosTag(i));
    tok.setFeat(sent.getFeats(i));
    tok.setHead(sent.getParent(i) + 1);
    tok.setDeprel(sent.getDeprel(i));
    toks.add(tok);
  }
  CoNLL09Sentence updatedSentence=new CoNLL09Sentence(toks);
  updatedSentence.setColsFromSrlGraph(sent.getSrlGraph(),false,true);
  return updatedSentence;
}","/** 
 * Creates a new CoNLL09Sentence with both columns set for each field (i.e. PLEMMA and LEMMA are both set from the values on the SimpleAnnoSentence). The reason for setting both is that the CoNLL-2009 evaluation script uses the ""gold"" columns for evaluation, but we might want to utilize the predictions in some downstream task.
 */
public static CoNLL09Sentence fromSimpleAnnoSentence(SimpleAnnoSentence sent){
  List<CoNLL09Token> toks=new ArrayList<CoNLL09Token>();
  for (int i=0; i < sent.size(); i++) {
    CoNLL09Token tok=new CoNLL09Token();
    tok.setId(i + 1);
    tok.setForm(sent.getWord(i));
    tok.setPlemma(sent.getLemma(i));
    tok.setPpos(sent.getPosTag(i));
    if (sent.getFeats() != null) {
      tok.setPfeat(sent.getFeats(i));
    }
    tok.setPhead(sent.getParent(i) + 1);
    tok.setPdeprel(sent.getDeprel(i));
    tok.setLemma(sent.getLemma(i));
    tok.setPos(sent.getPosTag(i));
    tok.setFeat(sent.getFeats(i));
    tok.setHead(sent.getParent(i) + 1);
    tok.setDeprel(sent.getDeprel(i));
    toks.add(tok);
  }
  CoNLL09Sentence updatedSentence=new CoNLL09Sentence(toks);
  updatedSentence.setColsFromSrlGraph(sent.getSrlGraph(),false,true);
  return updatedSentence;
}",0.9818794774546988
131396,"/** 
 * Creates a new CoNLLXSentence with all columns set for each field.
 */
public static CoNLLXSentence fromSimpleAnnoSentence(SimpleAnnoSentence sent){
  List<CoNLLXToken> toks=new ArrayList<CoNLLXToken>();
  for (int i=0; i < sent.size(); i++) {
    CoNLLXToken tok=new CoNLLXToken();
    tok.setId(i + 1);
    tok.setForm(sent.getWord(i));
    tok.setLemma(sent.getLemma(i));
    tok.setCpostag(sent.getCposTag(i));
    tok.setPostag(sent.getPosTag(i));
    tok.setFeats(sent.getFeats(i));
    tok.setHead(sent.getParent(i) + 1);
    tok.setPhead(sent.getParent(i) + 1);
    tok.setDeprel(sent.getDeprel(i));
    tok.setPdeprel(sent.getDeprel(i));
    toks.add(tok);
  }
  CoNLLXSentence updatedSentence=new CoNLLXSentence(toks);
  return updatedSentence;
}","/** 
 * Creates a new CoNLLXSentence with all columns set for each field.
 */
public static CoNLLXSentence fromSimpleAnnoSentence(SimpleAnnoSentence sent){
  List<CoNLLXToken> toks=new ArrayList<CoNLLXToken>();
  for (int i=0; i < sent.size(); i++) {
    CoNLLXToken tok=new CoNLLXToken();
    tok.setId(i + 1);
    tok.setForm(sent.getWord(i));
    tok.setLemma(sent.getLemma(i));
    tok.setCpostag(sent.getCposTag(i));
    tok.setPostag(sent.getPosTag(i));
    if (sent.getFeats() != null) {
      tok.setFeats(sent.getFeats(i));
    }
    tok.setHead(sent.getParent(i) + 1);
    tok.setPhead(sent.getParent(i) + 1);
    tok.setDeprel(sent.getDeprel(i));
    tok.setPdeprel(sent.getDeprel(i));
    toks.add(tok);
  }
  CoNLLXSentence updatedSentence=new CoNLLXSentence(toks);
  return updatedSentence;
}",0.9534735500318674
131397,"@Override public double getExpectedLogBelief(FgNode parent,Messages[] msgs,boolean logDomain){
  if (!warnedOnce) {
    log.warn(""String_Node_Str"");
    warnedOnce=true;
  }
  if (true) {
    return -10000;
  }
  double[] root=new double[n];
  double[][] child=new double[n][n];
  getLogOddsRatios(parent,msgs,logDomain,root,child);
  double logPi=getProductOfAllFalseMessages(parent,msgs,logDomain);
  SemiringExt s=new LogPosNegSemiring();
  Pair<FirstOrderDepParseHypergraph,Scores> pair=HyperDepParser.insideAlgorithmEntropyFoe(root,child);
  FirstOrderDepParseHypergraph graph=pair.get1();
  Scores scores=pair.get2();
  int rt=graph.getRoot().getId();
  double logZ=scores.beta[rt];
  double logRbar=scores.betaFoe[rt];
  double logPartition=logPi + logZ;
  double expectation=logPi - logPartition + FastMath.exp(logRbar - logZ);
  if (Double.isNaN(expectation)) {
    log.warn(""String_Node_Str"");
    return 0.0;
  }
  return expectation;
}","@Override public double getExpectedLogBelief(FgNode parent,Messages[] msgs,boolean logDomain){
}",0.1840843720038351
131398,"@Test public void testResultingMarginalsLogProb(){
  boolean logDomain=true;
  testResultMarginalsHelper(logDomain);
}","@Test public void testResultingMarginalsLogProb(){
  boolean logDomain=true;
  testResultMarginalsHelper(logDomain,false);
  testResultMarginalsHelper(logDomain,true);
}",0.8222996515679443
131399,"@Test public void testPartitionWithAdditionalVariable(){
  boolean logDomain=false;
  double[] root=new double[]{1,2};
  double[][] child=new double[][]{{0,3},{4,0}};
  FactorGraph fg=new FactorGraph();
  int n=root.length;
  ProjDepTreeFactor treeFac=new ProjDepTreeFactor(n,VarType.PREDICTED);
  treeFac.updateFromModel(null,logDomain);
  LinkVar[] rootVars=treeFac.getRootVars();
  LinkVar[][] childVars=treeFac.getChildVars();
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        ExplicitFactor f;
        if (i == -1) {
          f=new ExplicitFactor(new VarSet(rootVars[j]));
          f.setValue(LinkVar.TRUE,root[j]);
          f.setValue(LinkVar.FALSE,1.0);
        }
 else {
          f=new ExplicitFactor(new VarSet(childVars[i][j]));
          f.setValue(LinkVar.TRUE,child[i][j]);
          f.setValue(LinkVar.FALSE,1.0);
        }
        if (logDomain) {
          f.convertRealToLog();
        }
        fg.addFactor(f);
      }
    }
  }
  fg.addFactor(treeFac);
  Var roleVar=new Var(VarType.PREDICTED,2,""String_Node_Str"",Lists.getList(""String_Node_Str"",""String_Node_Str""));
  ExplicitFactor roleFac=new ExplicitFactor(new VarSet(roleVar,childVars[0][1]));
  roleFac.setValue(0,2);
  roleFac.setValue(1,3);
  roleFac.setValue(2,5);
  roleFac.setValue(3,7);
  System.out.println(roleFac);
  if (logDomain) {
    roleFac.convertRealToLog();
  }
  fg.addFactor(roleFac);
  BeliefPropagationPrm prm=new BeliefPropagationPrm();
  prm.maxIterations=1;
  prm.logDomain=logDomain;
  prm.schedule=BpScheduleType.TREE_LIKE;
  prm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  prm.normalizeMessages=false;
  BeliefPropagation bp=new BeliefPropagation(fg,prm);
  bp.run();
  BfsBpSchedule schedule=new BfsBpSchedule(fg);
  System.out.println();
  for (  FgEdge edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        System.out.format(""String_Node_Str"",i,j,getExpectedCount(bp,rootVars,childVars,logDomain,i,j));
      }
    }
  }
  double Z=3 * 3 + 3 * 7 + 8 * 2 + 8 * 5;
  assertEquals(Z,logDomain ? FastMath.exp(bp.getPartition()) : bp.getPartition(),1e-3);
  assertEquals((3 * 3 + 3 * 7) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,-1,0),1e-3);
  assertEquals((8 * 2 + 8 * 5) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,1,0),1e-3);
  BruteForceInferencer bf=new BruteForceInferencer(fg,logDomain);
  bf.run();
  BeliefPropagationTest.assertEqualMarginals(fg,bf,bp);
}","@Test public void testPartitionWithAdditionalVariable(){
  testPartitionWithAdditionalVariableHelper(false,false);
  testPartitionWithAdditionalVariableHelper(true,false);
  testPartitionWithAdditionalVariableHelper(true,true);
  testPartitionWithAdditionalVariableHelper(false,true);
}",0.042149631190727
131400,"private void testResultMarginalsHelper(boolean logDomain){
  double[] root=new double[]{1,2,3};
  double[][] child=new double[][]{{0,4,5},{6,0,7},{8,9,0}};
  FactorGraph fg=new FactorGraph();
  int n=root.length;
  ProjDepTreeFactor treeFac=new ProjDepTreeFactor(n,VarType.PREDICTED);
  treeFac.updateFromModel(null,logDomain);
  LinkVar[] rootVars=treeFac.getRootVars();
  LinkVar[][] childVars=treeFac.getChildVars();
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        ExplicitFactor f;
        if (i == -1) {
          f=new ExplicitFactor(new VarSet(rootVars[j]));
          f.setValue(LinkVar.TRUE,root[j]);
          f.setValue(LinkVar.FALSE,1.0);
        }
 else {
          f=new ExplicitFactor(new VarSet(childVars[i][j]));
          f.setValue(LinkVar.TRUE,child[i][j]);
          f.setValue(LinkVar.FALSE,1.0);
        }
        if (logDomain) {
          f.convertRealToLog();
        }
        fg.addFactor(f);
      }
    }
  }
  fg.addFactor(treeFac);
  BeliefPropagationPrm prm=new BeliefPropagationPrm();
  prm.maxIterations=1;
  prm.logDomain=logDomain;
  prm.schedule=BpScheduleType.TREE_LIKE;
  prm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  prm.normalizeMessages=true;
  BeliefPropagation bp=new BeliefPropagation(fg,prm);
  bp.run();
  BfsBpSchedule schedule=new BfsBpSchedule(fg);
  System.out.println();
  for (  FgEdge edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        System.out.format(""String_Node_Str"",i,j,getExpectedCount(bp,rootVars,childVars,logDomain,i,j));
      }
    }
  }
  double Z=45 + 28 + 20+ 84+ 162+ 216+ 96;
  assertEquals((28 + 84) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,1,2),1e-3);
  assertEquals((45 + 162 + 216) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,2,1),1e-3);
  assertEquals((28 + 20 + 96) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,0,1),1e-3);
  assertEquals((96 + 216) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,2,0),1e-3);
  assertEquals((45 + 28 + 20) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,-1,0),1e-13);
  assertEquals((162 + 216 + 96) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,-1,2),1e-3);
  double[] trees=new double[]{45,28,20,84,162,216,96};
  double expectedRbar=0;
  for (int t=0; t < trees.length; t++) {
    expectedRbar+=trees[t] * FastMath.log(trees[t]);
  }
  System.out.println(""String_Node_Str"" + expectedRbar);
  assertEquals(45 + 28 + 20+ 84+ 162+ 216+ 96,logDomain ? FastMath.exp(bp.getPartition()) : bp.getPartition(),1e-3);
  BruteForceInferencer bf=new BruteForceInferencer(fg,logDomain);
  bf.run();
  BeliefPropagationTest.assertEqualMarginals(fg,bf,bp,1e-10);
}","private void testResultMarginalsHelper(boolean logDomain,boolean normalizeMessages){
  double[] root=new double[]{1,2,3};
  double[][] child=new double[][]{{0,4,5},{6,0,7},{8,9,0}};
  FactorGraph fg=new FactorGraph();
  int n=root.length;
  ProjDepTreeFactor treeFac=new ProjDepTreeFactor(n,VarType.PREDICTED);
  treeFac.updateFromModel(null,logDomain);
  LinkVar[] rootVars=treeFac.getRootVars();
  LinkVar[][] childVars=treeFac.getChildVars();
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        ExplicitFactor f;
        if (i == -1) {
          f=new ExplicitFactor(new VarSet(rootVars[j]));
          f.setValue(LinkVar.TRUE,root[j]);
          f.setValue(LinkVar.FALSE,1.0);
        }
 else {
          f=new ExplicitFactor(new VarSet(childVars[i][j]));
          f.setValue(LinkVar.TRUE,child[i][j]);
          f.setValue(LinkVar.FALSE,1.0);
        }
        if (logDomain) {
          f.convertRealToLog();
        }
        fg.addFactor(f);
      }
    }
  }
  fg.addFactor(treeFac);
  BeliefPropagationPrm prm=new BeliefPropagationPrm();
  prm.maxIterations=1;
  prm.logDomain=logDomain;
  prm.schedule=BpScheduleType.TREE_LIKE;
  prm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  prm.normalizeMessages=normalizeMessages;
  BeliefPropagation bp=new BeliefPropagation(fg,prm);
  bp.run();
  BfsBpSchedule schedule=new BfsBpSchedule(fg);
  System.out.println();
  for (  FgEdge edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i != j) {
        System.out.format(""String_Node_Str"",i,j,getExpectedCount(bp,rootVars,childVars,logDomain,i,j));
      }
    }
  }
  double Z=45 + 28 + 20+ 84+ 162+ 216+ 96;
  assertEquals((28 + 84) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,1,2),1e-3);
  assertEquals((45 + 162 + 216) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,2,1),1e-3);
  assertEquals((28 + 20 + 96) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,0,1),1e-3);
  assertEquals((96 + 216) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,2,0),1e-3);
  assertEquals((45 + 28 + 20) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,-1,0),1e-13);
  assertEquals((162 + 216 + 96) / Z,getExpectedCount(bp,rootVars,childVars,logDomain,-1,2),1e-3);
  double[] trees=new double[]{45,28,20,84,162,216,96};
  double expectedRbar=0;
  for (int t=0; t < trees.length; t++) {
    expectedRbar+=trees[t] * FastMath.log(trees[t]);
  }
  System.out.println(""String_Node_Str"" + expectedRbar);
  assertEquals(45 + 28 + 20+ 84+ 162+ 216+ 96,logDomain ? FastMath.exp(bp.getPartition()) : bp.getPartition(),1e-3);
  BruteForceInferencer bf=new BruteForceInferencer(fg,logDomain);
  bf.run();
  BeliefPropagationTest.assertEqualMarginals(fg,bf,bp,1e-10);
}",0.9916295636687444
131401,"@Test public void testResultingMarginalsProb(){
  boolean logDomain=false;
  testResultMarginalsHelper(logDomain);
}","@Test public void testResultingMarginalsProb(){
  boolean logDomain=false;
  testResultMarginalsHelper(logDomain,false);
  testResultMarginalsHelper(logDomain,true);
}",0.8197879858657244
131402,"/** 
 * Runs the inside algorithm on a hypergraph with the first-order expectation semiring.
 * @param graph The hypergraph.
 * @return The beta value for each Hypernode. Where beta[i] is the insidescore for the i'th node in the Hypergraph, graph.getNodes().get(i).
 */
public static void insideAlgorithmFirstOrderExpect(final Hypergraph graph,final HyperpotentialFoe w,final SemiringExt s,final Scores scores){
  final int n=graph.getNodes().size();
  final double[] beta=new double[n];
  final double[] betaFoe=new double[n];
  Arrays.fill(beta,s.zero());
  Arrays.fill(betaFoe,s.zero());
  graph.applyTopoSort(new HyperedgeFn(){
    @Override public void apply(    Hyperedge e){
      double prod=s.one();
      double prodFoe=s.zero();
      for (      Hypernode jNode : e.getTailNodes()) {
        int j=jNode.getId();
        double p1=prod;
        double p2=beta[j];
        double r1=prodFoe;
        double r2=betaFoe[j];
        prod=s.times(p1,p2);
        prodFoe=s.plus(s.times(p1,r2),s.times(p2,r1));
      }
      double p1=prod;
      double p2=w.getScore(e,s);
      double r1=prodFoe;
      double r2=w.getScoreFoe(e,s);
      prod=s.times(p1,p2);
      prodFoe=s.plus(s.times(p1,r2),s.times(p2,r1));
      int i=e.getHeadNode().getId();
      beta[i]=s.plus(beta[i],prod);
      betaFoe[i]=s.plus(betaFoe[i],prodFoe);
    }
  }
);
  scores.beta=beta;
  scores.betaFoe=betaFoe;
}","/** 
 * Runs the inside algorithm on a hypergraph with the first-order expectation semiring.
 * @param graph The hypergraph.
 * @return The beta value for each Hypernode. Where beta[i] is the insidescore for the i'th node in the Hypergraph, graph.getNodes().get(i).
 */
public static void insideAlgorithmFirstOrderExpect(final Hypergraph graph,final HyperpotentialFoe w,final SemiringExt s,final Scores scores){
}",0.4561016013252347
131403,"@Override public double getScoreFoe(Hyperedge e,SemiringExt s){
  double p_e=w.getScore(e,s);
  if (p_e == s.zero()) {
    return p_e;
  }
  return s.times(p_e,s.fromReal(FastMath.log(s.toReal(p_e))));
}","@Override public double getScoreFoe(Hyperedge e,SemiringExt s){
}",0.4850746268656716
131404,"@Override public double getExpectedLogBelief(FgNode parent,Messages[] msgs,boolean logDomain){
  double[] root=new double[n];
  double[][] child=new double[n][n];
  getLogOddsRatios(parent,msgs,logDomain,root,child);
  double logPi=getProductOfAllFalseMessages(parent,msgs,logDomain);
  SemiringExt s=new LogPosNegSemiring();
  Pair<FirstOrderDepParseHypergraph,Scores> pair=HyperDepParser.insideAlgorithmEntropyFoe(root,child);
  FirstOrderDepParseHypergraph graph=pair.get1();
  Scores scores=pair.get2();
  int rt=graph.getRoot().getId();
  double logZ=scores.beta[rt];
  double logRbar=scores.betaFoe[rt];
  double logPartition=logPi + logZ;
  double expectation=logPi - logPartition + FastMath.exp(logRbar - logZ);
  if (Double.isNaN(expectation)) {
    log.warn(""String_Node_Str"");
    return 0.0;
  }
  return expectation;
}","@Override public double getExpectedLogBelief(FgNode parent,Messages[] msgs,boolean logDomain){
  if (!warnedOnce) {
    log.warn(""String_Node_Str"");
    warnedOnce=true;
  }
  if (true) {
    return -10000;
  }
  double[] root=new double[n];
  double[][] child=new double[n][n];
  getLogOddsRatios(parent,msgs,logDomain,root,child);
  double logPi=getProductOfAllFalseMessages(parent,msgs,logDomain);
  SemiringExt s=new LogPosNegSemiring();
  Pair<FirstOrderDepParseHypergraph,Scores> pair=HyperDepParser.insideAlgorithmEntropyFoe(root,child);
  FirstOrderDepParseHypergraph graph=pair.get1();
  Scores scores=pair.get2();
  int rt=graph.getRoot().getId();
  double logZ=scores.beta[rt];
  double logRbar=scores.betaFoe[rt];
  double logPartition=logPi + logZ;
  double expectation=logPi - logPartition + FastMath.exp(logRbar - logZ);
  if (Double.isNaN(expectation)) {
    log.warn(""String_Node_Str"");
    return 0.0;
  }
  return expectation;
}",0.934758155230596
131405,"/** 
 * Computes the adjoints of the inside scores. INPUT: scores.alpha, scores.beta, scores.marginalAdj. OUTPUT: scores.betaAdj.
 * @param graph The hypergraph
 * @param w The potential function.
 * @param s The semiring.
 * @param scores Input and output struct.
 */
public static void insideAdjoint(final Hypergraph graph,final Hyperpotential w,final SemiringExt s,final Scores scores){
  final int n=graph.getNodes().size();
  final double[] alpha=scores.alpha;
  final double[] beta=scores.beta;
  final double[] marginalAdj=scores.marginalAdj;
  final double[] alphaAdj=scores.alphaAdj;
  final double[] betaAdj=new double[n];
  int root=graph.getRoot().getId();
  Arrays.fill(betaAdj,s.zero());
  for (  Hypernode jNode : graph.getNodes()) {
    int j=jNode.getId();
    if (j == root) {
      continue;
    }
    double prod=s.times(marginalAdj[j],alpha[j]);
    prod=s.times(prod,beta[j]);
    prod=s.divide(prod,s.times(beta[root],beta[root]));
    betaAdj[root]=s.minus(betaAdj[root],prod);
  }
  for (  Hypernode jNode : graph.getNodes()) {
    int j=jNode.getId();
    if (j == root) {
      continue;
    }
    double prod=s.divide(s.times(marginalAdj[j],alpha[j]),beta[root]);
    betaAdj[j]=s.plus(betaAdj[j],prod);
  }
  graph.applyRevTopoSort(new HyperedgeFn(){
    @Override public void apply(    Hyperedge e){
      int i=e.getHeadNode().getId();
      for (      Hypernode jNode : e.getTailNodes()) {
        int j=jNode.getId();
        double prod=s.times(betaAdj[i],w.getScore(e));
        for (        Hypernode kNode : e.getTailNodes()) {
          int k=kNode.getId();
          if (j == k) {
            continue;
          }
          prod=s.times(prod,beta[k]);
        }
        betaAdj[j]=s.plus(betaAdj[j],prod);
        for (        Hypernode kNode : e.getTailNodes()) {
          int k=kNode.getId();
          if (k == j) {
            continue;
          }
          ;
          prod=s.times(marginalAdj[k],w.getScore(e));
          prod=s.times(prod,alpha[i]);
          for (          Hypernode lNode : e.getTailNodes()) {
            int l=lNode.getId();
            prod=s.times(beta[l],prod);
          }
          betaAdj[j]=s.plus(betaAdj[j],prod);
        }
      }
    }
  }
);
  scores.betaAdj=betaAdj;
}","/** 
 * Computes the adjoints of the inside scores. INPUT: scores.alpha, scores.beta, scores.marginalAdj. OUTPUT: scores.betaAdj.
 * @param graph The hypergraph
 * @param w The potential function.
 * @param s The semiring.
 * @param scores Input and output struct.
 */
public static void insideAdjoint(final Hypergraph graph,final Hyperpotential w,final SemiringExt s,final Scores scores){
  final int n=graph.getNodes().size();
  final double[] alpha=scores.alpha;
  final double[] beta=scores.beta;
  final double[] marginalAdj=scores.marginalAdj;
  final double[] alphaAdj=scores.alphaAdj;
  final double[] betaAdj=new double[n];
  int root=graph.getRoot().getId();
  Arrays.fill(betaAdj,s.zero());
  for (  Hypernode jNode : graph.getNodes()) {
    int j=jNode.getId();
    if (j == root) {
      continue;
    }
    double prod=s.times(marginalAdj[j],alpha[j]);
    prod=s.times(prod,beta[j]);
    prod=s.divide(prod,s.times(beta[root],beta[root]));
    betaAdj[root]=s.minus(betaAdj[root],prod);
  }
  for (  Hypernode jNode : graph.getNodes()) {
    int j=jNode.getId();
    if (j == root) {
      continue;
    }
    double prod=s.divide(s.times(marginalAdj[j],alpha[j]),beta[root]);
    betaAdj[j]=s.plus(betaAdj[j],prod);
  }
  graph.applyRevTopoSort(new HyperedgeFn(){
    @Override public void apply(    Hyperedge e){
      int i=e.getHeadNode().getId();
      for (      Hypernode jNode : e.getTailNodes()) {
        int j=jNode.getId();
        double prod=s.times(betaAdj[i],w.getScore(e,s));
        for (        Hypernode kNode : e.getTailNodes()) {
          int k=kNode.getId();
          if (j == k) {
            continue;
          }
          prod=s.times(prod,beta[k]);
        }
        betaAdj[j]=s.plus(betaAdj[j],prod);
        for (        Hypernode kNode : e.getTailNodes()) {
          int k=kNode.getId();
          if (k == j) {
            continue;
          }
          ;
          prod=s.times(alphaAdj[k],w.getScore(e,s));
          prod=s.times(prod,alpha[i]);
          for (          Hypernode lNode : e.getTailNodes()) {
            int l=lNode.getId();
            if (l == j || l == k) {
              continue;
            }
            prod=s.times(prod,beta[l]);
          }
          betaAdj[j]=s.plus(betaAdj[j],prod);
        }
      }
    }
  }
);
  scores.betaAdj=betaAdj;
}",0.9753113393052216
131406,"public static void backward(final Hypergraph graph,final Hyperpotential w,final SemiringExt s,final Scores scores){
  outsideAdjoint(graph,w,s,scores);
  insideAdjoint(graph,w,s,scores);
  weightAdjoint(graph,w,s,scores);
}","public static void backward(final Hypergraph graph,final Hyperpotential w,final SemiringExt s,final Scores scores){
  if (scores.marginalAdj == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  outsideAdjoint(graph,w,s,scores);
  insideAdjoint(graph,w,s,scores);
  weightAdjoint(graph,w,s,scores);
}",0.8191881918819188
131407,"/** 
 * Computes the adjoints of the outside scores. INPUT: scores.beta, scores.marginalAdj. OUTPUT: scores.alphaAdj.
 * @param graph The hypergraph
 * @param w The potential function.
 * @param s The semiring.
 * @param scores Input and output struct.
 */
public static void outsideAdjoint(final Hypergraph graph,final Hyperpotential w,final SemiringExt s,final Scores scores){
  final int n=graph.getNodes().size();
  final double[] marginalAdj=scores.marginalAdj;
  final double[] beta=scores.beta;
  final double[] alphaAdj=new double[n];
  Arrays.fill(alphaAdj,s.zero());
  for (  Hypernode iNode : graph.getNodes()) {
    int i=iNode.getId();
    double prod=s.times(marginalAdj[i],beta[i]);
    prod=s.divide(prod,beta[graph.getRoot().getId()]);
    alphaAdj[i]=s.plus(alphaAdj[i],prod);
  }
  graph.applyTopoSort(new HyperedgeFn(){
    @Override public void apply(    Hyperedge e){
      int i=e.getHeadNode().getId();
      for (      Hypernode j : e.getTailNodes()) {
        double prod=s.times(alphaAdj[j.getId()],w.getScore(e));
        for (        Hypernode k : e.getTailNodes()) {
          if (k == j) {
            continue;
          }
          prod=s.times(prod,beta[k.getId()]);
        }
        alphaAdj[i]=s.plus(alphaAdj[i],prod);
      }
    }
  }
);
  scores.alphaAdj=alphaAdj;
}","/** 
 * Computes the adjoints of the outside scores. INPUT: scores.beta, scores.marginalAdj. OUTPUT: scores.alphaAdj.
 * @param graph The hypergraph
 * @param w The potential function.
 * @param s The semiring.
 * @param scores Input and output struct.
 */
public static void outsideAdjoint(final Hypergraph graph,final Hyperpotential w,final SemiringExt s,final Scores scores){
  final int n=graph.getNodes().size();
  final double[] marginalAdj=scores.marginalAdj;
  final double[] beta=scores.beta;
  final double[] alphaAdj=new double[n];
  Arrays.fill(alphaAdj,s.zero());
  for (  Hypernode iNode : graph.getNodes()) {
    int i=iNode.getId();
    double prod=s.times(marginalAdj[i],beta[i]);
    prod=s.divide(prod,beta[graph.getRoot().getId()]);
    alphaAdj[i]=s.plus(alphaAdj[i],prod);
  }
  graph.applyTopoSort(new HyperedgeFn(){
    @Override public void apply(    Hyperedge e){
      int i=e.getHeadNode().getId();
      for (      Hypernode j : e.getTailNodes()) {
        double prod=s.times(alphaAdj[j.getId()],w.getScore(e,s));
        for (        Hypernode k : e.getTailNodes()) {
          if (k == j) {
            continue;
          }
          prod=s.times(prod,beta[k.getId()]);
        }
        alphaAdj[i]=s.plus(alphaAdj[i],prod);
      }
    }
  }
);
  scores.alphaAdj=alphaAdj;
}",0.9992354740061162
131408,"public void updateFromModel(FgModel model,boolean logDomain){
}","public void updateFromModel(FgModel model,boolean logDomain){
  this.logDomain=logDomain;
}",0.8181818181818182
131409,"@Override public double getUnormalizedScore(int configId){
  return 1.0;
}","@Override public double getUnormalizedScore(int configId){
  if (logDomain) {
    return 0.0;
  }
 else {
    return 1.0;
  }
}",0.736318407960199
131410,"@Override protected void createMessages(FgNode parent,Messages[] msgs,boolean logDomain){
  assert(this == parent.getFactor());
  double[] root=new double[n];
  double[][] child=new double[n][n];
  DoubleArrays.fill(root,Double.NEGATIVE_INFINITY);
  DoubleArrays.fill(child,Double.NEGATIVE_INFINITY);
  for (  FgEdge inEdge : parent.getInEdges()) {
    LinkVar link=(LinkVar)inEdge.getVar();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    double oddsRatio;
    if (logDomain) {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) - inMsg.getValue(LinkVar.FALSE);
    }
 else {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) / inMsg.getValue(LinkVar.FALSE);
      oddsRatio=FastMath.log(oddsRatio);
    }
    if (link.getParent() == -1) {
      root[link.getChild()]=oddsRatio;
    }
 else {
      child[link.getParent()][link.getChild()]=oddsRatio;
    }
  }
  DepIoChart chart=ProjectiveDependencyParser.insideOutsideAlgorithm(root,child);
  double pi=logDomain ? 0.0 : 1.0;
  for (  FgEdge inEdge : parent.getInEdges()) {
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      pi+=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      pi*=inMsg.getValue(LinkVar.FALSE);
    }
  }
  double partition=logDomain ? pi + chart.getLogPartitionFunction() : pi * FastMath.exp(chart.getLogPartitionFunction());
  if (log.isTraceEnabled()) {
    log.trace(String.format(""String_Node_Str"",partition));
  }
  for (  FgEdge outEdge : parent.getOutEdges()) {
    LinkVar link=(LinkVar)outEdge.getVar();
    double beliefTrue;
    double beliefFalse;
    if (logDomain) {
      beliefTrue=pi + chart.getLogSumOfPotentials(link.getParent(),link.getChild());
      if (partition < beliefTrue) {
        beliefFalse=FastMath.log(Math.abs(partition - beliefTrue));
      }
 else {
        beliefFalse=FastMath.logSubtract(partition,beliefTrue);
      }
    }
 else {
      beliefTrue=pi * FastMath.exp(chart.getLogSumOfPotentials(link.getParent(),link.getChild()));
      beliefFalse=partition - beliefTrue;
    }
    if (log.isTraceEnabled()) {
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefTrue));
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefFalse));
    }
    FgEdge inEdge=outEdge.getOpposing();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      beliefTrue-=inMsg.getValue(LinkVar.TRUE);
      beliefFalse-=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      beliefTrue/=inMsg.getValue(LinkVar.TRUE);
      beliefFalse/=inMsg.getValue(LinkVar.FALSE);
    }
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.FALSE,beliefFalse);
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.TRUE,beliefTrue);
  }
}","@Override protected void createMessages(FgNode parent,Messages[] msgs,boolean logDomain){
}",0.0645619013834693
131411,"private List<Integer> getPositionList(PositionList pl,LocalObservations local){
  int pidx=local.getPidx();
  int cidx=local.getCidx();
  FeaturizedToken tok;
  FeaturizedTokenPair pair;
switch (pl) {
case CHILDREN_P:
    tok=getFeatTok(pidx);
  return tok.getChildren();
case NO_FAR_CHILDREN_P:
tok=getFeatTok(pidx);
return tok.getNoFarChildren();
case CHILDREN_C:
tok=getFeatTok(cidx);
return tok.getChildren();
case NO_FAR_CHILDREN_C:
tok=getFeatTok(cidx);
return tok.getNoFarChildren();
case LINE_P_C:
pair=getFeatTokPair(pidx,cidx);
return pair.getLinePath();
case LINE_RI_RK:
pair=getFeatTokPair(local.getRStartIdx(),local.getREndIdx());
return pair.getLinePath();
case BTWN_P_C:
pair=getFeatTokPair(pidx,cidx);
List<Integer> posList=pair.getLinePath();
if (posList.size() > 2) {
posList=posList.subList(1,posList.size() - 1);
}
 else {
posList=Collections.emptyList();
}
return posList;
default :
throw new IllegalStateException();
}
}","private List<Integer> getPositionList(PositionList pl,LocalObservations local){
  FeaturizedToken tok;
  FeaturizedTokenPair pair;
switch (pl) {
case CHILDREN_P:
    tok=getFeatTok(local.getPidx());
  return tok.getChildren();
case NO_FAR_CHILDREN_P:
tok=getFeatTok(local.getPidx());
return tok.getNoFarChildren();
case CHILDREN_C:
tok=getFeatTok(local.getCidx());
return tok.getChildren();
case NO_FAR_CHILDREN_C:
tok=getFeatTok(local.getCidx());
return tok.getNoFarChildren();
case LINE_P_C:
pair=getFeatTokPair(local.getPidx(),local.getCidx());
return pair.getLinePath();
case LINE_RI_RK:
pair=getFeatTokPair(local.getRStartIdx(),local.getREndIdx());
return pair.getLinePath();
case BTWN_P_C:
pair=getFeatTokPair(local.getPidx(),local.getCidx());
List<Integer> posList=pair.getLinePath();
if (posList.size() > 2) {
posList=posList.subList(1,posList.size() - 1);
}
 else {
posList=Collections.emptyList();
}
return posList;
default :
throw new IllegalStateException();
}
}",0.8914405010438413
131412,"@Override public Factor getClamped(VarConfig clmpVarConfig){
  if (clmpVarConfig.size() > 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return this;
}","@Override public Factor getClamped(VarConfig clmpVarConfig){
  if (clmpVarConfig.size() == 0) {
    return this;
  }
 else   if (clmpVarConfig.size() == vars.size()) {
    return new ProjDepTreeFactor(0,VarType.OBSERVED);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.6609442060085837
131413,"/** 
 * Computes the Bethe free energy of the factor graph. For acyclic graphs, this is equal to -log(Z) where Z is the exact partition function. For  loopy graphs it can be used as an approximation.
 */
private double getBetheFreeEnergy(){
  double bethe=0.0;
  Set<Class<?>> ignoredClasses=new HashSet<Class<?>>();
  for (int a=0; a < fg.getFactors().size(); a++) {
    Factor f=fg.getFactors().get(a);
    if (f instanceof ExplicitFactor) {
      int numConfigs=f.getVars().calcNumConfigs();
      DenseFactor beliefs=getMarginalsForFactorId(a);
      for (int c=0; c < numConfigs; c++) {
        double chi_c=((ExplicitFactor)f).getValue(c);
        if (beliefs.getValue(c) != 0) {
          if (prm.logDomain) {
            bethe+=FastMath.exp(beliefs.getValue(c)) * (beliefs.getValue(c) - chi_c);
          }
 else {
            bethe+=beliefs.getValue(c) * FastMath.log(beliefs.getValue(c) / chi_c);
          }
        }
      }
    }
 else {
      ignoredClasses.add(f.getClass());
    }
  }
  for (int i=0; i < fg.getVars().size(); i++) {
    Var v=fg.getVars().get(i);
    int numNeighbors=fg.getVarNode(i).getOutEdges().size();
    DenseFactor beliefs=getMarginalsForVarId(i);
    double sum=0.0;
    for (int c=0; c < v.getNumStates(); c++) {
      if (prm.logDomain) {
        sum+=FastMath.exp(beliefs.getValue(c)) * beliefs.getValue(c);
      }
 else {
        sum+=beliefs.getValue(c) * FastMath.log(beliefs.getValue(c));
      }
    }
    bethe-=(numNeighbors - 1) * sum;
  }
  for (  Class<?> clazz : ignoredClasses) {
    log.warn(""String_Node_Str"" + clazz);
    return Double.NaN;
  }
  return bethe;
}","/** 
 * Computes the Bethe free energy of the factor graph. For acyclic graphs, this is equal to -log(Z) where Z is the exact partition function. For  loopy graphs it can be used as an approximation.
 */
private double getBetheFreeEnergy(){
}",0.2595174262734584
131414,"/** 
 * @inheritDoc 
 */
@Override public double getPartition(){
  if (prm.schedule == BpScheduleType.TREE_LIKE && prm.normalizeMessages == false) {
    double partition=prm.logDomain ? 0.0 : 1.0;
    for (    FgNode node : fg.getConnectedComponents()) {
      if (!node.isVar()) {
        if (node.getOutEdges().size() == 0) {
          continue;
        }
 else {
          node=node.getOutEdges().get(0).getChild();
          assert(node.isVar());
        }
      }
      double nodePartition=getPartitionFunctionAtVarNode(node);
      if (prm.logDomain) {
        partition+=nodePartition;
      }
 else {
        partition*=nodePartition;
      }
    }
    return partition;
  }
  if (!prm.logDomain) {
    return Math.exp(-getBetheFreeEnergy());
  }
 else {
    return -getBetheFreeEnergy();
  }
}","/** 
 * @inheritDoc 
 */
@Override public double getPartition(){
}",0.1518987341772152
131415,"/** 
 * Creates a message and stores it in the ""pending message"" slot for this edge.
 * @param edge The directed edge for which the message should be created.
 * @param iter The iteration number.
 */
private void createMessage(FgEdge edge,int iter){
  int edgeId=edge.getId();
  Var var=edge.getVar();
  Factor factor=edge.getFactor();
  if (!edge.isVarToFactor() && factor instanceof GlobalFactor) {
    log.trace(""String_Node_Str"");
    GlobalFactor globalFac=(GlobalFactor)factor;
    globalFac.createMessages(edge.getParent(),msgs,prm.logDomain,iter);
    return;
  }
 else   if (!edge.isVarToFactor() && !(factor instanceof ExplicitFactor)) {
    throw new UnsupportedFactorTypeException(factor);
  }
  DenseFactor msg=msgs[edgeId].newMessage;
  msg.set(prm.logDomain ? 0.0 : 1.0);
  if (edge.isVarToFactor()) {
    getProductOfMessages(edge.getParent(),msg,edge.getChild());
  }
 else {
    DenseFactor prod=new DenseFactor(factor.getVars());
    prod.set((DenseFactor)factor);
    getProductOfMessages(edge.getParent(),prod,edge.getChild());
    if (prm.logDomain) {
      msg=prod.getLogMarginal(new VarSet(var),false);
    }
 else {
      msg=prod.getMarginal(new VarSet(var),false);
    }
  }
  assert(msg.getVars().equals(new VarSet(var)));
  if (prm.normalizeMessages) {
    if (prm.logDomain) {
      msg.logNormalize();
    }
 else {
      msg.normalize();
    }
  }
  msgs[edgeId].newMessage=msg;
}","/** 
 * Creates a message and stores it in the ""pending message"" slot for this edge.
 * @param edge The directed edge for which the message should be created.
 * @param iter The iteration number.
 */
private void createMessage(FgEdge edge,int iter){
}",0.3016826923076923
131416,"/** 
 * Provide the dot product of the features and model weights for this configuration (make sure to exp that value if !logDomain). Note that this method can be overridden for an efficient product of an ExpFamFactor and a hard factor (that rules out some configurations). Just return 0/-infinity here before extracting features for configurations that are eliminated by the hard factor. 
 */
public double getDotProd(int config,FgModel model,boolean logDomain){
  FeatureVector fv=getFeatures(config);
  double dot=model.dot(fv);
  if (logDomain)   return dot;
 else   return FastMath.exp(dot);
}","@Override public double getDotProd(int config,FgModel model,boolean logDomain){
  return unclmpFactor.getDotProd(config,model,logDomain);
}",0.3202170963364993
131417,"/** 
 * If this factor depends on the model, this method wil updates this factor's internal representation accordingly.
 * @param model The model.
 * @param logDomain Whether to store values in the probability orlog-probability domain.
 */
void updateFromModel(FgModel model,boolean logDomain);","/** 
 * If this factor depends on the model, this method will updates this factor's internal representation accordingly.
 * @param model The model.
 * @param logDomain Whether to store values in the probability orlog-probability domain.
 */
void updateFromModel(FgModel model,boolean logDomain);",0.99830220713073
131418,"private static Map<String,MutableInt> addWord(Map<String,MutableInt> inputHash,String w){
  MutableInt count=inputHash.get(w);
  if (count == null) {
    inputHash.put(w,new MutableInt());
  }
 else {
    count.increment();
  }
  return inputHash;
}","private static void addWord(Map<String,MutableInt> inputHash,String w){
  MutableInt count=inputHash.get(w);
  if (count == null) {
    inputHash.put(w,new MutableInt());
  }
 else {
    count.increment();
  }
}",0.9
131419,"public void init(Iterable<SimpleAnnoSentence> cr){
  Map<String,Set<String>> predSenseSetMap=new HashMap<String,Set<String>>();
  Set<String> knownRoles=new HashSet<String>();
  Set<String> knownLinks=new HashSet<String>();
  Map<String,MutableInt> words=new HashMap<String,MutableInt>();
  Map<String,MutableInt> unks=new HashMap<String,MutableInt>();
  initialized=true;
  knownLinks.add(""String_Node_Str"");
  knownLinks.add(""String_Node_Str"");
  knownUnks.add(""String_Node_Str"");
  knownRoles.add(UNKNOWN_ROLE);
  knownRoles.add(""String_Node_Str"");
  for (  SimpleAnnoSentence sent : cr) {
    if (sent.size() > maxSentLength) {
      maxSentLength=sent.size();
    }
    for (    SrlEdge edge : sent.getSrlGraph().getEdges()) {
      String role=edge.getLabel();
      knownRoles.add(role);
    }
    for (    SrlPred pred : sent.getSrlGraph().getPreds()) {
      int position=pred.getPosition();
      String lemma=sent.getLemma(position);
      Set<String> senses=predSenseSetMap.get(lemma);
      if (senses == null) {
        senses=new TreeSet<String>();
        predSenseSetMap.put(lemma,senses);
      }
      senses.add(pred.getLabel());
    }
    for (int position=0; position < sent.size(); position++) {
      String wordForm=sent.getWord(position);
      String cleanWord=normalize.clean(wordForm);
      String unkWord=sig.getSignature(wordForm,position,prm.language);
      unkWord=normalize.escape(unkWord);
      words=addWord(words,cleanWord);
      unks=addWord(unks,unkWord);
      knownPostags.add(sent.getPosTag(position));
    }
  }
  knownWords=getUnigramsAboveThreshold(words,prm.cutoff);
  knownUnks=getUnigramsAboveThreshold(unks,prm.cutoff);
  topNWords=getTopNUnigrams(words,prm.topN,prm.cutoff);
  this.linkStateNames=new ArrayList<String>(knownLinks);
  this.roleStateNames=new ArrayList<String>(knownRoles);
  for (  Entry<String,Set<String>> entry : predSenseSetMap.entrySet()) {
    predSenseListMap.put(entry.getKey(),new ArrayList<String>(entry.getValue()));
  }
  log.info(""String_Node_Str"" + roleStateNames.size());
  log.info(""String_Node_Str"" + roleStateNames);
  log.info(""String_Node_Str"" + predSenseListMap.size());
}","public void init(Iterable<SimpleAnnoSentence> cr){
  Map<String,Set<String>> predSenseSetMap=new HashMap<String,Set<String>>();
  Set<String> knownRoles=new HashSet<String>();
  Set<String> knownLinks=new HashSet<String>();
  Map<String,MutableInt> words=new HashMap<String,MutableInt>();
  Map<String,MutableInt> unks=new HashMap<String,MutableInt>();
  initialized=true;
  knownLinks.add(""String_Node_Str"");
  knownLinks.add(""String_Node_Str"");
  knownUnks.add(""String_Node_Str"");
  knownRoles.add(UNKNOWN_ROLE);
  knownRoles.add(""String_Node_Str"");
  for (  SimpleAnnoSentence sent : cr) {
    if (sent.size() > maxSentLength) {
      maxSentLength=sent.size();
    }
    for (int position=0; position < sent.size(); position++) {
      String wordForm=sent.getWord(position);
      String cleanWord=normalize.clean(wordForm);
      String unkWord=sig.getSignature(wordForm,position,prm.language);
      unkWord=normalize.escape(unkWord);
      addWord(words,cleanWord);
      addWord(unks,unkWord);
    }
    if (sent.getPosTags() != null) {
      for (int position=0; position < sent.size(); position++) {
        knownPostags.add(sent.getPosTag(position));
      }
    }
    if (sent.getSrlGraph() != null) {
      for (      SrlEdge edge : sent.getSrlGraph().getEdges()) {
        String role=edge.getLabel();
        knownRoles.add(role);
      }
      for (      SrlPred pred : sent.getSrlGraph().getPreds()) {
        int position=pred.getPosition();
        String lemma=sent.getLemma(position);
        Set<String> senses=predSenseSetMap.get(lemma);
        if (senses == null) {
          senses=new TreeSet<String>();
          predSenseSetMap.put(lemma,senses);
        }
        senses.add(pred.getLabel());
      }
    }
  }
  knownWords=getUnigramsAboveThreshold(words,prm.cutoff);
  knownUnks=getUnigramsAboveThreshold(unks,prm.cutoff);
  topNWords=getTopNUnigrams(words,prm.topN,prm.cutoff);
  this.linkStateNames=new ArrayList<String>(knownLinks);
  this.roleStateNames=new ArrayList<String>(knownRoles);
  for (  Entry<String,Set<String>> entry : predSenseSetMap.entrySet()) {
    predSenseListMap.put(entry.getKey(),new ArrayList<String>(entry.getValue()));
  }
  log.info(""String_Node_Str"" + roleStateNames.size());
  log.info(""String_Node_Str"" + roleStateNames);
  log.info(""String_Node_Str"" + predSenseListMap.size());
}",0.7287646928365491
131420,"/** 
 * If this factor depends on the model, this method wil updates this factor's internal representation accordingly.
 * @param model The model.
 * @param logDomain Whether to store values in the probability orlog-probability domain.
 */
public void updateFromModel(FgModel model,boolean logDomain){
  if (iter != null) {
    iter.reset();
  }
  ExpFamFactor f=this;
  int numConfigs=f.getVars().calcNumConfigs();
  for (int c=0; c < numConfigs; c++) {
    int config=(iter != null) ? iter.next() : c;
    FeatureVector fv=getFeatures(config);
    double dot=model.dot(fv);
    if (logDomain) {
      f.setValue(c,dot);
    }
 else {
      f.setValue(c,FastMath.exp(dot));
    }
  }
  assert(iter == null || !iter.hasNext());
}","/** 
 * If this factor depends on the model, this method wil updates this factor's internal representation accordingly.
 * @param model The model.
 * @param logDomain Whether to store values in the probability orlog-probability domain.
 */
public void updateFromModel(FgModel model,boolean logDomain){
  if (iter != null) {
    iter.reset();
  }
  ExpFamFactor f=this;
  int numConfigs=f.getVars().calcNumConfigs();
  if (numConfigs > 0) {
    for (int c=0; c < numConfigs; c++) {
      int config=(iter != null) ? iter.next() : c;
      FeatureVector fv=getFeatures(config);
      double dot=model.dot(fv);
      if (logDomain) {
        f.setValue(c,dot);
      }
 else {
        f.setValue(c,FastMath.exp(dot));
      }
    }
    assert(iter == null || !iter.hasNext());
  }
}",0.96684350132626
131421,"public void init(FgExampleList data){
  numTemplates=templates.size();
  if (!prm.includeUnsupportedFeatures) {
    prm.featCountCutoff=Math.max(prm.featCountCutoff,1);
  }
  IntIntDenseVector[][] counts=null;
  if (prm.featCountCutoff >= 1) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    counts=countFeatures(data,templates);
  }
 else   if (templates.isGrowing() && data != null) {
    log.info(""String_Node_Str"");
    countFeatures(data,templates);
  }
  templates.stopGrowth();
  this.included=new boolean[numTemplates][][];
  for (int t=0; t < numTemplates; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    included[t]=new boolean[numConfigs][numFeats];
  }
  BoolArrays.fill(included,true);
  if (counts != null) {
    excludeByFeatCount(counts);
    counts=null;
  }
  for (int t=0; t < included.length; t++) {
    FactorTemplate template=templates.get(t);
    Alphabet<Feature> alphabet=template.getAlphabet();
    for (int k=0; k < alphabet.size(); k++) {
      if (alphabet.lookupObject(k).isBiasFeature()) {
        for (int c=0; c < included[t].length; c++) {
          included[t][c][k]=true;
        }
      }
    }
  }
  this.indices=new int[numTemplates][][];
  for (int t=0; t < indices.length; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    indices[t]=new int[numConfigs][numFeats];
    for (int c=0; c < indices[t].length; c++) {
      for (int k=0; k < indices[t][c].length; k++) {
        indices[t][c][k]=included[t][c][k] ? numParams++ : -1;
      }
    }
  }
  initialized=true;
}","public void init(FgExampleList data){
  if (templates.isGrowing() && data != null) {
    log.info(""String_Node_Str"");
    extractAllObsFeats(data,templates);
    templates.stopGrowth();
  }
  numTemplates=templates.size();
  this.included=new boolean[numTemplates][][];
  for (int t=0; t < numTemplates; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    included[t]=new boolean[numConfigs][numFeats];
  }
  BoolArrays.fill(included,true);
  if (!prm.includeUnsupportedFeatures) {
    prm.featCountCutoff=Math.max(prm.featCountCutoff,1);
  }
  if (prm.featCountCutoff >= 1) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    IntIntDenseVector[][] counts=countFeatures(data,templates);
    excludeByFeatCount(counts);
  }
  for (int t=0; t < included.length; t++) {
    FactorTemplate template=templates.get(t);
    Alphabet<Feature> alphabet=template.getAlphabet();
    for (int k=0; k < alphabet.size(); k++) {
      if (alphabet.lookupObject(k).isBiasFeature()) {
        for (int c=0; c < included[t].length; c++) {
          included[t][c][k]=true;
        }
      }
    }
  }
  this.indices=new int[numTemplates][][];
  for (int t=0; t < indices.length; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    indices[t]=new int[numConfigs][numFeats];
    for (int c=0; c < indices[t].length; c++) {
      for (int k=0; k < indices[t][c].length; k++) {
        indices[t][c][k]=included[t][c][k] ? numParams++ : -1;
      }
    }
  }
  initialized=true;
}",0.6930576070901034
131422,"@Test public void testCorrectNumFeatures() throws Exception {
  SrlFactorGraphPrm fgPrm=new SrlFactorGraphPrm();
  fgPrm.alwaysIncludeLinkVars=true;
  SrlFactorGraph sfg=getSrlFg(fgPrm);
  FactorTemplateList fts=new FactorTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  SimpleAnnoSentenceCollection sents=CoNLL09Sentence.toSimpleAnno(cr.readSents(1),csPrm.useGoldSyntax);
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  fts.update(sfg);
  SrlFeatureExtractorPrm prm=new SrlFeatureExtractorPrm();
  prm.fePrm.biasOnly=true;
  prm.featureHashMod=-1;
  SrlFeatureExtractor featExt=new SrlFeatureExtractor(prm,sents.get(0),cs);
  featExt.init(new VarConfig(),fts);
  for (int a=0; a < sfg.getNumFactors(); a++) {
    featExt.calcObsFeatureVector((ObsFeExpFamFactor)sfg.getFactor(a));
  }
  System.out.println(fts);
  assertEquals(3,fts.getNumObsFeats());
}","@Test public void testCorrectNumFeatures() throws Exception {
  SrlFactorGraphPrm fgPrm=new SrlFactorGraphPrm();
  fgPrm.alwaysIncludeLinkVars=true;
  SrlFactorGraph sfg=getSrlFg(fgPrm);
  FactorTemplateList fts=new FactorTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  SimpleAnnoSentenceCollection sents=CoNLL09Sentence.toSimpleAnno(cr.readSents(1),csPrm.useGoldSyntax);
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  fts.lookupTemplateIds(sfg);
  SrlFeatureExtractorPrm prm=new SrlFeatureExtractorPrm();
  prm.fePrm.biasOnly=true;
  prm.featureHashMod=-1;
  SrlFeatureExtractor featExt=new SrlFeatureExtractor(prm,sents.get(0),cs);
  featExt.init(new VarConfig(),fts);
  for (int a=0; a < sfg.getNumFactors(); a++) {
    featExt.calcObsFeatureVector((ObsFeExpFamFactor)sfg.getFactor(a));
  }
  System.out.println(fts);
  assertEquals(3,fts.getNumObsFeats());
}",0.9901547116736992
131423,"@Test public void testCorrectNumFeaturesWithFeatureHashing() throws Exception {
  SrlFactorGraphPrm fgPrm=new SrlFactorGraphPrm();
  SrlFactorGraph sfg=getSrlFg(fgPrm);
  FactorTemplateList fts=new FactorTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  SimpleAnnoSentenceCollection simpleSents=new SimpleAnnoSentenceCollection();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  for (  CoNLL09Sentence s : sents) {
    s.normalizeRoleNames();
    simpleSents.add(s.toSimpleAnnoSentence(csPrm.useGoldSyntax));
  }
  cs.init(simpleSents);
  fts.update(sfg);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.useNaradFeats=true;
  fePrm.useSimpleFeats=false;
  fePrm.useZhaoFeats=false;
  fePrm.useLexicalDepPathFeats=false;
  SrlFeatureExtractorPrm prm=new SrlFeatureExtractorPrm();
  prm.fePrm=fePrm;
  prm.featureHashMod=10;
  SrlFeatureExtractor featExt=new SrlFeatureExtractor(prm,simpleSents.get(0),cs);
  featExt.init(new VarConfig(),fts);
  for (int a=0; a < sfg.getNumFactors(); a++) {
    featExt.calcObsFeatureVector((ObsFeExpFamFactor)sfg.getFactor(a));
  }
  System.out.println(fts);
  assertEquals(11,fts.getNumObsFeats());
}","@Test public void testCorrectNumFeaturesWithFeatureHashing() throws Exception {
  SrlFactorGraphPrm fgPrm=new SrlFactorGraphPrm();
  SrlFactorGraph sfg=getSrlFg(fgPrm);
  FactorTemplateList fts=new FactorTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  SimpleAnnoSentenceCollection simpleSents=new SimpleAnnoSentenceCollection();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  for (  CoNLL09Sentence s : sents) {
    s.normalizeRoleNames();
    simpleSents.add(s.toSimpleAnnoSentence(csPrm.useGoldSyntax));
  }
  cs.init(simpleSents);
  fts.lookupTemplateIds(sfg);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.useNaradFeats=true;
  fePrm.useSimpleFeats=false;
  fePrm.useZhaoFeats=false;
  fePrm.useLexicalDepPathFeats=false;
  SrlFeatureExtractorPrm prm=new SrlFeatureExtractorPrm();
  prm.fePrm=fePrm;
  prm.featureHashMod=10;
  SrlFeatureExtractor featExt=new SrlFeatureExtractor(prm,simpleSents.get(0),cs);
  featExt.init(new VarConfig(),fts);
  for (int a=0; a < sfg.getNumFactors(); a++) {
    featExt.calcObsFeatureVector((ObsFeExpFamFactor)sfg.getFactor(a));
  }
  System.out.println(fts);
  assertEquals(11,fts.getNumObsFeats());
}",0.9924919556667858
131424,"@Override public int next(){
  if (!hasNext()) {
    throw new IllegalStateException();
  }
  cur=cur + incr;
  return cur;
}","@Override public int next(){
  if (!hasNext()) {
    throw new IllegalStateException();
  }
  int tmp=cur;
  cur+=incr;
  return tmp;
}",0.9076923076923076
131425,"@Override public boolean hasNext(){
  return cur + incr < end;
}","@Override public boolean hasNext(){
  return cur < end;
}",0.9421487603305784
131426,"public void init(FgExampleList data){
  numTemplates=templates.size();
  if (!prm.includeUnsupportedFeatures) {
    prm.featCountCutoff=Math.max(prm.featCountCutoff,1);
  }
  IntIntDenseVector[][] counts=null;
  if (prm.featCountCutoff >= 1) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    counts=countFeatures(data,templates);
  }
 else   if (templates.isGrowing() && data != null) {
    log.info(""String_Node_Str"");
    countFeatures(data,templates);
    templates.stopGrowth();
  }
  this.included=new boolean[numTemplates][][];
  for (int t=0; t < numTemplates; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    included[t]=new boolean[numConfigs][numFeats];
  }
  BoolArrays.fill(included,true);
  if (counts != null) {
    excludeByFeatCount(counts);
    counts=null;
  }
  for (int t=0; t < included.length; t++) {
    FactorTemplate template=templates.get(t);
    Alphabet<Feature> alphabet=template.getAlphabet();
    for (int k=0; k < alphabet.size(); k++) {
      if (alphabet.lookupObject(k).isBiasFeature()) {
        for (int c=0; c < included[t].length; c++) {
          included[t][c][k]=true;
        }
      }
    }
  }
  this.indices=new int[numTemplates][][];
  for (int t=0; t < indices.length; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    indices[t]=new int[numConfigs][numFeats];
    for (int c=0; c < indices[t].length; c++) {
      for (int k=0; k < indices[t][c].length; k++) {
        indices[t][c][k]=included[t][c][k] ? numParams++ : -1;
      }
    }
  }
  initialized=true;
}","public void init(FgExampleList data){
  numTemplates=templates.size();
  if (!prm.includeUnsupportedFeatures) {
    prm.featCountCutoff=Math.max(prm.featCountCutoff,1);
  }
  IntIntDenseVector[][] counts=null;
  if (prm.featCountCutoff >= 1) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    counts=countFeatures(data,templates);
  }
 else   if (templates.isGrowing() && data != null) {
    log.info(""String_Node_Str"");
    countFeatures(data,templates);
  }
  templates.stopGrowth();
  this.included=new boolean[numTemplates][][];
  for (int t=0; t < numTemplates; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    included[t]=new boolean[numConfigs][numFeats];
  }
  BoolArrays.fill(included,true);
  if (counts != null) {
    excludeByFeatCount(counts);
    counts=null;
  }
  for (int t=0; t < included.length; t++) {
    FactorTemplate template=templates.get(t);
    Alphabet<Feature> alphabet=template.getAlphabet();
    for (int k=0; k < alphabet.size(); k++) {
      if (alphabet.lookupObject(k).isBiasFeature()) {
        for (int c=0; c < included[t].length; c++) {
          included[t][c][k]=true;
        }
      }
    }
  }
  this.indices=new int[numTemplates][][];
  for (int t=0; t < indices.length; t++) {
    FactorTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    int numFeats=template.getAlphabet().size();
    indices[t]=new int[numConfigs][numFeats];
    for (int c=0; c < indices[t].length; c++) {
      for (int k=0; k < indices[t][c].length; k++) {
        indices[t][c][k]=included[t][c][k] ? numParams++ : -1;
      }
    }
  }
  initialized=true;
}",0.9982588508415554
131427,"private FgExampleList getData(ObsFeatureConjoiner ofc,CorpusStatistics cs,String name,SimpleAnnoSentenceCollection sents,SrlFeatureExtractorPrm srlFePrm){
  if (!cs.isInitialized()) {
    log.info(""String_Node_Str"");
    cs.init(sents);
  }
  FactorTemplateList fts=ofc.getTemplates();
  if (useTemplates) {
    SimpleAnnoSentence sent=sents.get(0);
    TemplateLanguage.assertRequiredAnnotationTypes(sent,srlFePrm.fePrm.soloTemplates);
    TemplateLanguage.assertRequiredAnnotationTypes(sent,srlFePrm.fePrm.pairTemplates);
  }
  log.info(""String_Node_Str"");
  SrlFgExampleBuilderPrm prm=getSrlFgExampleBuilderPrm(srlFePrm);
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,ofc,cs);
  FgExampleList data=builder.getData(sents);
  if (prm.fgPrm.predictSense) {
    fts.startGrowth();
    Var v=new Var(VarType.PREDICTED,1,CorpusStatistics.UNKNOWN_SENSE,CorpusStatistics.SENSES_FOR_UNK_PRED);
    fts.add(new FactorTemplate(new VarSet(v),new Alphabet<Feature>(),SrlFactorGraph.TEMPLATE_KEY_FOR_UNKNOWN_SENSE));
    fts.stopGrowth();
  }
  if (!ofc.isInitialized()) {
    log.info(""String_Node_Str"");
    ofc.init(data);
  }
  log.info(String.format(""String_Node_Str"",name,data.size()));
  log.info(String.format(""String_Node_Str"",fts.size()));
  log.info(String.format(""String_Node_Str"",fts.getNumObsFeats()));
  return data;
}","private FgExampleList getData(ObsFeatureConjoiner ofc,CorpusStatistics cs,String name,SimpleAnnoSentenceCollection sents,SrlFeatureExtractorPrm srlFePrm){
  if (!cs.isInitialized()) {
    log.info(""String_Node_Str"");
    cs.init(sents);
  }
  FactorTemplateList fts=ofc.getTemplates();
  if (useTemplates) {
    SimpleAnnoSentence sent=sents.get(0);
    TemplateLanguage.assertRequiredAnnotationTypes(sent,srlFePrm.fePrm.soloTemplates);
    TemplateLanguage.assertRequiredAnnotationTypes(sent,srlFePrm.fePrm.pairTemplates);
  }
  log.info(""String_Node_Str"");
  SrlFgExampleBuilderPrm prm=getSrlFgExampleBuilderPrm(srlFePrm);
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,ofc,cs);
  FgExampleList data=builder.getData(sents);
  if (prm.fgPrm.predictSense && fts.isGrowing()) {
    Var v=new Var(VarType.PREDICTED,1,CorpusStatistics.UNKNOWN_SENSE,CorpusStatistics.SENSES_FOR_UNK_PRED);
    fts.add(new FactorTemplate(new VarSet(v),new Alphabet<Feature>(),SrlFactorGraph.TEMPLATE_KEY_FOR_UNKNOWN_SENSE));
  }
  if (!ofc.isInitialized()) {
    log.info(""String_Node_Str"");
    ofc.init(data);
  }
  log.info(String.format(""String_Node_Str"",name,data.size()));
  log.info(String.format(""String_Node_Str"",fts.size()));
  log.info(String.format(""String_Node_Str"",fts.getNumObsFeats()));
  return data;
}",0.9758125472411188
131428,"public void addFeatures(FeatTemplate tpl,int pidx,int cidx,List<String> feats){
  int idx=pidx;
  if (tpl instanceof FeatTemplate1) {
    addTokenFeature((FeatTemplate1)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate2) {
    addTokenFeatures((FeatTemplate2)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate3) {
    addListFeature((FeatTemplate3)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate4) {
    addOtherFeature((FeatTemplate4)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof BigramTemplate) {
    addBigramFeature((BigramTemplate)tpl,pidx,cidx,feats);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + tpl);
  }
}","public void addFeatures(FeatTemplate tpl,int pidx,int cidx,List<String> feats){
  int idx=pidx;
  if (tpl instanceof FeatTemplate1) {
    addTokenFeature((FeatTemplate1)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate2) {
    addTokenFeatures((FeatTemplate2)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate3) {
    addListFeature((FeatTemplate3)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate4) {
    addOtherFeature((FeatTemplate4)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof JoinTemplate) {
    addJoinFeature((JoinTemplate)tpl,pidx,cidx,feats);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + tpl);
  }
}",0.9782608695652174
131429,"@Test public void testBigramFeature(){
{
    FeatTemplate tpl1=new FeatTemplate1(Position.PARENT,PositionModifier.IDENTITY,TokProperty.MORPHO);
    String expected1=""String_Node_Str"";
    FeatTemplate tpl2=new FeatTemplate3(PositionList.LINE_P_C,TokProperty.POS,null,ListModifier.SEQ);
    String expected2=""String_Node_Str"";
    FeatTemplate tpl=new BigramTemplate(tpl1,tpl2);
    getFeatAndAssertEquality(tpl,expected1 + ""String_Node_Str"" + expected2);
  }
{
    FeatTemplate tpl1=new FeatTemplate2(Position.PARENT,PositionModifier.IDENTITY,TokPropList.EACH_MORPHO);
    String[] expected1=new String[]{""String_Node_Str"",""String_Node_Str""};
    FeatTemplate tpl2=new FeatTemplate3(PositionList.LINE_P_C,TokProperty.POS,null,ListModifier.SEQ);
    String expected2=""String_Node_Str"";
    FeatTemplate tpl=new BigramTemplate(tpl1,tpl2);
    String[] expected=new String[]{expected1[0] + ""String_Node_Str"" + expected2,expected1[1] + ""String_Node_Str"" + expected2};
    getFeatsAndAssertEquality(tpl,expected);
  }
}","@Test public void testBigramFeature(){
{
    FeatTemplate tpl1=new FeatTemplate1(Position.PARENT,PositionModifier.IDENTITY,TokProperty.MORPHO);
    String expected1=""String_Node_Str"";
    FeatTemplate tpl2=new FeatTemplate3(PositionList.LINE_P_C,TokProperty.POS,null,ListModifier.SEQ);
    String expected2=""String_Node_Str"";
    FeatTemplate tpl=new JoinTemplate(tpl1,tpl2);
    getFeatAndAssertEquality(tpl,expected1 + ""String_Node_Str"" + expected2);
  }
{
    FeatTemplate tpl1=new FeatTemplate2(Position.PARENT,PositionModifier.IDENTITY,TokPropList.EACH_MORPHO);
    String[] expected1=new String[]{""String_Node_Str"",""String_Node_Str""};
    FeatTemplate tpl2=new FeatTemplate3(PositionList.LINE_P_C,TokProperty.POS,null,ListModifier.SEQ);
    String expected2=""String_Node_Str"";
    FeatTemplate tpl=new JoinTemplate(tpl1,tpl2);
    String[] expected=new String[]{expected1[0] + ""String_Node_Str"" + expected2,expected1[1] + ""String_Node_Str"" + expected2};
    getFeatsAndAssertEquality(tpl,expected);
  }
}",0.9901185770750988
131430,"private void testPositionModifiersHelper(int pidx,PositionModifier mod,String expectedWord){
  FeatTemplate tpl=new FeatTemplate1(Position.PARENT,mod,TokProperty.WORD);
  TemplateFeatureExtractor extr=getCoNLLSentenceExtractor1();
  int cidx=-1;
  ArrayList<String> feats=new ArrayList<String>();
  extr.addFeatures(tpl,pidx,cidx,feats);
  for (  Object feat : feats) {
    System.out.println(feat);
  }
  assertEquals(feats.size(),1);
  assertEquals(""String_Node_Str"" + mod.name() + ""String_Node_Str""+ expectedWord,feats.get(0));
}","private void testPositionModifiersHelper(int pidx,PositionModifier mod,String expectedWord){
  FeatTemplate tpl=new FeatTemplate1(Position.PARENT,mod,TokProperty.WORD);
  TemplateFeatureExtractor extr=getCoNLLSentenceExtractor1();
  int cidx=-1;
  ArrayList<String> feats=new ArrayList<String>();
  extr.addFeatures(tpl,pidx,cidx,feats);
  for (  Object feat : feats) {
    System.out.println(feat);
  }
  assertEquals(feats.size(),1);
  assertEquals(tpl.getName() + ""String_Node_Str"" + expectedWord,feats.get(0));
}",0.9541984732824428
131431,"public String getName(){
  return StringUtils.join(new String[]{tpl1.getName(),tpl2.getName()},""String_Node_Str"" + TEMPLATE_SEP + ""String_Node_Str"");
}","public String getName(){
  if (name == null) {
    name=StringUtils.join(toNames(tpls),""String_Node_Str"" + TEMPLATE_SEP + ""String_Node_Str"");
  }
  return name;
}",0.7284345047923323
131432,"public List<Enum<?>> getStructure(){
  List<Enum<?>> s=new ArrayList<Enum<?>>(tpl1.getStructure());
  s.addAll(tpl2.getStructure());
  return s;
}","public List<Enum<?>> getStructure(){
  List<Enum<?>> s=new ArrayList<Enum<?>>();
  for (  FeatTemplate tpl : tpls) {
    s.addAll(tpl.getStructure());
  }
  return s;
}",0.732484076433121
131433,"public boolean isPath(){
switch (this) {
case LINE_P_C:
case CHILDREN_P:
case NO_FAR_CHILDREN_P:
case CHILDREN_C:
case NO_FAR_CHILDREN_C:
    return false;
default :
  return true;
}
}","public boolean isPath(){
switch (this) {
case PATH_P_C:
case PATH_P_LCA:
case PATH_C_LCA:
case PATH_LCA_ROOT:
    return true;
default :
  return false;
}
}",0.7176470588235294
131434,"@Test public void testGetAll(){
  List<FeatTemplate> tpls;
  tpls=TemplateSets.getAllUnigramFeatureTemplates();
  int numUnigrams=tpls.size();
  System.out.println(""String_Node_Str"" + numUnigrams);
  tpls=TemplateSets.getAllBigramFeatureTemplates();
  int numBigrams=tpls.size();
  System.out.println(""String_Node_Str"" + numBigrams);
  assertEquals(1166,numUnigrams);
  assertEquals(679195,numBigrams);
}","@Test public void testGetAll(){
  List<FeatTemplate> tpls;
  tpls=TemplateSets.getAllUnigramFeatureTemplates();
  int numUnigrams=tpls.size();
  System.out.println(""String_Node_Str"" + numUnigrams);
  tpls=TemplateSets.getAllBigramFeatureTemplates();
  int numBigrams=tpls.size();
  System.out.println(""String_Node_Str"" + numBigrams);
  assertEquals(1467,numUnigrams);
  assertEquals(1075311,numBigrams);
}",0.9839307787391842
131435,"@Test public void testGetCoarseUnigramSet1(){
  List<FeatTemplate> tpls;
  tpls=TemplateSets.getCoarseUnigramSet1();
  int numArg=tpls.size();
  System.out.println(""String_Node_Str"" + numArg);
  assertEquals(126,numArg);
  for (  FeatTemplate tpl : tpls) {
    System.out.println(tpl);
  }
}","@Test public void testGetCoarseUnigramSet1(){
  List<FeatTemplate> tpls;
  tpls=TemplateSets.getCoarseUnigramSet1();
  int numArg=tpls.size();
  System.out.println(""String_Node_Str"" + numArg);
  assertEquals(125,numArg);
  for (  FeatTemplate tpl : tpls) {
    System.out.println(tpl);
  }
}",0.9965635738831616
131436,"public static <T>void awaitAll(ExecutorService pool,List<Future<T>> futures){
  int count=0;
  try {
    boolean[] isDone=new boolean[futures.size()];
    Arrays.fill(isDone,false);
    int i=0;
    while (true) {
      if (count == futures.size()) {
        break;
      }
 else       if (isDone[i]) {
      }
 else {
        Future<T> f=futures.get(i);
        try {
          f.get(100,TimeUnit.MILLISECONDS);
          count++;
          isDone[i]=true;
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
catch (        ExecutionException e) {
          throw new RuntimeException(e);
        }
catch (        TimeoutException e) {
        }
      }
      i=i + 1 % futures.size();
    }
  }
  finally {
    if (count != futures.size()) {
      for (      Future<T> f : futures) {
        boolean canceled=f.cancel(true);
      }
    }
  }
}","public static <T>void awaitAll(ExecutorService pool,List<Future<T>> futures){
  int count=0;
  try {
    boolean[] isDone=new boolean[futures.size()];
    Arrays.fill(isDone,false);
    int i=0;
    while (true) {
      if (count == futures.size()) {
        break;
      }
 else       if (isDone[i]) {
      }
 else {
        Future<T> f=futures.get(i);
        try {
          f.get(100,TimeUnit.MILLISECONDS);
          count++;
          isDone[i]=true;
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
catch (        ExecutionException e) {
          throw new RuntimeException(e);
        }
catch (        TimeoutException e) {
        }
      }
      i=(i + 1) % futures.size();
    }
  }
  finally {
    if (count != futures.size()) {
      for (      Future<T> f : futures) {
        boolean canceled=f.cancel(true);
      }
    }
  }
}",0.9988864142538976
131437,"/** 
 * Prepends the string prefix to each feature in obsFeats, and adds each one to fv using the given alphabet.
 */
private void addFeatures(ArrayList<String> obsFeats,Alphabet<Feature> alphabet,String prefix,FeatureVector fv,boolean isBiasFeat){
  if (prm.featureHashMod <= 0) {
    for (    String obsFeat : obsFeats) {
      String fname=prefix + obsFeat;
      int fidx=alphabet.lookupIndex(new Feature(fname,isBiasFeat));
      if (fidx != -1) {
        fv.add(fidx,1.0);
      }
    }
  }
 else {
    for (    String obsFeat : obsFeats) {
      String fname=prefix + obsFeat;
      int hash=fname.hashCode();
      FastMath.mod(hash,prm.featureHashMod);
      fname=Integer.toString(hash);
      int fidx=alphabet.lookupIndex(new Feature(fname,isBiasFeat));
      if (fidx != -1) {
        int revHash=reverseHashCode(fname);
        if (revHash < 0) {
          fv.add(fidx,-1.0);
        }
 else {
          fv.add(fidx,1.0);
        }
      }
    }
  }
}","/** 
 * Prepends the string prefix to each feature in obsFeats, and adds each one to fv using the given alphabet.
 */
private void addFeatures(ArrayList<String> obsFeats,Alphabet<Feature> alphabet,String prefix,FeatureVector fv,boolean isBiasFeat){
  if (prm.featureHashMod <= 0) {
    for (    String obsFeat : obsFeats) {
      String fname=prefix + obsFeat;
      int fidx=alphabet.lookupIndex(new Feature(fname,isBiasFeat));
      if (fidx != -1) {
        fv.add(fidx,1.0);
      }
    }
  }
 else {
    for (    String obsFeat : obsFeats) {
      String fname=prefix + obsFeat;
      int hash=MurmurHash3.murmurhash3_x86_32(fname,0,fname.length(),123456789);
      hash=FastMath.mod(hash,prm.featureHashMod);
      int fidx=alphabet.lookupIndex(new Feature(hash,isBiasFeat));
      if (fidx != -1) {
        int revHash=reverseHashCode(fname);
        if (revHash < 0) {
          fv.add(fidx,-1.0);
        }
 else {
          fv.add(fidx,1.0);
        }
      }
    }
  }
}",0.9105858170606372
131438,"public FeaturizedTokenPair getFeatTokPair(int pidx,int cidx){
  if (pairs[pidx][cidx] == null) {
    pairs[pidx][cidx]=new FeaturizedTokenPair(pidx,cidx,getFeatTok(pidx),getFeatTok(cidx),sent);
  }
  return pairs[pidx][cidx];
}","public FeaturizedTokenPair getFeatTokPair(int pidx,int cidx){
  int p=convertToInternal(pidx);
  int c=convertToInternal(cidx);
  if (pairs[p][c] == null) {
    pairs[p][c]=new FeaturizedTokenPair(pidx,cidx,getFeatTok(pidx),getFeatTok(cidx),sent);
  }
  return pairs[p][c];
}",0.796812749003984
131439,"public FeaturizedToken getFeatTok(int idx){
  if (idx < 0) {
    return featuredHeadDefault;
  }
 else   if (idx >= toks.length) {
    return featuredTailDefault;
  }
  if (toks[idx] == null) {
    this.toks[idx]=new FeaturizedToken(idx,sent,cs);
  }
  return toks[idx];
}","public FeaturizedToken getFeatTok(int idx){
  int i=convertToInternal(idx);
  if (toks[i] == null) {
    this.toks[i]=new FeaturizedToken(idx,sent,cs);
  }
  return toks[i];
}",0.6890380313199105
131440,"public FeaturizedSentence(SimpleAnnoSentence sent,CorpusStatistics cs){
  this.sent=sent;
  this.cs=cs;
  this.toks=new FeaturizedToken[sent.size()];
  this.pairs=new FeaturizedTokenPair[sent.size()][sent.size()];
  this.featuredHeadDefault=new FeaturizedToken(-1,sent,cs);
  this.featuredTailDefault=new FeaturizedToken(sent.size(),sent,cs);
}","public FeaturizedSentence(SimpleAnnoSentence sent,CorpusStatistics cs){
  this.sent=sent;
  this.cs=cs;
  int size=sent.size() + 2;
  this.toks=new FeaturizedToken[size];
  this.pairs=new FeaturizedTokenPair[size][size];
}",0.6537102473498233
131441,"public void clear(){
  obsFeatsSolo=new ArrayList[sentFeatExt.getSentSize()];
  obsFeatsPair=new ArrayList[sentFeatExt.getSentSize()][sentFeatExt.getSentSize()];
  obsSenseSolo=new ArrayList[sentFeatExt.getSentSize()];
}","public void clear(){
  obsFeatsSolo=new ArrayList[sentFeatExt.getSentSize()];
  obsFeatsPair=new ArrayList[sentFeatExt.getSentSize()][sentFeatExt.getSentSize()];
  obsFeatsPairForRoot=new ArrayList[sentFeatExt.getSentSize()];
}",0.9440715883668904
131442,"public ArrayList<String> fastGetObsFeats(int parent,int child){
  if (obsFeatsPair[parent][child] == null) {
    obsFeatsPair[parent][child]=sentFeatExt.createFeatureSet(parent,child);
  }
  return obsFeatsPair[parent][child];
}","public ArrayList<String> fastGetObsFeats(int parent,int child){
  if (parent == -1) {
    return fastGetObsFeatsForRoot(child);
  }
  if (obsFeatsPair[parent][child] == null) {
    obsFeatsPair[parent][child]=sentFeatExt.createFeatureSet(parent,child);
  }
  return obsFeatsPair[parent][child];
}",0.8702290076335878
131443,"@Test public void testGetAllUnigrams(){
  SimpleAnnoSentence sent=CoNLL09Sentence.toSimpleAnnoSentence(SimpleAnnoSentenceTest.getDogConll09Sentence(),true);
  addFakeBrownClusters(sent);
  CorpusStatistics cs=new CorpusStatistics(new CorpusStatisticsPrm());
  cs.init(Lists.getList(sent));
  TemplateFeatureExtractor extr=new TemplateFeatureExtractor(sent,cs);
  List<FeatTemplate> tpls=TemplateSets.getAllUnigramFeatureTemplates();
  int pidx=0;
  int cidx=3;
  ArrayList<String> feats=new ArrayList<String>();
  extr.addFeatures(tpls,pidx,cidx,feats);
  for (  Object feat : feats) {
    System.out.println(feat);
  }
}","@Test public void testGetAllUnigrams(){
  extractAllUnigramFeats(0,3);
}",0.1991341991341991
131444,"public void testZhaoFeatureBuilding() throws ParseException, IOException {
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.withSupervision=true;
  fePrm.useNaradFeats=false;
  fePrm.useLexicalDepPathFeats=false;
  fePrm.useSimpleFeats=false;
  fePrm.useZhaoFeats=true;
  File train=new File(""String_Node_Str"");
  CoNLL09FileReader reader=new CoNLL09FileReader(train);
  Timer timer=new Timer();
  timer.start();
  for (int n=0; n < 49; n++) {
    CoNLL09Sentence sent=reader.next();
    SimpleAnnoSentence simpleSent=sent.toSimpleAnnoSentence(csPrm.useGoldSyntax);
    log.info(""String_Node_Str"");
    SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,simpleSent,cs);
    log.info(""String_Node_Str"");
    for (int i=0; i < sent.size(); i++) {
      for (int j=0; j < sent.size(); j++) {
        fe.createFeatureSet(i,j);
      }
    }
    timer.split();
    log.info(""String_Node_Str"");
  }
  timer.stop();
  log.info(""String_Node_Str"" + timer.avgMs());
}","@Test public void testZhaoFeatureBuilding() throws ParseException, IOException {
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.withSupervision=true;
  fePrm.useNaradFeats=false;
  fePrm.useLexicalDepPathFeats=false;
  fePrm.useSimpleFeats=false;
  fePrm.useZhaoFeats=true;
  fePrm.useBjorkelundFeats=false;
  File train=new File(""String_Node_Str"");
  CoNLL09FileReader reader=new CoNLL09FileReader(train);
  Timer timer=new Timer();
  timer.start();
  for (int n=0; n < 49; n++) {
    CoNLL09Sentence sent=reader.next();
    SimpleAnnoSentence simpleSent=sent.toSimpleAnnoSentence(csPrm.useGoldSyntax);
    log.info(""String_Node_Str"");
    SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,simpleSent,cs);
    log.info(""String_Node_Str"");
    for (int i=-1; i < sent.size(); i++) {
      for (int j=0; j < sent.size(); j++) {
        fe.createFeatureSet(i,j);
      }
    }
    timer.split();
    log.info(""String_Node_Str"");
  }
  timer.stop();
  log.info(""String_Node_Str"" + timer.avgMs());
}",0.9810989010989012
131445,"@Override public FeatureVector calcObsFeatureVector(int factorId){
  SrlFactor f=(SrlFactor)sfg.getFactor(factorId);
  SrlFactorTemplate ft=f.getFactorType();
  VarSet vars=f.getVars();
  ArrayList<String> obsFeats;
  Alphabet<Feature> alphabet;
  if (ft == SrlFactorTemplate.LINK_ROLE_BINARY || ft == SrlFactorTemplate.LINK_UNARY || ft == SrlFactorTemplate.ROLE_UNARY) {
    Var var=vars.iterator().next();
    int parent;
    int child;
    if (var instanceof LinkVar) {
      parent=((LinkVar)var).getParent();
      child=((LinkVar)var).getChild();
    }
 else {
      parent=((RoleVar)var).getParent();
      child=((RoleVar)var).getChild();
    }
    if (parent == -1) {
      obsFeats=sentFeatExt.fastGetObsFeats(child);
    }
 else {
      obsFeats=sentFeatExt.fastGetObsFeats(parent,child);
    }
  }
 else   if (ft == SrlFactorTemplate.SENSE_UNARY) {
    SenseVar var=(SenseVar)vars.iterator().next();
    int parent=var.getParent();
    obsFeats=sentFeatExt.fastGetObsFeats(parent);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  alphabet=fts.getTemplate(f).getAlphabet();
  String prefix=getObsVarsStates(f) + ""String_Node_Str"";
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + obsFeats.size());
  }
  FeatureVector fv=new FeatureVector(obsFeats.size());
  ArrayList<String> biasFeats=new ArrayList<String>();
  biasFeats.add(""String_Node_Str"");
  if (!""String_Node_Str"".equals(prefix)) {
    biasFeats.add(prefix + ""String_Node_Str"");
  }
  addFeatures(biasFeats,alphabet,""String_Node_Str"",fv,true);
  addFeatures(obsFeats,alphabet,prefix,fv,false);
  return fv;
}","@Override public FeatureVector calcObsFeatureVector(int factorId){
  SrlFactor f=(SrlFactor)sfg.getFactor(factorId);
  SrlFactorTemplate ft=f.getFactorType();
  VarSet vars=f.getVars();
  ArrayList<String> obsFeats;
  Alphabet<Feature> alphabet;
  if (ft == SrlFactorTemplate.LINK_ROLE_BINARY || ft == SrlFactorTemplate.LINK_UNARY || ft == SrlFactorTemplate.ROLE_UNARY) {
    Var var=vars.iterator().next();
    int parent;
    int child;
    if (var instanceof LinkVar) {
      parent=((LinkVar)var).getParent();
      child=((LinkVar)var).getChild();
    }
 else {
      parent=((RoleVar)var).getParent();
      child=((RoleVar)var).getChild();
    }
    obsFeats=sentFeatExt.fastGetObsFeats(parent,child);
  }
 else   if (ft == SrlFactorTemplate.SENSE_UNARY) {
    SenseVar var=(SenseVar)vars.iterator().next();
    int parent=var.getParent();
    obsFeats=sentFeatExt.fastGetObsFeats(parent);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  alphabet=fts.getTemplate(f).getAlphabet();
  String prefix=getObsVarsStates(f) + ""String_Node_Str"";
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + obsFeats.size());
  }
  FeatureVector fv=new FeatureVector(obsFeats.size());
  ArrayList<String> biasFeats=new ArrayList<String>();
  biasFeats.add(""String_Node_Str"");
  if (!""String_Node_Str"".equals(prefix)) {
    biasFeats.add(prefix + ""String_Node_Str"");
  }
  addFeatures(biasFeats,alphabet,""String_Node_Str"",fv,true);
  addFeatures(obsFeats,alphabet,prefix,fv,false);
  return fv;
}",0.9646609360076408
131446,"public void addFeatures(FeatTemplate tpl,int pidx,int cidx,List<Object> feats){
  int idx=pidx;
  if (tpl instanceof FeatTemplate1) {
    addTokenFeature((FeatTemplate1)tpl,idx,feats);
  }
 else   if (tpl instanceof FeatTemplate2) {
    addTokenFeatures((FeatTemplate2)tpl,idx,feats);
  }
 else   if (tpl instanceof FeatTemplate3) {
    addListFeature((FeatTemplate3)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate4) {
    addOtherFeature((FeatTemplate4)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof BigramTemplate) {
    addBigramFeature((BigramTemplate)tpl,pidx,cidx,feats);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + tpl);
  }
}","public void addFeatures(FeatTemplate tpl,int pidx,int cidx,List<Object> feats){
  int idx=pidx;
  if (tpl instanceof FeatTemplate1) {
    addTokenFeature((FeatTemplate1)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate2) {
    addTokenFeatures((FeatTemplate2)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate3) {
    addListFeature((FeatTemplate3)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof FeatTemplate4) {
    addOtherFeature((FeatTemplate4)tpl,pidx,cidx,feats);
  }
 else   if (tpl instanceof BigramTemplate) {
    addBigramFeature((BigramTemplate)tpl,pidx,cidx,feats);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + tpl);
  }
}",0.9912663755458516
131447,"/** 
 * Adds features of the form:  p.bc1 c_{head}.dr first(t, NOUN, path(p, root)).bc0
 * @param tpl Structured feature template.
 * @param idx Token to which the original position refers.
 * @param feats The feature list to which this will be added.
 */
public void addTokenFeature(FeatTemplate1 tpl,int idx,List<Object> feats){
  Position pos=tpl.pos;
  PositionModifier mod=tpl.mod;
  TokProperty prop=tpl.prop;
  idx=getModifiedPosition(mod,idx);
  String val=getTokProp(prop,idx);
  if (val != null) {
    Object feat=toFeat(tpl.getName(),val);
    feats.add(feat);
  }
}","/** 
 * Adds features of the form:  p.bc1 c_{head}.dr first(t, NOUN, path(p, root)).bc0
 * @param tpl Structured feature template.
 * @param pidx Token to which the parent position refers.
 * @param cidx Token to which the child position refers.
 * @param feats The feature list to which this will be added.
 */
public void addTokenFeature(FeatTemplate1 tpl,int pidx,int cidx,List<Object> feats){
  Position pos=tpl.pos;
  PositionModifier mod=tpl.mod;
  TokProperty prop=tpl.prop;
  int idx=getIndexOfPosition(pidx,cidx,pos);
  idx=getModifiedPosition(mod,idx);
  String val=getTokProp(prop,idx);
  if (val != null) {
    Object feat=toFeat(tpl.getName(),val);
    feats.add(feat);
  }
}",0.8648221343873518
131448,"/** 
 * Same as above except that it permits properties of the token which expand to multiple strings. 
 */
public void addTokenFeatures(FeatTemplate2 tpl,int idx,List<Object> feats){
  Position pos=tpl.pos;
  PositionModifier mod=tpl.mod;
  TokPropList prop=tpl.prop;
  idx=getModifiedPosition(mod,idx);
  List<String> vals=getTokPropList(prop,idx);
  for (  String val : vals) {
    feats.add(toFeat(tpl.getName(),val));
  }
}","/** 
 * Same as above except that it permits properties of the token which expand to multiple strings. 
 */
public void addTokenFeatures(FeatTemplate2 tpl,int pidx,int cidx,List<Object> feats){
  Position pos=tpl.pos;
  PositionModifier mod=tpl.mod;
  TokPropList prop=tpl.prop;
  int idx=getIndexOfPosition(pidx,cidx,pos);
  idx=getModifiedPosition(mod,idx);
  List<String> vals=getTokPropList(prop,idx);
  for (  String val : vals) {
    feats.add(toFeat(tpl.getName(),val));
  }
}",0.9396267837541163
131449,"public String getGeneologicalRelation(){
  if (pidx == aidx) {
    return ""String_Node_Str"";
  }
 else   if (pidx == parents[aidx]) {
    return ""String_Node_Str"";
  }
 else   if (pidx == -1) {
    return ""String_Node_Str"";
  }
 else   if (aidx == -1) {
    return ""String_Node_Str"";
  }
 else   if (parents[pidx] == aidx) {
    return ""String_Node_Str"";
  }
 else   if (parents[pidx] == parents[aidx]) {
    return ""String_Node_Str"";
  }
 else   if (DepTree.isAncestor(pidx,aidx,parents)) {
    return ""String_Node_Str"";
  }
 else   if (DepTree.isAncestor(aidx,pidx,parents)) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String getGeneologicalRelation(){
  if (pidx == aidx) {
    return ""String_Node_Str"";
  }
 else   if (hasParent(aidx) && pidx == parents[aidx]) {
    return ""String_Node_Str"";
  }
 else   if (hasParent(pidx) && parents[pidx] == aidx) {
    return ""String_Node_Str"";
  }
 else   if (hasParent(aidx) && hasParent(pidx) && parents[pidx] == parents[aidx]) {
    return ""String_Node_Str"";
  }
 else   if (pidx == -1) {
    return ""String_Node_Str"";
  }
 else   if (aidx == -1) {
    return ""String_Node_Str"";
  }
 else   if (DepTree.isAncestor(pidx,aidx,parents)) {
    return ""String_Node_Str"";
  }
 else   if (DepTree.isAncestor(aidx,pidx,parents)) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.6123919308357348
131450,"private void ensureChildren(){
  if (children != null) {
    return;
  }
  if (idx < 0 || idx >= sent.size()) {
    this.children=new ArrayList<Integer>();
    this.children.add(-1);
  }
 else {
    this.children=DepTree.getChildrenOf(parents,idx);
  }
}","private void ensureChildren(){
  if (children != null) {
    return;
  }
  this.children=DepTree.getChildrenOf(parents,idx);
}",0.6631578947368421
131451,"private void cacheNoFarChildren(){
  this.noFarChildren=new ArrayList<Integer>();
  this.noFarChildren.add(nearLeftChild);
  this.noFarChildren.add(nearRightChild);
}","private void cacheNoFarChildren(){
  ensureChildren();
  this.noFarChildren=new ArrayList<Integer>();
  for (int i=0; i < children.size(); i++) {
    int child=children.get(i);
    if (child < idx && i == 0) {
      continue;
    }
 else     if (child > idx && i == children.size() - 1) {
      continue;
    }
    this.noFarChildren.add(child);
  }
}",0.4177949709864603
131452,"@Test public void testZhaoObjectParentsChildrenSentence2(){
  CoNLL09Sentence sent=getSpanishConll09Sentence2();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  SimpleAnnoSentence simpleSent=sent.toSimpleAnnoSentence(csPrm.useGoldSyntax);
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(Lists.getList(simpleSent));
  FeaturizedToken zhaoObj=new FeaturizedToken(3,simpleSent,cs);
  assertEquals(zhaoObj.getParent(),5);
  assertEquals(zhaoObj.getChildren(),new ArrayList<Integer>());
  assertEquals(zhaoObj.getFarLeftChild(),-2);
  assertEquals(zhaoObj.getFarLeftChild(),-2);
  assertEquals(zhaoObj.getFarRightChild(),-2);
  assertEquals(zhaoObj.getNearLeftChild(),-2);
  assertEquals(zhaoObj.getNearRightChild(),-2);
  assertEquals(zhaoObj.getHighSupportNoun(),-1);
  assertEquals(zhaoObj.getLowSupportNoun(),-1);
  assertEquals(zhaoObj.getHighSupportVerb(),1);
  assertEquals(zhaoObj.getLowSupportVerb(),5);
  ArrayList<Integer> expectedNoFarChildren=new ArrayList<Integer>();
  expectedNoFarChildren.add(-2);
  expectedNoFarChildren.add(-2);
  assertEquals(zhaoObj.getNoFarChildren(),expectedNoFarChildren);
}","@Test public void testZhaoObjectParentsChildrenSentence2(){
  CoNLL09Sentence sent=getSpanishConll09Sentence2();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  SimpleAnnoSentence simpleSent=sent.toSimpleAnnoSentence(csPrm.useGoldSyntax);
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(Lists.getList(simpleSent));
  FeaturizedToken zhaoObj=new FeaturizedToken(3,simpleSent,cs);
  assertEquals(zhaoObj.getParent(),5);
  assertEquals(zhaoObj.getChildren(),new ArrayList<Integer>());
  assertEquals(zhaoObj.getFarLeftChild(),-2);
  assertEquals(zhaoObj.getFarLeftChild(),-2);
  assertEquals(zhaoObj.getFarRightChild(),-2);
  assertEquals(zhaoObj.getNearLeftChild(),-2);
  assertEquals(zhaoObj.getNearRightChild(),-2);
  assertEquals(zhaoObj.getHighSupportNoun(),-1);
  assertEquals(zhaoObj.getLowSupportNoun(),-1);
  assertEquals(zhaoObj.getHighSupportVerb(),1);
  assertEquals(zhaoObj.getLowSupportVerb(),5);
  ArrayList<Integer> expectedNoFarChildren=new ArrayList<Integer>();
  assertEquals(zhaoObj.getNoFarChildren(),expectedNoFarChildren);
}",0.935226264418811
131453,"public String getGeneologicalRelation(){
  if (pidx == aidx) {
    return ""String_Node_Str"";
  }
 else   if (pidx == parents[aidx]) {
    return ""String_Node_Str"";
  }
 else   if (parents[pidx] == aidx) {
    return ""String_Node_Str"";
  }
 else   if (parents[pidx] == parents[aidx]) {
    return ""String_Node_Str"";
  }
 else   if (DepTree.isAncestor(pidx,aidx,parents)) {
    return ""String_Node_Str"";
  }
 else   if (DepTree.isAncestor(aidx,pidx,parents)) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String getGeneologicalRelation(){
  if (pidx == aidx) {
    return ""String_Node_Str"";
  }
 else   if (pidx == parents[aidx]) {
    return ""String_Node_Str"";
  }
 else   if (pidx == -1) {
    return ""String_Node_Str"";
  }
 else   if (aidx == -1) {
    return ""String_Node_Str"";
  }
 else   if (parents[pidx] == aidx) {
    return ""String_Node_Str"";
  }
 else   if (parents[pidx] == parents[aidx]) {
    return ""String_Node_Str"";
  }
 else   if (DepTree.isAncestor(pidx,aidx,parents)) {
    return ""String_Node_Str"";
  }
 else   if (DepTree.isAncestor(aidx,pidx,parents)) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.8993288590604027
131454,"public void shutdown(){
  pool.shutdown();
  try {
    pool.awaitTermination(10,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public void shutdown(){
  Threads.shutdownSafelyOrDie(pool);
}",0.3651452282157676
131455,"public void shutdown(){
  pool.shutdown();
  try {
    pool.awaitTermination(10,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public void shutdown(){
  Threads.shutdownSafelyOrDie(pool);
}",0.3651452282157676
131456,"public static void main(String[] args) throws IOException {
  ArgParser parser=new ArgParser(SrlRunner.class);
  parser.addClass(SrlRunner.class);
  try {
    parser.parseArgs(args);
  }
 catch (  ParseException e) {
    log.error(e.getMessage());
    parser.printUsage();
    System.exit(1);
  }
  Prng.seed(seed);
  SrlRunner pipeline=new SrlRunner();
  try {
    pipeline.run();
  }
 catch (  ParseException e1) {
    log.error(e1.getMessage());
    parser.printUsage();
    System.exit(1);
  }
}","public static void main(String[] args){
  try {
    ArgParser parser=new ArgParser(SrlRunner.class);
    parser.addClass(SrlRunner.class);
    try {
      parser.parseArgs(args);
    }
 catch (    ParseException e) {
      log.error(e.getMessage());
      parser.printUsage();
      System.exit(1);
    }
    Prng.seed(seed);
    SrlRunner pipeline=new SrlRunner();
    try {
      pipeline.run();
    }
 catch (    ParseException e1) {
      log.error(e1.getMessage());
      parser.printUsage();
      System.exit(1);
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    System.exit(1);
  }
  System.exit(0);
}",0.8538324420677362
131457,"public static <T>void awaitAll(List<Future<T>> futures){
  for (  Future<T> f : futures) {
    try {
      f.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
}","public static <T>void awaitAll(ExecutorService pool,List<Future<T>> futures){
  int count=0;
  try {
    boolean[] isDone=new boolean[futures.size()];
    Arrays.fill(isDone,false);
    int i=0;
    while (true) {
      if (count == futures.size()) {
        break;
      }
 else       if (isDone[i]) {
      }
 else {
        Future<T> f=futures.get(i);
        try {
          f.get(100,TimeUnit.MILLISECONDS);
          count++;
          isDone[i]=true;
        }
 catch (        InterruptedException e) {
          shutdownSafelyOrDie(pool);
          throw new RuntimeException(e);
        }
catch (        ExecutionException e) {
          shutdownSafelyOrDie(pool);
          throw new RuntimeException(e);
        }
catch (        TimeoutException e) {
        }
      }
      i=i + 1 % futures.size();
    }
  }
  finally {
    if (count != futures.size()) {
      for (      Future<T> f : futures) {
        boolean canceled=f.cancel(true);
        log.error(""String_Node_Str"" + canceled);
      }
    }
  }
}",0.3675344563552833
131458,"public static <T>void addAllResults(ExecutorService pool,ArrayList<Callable<T>> tasks,List<T> results){
  try {
    List<Future<T>> futures=pool.invokeAll(tasks);
    for (    Future<T> f : futures) {
      results.add(f.get());
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
}","public static <T>void addAllResults(ExecutorService pool,ArrayList<Callable<T>> tasks,List<T> results){
  try {
    List<Future<T>> futures=invokeAndAwaitAll(pool,tasks);
    for (    Future<T> f : futures) {
      results.add(f.get());
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
}",0.969309462915601
131459,"public static void invokeAndAwaitAll(ExecutorService pool,List<Callable<Object>> tasks){
  try {
    awaitAll(pool.invokeAll(tasks));
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public static <T>List<Future<T>> invokeAndAwaitAll(ExecutorService pool,List<Callable<T>> tasks){
  List<Future<T>> futures=executeAll(pool,tasks);
  awaitAll(pool,futures);
  return futures;
}",0.5700245700245701
131460,"public static <T>List<T> getAllResults(ExecutorService pool,ArrayList<Callable<T>> tasks){
  try {
    List<T> results=new ArrayList<T>();
    List<Future<T>> futures=pool.invokeAll(tasks);
    for (    Future<T> f : futures) {
      results.add(f.get());
    }
    return results;
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
}","public static <T>List<T> getAllResults(ExecutorService pool,ArrayList<Callable<T>> tasks){
  try {
    List<T> results=new ArrayList<T>();
    List<Future<T>> futures=invokeAndAwaitAll(pool,tasks);
    for (    Future<T> f : futures) {
      results.add(f.get());
    }
    return results;
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
}",0.9726027397260274
131461,"@Override public Integer call() throws Exception {
  return i;
}","@Override public Object call() throws Exception {
  Thread.sleep(100);
  if (i == 3) {
    throw new OutOfMemoryError(""String_Node_Str"");
  }
 else {
    while (true) {
      Thread.sleep(1000);
    }
  }
}",0.3703703703703703
131462,"private void cacheLinePath(){
  this.linePath=new ArrayList<Integer>();
  int startIdx;
  int endIdx;
  if (pidx < aidx) {
    startIdx=pidx;
    endIdx=aidx;
  }
 else {
    startIdx=aidx;
    endIdx=pidx;
  }
  while (startIdx < endIdx) {
    this.linePath.add(startIdx);
    startIdx++;
  }
}","private void cacheLinePath(){
  this.linePath=new ArrayList<Integer>();
  if (pidx < aidx) {
    for (int i=pidx; i <= aidx; i++) {
      this.linePath.add(i);
    }
  }
 else {
    for (int i=pidx; i >= aidx; i--) {
      this.linePath.add(i);
    }
  }
}",0.3666061705989111
131463,"public FeaturizedToken getFeatTok(int idx){
  if (idx < 0) {
    return featuredHeadDefault;
  }
 else   if (idx >= toks.length) {
    return featuredTailDefault;
  }
  if (toks[idx] == null) {
    this.toks[idx]=new FeaturizedToken(idx,sent);
  }
  return toks[idx];
}","public FeaturizedToken getFeatTok(int idx){
  if (idx < 0) {
    return featuredHeadDefault;
  }
 else   if (idx >= toks.length) {
    return featuredTailDefault;
  }
  if (toks[idx] == null) {
    this.toks[idx]=new FeaturizedToken(idx,sent,cs);
  }
  return toks[idx];
}",0.9944547134935304
131464,"public FeaturizedSentence(SimpleAnnoSentence sent){
  this.sent=sent;
  int[] parents=sent.getParents();
  this.toks=new FeaturizedToken[sent.size()];
  this.pairs=new FeaturizedTokenPair[sent.size()][sent.size()];
  this.featuredHeadDefault=new FeaturizedToken(-1,sent);
  this.featuredTailDefault=new FeaturizedToken(sent.size(),sent);
}","public FeaturizedSentence(SimpleAnnoSentence sent,CorpusStatistics cs){
  this.sent=sent;
  this.cs=cs;
  this.toks=new FeaturizedToken[sent.size()];
  this.pairs=new FeaturizedTokenPair[sent.size()][sent.size()];
  this.featuredHeadDefault=new FeaturizedToken(-1,sent,cs);
  this.featuredTailDefault=new FeaturizedToken(sent.size(),sent,cs);
}",0.9019033674963396
131465,"private void ensureHighLowSupport(){
  if (cachedSupports) {
    return;
  }
  ensureRootPath();
  String parentPos;
  boolean haveArgLow=false;
  boolean havePredLow=false;
  int i;
  String supportNounTag=""String_Node_Str"";
  String supportVerbTag=""String_Node_Str"";
  this.lowSupportNoun=-1;
  this.highSupportNoun=-1;
  this.lowSupportVerb=-1;
  this.highSupportVerb=-1;
  for (  Pair<Integer,Dir> a : rootPath) {
    i=a.get1();
    if (i == -1) {
      break;
    }
    parentPos=sent.getPosTag(i);
    if (parentPos.equals(supportNounTag)) {
      if (!haveArgLow) {
        haveArgLow=true;
        this.lowSupportNoun=i;
        this.highSupportNoun=i;
      }
 else {
        this.highSupportNoun=i;
      }
    }
 else     if (parentPos.equals(supportVerbTag)) {
      if (!havePredLow) {
        havePredLow=true;
        this.lowSupportVerb=i;
        this.highSupportVerb=i;
      }
 else {
        this.highSupportVerb=i;
      }
    }
  }
  cachedSupports=true;
}","private void ensureHighLowSupport(){
  if (cachedSupports) {
    return;
  }
  if (cs == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  ensureRootPath();
  String parentPos;
  boolean haveArgLow=false;
  boolean havePredLow=false;
  int i;
  this.lowSupportNoun=-1;
  this.highSupportNoun=-1;
  this.lowSupportVerb=-1;
  this.highSupportVerb=-1;
  for (  Pair<Integer,Dir> a : rootPath) {
    i=a.get1();
    if (i == -1) {
      break;
    }
    parentPos=sent.getPosTag(i);
    if (LanguageConstants.isNoun(parentPos,cs.getLanguage())) {
      if (!haveArgLow) {
        haveArgLow=true;
        this.lowSupportNoun=i;
        this.highSupportNoun=i;
      }
 else {
        this.highSupportNoun=i;
      }
    }
 else     if (LanguageConstants.isVerb(parentPos,cs.getLanguage())) {
      if (!havePredLow) {
        havePredLow=true;
        this.lowSupportVerb=i;
        this.highSupportVerb=i;
      }
 else {
        this.highSupportVerb=i;
      }
    }
  }
  cachedSupports=true;
}",0.6669980119284294
131466,"public FeaturizedToken(int idx,SimpleAnnoSentence sent){
  this.idx=idx;
  this.sent=sent;
  this.parents=sent.getParents();
  this.nearLeftSibling=-1;
  this.nearRightSibling=sent.size();
}","public FeaturizedToken(int idx,SimpleAnnoSentence sent,CorpusStatistics cs){
  this.idx=idx;
  this.sent=sent;
  this.parents=sent.getParents();
  this.nearLeftSibling=-1;
  this.nearRightSibling=sent.size();
  this.cs=cs;
}",0.9178743961352656
131467,"@Test public void testZhaoObjectParentsChildrenSentence2(){
  CoNLL09Sentence sent=getSpanishConll09Sentence2();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  SimpleAnnoSentence simpleSent=sent.toSimpleAnnoSentence(csPrm.useGoldSyntax);
  FeaturizedToken zhaoObj=new FeaturizedToken(3,simpleSent);
  assertEquals(zhaoObj.getParent(),5);
  assertEquals(zhaoObj.getChildren(),new ArrayList<Integer>());
  assertEquals(zhaoObj.getFarLeftChild(),-2);
  assertEquals(zhaoObj.getFarLeftChild(),-2);
  assertEquals(zhaoObj.getFarRightChild(),-2);
  assertEquals(zhaoObj.getNearLeftChild(),-2);
  assertEquals(zhaoObj.getNearRightChild(),-2);
  assertEquals(zhaoObj.getHighSupportNoun(),-1);
  assertEquals(zhaoObj.getLowSupportNoun(),-1);
  assertEquals(zhaoObj.getHighSupportVerb(),1);
  assertEquals(zhaoObj.getLowSupportVerb(),5);
  ArrayList<Integer> expectedNoFarChildren=new ArrayList<Integer>();
  expectedNoFarChildren.add(-2);
  expectedNoFarChildren.add(-2);
  assertEquals(zhaoObj.getNoFarChildren(),expectedNoFarChildren);
}","@Test public void testZhaoObjectParentsChildrenSentence2(){
  CoNLL09Sentence sent=getSpanishConll09Sentence2();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  SimpleAnnoSentence simpleSent=sent.toSimpleAnnoSentence(csPrm.useGoldSyntax);
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(Lists.getList(simpleSent));
  FeaturizedToken zhaoObj=new FeaturizedToken(3,simpleSent,cs);
  assertEquals(zhaoObj.getParent(),5);
  assertEquals(zhaoObj.getChildren(),new ArrayList<Integer>());
  assertEquals(zhaoObj.getFarLeftChild(),-2);
  assertEquals(zhaoObj.getFarLeftChild(),-2);
  assertEquals(zhaoObj.getFarRightChild(),-2);
  assertEquals(zhaoObj.getNearLeftChild(),-2);
  assertEquals(zhaoObj.getNearRightChild(),-2);
  assertEquals(zhaoObj.getHighSupportNoun(),-1);
  assertEquals(zhaoObj.getLowSupportNoun(),-1);
  assertEquals(zhaoObj.getHighSupportVerb(),1);
  assertEquals(zhaoObj.getLowSupportVerb(),5);
  ArrayList<Integer> expectedNoFarChildren=new ArrayList<Integer>();
  expectedNoFarChildren.add(-2);
  expectedNoFarChildren.add(-2);
  assertEquals(zhaoObj.getNoFarChildren(),expectedNoFarChildren);
}",0.9587073608617596
131468,"public SentFeatureExtractor(SentFeatureExtractorPrm prm,SimpleAnnoSentence sent,CorpusStatistics cs){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.sig=cs.sig;
  if (!prm.biasOnly) {
    this.parents=getParents(sent);
    if (prm.useZhaoFeats || prm.useDepPathFeats || prm.useBjorkelundFeats) {
      fSent=new FeaturizedSentence(sent);
    }
    if (prm.useAllTemplates) {
      this.prm.formFeats=true;
      this.prm.lemmaFeats=true;
      this.prm.tagFeats=true;
      this.prm.morphFeats=true;
      this.prm.deprelFeats=true;
      this.prm.childrenFeats=true;
      this.prm.pathFeats=true;
      this.prm.syntacticConnectionFeats=true;
    }
  }
 else {
    this.parents=null;
  }
}","public SentFeatureExtractor(SentFeatureExtractorPrm prm,SimpleAnnoSentence sent,CorpusStatistics cs){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.sig=cs.sig;
  if (!prm.biasOnly) {
    this.parents=getParents(sent);
    if (prm.useZhaoFeats || prm.useDepPathFeats || prm.useBjorkelundFeats) {
      fSent=new FeaturizedSentence(sent,cs);
    }
    if (prm.useAllTemplates) {
      this.prm.formFeats=true;
      this.prm.lemmaFeats=true;
      this.prm.tagFeats=true;
      this.prm.morphFeats=true;
      this.prm.deprelFeats=true;
      this.prm.childrenFeats=true;
      this.prm.pathFeats=true;
      this.prm.syntacticConnectionFeats=true;
    }
  }
 else {
    this.parents=null;
  }
}",0.9978586723768736
131469,"public TemplateLanguageExtractor(SimpleAnnoSentence sent,CorpusStatistics cs){
  this.sig=cs.sig;
  this.fSent=new FeaturizedSentence(sent);
}","public TemplateLanguageExtractor(SimpleAnnoSentence sent,CorpusStatistics cs){
  this.sig=cs.sig;
  this.fSent=new FeaturizedSentence(sent,cs);
}",0.989547038327526
131470,"/** 
 * Runs CKY and populates the chart.
 * @param sent The input sentence.
 * @param grammar The input grammar.
 * @param loopOrder The loop order to use when parsing.
 * @param chart The output chart.
 */
public static final void parseSentence(final int[] sent,final CnfGrammar grammar,final LoopOrder loopOrder,final Chart chart){
  for (int i=0; i <= sent.length - 1; i++) {
    ChartCell cell=chart.getCell(i,i + 1);
    for (    final Rule r : grammar.getLexicalRulesWithChild(sent[i])) {
      double score=r.getScore();
      cell.updateCell(r.getParent(),score,i + 1,r);
    }
  }
  for (int width=1; width <= sent.length; width++) {
    for (int start=0; start <= sent.length - width; start++) {
      int end=start + width;
      ChartCell cell=chart.getCell(start,end);
      if (loopOrder == LoopOrder.CARTESIAN_PRODUCT) {
        processCellCartesianProduct(grammar,chart,start,end,cell);
      }
 else       if (loopOrder == LoopOrder.LEFT_CHILD) {
        processCellLeftChild(grammar,chart,start,end,cell);
      }
 else       if (loopOrder == LoopOrder.RIGHT_CHILD) {
        processCellRightChild(grammar,chart,start,end,cell);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + loopOrder);
      }
      ScoresSnapshot scoresSnapshot=cell.getScoresSnapshot();
      int[] nts=cell.getNts();
      for (      final int parentNt : nts) {
        for (        final Rule r : grammar.getUnaryRulesWithChild(parentNt)) {
          double score=r.getScore() + scoresSnapshot.getScore(r.getLeftChild());
          cell.updateCell(r.getParent(),score,end,r);
        }
      }
      cell.close();
    }
  }
}","/** 
 * Runs CKY and populates the chart.
 * @param sent The input sentence.
 * @param grammar The input grammar.
 * @param loopOrder The loop order to use when parsing.
 * @param chart The output chart.
 */
public static final void parseSentence(final int[] sent,final CnfGrammar grammar,final LoopOrder loopOrder,final Chart chart){
  for (int i=0; i <= sent.length - 1; i++) {
    ChartCell cell=chart.getCell(i,i + 1);
    for (    final Rule r : grammar.getLexicalRulesWithChild(sent[i])) {
      double score=r.getScore();
      cell.updateCell(r.getParent(),score,i + 1,r);
    }
  }
  for (int width=1; width <= sent.length; width++) {
    for (int start=0; start <= sent.length - width; start++) {
      int end=start + width;
      ChartCell cell=chart.getCell(start,end);
      if (loopOrder == LoopOrder.CARTESIAN_PRODUCT) {
        processCellCartesianProduct(grammar,chart,start,end,cell);
      }
 else       if (loopOrder == LoopOrder.LEFT_CHILD) {
        processCellLeftChild(grammar,chart,start,end,cell);
      }
 else       if (loopOrder == LoopOrder.RIGHT_CHILD) {
        processCellRightChild(grammar,chart,start,end,cell);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + loopOrder);
      }
      ScoresSnapshot scoresSnapshot=cell.getScoresSnapshot();
      int[] nts=cell.getNts();
      for (      final int parentNt : nts) {
        for (        final Rule r : grammar.getUnaryRulesWithChild(parentNt)) {
          double score=r.getScore() + scoresSnapshot.getScore(r.getLeftChild());
          cell.updateCell(r.getParent(),score,end,r);
        }
      }
      if (width == sent.length) {
        scoresSnapshot=cell.getScoresSnapshot();
        nts=cell.getNts();
        for (        final int parentNt : nts) {
          for (          final Rule r : grammar.getUnaryRulesWithChild(parentNt)) {
            double score=r.getScore() + scoresSnapshot.getScore(r.getLeftChild());
            cell.updateCell(r.getParent(),score,end,r);
          }
        }
      }
      cell.close();
    }
  }
}",0.8808879263670818
131471,"public void run() throws IOException {
  log.info(""String_Node_Str"");
  CnfGrammarReader builder=new CnfGrammarReader();
  builder.loadFromFile(grammar);
  CnfGrammar grammar=builder.getGrammar(loopOrder);
  log.info(""String_Node_Str"" + grammar.getNumNonTerminals());
  log.info(""String_Node_Str"" + grammar.getNumLexicalTypes());
  log.info(""String_Node_Str"" + train);
  Alphabet<Label> lexAlphabet=new Alphabet<Label>();
  Alphabet<Label> ntAlphabet=new Alphabet<Label>();
  NaryTreebank naryTrees=readPtbTrees(lexAlphabet,ntAlphabet);
  log.info(""String_Node_Str"" + ntAlphabet.size());
  log.info(""String_Node_Str"" + lexAlphabet.size());
  log.info(""String_Node_Str"");
  removeNullElements(naryTrees);
  log.info(""String_Node_Str"");
  removeFunctionTagsAndTraces(naryTrees);
  log.info(""String_Node_Str"");
  useSignaturesForUnknownWords(naryTrees,grammar);
  if (treeFile != null) {
    log.info(""String_Node_Str"" + treeFile);
    naryTrees.writeTreesInOneLineFormat(treeFile);
    naryTrees.writeSentencesInOneLineFormat(treeFile + ""String_Node_Str"");
  }
  naryTrees.resetAlphabets(grammar.getLexAlphabet(),ntAlphabet);
  log.info(""String_Node_Str"" + naryTrees.size() + ""String_Node_Str"");
  BinaryTreebank binaryParses=new BinaryTreebank();
  Timer timer=new Timer();
  CkyPcfgParserPrm prm=new CkyPcfgParserPrm();
  prm.loopOrder=loopOrder;
  prm.cellType=cellType;
  prm.cacheChart=true;
  prm.parseType=ParseType.VITERBI;
  CkyPcfgParser parser=new CkyPcfgParser(prm);
  for (  NaryTree tree : naryTrees) {
    Sentence sent=tree.getSentence();
    timer.start();
    Chart chart=parser.parseSentence(sent,grammar);
    timer.stop();
    Pair<BinaryTree,Double> pair=chart.getViterbiParse();
    binaryParses.add(pair.get1());
    log.debug(""String_Node_Str"" + timer.avgSec());
  }
  binaryParses.resetAlphabets(lexAlphabet,ntAlphabet);
  log.info(""String_Node_Str"");
  removeRefinements(binaryParses);
  log.info(""String_Node_Str"");
  NaryTreebank naryParses=binaryParses.collapseToNary(ntAlphabet);
  if (parseFile != null) {
    log.info(""String_Node_Str"" + parseFile);
    naryParses.writeTreesInOneLineFormat(parseFile);
  }
  if (evalbDir != null) {
    Evalb evalb=new Evalb(evalbDir);
    evalb.runEvalb(treeFile,parseFile,new File(""String_Node_Str""));
  }
}","public void run() throws IOException {
  log.info(""String_Node_Str"");
  CnfGrammarReader builder=new CnfGrammarReader();
  builder.loadFromFile(grammar);
  CnfGrammar grammar=builder.getGrammar(loopOrder);
  log.info(""String_Node_Str"" + grammar.getNumNonTerminals());
  log.info(""String_Node_Str"" + grammar.getNumLexicalTypes());
  log.info(""String_Node_Str"" + train);
  Alphabet<Label> lexAlphabet=new Alphabet<Label>();
  Alphabet<Label> ntAlphabet=new Alphabet<Label>();
  NaryTreebank naryTrees=readPtbTrees(lexAlphabet,ntAlphabet);
  log.info(""String_Node_Str"" + ntAlphabet.size());
  log.info(""String_Node_Str"" + lexAlphabet.size());
  log.info(""String_Node_Str"");
  removeNullElements(naryTrees);
  log.info(""String_Node_Str"");
  removeFunctionTagsAndTraces(naryTrees);
  log.info(""String_Node_Str"");
  useSignaturesForUnknownWords(naryTrees,grammar);
  if (treeFile != null) {
    log.info(""String_Node_Str"" + treeFile);
    naryTrees.writeTreesInOneLineFormat(treeFile);
    naryTrees.writeSentencesInOneLineFormat(treeFile + ""String_Node_Str"");
  }
  naryTrees.resetAlphabets(grammar.getLexAlphabet(),ntAlphabet);
  log.info(""String_Node_Str"" + naryTrees.size() + ""String_Node_Str"");
  BinaryTreebank binaryParses=new BinaryTreebank();
  Timer timer=new Timer();
  CkyPcfgParserPrm prm=new CkyPcfgParserPrm();
  prm.loopOrder=loopOrder;
  prm.cellType=cellType;
  prm.cacheChart=true;
  prm.parseType=ParseType.VITERBI;
  CkyPcfgParser parser=new CkyPcfgParser(prm);
  for (  NaryTree tree : naryTrees) {
    Sentence sent=tree.getSentence();
    timer.start();
    Chart chart=parser.parseSentence(sent,grammar);
    timer.stop();
    Pair<BinaryTree,Double> pair=chart.getViterbiParse();
    BinaryTree parse=pair.get1();
    if (parse == null) {
      log.warn(""String_Node_Str"" + sent);
    }
    binaryParses.add(parse);
    log.debug(""String_Node_Str"" + timer.avgSec());
  }
  binaryParses.resetAlphabets(lexAlphabet,ntAlphabet);
  log.info(""String_Node_Str"");
  removeRefinements(binaryParses);
  log.info(""String_Node_Str"");
  NaryTreebank naryParses=binaryParses.collapseToNary(ntAlphabet);
  if (parseFile != null) {
    log.info(""String_Node_Str"" + parseFile);
    naryParses.writeTreesInOneLineFormat(parseFile);
  }
  if (evalbDir != null) {
    Evalb evalb=new Evalb(evalbDir);
    evalb.runEvalb(treeFile,parseFile,new File(""String_Node_Str""));
  }
}",0.9744030974403096
131472,"/** 
 * Gets the highest probability tree with the span (start, end) and the root symbol rootSymbol.
 * @param start The start of the span of the requested tree.
 * @param end The end of the span of the requested tree.
 * @param rootSymbol The symbol of the root of the requested tree.
 * @return 
 */
private BinaryTree getViterbiTree(int start,int end,int rootSymbol){
  ChartCell cell=chart[start][end];
  BackPointer bp=cell.getBp(rootSymbol);
  if (bp == null) {
    return null;
  }
  BinaryTree leftChild;
  BinaryTree rightChild;
  if (bp.r.isLexical()) {
    leftChild=new BinaryTree(bp.r.getLeftChild(),start,end,null,null,true,grammar.getLexAlphabet());
    rightChild=null;
  }
 else   if (bp.r.isUnary()) {
    leftChild=getViterbiTree(start,bp.mid,bp.r.getLeftChild());
    rightChild=null;
  }
 else {
    leftChild=getViterbiTree(start,bp.mid,bp.r.getLeftChild());
    rightChild=getViterbiTree(bp.mid,end,bp.r.getRightChild());
  }
  return new BinaryTree(rootSymbol,start,end,leftChild,rightChild,false,grammar.getNtAlphabet());
}","/** 
 * Gets the highest probability tree with the span (start, end) and the root symbol rootSymbol.
 * @param start The start of the span of the requested tree.
 * @param end The end of the span of the requested tree.
 * @param rootSymbol The symbol of the root of the requested tree.
 * @return The highest probability tree or null if no parse exists.
 */
private BinaryTree getViterbiTree(int start,int end,int rootSymbol){
  ChartCell cell=chart[start][end];
  BackPointer bp=cell.getBp(rootSymbol);
  if (bp == null) {
    return null;
  }
  BinaryTree leftChild;
  BinaryTree rightChild;
  if (bp.r.isLexical()) {
    leftChild=new BinaryTree(bp.r.getLeftChild(),start,end,null,null,true,grammar.getLexAlphabet());
    rightChild=null;
  }
 else   if (bp.r.isUnary()) {
    leftChild=getViterbiTree(start,bp.mid,bp.r.getLeftChild());
    rightChild=null;
  }
 else {
    leftChild=getViterbiTree(start,bp.mid,bp.r.getLeftChild());
    rightChild=getViterbiTree(bp.mid,end,bp.r.getRightChild());
  }
  return new BinaryTree(rootSymbol,start,end,leftChild,rightChild,false,grammar.getNtAlphabet());
}",0.9739776951672864
131473,"public List<CoNLL09Sentence> readSents(int maxSents,int maxSentLen){
  ArrayList<CoNLL09Sentence> sents=new ArrayList<CoNLL09Sentence>();
  for (  CoNLL09Sentence sent : this) {
    if (sents.size() > maxSents) {
      break;
    }
    if (sent.size() > maxSentLen) {
      continue;
    }
    sents.add(sent);
  }
  return sents;
}","public List<CoNLL09Sentence> readSents(int maxSents,int maxSentLen){
  ArrayList<CoNLL09Sentence> sents=new ArrayList<CoNLL09Sentence>();
  for (  CoNLL09Sentence sent : this) {
    if (sents.size() >= maxSents) {
      break;
    }
    if (sent.size() >= maxSentLen) {
      continue;
    }
    sents.add(sent);
  }
  return sents;
}",0.996996996996997
131474,"public SentFeatureExtractor(SentFeatureExtractorPrm prm,SimpleAnnoSentence sent,CorpusStatistics cs){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.sig=cs.sig;
  if (!prm.biasOnly) {
    this.parents=getParents(sent);
    if (prm.useZhaoFeats || prm.useDepPathFeats || prm.useBjorkelundFeats) {
      this.featuredSentence=createZhaoSentence();
      this.featuredHeadDefault=new FeatureObject(-1,parents,sent);
      this.featuredTailDefault=new FeatureObject(sent.size(),parents,sent);
    }
    if (prm.useAllTemplates) {
      this.prm.useTemplates=true;
      this.prm.formFeats=true;
      this.prm.lemmaFeats=true;
      this.prm.tagFeats=true;
      this.prm.morphFeats=true;
      this.prm.deprelFeats=true;
      this.prm.childrenFeats=true;
      this.prm.pathFeats=true;
      this.prm.syntacticConnectionFeats=true;
    }
  }
 else {
    this.parents=null;
  }
}","public SentFeatureExtractor(SentFeatureExtractorPrm prm,SimpleAnnoSentence sent,CorpusStatistics cs){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.sig=cs.sig;
  if (!prm.biasOnly) {
    this.parents=getParents(sent);
    if (prm.useZhaoFeats || prm.useDepPathFeats || prm.useBjorkelundFeats) {
      this.featuredSentence=createZhaoSentence();
      this.featuredHeadDefault=new FeatureObject(-1,parents,sent);
      this.featuredTailDefault=new FeatureObject(sent.size(),parents,sent);
    }
    if (prm.useAllTemplates) {
      this.prm.formFeats=true;
      this.prm.lemmaFeats=true;
      this.prm.tagFeats=true;
      this.prm.morphFeats=true;
      this.prm.deprelFeats=true;
      this.prm.childrenFeats=true;
      this.prm.pathFeats=true;
      this.prm.syntacticConnectionFeats=true;
    }
  }
 else {
    this.parents=null;
  }
}",0.9803921568627452
131475,"@Override public int compareTo(Var other){
  int c;
  c=this.numStates - other.numStates;
  if (c != 0) {
    return c;
  }
  c=this.type.compareTo(other.type);
  if (c != 0) {
    return c;
  }
  c=this.name.compareTo(other.name);
  if (c != 0) {
    return c;
  }
  c=this.stateNames.size() - other.stateNames.size();
  if (c != 0) {
    return c;
  }
  for (int i=0; i < this.stateNames.size(); i++) {
    c=this.stateNames.get(i).compareTo(other.stateNames.get(i));
    if (c != 0) {
      return c;
    }
  }
  return c;
}","@Override public int compareTo(Var other){
  int c;
  c=this.numStates - other.numStates;
  if (c != 0) {
    return c;
  }
  c=this.type.compareTo(other.type);
  if (c != 0) {
    return c;
  }
  c=this.name.compareTo(other.name);
  if (c != 0) {
    return c;
  }
  if (this.stateNames == null && other.stateNames != null) {
    return -1;
  }
 else   if (this.stateNames != null && other.stateNames == null) {
    return 1;
  }
 else   if (this.stateNames != null && other.stateNames != null) {
    c=this.stateNames.size() - other.stateNames.size();
    if (c != 0) {
      return c;
    }
    for (int i=0; i < this.stateNames.size(); i++) {
      c=this.stateNames.get(i).compareTo(other.stateNames.get(i));
      if (c != 0) {
        return c;
      }
    }
  }
  return c;
}",0.732824427480916
131476,"/** 
 * @param type  The type of variable.
 * @param numStates  The number of states that this variable can take on.
 * @param name The unique name of this variable. 
 * @param stateNames The state names, where the i'th entry gives the state names of the i'th state.
 */
public Var(VarType type,int numStates,String name,List<String> stateNames){
  this.type=type;
  this.numStates=numStates;
  this.name=name.intern();
  if (stateNames != null) {
    assert(numStates == stateNames.size());
    this.stateNames=Lists.getInternedList(stateNames);
  }
}","/** 
 * @param type  The type of variable.
 * @param numStates  The number of states that this variable can take on.
 * @param name The unique name of this variable. 
 * @param stateNames The state names, where the i'th entry gives the state names of the i'th state.
 */
public Var(VarType type,int numStates,String name,List<String> stateNames){
  this.type=type;
  this.numStates=numStates;
  this.name=name.intern();
}",0.8653648509763617
131477,"public BfsBpSchedule(FactorGraph fg){
  order=new ArrayList<FgEdge>();
  for (  FgNode root : fg.getConnectedComponents()) {
    if (!fg.isUndirectedTree(root)) {
      throw new IllegalStateException(""String_Node_Str"" + root);
    }
    int numGlobalFactors=0;
    FgNode lastGlobalFactor=null;
    for (    FgNode node : fg.preOrderTraversal(root)) {
      if (node.isFactor() && node.getFactor() instanceof GlobalFactor) {
        lastGlobalFactor=node;
        numGlobalFactors++;
      }
    }
    if (numGlobalFactors > 1) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else     if (numGlobalFactors == 1) {
      root=lastGlobalFactor;
    }
    addEdgesFromRoot(root,order,fg);
  }
}","public BfsBpSchedule(FactorGraph fg){
  order=new ArrayList<FgEdge>();
  for (  FgNode root : fg.getConnectedComponents()) {
    if (!fg.isUndirectedTree(root)) {
      System.out.println(""String_Node_Str"" + fg);
      throw new IllegalStateException(""String_Node_Str"" + root);
    }
    int numGlobalFactors=0;
    FgNode lastGlobalFactor=null;
    for (    FgNode node : fg.preOrderTraversal(root)) {
      if (node.isFactor() && node.getFactor() instanceof GlobalFactor) {
        lastGlobalFactor=node;
        numGlobalFactors++;
      }
    }
    if (numGlobalFactors > 1) {
      System.out.println(""String_Node_Str"" + fg);
      throw new RuntimeException(""String_Node_Str"");
    }
 else     if (numGlobalFactors == 1) {
      root=lastGlobalFactor;
    }
    addEdgesFromRoot(root,order,fg);
  }
}",0.9338624338624338
131478,"/** 
 * Gets the average marginal conditional log-likelihood computed on a batch.
 * @inheritDoc
 */
@Override public double getValue(int[] batch){
  boolean isFullDataset=batch.length == data.size();
  double ll=0.0;
  if (prm.numThreads == 1) {
    for (int i=0; i < batch.length; i++) {
      ll+=getMarginalLogLikelihoodForExample(batch[i]);
    }
  }
 else {
    ArrayList<Callable<Double>> tasks=new ArrayList<Callable<Double>>();
    for (int i=0; i < batch.length; i++) {
      tasks.add(new LogLikelihoodOfExample(batch[i]));
    }
    List<Double> results=Threads.getAllResults(pool,tasks);
    for (    Double r : results) {
      ll+=r;
    }
  }
  ll/=batch.length;
  if (isFullDataset) {
    log.info(""String_Node_Str"" + ll);
  }
  if (ll > MAX_LOG_LIKELIHOOD) {
    String name=isFullDataset ? ""String_Node_Str"" : ""String_Node_Str"";
    log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ ll);
  }
  return ll;
}","/** 
 * Gets the average marginal conditional log-likelihood computed on a batch.
 * @inheritDoc
 */
@Override public double getValue(int[] batch){
  boolean isFullDataset=batch.length == data.size();
  double ll=0.0;
  if (prm.numThreads == 1) {
    for (int i=0; i < batch.length; i++) {
      ll+=getMarginalLogLikelihoodForExample(batch[i]);
    }
  }
 else {
    TaskFactory<Double> factory=new TaskFactory<Double>(){
      public Callable<Double> getTask(      int i){
        return new LogLikelihoodOfExample(i);
      }
    }
;
    List<Double> results=Threads.safelyParallelizeBatch(pool,batch,factory);
    for (    Double r : results) {
      ll+=r;
    }
  }
  ll/=batch.length;
  if (isFullDataset) {
    log.info(""String_Node_Str"" + ll);
  }
  if (ll > MAX_LOG_LIKELIHOOD) {
    String name=isFullDataset ? ""String_Node_Str"" : ""String_Node_Str"";
    log.warn(""String_Node_Str"" + name + ""String_Node_Str""+ ll);
  }
  return ll;
}",0.8563801388147357
131479,"/** 
 * Gets the gradient of the conditional log-likelihood on a batch of examples.
 * @inheritDoc
 */
@Override public void getGradient(int[] batch,double[] g){
  this.gradient.zero();
  if (prm.numThreads == 1) {
    for (int i=0; i < batch.length; i++) {
      log.trace(""String_Node_Str"" + batch[i]);
      addGradientForExample(batch[i],gradient);
    }
  }
 else {
    ArrayList<Callable<Object>> tasks=new ArrayList<Callable<Object>>();
    for (int i=0; i < batch.length; i++) {
      tasks.add(new AddGradientOfExample(gradient,batch[i]));
    }
    Threads.getAllResults(pool,tasks);
  }
  this.gradient.scale(1.0 / batch.length);
  gradient.updateDoublesFromModel(g);
}","/** 
 * Gets the gradient of the conditional log-likelihood on a batch of examples.
 * @inheritDoc
 */
@Override public void getGradient(int[] batch,double[] g){
  this.gradient.zero();
  if (prm.numThreads == 1) {
    for (int i=0; i < batch.length; i++) {
      log.trace(""String_Node_Str"" + batch[i]);
      addGradientForExample(batch[i],gradient);
    }
  }
 else {
    TaskFactory<Object> factory=new TaskFactory<Object>(){
      public Callable<Object> getTask(      int i){
        return new AddGradientOfExample(gradient,i);
      }
    }
;
    Threads.safelyParallelizeBatch(pool,batch,factory);
  }
  this.gradient.scale(1.0 / batch.length);
  gradient.updateDoublesFromModel(g);
}",0.8040786598689003
131480,"/** 
 * Updates the factor graph with the latest parameter vector. 
 * @param logDomain TODO
 */
private FactorGraph getUpdatedFactorGraph(FactorGraph fg,FgModel model,boolean logDomain){
  for (int a=0; a < fg.getNumFactors(); a++) {
    Factor f=fg.getFactor(a);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof ExpFamFactor) {
      IntIter iter=null;
      if (fg == this.getFgLat()) {
        VarConfig predVc=this.getGoldConfigPred(a);
        iter=IndexForVc.getConfigIter(this.getFgLatPred().getFactor(a).getVars(),predVc);
      }
      DenseFactor factor=(DenseFactor)f;
      int numConfigs=factor.getVars().calcNumConfigs();
      for (int c=0; c < numConfigs; c++) {
        int config=(iter != null) ? iter.next() : c;
        IntDoubleVectorSlice params=model.getParams(model.getTemplates().getTemplateId(f),config);
        FeatureVector fv=getObservationFeatures(a);
        if (logDomain) {
          factor.setValue(c,fv.dot(params));
        }
 else {
          factor.setValue(c,FastMath.exp(fv.dot(params)));
        }
      }
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
  return fg;
}","/** 
 * Updates the factor graph with the latest parameter vector. 
 * @param logDomain TODO
 */
private FactorGraph getUpdatedFactorGraph(FactorGraph fg,FgModel model,boolean logDomain){
  for (int a=0; a < fg.getNumFactors(); a++) {
    Factor f=fg.getFactor(a);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof ExpFamFactor) {
      IntIter iter=null;
      if (fg == this.getFgLat()) {
        VarConfig predVc=this.getGoldConfigPred(a);
        iter=IndexForVc.getConfigIter(this.getFgLatPred().getFactor(a).getVars(),predVc);
      }
      DenseFactor factor=(DenseFactor)f;
      int numConfigs=factor.getVars().calcNumConfigs();
      for (int c=0; c < numConfigs; c++) {
        int config=(iter != null) ? iter.next() : c;
        FeatureVector fv=getObservationFeatures(a);
        double dot=model.dot(model.getTemplates().getTemplateId(f),config,fv);
        if (logDomain) {
          factor.setValue(c,dot);
        }
 else {
          factor.setValue(c,FastMath.exp(dot));
        }
      }
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
  return fg;
}",0.9081455805892548
131481,"private double getMarginalLogLikelihoodForExample(int i){
  FgExample ex=data.get(i);
  FeatureTemplateList fts=data.getTemplates();
  FgInferencer infLat=getInfLat(ex);
  FactorGraph fgLat=ex.updateFgLat(model,infLat.isLogDomain());
  infLat.run();
  double numerator=infLat.isLogDomain() ? infLat.getPartition() : FastMath.log(infLat.getPartition());
  for (int a=0; a < fgLat.getNumFactors(); a++) {
    Factor f=fgLat.getFactor(a);
    if (f.getVars().size() == 0) {
      if (f instanceof ExpFamFactor) {
        int goldConfig=ex.getGoldConfigIdxPred(a);
        IntDoubleVectorSlice params=model.getParams(fts.getTemplateId(f),goldConfig);
        numerator+=ex.getObservationFeatures(a).dot(params);
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
  infLat.clear();
  FgInferencer infLatPred=getInfLatPred(ex);
  FactorGraph fgLatPred=ex.updateFgLatPred(model,infLatPred.isLogDomain());
  infLatPred.run();
  double denominator=infLatPred.isLogDomain() ? infLatPred.getPartition() : FastMath.log(infLatPred.getPartition());
  for (int a=0; a < fgLatPred.getNumFactors(); a++) {
    Factor f=fgLatPred.getFactor(a);
    if (f.getVars().size() == 0) {
      if (f instanceof ExpFamFactor) {
        int goldConfig=ex.getGoldConfigIdxPred(a);
        IntDoubleVectorSlice params=model.getParams(fts.getTemplateId(f),goldConfig);
        denominator+=ex.getObservationFeatures(a).dot(params);
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
  infLatPred.clear();
  double ll=numerator - denominator;
  if (ll > MAX_LOG_LIKELIHOOD) {
    log.warn(""String_Node_Str"" + ll);
  }
  return ll;
}","private double getMarginalLogLikelihoodForExample(int i){
  FgExample ex=data.get(i);
  FeatureTemplateList fts=data.getTemplates();
  FgInferencer infLat=getInfLat(ex);
  FactorGraph fgLat=ex.updateFgLat(model,infLat.isLogDomain());
  infLat.run();
  double numerator=infLat.isLogDomain() ? infLat.getPartition() : FastMath.log(infLat.getPartition());
  for (int a=0; a < fgLat.getNumFactors(); a++) {
    Factor f=fgLat.getFactor(a);
    if (f.getVars().size() == 0) {
      if (f instanceof ExpFamFactor) {
        int goldConfig=ex.getGoldConfigIdxPred(a);
        FeatureVector fv=ex.getObservationFeatures(a);
        numerator+=model.dot(fts.getTemplateId(f),goldConfig,fv);
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
  infLat.clear();
  FgInferencer infLatPred=getInfLatPred(ex);
  FactorGraph fgLatPred=ex.updateFgLatPred(model,infLatPred.isLogDomain());
  infLatPred.run();
  double denominator=infLatPred.isLogDomain() ? infLatPred.getPartition() : FastMath.log(infLatPred.getPartition());
  for (int a=0; a < fgLatPred.getNumFactors(); a++) {
    Factor f=fgLatPred.getFactor(a);
    if (f.getVars().size() == 0) {
      if (f instanceof ExpFamFactor) {
        int goldConfig=ex.getGoldConfigIdxPred(a);
        FeatureVector fv=ex.getObservationFeatures(a);
        denominator+=model.dot(fts.getTemplateId(f),goldConfig,fv);
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
  infLatPred.clear();
  double ll=numerator - denominator;
  if (ll > MAX_LOG_LIKELIHOOD) {
    log.warn(""String_Node_Str"" + ll);
  }
  return ll;
}",0.8930091185410335
131482,"private double getMarginalLogLikelihoodForExample(int i){
  FgExample ex=data.get(i);
  FeatureTemplateList fts=data.getTemplates();
  FgInferencer infLat=infLatList.get(i);
  FactorGraph fgLat=ex.updateFgLat(model,infLat.isLogDomain());
  infLat.run();
  double numerator=infLat.isLogDomain() ? infLat.getPartition() : Utilities.log(infLat.getPartition());
  for (int a=0; a < fgLat.getNumFactors(); a++) {
    Factor f=fgLat.getFactor(a);
    if (f.getVars().size() == 0) {
      if (f instanceof ExpFamFactor) {
        int goldConfig=ex.getGoldConfigIdxPred(a);
        double[] params=model.getParams(fts.getTemplateId(f),goldConfig);
        numerator+=ex.getObservationFeatures(a).dot(params);
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
  infLat.clear();
  FgInferencer infLatPred=infLatPredList.get(i);
  FactorGraph fgLatPred=ex.updateFgLatPred(model,infLatPred.isLogDomain());
  infLatPred.run();
  double denominator=infLatPred.isLogDomain() ? infLatPred.getPartition() : Utilities.log(infLatPred.getPartition());
  for (int a=0; a < fgLatPred.getNumFactors(); a++) {
    Factor f=fgLatPred.getFactor(a);
    if (f.getVars().size() == 0) {
      if (f instanceof ExpFamFactor) {
        int goldConfig=ex.getGoldConfigIdxPred(a);
        double[] params=model.getParams(fts.getTemplateId(f),goldConfig);
        denominator+=ex.getObservationFeatures(a).dot(params);
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
  infLatPred.clear();
  double ll=numerator - denominator;
  if (ll > MAX_LOG_LIKELIHOOD) {
    log.warn(""String_Node_Str"" + ll);
  }
  return ll;
}","private double getMarginalLogLikelihoodForExample(int i){
  FgExample ex=data.get(i);
  FeatureTemplateList fts=data.getTemplates();
  FgInferencer infLat=getInfLat(ex);
  FactorGraph fgLat=ex.updateFgLat(model,infLat.isLogDomain());
  infLat.run();
  double numerator=infLat.isLogDomain() ? infLat.getPartition() : Utilities.log(infLat.getPartition());
  for (int a=0; a < fgLat.getNumFactors(); a++) {
    Factor f=fgLat.getFactor(a);
    if (f.getVars().size() == 0) {
      if (f instanceof ExpFamFactor) {
        int goldConfig=ex.getGoldConfigIdxPred(a);
        double[] params=model.getParams(fts.getTemplateId(f),goldConfig);
        numerator+=ex.getObservationFeatures(a).dot(params);
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
  infLat.clear();
  FgInferencer infLatPred=getInfLatPred(ex);
  FactorGraph fgLatPred=ex.updateFgLatPred(model,infLatPred.isLogDomain());
  infLatPred.run();
  double denominator=infLatPred.isLogDomain() ? infLatPred.getPartition() : Utilities.log(infLatPred.getPartition());
  for (int a=0; a < fgLatPred.getNumFactors(); a++) {
    Factor f=fgLatPred.getFactor(a);
    if (f.getVars().size() == 0) {
      if (f instanceof ExpFamFactor) {
        int goldConfig=ex.getGoldConfigIdxPred(a);
        double[] params=model.getParams(fts.getTemplateId(f),goldConfig);
        denominator+=ex.getObservationFeatures(a).dot(params);
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
  infLatPred.clear();
  double ll=numerator - denominator;
  if (ll > MAX_LOG_LIKELIHOOD) {
    log.warn(""String_Node_Str"" + ll);
  }
  return ll;
}",0.9806412583182094
131483,"public CrfObjective(FgModel model,FgExamples data,FgInferencerFactory infFactory){
  this.numParams=model.getNumParams();
  this.data=data;
  this.model=model;
  this.gradient=new FgModel(model);
  this.gradient.zero();
  log.debug(""String_Node_Str"");
  infLatList=new ArrayList<FgInferencer>(data.size());
  infLatPredList=new ArrayList<FgInferencer>(data.size());
  for (int i=0; i < data.size(); i++) {
    FgExample ex=data.get(i);
    infLatList.add(infFactory.getInferencer(ex.getFgLat()));
    infLatPredList.add(infFactory.getInferencer(ex.getFgLatPred()));
  }
}","public CrfObjective(FgModel model,FgExamples data,FgInferencerFactory infFactory){
  this.numParams=model.getNumParams();
  this.data=data;
  this.model=model;
  this.infFactory=infFactory;
  this.gradient=new FgModel(model);
  this.gradient.zero();
}",0.537712895377129
131484,"/** 
 * Adds the gradient for a particular example to the gradient vector.
 * @param params The model parameters.
 * @param i The index of the data example.
 * @param gradient The gradient vector to which this example's contributionis added.
 */
private void addGradientForExample(int i,FgModel gradient){
  FgExample ex=data.get(i);
  FgInferencer infLat=infLatList.get(i);
  FactorGraph fgLat=ex.updateFgLat(model,infLat.isLogDomain());
  infLat.run();
  addExpectedFeatureCounts(fgLat,ex,infLat,data.getTemplates(),1.0,gradient);
  infLat.clear();
  FgInferencer infLatPred=infLatPredList.get(i);
  FactorGraph fgLatPred=ex.updateFgLatPred(model,infLatPred.isLogDomain());
  infLatPred.run();
  addExpectedFeatureCounts(fgLatPred,ex,infLatPred,data.getTemplates(),-1.0,gradient);
  infLatPred.clear();
}","/** 
 * Adds the gradient for a particular example to the gradient vector.
 * @param params The model parameters.
 * @param i The index of the data example.
 * @param gradient The gradient vector to which this example's contributionis added.
 */
private void addGradientForExample(int i,FgModel gradient){
  FgExample ex=data.get(i);
  FgInferencer infLat=getInfLat(ex);
  FactorGraph fgLat=ex.updateFgLat(model,infLat.isLogDomain());
  infLat.run();
  addExpectedFeatureCounts(fgLat,ex,infLat,data.getTemplates(),1.0,gradient);
  infLat.clear();
  FgInferencer infLatPred=getInfLatPred(ex);
  FactorGraph fgLatPred=ex.updateFgLatPred(model,infLatPred.isLogDomain());
  infLatPred.run();
  addExpectedFeatureCounts(fgLatPred,ex,infLatPred,data.getTemplates(),-1.0,gradient);
  infLatPred.clear();
}",0.9600997506234414
131485,"/** 
 * Gets the ""expected"" feature counts. 
 */
public FeatureVector getExpectedFeatureCounts(double[] params){
  model.updateModelFromDoubles(params);
  FgModel feats=new FgModel(model);
  feats.zero();
  for (int i=0; i < data.size(); i++) {
    FgExample ex=data.get(i);
    FgInferencer infLatPred=infLatPredList.get(i);
    FactorGraph fgLatPred=ex.updateFgLatPred(model,infLatPred.isLogDomain());
    infLatPred.run();
    addExpectedFeatureCounts(fgLatPred,ex,infLatPred,data.getTemplates(),1.0,feats);
  }
  double[] f=new double[numParams];
  feats.updateDoublesFromModel(f);
  return new FeatureVector(f);
}","/** 
 * Gets the ""expected"" feature counts. 
 */
public FeatureVector getExpectedFeatureCounts(double[] params){
  model.updateModelFromDoubles(params);
  FgModel feats=new FgModel(model);
  feats.zero();
  for (int i=0; i < data.size(); i++) {
    FgExample ex=data.get(i);
    FgInferencer infLatPred=getInfLatPred(ex);
    FactorGraph fgLatPred=ex.updateFgLatPred(model,infLatPred.isLogDomain());
    infLatPred.run();
    addExpectedFeatureCounts(fgLatPred,ex,infLatPred,data.getTemplates(),1.0,feats);
  }
  double[] f=new double[numParams];
  feats.updateDoublesFromModel(f);
  return new FeatureVector(f);
}",0.9707792207792209
131486,"/** 
 * Gets the ""observed"" feature counts. 
 */
public FeatureVector getObservedFeatureCounts(double[] params){
  model.updateModelFromDoubles(params);
  FgModel feats=new FgModel(model);
  feats.zero();
  for (int i=0; i < data.size(); i++) {
    FgExample ex=data.get(i);
    FgInferencer infLat=infLatList.get(i);
    FactorGraph fgLat=ex.updateFgLat(model,infLat.isLogDomain());
    infLat.run();
    addExpectedFeatureCounts(fgLat,ex,infLat,data.getTemplates(),1.0,feats);
  }
  double[] f=new double[numParams];
  feats.updateDoublesFromModel(f);
  return new FeatureVector(f);
}","/** 
 * Gets the ""observed"" feature counts. 
 */
public FeatureVector getObservedFeatureCounts(double[] params){
  model.updateModelFromDoubles(params);
  FgModel feats=new FgModel(model);
  feats.zero();
  for (int i=0; i < data.size(); i++) {
    FgExample ex=data.get(i);
    FgInferencer infLat=getInfLat(ex);
    FactorGraph fgLat=ex.updateFgLat(model,infLat.isLogDomain());
    infLat.run();
    addExpectedFeatureCounts(fgLat,ex,infLat,data.getTemplates(),1.0,feats);
  }
  double[] f=new double[numParams];
  feats.updateDoublesFromModel(f);
  return new FeatureVector(f);
}",0.976027397260274
131487,"public FgExamples getInstance(FeatureTemplateList fts,FgExampleFactory factory){
  boolean doingFeatCutoff=(fts.isGrowing() && prm.featCountCutoff > 0);
  if (doingFeatCutoff) {
    cutoffFeatures(prm.featCountCutoff,fts,factory);
  }
  FgExamples data=new FgExampleFactoryWrapper(fts,factory);
  if (prm.cacheType == CacheType.CACHE) {
    data=new FgExamplesCache(fts,data,prm.maxEntriesInMemory);
    constructAndDiscardAll(data);
  }
 else   if (prm.cacheType == CacheType.MEMORY_STORE) {
    FgExamplesStore store=new FgExamplesMemoryStore(fts);
    constructAndStoreAll(data,store);
    data=store;
  }
 else   if (prm.cacheType == CacheType.DISK_STORE) {
    FgExamplesStore store=new FgExamplesDiskStore(fts,prm.cacheDir,prm.gzipped,prm.maxEntriesInMemory);
    constructAndStoreAll(data,store);
    data=store;
  }
 else   if (prm.cacheType == CacheType.NONE) {
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + prm.cacheType);
  }
  fts.stopGrowth();
  return data;
}","public FgExamples getInstance(FeatureTemplateList fts,FgExampleFactory factory){
  boolean doingFeatCutoff=(fts.isGrowing() && prm.featCountCutoff > 0);
  if (doingFeatCutoff) {
    log.info(""String_Node_Str"" + prm.featCountCutoff);
    cutoffFeatures(prm.featCountCutoff,fts,factory);
  }
  FgExamples data=new FgExampleFactoryWrapper(fts,factory);
  if (prm.cacheType == CacheType.CACHE) {
    data=new FgExamplesCache(fts,data,prm.maxEntriesInMemory);
    constructAndDiscardAll(data);
  }
 else   if (prm.cacheType == CacheType.MEMORY_STORE) {
    FgExamplesStore store=new FgExamplesMemoryStore(fts);
    constructAndStoreAll(data,store);
    data=store;
  }
 else   if (prm.cacheType == CacheType.DISK_STORE) {
    FgExamplesStore store=new FgExamplesDiskStore(fts,prm.cacheDir,prm.gzipped,prm.maxEntriesInMemory);
    constructAndStoreAll(data,store);
    data=store;
  }
 else   if (prm.cacheType == CacheType.NONE) {
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + prm.cacheType);
  }
  fts.stopGrowth();
  return data;
}",0.9731051344743276
131488,"private void eval(FgExamples data,String name,List<VarConfig> predictions){
  AccuracyEvaluator accEval=new AccuracyEvaluator();
  double accuracy=accEval.evaluate(data.getGoldConfigs(),predictions);
  log.info(String.format(""String_Node_Str"",name,accuracy));
}","private void eval(String name,VarConfigPair pair){
  AccuracyEvaluator accEval=new AccuracyEvaluator();
  double accuracy=accEval.evaluate(pair.gold,pair.pred);
  log.info(String.format(""String_Node_Str"",name,accuracy));
}",0.7619047619047619
131489,"public void run() throws ParseException, IOException {
  if (logDomain) {
    Utilities.useLogAddTable=true;
  }
  FgModel model=null;
  FeatureTemplateList templates;
  if (modelIn != null) {
    log.info(""String_Node_Str"" + modelIn);
    model=(FgModel)Files.deserialize(modelIn);
    templates=model.getTemplates();
  }
 else {
    templates=new FeatureTemplateList();
  }
  if (trainType != null && train != null) {
    String name=""String_Node_Str"";
    FgExamples data=getData(templates,trainType,train,name);
    if (model == null) {
      model=new FgModel(data,includeUnsupportedFeatures);
      if (initParams == InitParams.RANDOM) {
        model.setRandomStandardNormal();
      }
 else       if (initParams == InitParams.UNIFORM) {
      }
 else {
        throw new ParseException(""String_Node_Str"" + initParams);
      }
    }
 else {
      log.info(""String_Node_Str"");
    }
    log.info(""String_Node_Str"");
    CrfTrainerPrm prm=getCrfTrainerPrm();
    CrfTrainer trainer=new CrfTrainer(prm);
    trainer.train(model,data);
    trainer=null;
    List<VarConfig> predictions=decode(model,data,trainPredOut,name);
    eval(data,name,predictions);
  }
  if (modelOut != null) {
    log.info(""String_Node_Str"" + modelOut);
    Files.serialize(model,modelOut);
  }
  if (printModel != null) {
    log.info(""String_Node_Str"" + printModel);
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(printModel),""String_Node_Str""));
    model.printModel(writer);
    writer.close();
  }
  if (test != null && testType != null) {
    templates.stopGrowth();
    String name=""String_Node_Str"";
    FgExamples data=getData(templates,testType,test,name);
    List<VarConfig> predictions=decode(model,data,testPredOut,name);
    eval(data,name,predictions);
  }
}","public void run() throws ParseException, IOException {
  if (logDomain) {
    Utilities.useLogAddTable=true;
  }
  FgModel model=null;
  FeatureTemplateList templates;
  if (modelIn != null) {
    log.info(""String_Node_Str"" + modelIn);
    model=(FgModel)Files.deserialize(modelIn);
    templates=model.getTemplates();
  }
 else {
    templates=new FeatureTemplateList();
  }
  if (trainType != null && train != null) {
    String name=""String_Node_Str"";
    FgExamples data=getData(templates,trainType,train,name);
    if (model == null) {
      model=new FgModel(data,includeUnsupportedFeatures);
      if (initParams == InitParams.RANDOM) {
        model.setRandomStandardNormal();
      }
 else       if (initParams == InitParams.UNIFORM) {
      }
 else {
        throw new ParseException(""String_Node_Str"" + initParams);
      }
    }
 else {
      log.info(""String_Node_Str"");
    }
    log.info(""String_Node_Str"");
    CrfTrainerPrm prm=getCrfTrainerPrm();
    CrfTrainer trainer=new CrfTrainer(prm);
    trainer.train(model,data);
    trainer=null;
    VarConfigPair pair=decode(model,data,trainPredOut,name);
    eval(name,pair);
  }
  if (modelOut != null) {
    log.info(""String_Node_Str"" + modelOut);
    Files.serialize(model,modelOut);
  }
  if (printModel != null) {
    log.info(""String_Node_Str"" + printModel);
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(printModel),""String_Node_Str""));
    model.printModel(writer);
    writer.close();
  }
  if (test != null && testType != null) {
    templates.stopGrowth();
    String name=""String_Node_Str"";
    FgExamples data=getData(templates,testType,test,name);
    VarConfigPair pair=decode(model,data,testPredOut,name);
    eval(name,pair);
  }
}",0.964366515837104
131490,"private List<VarConfig> decode(FgModel model,FgExamples data,File predOut,String name) throws IOException {
  log.info(""String_Node_Str"" + name + ""String_Node_Str"");
  List<VarConfig> predictions=new ArrayList<VarConfig>();
  HashMap<Var,Double> varMargMap=new HashMap<Var,Double>();
  for (int i=0; i < data.size(); i++) {
    MbrDecoder decoder=getDecoder();
    decoder.decode(model,data.get(i));
    predictions.add(decoder.getMbrVarConfig());
    varMargMap.putAll(decoder.getVarMargMap());
  }
  if (predOut != null) {
    ErmaWriter ew=new ErmaWriter();
    ew.writePredictions(predOut,predictions,varMargMap);
  }
  return predictions;
}","private VarConfigPair decode(FgModel model,FgExamples data,File predOut,String name) throws IOException {
  log.info(""String_Node_Str"" + name + ""String_Node_Str"");
  List<VarConfig> predVcs=new ArrayList<VarConfig>();
  List<VarConfig> goldVcs=new ArrayList<VarConfig>();
  HashMap<Var,Double> varMargMap=new HashMap<Var,Double>();
  for (int i=0; i < data.size(); i++) {
    MbrDecoder decoder=getDecoder();
    FgExample ex=data.get(i);
    decoder.decode(model,ex);
    predVcs.add(decoder.getMbrVarConfig());
    varMargMap.putAll(decoder.getVarMargMap());
    goldVcs.add(ex.getGoldConfig());
  }
  if (predOut != null) {
    ErmaWriter ew=new ErmaWriter();
    ew.writePredictions(predOut,predVcs,varMargMap);
  }
  return new VarConfigPair(goldVcs,predVcs);
}",0.8051027639971652
131491,"/** 
 * Decodes the example using the given model.
 * @param model The model.
 * @param ex The example to decode.
 * @param sent The sentence corresponding to the example.
 */
public void decode(FgModel model,FgExample ex){
  MbrDecoder mbrDecoder=new MbrDecoder(prm.mbrPrm);
  mbrDecoder.decode(model,ex);
  SrlFactorGraph srlFg=(SrlFactorGraph)ex.getOriginalFactorGraph();
  int n=srlFg.getSentenceLength();
  mbrVarConfig=mbrDecoder.getMbrVarConfig();
  srlGraph=getSrlGraphFromVarConfig(mbrVarConfig,n);
  parents=getParents(mbrDecoder.getVarMarginals(),ex.getFgLatPred().getVars(),n);
  if (parents != null) {
    for (int p=-1; p < n; p++) {
      for (int c=0; c < n; c++) {
        int state=(parents[c] == p) ? LinkVar.TRUE : LinkVar.FALSE;
        if (srlFg.getLinkVar(p,c) != null) {
          mbrVarConfig.put(srlFg.getLinkVar(p,c),state);
        }
      }
    }
  }
}","/** 
 * Decodes the example using the given model.
 * @param model The model.
 * @param ex The example to decode.
 */
public void decode(FgModel model,FgExample ex){
  MbrDecoder mbrDecoder=new MbrDecoder(prm.mbrPrm);
  mbrDecoder.decode(model,ex);
  SrlFactorGraph srlFg=(SrlFactorGraph)ex.getOriginalFactorGraph();
  int n=srlFg.getSentenceLength();
  mbrVarConfig=mbrDecoder.getMbrVarConfig();
  srlGraph=getSrlGraphFromVarConfig(mbrVarConfig,n);
  parents=getParents(mbrDecoder.getVarMarginals(),ex.getFgLatPred().getVars(),n);
  if (parents != null) {
    for (int p=-1; p < n; p++) {
      for (int c=0; c < n; c++) {
        int state=(parents[c] == p) ? LinkVar.TRUE : LinkVar.FALSE;
        if (srlFg.getLinkVar(p,c) != null) {
          mbrVarConfig.put(srlFg.getLinkVar(p,c),state);
        }
      }
    }
  }
}",0.965962441314554
131492,"private static SrlFgExampleBuilderPrm getSrlFgExampleBuilderPrm(){
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.linkVarType=linkVarType;
  prm.fgPrm.makeUnknownPredRolesLatent=makeUnknownPredRolesLatent;
  prm.fgPrm.roleStructure=roleStructure;
  prm.fgPrm.useProjDepTreeFactor=useProjDepTreeFactor;
  prm.fgPrm.allowPredArgSelfLoops=allowPredArgSelfLoops;
  prm.fgPrm.unaryFactors=unaryFactors;
  prm.fgPrm.alwaysIncludeLinkVars=alwaysIncludeLinkVars;
  prm.fgPrm.predictSense=predictSense;
  prm.fePrm.biasOnly=biasOnly;
  prm.fePrm.useSimpleFeats=useSimpleFeats;
  prm.fePrm.useNaradFeats=useNaradFeats;
  prm.fePrm.useZhaoFeats=useZhaoFeats;
  prm.fePrm.useBjorkelundFeats=useBjorkelundFeats;
  prm.fePrm.useDepPathFeats=useDepPathFeats;
  prm.exPrm.featCountCutoff=featCountCutoff;
  prm.exPrm.cacheType=cacheType;
  prm.exPrm.gzipped=true;
  prm.exPrm.maxEntriesInMemory=-1;
  prm.srlFePrm.featureHashMod=featureHashMod;
  return prm;
}","private static SrlFgExampleBuilderPrm getSrlFgExampleBuilderPrm(){
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.linkVarType=linkVarType;
  prm.fgPrm.makeUnknownPredRolesLatent=makeUnknownPredRolesLatent;
  prm.fgPrm.roleStructure=roleStructure;
  prm.fgPrm.useProjDepTreeFactor=useProjDepTreeFactor;
  prm.fgPrm.allowPredArgSelfLoops=allowPredArgSelfLoops;
  prm.fgPrm.unaryFactors=unaryFactors;
  prm.fgPrm.alwaysIncludeLinkVars=alwaysIncludeLinkVars;
  prm.fgPrm.predictSense=predictSense;
  prm.fePrm.biasOnly=biasOnly;
  prm.fePrm.useSimpleFeats=useSimpleFeats;
  prm.fePrm.useNaradFeats=useNaradFeats;
  prm.fePrm.useZhaoFeats=useZhaoFeats;
  prm.fePrm.useBjorkelundFeats=useBjorkelundFeats;
  prm.fePrm.useDepPathFeats=useDepPathFeats;
  prm.exPrm.featCountCutoff=featCountCutoff;
  prm.exPrm.cacheType=cacheType;
  prm.exPrm.gzipped=true;
  prm.exPrm.maxEntriesInMemory=maxEntriesInMemory;
  prm.srlFePrm.featureHashMod=featureHashMod;
  return prm;
}",0.9897540983606558
131493,"public void run() throws ParseException, IOException {
  if (logDomain) {
    Utilities.useLogAddTable=true;
  }
  SrlFgModel model=null;
  FeatureTemplateList fts;
  CorpusStatistics cs;
  if (modelIn != null) {
    log.info(""String_Node_Str"" + modelIn);
    model=(SrlFgModel)Files.deserialize(modelIn);
    fts=model.getTemplates();
    cs=model.getCs();
  }
 else {
    fts=new FeatureTemplateList();
    cs=new CorpusStatistics(getCorpusStatisticsPrm());
  }
  if (trainType != null && train != null) {
    String name=""String_Node_Str"";
    FgExamples data=getData(fts,cs,trainType,train,trainGoldOut,trainMaxNumSentences,trainMaxSentenceLength,name);
    if (model == null) {
      model=new SrlFgModel(data,includeUnsupportedFeatures,cs);
      if (initParams == InitParams.RANDOM) {
        model.setRandomStandardNormal();
      }
 else       if (initParams == InitParams.UNIFORM) {
      }
 else {
        throw new ParseException(""String_Node_Str"" + initParams);
      }
    }
 else {
      log.info(""String_Node_Str"");
    }
    log.info(String.format(""String_Node_Str"",model.getNumParams()));
    log.info(""String_Node_Str"");
    CrfTrainerPrm prm=getCrfTrainerPrm();
    CrfTrainer trainer=new CrfTrainer(prm);
    trainer.train(model,data);
    trainer=null;
    List<VarConfig> predictions=decode(model,data,trainType,trainPredOut,name);
    eval(data,name,predictions);
  }
  if (modelOut != null) {
    log.info(""String_Node_Str"" + modelOut);
    Files.serialize(model,modelOut);
  }
  if (printModel != null) {
    log.info(""String_Node_Str"" + printModel);
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(printModel),""String_Node_Str""));
    model.printModel(writer);
    writer.close();
  }
  if (test != null && testType != null) {
    fts.stopGrowth();
    String name=""String_Node_Str"";
    FgExamples data=getData(fts,cs,testType,test,testGoldOut,testMaxNumSentences,testMaxSentenceLength,name);
    List<VarConfig> predictions=decode(model,data,testType,testPredOut,name);
    eval(data,name,predictions);
  }
}","public void run() throws ParseException, IOException {
  if (logDomain) {
    Utilities.useLogAddTable=true;
  }
  SrlFgModel model=null;
  FeatureTemplateList fts;
  CorpusStatistics cs;
  if (modelIn != null) {
    log.info(""String_Node_Str"" + modelIn);
    model=(SrlFgModel)Files.deserialize(modelIn);
    fts=model.getTemplates();
    cs=model.getCs();
  }
 else {
    fts=new FeatureTemplateList();
    cs=new CorpusStatistics(getCorpusStatisticsPrm());
  }
  if (trainType != null && train != null) {
    String name=""String_Node_Str"";
    FgExamples data=getData(fts,cs,trainType,train,trainGoldOut,trainMaxNumSentences,trainMaxSentenceLength,name);
    if (model == null) {
      model=new SrlFgModel(data,includeUnsupportedFeatures,cs);
      if (initParams == InitParams.RANDOM) {
        model.setRandomStandardNormal();
      }
 else       if (initParams == InitParams.UNIFORM) {
      }
 else {
        throw new ParseException(""String_Node_Str"" + initParams);
      }
    }
 else {
      log.info(""String_Node_Str"");
    }
    log.info(String.format(""String_Node_Str"",model.getNumParams()));
    log.info(""String_Node_Str"");
    CrfTrainerPrm prm=getCrfTrainerPrm();
    CrfTrainer trainer=new CrfTrainer(prm);
    trainer.train(model,data);
    trainer=null;
    VarConfigPair pair=decode(model,data,trainType,trainPredOut,name);
    eval(name,pair);
  }
  if (modelOut != null) {
    log.info(""String_Node_Str"" + modelOut);
    Files.serialize(model,modelOut);
  }
  if (printModel != null) {
    log.info(""String_Node_Str"" + printModel);
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(printModel),""String_Node_Str""));
    model.printModel(writer);
    writer.close();
  }
  if (test != null && testType != null) {
    fts.stopGrowth();
    String name=""String_Node_Str"";
    FgExamples data=getData(fts,cs,testType,test,testGoldOut,testMaxNumSentences,testMaxSentenceLength,name);
    VarConfigPair pair=decode(model,data,testType,testPredOut,name);
    eval(name,pair);
  }
}",0.972181551976574
131494,"private List<VarConfig> decode(FgModel model,FgExamples data,DatasetType dataType,File predOut,String name) throws IOException, ParseException {
  log.info(""String_Node_Str"" + name + ""String_Node_Str"");
  SimpleAnnoSentenceCollection goldSents=(SimpleAnnoSentenceCollection)data.getSourceSentences();
  SimpleAnnoSentenceCollection predSents=new SimpleAnnoSentenceCollection();
  List<VarConfig> predictions=new ArrayList<VarConfig>();
  for (int i=0; i < goldSents.size(); i++) {
    SimpleAnnoSentence goldSent=goldSents.get(i);
    SimpleAnnoSentence predSent=new SimpleAnnoSentence(goldSent);
    SrlDecoder decoder=getDecoder();
    decoder.decode(model,data.get(i));
    SrlGraph srlGraph=decoder.getSrlGraph();
    predSent.setSrlGraph(srlGraph);
    int[] parents=decoder.getParents();
    if (parents != null) {
      predSent.setParents(parents);
    }
    VarConfig vc=decoder.getMbrVarConfig();
    predictions.add(vc);
    predSents.add(predSent);
  }
  if (predOut != null) {
    log.info(""String_Node_Str"" + name + ""String_Node_Str""+ dataType+ ""String_Node_Str""+ predOut);
    if (dataType == DatasetType.CONLL_2009) {
      CoNLL09Writer cw=new CoNLL09Writer(predOut);
      for (      SimpleAnnoSentence sent : predSents) {
        CoNLL09Sentence conllSent=CoNLL09Sentence.fromSimpleAnnoSentence(sent);
        cw.write(conllSent);
      }
      cw.close();
    }
 else {
      throw new ParseException(""String_Node_Str"" + dataType);
    }
  }
  return predictions;
}","private VarConfigPair decode(FgModel model,FgExamples data,DatasetType dataType,File predOut,String name) throws IOException, ParseException {
  log.info(""String_Node_Str"" + name + ""String_Node_Str"");
  SimpleAnnoSentenceCollection goldSents=(SimpleAnnoSentenceCollection)data.getSourceSentences();
  SimpleAnnoSentenceCollection predSents=new SimpleAnnoSentenceCollection();
  List<VarConfig> predVcs=new ArrayList<VarConfig>();
  List<VarConfig> goldVcs=new ArrayList<VarConfig>();
  for (int i=0; i < goldSents.size(); i++) {
    FgExample ex=data.get(i);
    SimpleAnnoSentence goldSent=goldSents.get(i);
    SimpleAnnoSentence predSent=new SimpleAnnoSentence(goldSent);
    SrlDecoder decoder=getDecoder();
    decoder.decode(model,ex);
    VarConfig predVc=decoder.getMbrVarConfig();
    predVcs.add(predVc);
    SrlGraph srlGraph=decoder.getSrlGraph();
    predSent.setSrlGraph(srlGraph);
    int[] parents=decoder.getParents();
    if (parents != null) {
      predSent.setParents(parents);
    }
    predSents.add(predSent);
    goldVcs.add(ex.getGoldConfig());
  }
  if (predOut != null) {
    log.info(""String_Node_Str"" + name + ""String_Node_Str""+ dataType+ ""String_Node_Str""+ predOut);
    if (dataType == DatasetType.CONLL_2009) {
      CoNLL09Writer cw=new CoNLL09Writer(predOut);
      for (      SimpleAnnoSentence sent : predSents) {
        CoNLL09Sentence conllSent=CoNLL09Sentence.fromSimpleAnnoSentence(sent);
        cw.write(conllSent);
      }
      cw.close();
    }
 else {
      throw new ParseException(""String_Node_Str"" + dataType);
    }
  }
  return new VarConfigPair(goldVcs,predVcs);
}",0.8797937479858202
131495,"private void eval(FgExamples data,String name,List<VarConfig> predictions){
  AccuracyEvaluator accEval=new AccuracyEvaluator();
  double accuracy=accEval.evaluate(data.getGoldConfigs(),predictions);
  log.info(String.format(""String_Node_Str"",name,accuracy));
}","private void eval(String name,VarConfigPair pair){
  AccuracyEvaluator accEval=new AccuracyEvaluator();
  double accuracy=accEval.evaluate(pair.gold,pair.pred);
  log.info(String.format(""String_Node_Str"",name,accuracy));
}",0.7619047619047619
131496,"public void convertRealToLog(){
  apply(new LambdaOneToOne<Double,Double>(){
    public Double call(    Double value){
      return Utilities.log(value);
    }
  }
);
}","public void convertRealToLog(){
}",0.3283582089552239
131497,"public void assertLogNormalized(double delta){
  Multinomials.assertLogNormalized(root,delta);
  for (int c=0; c < numTags; c++) {
    for (int dir=0; dir < 2; dir++) {
      for (int val=0; val < 2; val++) {
        for (int sc=0; sc < 2; sc++) {
          Multinomials.assertLogNormalized(decision[c][dir][val],delta);
        }
      }
    }
  }
  double[][] logSums=new double[numTags][2];
  for (int p=0; p < numTags; p++) {
    Arrays.fill(logSums[p],Double.NEGATIVE_INFINITY);
  }
  for (int c=0; c < numTags; c++) {
    for (int p=0; p < numTags; p++) {
      for (int dir=0; dir < 2; dir++) {
        logSums[p][dir]=Utilities.logAdd(logSums[p][dir],child[c][p][dir]);
      }
    }
  }
  for (int p=0; p < numTags; p++) {
    for (int dir=0; dir < 2; dir++) {
      assert(Utilities.equals(0.0,logSums[p][dir],delta));
    }
  }
}","public void assertLogNormalized(double delta){
  Multinomials.assertLogNormalized(root,delta);
  for (int c=0; c < numTags; c++) {
    for (int dir=0; dir < 2; dir++) {
      for (int val=0; val < 2; val++) {
        for (int sc=0; sc < 2; sc++) {
          Multinomials.assertLogNormalized(decision[c][dir][val],delta);
        }
      }
    }
  }
  double[][] logSums=new double[numTags][2];
  for (int p=0; p < numTags; p++) {
    Arrays.fill(logSums[p],Double.NEGATIVE_INFINITY);
  }
  for (int c=0; c < numTags; c++) {
    for (int p=0; p < numTags; p++) {
      for (int dir=0; dir < 2; dir++) {
        logSums[p][dir]=Utilities.logAdd(logSums[p][dir],child[c][p][dir]);
        assert(!Double.isNaN(logSums[p][dir]));
      }
    }
  }
  for (int p=0; p < numTags; p++) {
    for (int dir=0; dir < 2; dir++) {
      assert(Utilities.equals(0.0,logSums[p][dir],delta));
    }
  }
}",0.9722222222222222
131498,"public static DmvModel getTieredModel(int numTiers,int numTags,RealParamGen gen){
  Alphabet<Label> alphabet=new Alphabet<Label>();
  IntIntHashMap idxTierMap=new IntIntHashMap(numTags,-1);
  Label[][] labels=new Label[numTiers][];
  int remain=numTags;
  int count=0;
  for (int tier=0; tier < numTiers; tier++) {
    int numTagsInTier;
    if (tier == numTiers - 1) {
      numTagsInTier=remain;
    }
 else {
      numTagsInTier=numTags / numTiers;
    }
    remain-=numTagsInTier;
    labels[tier]=new Label[numTagsInTier];
    for (int i=0; i < labels[tier].length; i++) {
      labels[tier][i]=new TaggedWord(Character.toString((char)(97 + i)) + tier,Character.toString((char)(65 + i)) + tier);
      count++;
      int idx=alphabet.lookupIndex(labels[tier][i]);
      idxTierMap.put(idx,tier);
    }
  }
  DmvModelFactory modelFactory=new RandomDmvModelFactory(1.0);
  DmvModel dmv=(DmvModel)modelFactory.getInstance(alphabet);
  dmv.fill(0.0);
  dmv.convertLogToReal();
  for (int c=0; c < numTags; c++) {
    int ctier=idxTierMap.get(c);
    dmv.root[c]=gen.getRoot(ctier,numTiers);
    for (int p=0; p < numTags; p++) {
      int ptier=idxTierMap.get(p);
      for (int dir=0; dir < 2; dir++) {
        dmv.child[c][p][dir]=gen.getChild(ptier,ctier,numTiers);
      }
    }
    for (int dir=0; dir < 2; dir++) {
      for (int val=0; val < 2; val++) {
        dmv.decision[c][dir][val][DmvModel.CONT]=gen.getCont(ctier,numTiers,val,dir);
        dmv.decision[c][dir][val][DmvModel.END]=1.0 - dmv.decision[c][dir][val][DmvModel.CONT];
      }
    }
  }
  dmv.normalize();
  dmv.convertRealToLog();
  dmv.assertLogNormalized(1e-13);
  return dmv;
}","public static DmvModel getTieredModel(int numTiers,int numTags,RealParamGen gen){
}",0.0954571592869465
131499,"@Test public void testTieredModelGeneration(){
  int numTiers=3;
  int numTags=9;
  DmvModel dmvModel=DmvModelGenerator.getTieredModel(numTiers,numTags,new StochasticRealParamGenerator());
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,System.currentTimeMillis());
  dmvModel.convertLogToReal();
  System.out.println(dmvModel);
  dmvModel.convertRealToLog();
  DepTreebank treebank=generator.getTreebank(400);
  System.out.println(treebank);
  int maxSentenceLength=-1;
  int sumSentLen=0;
  for (  DepTree tree : treebank) {
    sumSentLen+=tree.getNumTokens();
    if (tree.getNumTokens() > maxSentenceLength) {
      maxSentenceLength=tree.getNumTokens();
    }
  }
  System.out.println(""String_Node_Str"" + maxSentenceLength);
  System.out.println(""String_Node_Str"" + (double)sumSentLen / treebank.size());
}","@Test public void testTieredModelGeneration(){
  int numTiers=3;
  int numTags=7;
  DmvModel dmvModel=DmvModelGenerator.getTieredModel(numTiers,numTags,new StochasticRealParamGenerator(10.0));
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,System.currentTimeMillis());
  dmvModel.convertLogToReal();
  System.out.println(dmvModel);
  dmvModel.convertRealToLog();
  DepTreebank treebank=generator.getTreebank(400);
  System.out.println(treebank);
  int maxSentenceLength=-1;
  int sumSentLen=0;
  for (  DepTree tree : treebank) {
    sumSentLen+=tree.getNumTokens();
    if (tree.getNumTokens() > maxSentenceLength) {
      maxSentenceLength=tree.getNumTokens();
    }
  }
  System.out.println(""String_Node_Str"" + maxSentenceLength);
  System.out.println(""String_Node_Str"" + (double)sumSentLen / treebank.size());
}",0.9963898916967509
131500,"public static CoNLL09Sentence fromSimpleAnnoSentence(SimpleAnnoSentence sent){
  if (sent.getSourceSent() == null || !(sent.getSourceSent() instanceof CoNLL09Sentence)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  CoNLL09Sentence updatedSentence=new CoNLL09Sentence((CoNLL09Sentence)sent.getSourceSent());
  for (int i=0; i < updatedSentence.size(); i++) {
    CoNLL09Token tok=updatedSentence.get(i);
    tok.setPlemma(sent.getLemma(i));
    tok.setPpos(sent.getPosTag(i));
    tok.setPfeat(sent.getFeats(i));
    tok.setPhead(sent.getParent(i) + 1);
    tok.setPdeprel(sent.getDeprel(i));
  }
  return updatedSentence;
}","/** 
 * Creates a new CoNLL09Sentence with both columns set for each field (i.e. PLEMMA and LEMMA are both set from the values on the SimpleAnnoSentence). The reason for setting both is that the CoNLL-2009 evaluation script uses the ""gold"" columns for evaluation, but we might want to utilize the predictions in some downstream task.
 */
public static CoNLL09Sentence fromSimpleAnnoSentence(SimpleAnnoSentence sent){
  List<CoNLL09Token> toks=new ArrayList<CoNLL09Token>();
  for (int i=0; i < sent.size(); i++) {
    CoNLL09Token tok=new CoNLL09Token();
    tok.setId(i + 1);
    tok.setForm(sent.getWord(i));
    tok.setPlemma(sent.getLemma(i));
    tok.setPpos(sent.getPosTag(i));
    tok.setPfeat(sent.getFeats(i));
    tok.setPhead(sent.getParent(i) + 1);
    tok.setPdeprel(sent.getDeprel(i));
    tok.setLemma(sent.getLemma(i));
    tok.setPos(sent.getPosTag(i));
    tok.setFeat(sent.getFeats(i));
    tok.setHead(sent.getParent(i) + 1);
    tok.setDeprel(sent.getDeprel(i));
    toks.add(tok);
  }
  CoNLL09Sentence updatedSentence=new CoNLL09Sentence(toks);
  updatedSentence.setColsFromSrlGraph(sent.getSrlGraph(),false,true);
  return updatedSentence;
}",0.3187118267629095
131501,"/** 
 * Deep copy constructor 
 */
public CoNLL09Token(CoNLL09Token other){
  this.id=other.id;
  this.form=other.form;
  this.lemma=other.lemma;
  this.plemma=other.plemma;
  this.pos=other.pos;
  this.ppos=other.ppos;
  this.feat=other.feat == null ? null : new ArrayList<String>(other.feat);
  this.pfeat=other.pfeat == null ? null : new ArrayList<String>(other.pfeat);
  this.head=other.head;
  this.phead=other.phead;
  this.deprel=other.deprel;
  this.pdeprel=other.pdeprel;
  this.fillpred=other.fillpred;
  this.pred=other.pred;
  this.apreds=other.apreds == null ? null : new ArrayList<String>(other.apreds);
}","/** 
 * Constructor which leaves all fields empty. 
 */
CoNLL09Token(){
  super();
  this.id=-1;
  this.head=-1;
  this.phead=-1;
}",0.224
131502,"public void init(Iterable<SimpleAnnoSentence> cr){
  Map<String,Set<String>> predSenseSetMap=new HashMap<String,Set<String>>();
  Set<String> knownRoles=new HashSet<String>();
  Set<String> knownLinks=new HashSet<String>();
  Map<String,MutableInt> words=new HashMap<String,MutableInt>();
  Map<String,MutableInt> unks=new HashMap<String,MutableInt>();
  initialized=true;
  knownLinks.add(""String_Node_Str"");
  knownLinks.add(""String_Node_Str"");
  knownUnks.add(""String_Node_Str"");
  knownRoles.add(UNKNOWN_ROLE);
  knownRoles.add(""String_Node_Str"");
  for (  SimpleAnnoSentence sent : cr) {
    if (sent.size() > maxSentLength) {
      maxSentLength=sent.size();
    }
    for (    SrlEdge edge : sent.getSrlGraph().getEdges()) {
      String role=edge.getLabel();
      knownRoles.add(role);
      int position=edge.getPred().getPosition();
      String lemma=sent.getLemma(position);
      Set<String> senses=predSenseSetMap.get(lemma);
      if (senses == null) {
        senses=new TreeSet<String>();
        predSenseSetMap.put(lemma,senses);
      }
      senses.add(edge.getPred().getLabel());
    }
    for (int position=0; position < sent.size(); position++) {
      String wordForm=sent.getWord(position);
      String cleanWord=normalize.clean(wordForm);
      String unkWord=sig.getSignature(wordForm,position,prm.language);
      unkWord=normalize.escape(unkWord);
      words=addWord(words,cleanWord);
      unks=addWord(unks,unkWord);
      knownPostags.add(sent.getPosTag(position));
    }
  }
  knownWords=getUnigramsAboveThreshold(words,prm.cutoff);
  knownUnks=getUnigramsAboveThreshold(unks,prm.cutoff);
  this.linkStateNames=new ArrayList<String>(knownLinks);
  this.roleStateNames=new ArrayList<String>(knownRoles);
  for (  Entry<String,Set<String>> entry : predSenseSetMap.entrySet()) {
    predSenseListMap.put(entry.getKey(),new ArrayList<String>(entry.getValue()));
  }
  log.info(""String_Node_Str"" + roleStateNames.size());
  log.info(""String_Node_Str"" + roleStateNames);
  log.info(""String_Node_Str"" + predSenseListMap.size());
}","public void init(Iterable<SimpleAnnoSentence> cr){
  Map<String,Set<String>> predSenseSetMap=new HashMap<String,Set<String>>();
  Set<String> knownRoles=new HashSet<String>();
  Set<String> knownLinks=new HashSet<String>();
  Map<String,MutableInt> words=new HashMap<String,MutableInt>();
  Map<String,MutableInt> unks=new HashMap<String,MutableInt>();
  initialized=true;
  knownLinks.add(""String_Node_Str"");
  knownLinks.add(""String_Node_Str"");
  knownUnks.add(""String_Node_Str"");
  knownRoles.add(UNKNOWN_ROLE);
  knownRoles.add(""String_Node_Str"");
  for (  SimpleAnnoSentence sent : cr) {
    if (sent.size() > maxSentLength) {
      maxSentLength=sent.size();
    }
    for (    SrlEdge edge : sent.getSrlGraph().getEdges()) {
      String role=edge.getLabel();
      knownRoles.add(role);
    }
    for (    SrlPred pred : sent.getSrlGraph().getPreds()) {
      int position=pred.getPosition();
      String lemma=sent.getLemma(position);
      Set<String> senses=predSenseSetMap.get(lemma);
      if (senses == null) {
        senses=new TreeSet<String>();
        predSenseSetMap.put(lemma,senses);
      }
      senses.add(pred.getLabel());
    }
    for (int position=0; position < sent.size(); position++) {
      String wordForm=sent.getWord(position);
      String cleanWord=normalize.clean(wordForm);
      String unkWord=sig.getSignature(wordForm,position,prm.language);
      unkWord=normalize.escape(unkWord);
      words=addWord(words,cleanWord);
      unks=addWord(unks,unkWord);
      knownPostags.add(sent.getPosTag(position));
    }
  }
  knownWords=getUnigramsAboveThreshold(words,prm.cutoff);
  knownUnks=getUnigramsAboveThreshold(unks,prm.cutoff);
  this.linkStateNames=new ArrayList<String>(knownLinks);
  this.roleStateNames=new ArrayList<String>(knownRoles);
  for (  Entry<String,Set<String>> entry : predSenseSetMap.entrySet()) {
    predSenseListMap.put(entry.getKey(),new ArrayList<String>(entry.getValue()));
  }
  log.info(""String_Node_Str"" + roleStateNames.size());
  log.info(""String_Node_Str"" + roleStateNames);
  log.info(""String_Node_Str"" + predSenseListMap.size());
}",0.9709623230141587
131503,"private FgExamples getData(FeatureTemplateList fts,CorpusStatistics cs,DatasetType dataType,File dataFile,File goldFile,int maxNumSentences,int maxSentenceLength,String name) throws ParseException, IOException {
  log.info(""String_Node_Str"" + name + ""String_Node_Str""+ dataType+ ""String_Node_Str""+ dataFile);
  FgExamples data;
  SimpleAnnoSentenceCollection sents;
  int numTokens=0;
  if (dataType == DatasetType.CONLL_2009) {
    List<CoNLL09Sentence> conllSents=new ArrayList<CoNLL09Sentence>();
    sents=new SimpleAnnoSentenceCollection();
    CoNLL09FileReader reader=new CoNLL09FileReader(dataFile);
    for (    CoNLL09Sentence sent : reader) {
      if (sents.size() >= maxNumSentences) {
        break;
      }
      if (sent.size() <= maxSentenceLength) {
        sent.intern();
        sent=mungeData(sent);
        conllSents.add(sent);
        sents.add(sent.toSimpleAnnoSentence(cs.prm.useGoldSyntax));
        numTokens+=sent.size();
      }
    }
    reader.close();
    if (goldFile != null) {
      log.info(""String_Node_Str"" + goldFile);
      CoNLL09Writer cw=new CoNLL09Writer(goldFile);
      for (      CoNLL09Sentence sent : conllSents) {
        cw.write(sent);
      }
      cw.close();
    }
  }
 else {
    throw new ParseException(""String_Node_Str"" + dataType);
  }
  log.info(""String_Node_Str"" + name + ""String_Node_Str""+ sents.size());
  log.info(""String_Node_Str"" + name + ""String_Node_Str""+ numTokens);
  if (!cs.isInitialized()) {
    log.info(""String_Node_Str"");
    cs.init(sents);
  }
  log.info(""String_Node_Str"");
  SrlFgExampleBuilderPrm prm=getSrlFgExampleBuilderPrm();
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,fts,cs);
  data=builder.getData(sents);
  if (prm.fgPrm.predictSense) {
    Var v=new Var(VarType.PREDICTED,1,CorpusStatistics.UNKNOWN_SENSE,CorpusStatistics.SENSES_FOR_UNK_PRED);
    fts.add(new FeatureTemplate(new VarSet(v),new Alphabet<Feature>(),CorpusStatistics.UNKNOWN_SENSE));
  }
  log.info(String.format(""String_Node_Str"",name,data.size()));
  log.info(String.format(""String_Node_Str"",name,data.getNumFactors()));
  log.info(String.format(""String_Node_Str"",name,data.getNumVars()));
  log.info(String.format(""String_Node_Str"",data.getTemplates().size()));
  log.info(String.format(""String_Node_Str"",data.getTemplates().getNumObsFeats()));
  return data;
}","private FgExamples getData(FeatureTemplateList fts,CorpusStatistics cs,DatasetType dataType,File dataFile,File goldFile,int maxNumSentences,int maxSentenceLength,String name) throws ParseException, IOException {
  log.info(""String_Node_Str"" + name + ""String_Node_Str""+ dataType+ ""String_Node_Str""+ dataFile);
  FgExamples data;
  SimpleAnnoSentenceCollection sents;
  int numTokens=0;
  if (dataType == DatasetType.CONLL_2009) {
    List<CoNLL09Sentence> conllSents=new ArrayList<CoNLL09Sentence>();
    sents=new SimpleAnnoSentenceCollection();
    CoNLL09FileReader reader=new CoNLL09FileReader(dataFile);
    for (    CoNLL09Sentence sent : reader) {
      if (sents.size() >= maxNumSentences) {
        break;
      }
      if (sent.size() <= maxSentenceLength) {
        sent.intern();
        sent=mungeData(sent);
        conllSents.add(sent);
        sents.add(sent.toSimpleAnnoSentence(cs.prm.useGoldSyntax));
        numTokens+=sent.size();
      }
    }
    reader.close();
    if (goldFile != null) {
      log.info(""String_Node_Str"" + goldFile);
      CoNLL09Writer cw=new CoNLL09Writer(goldFile);
      for (      CoNLL09Sentence sent : conllSents) {
        cw.write(sent);
      }
      cw.close();
    }
  }
 else {
    throw new ParseException(""String_Node_Str"" + dataType);
  }
  log.info(""String_Node_Str"" + name + ""String_Node_Str""+ sents.size());
  log.info(""String_Node_Str"" + name + ""String_Node_Str""+ numTokens);
  if (!cs.isInitialized()) {
    log.info(""String_Node_Str"");
    cs.init(sents);
  }
  log.info(""String_Node_Str"");
  SrlFgExampleBuilderPrm prm=getSrlFgExampleBuilderPrm();
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,fts,cs);
  data=builder.getData(sents);
  if (prm.fgPrm.predictSense) {
    Var v=new Var(VarType.PREDICTED,1,CorpusStatistics.UNKNOWN_SENSE,CorpusStatistics.SENSES_FOR_UNK_PRED);
    fts.add(new FeatureTemplate(new VarSet(v),new Alphabet<Feature>(),SrlFactorGraph.TEMPLATE_KEY_FOR_UNKNOWN_SENSE));
  }
  log.info(String.format(""String_Node_Str"",name,data.size()));
  log.info(String.format(""String_Node_Str"",name,data.getNumFactors()));
  log.info(String.format(""String_Node_Str"",name,data.getNumVars()));
  log.info(String.format(""String_Node_Str"",data.getTemplates().size()));
  log.info(String.format(""String_Node_Str"",data.getTemplates().getNumObsFeats()));
  return data;
}",0.9895500106632544
131504,"/** 
 * This routine returns a String that is the ""signature"" of the class of a word. For, example, it might represent whether it is a number of ends in -s. The strings returned by convention match the pattern UNK-.* , which is just assumed to not match any real word. Behavior depends on the unknownLevel (-uwm flag) passed in to the class. The recognized numbers are 1-5: 5 is fairly English-specific; 4, 3, and 2 look for various word features (digits, dashes, etc.) which are only vaguely English-specific; 1 uses the last two characters combined with a simple classification by capitalization. MM, 12.July.2013:  Added unknownLevel '6', for Spanish.
 * @param word The word to make a signature for
 * @param loc Its position in the sentence (mainly so sentence-initial capitalized words can be treated differently)
 * @return A String that is its signature (equivalence class)
 */
public String getSignature(String word,int loc,int unknownLevel){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  if (word.length() == 0)   return sb.toString();
switch (unknownLevel) {
case 6:
{
      String[] reflexiveEndings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String[] verbEndings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int wlen=word.length();
      int numCaps=0;
      boolean hasDigit=false;
      boolean hasDash=false;
      boolean hasLower=false;
      boolean hasRefl=false;
      boolean hasVerb=false;
      for (int i=0; i < wlen; i++) {
        char ch=word.charAt(i);
        if (!hasDigit && Character.isDigit(ch)) {
          hasDigit=true;
        }
 else         if (!hasDash && ch == '-') {
          hasDash=true;
        }
 else         if (Character.isLetter(ch)) {
          if (!hasLower && Character.isLowerCase(ch)) {
            hasLower=true;
          }
 else           if (!hasLower && Character.isTitleCase(ch)) {
            hasLower=true;
            numCaps++;
          }
 else {
            numCaps++;
          }
        }
      }
      char ch0=word.charAt(0);
      String lowered=word.toLowerCase();
      if (Character.isUpperCase(ch0) || Character.isTitleCase(ch0)) {
        if (loc == 0 && numCaps == 1) {
          sb.append(""String_Node_Str"");
          if (isKnown(lowered)) {
            sb.append(""String_Node_Str"");
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else       if (!Character.isLetter(ch0) && numCaps > 0) {
        sb.append(""String_Node_Str"");
      }
 else       if (hasLower) {
        sb.append(""String_Node_Str"");
      }
      if (hasDigit) {
        sb.append(""String_Node_Str"");
      }
      if (hasDash) {
        sb.append(""String_Node_Str"");
      }
      if (lowered.endsWith(""String_Node_Str"") && wlen >= 3 && !hasVerb) {
        sb.append(""String_Node_Str"");
      }
 else       if (word.length() >= 5 && !hasDash && !(hasDigit && numCaps > 0)) {
        String ending=lowered.length() > 2 ? lowered.substring(lowered.length() - 2) : lowered;
        for (        String reflEnding : reflexiveEndings) {
          if (reflEnding.equals(ending)) {
            hasRefl=true;
            break;
          }
        }
        if (hasRefl) {
          ending=lowered.length() > 4 ? lowered.substring(lowered.length() - 4,lowered.length() - 2) : lowered;
        }
        for (        String verbEnding : verbEndings) {
          if (verbEnding.equals(ending)) {
            hasVerb=true;
            sb.append(""String_Node_Str"");
            break;
          }
        }
      }
      break;
    }
case 5:
{
    int wlen=word.length();
    int numCaps=0;
    boolean hasDigit=false;
    boolean hasDash=false;
    boolean hasLower=false;
    for (int i=0; i < wlen; i++) {
      char ch=word.charAt(i);
      if (!hasDigit && Character.isDigit(ch)) {
        hasDigit=true;
      }
 else       if (!hasDash && ch == '-') {
        hasDash=true;
      }
 else       if (Character.isLetter(ch)) {
        if (!hasLower && Character.isLowerCase(ch)) {
          hasLower=true;
        }
 else         if (!hasLower && Character.isTitleCase(ch)) {
          hasLower=true;
          numCaps++;
        }
 else {
          numCaps++;
        }
      }
    }
    char ch0=word.charAt(0);
    String lowered=word.toLowerCase();
    if (Character.isUpperCase(ch0) || Character.isTitleCase(ch0)) {
      if (loc == 0 && numCaps == 1) {
        sb.append(""String_Node_Str"");
        if (isKnown(lowered)) {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
 else     if (!Character.isLetter(ch0) && numCaps > 0) {
      sb.append(""String_Node_Str"");
    }
 else     if (hasLower) {
      sb.append(""String_Node_Str"");
    }
    if (hasDigit) {
      sb.append(""String_Node_Str"");
    }
    if (hasDash) {
      sb.append(""String_Node_Str"");
    }
    if (lowered.endsWith(""String_Node_Str"") && wlen >= 3) {
      char ch2=lowered.charAt(wlen - 2);
      if (ch2 != 's' && ch2 != 'i' && ch2 != 'u') {
        sb.append(""String_Node_Str"");
      }
    }
 else     if (word.length() >= 5 && !hasDash && !(hasDigit && numCaps > 0)) {
      if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
    }
    break;
  }
case 4:
{
  boolean hasDigit=false;
  boolean hasNonDigit=false;
  boolean hasLetter=false;
  boolean hasLower=false;
  boolean hasDash=false;
  boolean hasPeriod=false;
  boolean hasComma=false;
  for (int i=0; i < word.length(); i++) {
    char ch=word.charAt(i);
    if (Character.isDigit(ch)) {
      hasDigit=true;
    }
 else {
      hasNonDigit=true;
      if (Character.isLetter(ch)) {
        hasLetter=true;
        if (Character.isLowerCase(ch) || Character.isTitleCase(ch)) {
          hasLower=true;
        }
      }
 else {
        if (ch == '-') {
          hasDash=true;
        }
 else         if (ch == '.') {
          hasPeriod=true;
        }
 else         if (ch == ',') {
          hasComma=true;
        }
      }
    }
  }
  if (Character.isUpperCase(word.charAt(0)) || Character.isTitleCase(word.charAt(0))) {
    if (!hasLower) {
      sb.append(""String_Node_Str"");
    }
 else     if (loc == 0) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
  }
 else   if (hasLower) {
    sb.append(""String_Node_Str"");
  }
 else   if (hasLetter) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (hasDigit && !hasNonDigit) {
    sb.append(""String_Node_Str"");
  }
 else   if (hasDigit) {
    sb.append(""String_Node_Str"");
  }
  if (hasDash) {
    sb.append(""String_Node_Str"");
  }
  if (hasPeriod) {
    sb.append(""String_Node_Str"");
  }
  if (hasComma) {
    sb.append(""String_Node_Str"");
  }
  if (word.length() > 3) {
    char ch=word.charAt(word.length() - 1);
    if (Character.isLetter(ch)) {
      sb.append(""String_Node_Str"");
      sb.append(Character.toLowerCase(ch));
    }
  }
  break;
}
case 3:
{
sb.append(""String_Node_Str"");
char lastClass='-';
char newClass;
int num=0;
for (int i=0; i < word.length(); i++) {
  char ch=word.charAt(i);
  if (Character.isUpperCase(ch) || Character.isTitleCase(ch)) {
    if (loc == 0) {
      newClass='S';
    }
 else {
      newClass='L';
    }
  }
 else   if (Character.isLetter(ch)) {
    newClass='l';
  }
 else   if (Character.isDigit(ch)) {
    newClass='d';
  }
 else   if (ch == '-') {
    newClass='h';
  }
 else   if (ch == '.') {
    newClass='p';
  }
 else {
    newClass='s';
  }
  if (newClass != lastClass) {
    lastClass=newClass;
    sb.append(lastClass);
    num=1;
  }
 else {
    if (num < 2) {
      sb.append('+');
    }
    num++;
  }
}
if (word.length() > 3) {
  char ch=Character.toLowerCase(word.charAt(word.length() - 1));
  sb.append('-');
  sb.append(ch);
}
break;
}
case 2:
{
boolean hasDigit=false;
boolean hasNonDigit=false;
boolean hasLower=false;
for (int i=0; i < word.length(); i++) {
char ch=word.charAt(i);
if (Character.isDigit(ch)) {
  hasDigit=true;
}
 else {
  hasNonDigit=true;
  if (Character.isLetter(ch)) {
    if (Character.isLowerCase(ch) || Character.isTitleCase(ch)) {
      hasLower=true;
    }
  }
}
}
if (Character.isUpperCase(word.charAt(0)) || Character.isTitleCase(word.charAt(0))) {
if (!hasLower) {
  sb.append(""String_Node_Str"");
}
 else if (loc == 0) {
  sb.append(""String_Node_Str"");
}
 else {
  sb.append(""String_Node_Str"");
}
}
 else if (hasLower) {
sb.append(""String_Node_Str"");
}
if (word.indexOf('-') >= 0) {
sb.append(""String_Node_Str"");
}
if (hasDigit) {
if (!hasNonDigit) {
  sb.append(""String_Node_Str"");
}
 else {
  sb.append(""String_Node_Str"");
}
}
 else if (word.length() > 3) {
char ch=word.charAt(word.length() - 1);
sb.append(Character.toLowerCase(ch));
}
break;
}
default :
sb.append(""String_Node_Str"");
sb.append(word.substring(Math.max(word.length() - 2,0),word.length()));
sb.append(""String_Node_Str"");
if (Character.isLowerCase(word.charAt(0))) {
sb.append(""String_Node_Str"");
}
 else {
if (Character.isUpperCase(word.charAt(0))) {
if (loc == 0) {
sb.append(""String_Node_Str"");
}
 else {
sb.append(""String_Node_Str"");
}
}
 else {
sb.append(""String_Node_Str"");
}
}
}
return sb.toString();
}","/** 
 * This routine returns a String that is the ""signature"" of the class of a word. For, example, it might represent whether it is a number of ends in -s. The strings returned by convention match the pattern UNK-.* , which is just assumed to not match any real word. Behavior depends on the unknownLevel (-uwm flag) passed in to the class. The recognized numbers are 1-5: 5 is fairly English-specific; 4, 3, and 2 look for various word features (digits, dashes, etc.) which are only vaguely English-specific; 1 uses the last two characters combined with a simple classification by capitalization. MM, 12.July.2013:  Added unknownLevel '6', for Spanish.
 * @param word The word to make a signature for
 * @param loc Its position in the sentence (mainly so sentence-initial capitalized words can be treated differently)
 * @return A String that is its signature (equivalence class)
 */
public String getSignature(String word,int loc,int unknownLevel){
  StringBuffer sb=new StringBuffer(""String_Node_Str"");
  if (word.length() == 0)   return sb.toString();
switch (unknownLevel) {
case 6:
{
      String[] reflexiveEndings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String[] verbEndings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      int wlen=word.length();
      int numCaps=0;
      boolean hasDigit=false;
      boolean hasDash=false;
      boolean hasLower=false;
      boolean hasRefl=false;
      boolean hasVerb=false;
      for (int i=0; i < wlen; i++) {
        char ch=word.charAt(i);
        if (!hasDigit && Character.isDigit(ch)) {
          hasDigit=true;
        }
 else         if (!hasDash && ch == '-') {
          hasDash=true;
        }
 else         if (Character.isLetter(ch)) {
          if (Character.isLowerCase(ch)) {
            hasLower=true;
          }
 else           if (Character.isTitleCase(ch)) {
            hasLower=true;
            numCaps++;
          }
 else {
            numCaps++;
          }
        }
      }
      char ch0=word.charAt(0);
      String lowered=word.toLowerCase();
      if (Character.isUpperCase(ch0) || Character.isTitleCase(ch0)) {
        if (loc == 0 && numCaps == 1) {
          sb.append(""String_Node_Str"");
          if (isKnown(lowered)) {
            sb.append(""String_Node_Str"");
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else       if (!Character.isLetter(ch0) && numCaps > 0) {
        sb.append(""String_Node_Str"");
      }
 else       if (hasLower) {
        sb.append(""String_Node_Str"");
      }
      if (hasDigit) {
        sb.append(""String_Node_Str"");
      }
      if (hasDash) {
        sb.append(""String_Node_Str"");
      }
      if (lowered.endsWith(""String_Node_Str"") && wlen >= 3 && !hasVerb) {
        sb.append(""String_Node_Str"");
      }
 else       if (word.length() >= 5 && !hasDash && !(hasDigit && numCaps > 0)) {
        String ending=lowered.length() > 2 ? lowered.substring(lowered.length() - 2) : lowered;
        for (        String reflEnding : reflexiveEndings) {
          if (reflEnding.equals(ending)) {
            hasRefl=true;
            break;
          }
        }
        if (hasRefl) {
          ending=lowered.length() > 4 ? lowered.substring(lowered.length() - 4,lowered.length() - 2) : lowered;
        }
        for (        String verbEnding : verbEndings) {
          if (verbEnding.equals(ending)) {
            hasVerb=true;
            sb.append(""String_Node_Str"");
            break;
          }
        }
      }
      break;
    }
case 5:
{
    int wlen=word.length();
    int numCaps=0;
    boolean hasDigit=false;
    boolean hasDash=false;
    boolean hasLower=false;
    for (int i=0; i < wlen; i++) {
      char ch=word.charAt(i);
      if (!hasDigit && Character.isDigit(ch)) {
        hasDigit=true;
      }
 else       if (!hasDash && ch == '-') {
        hasDash=true;
      }
 else       if (Character.isLetter(ch)) {
        if (Character.isLowerCase(ch)) {
          hasLower=true;
        }
 else         if (Character.isTitleCase(ch)) {
          hasLower=true;
          numCaps++;
        }
 else {
          numCaps++;
        }
      }
    }
    char ch0=word.charAt(0);
    String lowered=word.toLowerCase();
    if (Character.isUpperCase(ch0) || Character.isTitleCase(ch0)) {
      if (loc == 0 && numCaps == 1) {
        sb.append(""String_Node_Str"");
        if (isKnown(lowered)) {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
 else     if (!Character.isLetter(ch0) && numCaps > 0) {
      sb.append(""String_Node_Str"");
    }
 else     if (hasLower) {
      sb.append(""String_Node_Str"");
    }
    if (hasDigit) {
      sb.append(""String_Node_Str"");
    }
    if (hasDash) {
      sb.append(""String_Node_Str"");
    }
    if (lowered.endsWith(""String_Node_Str"") && wlen >= 3) {
      char ch2=lowered.charAt(wlen - 2);
      if (ch2 != 's' && ch2 != 'i' && ch2 != 'u') {
        sb.append(""String_Node_Str"");
      }
    }
 else     if (word.length() >= 5 && !hasDash && !(hasDigit && numCaps > 0)) {
      if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
 else       if (lowered.endsWith(""String_Node_Str"")) {
        sb.append(""String_Node_Str"");
      }
    }
    break;
  }
case 4:
{
  boolean hasDigit=false;
  boolean hasNonDigit=false;
  boolean hasLetter=false;
  boolean hasLower=false;
  boolean hasDash=false;
  boolean hasPeriod=false;
  boolean hasComma=false;
  for (int i=0; i < word.length(); i++) {
    char ch=word.charAt(i);
    if (Character.isDigit(ch)) {
      hasDigit=true;
    }
 else {
      hasNonDigit=true;
      if (Character.isLetter(ch)) {
        hasLetter=true;
        if (Character.isLowerCase(ch) || Character.isTitleCase(ch)) {
          hasLower=true;
        }
      }
 else {
        if (ch == '-') {
          hasDash=true;
        }
 else         if (ch == '.') {
          hasPeriod=true;
        }
 else         if (ch == ',') {
          hasComma=true;
        }
      }
    }
  }
  if (Character.isUpperCase(word.charAt(0)) || Character.isTitleCase(word.charAt(0))) {
    if (!hasLower) {
      sb.append(""String_Node_Str"");
    }
 else     if (loc == 0) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
  }
 else   if (hasLower) {
    sb.append(""String_Node_Str"");
  }
 else   if (hasLetter) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (hasDigit && !hasNonDigit) {
    sb.append(""String_Node_Str"");
  }
 else   if (hasDigit) {
    sb.append(""String_Node_Str"");
  }
  if (hasDash) {
    sb.append(""String_Node_Str"");
  }
  if (hasPeriod) {
    sb.append(""String_Node_Str"");
  }
  if (hasComma) {
    sb.append(""String_Node_Str"");
  }
  if (word.length() > 3) {
    char ch=word.charAt(word.length() - 1);
    if (Character.isLetter(ch)) {
      sb.append(""String_Node_Str"");
      sb.append(Character.toLowerCase(ch));
    }
  }
  break;
}
case 3:
{
sb.append(""String_Node_Str"");
char lastClass='-';
char newClass;
int num=0;
for (int i=0; i < word.length(); i++) {
  char ch=word.charAt(i);
  if (Character.isUpperCase(ch) || Character.isTitleCase(ch)) {
    if (loc == 0) {
      newClass='S';
    }
 else {
      newClass='L';
    }
  }
 else   if (Character.isLetter(ch)) {
    newClass='l';
  }
 else   if (Character.isDigit(ch)) {
    newClass='d';
  }
 else   if (ch == '-') {
    newClass='h';
  }
 else   if (ch == '.') {
    newClass='p';
  }
 else {
    newClass='s';
  }
  if (newClass != lastClass) {
    lastClass=newClass;
    sb.append(lastClass);
    num=1;
  }
 else {
    if (num < 2) {
      sb.append('+');
    }
    num++;
  }
}
if (word.length() > 3) {
  char ch=Character.toLowerCase(word.charAt(word.length() - 1));
  sb.append('-');
  sb.append(ch);
}
break;
}
case 2:
{
boolean hasDigit=false;
boolean hasNonDigit=false;
boolean hasLower=false;
for (int i=0; i < word.length(); i++) {
char ch=word.charAt(i);
if (Character.isDigit(ch)) {
  hasDigit=true;
}
 else {
  hasNonDigit=true;
  if (Character.isLetter(ch)) {
    if (Character.isLowerCase(ch) || Character.isTitleCase(ch)) {
      hasLower=true;
    }
  }
}
}
if (Character.isUpperCase(word.charAt(0)) || Character.isTitleCase(word.charAt(0))) {
if (!hasLower) {
  sb.append(""String_Node_Str"");
}
 else if (loc == 0) {
  sb.append(""String_Node_Str"");
}
 else {
  sb.append(""String_Node_Str"");
}
}
 else if (hasLower) {
sb.append(""String_Node_Str"");
}
if (word.indexOf('-') >= 0) {
sb.append(""String_Node_Str"");
}
if (hasDigit) {
if (!hasNonDigit) {
  sb.append(""String_Node_Str"");
}
 else {
  sb.append(""String_Node_Str"");
}
}
 else if (word.length() > 3) {
char ch=word.charAt(word.length() - 1);
sb.append(Character.toLowerCase(ch));
}
break;
}
default :
sb.append(""String_Node_Str"");
sb.append(word.substring(Math.max(word.length() - 2,0),word.length()));
sb.append(""String_Node_Str"");
if (Character.isLowerCase(word.charAt(0))) {
sb.append(""String_Node_Str"");
}
 else {
if (Character.isUpperCase(word.charAt(0))) {
if (loc == 0) {
sb.append(""String_Node_Str"");
}
 else {
sb.append(""String_Node_Str"");
}
}
 else {
sb.append(""String_Node_Str"");
}
}
}
return sb.toString();
}",0.9910681056940828
131505,"public void init(Iterable<SimpleAnnoSentence> cr){
  initialized=true;
  knownLinks.add(""String_Node_Str"");
  knownLinks.add(""String_Node_Str"");
  knownUnks.add(""String_Node_Str"");
  knownRoles.add(UNKNOWN_ROLE);
  knownRoles.add(""String_Node_Str"");
  for (  SimpleAnnoSentence sent : cr) {
    if (sent.size() > maxSentLength) {
      maxSentLength=sent.size();
    }
    for (    SrlEdge edge : sent.getSrlGraph().getEdges()) {
      String role=edge.getLabel();
      knownRoles.add(role);
      int position=edge.getPred().getPosition();
      String lemma=sent.getLemma(position);
      Set<String> senses=predSenseSetMap.get(lemma);
      if (senses == null) {
        senses=new TreeSet<String>();
        predSenseSetMap.put(lemma,senses);
      }
      senses.add(edge.getPred().getLabel());
    }
    for (int position=0; position < sent.size(); position++) {
      String wordForm=sent.getWord(position);
      String cleanWord=normalize.clean(wordForm);
      String unkWord=sig.getSignature(wordForm,position,prm.language);
      unkWord=normalize.escape(unkWord);
      System.out.println(wordForm);
      System.out.println(unkWord);
      words=addWord(words,cleanWord);
      unks=addWord(unks,unkWord);
      knownPostags.add(sent.getPosTag(position));
    }
  }
  knownWords=getUnigramsAboveThreshold(words,prm.cutoff);
  knownUnks=getUnigramsAboveThreshold(unks,prm.cutoff);
  this.linkStateNames=new ArrayList<String>(knownLinks);
  this.roleStateNames=new ArrayList<String>(knownRoles);
  for (  Entry<String,Set<String>> entry : predSenseSetMap.entrySet()) {
    predSenseListMap.put(entry.getKey(),new ArrayList<String>(entry.getValue()));
  }
  log.info(""String_Node_Str"" + roleStateNames.size());
  log.info(""String_Node_Str"" + roleStateNames);
  log.info(""String_Node_Str"" + predSenseListMap.size());
}","public void init(Iterable<SimpleAnnoSentence> cr){
  initialized=true;
  knownLinks.add(""String_Node_Str"");
  knownLinks.add(""String_Node_Str"");
  knownUnks.add(""String_Node_Str"");
  knownRoles.add(UNKNOWN_ROLE);
  knownRoles.add(""String_Node_Str"");
  for (  SimpleAnnoSentence sent : cr) {
    if (sent.size() > maxSentLength) {
      maxSentLength=sent.size();
    }
    for (    SrlEdge edge : sent.getSrlGraph().getEdges()) {
      String role=edge.getLabel();
      knownRoles.add(role);
      int position=edge.getPred().getPosition();
      String lemma=sent.getLemma(position);
      Set<String> senses=predSenseSetMap.get(lemma);
      if (senses == null) {
        senses=new TreeSet<String>();
        predSenseSetMap.put(lemma,senses);
      }
      senses.add(edge.getPred().getLabel());
    }
    for (int position=0; position < sent.size(); position++) {
      String wordForm=sent.getWord(position);
      String cleanWord=normalize.clean(wordForm);
      String unkWord=sig.getSignature(wordForm,position,prm.language);
      unkWord=normalize.escape(unkWord);
      words=addWord(words,cleanWord);
      unks=addWord(unks,unkWord);
      knownPostags.add(sent.getPosTag(position));
    }
  }
  knownWords=getUnigramsAboveThreshold(words,prm.cutoff);
  knownUnks=getUnigramsAboveThreshold(unks,prm.cutoff);
  this.linkStateNames=new ArrayList<String>(knownLinks);
  this.roleStateNames=new ArrayList<String>(knownRoles);
  for (  Entry<String,Set<String>> entry : predSenseSetMap.entrySet()) {
    predSenseListMap.put(entry.getKey(),new ArrayList<String>(entry.getValue()));
  }
  log.info(""String_Node_Str"" + roleStateNames.size());
  log.info(""String_Node_Str"" + roleStateNames);
  log.info(""String_Node_Str"" + predSenseListMap.size());
}",0.9802063005296906
131506,"public SentFeatureExtractor(SentFeatureExtractorPrm prm,SimpleAnnoSentence sent,CorpusStatistics cs){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.sig=cs.sig;
  if (!prm.biasOnly) {
    this.parents=getParents(sent);
    if (prm.useZhaoFeats || prm.useDepPathFeats) {
      this.featuredSentence=createZhaoSentence();
      this.featuredHeadDefault=new FeatureObject(-1,parents,sent);
      this.featuredTailDefault=new FeatureObject(sent.size(),parents,sent);
    }
  }
 else {
    this.parents=null;
  }
}","public SentFeatureExtractor(SentFeatureExtractorPrm prm,SimpleAnnoSentence sent,CorpusStatistics cs){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.sig=cs.sig;
  if (!prm.biasOnly) {
    this.parents=getParents(sent);
    if (prm.useZhaoFeats || prm.useDepPathFeats || prm.useBjorkelundFeats) {
      this.featuredSentence=createZhaoSentence();
      this.featuredHeadDefault=new FeatureObject(-1,parents,sent);
      this.featuredTailDefault=new FeatureObject(sent.size(),parents,sent);
    }
  }
 else {
    this.parents=null;
  }
}",0.9754716981132076
131507,"private void maybeUpdateGradientAndValue(){
  if (!areGradientAndValueCached) {
    function.setPoint(params);
    value=function.getValue();
    function.getGradient(gradient);
    areGradientAndValueCached=true;
  }
}","private void maybeUpdateGradientAndValue(){
  if (!areGradientAndValueCached) {
    function.setPoint(params);
    value=function.getValue();
    Arrays.fill(gradient,0.0);
    function.getGradient(gradient);
    areGradientAndValueCached=true;
  }
}",0.9339019189765458
131508,"@Test public void testZhaoObjectFeat(){
  CoNLL09Sentence sent=getSpanishConll09Sentence2();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,sent,cs);
  int[] parents=fe.getParents(sent);
  ZhaoObject zhaoPred=new ZhaoObject(3,parents,sent,cs);
  ZhaoObject zhaoArg=new ZhaoObject(4,parents,sent,cs);
  List<String> predFeat=zhaoPred.getFeat();
  List<String> argFeat=zhaoArg.getFeat();
  ArrayList<String> intendedPredFeats=new ArrayList<String>();
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  assertEquals(predFeat,intendedPredFeats);
  ArrayList<String> intendedArgFeats=new ArrayList<String>();
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  System.out.println(argFeat);
  assertEquals(argFeat,intendedArgFeats);
}","@Test public void testZhaoObjectFeat(){
  CoNLL09Sentence sent=getSpanishConll09Sentence2();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,sent,cs);
  int[] parents=fe.getParents(sent);
  ZhaoObject zhaoPred=new ZhaoObject(3,parents,sent,cs);
  ZhaoObject zhaoArg=new ZhaoObject(4,parents,sent,cs);
  List<String> predFeat=zhaoPred.getPfeat();
  List<String> argFeat=zhaoArg.getPfeat();
  ArrayList<String> intendedPredFeats=new ArrayList<String>();
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  intendedPredFeats.add(""String_Node_Str"");
  assertEquals(predFeat,intendedPredFeats);
  ArrayList<String> intendedArgFeats=new ArrayList<String>();
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  intendedArgFeats.add(""String_Node_Str"");
  System.out.println(argFeat);
  assertEquals(argFeat,intendedArgFeats);
}",0.9978494623655914
131509,"public ZhaoObject(String input){
  super(-1,""String_Node_Str"" + input,""String_Node_Str"" + input,""String_Node_Str"" + input,""String_Node_Str"" + input,""String_Node_Str"" + input,null,null,-2,-2,""String_Node_Str"" + input,""String_Node_Str"" + input,false,""String_Node_Str"" + input,null);
  setFeat(-1);
  this.rootPath=new ArrayList<Pair<Integer,Dir>>();
  this.rootPath.add(new Pair<Integer,Dir>(-1,Dir.UP));
  this.parent=-1;
  this.children=new ArrayList<Integer>();
  this.children.add(-1);
  this.farLeftChild=-1;
  this.farRightChild=-1;
  this.nearLeftChild=-1;
  this.nearRightChild=-1;
  this.argLowSupport=-1;
  this.argHighSupport=-1;
  this.predLowSupport=-1;
  this.predHighSupport=-1;
  this.noFarChildren=new ArrayList<Integer>();
  setNoFarChildren();
}","public ZhaoObject(String input){
  super(-1,""String_Node_Str"" + input,""String_Node_Str"" + input,""String_Node_Str"" + input,""String_Node_Str"" + input,""String_Node_Str"" + input,null,null,-2,-2,""String_Node_Str"" + input,""String_Node_Str"" + input,false,""String_Node_Str"" + input,null);
  setPfeat(-1);
  this.rootPath=new ArrayList<Pair<Integer,Dir>>();
  this.rootPath.add(new Pair<Integer,Dir>(-1,Dir.UP));
  this.parent=-1;
  this.children=new ArrayList<Integer>();
  this.children.add(-1);
  this.farLeftChild=-1;
  this.farRightChild=-1;
  this.nearLeftChild=-1;
  this.nearRightChild=-1;
  this.argLowSupport=-1;
  this.argHighSupport=-1;
  this.predLowSupport=-1;
  this.predHighSupport=-1;
  this.noFarChildren=new ArrayList<Integer>();
  setNoFarChildren();
}",0.998032786885246
131510,"public void setPfeat(Integer idx){
  feat=new ArrayList<String>(6);
  if (idx == -1) {
    for (int i=0; i < 6; i++) {
      feat.add(NO_MORPH);
    }
  }
 else {
    List<String> coNLLFeats=sent.get(idx).getPfeat();
    if (coNLLFeats == null) {
      for (int i=0; i < 6; i++) {
        feat.add(NO_MORPH);
      }
    }
 else {
      feat.addAll(coNLLFeats);
      for (int i=feat.size(); i < 6; i++) {
        feat.add(NO_MORPH);
      }
    }
  }
}","public void setPfeat(Integer idx){
  feat=new ArrayList<String>(6);
  if (idx == -1) {
    for (int i=0; i < 6; i++) {
      feat.add(NO_MORPH);
    }
  }
 else {
    List<String> coNLLFeats=word.getPfeat();
    if (coNLLFeats == null) {
      for (int i=0; i < 6; i++) {
        feat.add(NO_MORPH);
      }
    }
 else {
      feat.addAll(coNLLFeats);
      for (int i=feat.size(); i < 6; i++) {
        feat.add(NO_MORPH);
      }
    }
  }
}",0.9810479375696768
131511,"public SentFeatureExtractor(SentFeatureExtractorPrm prm,CoNLL09Sentence sent,CorpusStatistics cs,Alphabet<String> alphabet){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.alphabet=alphabet;
  this.sig=cs.sig;
  this.parents=getParents(sent);
  if (prm.useZhaoFeats) {
    this.zhaoSentence=createZhaoSentence();
    this.zhaoHeadDefault=new ZhaoObject(""String_Node_Str"");
    this.zhaoTailDefault=new ZhaoObject(""String_Node_Str"");
  }
}","public SentFeatureExtractor(SentFeatureExtractorPrm prm,CoNLL09Sentence sent,CorpusStatistics cs,Alphabet<String> alphabet){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.alphabet=alphabet;
  this.sig=cs.sig;
  this.parents=getParents(sent);
  if (prm.useZhaoFeats || prm.useDepPathFeats) {
    this.zhaoSentence=createZhaoSentence();
    this.zhaoHeadDefault=new ZhaoObject(""String_Node_Str"");
    this.zhaoTailDefault=new ZhaoObject(""String_Node_Str"");
  }
}",0.974863387978142
131512,"/** 
 * Computes the expected feature counts for a factor graph, and adds them to the gradient after scaling them.
 * @param ex 
 * @param inferencer The inferencer for a clamped factor graph, which has already been run.
 * @param fts TODO
 * @param multiplier The value which the expected features will be multiplied by.
 * @param gradient The OUTPUT gradient vector to which the scaled expected features will be added.
 * @param factorId The id of the factor.
 * @param featCache The feature cache for the clamped factor graph, on which the inferencer was run.
 */
private void addExpectedFeatureCounts(FactorGraph fg,FgExample ex,FgInferencer inferencer,FeatureTemplateList fts,double multiplier,FgModel gradient){
  for (int factorId=0; factorId < fg.getNumFactors(); factorId++) {
    Factor f=fg.getFactor(factorId);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof ExpFamFactor) {
      DenseFactor factorMarginal=inferencer.getMarginalsForFactorId(factorId);
      int numConfigs=factorMarginal.getVars().calcNumConfigs();
      if (numConfigs == 0) {
        FeatureVector fv=ex.getObservationFeatures(factorId);
        int config=ex.getGoldConfigIdxLatPred(factorId);
        for (        IntDoubleEntry entry : fv) {
          gradient.addIfParamExists(fts.getTemplateId(f),config,entry.index(),multiplier * entry.get());
        }
      }
 else {
        IntIter iter=null;
        if (fg == ex.getFgLat()) {
          VarConfig predVc=ex.getGoldConfigPred(factorId);
          iter=IndexForVc.getConfigIter(ex.getFgLatPred().getFactor(factorId).getVars(),predVc);
        }
        for (int c=0; c < numConfigs; c++) {
          double prob=factorMarginal.getValue(c);
          if (inferencer.isLogDomain()) {
            prob=Utilities.exp(prob);
          }
          FeatureVector fv=ex.getObservationFeatures(factorId);
          int config=(iter != null) ? iter.next() : c;
          for (          IntDoubleEntry entry : fv) {
            gradient.addIfParamExists(fts.getTemplateId(f),config,entry.index(),multiplier * prob * entry.get());
          }
        }
        assert(iter == null || !iter.hasNext());
      }
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
}","/** 
 * Computes the expected feature counts for a factor graph, and adds them to the gradient after scaling them.
 * @param ex 
 * @param inferencer The inferencer for a clamped factor graph, which has already been run.
 * @param fts TODO
 * @param multiplier The value which the expected features will be multiplied by.
 * @param gradient The OUTPUT gradient vector to which the scaled expected features will be added.
 * @param factorId The id of the factor.
 * @param featCache The feature cache for the clamped factor graph, on which the inferencer was run.
 */
private void addExpectedFeatureCounts(FactorGraph fg,FgExample ex,FgInferencer inferencer,FeatureTemplateList fts,double multiplier,FgModel gradient){
  for (int factorId=0; factorId < fg.getNumFactors(); factorId++) {
    Factor f=fg.getFactor(factorId);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof ExpFamFactor) {
      DenseFactor factorMarginal=inferencer.getMarginalsForFactorId(factorId);
      int numConfigs=factorMarginal.getVars().calcNumConfigs();
      if (numConfigs == 0) {
        FeatureVector fv=ex.getObservationFeatures(factorId);
        int config=ex.getGoldConfigIdxPred(factorId);
        for (        IntDoubleEntry entry : fv) {
          gradient.addIfParamExists(fts.getTemplateId(f),config,entry.index(),multiplier * entry.get());
        }
      }
 else {
        IntIter iter=null;
        if (fg == ex.getFgLat()) {
          VarConfig predVc=ex.getGoldConfigPred(factorId);
          iter=IndexForVc.getConfigIter(ex.getFgLatPred().getFactor(factorId).getVars(),predVc);
        }
        for (int c=0; c < numConfigs; c++) {
          double prob=factorMarginal.getValue(c);
          if (inferencer.isLogDomain()) {
            prob=Utilities.exp(prob);
          }
          FeatureVector fv=ex.getObservationFeatures(factorId);
          int config=(iter != null) ? iter.next() : c;
          for (          IntDoubleEntry entry : fv) {
            gradient.addIfParamExists(fts.getTemplateId(f),config,entry.index(),multiplier * prob * entry.get());
          }
        }
        assert(iter == null || !iter.hasNext());
      }
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
}",0.9993340732519422
131513,"public static FeatureTemplateList getFtl(){
  FeatureTemplateList fts=new FeatureTemplateList();
  Var v1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str""));
  Var v2=new Var(VarType.PREDICTED,3,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
{
    Alphabet<Feature> alphabet=new Alphabet<Feature>();
    alphabet.lookupIndex(new Feature(""String_Node_Str""));
    fts.add(new FeatureTemplate(new VarSet(v1),alphabet,""String_Node_Str""));
  }
{
    Alphabet<Feature> alphabet=new Alphabet<Feature>();
    alphabet.lookupIndex(new Feature(""String_Node_Str""));
    alphabet.lookupIndex(new Feature(""String_Node_Str""));
    fts.add(new FeatureTemplate(new VarSet(v1,v2),alphabet,""String_Node_Str""));
  }
  return fts;
}","public static FeatureTemplateList getFtl(boolean useLat){
  FeatureTemplateList fts=new FeatureTemplateList();
  Var v1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str""));
  Var v2=new Var(useLat ? VarType.LATENT : VarType.PREDICTED,3,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
{
    Alphabet<Feature> alphabet=new Alphabet<Feature>();
    alphabet.lookupIndex(new Feature(""String_Node_Str""));
    fts.add(new FeatureTemplate(new VarSet(v1),alphabet,""String_Node_Str""));
  }
{
    Alphabet<Feature> alphabet=new Alphabet<Feature>();
    alphabet.lookupIndex(new Feature(""String_Node_Str""));
    alphabet.lookupIndex(new Feature(""String_Node_Str""));
    fts.add(new FeatureTemplate(new VarSet(v1,v2),alphabet,""String_Node_Str""));
  }
  return fts;
}",0.9758745476477684
131514,"private FgExample getExForFts(String state1,String state2,FeatureTemplateList fts){
  Var v1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str""));
  Var v2=new Var(VarType.PREDICTED,3,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  FactorGraph fg=new FactorGraph();
  fg.addFactor(new ExpFamFactor(new VarSet(v1,v2),""String_Node_Str""));
  VarConfig vc=new VarConfig();
  vc.put(v1,state1);
  vc.put(v2,state2);
  return new FgExample(fg,vc,new MockFeatureExtractor(),fts);
}","private FgExample getExForFts(String state1,String state2,FeatureTemplateList fts,boolean useLat){
  Var v1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str""));
  Var v2=new Var(useLat ? VarType.LATENT : VarType.PREDICTED,3,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  FactorGraph fg=new FactorGraph();
  fg.addFactor(new ExpFamFactor(new VarSet(v1,v2),""String_Node_Str""));
  VarConfig vc=new VarConfig();
  vc.put(v1,state1);
  vc.put(v2,state2);
  return new FgExample(fg,vc,new MockFeatureExtractor(),fts);
}",0.9652836579170194
131515,"@Test public void testExcludeUnsupportedFeatures(){
  FeatureTemplateList fts=getFtl();
  FgExamples data=new FgExamples(fts);
  data.add(getExForFts(""String_Node_Str"",""String_Node_Str"",fts));
  data.add(getExForFts(""String_Node_Str"",""String_Node_Str"",fts));
  data.add(getExForFts(""String_Node_Str"",""String_Node_Str"",fts));
  data.add(getExForFts(""String_Node_Str"",""String_Node_Str"",fts));
  FgModel model1=new FgModel(data,true);
  System.out.println(""String_Node_Str"" + model1);
  assertEquals(20,model1.getNumParams());
  FgModel model2=new FgModel(data,false);
  System.out.println(""String_Node_Str"" + model2);
  assertEquals(6 + 4,model2.getNumParams());
}","@Test public void testExcludeUnsupportedFeatures(){
  boolean useLat=false;
  FeatureTemplateList fts=getFtl(useLat);
  FgExamples data=new FgExamples(fts);
  data.add(getExForFts(""String_Node_Str"",""String_Node_Str"",fts,useLat));
  data.add(getExForFts(""String_Node_Str"",""String_Node_Str"",fts,useLat));
  data.add(getExForFts(""String_Node_Str"",""String_Node_Str"",fts,useLat));
  data.add(getExForFts(""String_Node_Str"",""String_Node_Str"",fts,useLat));
  FgModel model1=new FgModel(data,true);
  System.out.println(""String_Node_Str"" + model1);
  assertEquals(20,model1.getNumParams());
  FgModel model2=new FgModel(data,false);
  System.out.println(""String_Node_Str"" + model2);
  assertEquals(6 + 4,model2.getNumParams());
}",0.9580318379160636
131516,"@Test public void testPreprocess() throws Exception {
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatistics.normalizeRoleNames(sents);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fePrm.useZhaoFeats=false;
  prm.fePrm.useSimpleFeats=false;
  prm.fePrm.useDepPathFeats=false;
  prm.fePrm=fePrm;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.alwaysIncludeLinkVars=true;
{
    FeatureTemplateList fts=new FeatureTemplateList();
    prm.featCountCutoff=0;
    SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,fts,cs);
    FgExamples data=builder.getData(sents);
    assertEquals(13388,fts.getNumObsFeats());
  }
{
    FeatureTemplateList fts=new FeatureTemplateList();
    prm.featCountCutoff=5;
    SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,fts,cs);
    FgExamples data=builder.getData(sents);
    assertEquals(2729,fts.getNumObsFeats());
  }
}","@Test public void testPreprocess() throws Exception {
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatistics.normalizeRoleNames(sents);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fePrm.useZhaoFeats=false;
  prm.fePrm.useSimpleFeats=false;
  prm.fePrm.useDepPathFeats=false;
  prm.fePrm=fePrm;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.alwaysIncludeLinkVars=true;
{
    FeatureTemplateList fts=new FeatureTemplateList();
    prm.featCountCutoff=0;
    SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,fts,cs);
    FgExamples data=builder.getData(sents);
    assertEquals(13388,fts.getNumObsFeats());
    FgModel model=new FgModel(data,false);
    assertEquals(26308,model.getNumParams());
  }
{
    FeatureTemplateList fts=new FeatureTemplateList();
    prm.featCountCutoff=5;
    SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,fts,cs);
    FgExamples data=builder.getData(sents);
    assertEquals(2729,fts.getNumObsFeats());
    FgModel model=new FgModel(data,false);
    assertEquals(6108,model.getNumParams());
  }
}",0.934613963797562
131517,"public SentFeatureExtractor(SentFeatureExtractorPrm prm,CoNLL09Sentence sent,CorpusStatistics cs){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.sig=cs.sig;
  this.parents=getParents(sent);
  if (prm.useZhaoFeats) {
    this.zhaoSentence=createZhaoSentence();
    this.zhaoHeadDefault=new ZhaoObject(""String_Node_Str"");
    this.zhaoTailDefault=new ZhaoObject(""String_Node_Str"");
  }
}","public SentFeatureExtractor(SentFeatureExtractorPrm prm,CoNLL09Sentence sent,CorpusStatistics cs){
  this.prm=prm;
  this.sent=sent;
  this.cs=cs;
  this.sig=cs.sig;
  if (!prm.biasOnly) {
    this.parents=getParents(sent);
    if (prm.useZhaoFeats) {
      this.zhaoSentence=createZhaoSentence();
      this.zhaoHeadDefault=new ZhaoObject(""String_Node_Str"");
      this.zhaoTailDefault=new ZhaoObject(""String_Node_Str"");
    }
  }
 else {
    this.parents=null;
  }
}",0.91415313225058
131518,"public void stopGrowth(){
  for (  FeatureTemplate ft : fts) {
    ft.getAlphabet().stopGrowth();
  }
  isGrowing=false;
}","public void stopGrowth(){
  for (  FeatureTemplate ft : fts) {
    ft.getAlphabet().stopGrowth();
  }
  templateKeyAlphabet.stopGrowth();
  isGrowing=false;
}",0.8714285714285714
131519,"/** 
 * For each factor in the data, lookup its configId. Set all the observed features for that configuration to true.
 */
private void includeSupportedFeatures(FgExamples data,FeatureTemplateList templates){
  for (int i=0; i < data.size(); i++) {
    FgExample ex=data.get(i);
    for (int a=0; a < ex.getOriginalFactorGraph().getNumFactors(); a++) {
      Factor f=ex.getFgLat().getFactor(a);
      int t=templates.getTemplateId(f);
      if (t != -1) {
        FeatureVector fv=ex.getObservationFeatures(a);
        if (f.getVars().size() == 0) {
          int predConfig=ex.getGoldConfigIdxPred(a);
          for (          IntDoubleEntry entry : fv) {
            included[t][predConfig][entry.index()]=true;
          }
        }
 else {
          VarConfig predVc=ex.getGoldConfigPred(a);
          IntIter iter=IndexForVc.getConfigIter(ex.getFgLatPred().getFactor(a).getVars(),predVc);
          int numConfigs=f.getVars().calcNumConfigs();
          for (int c=0; c < numConfigs; c++) {
            int config=iter.next();
            for (            IntDoubleEntry entry : fv) {
              included[t][config][entry.index()]=true;
            }
          }
        }
      }
    }
  }
}","/** 
 * For each factor in the data, lookup its configId. Set all the observed features for that configuration to true.
 */
private void includeSupportedFeatures(FgExamples data,FeatureTemplateList templates){
  for (int i=0; i < data.size(); i++) {
    FgExample ex=data.get(i);
    for (int a=0; a < ex.getOriginalFactorGraph().getNumFactors(); a++) {
      Factor f=ex.getFgLat().getFactor(a);
      if (f instanceof GlobalFactor) {
        continue;
      }
 else       if (f instanceof ExpFamFactor) {
        int t=templates.getTemplateId(f);
        if (t != -1) {
          FeatureVector fv=ex.getObservationFeatures(a);
          if (f.getVars().size() == 0) {
            int predConfig=ex.getGoldConfigIdxPred(a);
            for (            IntDoubleEntry entry : fv) {
              included[t][predConfig][entry.index()]=true;
            }
          }
 else {
            VarConfig predVc=ex.getGoldConfigPred(a);
            IntIter iter=IndexForVc.getConfigIter(ex.getFgLatPred().getFactor(a).getVars(),predVc);
            int numConfigs=f.getVars().calcNumConfigs();
            for (int c=0; c < numConfigs; c++) {
              int config=iter.next();
              for (              IntDoubleEntry entry : fv) {
                included[t][config][entry.index()]=true;
              }
            }
          }
        }
      }
 else {
        throw new UnsupportedFactorTypeException(f);
      }
    }
  }
}",0.8721062618595825
131520,"public FgExamples getData(){
  FeatureTemplateList fts=new FeatureTemplateList();
  Var v0=new Var(VarType.PREDICTED,descList.size(),""String_Node_Str"",getStateNames());
  fts.add(new FeatureTemplate(new VarSet(v0),alphabet,TEMPLATE_KEY));
  FgExamples data=new FgExamples(fts);
  int state=0;
  for (  final LogLinearExDesc desc : descList) {
    for (int i=0; i < desc.getCount(); i++) {
      final VarConfig trainConfig=new VarConfig();
      trainConfig.put(v0,state);
      FactorGraph fg=new FactorGraph();
      v0=new Var(VarType.PREDICTED,descList.size(),""String_Node_Str"",getStateNames());
      ExpFamFactor f0=new ExpFamFactor(new VarSet(v0),TEMPLATE_KEY);
      fg.addFactor(f0);
      ObsFeatureExtractor featExtractor=new ObsFeatureExtractor(){
        @Override public FeatureVector calcObsFeatureVector(        int factorId){
          return desc.getFeatures();
        }
      }
;
      data.add(new FgExample(fg,trainConfig,featExtractor,fts));
    }
    state++;
  }
  return data;
}","public FgExamples getData(){
  FeatureTemplateList fts=new FeatureTemplateList();
  Var v0=new Var(VarType.PREDICTED,descList.size(),""String_Node_Str"",getStateNames());
  fts.add(new FeatureTemplate(new VarSet(v0),alphabet,TEMPLATE_KEY));
  FgExamples data=new FgExamples(fts);
  int state=0;
  for (  final LogLinearExDesc desc : descList) {
    for (int i=0; i < desc.getCount(); i++) {
      final VarConfig trainConfig=new VarConfig();
      trainConfig.put(v0,state);
      FactorGraph fg=new FactorGraph();
      v0=new Var(VarType.PREDICTED,descList.size(),""String_Node_Str"",getStateNames());
      ExpFamFactor f0=new ExpFamFactor(new VarSet(v0),TEMPLATE_KEY);
      fg.addFactor(f0);
      ObsFeatureExtractor featExtractor=new ObsFeatureExtractor(){
        @Override public FeatureVector calcObsFeatureVector(        int factorId){
          return desc.getFeatures();
        }
        public void init(        FactorGraph fg,        FactorGraph fgLat,        FactorGraph fgLatPred,        VarConfig goldConfig,        FeatureTemplateList fts){
        }
      }
;
      data.add(new FgExample(fg,trainConfig,featExtractor,fts));
    }
    state++;
  }
  return data;
}",0.9189931350114416
131521,"public SimpleVCFeatureExtractor(FactorGraph fg,VarConfig goldConfig,FeatureTemplateList fts){
  super(fg,goldConfig);
  this.fts=fts;
}","public SimpleVCFeatureExtractor(FactorGraph fg,VarConfig goldConfig,FeatureTemplateList fts){
  super();
  this.fts=fts;
}",0.9494163424124512
131522,"public FeatureTemplate(VarSet vars,Alphabet<Feature> alphabet,Object key){
  super();
  if (VarSet.getVarsOfType(vars,VarType.OBSERVED).size() != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.numConfigs=vars.calcNumConfigs();
  this.alphabet=alphabet;
  this.key=key;
}","public FeatureTemplate(VarSet vars,Alphabet<Feature> alphabet,Object key){
  super();
  if (VarSet.getVarsOfType(vars,VarType.OBSERVED).size() != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.numConfigs=vars.calcNumConfigs();
  this.alphabet=alphabet;
  this.key=key;
  this.vars=vars;
}",0.9703947368421052
131523,"/** 
 * Constructs a train or test example for a Factor Graph.
 * @param fg The factor graph.
 * @param goldConfig The gold assignment to the variables.
 * @param fts TODO
 * @param featExtractor Feature extractor on the observations only (i.e. theobservation function).
 */
public FgExample(FactorGraph fg,VarConfig goldConfig,ObsFeatureExtractor fe,FeatureTemplateList fts){
  this.fg=fg;
  this.goldConfig=goldConfig;
  List<Var> observedVars=VarSet.getVarsOfType(fg.getVars(),VarType.OBSERVED);
  fgLatPred=fg.getClamped(goldConfig.getIntersection(observedVars));
  List<Var> predictedVars=VarSet.getVarsOfType(fg.getVars(),VarType.PREDICTED);
  fgLat=fgLatPred.getClamped(goldConfig.getIntersection(predictedVars));
  hasLatentVars=fg.getVars().size() - observedVars.size() - predictedVars.size() > 0;
  assert(fg.getNumFactors() == fgLatPred.getNumFactors());
  assert(fg.getNumFactors() == fgLat.getNumFactors());
  checkGoldConfig(fg,goldConfig);
  fts.update(fgLatPred);
  this.featExtractor=new ObsFeatureCache(fgLatPred,fe);
  cacheObsFeats();
}","/** 
 * Constructs a train or test example for a Factor Graph.
 * @param fg The factor graph.
 * @param goldConfig The gold assignment to the variables.
 * @param fts TODO
 * @param featExtractor Feature extractor on the observations only (i.e. theobservation function).
 */
public FgExample(FactorGraph fg,VarConfig goldConfig,ObsFeatureExtractor fe,FeatureTemplateList fts){
  this.fg=fg;
  this.goldConfig=goldConfig;
  List<Var> observedVars=VarSet.getVarsOfType(fg.getVars(),VarType.OBSERVED);
  fgLatPred=fg.getClamped(goldConfig.getIntersection(observedVars));
  List<Var> predictedVars=VarSet.getVarsOfType(fg.getVars(),VarType.PREDICTED);
  fgLat=fgLatPred.getClamped(goldConfig.getIntersection(predictedVars));
  hasLatentVars=fg.getVars().size() - observedVars.size() - predictedVars.size() > 0;
  assert(fg.getNumFactors() == fgLatPred.getNumFactors());
  assert(fg.getNumFactors() == fgLat.getNumFactors());
  checkGoldConfig(fg,goldConfig);
  fts.update(fgLatPred);
  this.featExtractor=new ObsFeatureCache(fgLatPred,fe);
  this.featExtractor.init(fg,fgLat,fgLatPred,goldConfig,fts);
  cacheObsFeats();
}",0.97148114075437
131524,"public void printModel(Writer writer) throws IOException {
  for (int t=0; t < numTemplates; t++) {
    FeatureTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    Alphabet<Feature> alphabet=template.getAlphabet();
    for (int c=0; c < numConfigs; c++) {
      for (int k=0; k < params[t][c].length; k++) {
        if (included[t][c][k]) {
          writer.write(template.getKey().toString());
          writer.write(""String_Node_Str"");
          writer.write(Integer.toString(c));
          writer.write(""String_Node_Str"");
          writer.write(alphabet.lookupObject(k).toString());
          writer.write(""String_Node_Str"");
          writer.write(String.format(""String_Node_Str"",params[t][c][k]));
          writer.write(""String_Node_Str"");
        }
      }
    }
  }
  writer.flush();
}","public void printModel(Writer writer) throws IOException {
  for (int t=0; t < numTemplates; t++) {
    FeatureTemplate template=templates.get(t);
    int numConfigs=template.getNumConfigs();
    Alphabet<Feature> alphabet=template.getAlphabet();
    for (int c=0; c < numConfigs; c++) {
      for (int k=0; k < params[t][c].length; k++) {
        if (included[t][c][k]) {
          writer.write(template.getKey().toString());
          writer.write(""String_Node_Str"");
          writer.write(template.getStateNamesStr(c));
          writer.write(""String_Node_Str"");
          writer.write(alphabet.lookupObject(k).toString());
          writer.write(""String_Node_Str"");
          writer.write(String.format(""String_Node_Str"",params[t][c][k]));
          writer.write(""String_Node_Str"");
        }
      }
    }
  }
  writer.flush();
}",0.975316074653823
131525,"private FgExample getExForFts(String state1,String state2,FeatureTemplateList fts){
  Var v1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str""));
  Var v2=new Var(VarType.PREDICTED,3,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  FactorGraph fg=new FactorGraph();
  fg.addFactor(new ExpFamFactor(new VarSet(v1,v2),""String_Node_Str""));
  VarConfig vc=new VarConfig();
  vc.put(v1,state1);
  vc.put(v2,state2);
  return new FgExample(fg,vc,new MockFeatureExtractor(fg,vc,fts),fts);
}","private FgExample getExForFts(String state1,String state2,FeatureTemplateList fts){
  Var v1=new Var(VarType.PREDICTED,2,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str""));
  Var v2=new Var(VarType.PREDICTED,3,""String_Node_Str"",Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  FactorGraph fg=new FactorGraph();
  fg.addFactor(new ExpFamFactor(new VarSet(v1,v2),""String_Node_Str""));
  VarConfig vc=new VarConfig();
  vc.put(v1,state1);
  vc.put(v2,state2);
  return new FgExample(fg,vc,new MockFeatureExtractor(),fts);
}",0.9921671018276762
131526,"public MockFeatureExtractor(FactorGraph fg,VarConfig goldConfig,FeatureTemplateList fts){
  super(fg,goldConfig);
  this.fts=fts;
}","public MockFeatureExtractor(){
  super();
}",0.4942528735632184
131527,"public ObsFeatureCache(FactorGraph fg,ObsFeatureExtractor featExtractor){
  this.feats=new FeatureVector[fg.getNumFactors()];
  this.featExtractor=featExtractor;
  for (int a=0; a < fg.getNumFactors(); a++) {
    Factor f=fg.getFactor(a);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof DenseFactor) {
      continue;
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
}","public ObsFeatureCache(FactorGraph fg,ObsFeatureExtractor featExtractor){
  this.featExtractor=featExtractor;
  this.feats=new FeatureVector[fg.getNumFactors()];
  for (int a=0; a < fg.getNumFactors(); a++) {
    Factor f=fg.getFactor(a);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof DenseFactor) {
      continue;
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
}",0.8796296296296297
131528,"public SlowObsFeatureExtractor(FactorGraph fg,VarConfig goldConfig){
  this.fg=fg;
  this.goldConfig=goldConfig;
}","public SlowObsFeatureExtractor(){
}",0.4697986577181208
131529,"public SrlFeatureExtractor(SrlFeatureExtractorPrm prm,SrlFactorGraph sfg,FeatureTemplateList fts,SentFeatureExtractor sentFeatExt,Alphabet<String> obsAlphabet){
  this.prm=prm;
  this.sfg=sfg;
  this.fts=fts;
  this.sentFeatExt=sentFeatExt;
  obsFeatsSolo=new BinaryStrFVBuilder[sentFeatExt.getSentSize()];
  obsFeatsPair=new BinaryStrFVBuilder[sentFeatExt.getSentSize()][sentFeatExt.getSentSize()];
  this.obsAlphabet=obsAlphabet;
}","public SrlFeatureExtractor(SrlFeatureExtractorPrm prm,SentFeatureExtractor sentFeatExt,Alphabet<String> obsAlphabet){
  this.prm=prm;
  this.sentFeatExt=sentFeatExt;
  obsFeatsSolo=new BinaryStrFVBuilder[sentFeatExt.getSentSize()];
  obsFeatsPair=new BinaryStrFVBuilder[sentFeatExt.getSentSize()][sentFeatExt.getSentSize()];
  this.obsAlphabet=obsAlphabet;
}",0.9051833122629582
131530,"@Override public FeatureVector calcObsFeatureVector(int factorId){
  SrlFactor f=(SrlFactor)sfg.getFactor(factorId);
  SrlFactorTemplate ft=f.getFactorType();
  VarSet vars=f.getVars();
  BinaryStrFVBuilder obsFeats;
  Alphabet<Feature> alphabet;
  if (ft == SrlFactorTemplate.LINK_ROLE_BINARY || ft == SrlFactorTemplate.LINK_UNARY || ft == SrlFactorTemplate.ROLE_UNARY) {
    Var var=vars.iterator().next();
    int parent;
    int child;
    if (var instanceof LinkVar) {
      parent=((LinkVar)var).getParent();
      child=((LinkVar)var).getChild();
    }
 else {
      parent=((RoleVar)var).getParent();
      child=((RoleVar)var).getChild();
    }
    if (parent == -1) {
      obsFeats=fastGetObsFeats(child,obsAlphabet);
    }
 else {
      obsFeats=fastGetObsFeats(parent,child,obsAlphabet);
    }
    alphabet=fts.getTemplate(f).getAlphabet();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + obsFeats.size());
  }
  FeatureVector fv=new FeatureVector(obsFeats.size());
  if (prm.featureHashMod <= 0) {
    int fidx=alphabet.lookupIndex(new Feature(""String_Node_Str"",true));
    if (fidx != -1) {
      fv.add(fidx,1.0);
    }
  }
 else {
    String fname=""String_Node_Str"";
    int hash=fname.hashCode();
    hash=hash % prm.featureHashMod;
    if (hash < 0) {
      hash+=prm.featureHashMod;
    }
    fname=Integer.toString(hash);
    int fidx=alphabet.lookupIndex(new Feature(fname,true));
    if (fidx != -1) {
      int revHash=reverseHashCode(fname);
      if (revHash < 0) {
        fv.add(fidx,-1.0);
      }
 else {
        fv.add(fidx,1.0);
      }
    }
  }
  if (prm.featureHashMod <= 0) {
    for (    String obsFeat : obsFeats) {
      int fidx=alphabet.lookupIndex(new Feature(obsFeat));
      if (fidx != -1) {
        fv.add(fidx,1.0);
      }
    }
  }
 else {
    FeatureVectorBuilder fvb=obsFeats.getFvb();
    for (    IntDoubleEntry obsFeat : fvb) {
      String fname=Integer.toString(obsFeat.index());
      int hash=fname.hashCode();
      hash=hash % prm.featureHashMod;
      if (hash < 0) {
        hash+=prm.featureHashMod;
      }
      fname=Integer.toString(hash);
      int fidx=alphabet.lookupIndex(new Feature(fname));
      if (fidx != -1) {
        int revHash=reverseHashCode(fname);
        if (revHash < 0) {
          fv.add(fidx,-1.0);
        }
 else {
          fv.add(fidx,1.0);
        }
      }
    }
  }
  return fv;
}","@Override public FeatureVector calcObsFeatureVector(int factorId){
  SrlFactor f=(SrlFactor)sfg.getFactor(factorId);
  SrlFactorTemplate ft=f.getFactorType();
  VarSet vars=f.getVars();
  BinaryStrFVBuilder obsFeats;
  Alphabet<Feature> alphabet;
  if (ft == SrlFactorTemplate.LINK_ROLE_BINARY || ft == SrlFactorTemplate.LINK_UNARY || ft == SrlFactorTemplate.ROLE_UNARY) {
    Var var=vars.iterator().next();
    int parent;
    int child;
    if (var instanceof LinkVar) {
      parent=((LinkVar)var).getParent();
      child=((LinkVar)var).getChild();
    }
 else {
      parent=((RoleVar)var).getParent();
      child=((RoleVar)var).getChild();
    }
    if (parent == -1) {
      obsFeats=fastGetObsFeats(child,obsAlphabet);
    }
 else {
      obsFeats=fastGetObsFeats(parent,child,obsAlphabet);
    }
    alphabet=fts.getTemplate(f).getAlphabet();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  String prefix=getObsVarsStates(f);
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + obsFeats.size());
  }
  FeatureVector fv=new FeatureVector(obsFeats.size());
  if (prm.featureHashMod <= 0) {
    int fidx=alphabet.lookupIndex(new Feature(prefix + ""String_Node_Str"",true));
    if (fidx != -1) {
      fv.add(fidx,1.0);
    }
  }
 else {
    String fname=prefix + ""String_Node_Str"";
    int hash=fname.hashCode();
    hash=hash % prm.featureHashMod;
    if (hash < 0) {
      hash+=prm.featureHashMod;
    }
    fname=Integer.toString(hash);
    int fidx=alphabet.lookupIndex(new Feature(fname,true));
    if (fidx != -1) {
      int revHash=reverseHashCode(fname);
      if (revHash < 0) {
        fv.add(fidx,-1.0);
      }
 else {
        fv.add(fidx,1.0);
      }
    }
  }
  if (prm.featureHashMod <= 0) {
    for (    String obsFeat : obsFeats) {
      String fname=prefix + ""String_Node_Str"" + obsFeat;
      int fidx=alphabet.lookupIndex(new Feature(fname));
      if (fidx != -1) {
        fv.add(fidx,1.0);
      }
    }
  }
 else {
    FeatureVectorBuilder fvb=obsFeats.getFvb();
    for (    IntDoubleEntry obsFeat : fvb) {
      String fname=prefix + ""String_Node_Str"" + Integer.toString(obsFeat.index());
      int hash=fname.hashCode();
      hash=hash % prm.featureHashMod;
      if (hash < 0) {
        hash+=prm.featureHashMod;
      }
      fname=Integer.toString(hash);
      int fidx=alphabet.lookupIndex(new Feature(fname));
      if (fidx != -1) {
        int revHash=reverseHashCode(fname);
        if (revHash < 0) {
          fv.add(fidx,-1.0);
        }
 else {
          fv.add(fidx,1.0);
        }
      }
    }
  }
  return fv;
}",0.9670416419972372
131531,"@Test public void testCorrectNumFeatures() throws Exception {
  SrlFactorGraphPrm fgPrm=new SrlFactorGraphPrm();
  fgPrm.alwaysIncludeLinkVars=true;
  HashSet<Integer> knownPreds=new HashSet<Integer>(Utilities.getList(0,2));
  SrlFactorGraph sfg=new SrlFactorGraph(fgPrm,3,knownPreds,Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  FeatureTemplateList fts=new FeatureTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  fts.update(sfg);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.biasOnly=true;
  SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(fePrm,sents.get(0),cs);
  SrlFeatureExtractorPrm prm=new SrlFeatureExtractorPrm();
  prm.featureHashMod=-1;
  SrlFeatureExtractor featExt=new SrlFeatureExtractor(prm,sfg,fts,sentFeatExt);
  for (int a=0; a < sfg.getNumFactors(); a++) {
    featExt.calcObsFeatureVector(a);
  }
  assertEquals(3,fts.getNumObsFeats());
}","@Test public void testCorrectNumFeatures() throws Exception {
  SrlFactorGraphPrm fgPrm=new SrlFactorGraphPrm();
  fgPrm.alwaysIncludeLinkVars=true;
  HashSet<Integer> knownPreds=new HashSet<Integer>(Utilities.getList(0,2));
  SrlFactorGraph sfg=new SrlFactorGraph(fgPrm,3,knownPreds,Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  FeatureTemplateList fts=new FeatureTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  fts.update(sfg);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.biasOnly=true;
  SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(fePrm,sents.get(0),cs);
  SrlFeatureExtractorPrm prm=new SrlFeatureExtractorPrm();
  prm.featureHashMod=-1;
  SrlFeatureExtractor featExt=new SrlFeatureExtractor(prm,sentFeatExt);
  featExt.init(sfg,null,null,new VarConfig(),fts);
  for (int a=0; a < sfg.getNumFactors(); a++) {
    featExt.calcObsFeatureVector(a);
  }
  assertEquals(3,fts.getNumObsFeats());
}",0.9683620344413296
131532,"@Test public void testCorrectNumFeaturesWithFeatureHashing() throws Exception {
  SrlFactorGraphPrm fgPrm=new SrlFactorGraphPrm();
  HashSet<Integer> knownPreds=new HashSet<Integer>(Utilities.getList(0,2));
  SrlFactorGraph sfg=new SrlFactorGraph(fgPrm,3,knownPreds,Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  FeatureTemplateList fts=new FeatureTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  fts.update(sfg);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.useNaradFeats=true;
  fePrm.useSimpleFeats=false;
  fePrm.useZhaoFeats=false;
  SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(fePrm,sents.get(0),cs);
  SrlFeatureExtractorPrm prm=new SrlFeatureExtractorPrm();
  prm.featureHashMod=10;
  SrlFeatureExtractor featExt=new SrlFeatureExtractor(prm,sfg,fts,sentFeatExt);
  for (int a=0; a < sfg.getNumFactors(); a++) {
    featExt.calcObsFeatureVector(a);
  }
  System.out.println(fts);
  assertEquals(10,fts.getNumObsFeats());
}","@Test public void testCorrectNumFeaturesWithFeatureHashing() throws Exception {
  SrlFactorGraphPrm fgPrm=new SrlFactorGraphPrm();
  HashSet<Integer> knownPreds=new HashSet<Integer>(Utilities.getList(0,2));
  SrlFactorGraph sfg=new SrlFactorGraph(fgPrm,3,knownPreds,Utilities.getList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  FeatureTemplateList fts=new FeatureTemplateList();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  fts.update(sfg);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.useNaradFeats=true;
  fePrm.useSimpleFeats=false;
  fePrm.useZhaoFeats=false;
  fePrm.useDepPathFeats=true;
  SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(fePrm,sents.get(0),cs);
  SrlFeatureExtractorPrm prm=new SrlFeatureExtractorPrm();
  prm.featureHashMod=10;
  SrlFeatureExtractor featExt=new SrlFeatureExtractor(prm,sentFeatExt);
  featExt.init(sfg,null,null,new VarConfig(),fts);
  for (int a=0; a < sfg.getNumFactors(); a++) {
    featExt.calcObsFeatureVector(a);
  }
  System.out.println(fts);
  assertEquals(10,fts.getNumObsFeats());
}",0.9622147399925176
131533,"public FgExamples getData(List<CoNLL09Sentence> sents){
  if (prm.featCountCutoff > 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  FgExamples data=new FgExamples(fts);
  for (int i=0; i < sents.size(); i++) {
    CoNLL09Sentence sent=sents.get(i);
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    SrlGraph srlGraph=sent.getSrlGraph();
    Set<Integer> knownPreds=getKnownPreds(srlGraph);
    SrlFactorGraph sfg=new SrlFactorGraph(prm.fgPrm,sent.size(),knownPreds,cs.roleStateNames);
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(prm.fePrm,sent,cs);
    ObsFeatureExtractor featExtractor=new SrlFeatureExtractor(prm.srlFePrm,sfg,fts,sentFeatExt,obsAlphabet);
    FgExample ex=new FgExample(sfg,trainConfig,featExtractor,fts);
    data.add(ex);
  }
  log.info(""String_Node_Str"" + obsAlphabet.size());
  data.setSourceSentences(sents);
  return data;
}","public FgExamples getData(List<CoNLL09Sentence> sents){
  if (prm.featCountCutoff > 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  FgExamples data=new FgExamples(fts);
  for (int i=0; i < sents.size(); i++) {
    CoNLL09Sentence sent=sents.get(i);
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    SrlGraph srlGraph=sent.getSrlGraph();
    Set<Integer> knownPreds=getKnownPreds(srlGraph);
    SrlFactorGraph sfg=new SrlFactorGraph(prm.fgPrm,sent.size(),knownPreds,cs.roleStateNames);
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(prm.fePrm,sent,cs);
    ObsFeatureExtractor featExtractor=new SrlFeatureExtractor(prm.srlFePrm,sentFeatExt,obsAlphabet);
    FgExample ex=new FgExample(sfg,trainConfig,featExtractor,fts);
    data.add(ex);
  }
  log.info(""String_Node_Str"" + obsAlphabet.size());
  data.setSourceSentences(sents);
  return data;
}",0.9961941008563272
131534,"/** 
 * Creates a feature set for the given pair of word positions. This defines a feature function of the form f(x, i, j), where x is a vector representing all the observations about a sentence and i and j are positions in the sentence. Examples where this feature function would be used include factors including a Role or Link variable in the SRL model, where both the parent and child are tokens in the sentence.
 * @param pidx The ""parent"" position.
 * @param aidx The ""child"" position.
 * @return The features.
 */
public BinaryStrFVBuilder createFeatureSet(int pidx,int aidx){
  BinaryStrFVBuilder feats=new BinaryStrFVBuilder(alphabet);
  feats.add(""String_Node_Str"");
  if (prm.biasOnly) {
    return feats;
  }
  if (prm.useSimpleFeats) {
    addSimplePairFeatures(pidx,aidx,feats);
  }
  if (prm.useNaradFeats) {
    addNaradowskyPairFeatures(pidx,aidx,feats);
  }
  if (prm.useZhaoFeats) {
    addZhaoPairFeatures(pidx,aidx,feats);
  }
  if (prm.useDepPathFeats) {
    addDependencyPathFeatures(pidx,aidx,feats);
  }
  return feats;
}","/** 
 * Creates a feature set for the given pair of word positions. This defines a feature function of the form f(x, i, j), where x is a vector representing all the observations about a sentence and i and j are positions in the sentence. Examples where this feature function would be used include factors including a Role or Link variable in the SRL model, where both the parent and child are tokens in the sentence.
 * @param pidx The ""parent"" position.
 * @param aidx The ""child"" position.
 * @return The features.
 */
public BinaryStrFVBuilder createFeatureSet(int pidx,int aidx){
  BinaryStrFVBuilder feats=new BinaryStrFVBuilder(alphabet);
  if (prm.biasOnly) {
    return feats;
  }
  if (prm.useSimpleFeats) {
    addSimplePairFeatures(pidx,aidx,feats);
  }
  if (prm.useNaradFeats) {
    addNaradowskyPairFeatures(pidx,aidx,feats);
  }
  if (prm.useZhaoFeats) {
    addZhaoPairFeatures(pidx,aidx,feats);
  }
  if (prm.useDepPathFeats) {
    addDependencyPathFeatures(pidx,aidx,feats);
  }
  return feats;
}",0.9844660194174756
131535,"/** 
 * Updates the factor graph with the latest parameter vector. 
 * @param logDomain TODO
 */
private FactorGraph getUpdatedFactorGraph(FactorGraph fg,double[] params,boolean logDomain){
  for (int a=0; a < fg.getNumFactors(); a++) {
    Factor f=fg.getFactor(a);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof DenseFactor) {
      IntIter iter=null;
      if (fg == this.getFgLat()) {
        VarConfig predVc=this.getGoldConfigPred(a);
        iter=IndexForVc.getConfigIter(this.getFgLatPred().getFactor(a).getVars(),predVc);
      }
      DenseFactor factor=(DenseFactor)f;
      int numConfigs=factor.getVars().calcNumConfigs();
      for (int c=0; c < numConfigs; c++) {
        int config=(iter != null) ? iter.next() : c;
        FeatureVector fv=this.getFeatureVector(a,config);
        if (logDomain) {
          factor.setValue(c,fv.dot(params));
        }
 else {
          factor.setValue(c,Utilities.exp(fv.dot(params)));
        }
      }
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
  return fg;
}","/** 
 * Updates the factor graph with the latest parameter vector. 
 * @param logDomain TODO
 */
private FactorGraph getUpdatedFactorGraph(FactorGraph fg,double[] params,boolean logDomain){
  for (int a=0; a < fg.getNumFactors(); a++) {
    Factor f=fg.getFactor(a);
    if (f instanceof GlobalFactor) {
      continue;
    }
 else     if (f instanceof DenseFactor) {
      DenseFactor factor=(DenseFactor)f;
      int numConfigs=factor.getVars().calcNumConfigs();
      if (numConfigs == 0) {
        int config=this.getGoldConfigLatPred(a).getConfigIndex();
        this.getFeatureVector(a,config);
      }
 else {
        IntIter iter=null;
        if (fg == this.getFgLat()) {
          VarConfig predVc=this.getGoldConfigPred(a);
          iter=IndexForVc.getConfigIter(this.getFgLatPred().getFactor(a).getVars(),predVc);
        }
        for (int c=0; c < numConfigs; c++) {
          int config=(iter != null) ? iter.next() : c;
          FeatureVector fv=this.getFeatureVector(a,config);
          if (logDomain) {
            factor.setValue(c,fv.dot(params));
          }
 else {
            factor.setValue(c,Utilities.exp(fv.dot(params)));
          }
        }
      }
    }
 else {
      throw new UnsupportedFactorTypeException(f);
    }
  }
  return fg;
}",0.7266553480475382
131536,"public void preprocess(List<CoNLL09Sentence> sents){
  if (!(alphabet.isGrowing() && prm.featCountCutoff > 0)) {
    return;
  }
  CountingAlphabet<Feature> counter=new CountingAlphabet<Feature>();
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  List<FeatureExtractor> featExts=new ArrayList<FeatureExtractor>();
  for (int i=0; i < sents.size(); i++) {
    CoNLL09Sentence sent=sents.get(i);
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    SrlGraph srlGraph=sent.getSrlGraph();
    Set<Integer> knownPreds=getKnownPreds(srlGraph);
    SrlFactorGraph sfg=new SrlFactorGraph(prm.fgPrm,sent.size(),knownPreds,cs.roleStateNames);
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(prm.fePrm,sent,cs,obsAlphabet);
    FeatureExtractor featExtractor=new SrlFeatureExtractor(prm.srlFePrm,sfg,counter,sentFeatExt);
    featExts.add(featExtractor);
    FgExample ex=new FgExample(sfg,trainConfig,featExtractor,false);
    ex.cacheLatFeats();
  }
  for (int i=0; i < counter.size(); i++) {
    int count=counter.lookupObjectCount(i);
    Feature feat=counter.lookupObject(i);
    if (count >= prm.featCountCutoff || feat.isBiasFeature()) {
      alphabet.lookupIndex(feat);
    }
  }
  alphabet.stopGrowth();
}","public void preprocess(List<CoNLL09Sentence> sents){
  if (!(alphabet.isGrowing() && prm.featCountCutoff > 0)) {
    log.info(""String_Node_Str"");
    return;
  }
  CountingAlphabet<Feature> counter=new CountingAlphabet<Feature>();
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  List<FeatureExtractor> featExts=new ArrayList<FeatureExtractor>();
  for (int i=0; i < sents.size(); i++) {
    CoNLL09Sentence sent=sents.get(i);
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    SrlGraph srlGraph=sent.getSrlGraph();
    Set<Integer> knownPreds=getKnownPreds(srlGraph);
    SrlFactorGraph sfg=new SrlFactorGraph(prm.fgPrm,sent.size(),knownPreds,cs.roleStateNames);
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(prm.fePrm,sent,cs,obsAlphabet);
    FeatureExtractor featExtractor=new SrlFeatureExtractor(prm.srlFePrm,sfg,counter,sentFeatExt);
    featExts.add(featExtractor);
    FgExample ex=new FgExample(sfg,trainConfig,featExtractor,false);
    ex.cacheLatFeats();
  }
  for (int i=0; i < counter.size(); i++) {
    int count=counter.lookupObjectCount(i);
    Feature feat=counter.lookupObject(i);
    if (count >= prm.featCountCutoff || feat.isBiasFeature()) {
      alphabet.lookupIndex(feat);
    }
  }
  alphabet.stopGrowth();
}",0.9878542510121456
131537,"public void addZhaoPairFeatures(int pidx,int aidx,BinaryStrFVBuilder feats){
  ZhaoObject zhaoPred=new ZhaoObject(pidx,parents,sent,prm,""String_Node_Str"");
  ZhaoObject zhaoArg=new ZhaoObject(aidx,parents,sent,prm,""String_Node_Str"");
  ZhaoObject zhaoPredArgPair=new ZhaoObject(pidx,aidx,zhaoPred,zhaoArg,parents);
  ZhaoObject zhaoPredLast;
  ZhaoObject zhaoPredNext;
  ZhaoObject zhaoPredParent;
  ZhaoObject zhaoArgLast;
  ZhaoObject zhaoArgNext;
  ZhaoObject zhaoArgParent;
  if (pidx - 1 > 0) {
    zhaoPredLast=new ZhaoObject(pidx - 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoPredLast=new ZhaoObject(""String_Node_Str"");
  }
  if (pidx + 1 < sent.size()) {
    zhaoPredNext=new ZhaoObject(pidx + 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoPredNext=new ZhaoObject(""String_Node_Str"");
  }
  if (zhaoPred.getParent() < 0) {
    zhaoPredParent=new ZhaoObject(""String_Node_Str"");
  }
 else {
    zhaoPredParent=new ZhaoObject(zhaoPred.getParent(),parents,sent,prm,""String_Node_Str"");
  }
  if (aidx - 1 > 0) {
    zhaoArgLast=new ZhaoObject(aidx - 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoArgLast=new ZhaoObject(""String_Node_Str"");
  }
  if (aidx + 1 < sent.size()) {
    zhaoArgNext=new ZhaoObject(aidx + 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoArgNext=new ZhaoObject(""String_Node_Str"");
  }
  if (zhaoArg.getParent() < 0) {
    zhaoArgParent=new ZhaoObject(""String_Node_Str"");
  }
 else {
    zhaoArgParent=new ZhaoObject(zhaoArg.getParent(),parents,sent,prm,""String_Node_Str"");
  }
  ArrayList<Integer> predChildren=zhaoPred.getChildren();
  ArrayList<Integer> argChildren=zhaoArg.getChildren();
  List<Pair<Integer,Dir>> betweenPath=zhaoPredArgPair.getBetweenPath();
  List<Pair<Integer,Dir>> dpPathPred=zhaoPredArgPair.getDpPathPred();
  List<Pair<Integer,Dir>> dpPathArg=zhaoPredArgPair.getDpPathArg();
  ArrayList<Integer> linePath=zhaoPredArgPair.getLinePath();
  ArrayList<CoNLL09Token> argChildrenTokens=getTokens(argChildren);
  ArrayList<CoNLL09Token> betweenPathTokens=getTokens(betweenPath);
  ArrayList<CoNLL09Token> linePathCoNLL=getTokens(linePath);
  if (prm.withSupervision) {
    addZhaoSupervisedPredFeats(zhaoPred,zhaoArg,zhaoPredLast,zhaoPredNext,feats);
    addZhaoSupervisedArgFeats(zhaoPred,zhaoArg,zhaoPredLast,zhaoPredNext,zhaoArgLast,zhaoArgNext,zhaoArgParent,argChildrenTokens,feats);
    addZhaoSupervisedCombinedFeats(zhaoPred,zhaoArg,feats,betweenPathTokens,linePathCoNLL,dpPathArg);
  }
  addZhaoUnsupervisedPredFeats(zhaoPred,zhaoPredLast,zhaoPredNext,feats);
  addZhaoUnsupervisedArgFeats(zhaoArg,zhaoArgLast,zhaoArgNext,argChildrenTokens,feats);
  addZhaoUnsupervisedCombinedFeats(linePath,linePathCoNLL,feats);
}","public void addZhaoPairFeatures(int pidx,int aidx,BinaryStrFVBuilder feats){
  ZhaoObject zhaoPred=new ZhaoObject(pidx,parents,sent,cs,""String_Node_Str"");
  ZhaoObject zhaoArg=new ZhaoObject(aidx,parents,sent,cs,""String_Node_Str"");
  ZhaoObject zhaoPredArgPair=new ZhaoObject(pidx,aidx,zhaoPred,zhaoArg,parents);
  ZhaoObject zhaoPredLast;
  ZhaoObject zhaoPredNext;
  ZhaoObject zhaoPredParent;
  ZhaoObject zhaoArgLast;
  ZhaoObject zhaoArgNext;
  ZhaoObject zhaoArgParent;
  if (pidx - 1 > 0) {
    zhaoPredLast=new ZhaoObject(pidx - 1,parents,sent,cs,""String_Node_Str"");
  }
 else {
    zhaoPredLast=new ZhaoObject(""String_Node_Str"");
  }
  if (pidx + 1 < sent.size()) {
    zhaoPredNext=new ZhaoObject(pidx + 1,parents,sent,cs,""String_Node_Str"");
  }
 else {
    zhaoPredNext=new ZhaoObject(""String_Node_Str"");
  }
  if (zhaoPred.getParent() < 0) {
    zhaoPredParent=new ZhaoObject(""String_Node_Str"");
  }
 else {
    zhaoPredParent=new ZhaoObject(zhaoPred.getParent(),parents,sent,cs,""String_Node_Str"");
  }
  if (aidx - 1 > 0) {
    zhaoArgLast=new ZhaoObject(aidx - 1,parents,sent,cs,""String_Node_Str"");
  }
 else {
    zhaoArgLast=new ZhaoObject(""String_Node_Str"");
  }
  if (aidx + 1 < sent.size()) {
    zhaoArgNext=new ZhaoObject(aidx + 1,parents,sent,cs,""String_Node_Str"");
  }
 else {
    zhaoArgNext=new ZhaoObject(""String_Node_Str"");
  }
  if (zhaoArg.getParent() < 0) {
    zhaoArgParent=new ZhaoObject(""String_Node_Str"");
  }
 else {
    zhaoArgParent=new ZhaoObject(zhaoArg.getParent(),parents,sent,cs,""String_Node_Str"");
  }
  ArrayList<Integer> predChildren=zhaoPred.getChildren();
  ArrayList<Integer> argChildren=zhaoArg.getChildren();
  List<Pair<Integer,Dir>> betweenPath=zhaoPredArgPair.getBetweenPath();
  List<Pair<Integer,Dir>> dpPathPred=zhaoPredArgPair.getDpPathPred();
  List<Pair<Integer,Dir>> dpPathArg=zhaoPredArgPair.getDpPathArg();
  ArrayList<Integer> linePath=zhaoPredArgPair.getLinePath();
  ArrayList<CoNLL09Token> argChildrenTokens=getTokens(argChildren);
  ArrayList<CoNLL09Token> betweenPathTokens=getTokens(betweenPath);
  ArrayList<CoNLL09Token> linePathCoNLL=getTokens(linePath);
  if (prm.withSupervision) {
    addZhaoSupervisedPredFeats(zhaoPred,zhaoArg,zhaoPredLast,zhaoPredNext,feats);
    addZhaoSupervisedArgFeats(zhaoPred,zhaoArg,zhaoPredLast,zhaoPredNext,zhaoArgLast,zhaoArgNext,zhaoArgParent,argChildrenTokens,feats);
    addZhaoSupervisedCombinedFeats(zhaoPred,zhaoArg,feats,betweenPathTokens,linePathCoNLL,dpPathArg);
  }
  addZhaoUnsupervisedPredFeats(zhaoPred,zhaoPredLast,zhaoPredNext,feats);
  addZhaoUnsupervisedArgFeats(zhaoArg,zhaoArgLast,zhaoArgNext,argChildrenTokens,feats);
  addZhaoUnsupervisedCombinedFeats(linePath,linePathCoNLL,feats);
}",0.992633517495396
131538,"public void addNaradowskyPairFeatures(int pidx,int aidx,BinaryStrFVBuilder feats){
  CoNLL09Token pred=sent.get(pidx);
  CoNLL09Token arg=sent.get(aidx);
  String predForm=decideForm(pred.getForm(),pidx);
  String argForm=decideForm(arg.getForm(),aidx);
  String predPos=pred.getPos();
  String argPos=arg.getPos();
  if (!prm.useGoldSyntax) {
    predPos=pred.getPpos();
    argPos=arg.getPpos();
  }
  String dir;
  int dist=Math.abs(aidx - pidx);
  if (aidx > pidx)   dir=""String_Node_Str"";
 else   if (aidx < pidx)   dir=""String_Node_Str"";
 else   dir=""String_Node_Str"";
  feats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argForm+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argForm+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argForm+ ""String_Node_Str""+ predPos+ ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str""+ dist+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ dist+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + argPos + ""String_Node_Str""+ dist+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + sent.size());
  feats.add(""String_Node_Str"" + dir);
  feats.add(""String_Node_Str"" + dist);
  feats.add(""String_Node_Str"" + dir + dist);
  feats.add(""String_Node_Str"" + predForm + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + argForm + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + argPos + ""String_Node_Str"");
  if (prm.withSupervision) {
    List<String> predFeats=pred.getFeat();
    List<String> argFeats=arg.getFeat();
    if (predFeats == null) {
      predFeats=new ArrayList<String>();
      predFeats.add(""String_Node_Str"");
    }
    if (argFeats == null) {
      argFeats=new ArrayList<String>();
      argFeats.add(""String_Node_Str"");
    }
    for (    String m1 : predFeats) {
      for (      String m2 : argFeats) {
        feats.add(m1 + ""String_Node_Str"" + m2+ ""String_Node_Str"");
      }
    }
  }
}","public void addNaradowskyPairFeatures(int pidx,int aidx,BinaryStrFVBuilder feats){
  CoNLL09Token pred=sent.get(pidx);
  CoNLL09Token arg=sent.get(aidx);
  String predForm=decideForm(pred.getForm(),pidx);
  String argForm=decideForm(arg.getForm(),aidx);
  String predPos=pred.getPos();
  String argPos=arg.getPos();
  if (!cs.prm.useGoldSyntax) {
    predPos=pred.getPpos();
    argPos=arg.getPpos();
  }
  String dir;
  int dist=Math.abs(aidx - pidx);
  if (aidx > pidx)   dir=""String_Node_Str"";
 else   if (aidx < pidx)   dir=""String_Node_Str"";
 else   dir=""String_Node_Str"";
  feats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argForm+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argForm+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argForm+ ""String_Node_Str""+ predPos+ ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str""+ dist+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ dist+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + argPos + ""String_Node_Str""+ dist+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  feats.add(""String_Node_Str"" + sent.size());
  feats.add(""String_Node_Str"" + dir);
  feats.add(""String_Node_Str"" + dist);
  feats.add(""String_Node_Str"" + dir + dist);
  feats.add(""String_Node_Str"" + predForm + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + predPos + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + argForm + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + argPos + ""String_Node_Str"");
  if (prm.withSupervision) {
    List<String> predFeats=pred.getFeat();
    List<String> argFeats=arg.getFeat();
    if (predFeats == null) {
      predFeats=new ArrayList<String>();
      predFeats.add(""String_Node_Str"");
    }
    if (argFeats == null) {
      argFeats=new ArrayList<String>();
      argFeats.add(""String_Node_Str"");
    }
    for (    String m1 : predFeats) {
      for (      String m2 : argFeats) {
        feats.add(m1 + ""String_Node_Str"" + m2+ ""String_Node_Str"");
      }
    }
  }
}",0.9993886284899124
131539,"private String decideForm(String wordForm,int idx){
  String cleanWord=cs.normalize.clean(wordForm);
  if (!cs.knownWords.contains(cleanWord)) {
    String unkWord=cs.sig.getSignature(cleanWord,idx,prm.language);
    unkWord=cs.normalize.escape(unkWord);
    if (!cs.knownUnks.contains(unkWord)) {
      unkWord=""String_Node_Str"";
      return unkWord;
    }
  }
  return cleanWord;
}","private String decideForm(String wordForm,int idx){
  String cleanWord=cs.normalize.clean(wordForm);
  if (!cs.knownWords.contains(cleanWord)) {
    String unkWord=cs.sig.getSignature(cleanWord,idx,cs.prm.language);
    unkWord=cs.normalize.escape(unkWord);
    if (!cs.knownUnks.contains(unkWord)) {
      unkWord=""String_Node_Str"";
      return unkWord;
    }
  }
  return cleanWord;
}",0.9961089494163424
131540,"private void addZhaoUnsupervisedArgFeats(ZhaoObject zhaoArg,ZhaoObject zhaoArgNext,ZhaoObject zhaoArgLast,ArrayList<CoNLL09Token> argChildrenTokens,BinaryStrFVBuilder feats){
  String feat;
  feat=sent.get(zhaoArg.getFarLeftChild()).getForm();
  feats.add(feat);
  feat=zhaoArgLast.getForm();
  feats.add(feat);
  feat=zhaoArg.getForm() + ""String_Node_Str"" + zhaoArgNext.getForm();
  feats.add(feat);
  List<String> argChildrenPos=new ArrayList<String>();
  for (  CoNLL09Token child : argChildrenTokens) {
    if (prm.useGoldSyntax) {
      argChildrenPos.add(child.getPos());
    }
 else {
      argChildrenPos.add(child.getPpos());
    }
  }
  feat=zhaoArg.getForm() + ""String_Node_Str"" + StringUtils.join(argChildrenPos,""String_Node_Str"");
  feats.add(feat);
  feat=zhaoArgNext.getPos() + ""String_Node_Str"" + zhaoArg.getPos();
  feats.add(feat);
}","private void addZhaoUnsupervisedArgFeats(ZhaoObject zhaoArg,ZhaoObject zhaoArgNext,ZhaoObject zhaoArgLast,ArrayList<CoNLL09Token> argChildrenTokens,BinaryStrFVBuilder feats){
  String feat;
  feat=sent.get(zhaoArg.getFarLeftChild()).getForm();
  feats.add(feat);
  feat=zhaoArgLast.getForm();
  feats.add(feat);
  feat=zhaoArg.getForm() + ""String_Node_Str"" + zhaoArgNext.getForm();
  feats.add(feat);
  List<String> argChildrenPos=new ArrayList<String>();
  for (  CoNLL09Token child : argChildrenTokens) {
    if (cs.prm.useGoldSyntax) {
      argChildrenPos.add(child.getPos());
    }
 else {
      argChildrenPos.add(child.getPpos());
    }
  }
  feat=zhaoArg.getForm() + ""String_Node_Str"" + StringUtils.join(argChildrenPos,""String_Node_Str"");
  feats.add(feat);
  feat=zhaoArgNext.getPos() + ""String_Node_Str"" + zhaoArg.getPos();
  feats.add(feat);
}",0.9982404692082112
131541,"public void addSimpleSoloFeatures(int idx,BinaryStrFVBuilder feats){
  String wordForm=sent.get(idx).getForm();
  System.out.println(""String_Node_Str"" + wordForm);
  Set<String> a=sig.getSimpleUnkFeatures(wordForm,idx,prm.language);
  for (  String c : a) {
    feats.add(c);
  }
}","public void addSimpleSoloFeatures(int idx,BinaryStrFVBuilder feats){
  String wordForm=sent.get(idx).getForm();
  System.out.println(""String_Node_Str"" + wordForm);
  Set<String> a=sig.getSimpleUnkFeatures(wordForm,idx,cs.prm.language);
  for (  String c : a) {
    feats.add(c);
  }
}",0.9946902654867256
131542,"int[] getParents(CoNLL09Sentence sent){
  if (prm.useGoldSyntax) {
    return sent.getParentsFromHead();
  }
 else {
    return sent.getParentsFromPhead();
  }
}","int[] getParents(CoNLL09Sentence sent){
  if (cs.prm.useGoldSyntax) {
    return sent.getParentsFromHead();
  }
 else {
    return sent.getParentsFromPhead();
  }
}",0.9907692307692308
131543,"public void addSimplePairFeatures(int pidx,int aidx,BinaryStrFVBuilder feats){
  String predForm=sent.get(pidx).getForm();
  String argForm=sent.get(aidx).getForm();
  System.out.println(""String_Node_Str"" + predForm);
  System.out.println(""String_Node_Str"" + argForm);
  Set<String> a=sig.getSimpleUnkFeatures(predForm,pidx,prm.language);
  for (  String c : a) {
    feats.add(c);
  }
  Set<String> b=sig.getSimpleUnkFeatures(argForm,aidx,prm.language);
  for (  String c : a) {
    feats.add(c);
  }
}","public void addSimplePairFeatures(int pidx,int aidx,BinaryStrFVBuilder feats){
  String predForm=sent.get(pidx).getForm();
  String argForm=sent.get(aidx).getForm();
  System.out.println(""String_Node_Str"" + predForm);
  System.out.println(""String_Node_Str"" + argForm);
  Set<String> a=sig.getSimpleUnkFeatures(predForm,pidx,cs.prm.language);
  for (  String c : a) {
    feats.add(c);
  }
  Set<String> b=sig.getSimpleUnkFeatures(argForm,aidx,cs.prm.language);
  for (  String c : a) {
    feats.add(c);
  }
}",0.9940711462450592
131544,"public void addNaradowskySoloFeatures(int idx,BinaryStrFVBuilder feats){
  CoNLL09Token word=sent.get(idx);
  String wordForm=decideForm(word.getForm(),idx);
  String wordPos;
  if (prm.useGoldSyntax) {
    wordPos=word.getPos();
  }
 else {
    wordPos=word.getPpos();
  }
  feats.add(""String_Node_Str"" + wordForm + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + wordPos + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + sent.size());
  if (prm.withSupervision) {
    List<String> wordFeats=word.getFeat();
    if (wordFeats == null) {
      wordFeats=new ArrayList<String>();
      wordFeats.add(""String_Node_Str"");
    }
    for (    String m1 : wordFeats) {
      feats.add(m1 + ""String_Node_Str"");
    }
  }
}","public void addNaradowskySoloFeatures(int idx,BinaryStrFVBuilder feats){
  CoNLL09Token word=sent.get(idx);
  String wordForm=decideForm(word.getForm(),idx);
  String wordPos;
  if (cs.prm.useGoldSyntax) {
    wordPos=word.getPos();
  }
 else {
    wordPos=word.getPpos();
  }
  feats.add(""String_Node_Str"" + wordForm + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + wordPos + ""String_Node_Str"");
  feats.add(""String_Node_Str"" + sent.size());
  if (prm.withSupervision) {
    List<String> wordFeats=word.getFeat();
    if (wordFeats == null) {
      wordFeats=new ArrayList<String>();
      wordFeats.add(""String_Node_Str"");
    }
    for (    String m1 : wordFeats) {
      feats.add(m1 + ""String_Node_Str"");
    }
  }
}",0.9979296066252588
131545,"@Test public void testZhaoPathFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence2();
  Alphabet<String> alphabet=new Alphabet<String>();
  SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
  prm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(prm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
  int[] parents=fe.getParents(sent);
  ZhaoObject zhaoPred=new ZhaoObject(1,parents,sent,prm,""String_Node_Str"");
  ZhaoObject zhaoArg=new ZhaoObject(0,parents,sent,prm,""String_Node_Str"");
  ZhaoObject zhaoLink=new ZhaoObject(1,0,zhaoPred,zhaoArg,parents);
  List<Pair<Integer,Dir>> desiredDpPathShare=new ArrayList<Pair<Integer,Dir>>();
  desiredDpPathShare.add(new Pair<Integer,Dir>(1,Dir.UP));
  List<Pair<Integer,Dir>> observedDpPathShare=zhaoLink.getDpPathShare();
  System.out.println(observedDpPathShare);
  assertEquals(desiredDpPathShare,observedDpPathShare);
}","@Test public void testZhaoPathFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence2();
  Alphabet<String> alphabet=new Alphabet<String>();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,sent,cs,alphabet);
  int[] parents=fe.getParents(sent);
  ZhaoObject zhaoPred=new ZhaoObject(1,parents,sent,cs,""String_Node_Str"");
  ZhaoObject zhaoArg=new ZhaoObject(0,parents,sent,cs,""String_Node_Str"");
  ZhaoObject zhaoLink=new ZhaoObject(1,0,zhaoPred,zhaoArg,parents);
  List<Pair<Integer,Dir>> desiredDpPathShare=new ArrayList<Pair<Integer,Dir>>();
  desiredDpPathShare.add(new Pair<Integer,Dir>(1,Dir.UP));
  List<Pair<Integer,Dir>> observedDpPathShare=zhaoLink.getDpPathShare();
  System.out.println(observedDpPathShare);
  assertEquals(desiredDpPathShare,observedDpPathShare);
}",0.3042821158690176
131546,"@Test public void testAddNaradowskyFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence1();
  Alphabet<String> alphabet=new Alphabet<String>();
  SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
  prm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(prm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
  BinaryStrFVBuilder allFeats=new BinaryStrFVBuilder(alphabet);
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      fe.addNaradowskyPairFeatures(i,j,allFeats);
    }
  }
  for (  String f : allFeats) {
    System.out.println(f);
  }
}","@Test public void testAddNaradowskyFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence1();
  Alphabet<String> alphabet=new Alphabet<String>();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,sent,cs,alphabet);
  BinaryStrFVBuilder allFeats=new BinaryStrFVBuilder(alphabet);
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      fe.addNaradowskyPairFeatures(i,j,allFeats);
    }
  }
  for (  String f : allFeats) {
    System.out.println(f);
  }
}",0.7934238741958541
131547,"@Test public void testGetParentsAndUseGoldSyntax(){
  CoNLL09Sentence sent=getDogConll09Sentence();
  Alphabet<String> alphabet=new Alphabet<String>();
{
    SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
    prm.useGoldSyntax=true;
    CorpusStatistics cs=new CorpusStatistics(prm);
    cs.init(Utilities.getList(sent));
    SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
    int[] goldParents=fe.getParents(sent);
    assertArrayEquals(new int[]{1,2,-1,2},goldParents);
  }
{
    SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
    prm.useGoldSyntax=false;
    CorpusStatistics cs=new CorpusStatistics(prm);
    cs.init(Utilities.getList(sent));
    SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
    int[] predParents=fe.getParents(sent);
    assertArrayEquals(new int[]{2,0,-1,2},predParents);
  }
}","@Test public void testGetParentsAndUseGoldSyntax(){
  CoNLL09Sentence sent=getDogConll09Sentence();
  Alphabet<String> alphabet=new Alphabet<String>();
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
{
    CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
    csPrm.useGoldSyntax=true;
    CorpusStatistics cs=new CorpusStatistics(csPrm);
    cs.init(Utilities.getList(sent));
    SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,sent,cs,alphabet);
    int[] goldParents=fe.getParents(sent);
    assertArrayEquals(new int[]{1,2,-1,2},goldParents);
  }
{
    CorpusStatisticsPrm prm=new CorpusStatisticsPrm();
    prm.useGoldSyntax=false;
    CorpusStatistics cs=new CorpusStatistics(prm);
    cs.init(Utilities.getList(sent));
    SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,sent,cs,alphabet);
    int[] predParents=fe.getParents(sent);
    assertArrayEquals(new int[]{2,0,-1,2},predParents);
  }
}",0.7506909894969597
131548,"@Test public void testAddZhaoFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence1();
  Alphabet<String> alphabet=new Alphabet<String>();
  SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
  prm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(prm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
  BinaryStrFVBuilder feats;
  BinaryStrFVBuilder allFeats=new BinaryStrFVBuilder(alphabet);
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      fe.addZhaoPairFeatures(i,j,allFeats);
    }
  }
  for (  String f : allFeats) {
    System.out.println(f);
  }
}","@Test public void testAddZhaoFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence1();
  Alphabet<String> alphabet=new Alphabet<String>();
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  csPrm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SentFeatureExtractor fe=new SentFeatureExtractor(fePrm,sent,cs,alphabet);
  BinaryStrFVBuilder feats;
  BinaryStrFVBuilder allFeats=new BinaryStrFVBuilder(alphabet);
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      fe.addZhaoPairFeatures(i,j,allFeats);
    }
  }
  for (  String f : allFeats) {
    System.out.println(f);
  }
}",0.7980433263452131
131549,"public void setHighLowSupport(String support){
  String parentPos;
  boolean haveLow=false;
  int i;
  for (  Pair<Integer,Dir> a : rootPath) {
    i=a.get1();
    if (i == -1) {
      break;
    }
    if (prm.useGoldSyntax) {
      parentPos=sent.get(i).getPos();
    }
 else {
      parentPos=sent.get(i).getPpos();
    }
    if (parentPos.equals(support)) {
      if (!haveLow) {
        haveLow=true;
        this.lowSupport=i;
        this.highSupport=i;
      }
 else {
        this.highSupport=i;
      }
    }
  }
}","public void setHighLowSupport(String support){
  String parentPos;
  boolean haveLow=false;
  int i;
  for (  Pair<Integer,Dir> a : rootPath) {
    i=a.get1();
    if (i == -1) {
      break;
    }
    if (cs.prm.useGoldSyntax) {
      parentPos=sent.get(i).getPos();
    }
 else {
      parentPos=sent.get(i).getPpos();
    }
    if (parentPos.equals(support)) {
      if (!haveLow) {
        haveLow=true;
        this.lowSupport=i;
        this.highSupport=i;
      }
 else {
        this.highSupport=i;
      }
    }
  }
}",0.9971401334604384
131550,"public void setParent(){
  if (prm.useGoldSyntax) {
    this.parent=word.getHead() - 1;
  }
 else {
    this.parent=word.getPhead() - 1;
  }
}","public void setParent(){
  if (cs.prm.useGoldSyntax) {
    this.parent=word.getHead() - 1;
  }
 else {
    this.parent=word.getPhead() - 1;
  }
}",0.989547038327526
131551,"@Test public void testSrlLogLikelihood() throws Exception {
  List<CoNLL09Token> tokens=new ArrayList<CoNLL09Token>();
  tokens.add(new CoNLL09Token(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",getList(""String_Node_Str"")));
  tokens.add(new CoNLL09Token(3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),0,0,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",getList(""String_Node_Str"")));
  CoNLL09Sentence sent=new CoNLL09Sentence(tokens);
  List<CoNLL09Sentence> sents=getList(sent);
  System.out.println(""String_Node_Str"");
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.makeUnknownPredRolesLatent=false;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.useProjDepTreeFactor=true;
  prm.fePrm.biasOnly=true;
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet);
  FgExamples data=builder.getData(sents);
  System.out.println(""String_Node_Str"" + alphabet.size());
  FgModel model=new FgModel(alphabet);
  boolean logDomain=false;
  FgInferencerFactory infFactory=getInfFactory(logDomain);
  FgExample ex=data.get(0);
  FgInferencer infLat=infFactory.getInferencer(ex.getFgLat());
  FactorGraph fgLat=ex.updateFgLat(model.getParams(),infLat.isLogDomain());
  infLat.run();
  assertEquals(2,infLat.getPartition(),2);
  for (  Var v : fgLat.getVars()) {
    double partition=((BeliefPropagation)infLat).getPartitionFunctionAtVarNode(fgLat.getNode(v));
    assertEquals(2,logDomain ? Utilities.exp(partition) : partition,1e-3);
  }
  System.out.println(""String_Node_Str"");
  FgInferencer infLatPred=infFactory.getInferencer(ex.getFgLatPred());
  FactorGraph fgLatPred=ex.updateFgLatPred(model.getParams(),infLatPred.isLogDomain());
  infLatPred.run();
  assertEquals(4,infLatPred.getPartition(),2);
  BfsBpSchedule schedule=new BfsBpSchedule(fgLatPred);
  System.out.println();
  for (  FgEdge edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (  Factor f : fgLatPred.getFactors()) {
    System.out.println(f);
  }
  for (  Var v : fgLatPred.getVars()) {
    double partition=((BeliefPropagation)infLatPred).getPartitionFunctionAtVarNode(fgLatPred.getNode(v));
    System.out.format(""String_Node_Str"",v.toString(),partition);
    assertEquals(4,logDomain ? Utilities.exp(partition) : partition,1e-3);
  }
  CrfObjective obj=new CrfObjective(model.getNumParams(),data,infFactory);
  double ll=obj.getValue(model.getParams());
  assertEquals(0.5,Utilities.exp(ll),1e-13);
}","@Test public void testSrlLogLikelihood() throws Exception {
  List<CoNLL09Token> tokens=new ArrayList<CoNLL09Token>();
  tokens.add(new CoNLL09Token(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",getList(""String_Node_Str"")));
  tokens.add(new CoNLL09Token(3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),0,0,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",getList(""String_Node_Str"")));
  CoNLL09Sentence sent=new CoNLL09Sentence(tokens);
  List<CoNLL09Sentence> sents=getList(sent);
  System.out.println(""String_Node_Str"");
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.makeUnknownPredRolesLatent=false;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.useProjDepTreeFactor=true;
  prm.fePrm.biasOnly=true;
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet,cs);
  FgExamples data=builder.getData(sents);
  System.out.println(""String_Node_Str"" + alphabet.size());
  FgModel model=new FgModel(alphabet);
  boolean logDomain=false;
  FgInferencerFactory infFactory=getInfFactory(logDomain);
  FgExample ex=data.get(0);
  FgInferencer infLat=infFactory.getInferencer(ex.getFgLat());
  FactorGraph fgLat=ex.updateFgLat(model.getParams(),infLat.isLogDomain());
  infLat.run();
  assertEquals(2,infLat.getPartition(),2);
  for (  Var v : fgLat.getVars()) {
    double partition=((BeliefPropagation)infLat).getPartitionFunctionAtVarNode(fgLat.getNode(v));
    assertEquals(2,logDomain ? Utilities.exp(partition) : partition,1e-3);
  }
  System.out.println(""String_Node_Str"");
  FgInferencer infLatPred=infFactory.getInferencer(ex.getFgLatPred());
  FactorGraph fgLatPred=ex.updateFgLatPred(model.getParams(),infLatPred.isLogDomain());
  infLatPred.run();
  assertEquals(4,infLatPred.getPartition(),2);
  BfsBpSchedule schedule=new BfsBpSchedule(fgLatPred);
  System.out.println();
  for (  FgEdge edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (  Factor f : fgLatPred.getFactors()) {
    System.out.println(f);
  }
  for (  Var v : fgLatPred.getVars()) {
    double partition=((BeliefPropagation)infLatPred).getPartitionFunctionAtVarNode(fgLatPred.getNode(v));
    System.out.format(""String_Node_Str"",v.toString(),partition);
    assertEquals(4,logDomain ? Utilities.exp(partition) : partition,1e-3);
  }
  CrfObjective obj=new CrfObjective(model.getNumParams(),data,infFactory);
  double ll=obj.getValue(model.getParams());
  assertEquals(0.5,Utilities.exp(ll),1e-13);
}",0.9778552746294682
131552,"public FgModel train(FgModel model,FgExamples data){
  Function objective=new CrfObjective(model.getNumParams(),data,prm.infFactory);
  if (prm.regularizer != null) {
    prm.regularizer.setNumDimensions(model.getNumParams());
    objective=new AddFunctions(objective,prm.regularizer);
  }
  double[] initial=model.getParams();
  double[] params=prm.maximizer.maximize(objective,initial);
  model.setParams(params);
  return model;
}","public void train(FgModel model,FgExamples data){
  Function objective=new CrfObjective(model.getNumParams(),data,prm.infFactory);
  if (prm.regularizer != null) {
    prm.regularizer.setNumDimensions(model.getNumParams());
    objective=new AddFunctions(objective,prm.regularizer);
  }
  double[] initial=model.getParams();
  double[] params=prm.maximizer.maximize(objective,initial);
  model.setParams(params);
}",0.9681227863046044
131553,"private static FgModel train(FgModel model,FgExamples data){
  BeliefPropagationPrm bpPrm=new BeliefPropagationPrm();
  bpPrm.logDomain=true;
  bpPrm.schedule=BpScheduleType.TREE_LIKE;
  bpPrm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  bpPrm.normalizeMessages=false;
  CrfTrainerPrm prm=new CrfTrainerPrm();
  prm.infFactory=bpPrm;
  prm.regularizer=null;
  CrfTrainer trainer=new CrfTrainer(prm);
  return trainer.train(model,data);
}","private static FgModel train(FgModel model,FgExamples data){
  BeliefPropagationPrm bpPrm=new BeliefPropagationPrm();
  bpPrm.logDomain=true;
  bpPrm.schedule=BpScheduleType.TREE_LIKE;
  bpPrm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  bpPrm.normalizeMessages=false;
  CrfTrainerPrm prm=new CrfTrainerPrm();
  prm.infFactory=bpPrm;
  prm.regularizer=null;
  CrfTrainer trainer=new CrfTrainer(prm);
  trainer.train(model,data);
  return model;
}",0.9736540664375716
131554,"@Override public FeatureVector calcFeatureVector(int factorId,VarConfig varConfig){
  SrlFactor f=(SrlFactor)sfg.getFactor(factorId);
  SrlFactorTemplate ft=f.getFactorType();
  VarSet vars=varConfig.getVars();
  BinaryStrFVBuilder obsFeats;
  if (ft == SrlFactorTemplate.LINK_ROLE_BINARY || ft == SrlFactorTemplate.LINK_UNARY || ft == SrlFactorTemplate.ROLE_UNARY) {
    Var var=vars.iterator().next();
    int parent;
    int child;
    if (var instanceof LinkVar) {
      parent=((LinkVar)var).getParent();
      child=((LinkVar)var).getChild();
    }
 else {
      parent=((RoleVar)var).getParent();
      child=((RoleVar)var).getChild();
    }
    if (parent == -1) {
      obsFeats=fastGetObsFeats(child);
    }
 else {
      obsFeats=fastGetObsFeats(parent,child);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  FeatureVector fv=new FeatureVector(obsFeats.size());
  String vcStr=ft + ""String_Node_Str"";
  for (  Var v : varConfig.getVars()) {
    vcStr+=varConfig.getStateName(v);
  }
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + obsFeats.size());
  }
  if (prm.featureHashMod <= 0) {
    int fidx=alphabet.lookupIndexIncrement(new Feature(vcStr + ""String_Node_Str"",true));
    if (fidx != -1) {
      fv.add(fidx,1.0);
    }
  }
 else {
    int bfidx=alphabet.lookupIndexIncrement(new Feature(vcStr + ""String_Node_Str"",true));
    String fname=vcStr + ""String_Node_Str"" + bfidx;
    int hash=fname.hashCode();
    hash=hash % prm.featureHashMod;
    if (hash < 0) {
      hash+=prm.featureHashMod;
    }
    fname=Integer.toString(hash);
    int fidx=alphabet.lookupIndexIncrement(new Feature(fname,true));
    if (fidx != -1) {
      int revHash=reverseHashCode(fname);
      if (revHash < 0) {
        fv.add(fidx,-1.0);
      }
 else {
        fv.add(fidx,1.0);
      }
    }
  }
  if (prm.featureHashMod <= 0) {
    for (    String obsFeat : obsFeats) {
      String fname=vcStr + ""String_Node_Str"" + obsFeat;
      int fidx=alphabet.lookupIndexIncrement(new Feature(fname));
      if (fidx != -1) {
        fv.add(fidx,1.0);
      }
    }
  }
 else {
    FeatureVectorBuilder fvb=obsFeats.getFvb();
    for (    IntDoubleEntry obsFeat : fvb) {
      String fname=vcStr + ""String_Node_Str"" + obsFeat.index();
      int hash=fname.hashCode();
      hash=hash % prm.featureHashMod;
      if (hash < 0) {
        hash+=prm.featureHashMod;
      }
      fname=Integer.toString(hash);
      int fidx=alphabet.lookupIndexIncrement(new Feature(fname));
      if (fidx != -1) {
        int revHash=reverseHashCode(fname);
        if (revHash < 0) {
          fv.add(fidx,-1.0);
        }
 else {
          fv.add(fidx,1.0);
        }
      }
    }
  }
  return fv;
}","@Override public FeatureVector calcFeatureVector(int factorId,VarConfig varConfig){
  SrlFactor f=(SrlFactor)sfg.getFactor(factorId);
  SrlFactorTemplate ft=f.getFactorType();
  VarSet vars=varConfig.getVars();
  BinaryStrFVBuilder obsFeats;
  if (ft == SrlFactorTemplate.LINK_ROLE_BINARY || ft == SrlFactorTemplate.LINK_UNARY || ft == SrlFactorTemplate.ROLE_UNARY) {
    Var var=vars.iterator().next();
    int parent;
    int child;
    if (var instanceof LinkVar) {
      parent=((LinkVar)var).getParent();
      child=((LinkVar)var).getChild();
    }
 else {
      parent=((RoleVar)var).getParent();
      child=((RoleVar)var).getChild();
    }
    if (parent == -1) {
      obsFeats=fastGetObsFeats(child);
    }
 else {
      obsFeats=fastGetObsFeats(parent,child);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ft);
  }
  FeatureVector fv=new FeatureVector(obsFeats.size());
  String vcStr=ft + ""String_Node_Str"";
  for (  Var v : varConfig.getVars()) {
    vcStr+=varConfig.getStateName(v);
  }
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + obsFeats.size());
  }
  if (prm.featureHashMod <= 0) {
    int fidx=alphabet.lookupIndex(new Feature(vcStr + ""String_Node_Str"",true));
    if (fidx != -1) {
      fv.add(fidx,1.0);
    }
  }
 else {
    int bfidx=alphabet.lookupIndex(new Feature(vcStr + ""String_Node_Str"",true));
    String fname=vcStr + ""String_Node_Str"" + bfidx;
    int hash=fname.hashCode();
    hash=hash % prm.featureHashMod;
    if (hash < 0) {
      hash+=prm.featureHashMod;
    }
    fname=Integer.toString(hash);
    int fidx=alphabet.lookupIndex(new Feature(fname,true));
    if (fidx != -1) {
      int revHash=reverseHashCode(fname);
      if (revHash < 0) {
        fv.add(fidx,-1.0);
      }
 else {
        fv.add(fidx,1.0);
      }
    }
  }
  if (prm.featureHashMod <= 0) {
    for (    String obsFeat : obsFeats) {
      String fname=vcStr + ""String_Node_Str"" + obsFeat;
      int fidx=alphabet.lookupIndex(new Feature(fname));
      if (fidx != -1) {
        fv.add(fidx,1.0);
      }
    }
  }
 else {
    FeatureVectorBuilder fvb=obsFeats.getFvb();
    for (    IntDoubleEntry obsFeat : fvb) {
      String fname=vcStr + ""String_Node_Str"" + obsFeat.index();
      int hash=fname.hashCode();
      hash=hash % prm.featureHashMod;
      if (hash < 0) {
        hash+=prm.featureHashMod;
      }
      fname=Integer.toString(hash);
      int fidx=alphabet.lookupIndex(new Feature(fname));
      if (fidx != -1) {
        int revHash=reverseHashCode(fname);
        if (revHash < 0) {
          fv.add(fidx,-1.0);
        }
 else {
          fv.add(fidx,1.0);
        }
      }
    }
  }
  return fv;
}",0.9916682095908164
131555,"public Alphabet<Feature> preprocess(List<CoNLL09Sentence> sents){
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  List<FeatureExtractor> featExts=new ArrayList<FeatureExtractor>();
  for (int i=0; i < sents.size(); i++) {
    CoNLL09Sentence sent=sents.get(i);
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    SrlGraph srlGraph=sent.getSrlGraph();
    Set<Integer> knownPreds=getKnownPreds(srlGraph);
    SrlFactorGraph sfg=new SrlFactorGraph(prm.fgPrm,sent.size(),knownPreds,cs.roleStateNames);
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    FgExample ex=new FgExample(sfg,trainConfig);
    SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(prm.fePrm,sent,cs,obsAlphabet);
    FeatureExtractor featExtractor=new SrlFeatureExtractor(prm.srlFePrm,sfg,alphabet,sentFeatExt);
    featExts.add(featExtractor);
    ex.cacheLatFeats(sfg,trainConfig,featExtractor);
  }
  Integer count;
  Alphabet<Feature> newAlphabet=new Alphabet<Feature>();
  for (  Feature o : alphabet.getObjects()) {
    count=alphabet.lookupIndexIncrement(o);
    if (count > prm.fePrm.min || o.isBiasFeature()) {
      newAlphabet.lookupIndexIncrement(o);
    }
  }
  newAlphabet.stopGrowth();
  return newAlphabet;
}","public void preprocess(List<CoNLL09Sentence> sents){
  if (!(alphabet.isGrowing() && prm.featCountCutoff > 0)) {
    return;
  }
  CountingAlphabet<Feature> counter=new CountingAlphabet<Feature>();
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  List<FeatureExtractor> featExts=new ArrayList<FeatureExtractor>();
  for (int i=0; i < sents.size(); i++) {
    CoNLL09Sentence sent=sents.get(i);
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    SrlGraph srlGraph=sent.getSrlGraph();
    Set<Integer> knownPreds=getKnownPreds(srlGraph);
    SrlFactorGraph sfg=new SrlFactorGraph(prm.fgPrm,sent.size(),knownPreds,cs.roleStateNames);
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    FgExample ex=new FgExample(sfg,trainConfig);
    SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(prm.fePrm,sent,cs,obsAlphabet);
    FeatureExtractor featExtractor=new SrlFeatureExtractor(prm.srlFePrm,sfg,counter,sentFeatExt);
    featExts.add(featExtractor);
    ex.cacheLatFeats(sfg,trainConfig,featExtractor);
  }
  for (int i=0; i < counter.size(); i++) {
    int count=counter.lookupObjectCount(i);
    Feature feat=counter.lookupObject(i);
    if (count >= prm.featCountCutoff || feat.isBiasFeature()) {
      alphabet.lookupIndex(feat);
    }
  }
  alphabet.stopGrowth();
}",0.7368821292775666
131556,"public FgExamples getData(List<CoNLL09Sentence> sents){
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  List<FeatureExtractor> featExts=new ArrayList<FeatureExtractor>();
  FgExamples data=new FgExamples(alphabet);
  for (int i=0; i < sents.size(); i++) {
    CoNLL09Sentence sent=sents.get(i);
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    SrlGraph srlGraph=sent.getSrlGraph();
    Set<Integer> knownPreds=getKnownPreds(srlGraph);
    SrlFactorGraph sfg=new SrlFactorGraph(prm.fgPrm,sent.size(),knownPreds,cs.roleStateNames);
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    FgExample ex=new FgExample(sfg,trainConfig);
    SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(prm.fePrm,sent,cs,obsAlphabet);
    FeatureExtractor featExtractor=new SrlFeatureExtractor(prm.srlFePrm,sfg,alphabet,sentFeatExt);
    featExts.add(featExtractor);
    ex.cacheLatFeats(sfg,trainConfig,featExtractor);
    data.add(ex);
  }
  if (!prm.includeUnsupportedFeatures) {
    alphabet.stopGrowth();
  }
  for (int i=0; i < data.size(); i++) {
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    FgExample ex=data.get(i);
    CoNLL09Sentence sent=sents.get(i);
    SrlGraph srlGraph=sent.getSrlGraph();
    SrlFactorGraph sfg=(SrlFactorGraph)ex.getOriginalFactorGraph();
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    FeatureExtractor featExtractor=featExts.get(i);
    ex.cacheLatPredFeats(sfg,trainConfig,featExtractor);
  }
  log.info(""String_Node_Str"" + obsAlphabet.size());
  data.setSourceSentences(sents);
  return data;
}","public FgExamples getData(List<CoNLL09Sentence> sents){
  preprocess(sents);
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  List<FeatureExtractor> featExts=new ArrayList<FeatureExtractor>();
  FgExamples data=new FgExamples(alphabet);
  for (int i=0; i < sents.size(); i++) {
    CoNLL09Sentence sent=sents.get(i);
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    SrlGraph srlGraph=sent.getSrlGraph();
    Set<Integer> knownPreds=getKnownPreds(srlGraph);
    SrlFactorGraph sfg=new SrlFactorGraph(prm.fgPrm,sent.size(),knownPreds,cs.roleStateNames);
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    FgExample ex=new FgExample(sfg,trainConfig);
    SentFeatureExtractor sentFeatExt=new SentFeatureExtractor(prm.fePrm,sent,cs,obsAlphabet);
    FeatureExtractor featExtractor=new SrlFeatureExtractor(prm.srlFePrm,sfg,alphabet,sentFeatExt);
    featExts.add(featExtractor);
    ex.cacheLatFeats(sfg,trainConfig,featExtractor);
    data.add(ex);
  }
  if (!prm.includeUnsupportedFeatures) {
    alphabet.stopGrowth();
  }
  for (int i=0; i < data.size(); i++) {
    if (i % 1000 == 0 && i > 0) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    FgExample ex=data.get(i);
    CoNLL09Sentence sent=sents.get(i);
    SrlGraph srlGraph=sent.getSrlGraph();
    SrlFactorGraph sfg=(SrlFactorGraph)ex.getOriginalFactorGraph();
    VarConfig trainConfig=getTrainAssignment(sent,srlGraph,sfg);
    FeatureExtractor featExtractor=featExts.get(i);
    ex.cacheLatPredFeats(sfg,trainConfig,featExtractor);
  }
  log.info(""String_Node_Str"" + obsAlphabet.size());
  data.setSourceSentences(sents);
  return data;
}",0.9937888198757764
131557,"@Test public void testPreprocess() throws Exception {
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatistics.normalizeRoleNames(sents);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fePrm=fePrm;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.alwaysIncludeLinkVars=true;
  SrlFgExamplesBuilder processer=new SrlFgExamplesBuilder(prm,alphabet,cs);
  Alphabet<Feature> processedAlphabet=processer.preprocess(sents);
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,processedAlphabet,cs);
  builder.getData(sents);
  assertTrue(processedAlphabet.size() < alphabet.size());
  assertEquals(4,prm.fePrm.min);
}","@Test public void testPreprocess() throws Exception {
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  CorpusStatistics.normalizeRoleNames(sents);
  CorpusStatisticsPrm csPrm=new CorpusStatisticsPrm();
  CorpusStatistics cs=new CorpusStatistics(csPrm);
  cs.init(sents);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fePrm.useZhaoFeats=false;
  prm.fePrm.useSimpleFeats=false;
  prm.fePrm=fePrm;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.alwaysIncludeLinkVars=true;
{
    Alphabet<Feature> alphabet=new Alphabet<Feature>();
    prm.featCountCutoff=0;
    SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet,cs);
    builder.getData(sents);
    assertEquals(24223,alphabet.size());
  }
{
    Alphabet<Feature> alphabet=new Alphabet<Feature>();
    prm.featCountCutoff=4;
    SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet,cs);
    builder.getData(sents);
    assertEquals(5883,alphabet.size());
  }
{
    Alphabet<Feature> alphabet=new Alphabet<Feature>();
    prm.featCountCutoff=5;
    SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet,cs);
    builder.getData(sents);
    assertEquals(4929,alphabet.size());
  }
}",0.7008410092110533
131558,"private static SrlFgExampleBuilderPrm getSrlFgExampleBuilderPrm(){
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.linkVarType=linkVarType;
  prm.fgPrm.makeUnknownPredRolesLatent=makeUnknownPredRolesLatent;
  prm.fgPrm.roleStructure=roleStructure;
  prm.fgPrm.useProjDepTreeFactor=useProjDepTreeFactor;
  prm.fgPrm.allowPredArgSelfLoops=allowPredArgSelfLoops;
  prm.fgPrm.unaryFactors=unaryFactors;
  prm.fgPrm.alwaysIncludeLinkVars=alwaysIncludeLinkVars;
  prm.fePrm.biasOnly=biasOnly;
  prm.fePrm.useSimpleFeats=useSimpleFeats;
  prm.fePrm.useNaradFeats=useNaradFeats;
  prm.fePrm.useZhaoFeats=useZhaoFeats;
  prm.fePrm.min=min;
  prm.srlFePrm.featureHashMod=featureHashMod;
  prm.includeUnsupportedFeatures=includeUnsupportedFeatures;
  return prm;
}","private static SrlFgExampleBuilderPrm getSrlFgExampleBuilderPrm(){
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.linkVarType=linkVarType;
  prm.fgPrm.makeUnknownPredRolesLatent=makeUnknownPredRolesLatent;
  prm.fgPrm.roleStructure=roleStructure;
  prm.fgPrm.useProjDepTreeFactor=useProjDepTreeFactor;
  prm.fgPrm.allowPredArgSelfLoops=allowPredArgSelfLoops;
  prm.fgPrm.unaryFactors=unaryFactors;
  prm.fgPrm.alwaysIncludeLinkVars=alwaysIncludeLinkVars;
  prm.fePrm.biasOnly=biasOnly;
  prm.fePrm.useSimpleFeats=useSimpleFeats;
  prm.fePrm.useNaradFeats=useNaradFeats;
  prm.fePrm.useZhaoFeats=useZhaoFeats;
  prm.featCountCutoff=featCountCutoff;
  prm.srlFePrm.featureHashMod=featureHashMod;
  prm.includeUnsupportedFeatures=includeUnsupportedFeatures;
  return prm;
}",0.9745222929936306
131559,"public Alphabet(Alphabet<T> other){
  isGrowing=true;
  idxObjMap=new ArrayList<T>(other.idxObjMap);
  objIdxMap=new HashMap<T,Integer>(other.objIdxMap);
  objIdxCountMap=new HashMap<T,MutableInt>(other.objIdxCountMap);
}","public Alphabet(Alphabet<T> other){
  isGrowing=true;
  idxObjMap=new ArrayList<T>(other.idxObjMap);
  objIdxMap=new HashMap<T,Integer>(other.objIdxMap);
}",0.824468085106383
131560,"private void getSecondThirdSupArgFeats(ZhaoObject zhaoPred,ZhaoObject zhaoArg,ZhaoObject zhaoPredLast,ZhaoObject zhaoPredNext,ZhaoObject zhaoArgLast,ZhaoObject zhaoArgNext,ZhaoObject zhaoArgParent,ArrayList<CoNLL09Token> argChildrenTokens,BinaryStrFVBuilder feats){
  CoNLL09Token argLm=sent.get(zhaoArg.getFarLeftChild());
  CoNLL09Token argRm=sent.get(zhaoArg.getFarRightChild());
  CoNLL09Token argRn=sent.get(zhaoArg.getNearRightChild());
  CoNLL09Token argLn=sent.get(zhaoArg.getNearLeftChild());
  String feat;
  feats.add(zhaoArgParent.getLemma());
  feats.add(argLm.getDeprel() + ""String_Node_Str"" + zhaoArg.getForm());
  feats.add(sent.get(zhaoArgLast.getFarLeftChild()).getLemma());
  feats.add(argLm.getPos());
  feats.add(sent.get(zhaoArgNext.getFarLeftChild()).getPos());
  ArrayList<Integer> noFarChildren=zhaoArg.getNoFarChildren();
  ArrayList<String> noFarChildrenPos=new ArrayList<String>();
  if (cs.prm.useGoldSyntax) {
    for (    Integer i : noFarChildren) {
      noFarChildrenPos.add(sent.get(i).getPos());
    }
  }
 else {
    for (    Integer j : noFarChildren) {
      noFarChildrenPos.add(sent.get(j).getPpos());
    }
  }
  List<String> argNoFarChildrenBag=bag(noFarChildrenPos);
  feat=StringUtils.join(argNoFarChildrenBag,""String_Node_Str"") + argRm.getForm();
  feats.add(feat);
  feats.add(sent.get(zhaoArg.getPhead()).getLemma());
  feats.add(argRm + ""String_Node_Str"" + zhaoArg.getForm());
  feats.add(sent.get(zhaoArgLast.getFarRightChild()).getForm());
  feats.add(argRm.getLemma());
  feats.add(argRn.getDeprel() + ""String_Node_Str"" + zhaoArg.getForm());
}","private void getSecondThirdSupArgFeats(ZhaoObject zhaoPred,ZhaoObject zhaoArg,ZhaoObject zhaoPredLast,ZhaoObject zhaoPredNext,ZhaoObject zhaoArgLast,ZhaoObject zhaoArgNext,ZhaoObject zhaoArgParent,ArrayList<CoNLL09Token> argChildrenTokens,BinaryStrFVBuilder feats){
  CoNLL09Token argLm=sent.get(zhaoArg.getFarLeftChild());
  CoNLL09Token argRm=sent.get(zhaoArg.getFarRightChild());
  CoNLL09Token argRn=sent.get(zhaoArg.getNearRightChild());
  CoNLL09Token argLn=sent.get(zhaoArg.getNearLeftChild());
  String feat;
  feats.add(zhaoArgParent.getLemma());
  feats.add(argLm.getDeprel() + ""String_Node_Str"" + zhaoArg.getForm());
  if (zhaoArgLast.getFarLeftChild() < 0) {
    feats.add(""String_Node_Str"");
  }
 else {
    feats.add(sent.get(zhaoArgLast.getFarLeftChild()).getLemma());
  }
  feats.add(argLm.getPos());
  if (zhaoArgNext.getFarLeftChild() < 0) {
    feats.add(""String_Node_Str"");
  }
 else {
    feats.add(sent.get(zhaoArgNext.getFarLeftChild()).getPos());
  }
  ArrayList<Integer> noFarChildren=zhaoArg.getNoFarChildren();
  ArrayList<String> noFarChildrenPos=new ArrayList<String>();
  if (cs.prm.useGoldSyntax) {
    for (    Integer i : noFarChildren) {
      if (i < 0) {
        feats.add(""String_Node_Str"");
      }
 else {
        noFarChildrenPos.add(sent.get(i).getPos());
      }
    }
  }
 else {
    for (    Integer j : noFarChildren) {
      if (j < 0) {
        feats.add(""String_Node_Str"");
      }
 else {
        noFarChildrenPos.add(sent.get(j).getPpos());
      }
    }
  }
  List<String> argNoFarChildrenBag=bag(noFarChildrenPos);
  feat=StringUtils.join(argNoFarChildrenBag,""String_Node_Str"") + argRm.getForm();
  feats.add(feat);
  if (zhaoArg.getPhead() < 0) {
    feats.add(""String_Node_Str"");
  }
 else {
    feats.add(sent.get(zhaoArg.getPhead()).getLemma());
  }
  feats.add(argRm + ""String_Node_Str"" + zhaoArg.getForm());
  if (zhaoArgLast.getFarRightChild() < 0) {
    feats.add(""String_Node_Str"");
  }
 else {
    feats.add(sent.get(zhaoArgLast.getFarRightChild()).getForm());
  }
  feats.add(argRm.getLemma());
  feats.add(argRn.getDeprel() + ""String_Node_Str"" + zhaoArg.getForm());
}",0.8368223295759528
131561,"private void getThirdThirdSupArgFeats(ZhaoObject zhaoPred,ZhaoObject zhaoArg,ZhaoObject zhaoPredLast,ZhaoObject zhaoPredNext,ZhaoObject zhaoArgLast,ZhaoObject zhaoArgNext,ZhaoObject zhaoArgParent,ArrayList<CoNLL09Token> argChildrenTokens,BinaryStrFVBuilder feats){
  String feat;
  feats.add(sent.get(zhaoArg.getLowSupport()).getLemma());
  feats.add(zhaoArg.getLemma() + ""String_Node_Str"" + zhaoArgParent.getForm());
  feats.add(zhaoArg.getLemma() + ""String_Node_Str"" + sent.get(zhaoArg.getPhead()).getForm());
  feats.add(zhaoArgNext.getLemma());
  ArrayList<String> argChildrenDeprel=new ArrayList<String>();
  for (  CoNLL09Token child : argChildrenTokens) {
    argChildrenDeprel.add(child.getDeprel());
  }
  List<String> argChildrenDeprelBag=bag(argChildrenDeprel);
  feat=zhaoArg.getPos() + StringUtils.join(argChildrenDeprelBag,""String_Node_Str"");
  feats.add(feat);
}","private void getThirdThirdSupArgFeats(ZhaoObject zhaoPred,ZhaoObject zhaoArg,ZhaoObject zhaoPredLast,ZhaoObject zhaoPredNext,ZhaoObject zhaoArgLast,ZhaoObject zhaoArgNext,ZhaoObject zhaoArgParent,ArrayList<CoNLL09Token> argChildrenTokens,BinaryStrFVBuilder feats){
  String feat;
  if (zhaoArg.getLowSupport() < 0) {
    feats.add(""String_Node_Str"");
  }
 else {
    feats.add(sent.get(zhaoArg.getLowSupport()).getLemma());
  }
  feats.add(zhaoArg.getLemma() + ""String_Node_Str"" + zhaoArgParent.getForm());
  feats.add(zhaoArg.getLemma() + ""String_Node_Str"" + sent.get(zhaoArg.getPhead()).getForm());
  feats.add(zhaoArgNext.getLemma());
  ArrayList<String> argChildrenDeprel=new ArrayList<String>();
  for (  CoNLL09Token child : argChildrenTokens) {
    argChildrenDeprel.add(child.getDeprel());
  }
  List<String> argChildrenDeprelBag=bag(argChildrenDeprel);
  feat=zhaoArg.getPos() + StringUtils.join(argChildrenDeprelBag,""String_Node_Str"");
  feats.add(feat);
}",0.951709169831796
131562,"private void addZhaoSupervisedPredFeats(ZhaoObject zhaoPred,ZhaoObject zhaoArg,ZhaoObject zhaoPredLast,ZhaoObject zhaoPredNext,BinaryStrFVBuilder feats){
  feats.add(zhaoPred.getPred() + ""String_Node_Str"" + zhaoPred.getLemma());
  feats.add(zhaoPred.getPred() + ""String_Node_Str"" + zhaoPred.getPos());
  feats.add(zhaoPred.getPred() + ""String_Node_Str"" + zhaoArg.getPos());
  if (zhaoPredLast.getFeat() == null) {
    feats.add(zhaoPredLast.getForm());
  }
 else {
    feats.add(zhaoPredLast.getFeat().get(0));
  }
  feats.add(zhaoPred.getFeat().get(1));
  if (zhaoPredNext.getFeat() == null) {
    feats.add(zhaoPredNext.getForm());
  }
 else {
    feats.add(zhaoPredNext.getFeat().get(2));
  }
  feats.add(sent.get(zhaoPred.getFarRightChild()).getDeprel());
  feats.add(sent.get(zhaoPred.getFarLeftChild()).getDeprel());
  ArrayList<String> depPredChildren=new ArrayList<String>();
  for (  Integer child : zhaoPred.getChildren()) {
    depPredChildren.add(sent.get(child).getDeprel());
  }
  String bagDepPredChildren=StringUtils.join(bag(depPredChildren),""String_Node_Str"");
  feats.add(zhaoPred.getForm() + ""String_Node_Str"" + bagDepPredChildren);
  feats.add(zhaoPredLast.getLemma());
  feats.add(zhaoPred.getLemma());
  feats.add(zhaoPred.getLemma() + ""String_Node_Str"" + zhaoPredNext.getLemma());
  feats.add(zhaoPred.getPos() + ""String_Node_Str"" + bagDepPredChildren);
}","private void addZhaoSupervisedPredFeats(ZhaoObject zhaoPred,ZhaoObject zhaoArg,ZhaoObject zhaoPredLast,ZhaoObject zhaoPredNext,BinaryStrFVBuilder feats){
  feats.add(zhaoPred.getPred() + ""String_Node_Str"" + zhaoPred.getLemma());
  feats.add(zhaoPred.getPred() + ""String_Node_Str"" + zhaoPred.getPos());
  feats.add(zhaoPred.getPred() + ""String_Node_Str"" + zhaoArg.getPos());
  if (zhaoPredLast.getFeat() == null) {
    feats.add(zhaoPredLast.getForm());
  }
 else {
    feats.add(zhaoPredLast.getFeat().get(0));
  }
  feats.add(zhaoPred.getFeat().get(1));
  if (zhaoPredNext.getFeat() == null) {
    feats.add(zhaoPredNext.getForm());
  }
 else {
    feats.add(zhaoPredNext.getFeat().get(2));
  }
  if (zhaoPred.getFarRightChild() < 0) {
    feats.add(""String_Node_Str"");
  }
 else {
    feats.add(sent.get(zhaoPred.getFarRightChild()).getDeprel());
  }
  if (zhaoPred.getFarLeftChild() < 0) {
    feats.add(""String_Node_Str"");
  }
 else {
    feats.add(sent.get(zhaoPred.getFarLeftChild()).getDeprel());
  }
  ArrayList<String> depPredChildren=new ArrayList<String>();
  for (  Integer child : zhaoPred.getChildren()) {
    depPredChildren.add(sent.get(child).getDeprel());
  }
  String bagDepPredChildren=StringUtils.join(bag(depPredChildren),""String_Node_Str"");
  feats.add(zhaoPred.getForm() + ""String_Node_Str"" + bagDepPredChildren);
  feats.add(zhaoPredLast.getLemma());
  feats.add(zhaoPred.getLemma());
  feats.add(zhaoPred.getLemma() + ""String_Node_Str"" + zhaoPredNext.getLemma());
  feats.add(zhaoPred.getPos() + ""String_Node_Str"" + bagDepPredChildren);
}",0.9126741420319402
131563,"public ZhaoObject(String input){
  super(-1,input,input,input,input,input,null,null,-2,-2,input,input,false,input,null);
  setFeat(-1);
}","public ZhaoObject(String input){
  super(-1,input,input,input,input,input,null,null,-2,-2,input,input,false,input,null);
  setFeat(-1);
  this.rootPath=new ArrayList<Pair<Integer,Dir>>();
  this.rootPath.add(new Pair<Integer,Dir>(-1,Dir.UP));
  this.parent=-1;
  this.children=new ArrayList<Integer>();
  this.children.add(-1);
  this.farLeftChild=-1;
  this.farRightChild=-1;
  this.nearLeftChild=-1;
  this.nearRightChild=-1;
  this.lowSupport=-1;
  this.highSupport=-1;
  this.noFarChildren=new ArrayList<Integer>();
  setNoFarChildren();
}",0.4029411764705882
131564,"public SrlFactorGraph(SrlFactorGraphPrm prm,int n,Set<Integer> knownPreds,List<String> roleStateNames){
  super();
  this.prm=prm;
  this.n=n;
  roleVars=new RoleVar[n][n];
  if (prm.roleStructure == RoleStructure.PREDS_GIVEN) {
    for (    int i : knownPreds) {
      for (int j=0; j < n; j++) {
        if (i == j && !prm.allowPredArgSelfLoops) {
          continue;
        }
        roleVars[i][j]=createRoleVar(i,j,knownPreds,roleStateNames);
      }
    }
  }
 else   if (prm.roleStructure == RoleStructure.ALL_PAIRS) {
    for (int i=0; i < n; i++) {
      for (int j=0; j < n; j++) {
        if (i == j && !prm.allowPredArgSelfLoops) {
          continue;
        }
        roleVars[i][j]=createRoleVar(i,j,knownPreds,roleStateNames);
      }
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + prm.roleStructure);
  }
  if (prm.useProjDepTreeFactor && prm.linkVarType != VarType.OBSERVED) {
    log.trace(""String_Node_Str"");
    ProjDepTreeFactor treeFactor=new ProjDepTreeFactor(n,prm.linkVarType);
    rootVars=treeFactor.getRootVars();
    childVars=treeFactor.getChildVars();
    addFactor(treeFactor);
  }
 else   if (prm.linkVarType == VarType.OBSERVED || prm.alwaysIncludeLinkVars) {
    log.trace(""String_Node_Str"");
    rootVars=new LinkVar[n];
    childVars=new LinkVar[n][n];
    for (int i=-1; i < n; i++) {
      for (int j=0; j < n; j++) {
        if (prm.linkVarType == VarType.OBSERVED && roleVars[i][j] == null) {
          continue;
        }
        if (i != j) {
          if (i == -1) {
            rootVars[j]=createLinkVar(i,j);
          }
 else {
            childVars[i][j]=createLinkVar(i,j);
          }
        }
      }
    }
  }
 else {
    rootVars=new LinkVar[n];
    childVars=new LinkVar[n][n];
    log.trace(""String_Node_Str"");
    prm.unaryFactors=true;
  }
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i == -1) {
        if (prm.unaryFactors && prm.linkVarType != VarType.OBSERVED && rootVars[j] != null) {
          addFactor(new SrlFactor(new VarSet(rootVars[j]),SrlFactorTemplate.LINK_UNARY));
        }
      }
 else {
        if (prm.unaryFactors && roleVars[i][j] != null) {
          addFactor(new SrlFactor(new VarSet(roleVars[i][j]),SrlFactorTemplate.ROLE_UNARY));
        }
        if (prm.unaryFactors && prm.linkVarType != VarType.OBSERVED && childVars[i][j] != null) {
          addFactor(new SrlFactor(new VarSet(childVars[i][j]),SrlFactorTemplate.LINK_UNARY));
        }
        if (roleVars[i][j] != null && childVars[i][j] != null) {
          addFactor(new SrlFactor(new VarSet(roleVars[i][j],childVars[i][j]),SrlFactorTemplate.LINK_ROLE_BINARY));
        }
      }
    }
  }
}","public SrlFactorGraph(SrlFactorGraphPrm prm,int n,Set<Integer> knownPreds,List<String> roleStateNames){
  super();
  this.prm=prm;
  this.n=n;
  roleVars=new RoleVar[n][n];
  if (prm.roleStructure == RoleStructure.PREDS_GIVEN) {
    for (    int i : knownPreds) {
      for (int j=0; j < n; j++) {
        if (i == j && !prm.allowPredArgSelfLoops) {
          continue;
        }
        roleVars[i][j]=createRoleVar(i,j,knownPreds,roleStateNames);
      }
    }
  }
 else   if (prm.roleStructure == RoleStructure.ALL_PAIRS) {
    for (int i=0; i < n; i++) {
      for (int j=0; j < n; j++) {
        if (i == j && !prm.allowPredArgSelfLoops) {
          continue;
        }
        roleVars[i][j]=createRoleVar(i,j,knownPreds,roleStateNames);
      }
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + prm.roleStructure);
  }
  if (prm.useProjDepTreeFactor && prm.linkVarType != VarType.OBSERVED) {
    log.trace(""String_Node_Str"");
    ProjDepTreeFactor treeFactor=new ProjDepTreeFactor(n,prm.linkVarType);
    rootVars=treeFactor.getRootVars();
    childVars=treeFactor.getChildVars();
    addFactor(treeFactor);
  }
 else   if (prm.linkVarType == VarType.OBSERVED || prm.alwaysIncludeLinkVars) {
    log.trace(""String_Node_Str"");
    rootVars=new LinkVar[n];
    childVars=new LinkVar[n][n];
    for (int i=-1; i < n; i++) {
      for (int j=0; j < n; j++) {
        if (prm.linkVarType == VarType.OBSERVED && (i == -1 || roleVars[i][j] == null)) {
          continue;
        }
        if (i != j) {
          if (i == -1) {
            rootVars[j]=createLinkVar(i,j);
          }
 else {
            childVars[i][j]=createLinkVar(i,j);
          }
        }
      }
    }
  }
 else {
    rootVars=new LinkVar[n];
    childVars=new LinkVar[n][n];
    log.trace(""String_Node_Str"");
    prm.unaryFactors=true;
  }
  for (int i=-1; i < n; i++) {
    for (int j=0; j < n; j++) {
      if (i == -1) {
        if (prm.unaryFactors && prm.linkVarType != VarType.OBSERVED && rootVars[j] != null) {
          addFactor(new SrlFactor(new VarSet(rootVars[j]),SrlFactorTemplate.LINK_UNARY));
        }
      }
 else {
        if (prm.unaryFactors && roleVars[i][j] != null) {
          addFactor(new SrlFactor(new VarSet(roleVars[i][j]),SrlFactorTemplate.ROLE_UNARY));
        }
        if (prm.unaryFactors && prm.linkVarType != VarType.OBSERVED && childVars[i][j] != null) {
          addFactor(new SrlFactor(new VarSet(childVars[i][j]),SrlFactorTemplate.LINK_UNARY));
        }
        if (roleVars[i][j] != null && childVars[i][j] != null) {
          addFactor(new SrlFactor(new VarSet(roleVars[i][j],childVars[i][j]),SrlFactorTemplate.LINK_ROLE_BINARY));
        }
      }
    }
  }
}",0.98945420906568
131565,"public void addZhaoPairFeatures(int pidx,int aidx,BinaryStrFVBuilder feats){
  System.out.println(""String_Node_Str"");
  ZhaoObject zhaoPred=new ZhaoObject(pidx,parents,sent,prm,""String_Node_Str"");
  ZhaoObject zhaoArg=new ZhaoObject(aidx,parents,sent,prm,""String_Node_Str"");
  ZhaoObject zhaoPredArgPair=new ZhaoObject(pidx,aidx,zhaoPred,zhaoArg,parents);
  ZhaoObject zhaoPredLast;
  ZhaoObject zhaoPredNext;
  ZhaoObject zhaoPredParent;
  ZhaoObject zhaoArgLast;
  ZhaoObject zhaoArgNext;
  ZhaoObject zhaoArgParent;
  if (pidx - 1 > 0) {
    zhaoPredLast=new ZhaoObject(pidx - 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoPredLast=new ZhaoObject(""String_Node_Str"");
  }
  if (pidx + 1 < sent.size()) {
    zhaoPredNext=new ZhaoObject(pidx + 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoPredNext=new ZhaoObject(""String_Node_Str"");
  }
  if (zhaoPred.getParent() < 0) {
    zhaoPredParent=new ZhaoObject(""String_Node_Str"");
  }
 else {
    zhaoPredParent=new ZhaoObject(zhaoPred.getParent(),parents,sent,prm,""String_Node_Str"");
  }
  if (aidx - 1 > 0) {
    zhaoArgLast=new ZhaoObject(aidx - 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoArgLast=new ZhaoObject(""String_Node_Str"");
  }
  if (aidx + 1 < sent.size()) {
    zhaoArgNext=new ZhaoObject(aidx + 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoArgNext=new ZhaoObject(""String_Node_Str"");
  }
  if (zhaoArg.getParent() < 0) {
    zhaoArgParent=new ZhaoObject(""String_Node_Str"");
  }
 else {
    zhaoArgParent=new ZhaoObject(zhaoArg.getParent(),parents,sent,prm,""String_Node_Str"");
  }
  ArrayList<Integer> predChildren=zhaoPred.getChildren();
  ArrayList<Integer> argChildren=zhaoArg.getChildren();
  List<Pair<Integer,Dir>> betweenPath=zhaoPredArgPair.getBetweenPath();
  List<Pair<Integer,Dir>> dpPathPred=zhaoPredArgPair.getDpPathPred();
  List<Pair<Integer,Dir>> dpPathArg=zhaoPredArgPair.getDpPathArg();
  ArrayList<Integer> linePath=zhaoPredArgPair.getLinePath();
  ArrayList<CoNLL09Token> argChildrenTokens=getTokens(argChildren);
  ArrayList<CoNLL09Token> betweenPathTokens=getTokens(betweenPath);
  ArrayList<CoNLL09Token> linePathCoNLL=getTokens(linePath);
  if (prm.withSupervision) {
    addZhaoSupervisedPredFeats(zhaoPred,zhaoArg,zhaoPredLast,zhaoPredNext,feats);
    addZhaoSupervisedArgFeats(zhaoPred,zhaoArg,zhaoPredLast,zhaoPredNext,zhaoArgLast,zhaoArgNext,zhaoArgParent,argChildrenTokens,feats);
    addZhaoSupervisedCombinedFeats(zhaoPred,zhaoArg,feats,betweenPathTokens,linePathCoNLL,dpPathArg);
  }
  addZhaoUnsupervisedPredFeats(zhaoPred,zhaoPredLast,zhaoPredNext,feats);
  addZhaoUnsupervisedArgFeats(zhaoArg,zhaoArgLast,zhaoArgNext,argChildrenTokens,feats);
  addZhaoUnsupervisedCombinedFeats(linePath,linePathCoNLL,feats);
}","public void addZhaoPairFeatures(int pidx,int aidx,BinaryStrFVBuilder feats){
  ZhaoObject zhaoPred=new ZhaoObject(pidx,parents,sent,prm,""String_Node_Str"");
  ZhaoObject zhaoArg=new ZhaoObject(aidx,parents,sent,prm,""String_Node_Str"");
  ZhaoObject zhaoPredArgPair=new ZhaoObject(pidx,aidx,zhaoPred,zhaoArg,parents);
  ZhaoObject zhaoPredLast;
  ZhaoObject zhaoPredNext;
  ZhaoObject zhaoPredParent;
  ZhaoObject zhaoArgLast;
  ZhaoObject zhaoArgNext;
  ZhaoObject zhaoArgParent;
  if (pidx - 1 > 0) {
    zhaoPredLast=new ZhaoObject(pidx - 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoPredLast=new ZhaoObject(""String_Node_Str"");
  }
  if (pidx + 1 < sent.size()) {
    zhaoPredNext=new ZhaoObject(pidx + 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoPredNext=new ZhaoObject(""String_Node_Str"");
  }
  if (zhaoPred.getParent() < 0) {
    zhaoPredParent=new ZhaoObject(""String_Node_Str"");
  }
 else {
    zhaoPredParent=new ZhaoObject(zhaoPred.getParent(),parents,sent,prm,""String_Node_Str"");
  }
  if (aidx - 1 > 0) {
    zhaoArgLast=new ZhaoObject(aidx - 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoArgLast=new ZhaoObject(""String_Node_Str"");
  }
  if (aidx + 1 < sent.size()) {
    zhaoArgNext=new ZhaoObject(aidx + 1,parents,sent,prm,""String_Node_Str"");
  }
 else {
    zhaoArgNext=new ZhaoObject(""String_Node_Str"");
  }
  if (zhaoArg.getParent() < 0) {
    zhaoArgParent=new ZhaoObject(""String_Node_Str"");
  }
 else {
    zhaoArgParent=new ZhaoObject(zhaoArg.getParent(),parents,sent,prm,""String_Node_Str"");
  }
  ArrayList<Integer> predChildren=zhaoPred.getChildren();
  ArrayList<Integer> argChildren=zhaoArg.getChildren();
  List<Pair<Integer,Dir>> betweenPath=zhaoPredArgPair.getBetweenPath();
  List<Pair<Integer,Dir>> dpPathPred=zhaoPredArgPair.getDpPathPred();
  List<Pair<Integer,Dir>> dpPathArg=zhaoPredArgPair.getDpPathArg();
  ArrayList<Integer> linePath=zhaoPredArgPair.getLinePath();
  ArrayList<CoNLL09Token> argChildrenTokens=getTokens(argChildren);
  ArrayList<CoNLL09Token> betweenPathTokens=getTokens(betweenPath);
  ArrayList<CoNLL09Token> linePathCoNLL=getTokens(linePath);
  if (prm.withSupervision) {
    addZhaoSupervisedPredFeats(zhaoPred,zhaoArg,zhaoPredLast,zhaoPredNext,feats);
    addZhaoSupervisedArgFeats(zhaoPred,zhaoArg,zhaoPredLast,zhaoPredNext,zhaoArgLast,zhaoArgNext,zhaoArgParent,argChildrenTokens,feats);
    addZhaoSupervisedCombinedFeats(zhaoPred,zhaoArg,feats,betweenPathTokens,linePathCoNLL,dpPathArg);
  }
  addZhaoUnsupervisedPredFeats(zhaoPred,zhaoPredLast,zhaoPredNext,feats);
  addZhaoUnsupervisedArgFeats(zhaoArg,zhaoArgLast,zhaoArgNext,argChildrenTokens,feats);
  addZhaoUnsupervisedCombinedFeats(linePath,linePathCoNLL,feats);
}",0.992516882642818
131566,"private void addZhaoSupervisedCombinedFeats(ZhaoObject zhaoPred,ZhaoObject zhaoArg,BinaryStrFVBuilder feats,ArrayList<CoNLL09Token> betweenPathTokens,ArrayList<CoNLL09Token> linePathCoNLL,List<Pair<Integer,Dir>> dpPathArg){
  String feat;
  feat=zhaoArg.getLemma() + ""String_Node_Str"" + zhaoPred.getLemma();
  feats.add(feat);
  ArrayList<String> depRelPath=new ArrayList<String>();
  ArrayList<String> depRelPathLemma=new ArrayList<String>();
  for (  CoNLL09Token t : betweenPathTokens) {
    depRelPath.add(t.getDeprel());
    depRelPathLemma.add(t.getLemma());
  }
  feat=StringUtils.join(depRelPath,""String_Node_Str"") + ""String_Node_Str"" + zhaoPred.getFeat().get(0);
  feats.add(feat);
  feat=StringUtils.join(depRelPathLemma,""String_Node_Str"");
  feats.add(feat);
  feat=StringUtils.join(bag(depRelPathLemma),""String_Node_Str"");
  feats.add(feat);
  ArrayList<String> linePathFeat=new ArrayList<String>();
  ArrayList<String> linePathLemma=new ArrayList<String>();
  ArrayList<String> linePathDeprel=new ArrayList<String>();
  for (  CoNLL09Token t : linePathCoNLL) {
    List<String> tFeat1=t.getFeat();
    if (tFeat1 == null) {
      linePathFeat.add(NO_MORPH);
    }
 else {
      linePathFeat.add(t.getFeat().get(0));
    }
    linePathLemma.add(t.getLemma());
    linePathDeprel.add(t.getDeprel());
  }
  List<String> linePathFeatBag=bag(linePathFeat);
  feat=StringUtils.join(linePathFeatBag,""String_Node_Str"");
  feats.add(feat);
  feat=StringUtils.join(linePathLemma,""String_Node_Str"");
  feats.add(feat);
  feat=StringUtils.join(linePathDeprel,""String_Node_Str"");
  feats.add(feat);
  ArrayList<String> dpPathLemma=new ArrayList<String>();
  for (  Pair<Integer,Dir> dpP : dpPathArg) {
    dpPathLemma.add(sent.get(dpP.get1()).getLemma());
  }
  feat=StringUtils.join(dpPathLemma,""String_Node_Str"");
  feats.add(feat);
  feat=StringUtils.join(bag(dpPathLemma),""String_Node_Str"");
  feats.add(feat);
}","private void addZhaoSupervisedCombinedFeats(ZhaoObject zhaoPred,ZhaoObject zhaoArg,BinaryStrFVBuilder feats,ArrayList<CoNLL09Token> betweenPathTokens,ArrayList<CoNLL09Token> linePathCoNLL,List<Pair<Integer,Dir>> dpPathArg){
  String feat;
  feat=zhaoArg.getLemma() + ""String_Node_Str"" + zhaoPred.getLemma();
  feats.add(feat);
  ArrayList<String> depRelPath=new ArrayList<String>();
  ArrayList<String> depRelPathLemma=new ArrayList<String>();
  for (  CoNLL09Token t : betweenPathTokens) {
    if (t == null) {
      depRelPath.add(""String_Node_Str"");
      depRelPathLemma.add(""String_Node_Str"");
    }
 else {
      depRelPath.add(t.getDeprel());
      depRelPathLemma.add(t.getLemma());
    }
  }
  feat=StringUtils.join(depRelPath,""String_Node_Str"") + ""String_Node_Str"" + zhaoPred.getFeat().get(0);
  feats.add(feat);
  feat=StringUtils.join(depRelPathLemma,""String_Node_Str"");
  feats.add(feat);
  feat=StringUtils.join(bag(depRelPathLemma),""String_Node_Str"");
  feats.add(feat);
  ArrayList<String> linePathFeat=new ArrayList<String>();
  ArrayList<String> linePathLemma=new ArrayList<String>();
  ArrayList<String> linePathDeprel=new ArrayList<String>();
  for (  CoNLL09Token t : linePathCoNLL) {
    List<String> tFeat1=t.getFeat();
    if (tFeat1 == null) {
      linePathFeat.add(NO_MORPH);
    }
 else {
      linePathFeat.add(t.getFeat().get(0));
    }
    linePathLemma.add(t.getLemma());
    linePathDeprel.add(t.getDeprel());
  }
  List<String> linePathFeatBag=bag(linePathFeat);
  feat=StringUtils.join(linePathFeatBag,""String_Node_Str"");
  feats.add(feat);
  feat=StringUtils.join(linePathLemma,""String_Node_Str"");
  feats.add(feat);
  feat=StringUtils.join(linePathDeprel,""String_Node_Str"");
  feats.add(feat);
  ArrayList<String> dpPathLemma=new ArrayList<String>();
  for (  Pair<Integer,Dir> dpP : dpPathArg) {
    dpPathLemma.add(sent.get(dpP.get1()).getLemma());
  }
  feat=StringUtils.join(dpPathLemma,""String_Node_Str"");
  feats.add(feat);
  feat=StringUtils.join(bag(dpPathLemma),""String_Node_Str"");
  feats.add(feat);
}",0.9667003027245208
131567,"@Test public void testAddNaradowskyFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence();
  Alphabet<String> alphabet=new Alphabet<String>();
  SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
  prm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(prm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
  BinaryStrFVBuilder feats;
  BinaryStrFVBuilder allFeats=new BinaryStrFVBuilder(alphabet);
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      fe.addNaradowskyPairFeatures(i,j,allFeats);
    }
  }
  for (  String f : allFeats) {
    System.out.println(f);
  }
}","@Test public void testAddNaradowskyFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence1();
  Alphabet<String> alphabet=new Alphabet<String>();
  SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
  prm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(prm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
  BinaryStrFVBuilder allFeats=new BinaryStrFVBuilder(alphabet);
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      fe.addNaradowskyPairFeatures(i,j,allFeats);
    }
  }
  for (  String f : allFeats) {
    System.out.println(f);
  }
}",0.9787234042553192
131568,"@Test public void testAddZhaoFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence();
  Alphabet<String> alphabet=new Alphabet<String>();
  SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
  prm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(prm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
  BinaryStrFVBuilder feats;
  BinaryStrFVBuilder allFeats=new BinaryStrFVBuilder(alphabet);
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      fe.addZhaoPairFeatures(i,j,allFeats);
    }
  }
  for (  String f : allFeats) {
    System.out.println(f);
  }
}","@Test public void testAddZhaoFeatures(){
  CoNLL09Sentence sent=getSpanishConll09Sentence1();
  Alphabet<String> alphabet=new Alphabet<String>();
  SentFeatureExtractorPrm prm=new SentFeatureExtractorPrm();
  prm.useGoldSyntax=true;
  CorpusStatistics cs=new CorpusStatistics(prm);
  cs.init(Utilities.getList(sent));
  SentFeatureExtractor fe=new SentFeatureExtractor(prm,sent,cs,alphabet);
  BinaryStrFVBuilder feats;
  BinaryStrFVBuilder allFeats=new BinaryStrFVBuilder(alphabet);
  for (int i=0; i < sent.size(); i++) {
    for (int j=0; j < sent.size(); j++) {
      fe.addZhaoPairFeatures(i,j,allFeats);
    }
  }
  for (  String f : allFeats) {
    System.out.println(f);
  }
}",0.9992684711046086
131569,"private void setDpPathShare(int pidx,int aidx,ZhaoObject zhaoPred,ZhaoObject zhaoArg){
  List<Pair<Integer,Dir>> argRootPath=zhaoArg.getRootPath();
  List<Pair<Integer,Dir>> predRootPath=zhaoPred.getRootPath();
  int i=argRootPath.size() - 1;
  int j=predRootPath.size() - 1;
  Pair<Integer,DepTree.Dir> argP=argRootPath.get(i);
  Pair<Integer,DepTree.Dir> predP=predRootPath.get(j);
  while (argP.equals(predP) && i > -1 && j > -1) {
    this.dpPathShare.add(argP);
    argP=argRootPath.get(i);
    predP=predRootPath.get(j);
    i--;
    j--;
  }
  Collections.reverse(this.dpPathShare);
  int r=this.dpPathShare.get(0).get1();
  this.dpPathPred=DepTree.getDependencyPath(pidx,r,parents);
  this.dpPathArg=DepTree.getDependencyPath(aidx,r,parents);
}","private void setDpPathShare(int pidx,int aidx,ZhaoObject zhaoPred,ZhaoObject zhaoArg){
  List<Pair<Integer,Dir>> argRootPath=zhaoArg.getRootPath();
  List<Pair<Integer,Dir>> predRootPath=zhaoPred.getRootPath();
  int i=argRootPath.size() - 1;
  int j=predRootPath.size() - 1;
  Pair<Integer,DepTree.Dir> argP=argRootPath.get(i);
  Pair<Integer,DepTree.Dir> predP=predRootPath.get(j);
  while (argP.equals(predP) && i > -1 && j > -1) {
    this.dpPathShare.add(argP);
    argP=argRootPath.get(i);
    predP=predRootPath.get(j);
    i--;
    j--;
  }
  Collections.reverse(this.dpPathShare);
  int r;
  if (this.dpPathShare.isEmpty()) {
    r=-1;
    this.dpPathPred=new ArrayList<Pair<Integer,Dir>>();
    this.dpPathArg=new ArrayList<Pair<Integer,Dir>>();
  }
 else {
    r=this.dpPathShare.get(0).get1();
    this.dpPathPred=DepTree.getDependencyPath(pidx,r,parents);
    this.dpPathArg=DepTree.getDependencyPath(aidx,r,parents);
  }
}",0.8898104265402843
131570,"@Test public void testSetSrlGraph(){
  CoNLL09Sentence sent1=getSent();
  CoNLL09Sentence sent2=getEmptySent();
  assertFalse(sent1.equals(sent2));
  SrlGraph srlGraph=sent1.getSrlGraph();
  sent2.setColsFromSrlGraph(srlGraph);
  assertEquals(sent1,sent2);
}","@Test public void testSetSrlGraph(){
  CoNLL09Sentence sent1=getSent();
  CoNLL09Sentence sent2=getEmptySent();
  assertFalse(sent1.equals(sent2));
  SrlGraph srlGraph=sent1.getSrlGraph();
  sent2.setPredApredFromSrlGraph(srlGraph,true);
  assertEquals(sent1,sent2);
}",0.9657794676806084
131571,"public String normalizeRoleName(String input){
  String[] splitRole=dash.split(input);
  String role=splitRole[0].toLowerCase();
  return role;
}","public String normalizeRoleName(String role){
  if (prm.normalizeRoleNames) {
    String[] splitRole=dash.split(role);
    role=splitRole[0].toLowerCase();
  }
  return role;
}",0.8037383177570093
131572,"public CorpusStatistics(SentFeatureExtractorPrm prm){
  this.prm=prm;
  this.normalize=new Normalizer(prm.normalize);
}","public CorpusStatistics(SentFeatureExtractorPrm prm){
  this.prm=prm;
  this.normalize=new Normalizer(prm.normalizeWords);
}",0.9794238683127572
131573,"@Test public void testCreation() throws IOException {
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(2);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.biasOnly=true;
  CorpusStatistics cs=new CorpusStatistics(fePrm);
  cs.init(sents);
  System.out.println(expectedCsToString);
  System.out.println();
  System.out.println(cs);
  assertEquals(expectedCsToString,cs.toString());
}","@Test public void testCreation() throws IOException {
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(2);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.biasOnly=true;
  fePrm.normalizeRoleNames=true;
  CorpusStatistics cs=new CorpusStatistics(fePrm);
  cs.init(sents);
  System.out.println(expectedCsToString);
  System.out.println();
  System.out.println(cs);
  assertEquals(expectedCsToString,cs.toString());
}",0.971379011274935
131574,"@Test public void testRoleTrainAssignment() throws Exception {
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.biasOnly=true;
  CorpusStatistics cs=new CorpusStatistics(fePrm);
  cs.init(sents);
  CoNLL09Sentence sent=sents.get(0);
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fePrm=fePrm;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  SrlFgExampleBuilder builder=new SrlFgExampleBuilder(prm,alphabet,cs,obsAlphabet);
  FgExample ex=builder.getFGExample(sent);
  assertEquals(1,obsAlphabet.size());
  assertEquals(5 * 2 + 2 + 5,alphabet.size());
  VarConfig vc=ex.getGoldConfig();
  System.out.println(vc.toString().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Var v : vc.getVars()) {
    RoleVar role=(RoleVar)v;
    if (role.getParent() == 2 && role.getChild() == 0) {
      assertEquals(""String_Node_Str"",vc.getStateName(v));
    }
 else     if (role.getParent() == 2 && role.getChild() == 4) {
      assertEquals(""String_Node_Str"",vc.getStateName(v));
    }
 else {
      assertEquals(""String_Node_Str"",vc.getStateName(v));
    }
  }
  assertEquals(18,vc.size());
}","@Test public void testRoleTrainAssignment() throws Exception {
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  InputStream inputStream=this.getClass().getResourceAsStream(CoNLL09ReadWriteTest.conll2009Example);
  CoNLL09FileReader cr=new CoNLL09FileReader(inputStream);
  List<CoNLL09Sentence> sents=cr.readSents(1);
  SentFeatureExtractorPrm fePrm=new SentFeatureExtractorPrm();
  fePrm.biasOnly=true;
  fePrm.normalizeRoleNames=true;
  CorpusStatistics cs=new CorpusStatistics(fePrm);
  cs.init(sents);
  CoNLL09Sentence sent=sents.get(0);
  Alphabet<String> obsAlphabet=new Alphabet<String>();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fePrm=fePrm;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  SrlFgExampleBuilder builder=new SrlFgExampleBuilder(prm,alphabet,cs,obsAlphabet);
  FgExample ex=builder.getFGExample(sent);
  assertEquals(1,obsAlphabet.size());
  assertEquals(5 * 2 + 2 + 5,alphabet.size());
  VarConfig vc=ex.getGoldConfig();
  System.out.println(vc.toString().replace(""String_Node_Str"",""String_Node_Str""));
  for (  Var v : vc.getVars()) {
    RoleVar role=(RoleVar)v;
    if (role.getParent() == 2 && role.getChild() == 0) {
      assertEquals(""String_Node_Str"",vc.getStateName(v));
    }
 else     if (role.getParent() == 2 && role.getChild() == 4) {
      assertEquals(""String_Node_Str"",vc.getStateName(v));
    }
 else {
      assertEquals(""String_Node_Str"",vc.getStateName(v));
    }
  }
  assertEquals(18,vc.size());
}",0.9887410440122824
131575,"private static SrlFgExampleBuilderPrm getSrlFgExampleBuilderPrm(){
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.linkVarType=linkVarType;
  prm.fgPrm.makeUnknownPredRolesLatent=makeUnknownPredRolesLatent;
  prm.fgPrm.roleStructure=roleStructure;
  prm.fgPrm.useProjDepTreeFactor=useProjDepTreeFactor;
  prm.fgPrm.allowPredArgSelfLoops=allowPredArgSelfLoops;
  prm.fePrm.cutoff=cutoff;
  prm.fePrm.language=language;
  prm.fePrm.useGoldPos=useGoldPos;
  prm.fePrm.biasOnly=biasOnly;
  return prm;
}","private static SrlFgExampleBuilderPrm getSrlFgExampleBuilderPrm(){
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.linkVarType=linkVarType;
  prm.fgPrm.makeUnknownPredRolesLatent=makeUnknownPredRolesLatent;
  prm.fgPrm.roleStructure=roleStructure;
  prm.fgPrm.useProjDepTreeFactor=useProjDepTreeFactor;
  prm.fgPrm.allowPredArgSelfLoops=allowPredArgSelfLoops;
  prm.fePrm.cutoff=cutoff;
  prm.fePrm.biasOnly=biasOnly;
  prm.fePrm.language=language;
  prm.fePrm.useGoldPos=useGoldPos;
  prm.fePrm.normalizeWords=normalizeWords;
  prm.fePrm.normalizeRoleNames=normalizeRoleNames;
  return prm;
}",0.8875219683655536
131576,"private List<VarConfig> decode(FgModel model,FgExamples data,DatasetType dataType,File predOut,String name) throws IOException {
  log.info(""String_Node_Str"" + name + ""String_Node_Str"");
  MbrDecoder decoder=getDecoder();
  decoder.decode(model,data);
  List<VarConfig> predictions=decoder.getMbrVarConfigList();
  if (predOut != null) {
    log.info(""String_Node_Str"" + name + ""String_Node_Str""+ dataType+ ""String_Node_Str""+ predOut);
    if (dataType == DatasetType.CONLL_2009) {
      @SuppressWarnings(""String_Node_Str"") List<CoNLL09Sentence> sents=(List<CoNLL09Sentence>)data.getSourceSentences();
      for (int i=0; i < sents.size(); i++) {
        VarConfig vc=predictions.get(i);
        CoNLL09Sentence sent=sents.get(i);
        SrlGraph srlGraph=new SrlGraph(sent.size());
        for (        Var v : vc.getVars()) {
          if (v instanceof RoleVar && v.getType() != VarType.LATENT) {
            RoleVar role=(RoleVar)v;
            SrlPred pred=srlGraph.getPredAt(role.getParent());
            if (pred == null) {
              String sense=""String_Node_Str"";
              pred=new SrlPred(role.getParent(),sense);
            }
            SrlArg arg=srlGraph.getArgAt(role.getChild());
            if (arg == null) {
              arg=new SrlArg(role.getChild());
            }
            SrlEdge edge=new SrlEdge(pred,arg,vc.getStateName(role));
            srlGraph.addEdge(edge);
          }
        }
        sent.setColsFromSrlGraph(srlGraph);
      }
      CoNLL09Writer cw=new CoNLL09Writer(predOut);
      for (      CoNLL09Sentence sent : sents) {
        cw.write(sent);
      }
      cw.close();
    }
 else {
      ErmaWriter ew=new ErmaWriter();
      ew.writePredictions(predOut,predictions,decoder.getVarMargMap());
    }
  }
  return predictions;
}","private List<VarConfig> decode(FgModel model,FgExamples data,DatasetType dataType,File predOut,String name) throws IOException {
  log.info(""String_Node_Str"" + name + ""String_Node_Str"");
  MbrDecoder decoder=getDecoder();
  decoder.decode(model,data);
  List<VarConfig> predictions=decoder.getMbrVarConfigList();
  if (predOut != null) {
    log.info(""String_Node_Str"" + name + ""String_Node_Str""+ dataType+ ""String_Node_Str""+ predOut);
    if (dataType == DatasetType.CONLL_2009) {
      @SuppressWarnings(""String_Node_Str"") List<CoNLL09Sentence> sents=(List<CoNLL09Sentence>)data.getSourceSentences();
      for (int i=0; i < sents.size(); i++) {
        VarConfig vc=predictions.get(i);
        CoNLL09Sentence sent=sents.get(i);
        SrlGraph srlGraph=SrlDecoder.getSrlGraphFromVarConfig(vc,sent);
        sent.setPredApredFromSrlGraph(srlGraph,false);
      }
      CoNLL09Writer cw=new CoNLL09Writer(predOut);
      for (      CoNLL09Sentence sent : sents) {
        cw.write(sent);
      }
      cw.close();
    }
 else {
      ErmaWriter ew=new ErmaWriter();
      ew.writePredictions(predOut,predictions,decoder.getVarMargMap());
    }
  }
  return predictions;
}",0.7342114150624789
131577,"/** 
 * Sends the message that is currently ""pending"" for this edge. This just copies the message in the ""pending slot"" to the ""message slot"" for this edge.
 * @param edge The edge over which the message should be sent.
 */
private void sendMessage(FgEdge edge){
  int edgeId=edge.getId();
  Messages ec=msgs[edgeId];
  DenseFactor oldMessage=ec.message;
  ec.message=ec.newMessage;
  ec.newMessage=oldMessage;
}","/** 
 * Sends the message that is currently ""pending"" for this edge. This just copies the message in the ""pending slot"" to the ""message slot"" for this edge.
 * @param edge The edge over which the message should be sent.
 */
private void sendMessage(FgEdge edge){
  int edgeId=edge.getId();
  Messages ec=msgs[edgeId];
  DenseFactor oldMessage=ec.message;
  ec.message=ec.newMessage;
  ec.newMessage=oldMessage;
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + ec.message);
  }
}",0.9104972375690608
131578,"/** 
 * Gets the partition function for the connected component containing the given node.
 */
private double getPartitionFunctionAtVarNode(FgNode node){
  if (!node.isVar()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Var var=node.getVar();
  DenseFactor prod=new DenseFactor(new VarSet(var),prm.logDomain ? 0.0 : 1.0);
  getProductOfMessages(node,prod,null);
  if (prm.logDomain) {
    return prod.getLogSum();
  }
 else {
    return prod.getSum();
  }
}","/** 
 * Gets the partition function for the connected component containing the given node. Package private FOR TESTING ONLY.
 */
double getPartitionFunctionAtVarNode(FgNode node){
  if (!node.isVar()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Var var=node.getVar();
  DenseFactor prod=new DenseFactor(new VarSet(var),prm.logDomain ? 0.0 : 1.0);
  getProductOfMessages(node,prod,null);
  if (prm.logDomain) {
    return prod.getLogSum();
  }
 else {
    return prod.getSum();
  }
}",0.9573170731707316
131579,"/** 
 * @inheritDoc 
 */
@Override public void run(){
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < msgs.length; i++) {
    msgs[i]=new Messages(fg.getEdge(i),prm);
  }
  for (int iter=0; iter < prm.maxIterations; iter++) {
    if (timer.totSec() > prm.timeoutSeconds) {
      break;
    }
    if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
      for (      FgEdge edge : order) {
        createMessage(edge,iter);
        sendMessage(edge);
      }
    }
 else     if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
      for (      FgEdge edge : fg.getEdges()) {
        createMessage(edge,iter);
      }
      for (      FgEdge edge : fg.getEdges()) {
        sendMessage(edge);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
    }
  }
  timer.stop();
}","/** 
 * @inheritDoc 
 */
@Override public void run(){
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < msgs.length; i++) {
    msgs[i]=new Messages(fg.getEdge(i),prm);
  }
  for (  Factor factor : fg.getFactors()) {
    if (factor instanceof GlobalFactor) {
      ((GlobalFactor)factor).reset();
    }
  }
  for (int iter=0; iter < prm.maxIterations; iter++) {
    if (timer.totSec() > prm.timeoutSeconds) {
      break;
    }
    if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
      for (      FgEdge edge : order) {
        createMessage(edge,iter);
        sendMessage(edge);
      }
    }
 else     if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
      for (      FgEdge edge : fg.getEdges()) {
        createMessage(edge,iter);
      }
      for (      FgEdge edge : fg.getEdges()) {
        sendMessage(edge);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
    }
  }
  timer.stop();
}",0.9246344206974128
131580,"/** 
 * Creates a message and stores it in the ""pending message"" slot for this edge.
 * @param edge The directed edge for which the message should be created.
 * @param iter The iteration number.
 */
private void createMessage(FgEdge edge,int iter){
  int edgeId=edge.getId();
  Var var=edge.getVar();
  Factor factor=edge.getFactor();
  if (!edge.isVarToFactor() && factor instanceof GlobalFactor) {
    GlobalFactor globalFac=(GlobalFactor)factor;
    globalFac.createMessages(edge.getParent(),msgs,prm.logDomain,iter);
    return;
  }
  DenseFactor msg=msgs[edgeId].newMessage;
  msg.set(prm.logDomain ? 0.0 : 1.0);
  if (edge.isVarToFactor()) {
    getProductOfMessages(edge.getParent(),msg,edge.getChild());
  }
 else {
    DenseFactor prod=new DenseFactor(factor.getVars());
    prod.set((DenseFactor)factor);
    getProductOfMessages(edge.getParent(),prod,edge.getChild());
    if (prm.logDomain) {
      msg=prod.getLogMarginal(new VarSet(var),false);
    }
 else {
      msg=prod.getMarginal(new VarSet(var),false);
    }
  }
  assert(msg.getVars().equals(new VarSet(var)));
  if (prm.normalizeMessages) {
    if (prm.logDomain) {
      msg.logNormalize();
    }
 else {
      msg.normalize();
    }
  }
  msgs[edgeId].newMessage=msg;
}","/** 
 * Creates a message and stores it in the ""pending message"" slot for this edge.
 * @param edge The directed edge for which the message should be created.
 * @param iter The iteration number.
 */
private void createMessage(FgEdge edge,int iter){
  int edgeId=edge.getId();
  Var var=edge.getVar();
  Factor factor=edge.getFactor();
  if (!edge.isVarToFactor() && factor instanceof GlobalFactor) {
    log.trace(""String_Node_Str"");
    GlobalFactor globalFac=(GlobalFactor)factor;
    globalFac.createMessages(edge.getParent(),msgs,prm.logDomain,iter);
    return;
  }
  DenseFactor msg=msgs[edgeId].newMessage;
  msg.set(prm.logDomain ? 0.0 : 1.0);
  if (edge.isVarToFactor()) {
    getProductOfMessages(edge.getParent(),msg,edge.getChild());
  }
 else {
    DenseFactor prod=new DenseFactor(factor.getVars());
    prod.set((DenseFactor)factor);
    getProductOfMessages(edge.getParent(),prod,edge.getChild());
    if (prm.logDomain) {
      msg=prod.getLogMarginal(new VarSet(var),false);
    }
 else {
      msg=prod.getMarginal(new VarSet(var),false);
    }
  }
  assert(msg.getVars().equals(new VarSet(var)));
  if (prm.normalizeMessages) {
    if (prm.logDomain) {
      msg.logNormalize();
    }
 else {
      msg.normalize();
    }
  }
  msgs[edgeId].newMessage=msg;
}",0.9865293185419968
131581,"public FgInferencerFactory getInfFactory(boolean logDomain){
  BeliefPropagationPrm bpPrm=new BeliefPropagationPrm();
  bpPrm.logDomain=logDomain;
  bpPrm.schedule=BpScheduleType.TREE_LIKE;
  bpPrm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  bpPrm.normalizeMessages=false;
  return bpPrm;
}","public FgInferencerFactory getInfFactory(boolean logDomain){
  BeliefPropagationPrm bpPrm=new BeliefPropagationPrm();
  bpPrm.logDomain=logDomain;
  bpPrm.schedule=BpScheduleType.TREE_LIKE;
  bpPrm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  bpPrm.normalizeMessages=false;
  bpPrm.maxIterations=1;
  return bpPrm;
}",0.9581239530988276
131582,"public void testSrlLogLikelihood() throws Exception {
  List<CoNLL09Token> tokens=new ArrayList<CoNLL09Token>();
  tokens.add(new CoNLL09Token(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",getList(""String_Node_Str"")));
  tokens.add(new CoNLL09Token(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",getList(""String_Node_Str"")));
  tokens.add(new CoNLL09Token(3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",getList(""String_Node_Str"")));
  CoNLL09Sentence sent=new CoNLL09Sentence(tokens);
  List<CoNLL09Sentence> sents=getList(sent);
  System.out.println(""String_Node_Str"");
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.useProjDepTreeFactor=true;
  prm.fePrm.biasOnly=true;
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet);
  FgExamples data=builder.getData(sents);
  System.out.println(""String_Node_Str"" + alphabet.size());
  FgModel model=new FgModel(alphabet);
  CrfObjective obj=new CrfObjective(model.getNumParams(),data,getInfFactory(true));
  double ll=obj.getValue(model.getParams());
  assertEquals(0.0,ll,1e-13);
}","@Test public void testSrlLogLikelihood() throws Exception {
  List<CoNLL09Token> tokens=new ArrayList<CoNLL09Token>();
  tokens.add(new CoNLL09Token(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",getList(""String_Node_Str"")));
  tokens.add(new CoNLL09Token(3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),0,0,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",getList(""String_Node_Str"")));
  CoNLL09Sentence sent=new CoNLL09Sentence(tokens);
  List<CoNLL09Sentence> sents=getList(sent);
  System.out.println(""String_Node_Str"");
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.makeUnknownPredRolesLatent=false;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.useProjDepTreeFactor=true;
  prm.fePrm.biasOnly=true;
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet);
  FgExamples data=builder.getData(sents);
  System.out.println(""String_Node_Str"" + alphabet.size());
  FgModel model=new FgModel(alphabet);
  boolean logDomain=false;
  FgInferencerFactory infFactory=getInfFactory(logDomain);
  FgExample ex=data.get(0);
  FgInferencer infLat=infFactory.getInferencer(ex.getFgLat());
  FactorGraph fgLat=ex.updateFgLat(model.getParams(),infLat.isLogDomain());
  infLat.run();
  assertEquals(2,infLat.getPartition(),2);
  for (  Var v : fgLat.getVars()) {
    double partition=((BeliefPropagation)infLat).getPartitionFunctionAtVarNode(fgLat.getNode(v));
    assertEquals(2,logDomain ? Utilities.exp(partition) : partition,1e-3);
  }
  System.out.println(""String_Node_Str"");
  FgInferencer infLatPred=infFactory.getInferencer(ex.getFgLatPred());
  FactorGraph fgLatPred=ex.updateFgLatPred(model.getParams(),infLatPred.isLogDomain());
  infLatPred.run();
  assertEquals(4,infLatPred.getPartition(),2);
  BfsBpSchedule schedule=new BfsBpSchedule(fgLatPred);
  System.out.println();
  for (  FgEdge edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (  Factor f : fgLatPred.getFactors()) {
    System.out.println(f);
  }
  for (  Var v : fgLatPred.getVars()) {
    double partition=((BeliefPropagation)infLatPred).getPartitionFunctionAtVarNode(fgLatPred.getNode(v));
    System.out.format(""String_Node_Str"",v.toString(),partition);
    assertEquals(4,logDomain ? Utilities.exp(partition) : partition,1e-3);
  }
  CrfObjective obj=new CrfObjective(model.getNumParams(),data,infFactory);
  double ll=obj.getValue(model.getParams());
  assertEquals(0.5,Utilities.exp(ll),1e-13);
}",0.4942914707857622
131583,"/** 
 * Constructor.
 * @param n The length of the sentence.
 */
public ProjDepTreeFactor(int n,VarType type){
  this.vars=createVarSet(n,type);
  this.n=n;
  rootVars=new LinkVar[n];
  childVars=new LinkVar[n][n];
  VarSet vars=this.getVars();
  for (  Var var : vars) {
    LinkVar link=(LinkVar)var;
    if (link.getParent() == -1) {
      rootVars[link.getChild()]=link;
    }
 else {
      childVars[link.getParent()][link.getChild()]=link;
    }
  }
}","/** 
 * Constructor.
 * @param n The length of the sentence.
 */
public ProjDepTreeFactor(int n,VarType type){
  super();
  this.vars=createVarSet(n,type);
  this.n=n;
  rootVars=new LinkVar[n];
  childVars=new LinkVar[n][n];
  VarSet vars=this.getVars();
  for (  Var var : vars) {
    LinkVar link=(LinkVar)var;
    if (link.getParent() == -1) {
      rootVars[link.getChild()]=link;
    }
 else {
      childVars[link.getParent()][link.getChild()]=link;
    }
  }
}",0.988108108108108
131584,"private void createMessages(FgNode parent,Messages[] msgs,boolean logDomain){
  assert(this == parent.getFactor());
  double[] root=new double[n];
  double[][] child=new double[n][n];
  Utilities.fill(root,Double.NEGATIVE_INFINITY);
  Utilities.fill(child,Double.NEGATIVE_INFINITY);
  for (  FgEdge inEdge : parent.getInEdges()) {
    LinkVar link=(LinkVar)inEdge.getVar();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    double oddsRatio;
    if (logDomain) {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) - inMsg.getValue(LinkVar.FALSE);
    }
 else {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) / inMsg.getValue(LinkVar.FALSE);
      oddsRatio=Utilities.log(oddsRatio);
    }
    if (link.getParent() == -1) {
      root[link.getChild()]=oddsRatio;
    }
 else {
      child[link.getParent()][link.getChild()]=oddsRatio;
    }
  }
  DepIoChart chart=ProjectiveDependencyParser.insideOutsideAlgorithm(root,child);
  double pi=logDomain ? 0.0 : 1.0;
  for (  FgEdge inEdge : parent.getInEdges()) {
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      pi+=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      pi*=inMsg.getValue(LinkVar.FALSE);
    }
  }
  double partition=logDomain ? pi + chart.getLogPartitionFunction() : pi * Utilities.exp(chart.getLogPartitionFunction());
  if (log.isTraceEnabled()) {
    log.trace(String.format(""String_Node_Str"",partition));
  }
  for (  FgEdge outEdge : parent.getOutEdges()) {
    LinkVar link=(LinkVar)outEdge.getVar();
    double beliefTrue;
    double beliefFalse;
    if (logDomain) {
      beliefTrue=pi + chart.getLogSumOfPotentials(link.getParent(),link.getChild());
      beliefFalse=Utilities.logSubtract(partition,beliefTrue);
    }
 else {
      beliefTrue=pi * Utilities.exp(chart.getLogSumOfPotentials(link.getParent(),link.getChild()));
      beliefFalse=partition - beliefTrue;
    }
    if (log.isTraceEnabled()) {
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefTrue));
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefFalse));
    }
    FgEdge inEdge=outEdge.getOpposing();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      beliefTrue-=inMsg.getValue(LinkVar.TRUE);
      beliefFalse-=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      beliefTrue/=inMsg.getValue(LinkVar.TRUE);
      beliefFalse/=inMsg.getValue(LinkVar.FALSE);
    }
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.FALSE,beliefFalse);
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.TRUE,beliefTrue);
  }
}","@Override protected void createMessages(FgNode parent,Messages[] msgs,boolean logDomain){
  assert(this == parent.getFactor());
  double[] root=new double[n];
  double[][] child=new double[n][n];
  Utilities.fill(root,Double.NEGATIVE_INFINITY);
  Utilities.fill(child,Double.NEGATIVE_INFINITY);
  for (  FgEdge inEdge : parent.getInEdges()) {
    LinkVar link=(LinkVar)inEdge.getVar();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    double oddsRatio;
    if (logDomain) {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) - inMsg.getValue(LinkVar.FALSE);
    }
 else {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) / inMsg.getValue(LinkVar.FALSE);
      oddsRatio=Utilities.log(oddsRatio);
    }
    if (link.getParent() == -1) {
      root[link.getChild()]=oddsRatio;
    }
 else {
      child[link.getParent()][link.getChild()]=oddsRatio;
    }
  }
  DepIoChart chart=ProjectiveDependencyParser.insideOutsideAlgorithm(root,child);
  double pi=logDomain ? 0.0 : 1.0;
  for (  FgEdge inEdge : parent.getInEdges()) {
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      pi+=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      pi*=inMsg.getValue(LinkVar.FALSE);
    }
  }
  double partition=logDomain ? pi + chart.getLogPartitionFunction() : pi * Utilities.exp(chart.getLogPartitionFunction());
  if (log.isTraceEnabled()) {
    log.trace(String.format(""String_Node_Str"",partition));
  }
  for (  FgEdge outEdge : parent.getOutEdges()) {
    LinkVar link=(LinkVar)outEdge.getVar();
    double beliefTrue;
    double beliefFalse;
    if (logDomain) {
      beliefTrue=pi + chart.getLogSumOfPotentials(link.getParent(),link.getChild());
      beliefFalse=Utilities.logSubtract(partition,beliefTrue);
    }
 else {
      beliefTrue=pi * Utilities.exp(chart.getLogSumOfPotentials(link.getParent(),link.getChild()));
      beliefFalse=partition - beliefTrue;
    }
    if (log.isTraceEnabled()) {
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefTrue));
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefFalse));
    }
    FgEdge inEdge=outEdge.getOpposing();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      beliefTrue-=inMsg.getValue(LinkVar.TRUE);
      beliefFalse-=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      beliefTrue/=inMsg.getValue(LinkVar.TRUE);
      beliefFalse/=inMsg.getValue(LinkVar.FALSE);
    }
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.FALSE,beliefFalse);
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.TRUE,beliefTrue);
  }
}",0.9957528957528956
131585,"private FgExamples getData(Alphabet<Feature> alphabet,DatasetType dataType,File dataFile,String name) throws ParseException, IOException {
  FgExamples data;
  if (dataType != DatasetType.ERMA) {
    ErmaReader er=new ErmaReader(true);
    data=er.read(featureFileIn,dataFile,alphabet);
  }
 else {
    throw new ParseException(""String_Node_Str"" + dataType);
  }
  log.info(String.format(""String_Node_Str"",name,data.size()));
  log.info(String.format(""String_Node_Str"",name,data.getNumFactors()));
  log.info(String.format(""String_Node_Str"",name,data.getNumVars()));
  log.info(String.format(""String_Node_Str"",data.getAlphabet().size()));
  return data;
}","private FgExamples getData(Alphabet<Feature> alphabet,DatasetType dataType,File dataFile,String name) throws ParseException, IOException {
  FgExamples data;
  if (dataType == DatasetType.ERMA) {
    ErmaReader er=new ErmaReader(true);
    data=er.read(featureFileIn,dataFile,alphabet);
  }
 else {
    throw new ParseException(""String_Node_Str"" + dataType);
  }
  log.info(String.format(""String_Node_Str"",name,data.size()));
  log.info(String.format(""String_Node_Str"",name,data.getNumFactors()));
  log.info(String.format(""String_Node_Str"",name,data.getNumVars()));
  log.info(String.format(""String_Node_Str"",data.getAlphabet().size()));
  return data;
}",0.998473282442748
131586,"/** 
 * Creates a message and stores it in the ""pending message"" slot for this edge.
 * @param edge The directed edge for which the message should be created.
 * @param iter The iteration number.
 */
private void createMessage(FgEdge edge,int iter){
  int edgeId=edge.getId();
  Var var=edge.getVar();
  Factor factor=edge.getFactor();
  DenseFactor msg=msgs[edgeId].newMessage;
  msg.set(prm.logDomain ? 0.0 : 1.0);
  if (edge.isVarToFactor()) {
    getProductOfMessages(edge.getParent(),msg,edge.getChild());
  }
 else {
    if (factor instanceof GlobalFactor) {
      GlobalFactor globalFac=(GlobalFactor)factor;
      globalFac.createMessages(edge.getParent(),msgs,prm.logDomain,iter);
    }
 else {
      DenseFactor prod=new DenseFactor(factor.getVars());
      prod.set((DenseFactor)factor);
      getProductOfMessages(edge.getParent(),prod,edge.getChild());
      if (prm.logDomain) {
        msg=prod.getLogMarginal(new VarSet(var),false);
      }
 else {
        msg=prod.getMarginal(new VarSet(var),false);
      }
    }
  }
  assert(msg.getVars().equals(new VarSet(var)));
  if (prm.normalizeMessages) {
    if (prm.logDomain) {
      msg.logNormalize();
    }
 else {
      msg.normalize();
    }
  }
  msgs[edgeId].newMessage=msg;
}","/** 
 * Creates a message and stores it in the ""pending message"" slot for this edge.
 * @param edge The directed edge for which the message should be created.
 * @param iter The iteration number.
 */
private void createMessage(FgEdge edge,int iter){
  int edgeId=edge.getId();
  Var var=edge.getVar();
  Factor factor=edge.getFactor();
  if (!edge.isVarToFactor() && factor instanceof GlobalFactor) {
    GlobalFactor globalFac=(GlobalFactor)factor;
    globalFac.createMessages(edge.getParent(),msgs,prm.logDomain,iter);
    return;
  }
  DenseFactor msg=msgs[edgeId].newMessage;
  msg.set(prm.logDomain ? 0.0 : 1.0);
  if (edge.isVarToFactor()) {
    getProductOfMessages(edge.getParent(),msg,edge.getChild());
  }
 else {
    DenseFactor prod=new DenseFactor(factor.getVars());
    prod.set((DenseFactor)factor);
    getProductOfMessages(edge.getParent(),prod,edge.getChild());
    if (prm.logDomain) {
      msg=prod.getLogMarginal(new VarSet(var),false);
    }
 else {
      msg=prod.getMarginal(new VarSet(var),false);
    }
  }
  assert(msg.getVars().equals(new VarSet(var)));
  if (prm.normalizeMessages) {
    if (prm.logDomain) {
      msg.logNormalize();
    }
 else {
      msg.normalize();
    }
  }
  msgs[edgeId].newMessage=msg;
}",0.7780008028904054
131587,"/** 
 * Gets the product of all the factors in the factor graph. If working in the log-domain, this will do factor addition.
 * @param logDomain Whether to work in the log-domain.
 * @return The product of all the factors.
 */
private static DenseFactor getProductOfAllFactors(FactorGraph fg,boolean logDomain){
  DenseFactor joint=new DenseFactor(new VarSet(),logDomain ? 0.0 : 1.0);
  for (int a=0; a < fg.getNumFactors(); a++) {
    if (fg.getFactor(a) instanceof GlobalFactor) {
      throw new RuntimeException(""String_Node_Str"");
    }
    DenseFactor factor=(DenseFactor)fg.getFactor(a);
    if (logDomain) {
      joint.add(factor);
    }
 else {
      joint.prod(factor);
    }
  }
  return joint;
}","/** 
 * Gets the product of all the factors in the factor graph. If working in the log-domain, this will do factor addition.
 * @param logDomain Whether to work in the log-domain.
 * @return The product of all the factors.
 */
private static DenseFactor getProductOfAllFactors(FactorGraph fg,boolean logDomain){
  DenseFactor joint=new DenseFactor(new VarSet(),logDomain ? 0.0 : 1.0);
  for (int a=0; a < fg.getNumFactors(); a++) {
    if (fg.getFactor(a) instanceof DenseFactor) {
      DenseFactor factor=(DenseFactor)fg.getFactor(a);
      if (logDomain) {
        joint.add(factor);
      }
 else {
        joint.prod(factor);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return joint;
}",0.7411519777931992
131588,"/** 
 * Constructor.
 * @param n The length of the sentence.
 */
public ProjDepTreeFactor(int n,VarType type){
  this.vars=createVarSet(n,type);
  this.n=n;
  LinkVar[] rootVars=new LinkVar[n];
  LinkVar[][] childVars=new LinkVar[n][n];
  VarSet vars=this.getVars();
  for (  Var var : vars) {
    LinkVar link=(LinkVar)var;
    if (link.getParent() == -1) {
      rootVars[link.getChild()]=link;
    }
 else {
      childVars[link.getParent()][link.getChild()]=link;
    }
  }
}","/** 
 * Constructor.
 * @param n The length of the sentence.
 */
public ProjDepTreeFactor(int n,VarType type){
  this.vars=createVarSet(n,type);
  this.n=n;
  rootVars=new LinkVar[n];
  childVars=new LinkVar[n][n];
  VarSet vars=this.getVars();
  for (  Var var : vars) {
    LinkVar link=(LinkVar)var;
    if (link.getParent() == -1) {
      rootVars[link.getChild()]=link;
    }
 else {
      childVars[link.getParent()][link.getChild()]=link;
    }
  }
}",0.938034188034188
131589,"public void createMessages(FgNode parent,Messages[] msgs,boolean logDomain){
  assert(this == parent.getFactor());
  double[] root=new double[n];
  double[][] child=new double[n][n];
  Utilities.fill(root,Double.NEGATIVE_INFINITY);
  Utilities.fill(child,Double.NEGATIVE_INFINITY);
  for (  FgEdge nbEdge : parent.getOutEdges()) {
    LinkVar link=(LinkVar)nbEdge.getVar();
    DenseFactor nbMsg=msgs[nbEdge.getId()].message;
    double oddsRatio;
    if (logDomain) {
      oddsRatio=nbMsg.getValue(LinkVar.TRUE) - nbMsg.getValue(LinkVar.FALSE);
    }
 else {
      oddsRatio=nbMsg.getValue(LinkVar.TRUE) / nbMsg.getValue(LinkVar.FALSE);
      oddsRatio=Utilities.log(oddsRatio);
    }
    if (link.getParent() == -1) {
      root[link.getChild()]=oddsRatio;
    }
 else {
      child[link.getParent()][link.getChild()]=oddsRatio;
    }
  }
  DepIoChart chart=ProjectiveDependencyParser.insideOutsideAlgorithm(root,child);
  double pi=logDomain ? 0.0 : 1.0;
  for (  FgEdge nbEdge : parent.getOutEdges()) {
    DenseFactor nbMsg=msgs[nbEdge.getId()].message;
    if (logDomain) {
      pi+=nbMsg.getValue(LinkVar.FALSE);
    }
 else {
      pi*=nbMsg.getValue(LinkVar.FALSE);
    }
  }
  double partition=logDomain ? pi + chart.getLogPartitionFunction() : pi * Utilities.exp(chart.getLogPartitionFunction());
  for (  FgEdge nbEdge : parent.getOutEdges()) {
    LinkVar link=(LinkVar)nbEdge.getVar();
    double beliefTrue;
    double beliefFalse;
    if (logDomain) {
      beliefTrue=pi + chart.getLogSumOfPotentials(link.getParent(),link.getChild());
      beliefFalse=Utilities.logSubtract(partition,beliefTrue);
    }
 else {
      beliefTrue=pi * Utilities.exp(chart.getLogSumOfPotentials(link.getParent(),link.getChild()));
      beliefFalse=partition - beliefTrue;
    }
    msgs[nbEdge.getId()].newMessage.setValue(LinkVar.FALSE,beliefFalse);
    msgs[nbEdge.getId()].newMessage.setValue(LinkVar.TRUE,beliefTrue);
  }
}","public void createMessages(FgNode parent,Messages[] msgs,boolean logDomain){
  assert(this == parent.getFactor());
  double[] root=new double[n];
  double[][] child=new double[n][n];
  Utilities.fill(root,Double.NEGATIVE_INFINITY);
  Utilities.fill(child,Double.NEGATIVE_INFINITY);
  for (  FgEdge inEdge : parent.getInEdges()) {
    LinkVar link=(LinkVar)inEdge.getVar();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    double oddsRatio;
    if (logDomain) {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) - inMsg.getValue(LinkVar.FALSE);
    }
 else {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) / inMsg.getValue(LinkVar.FALSE);
      oddsRatio=Utilities.log(oddsRatio);
    }
    if (link.getParent() == -1) {
      root[link.getChild()]=oddsRatio;
    }
 else {
      child[link.getParent()][link.getChild()]=oddsRatio;
    }
  }
  DepIoChart chart=ProjectiveDependencyParser.insideOutsideAlgorithm(root,child);
  double pi=logDomain ? 0.0 : 1.0;
  for (  FgEdge inEdge : parent.getInEdges()) {
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      pi+=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      pi*=inMsg.getValue(LinkVar.FALSE);
    }
  }
  double partition=logDomain ? pi + chart.getLogPartitionFunction() : pi * Utilities.exp(chart.getLogPartitionFunction());
  if (log.isTraceEnabled()) {
    log.trace(String.format(""String_Node_Str"",partition));
  }
  for (  FgEdge outEdge : parent.getOutEdges()) {
    LinkVar link=(LinkVar)outEdge.getVar();
    double beliefTrue;
    double beliefFalse;
    if (logDomain) {
      beliefTrue=pi + chart.getLogSumOfPotentials(link.getParent(),link.getChild());
      beliefFalse=Utilities.logSubtract(partition,beliefTrue);
    }
 else {
      beliefTrue=pi * Utilities.exp(chart.getLogSumOfPotentials(link.getParent(),link.getChild()));
      beliefFalse=partition - beliefTrue;
    }
    if (log.isTraceEnabled()) {
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefTrue));
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefFalse));
    }
    FgEdge inEdge=outEdge.getOpposing();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      beliefTrue-=inMsg.getValue(LinkVar.TRUE);
      log.debug(String.format(""String_Node_Str"",link.getParent(),link.getChild(),Utilities.exp(beliefTrue)));
      beliefFalse-=inMsg.getValue(LinkVar.FALSE);
      log.debug(String.format(""String_Node_Str"",link.getParent(),link.getChild(),Utilities.exp(beliefFalse)));
    }
 else {
      beliefTrue/=inMsg.getValue(LinkVar.TRUE);
      beliefFalse/=inMsg.getValue(LinkVar.FALSE);
    }
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.FALSE,beliefFalse);
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.TRUE,beliefTrue);
  }
}",0.7783646735685612
131590,"/** 
 * Sends the message that is currently ""pending"" for this edge. This just copies the message in the ""pending slot"" to the ""message slot"" for this edge.
 * @param edge The edge over which the message should be sent.
 */
private void sendMessage(FgEdge edge){
  int edgeId=edge.getId();
  Messages ec=msgs[edgeId];
  DenseFactor oldMessage=ec.message;
  ec.message=ec.newMessage;
  ec.newMessage=oldMessage;
}","/** 
 * Sends the message that is currently ""pending"" for this edge. This just copies the message in the ""pending slot"" to the ""message slot"" for this edge.
 * @param edge The edge over which the message should be sent.
 */
private void sendMessage(FgEdge edge){
  int edgeId=edge.getId();
  Messages ec=msgs[edgeId];
  DenseFactor oldMessage=ec.message;
  ec.message=ec.newMessage;
  ec.newMessage=oldMessage;
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + ec.message);
  }
}",0.9104972375690608
131591,"/** 
 * Gets the partition function for the connected component containing the given node.
 */
private double getPartitionFunctionAtVarNode(FgNode node){
  if (!node.isVar()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Var var=node.getVar();
  DenseFactor prod=new DenseFactor(new VarSet(var),prm.logDomain ? 0.0 : 1.0);
  getProductOfMessages(node,prod,null);
  if (prm.logDomain) {
    return prod.getLogSum();
  }
 else {
    return prod.getSum();
  }
}","/** 
 * Gets the partition function for the connected component containing the given node. Package private FOR TESTING ONLY.
 */
double getPartitionFunctionAtVarNode(FgNode node){
  if (!node.isVar()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Var var=node.getVar();
  DenseFactor prod=new DenseFactor(new VarSet(var),prm.logDomain ? 0.0 : 1.0);
  getProductOfMessages(node,prod,null);
  if (prm.logDomain) {
    return prod.getLogSum();
  }
 else {
    return prod.getSum();
  }
}",0.9573170731707316
131592,"/** 
 * @inheritDoc 
 */
@Override public void run(){
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < msgs.length; i++) {
    msgs[i]=new Messages(fg.getEdge(i),prm);
  }
  for (int iter=0; iter < prm.maxIterations; iter++) {
    if (timer.totSec() > prm.timeoutSeconds) {
      break;
    }
    if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
      for (      FgEdge edge : order) {
        createMessage(edge,iter);
        sendMessage(edge);
      }
    }
 else     if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
      for (      FgEdge edge : fg.getEdges()) {
        createMessage(edge,iter);
      }
      for (      FgEdge edge : fg.getEdges()) {
        sendMessage(edge);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
    }
  }
  timer.stop();
}","/** 
 * @inheritDoc 
 */
@Override public void run(){
  Timer timer=new Timer();
  timer.start();
  for (int i=0; i < msgs.length; i++) {
    msgs[i]=new Messages(fg.getEdge(i),prm);
  }
  for (  Factor factor : fg.getFactors()) {
    if (factor instanceof GlobalFactor) {
      ((GlobalFactor)factor).reset();
    }
  }
  for (int iter=0; iter < prm.maxIterations; iter++) {
    if (timer.totSec() > prm.timeoutSeconds) {
      break;
    }
    if (prm.updateOrder == BpUpdateOrder.SEQUENTIAL) {
      for (      FgEdge edge : order) {
        createMessage(edge,iter);
        sendMessage(edge);
      }
    }
 else     if (prm.updateOrder == BpUpdateOrder.PARALLEL) {
      for (      FgEdge edge : fg.getEdges()) {
        createMessage(edge,iter);
      }
      for (      FgEdge edge : fg.getEdges()) {
        sendMessage(edge);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + prm.updateOrder);
    }
  }
  timer.stop();
}",0.9246344206974128
131593,"/** 
 * Creates a message and stores it in the ""pending message"" slot for this edge.
 * @param edge The directed edge for which the message should be created.
 * @param iter The iteration number.
 */
private void createMessage(FgEdge edge,int iter){
  int edgeId=edge.getId();
  Var var=edge.getVar();
  Factor factor=edge.getFactor();
  if (!edge.isVarToFactor() && factor instanceof GlobalFactor) {
    GlobalFactor globalFac=(GlobalFactor)factor;
    globalFac.createMessages(edge.getParent(),msgs,prm.logDomain,iter);
    return;
  }
  DenseFactor msg=msgs[edgeId].newMessage;
  msg.set(prm.logDomain ? 0.0 : 1.0);
  if (edge.isVarToFactor()) {
    getProductOfMessages(edge.getParent(),msg,edge.getChild());
  }
 else {
    DenseFactor prod=new DenseFactor(factor.getVars());
    prod.set((DenseFactor)factor);
    getProductOfMessages(edge.getParent(),prod,edge.getChild());
    if (prm.logDomain) {
      msg=prod.getLogMarginal(new VarSet(var),false);
    }
 else {
      msg=prod.getMarginal(new VarSet(var),false);
    }
  }
  assert(msg.getVars().equals(new VarSet(var)));
  if (prm.normalizeMessages) {
    if (prm.logDomain) {
      msg.logNormalize();
    }
 else {
      msg.normalize();
    }
  }
  msgs[edgeId].newMessage=msg;
}","/** 
 * Creates a message and stores it in the ""pending message"" slot for this edge.
 * @param edge The directed edge for which the message should be created.
 * @param iter The iteration number.
 */
private void createMessage(FgEdge edge,int iter){
  int edgeId=edge.getId();
  Var var=edge.getVar();
  Factor factor=edge.getFactor();
  if (!edge.isVarToFactor() && factor instanceof GlobalFactor) {
    log.trace(""String_Node_Str"");
    GlobalFactor globalFac=(GlobalFactor)factor;
    globalFac.createMessages(edge.getParent(),msgs,prm.logDomain,iter);
    return;
  }
  DenseFactor msg=msgs[edgeId].newMessage;
  msg.set(prm.logDomain ? 0.0 : 1.0);
  if (edge.isVarToFactor()) {
    getProductOfMessages(edge.getParent(),msg,edge.getChild());
  }
 else {
    DenseFactor prod=new DenseFactor(factor.getVars());
    prod.set((DenseFactor)factor);
    getProductOfMessages(edge.getParent(),prod,edge.getChild());
    if (prm.logDomain) {
      msg=prod.getLogMarginal(new VarSet(var),false);
    }
 else {
      msg=prod.getMarginal(new VarSet(var),false);
    }
  }
  assert(msg.getVars().equals(new VarSet(var)));
  if (prm.normalizeMessages) {
    if (prm.logDomain) {
      msg.logNormalize();
    }
 else {
      msg.normalize();
    }
  }
  msgs[edgeId].newMessage=msg;
}",0.9865293185419968
131594,"public FgInferencerFactory getInfFactory(boolean logDomain){
  BeliefPropagationPrm bpPrm=new BeliefPropagationPrm();
  bpPrm.logDomain=logDomain;
  bpPrm.schedule=BpScheduleType.TREE_LIKE;
  bpPrm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  bpPrm.normalizeMessages=false;
  return bpPrm;
}","public FgInferencerFactory getInfFactory(boolean logDomain){
  BeliefPropagationPrm bpPrm=new BeliefPropagationPrm();
  bpPrm.logDomain=logDomain;
  bpPrm.schedule=BpScheduleType.TREE_LIKE;
  bpPrm.updateOrder=BpUpdateOrder.SEQUENTIAL;
  bpPrm.normalizeMessages=false;
  bpPrm.maxIterations=1;
  return bpPrm;
}",0.9581239530988276
131595,"public void testSrlLogLikelihood() throws Exception {
  List<CoNLL09Token> tokens=new ArrayList<CoNLL09Token>();
  tokens.add(new CoNLL09Token(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",getList(""String_Node_Str"")));
  tokens.add(new CoNLL09Token(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",getList(""String_Node_Str"")));
  tokens.add(new CoNLL09Token(3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",getList(""String_Node_Str"")));
  CoNLL09Sentence sent=new CoNLL09Sentence(tokens);
  List<CoNLL09Sentence> sents=getList(sent);
  System.out.println(""String_Node_Str"");
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.useProjDepTreeFactor=true;
  prm.fePrm.biasOnly=true;
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet);
  FgExamples data=builder.getData(sents);
  System.out.println(""String_Node_Str"" + alphabet.size());
  FgModel model=new FgModel(alphabet);
  CrfObjective obj=new CrfObjective(model.getNumParams(),data,getInfFactory(true));
  double ll=obj.getValue(model.getParams());
  assertEquals(0.0,ll,1e-13);
}","@Test public void testSrlLogLikelihood() throws Exception {
  List<CoNLL09Token> tokens=new ArrayList<CoNLL09Token>();
  tokens.add(new CoNLL09Token(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),2,2,""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"",getList(""String_Node_Str"")));
  tokens.add(new CoNLL09Token(3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getList(""String_Node_Str""),getList(""String_Node_Str""),0,0,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",getList(""String_Node_Str"")));
  CoNLL09Sentence sent=new CoNLL09Sentence(tokens);
  List<CoNLL09Sentence> sents=getList(sent);
  System.out.println(""String_Node_Str"");
  Alphabet<Feature> alphabet=new Alphabet<Feature>();
  SrlFgExampleBuilderPrm prm=new SrlFgExampleBuilderPrm();
  prm.fgPrm.makeUnknownPredRolesLatent=false;
  prm.fgPrm.roleStructure=RoleStructure.PREDS_GIVEN;
  prm.fgPrm.useProjDepTreeFactor=true;
  prm.fePrm.biasOnly=true;
  SrlFgExamplesBuilder builder=new SrlFgExamplesBuilder(prm,alphabet);
  FgExamples data=builder.getData(sents);
  System.out.println(""String_Node_Str"" + alphabet.size());
  FgModel model=new FgModel(alphabet);
  boolean logDomain=false;
  FgInferencerFactory infFactory=getInfFactory(logDomain);
  FgExample ex=data.get(0);
  FgInferencer infLat=infFactory.getInferencer(ex.getFgLat());
  FactorGraph fgLat=ex.updateFgLat(model.getParams(),infLat.isLogDomain());
  infLat.run();
  assertEquals(2,infLat.getPartition(),2);
  for (  Var v : fgLat.getVars()) {
    double partition=((BeliefPropagation)infLat).getPartitionFunctionAtVarNode(fgLat.getNode(v));
    assertEquals(2,logDomain ? Utilities.exp(partition) : partition,1e-3);
  }
  System.out.println(""String_Node_Str"");
  FgInferencer infLatPred=infFactory.getInferencer(ex.getFgLatPred());
  FactorGraph fgLatPred=ex.updateFgLatPred(model.getParams(),infLatPred.isLogDomain());
  infLatPred.run();
  assertEquals(4,infLatPred.getPartition(),2);
  BfsBpSchedule schedule=new BfsBpSchedule(fgLatPred);
  System.out.println();
  for (  FgEdge edge : schedule.getOrder()) {
    System.out.println(edge.toString());
  }
  System.out.println();
  for (  Factor f : fgLatPred.getFactors()) {
    System.out.println(f);
  }
  for (  Var v : fgLatPred.getVars()) {
    double partition=((BeliefPropagation)infLatPred).getPartitionFunctionAtVarNode(fgLatPred.getNode(v));
    System.out.format(""String_Node_Str"",v.toString(),partition);
    assertEquals(4,logDomain ? Utilities.exp(partition) : partition,1e-3);
  }
  CrfObjective obj=new CrfObjective(model.getNumParams(),data,infFactory);
  double ll=obj.getValue(model.getParams());
  assertEquals(0.5,Utilities.exp(ll),1e-13);
}",0.4942914707857622
131596,"/** 
 * Constructor.
 * @param n The length of the sentence.
 */
public ProjDepTreeFactor(int n,VarType type){
  this.vars=createVarSet(n,type);
  this.n=n;
  rootVars=new LinkVar[n];
  childVars=new LinkVar[n][n];
  VarSet vars=this.getVars();
  for (  Var var : vars) {
    LinkVar link=(LinkVar)var;
    if (link.getParent() == -1) {
      rootVars[link.getChild()]=link;
    }
 else {
      childVars[link.getParent()][link.getChild()]=link;
    }
  }
}","/** 
 * Constructor.
 * @param n The length of the sentence.
 */
public ProjDepTreeFactor(int n,VarType type){
  super();
  this.vars=createVarSet(n,type);
  this.n=n;
  rootVars=new LinkVar[n];
  childVars=new LinkVar[n][n];
  VarSet vars=this.getVars();
  for (  Var var : vars) {
    LinkVar link=(LinkVar)var;
    if (link.getParent() == -1) {
      rootVars[link.getChild()]=link;
    }
 else {
      childVars[link.getParent()][link.getChild()]=link;
    }
  }
}",0.988108108108108
131597,"private void createMessages(FgNode parent,Messages[] msgs,boolean logDomain){
  assert(this == parent.getFactor());
  double[] root=new double[n];
  double[][] child=new double[n][n];
  Utilities.fill(root,Double.NEGATIVE_INFINITY);
  Utilities.fill(child,Double.NEGATIVE_INFINITY);
  for (  FgEdge inEdge : parent.getInEdges()) {
    LinkVar link=(LinkVar)inEdge.getVar();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    double oddsRatio;
    if (logDomain) {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) - inMsg.getValue(LinkVar.FALSE);
    }
 else {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) / inMsg.getValue(LinkVar.FALSE);
      oddsRatio=Utilities.log(oddsRatio);
    }
    if (link.getParent() == -1) {
      root[link.getChild()]=oddsRatio;
    }
 else {
      child[link.getParent()][link.getChild()]=oddsRatio;
    }
  }
  DepIoChart chart=ProjectiveDependencyParser.insideOutsideAlgorithm(root,child);
  double pi=logDomain ? 0.0 : 1.0;
  for (  FgEdge inEdge : parent.getInEdges()) {
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      pi+=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      pi*=inMsg.getValue(LinkVar.FALSE);
    }
  }
  double partition=logDomain ? pi + chart.getLogPartitionFunction() : pi * Utilities.exp(chart.getLogPartitionFunction());
  if (log.isTraceEnabled()) {
    log.trace(String.format(""String_Node_Str"",partition));
  }
  for (  FgEdge outEdge : parent.getOutEdges()) {
    LinkVar link=(LinkVar)outEdge.getVar();
    double beliefTrue;
    double beliefFalse;
    if (logDomain) {
      beliefTrue=pi + chart.getLogSumOfPotentials(link.getParent(),link.getChild());
      beliefFalse=Utilities.logSubtract(partition,beliefTrue);
    }
 else {
      beliefTrue=pi * Utilities.exp(chart.getLogSumOfPotentials(link.getParent(),link.getChild()));
      beliefFalse=partition - beliefTrue;
    }
    if (log.isTraceEnabled()) {
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefTrue));
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefFalse));
    }
    FgEdge inEdge=outEdge.getOpposing();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      beliefTrue-=inMsg.getValue(LinkVar.TRUE);
      beliefFalse-=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      beliefTrue/=inMsg.getValue(LinkVar.TRUE);
      beliefFalse/=inMsg.getValue(LinkVar.FALSE);
    }
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.FALSE,beliefFalse);
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.TRUE,beliefTrue);
  }
}","@Override protected void createMessages(FgNode parent,Messages[] msgs,boolean logDomain){
  assert(this == parent.getFactor());
  double[] root=new double[n];
  double[][] child=new double[n][n];
  Utilities.fill(root,Double.NEGATIVE_INFINITY);
  Utilities.fill(child,Double.NEGATIVE_INFINITY);
  for (  FgEdge inEdge : parent.getInEdges()) {
    LinkVar link=(LinkVar)inEdge.getVar();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    double oddsRatio;
    if (logDomain) {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) - inMsg.getValue(LinkVar.FALSE);
    }
 else {
      oddsRatio=inMsg.getValue(LinkVar.TRUE) / inMsg.getValue(LinkVar.FALSE);
      oddsRatio=Utilities.log(oddsRatio);
    }
    if (link.getParent() == -1) {
      root[link.getChild()]=oddsRatio;
    }
 else {
      child[link.getParent()][link.getChild()]=oddsRatio;
    }
  }
  DepIoChart chart=ProjectiveDependencyParser.insideOutsideAlgorithm(root,child);
  double pi=logDomain ? 0.0 : 1.0;
  for (  FgEdge inEdge : parent.getInEdges()) {
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      pi+=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      pi*=inMsg.getValue(LinkVar.FALSE);
    }
  }
  double partition=logDomain ? pi + chart.getLogPartitionFunction() : pi * Utilities.exp(chart.getLogPartitionFunction());
  if (log.isTraceEnabled()) {
    log.trace(String.format(""String_Node_Str"",partition));
  }
  for (  FgEdge outEdge : parent.getOutEdges()) {
    LinkVar link=(LinkVar)outEdge.getVar();
    double beliefTrue;
    double beliefFalse;
    if (logDomain) {
      beliefTrue=pi + chart.getLogSumOfPotentials(link.getParent(),link.getChild());
      beliefFalse=Utilities.logSubtract(partition,beliefTrue);
    }
 else {
      beliefTrue=pi * Utilities.exp(chart.getLogSumOfPotentials(link.getParent(),link.getChild()));
      beliefFalse=partition - beliefTrue;
    }
    if (log.isTraceEnabled()) {
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefTrue));
      log.trace(String.format(""String_Node_Str"",link.getParent(),link.getChild(),beliefFalse));
    }
    FgEdge inEdge=outEdge.getOpposing();
    DenseFactor inMsg=msgs[inEdge.getId()].message;
    if (logDomain) {
      beliefTrue-=inMsg.getValue(LinkVar.TRUE);
      beliefFalse-=inMsg.getValue(LinkVar.FALSE);
    }
 else {
      beliefTrue/=inMsg.getValue(LinkVar.TRUE);
      beliefFalse/=inMsg.getValue(LinkVar.FALSE);
    }
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.FALSE,beliefFalse);
    msgs[outEdge.getId()].newMessage.setValue(LinkVar.TRUE,beliefTrue);
  }
}",0.9957528957528956
131598,"public void run() throws ParseException, IOException {
  DmvModel model=null;
  Alphabet<Label> alphabet;
  DmvModel goldModel=null;
  if (modelIn != null) {
    log.info(""String_Node_Str"" + modelIn);
    model=(DmvModel)Files.deserialize(modelIn);
    alphabet=model.getTagAlphabet();
  }
 else {
    alphabet=new Alphabet<Label>();
  }
  if (trainType != null && train != null) {
    if (model != null) {
      log.error(""String_Node_Str"");
      throw new ParseException(""String_Node_Str"" + ""String_Node_Str"");
    }
    DepTreebank trainTreebank=getData(alphabet,trainType,train,""String_Node_Str"");
    DmvTrainCorpus trainCorpus=new DmvTrainCorpus(trainTreebank,propSupervised);
    log.info(""String_Node_Str"" + trainCorpus.getNumUnlabeled());
    log.info(""String_Node_Str"" + trainCorpus.getNumLabeled());
    if (printSentences != null) {
      printSentences(trainCorpus.getSentences(),printSentences);
    }
    if (relaxOnly) {
      runRelaxOnly(goldModel,trainTreebank,trainCorpus);
      return;
    }
    log.info(""String_Node_Str"");
    Trainer trainer=TrainerFactory.getTrainer(trainTreebank,goldModel);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(trainCorpus);
      updateBounds(trainCorpus,bnb.getRootRelaxation(),trainTreebank,goldModel);
      bnb.train();
    }
 else {
      trainer.train(trainCorpus);
    }
    model=(DmvModel)trainer.getModel();
    evalAndWrite(model,trainTreebank,""String_Node_Str"",trainOut,trainType);
  }
  if (modelOut != null) {
    log.info(""String_Node_Str"" + modelOut);
    Files.serialize(model,modelOut);
  }
  if (printModel != null) {
    log.info(""String_Node_Str"" + printModel);
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(printModel),""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(model.toString());
    writer.close();
  }
  if (test != null && testType != null) {
    alphabet.stopGrowth();
    log.info(""String_Node_Str"" + test);
    DepTreebank testTreebank=getData(alphabet,testType,test,""String_Node_Str"");
    evalAndWrite(model,testTreebank,""String_Node_Str"",testOut,testType);
  }
}","public void run() throws ParseException, IOException {
  DmvModel model=null;
  Alphabet<Label> alphabet;
  DmvModel goldModel=null;
  if (modelIn != null) {
    log.info(""String_Node_Str"" + modelIn);
    model=(DmvModel)Files.deserialize(modelIn);
    alphabet=model.getTagAlphabet();
  }
 else {
    alphabet=new Alphabet<Label>();
  }
  if (trainType != null && train != null) {
    if (model != null) {
      log.error(""String_Node_Str"");
      throw new ParseException(""String_Node_Str"" + ""String_Node_Str"");
    }
    DepTreebank trainTreebank=getData(alphabet,trainType,train,DepTreebankReader.maxSentenceLength,""String_Node_Str"");
    DmvTrainCorpus trainCorpus=new DmvTrainCorpus(trainTreebank,propSupervised);
    log.info(""String_Node_Str"" + trainCorpus.getNumUnlabeled());
    log.info(""String_Node_Str"" + trainCorpus.getNumLabeled());
    if (printSentences != null) {
      printSentences(trainCorpus.getSentences(),printSentences);
    }
    if (relaxOnly) {
      runRelaxOnly(goldModel,trainTreebank,trainCorpus);
      return;
    }
    log.info(""String_Node_Str"");
    Trainer trainer=TrainerFactory.getTrainer(trainTreebank,goldModel);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(trainCorpus);
      updateBounds(trainCorpus,bnb.getRootRelaxation(),trainTreebank,goldModel);
      bnb.train();
    }
 else {
      trainer.train(trainCorpus);
    }
    model=(DmvModel)trainer.getModel();
    evalAndWrite(model,trainTreebank,""String_Node_Str"",trainOut,trainType);
  }
  if (modelOut != null) {
    log.info(""String_Node_Str"" + modelOut);
    Files.serialize(model,modelOut);
  }
  if (printModel != null) {
    log.info(""String_Node_Str"" + printModel);
    Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(printModel),""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(model.toString());
    writer.close();
  }
  if (test != null && testType != null) {
    alphabet.stopGrowth();
    log.info(""String_Node_Str"" + test);
    DepTreebank testTreebank=getData(alphabet,testType,test,maxSentenceLengthTest,""String_Node_Str"");
    evalAndWrite(model,testTreebank,""String_Node_Str"",testOut,testType);
  }
}",0.9868599909379248
131599,"private DepTreebank getData(Alphabet<Label> alphabet,DatasetType dataType,File dataFile,String dataName) throws ParseException, IOException {
  DepTreebank goldTreebank;
  DmvModel goldModel=null;
  if (dataType == DatasetType.PTB || dataType == DatasetType.CONLL_X || dataType == DatasetType.CONLL_2009) {
    log.info(""String_Node_Str"" + dataName + ""String_Node_Str""+ dataFile);
    goldTreebank=DepTreebankReader.getTreebank(dataFile,dataType,DepTreebankReader.maxSentenceLength,alphabet);
  }
 else   if (dataType == DatasetType.SYNTHETIC) {
    if (synthetic == null) {
      throw new ParseException(""String_Node_Str"");
    }
    if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getThreePosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
    }
 else {
      throw new ParseException(""String_Node_Str"" + synthetic);
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(goldModel,syntheticSeed);
    goldTreebank=generator.getTreebank(DepTreebankReader.maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + dataName + ""String_Node_Str""+ goldTreebank.size());
  log.info(""String_Node_Str"" + dataName + ""String_Node_Str""+ goldTreebank.getNumTokens());
  log.info(""String_Node_Str"" + dataName + ""String_Node_Str""+ goldTreebank.getNumTypes());
  return goldTreebank;
}","private DepTreebank getData(Alphabet<Label> alphabet,DatasetType dataType,File dataFile,int maxSentenceLength,String dataName) throws ParseException, IOException {
  DepTreebank goldTreebank;
  DmvModel goldModel=null;
  if (dataType == DatasetType.PTB || dataType == DatasetType.CONLL_X || dataType == DatasetType.CONLL_2009) {
    log.info(""String_Node_Str"" + dataName + ""String_Node_Str""+ dataFile);
    goldTreebank=DepTreebankReader.getTreebank(dataFile,dataType,maxSentenceLength,alphabet);
  }
 else   if (dataType == DatasetType.SYNTHETIC) {
    if (synthetic == null) {
      throw new ParseException(""String_Node_Str"");
    }
    if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getThreePosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
    }
 else {
      throw new ParseException(""String_Node_Str"" + synthetic);
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(goldModel,syntheticSeed);
    goldTreebank=generator.getTreebank(DepTreebankReader.maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + dataName + ""String_Node_Str""+ goldTreebank.size());
  log.info(""String_Node_Str"" + dataName + ""String_Node_Str""+ goldTreebank.getNumTokens());
  log.info(""String_Node_Str"" + dataName + ""String_Node_Str""+ goldTreebank.getNumTypes());
  return goldTreebank;
}",0.5195707070707071
131600,"public Set<String> getArgumentFeatures(int pidx,int aidx,Set<String> suffixes,CoNLL09Sentence sent,Set<String> feats,boolean isTrain){
  CoNLL09Token pred=sent.get(pidx);
  CoNLL09Token arg=sent.get(aidx);
  String predForm=decideForm(pred.getForm(),pidx);
  String argForm=decideForm(arg.getForm(),aidx);
  String predPos=pred.getPos();
  String argPos=arg.getPos();
  String dir;
  int dist=Math.abs(aidx - pidx);
  if (aidx > pidx)   dir=""String_Node_Str"";
 else   if (aidx < pidx)   dir=""String_Node_Str"";
 else   dir=""String_Node_Str"";
  Set<String> instFeats=new HashSet<String>();
  instFeats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argForm+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argForm+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argForm+ ""String_Node_Str""+ predPos+ ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str""+ dist+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ dist+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + argPos + ""String_Node_Str""+ dist+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + sent.size());
  instFeats.add(""String_Node_Str"" + dir);
  instFeats.add(""String_Node_Str"" + dist);
  instFeats.add(""String_Node_Str"" + dir + dist);
  instFeats.add(""String_Node_Str"" + predForm + ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + argForm + ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + argPos + ""String_Node_Str"");
  for (  String feat : instFeats) {
    if (isTrain || allFeatures.contains(feat)) {
      if (isTrain) {
        allFeatures.add(feat);
      }
      for (      String suf : suffixes) {
        feats.add(feat + suf);
      }
    }
  }
  return feats;
}","public Set<String> getArgumentFeatures(int pidx,int aidx,Set<String> suffixes,CoNLL09Sentence sent,Set<String> feats,boolean isTrain){
  CoNLL09Token pred=sent.get(pidx);
  CoNLL09Token arg=sent.get(aidx);
  String predForm=decideForm(pred.getForm(),pidx);
  String argForm=decideForm(arg.getForm(),aidx);
  String predPos=pred.getPos();
  String argPos=arg.getPos();
  if (!goldHead) {
    predPos=pred.getPpos();
    argPos=arg.getPpos();
  }
  String dir;
  int dist=Math.abs(aidx - pidx);
  if (aidx > pidx)   dir=""String_Node_Str"";
 else   if (aidx < pidx)   dir=""String_Node_Str"";
 else   dir=""String_Node_Str"";
  Set<String> instFeats=new HashSet<String>();
  instFeats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argForm+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argForm+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predForm + ""String_Node_Str""+ argForm+ ""String_Node_Str""+ predPos+ ""String_Node_Str""+ argPos+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str""+ dist+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ argPos+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str""+ dist+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + argPos + ""String_Node_Str""+ dist+ ""String_Node_Str""+ dir+ ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + sent.size());
  instFeats.add(""String_Node_Str"" + dir);
  instFeats.add(""String_Node_Str"" + dist);
  instFeats.add(""String_Node_Str"" + dir + dist);
  instFeats.add(""String_Node_Str"" + predForm + ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + predPos + ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + argForm + ""String_Node_Str"");
  instFeats.add(""String_Node_Str"" + argPos + ""String_Node_Str"");
  for (  String feat : instFeats) {
    if (isTrain || allFeatures.contains(feat)) {
      if (isTrain) {
        allFeatures.add(feat);
      }
      for (      String suf : suffixes) {
        feats.add(feat + suf);
      }
    }
  }
  return feats;
}",0.9833872707659116
131601,"public double evaluate(List<VarConfig> goldConfigs,List<VarConfig> predictedConfigs){
  int numCorrect=0;
  int numTotal=0;
  assert(goldConfigs.size() == predictedConfigs.size());
  for (int i=0; i < goldConfigs.size(); i++) {
    VarConfig gold=goldConfigs.get(i);
    VarConfig pred=predictedConfigs.get(i);
    assert(gold.getVars().equals(pred.getVars()));
    for (    Var v : gold.getVars()) {
      int goldState=gold.getState(v);
      int predState=pred.getState(v);
      if (goldState == predState) {
        numCorrect++;
      }
      numTotal++;
    }
  }
  return (double)numCorrect / numTotal;
}","/** 
 * Computes the accuracy on the PREDICTED variables. 
 */
public double evaluate(List<VarConfig> goldConfigs,List<VarConfig> predictedConfigs){
  int numCorrect=0;
  int numTotal=0;
  assert(goldConfigs.size() == predictedConfigs.size());
  for (int i=0; i < goldConfigs.size(); i++) {
    VarConfig gold=goldConfigs.get(i);
    VarConfig pred=predictedConfigs.get(i);
    for (    Var v : gold.getVars()) {
      if (v.getType() == VarType.PREDICTED) {
        int goldState=gold.getState(v);
        int predState=pred.getState(v);
        if (goldState == predState) {
          numCorrect++;
        }
        numTotal++;
      }
    }
  }
  return (double)numCorrect / numTotal;
}",0.6758832565284179
131602,"/** 
 * Gets the state (in this config) for a given variable. 
 */
public int getState(Var var){
  return config.get(var);
}","/** 
 * Gets the state (in this config) for a given variable. 
 */
public int getState(Var var){
  Integer state=config.get(var);
  if (state == null) {
    throw new RuntimeException(""String_Node_Str"" + var);
  }
  return state;
}",0.6591549295774648
131603,"/** 
 * Reads a Bayesian Network from a network InputStream and a CPD InputStream, and returns a factor graph representation of it.
 */
public FactorGraph readBnAsFg(InputStream networkIs,InputStream cpdIs) throws IOException {
  BufferedReader networkReader=new BufferedReader(new InputStreamReader(networkIs));
  int numVars=Integer.parseInt(networkReader.readLine().trim());
  varMap=new HashMap<String,Var>();
  VarSet allVars=new VarSet();
  for (int i=0; i < numVars; i++) {
    Var var=parseVar(networkReader.readLine());
    allVars.add(var);
    varMap.put(var.getName(),var);
  }
  assert(allVars.size() == numVars);
  networkReader.close();
  BufferedReader cpdReader=new BufferedReader(new InputStreamReader(cpdIs));
  factorMap=new HashMap<VarSet,Factor>();
  String line;
  while ((line=cpdReader.readLine()) != null) {
    VarConfig config=new VarConfig();
    String[] assns=whitespaceOrComma.split(line);
    for (int i=0; i < assns.length - 1; i++) {
      String assn=assns[i];
      String[] va=equals.split(assn);
      assert(va.length == 2);
      String varName=va[0];
      String stateName=va[1];
      config.put(varMap.get(varName),stateName);
    }
    double value=Double.parseDouble(assns[assns.length - 1]);
    VarSet vars=config.getVars();
    Factor f=factorMap.get(vars);
    if (f == null) {
      f=new Factor(vars);
    }
    f.setValue(config.getConfigIndex(),value);
    factorMap.put(vars,f);
  }
  cpdReader.close();
  FactorGraph fg=new FactorGraph();
  for (  Factor f : factorMap.values()) {
    fg.addFactor(f);
  }
  return fg;
}","/** 
 * Reads a Bayesian Network from a network InputStream and a CPD InputStream, and returns a factor graph representation of it.
 */
public FactorGraph readBnAsFg(InputStream networkIs,InputStream cpdIs) throws IOException {
  BufferedReader networkReader=new BufferedReader(new InputStreamReader(networkIs));
  int numVars=Integer.parseInt(networkReader.readLine().trim());
  varMap=new HashMap<String,Var>();
  VarSet allVars=new VarSet();
  for (int i=0; i < numVars; i++) {
    Var var=parseVar(networkReader.readLine());
    allVars.add(var);
    varMap.put(var.getName(),var);
  }
  assert(allVars.size() == numVars);
  networkReader.close();
  BufferedReader cpdReader=new BufferedReader(new InputStreamReader(cpdIs));
  factorMap=new LinkedHashMap<VarSet,Factor>();
  String line;
  while ((line=cpdReader.readLine()) != null) {
    VarConfig config=new VarConfig();
    String[] assns=whitespaceOrComma.split(line);
    for (int i=0; i < assns.length - 1; i++) {
      String assn=assns[i];
      String[] va=equals.split(assn);
      assert(va.length == 2);
      String varName=va[0];
      String stateName=va[1];
      config.put(varMap.get(varName),stateName);
    }
    double value=Double.parseDouble(assns[assns.length - 1]);
    VarSet vars=config.getVars();
    Factor f=factorMap.get(vars);
    if (f == null) {
      f=new Factor(vars);
    }
    f.setValue(config.getConfigIndex(),value);
    factorMap.put(vars,f);
  }
  cpdReader.close();
  FactorGraph fg=new FactorGraph();
  for (  Factor f : factorMap.values()) {
    fg.addFactor(f);
  }
  return fg;
}",0.9981012658227848
131604,"public BrownClusterTagger(Alphabet<Label> alphabet,int maxTagLength){
  this.alphabet=alphabet;
  map=new HashMap<String,String>();
}","public BrownClusterTagger(Alphabet<Label> alphabet,int maxTagLength){
  this.alphabet=alphabet;
  this.maxTagLength=maxTagLength;
  map=new HashMap<String,String>();
}",0.8866666666666667
131605,"/** 
 * Gets a new chart of the appropriate size for the sentence, specific to this grammar, and with cells of the specified type.
 */
private static ChartCell[][] getNewChart(Sentence sentence,CnfGrammar grammar,ChartCellType cellType,ParseType parseType){
  ChartCell[][] chart=new ChartCell[sentence.size()][sentence.size() + 1];
  for (int i=0; i < chart.length; i++) {
    for (int j=i + 1; j < chart[i].length; j++) {
      if (parseType == ParseType.INSIDE && cellType != ChartCellType.FULL) {
        throw new RuntimeException(""String_Node_Str"" + cellType);
      }
switch (cellType) {
case SINGLE_HASH:
        chart[i][j]=new SingleHashChartCell(grammar);
      break;
case DOUBLE_HASH:
    chart[i][j]=new DoubleHashChartCell(grammar);
  break;
case FULL:
chart[i][j]=new FullChartCell(grammar,parseType);
break;
case FULL_BREAK_TIES:
chart[i][j]=new FullTieBreakerChartCell(grammar,true);
break;
case CONSTRAINED_FULL:
if (!(sentence instanceof ValidParentsSentence)) {
throw new IllegalStateException(""String_Node_Str"");
}
ChartCell cell=new FullChartCell(grammar,parseType);
chart[i][j]=new ConstrainedChartCell(i,j,(ValidParentsSentence)sentence,cell);
break;
default :
throw new RuntimeException(""String_Node_Str"" + cellType);
}
}
}
return chart;
}","/** 
 * Gets a new chart of the appropriate size for the sentence, specific to this grammar, and with cells of the specified type.
 */
private static ChartCell[][] getNewChart(Sentence sentence,CnfGrammar grammar,ChartCellType cellType,ParseType parseType){
  ChartCell[][] chart=new ChartCell[sentence.size()][sentence.size() + 1];
  for (int i=0; i < chart.length; i++) {
    for (int j=i + 1; j < chart[i].length; j++) {
      if (parseType == ParseType.INSIDE && cellType != ChartCellType.FULL) {
        throw new RuntimeException(""String_Node_Str"" + cellType);
      }
switch (cellType) {
case SINGLE_HASH:
        chart[i][j]=new SingleHashChartCell(grammar);
      break;
case DOUBLE_HASH:
    chart[i][j]=new DoubleHashChartCell(grammar);
  break;
case FULL:
chart[i][j]=new FullChartCell(grammar,parseType);
break;
case FULL_BREAK_TIES:
chart[i][j]=new FullTieBreakerChartCell(grammar,true);
break;
case CONSTRAINED_FULL:
if (!(sentence instanceof ValidParentsSentence)) {
throw new IllegalStateException(""String_Node_Str"");
}
ChartCell cell=new FullTieBreakerChartCell(grammar,true);
chart[i][j]=new ConstrainedChartCell(i,j,(ValidParentsSentence)sentence,cell);
break;
default :
throw new RuntimeException(""String_Node_Str"" + cellType);
}
}
}
return chart;
}",0.991715976331361
131606,"@Test public void testTieBreakingOnUniformModel(){
  Prng.seed(System.currentTimeMillis());
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvModelFactory modelFactory=new UniformDmvModelFactory();
  DmvModel model=modelFactory.getInstance(sentences.getLabelAlphabet());
  int n=sentences.get(0).size();
  int m=model.root.length;
  double expectedParseWeight=Utilities.log(Math.pow(0.5,n * 2 + n - 1) * Math.pow(1. / m,n));
  System.out.println(""String_Node_Str"" + expectedParseWeight);
  int numRestarts=1000;
  Map<ParentsArray,Integer> counter=new HashMap<ParentsArray,Integer>();
  for (int i=0; i < numRestarts; i++) {
    DepTreebank dpTrees=getDpParses(model,sentences,expectedParseWeight);
    ParentsArray pa=new ParentsArray(dpTrees.get(0).getParents());
    System.out.println(Arrays.toString(pa.parents));
    Utilities.increment(counter,pa,1);
  }
  for (  ParentsArray pa : counter.keySet()) {
    System.out.printf(""String_Node_Str"",counter.get(pa),pa);
  }
}","@Test public void testTieBreakingOnUniformModel(){
  Prng.seed(System.currentTimeMillis());
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvModelFactory modelFactory=new UniformDmvModelFactory();
  DmvModel model=modelFactory.getInstance(sentences.getLabelAlphabet());
  int n=sentences.get(0).size();
  int m=model.root.length;
  double expectedParseWeight=Utilities.log(Math.pow(0.5,n * 2 + n - 1) * Math.pow(1. / m,n));
  System.out.println(""String_Node_Str"" + expectedParseWeight);
  int numRestarts=5000;
  Map<ParentsArray,Integer> counter=new HashMap<ParentsArray,Integer>();
  for (int i=0; i < numRestarts; i++) {
    DepTreebank dpTrees=getDpParses(model,sentences,expectedParseWeight);
    ParentsArray pa=new ParentsArray(dpTrees.get(0).getParents());
    System.out.println(Arrays.toString(pa.parents));
    Utilities.increment(counter,pa,1);
  }
  for (  ParentsArray pa : counter.keySet()) {
    System.out.printf(""String_Node_Str"",counter.get(pa),pa);
  }
}",0.999039385206532
131607,"private static DmvCkyParserPrm getDmvCkyParserPrm(boolean usePredArgSupervision){
  CkyPcfgParserPrm ckyPrm=new CkyPcfgParserPrm();
  ckyPrm.loopOrder=LoopOrder.LEFT_CHILD;
  ckyPrm.parseType=ParseType.VITERBI;
  ckyPrm.cacheChart=true;
  if (usePredArgSupervision) {
    ckyPrm.cellType=ChartCellType.CONSTRAINED_FULL;
  }
 else {
    ckyPrm.cellType=ChartCellType.FULL;
  }
  DmvCkyParserPrm prm=new DmvCkyParserPrm();
  prm.objPrm=getDmvObjectivePrm();
  prm.ckyPrm=ckyPrm;
  return prm;
}","private static DmvCkyParserPrm getDmvCkyParserPrm(boolean usePredArgSupervision){
  CkyPcfgParserPrm ckyPrm=new CkyPcfgParserPrm();
  ckyPrm.loopOrder=LoopOrder.LEFT_CHILD;
  ckyPrm.parseType=ParseType.VITERBI;
  ckyPrm.cacheChart=true;
  if (usePredArgSupervision) {
    ckyPrm.cellType=ChartCellType.CONSTRAINED_FULL;
  }
 else {
    ckyPrm.cellType=ChartCellType.FULL_BREAK_TIES;
  }
  DmvCkyParserPrm prm=new DmvCkyParserPrm();
  prm.objPrm=getDmvObjectivePrm();
  prm.ckyPrm=ckyPrm;
  return prm;
}",0.9889447236180904
131608,"@Override public Collection<UnorderedPair> getRltRowsForLeq(int startFac1,int endFac1,int startFac2,int endFac2,RowType type){
  FactorList leqFactors=rlt.getLeqFactors();
  IntObjectHashMap<IntArrayList> varConsMap=getVarConsMap(leqFactors);
  Set<UnorderedPair> rltRows=new HashSet<UnorderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    int i : Utilities.safeGetList(varConsMap,varIdPair.get1()).elements()) {
      for (      int j : Utilities.safeGetList(varConsMap,varIdPair.get2()).elements()) {
        if ((startFac1 <= i && i < endFac1 && startFac2 <= j && j < endFac2) || (startFac2 <= i && i < endFac2 && startFac1 <= j && j < endFac1)) {
          rltRows.add(new UnorderedPair(i,j));
        }
      }
    }
  }
  return rltRows;
}","@Override public Collection<UnorderedPair> getRltRowsForLeq(int startFac1,int endFac1,int startFac2,int endFac2,RowType type){
  FactorList leqFactors=rlt.getLeqFactors();
  IntObjectHashMap<IntArrayList> varConsMap=getVarConsMap(leqFactors);
  Set<UnorderedPair> rltRows=new HashSet<UnorderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    IntArrayList list1=Utilities.safeGetList(varConsMap,varIdPair.get1());
    IntArrayList list2=Utilities.safeGetList(varConsMap,varIdPair.get2());
    for (int i=0; i < list1.size(); i++) {
      int consId1=list1.getQuick(i);
      for (int j=0; j < list2.size(); j++) {
        int consId2=list2.getQuick(j);
        if ((startFac1 <= consId1 && consId1 < endFac1 && startFac2 <= consId2 && consId2 < endFac2) || (startFac2 <= consId1 && consId1 < endFac2 && startFac1 <= consId2 && consId2 < endFac1)) {
          rltRows.add(new UnorderedPair(consId1,consId2));
        }
      }
    }
  }
  return rltRows;
}",0.6993087557603687
131609,"/** 
 * Construct a multi-map of variable ids to factor indices. For each factor i containing a non-zero coefficient for variable k, add an entry for (k --> i).
 */
private IntObjectHashMap<IntArrayList> getVarConsMap(FactorList factors){
  IntObjectHashMap<IntArrayList> varConsMap=new IntObjectHashMap<IntArrayList>();
  for (int i=0; i < factors.size(); i++) {
    Factor factor=factors.get(i);
    if (boundsOnly && !(factor instanceof BoundFactor)) {
      continue;
    }
    for (    long lveIdx : factor.G.getIndices()) {
      int veIdx=SafeCast.safeLongToInt(lveIdx);
      if (inputVarIds.contains(veIdx)) {
        Utilities.addToList(varConsMap,veIdx,i);
      }
    }
  }
  return varConsMap;
}","/** 
 * Construct a multi-map of variable ids to factor indices. For each factor i containing a non-zero coefficient for variable k, add an entry for (k --> i).
 */
private IntObjectHashMap<IntArrayList> getVarConsMap(FactorList factors){
  IntObjectHashMap<IntArrayList> varConsMap=new IntObjectHashMap<IntArrayList>();
  for (int i=0; i < factors.size(); i++) {
    Factor factor=factors.get(i);
    if (boundsOnly && !(factor instanceof BoundFactor)) {
      continue;
    }
    for (    LongDoubleEntry ve : factor.G) {
      if (ve.get() != 0.0) {
        int veIdx=SafeCast.safeLongToInt(ve.index());
        if (inputVarIds.contains(veIdx)) {
          Utilities.addToList(varConsMap,veIdx,i);
        }
      }
    }
  }
  return varConsMap;
}",0.9184372858122002
131610,"/** 
 * Returns true if the input vector is equal to this one.
 */
public boolean equals(SortedIntDoubleVector other,double delta){
  if (other.size() != this.size()) {
    return false;
  }
  for (  IntDoubleEntry ve : this) {
    if (!Utilities.equals(ve.get(),other.get(ve.index()),delta)) {
      return false;
    }
  }
  for (  IntDoubleEntry ve : other) {
    if (!Utilities.equals(ve.get(),this.get(ve.index()),delta)) {
      return false;
    }
  }
  return true;
}","/** 
 * Returns true if the input vector is equal to this one.
 */
public boolean equals(SortedIntDoubleVector other,double delta){
  SortedIntDoubleVector v1=SortedIntDoubleVector.getWithNoZeroValues(this,delta);
  SortedIntDoubleVector v2=SortedIntDoubleVector.getWithNoZeroValues(other,delta);
  if (v2.size() != v1.size()) {
    return false;
  }
  for (  IntDoubleEntry ve : v1) {
    if (!Utilities.equals(ve.get(),v2.get(ve.index()),delta)) {
      return false;
    }
  }
  for (  IntDoubleEntry ve : v2) {
    if (!Utilities.equals(ve.get(),v1.get(ve.index()),delta)) {
      return false;
    }
  }
  return true;
}",0.8109090909090909
131611,"/** 
 * Returns true if the input vector is equal to this one.
 */
@Override public boolean equals(Object obj){
  if (obj instanceof SortedIntIntVector) {
    SortedIntIntVector other=(SortedIntIntVector)obj;
    if (other.size() != this.size()) {
      return false;
    }
    for (    IntIntEntry ve : this) {
      if (ve.get() != other.get(ve.index())) {
        return false;
      }
    }
    for (    IntIntEntry ve : other) {
      if (ve.get() != this.get(ve.index())) {
        return false;
      }
    }
    return true;
  }
  return false;
}","/** 
 * Returns true if the input vector is equal to this one.
 */
@Override public boolean equals(Object obj){
  if (obj instanceof SortedIntIntVector) {
    SortedIntIntVector other=(SortedIntIntVector)obj;
    SortedIntIntVector v1=SortedIntIntVector.getWithNoZeroValues(this);
    SortedIntIntVector v2=SortedIntIntVector.getWithNoZeroValues(other);
    if (v2.size() != v1.size()) {
      return false;
    }
    for (    IntIntEntry ve : v1) {
      if (ve.get() != v2.get(ve.index())) {
        return false;
      }
    }
    for (    IntIntEntry ve : v2) {
      if (ve.get() != v1.get(ve.index())) {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.8481421647819063
131612,"/** 
 * Returns true if the input vector is equal to this one.
 */
@Override public boolean equals(Object obj){
  if (obj instanceof SortedIntLongVector) {
    SortedIntLongVector other=(SortedIntLongVector)obj;
    if (other.size() != this.size()) {
      return false;
    }
    for (    IntLongEntry ve : this) {
      if (ve.get() != other.get(ve.index())) {
        return false;
      }
    }
    for (    IntLongEntry ve : other) {
      if (ve.get() != this.get(ve.index())) {
        return false;
      }
    }
    return true;
  }
  return false;
}","/** 
 * Returns true if the input vector is equal to this one.
 */
@Override public boolean equals(Object obj){
  if (obj instanceof SortedIntLongVector) {
    SortedIntLongVector other=(SortedIntLongVector)obj;
    SortedIntLongVector v1=SortedIntLongVector.getWithNoZeroValues(this);
    SortedIntLongVector v2=SortedIntLongVector.getWithNoZeroValues(other);
    if (v2.size() != v1.size()) {
      return false;
    }
    for (    IntLongEntry ve : v1) {
      if (ve.get() != v2.get(ve.index())) {
        return false;
      }
    }
    for (    IntLongEntry ve : v2) {
      if (ve.get() != v1.get(ve.index())) {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.8466453674121406
131613,"/** 
 * Returns true if the input vector is equal to this one.
 */
public boolean equals(SortedLongDoubleVector other,double delta){
  if (other.size() != this.size()) {
    return false;
  }
  for (  LongDoubleEntry ve : this) {
    if (!Utilities.equals(ve.get(),other.get(ve.index()),delta)) {
      return false;
    }
  }
  for (  LongDoubleEntry ve : other) {
    if (!Utilities.equals(ve.get(),this.get(ve.index()),delta)) {
      return false;
    }
  }
  return true;
}","/** 
 * Returns true if the input vector is equal to this one.
 */
public boolean equals(SortedLongDoubleVector other,double delta){
  SortedLongDoubleVector v1=SortedLongDoubleVector.getWithNoZeroValues(this,delta);
  SortedLongDoubleVector v2=SortedLongDoubleVector.getWithNoZeroValues(other,delta);
  if (v2.size() != v1.size()) {
    return false;
  }
  for (  LongDoubleEntry ve : v1) {
    if (!Utilities.equals(ve.get(),v2.get(ve.index()),delta)) {
      return false;
    }
  }
  for (  LongDoubleEntry ve : v2) {
    if (!Utilities.equals(ve.get(),v1.get(ve.index()),delta)) {
      return false;
    }
  }
  return true;
}",0.809009009009009
131614,"public static void assertContainsRow(IloLPMatrix rltMat,double[] denseRow,double lb,double ub,double delta) throws IloException {
  int nCols=rltMat.getNcols();
  assertTrue(nCols == denseRow.length);
  int nRows=rltMat.getNrows();
  double[] lbs=new double[nRows];
  double[] ubs=new double[nRows];
  int[][] ind=new int[nRows][];
  double[][] val=new double[nRows][];
  rltMat.getRows(0,nRows,lbs,ubs,ind,val);
  SortedIntDoubleVector expectedRow=new SortedIntDoubleVector(denseRow);
  for (int m=0; m < nRows; m++) {
    SortedIntDoubleVector row=new SortedIntDoubleVector(ind[m],val[m]);
    if (row.equals(expectedRow,delta) && Utilities.equals(lb,lbs[m],delta) && Utilities.equals(ub,ubs[m],delta)) {
      return;
    }
  }
  Assert.fail(""String_Node_Str"" + Arrays.toString(denseRow));
}","public static void assertContainsRow(IloLPMatrix rltMat,double[] denseRow,double lb,double ub,double delta) throws IloException {
  int nCols=rltMat.getNcols();
  assertTrue(nCols == denseRow.length);
  int nRows=rltMat.getNrows();
  double[] lbs=new double[nRows];
  double[] ubs=new double[nRows];
  int[][] ind=new int[nRows][];
  double[][] val=new double[nRows][];
  rltMat.getRows(0,nRows,lbs,ubs,ind,val);
  SortedIntDoubleVector expectedRow=new SortedIntDoubleVector(denseRow);
  for (int m=0; m < nRows; m++) {
    Sort.sortIndexAsc(ind[m],val[m]);
    SortedIntDoubleVector row=new SortedIntDoubleVector(ind[m],val[m]);
    if (row.equals(expectedRow,delta) && Utilities.equals(lb,lbs[m],delta) && Utilities.equals(ub,ubs[m],delta)) {
      return;
    }
  }
  Assert.fail(""String_Node_Str"" + Arrays.toString(denseRow));
}",0.976629766297663
131615,"public static void normalizeLogProps(double[] logProps){
  double logPropSum=Double.NEGATIVE_INFINITY;
  for (int d=0; d < logProps.length; d++) {
    logPropSum=Utilities.logAdd(logPropSum,logProps[d]);
  }
  for (int d=0; d < logProps.length; d++) {
    logProps[d]-=logPropSum;
    assert(!Double.isNaN(logProps[d]));
  }
}","public static void normalizeLogProps(double[] logProps){
  double logPropSum=Double.NEGATIVE_INFINITY;
  for (int d=0; d < logProps.length; d++) {
    logPropSum=Utilities.logAdd(logPropSum,logProps[d]);
  }
  if (logPropSum != Double.NEGATIVE_INFINITY) {
    for (int d=0; d < logProps.length; d++) {
      logProps[d]-=logPropSum;
      assert(!Double.isNaN(logProps[d]));
    }
  }
 else {
    double uniform=Utilities.log(1.0 / (double)logProps.length);
    for (int d=0; d < logProps.length; d++) {
      logProps[d]=uniform;
    }
  }
}",0.7511520737327189
131616,"private void getAsPennTreebankString(int indent,int numOnLine,StringBuilder sb){
  int numSpaces=indent - numOnLine;
  if (numSpaces <= 0 && indent != 0) {
  }
  for (int i=0; i < numSpaces; i++) {
    sb.append(""String_Node_Str"");
  }
  if (isLexical) {
    sb.append(getSymbolStr());
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(getSymbolStr());
    int numNewChars=1 + getSymbolStr().length();
    if (leftChild != null) {
      leftChild.getAsPennTreebankString(indent + numNewChars + 1,indent + numNewChars,sb);
    }
    if (rightChild != null) {
      sb.append(""String_Node_Str"");
      rightChild.getAsPennTreebankString(indent + numNewChars + 1,0,sb);
    }
    sb.append(""String_Node_Str"");
  }
}","private void getAsPennTreebankString(int indent,int numOnLine,StringBuilder sb){
  int numSpaces=indent - numOnLine;
  for (int i=0; i < numSpaces; i++) {
    sb.append(""String_Node_Str"");
  }
  if (isLexical) {
    sb.append(getSymbolStr());
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(getSymbolStr());
    int numNewChars=1 + getSymbolStr().length();
    if (leftChild != null) {
      leftChild.getAsPennTreebankString(indent + numNewChars + 1,indent + numNewChars,sb);
    }
    if (rightChild != null) {
      sb.append(""String_Node_Str"");
      rightChild.getAsPennTreebankString(indent + numNewChars + 1,0,sb);
    }
    sb.append(""String_Node_Str"");
  }
}",0.9693076374018558
131617,"public void runEvalb(File goldTrees,File testTrees,File logFile){
  String[] cmd=new String[]{evalbFile.getAbsolutePath(),""String_Node_Str"",prmFile.getAbsolutePath(),goldTrees.getAbsolutePath(),testTrees.getAbsolutePath()};
  Command.runCommand(cmd,logFile,new File(""String_Node_Str""));
}","public void runEvalb(File goldTrees,File testTrees,File logFile){
  String[] cmd=new String[]{evalbFile.getAbsolutePath(),""String_Node_Str"",prmFile.getAbsolutePath(),goldTrees.getAbsolutePath(),testTrees.getAbsolutePath()};
  Command.runCommand(cmd,logFile,new File(""String_Node_Str""));
  Files.cat(logFile);
}",0.9632107023411371
131618,"private void getAsPennTreebankString(int indent,int numOnLine,StringBuilder sb){
  int numSpaces=indent - numOnLine;
  if (numSpaces <= 0 && indent != 0) {
  }
  for (int i=0; i < numSpaces; i++) {
    sb.append(""String_Node_Str"");
  }
  if (isLexical) {
    sb.append(getSymbolStr());
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(getSymbolStr());
    int numNewChars=1 + getSymbolStr().length();
    for (int i=0; i < children.size(); i++) {
      NaryTree child=children.get(i);
      if (i == 0) {
        child.getAsPennTreebankString(indent + numNewChars + 1,indent + numNewChars,sb);
      }
 else {
        sb.append(""String_Node_Str"");
        child.getAsPennTreebankString(indent + numNewChars + 1,0,sb);
      }
    }
    sb.append(""String_Node_Str"");
  }
}","private void getAsPennTreebankString(int indent,int numOnLine,StringBuilder sb){
  int numSpaces=indent - numOnLine;
  for (int i=0; i < numSpaces; i++) {
    sb.append(""String_Node_Str"");
  }
  if (isLexical) {
    sb.append(getSymbolStr());
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(getSymbolStr());
    int numNewChars=1 + getSymbolStr().length();
    for (int i=0; i < children.size(); i++) {
      NaryTree child=children.get(i);
      if (i == 0) {
        child.getAsPennTreebankString(indent + numNewChars + 1,indent + numNewChars,sb);
      }
 else {
        sb.append(""String_Node_Str"");
        child.getAsPennTreebankString(indent + numNewChars + 1,0,sb);
      }
    }
    sb.append(""String_Node_Str"");
  }
}",0.9717291255752796
131619,"public void run() throws IOException {
  Alphabet<String> lexAlphabet=new Alphabet<String>();
  Alphabet<String> ntAlphabet=new Alphabet<String>();
  log.info(""String_Node_Str"");
  CnfGrammarBuilder builder=new CnfGrammarBuilder(lexAlphabet,ntAlphabet);
  builder.loadFromFile(grammar);
  CnfGrammar grammar=builder.getGrammar();
  log.info(""String_Node_Str"" + ntAlphabet.size());
  log.info(""String_Node_Str"" + lexAlphabet.size());
  log.info(""String_Node_Str"");
  lexAlphabet.startGrowth();
  ntAlphabet.startGrowth();
  log.info(""String_Node_Str"" + train);
  NaryTreebank naryTrees=new NaryTreebank();
  List<File> mrgFiles=Utilities.getMatchingFiles(train,""String_Node_Str"");
  for (  File mrgFile : mrgFiles) {
    BufferedReader reader=new BufferedReader(new FileReader(mrgFile));
    NaryTreebank tmpTrees=NaryTreebank.readTreesInPtbFormat(lexAlphabet,ntAlphabet,reader);
    for (    NaryTree tree : tmpTrees) {
      if (tree.getSentence().length <= maxSentenceLength) {
        naryTrees.add(tree);
      }
      if (naryTrees.size() >= maxNumSentences) {
        break;
      }
    }
    if (naryTrees.size() >= maxNumSentences) {
      break;
    }
    reader.close();
  }
  log.info(""String_Node_Str"");
  lexAlphabet.stopGrowth();
  ntAlphabet.stopGrowth();
  log.info(""String_Node_Str"" + ntAlphabet.size());
  log.info(""String_Node_Str"" + lexAlphabet.size());
  log.info(""String_Node_Str"");
  final int nullElement=ntAlphabet.lookupIndex(""String_Node_Str"");
  NaryTreeNodeFilter nullElementFilter=new NaryTreeNodeFilter(){
    @Override public boolean accept(    NaryTree node){
      if (node.getSymbol() == nullElement) {
        return false;
      }
 else       if (!node.isLexical() && node.isLeaf()) {
        return false;
      }
      return true;
    }
  }
;
  for (int i=0; i < naryTrees.size(); i++) {
    NaryTree tree=naryTrees.get(i);
    tree.postOrderFilterNodes(nullElementFilter);
    naryTrees.set(i,tree);
  }
  log.info(""String_Node_Str"");
  LambdaOne<NaryTree> ftRemover=new LambdaOne<NaryTree>(){
    private final Pattern functionTag=Pattern.compile(""String_Node_Str"");
    @Override public void call(    NaryTree node){
      if (!node.isLexical()) {
        Alphabet<String> alphabet=node.getAlphabet();
        int p=node.getSymbol();
        String pStr=alphabet.lookupObject(p);
        pStr=functionTag.matcher(pStr).replaceAll(""String_Node_Str"");
        node.setSymbol(alphabet.lookupIndex(pStr));
      }
    }
  }
;
  for (int i=0; i < naryTrees.size(); i++) {
    NaryTree tree=naryTrees.get(i);
    tree.postOrderTraversal(ftRemover);
    naryTrees.set(i,tree);
  }
  if (treeFile != null) {
    log.info(""String_Node_Str"" + treeFile);
    naryTrees.write(treeFile);
  }
  log.info(""String_Node_Str"" + naryTrees.size() + ""String_Node_Str"");
  BinaryTreebank binaryTrees=new BinaryTreebank();
  for (  NaryTree tree : naryTrees) {
    binaryTrees.add(tree.leftBinarize(ntAlphabet));
  }
  naryTrees=null;
  log.info(""String_Node_Str"" + binaryTrees.size() + ""String_Node_Str"");
  BinaryTreebank binaryParses=new BinaryTreebank();
  Timer timer=new Timer();
  timer.start();
  for (  BinaryTree tree : binaryTrees) {
    int[] sent=tree.getSentence();
    Chart chart=CkyPcfgParser.parseSentence(sent,grammar);
    Pair<BinaryTree,Double> pair=chart.getViterbiParse();
    binaryParses.add(pair.get1());
    timer.split();
    log.debug(""String_Node_Str"" + timer.avgSec());
  }
  timer.stop();
  log.info(""String_Node_Str"");
  LambdaOne<BinaryTree> refineRemover=new LambdaOne<BinaryTree>(){
    private final Pattern refine=Pattern.compile(""String_Node_Str"");
    @Override public void call(    BinaryTree node){
      if (!node.isLexical()) {
        Alphabet<String> alphabet=node.getAlphabet();
        int p=node.getSymbol();
        String pStr=alphabet.lookupObject(p);
        pStr=refine.matcher(pStr).replaceAll(""String_Node_Str"");
        node.setSymbol(alphabet.lookupIndex(pStr));
      }
    }
  }
;
  for (int i=0; i < binaryParses.size(); i++) {
    BinaryTree tree=binaryParses.get(i);
    tree.postOrderTraversal(refineRemover);
    binaryParses.set(i,tree);
  }
  log.info(""String_Node_Str"");
  NaryTreebank naryParses=new NaryTreebank();
  for (  BinaryTree tree : binaryParses) {
    naryParses.add(tree.collapseToNary(ntAlphabet));
  }
  binaryTrees=null;
  if (parseFile != null) {
    log.info(""String_Node_Str"" + parseFile);
    naryParses.write(parseFile);
  }
  if (evalbDir != null) {
    Evalb evalb=new Evalb(evalbDir);
    evalb.runEvalb(treeFile,parseFile,new File(""String_Node_Str""));
  }
}","public void run() throws IOException {
  Alphabet<String> lexAlphabet=new Alphabet<String>();
  Alphabet<String> ntAlphabet=new Alphabet<String>();
  log.info(""String_Node_Str"");
  CnfGrammarBuilder builder=new CnfGrammarBuilder(lexAlphabet,ntAlphabet);
  builder.loadFromFile(grammar);
  CnfGrammar grammar=builder.getGrammar();
  log.info(""String_Node_Str"" + ntAlphabet.size());
  log.info(""String_Node_Str"" + lexAlphabet.size());
  log.info(""String_Node_Str"");
  lexAlphabet.startGrowth();
  ntAlphabet.startGrowth();
  log.info(""String_Node_Str"" + train);
  NaryTreebank naryTrees=new NaryTreebank();
  List<File> mrgFiles=Utilities.getMatchingFiles(train,""String_Node_Str"");
  for (  File mrgFile : mrgFiles) {
    BufferedReader reader=new BufferedReader(new FileReader(mrgFile));
    NaryTreebank tmpTrees=NaryTreebank.readTreesInPtbFormat(lexAlphabet,ntAlphabet,reader);
    for (    NaryTree tree : tmpTrees) {
      if (tree.getSentence().length <= maxSentenceLength) {
        naryTrees.add(tree);
      }
      if (naryTrees.size() >= maxNumSentences) {
        break;
      }
    }
    if (naryTrees.size() >= maxNumSentences) {
      break;
    }
    reader.close();
  }
  log.info(""String_Node_Str"");
  lexAlphabet.stopGrowth();
  ntAlphabet.stopGrowth();
  log.info(""String_Node_Str"" + ntAlphabet.size());
  log.info(""String_Node_Str"" + lexAlphabet.size());
  log.info(""String_Node_Str"");
  final int nullElement=ntAlphabet.lookupIndex(""String_Node_Str"");
  NaryTreeNodeFilter nullElementFilter=new NaryTreeNodeFilter(){
    @Override public boolean accept(    NaryTree node){
      if (node.getSymbol() == nullElement) {
        return false;
      }
 else       if (!node.isLexical() && node.isLeaf()) {
        return false;
      }
      return true;
    }
  }
;
  for (int i=0; i < naryTrees.size(); i++) {
    NaryTree tree=naryTrees.get(i);
    tree.postOrderFilterNodes(nullElementFilter);
    naryTrees.set(i,tree);
  }
  log.info(""String_Node_Str"");
  LambdaOne<NaryTree> ftRemover=new LambdaOne<NaryTree>(){
    private final Pattern functionTag=Pattern.compile(""String_Node_Str"");
    @Override public void call(    NaryTree node){
      if (!node.isLexical()) {
        Alphabet<String> alphabet=node.getAlphabet();
        int p=node.getSymbol();
        String pStr=alphabet.lookupObject(p);
        pStr=functionTag.matcher(pStr).replaceAll(""String_Node_Str"");
        node.setSymbol(alphabet.lookupIndex(pStr));
      }
    }
  }
;
  for (int i=0; i < naryTrees.size(); i++) {
    NaryTree tree=naryTrees.get(i);
    tree.postOrderTraversal(ftRemover);
    naryTrees.set(i,tree);
  }
  if (treeFile != null) {
    log.info(""String_Node_Str"" + treeFile);
    naryTrees.writeTreesInOneLineFormat(treeFile);
  }
  log.info(""String_Node_Str"" + naryTrees.size() + ""String_Node_Str"");
  BinaryTreebank binaryTrees=new BinaryTreebank();
  for (  NaryTree tree : naryTrees) {
    binaryTrees.add(tree.leftBinarize(ntAlphabet));
  }
  naryTrees=null;
  log.info(""String_Node_Str"" + binaryTrees.size() + ""String_Node_Str"");
  BinaryTreebank binaryParses=new BinaryTreebank();
  Timer timer=new Timer();
  timer.start();
  for (  BinaryTree tree : binaryTrees) {
    int[] sent=tree.getSentence();
    Chart chart=CkyPcfgParser.parseSentence(sent,grammar);
    Pair<BinaryTree,Double> pair=chart.getViterbiParse();
    binaryParses.add(pair.get1());
    timer.split();
    log.debug(""String_Node_Str"" + timer.avgSec());
  }
  timer.stop();
  log.info(""String_Node_Str"");
  LambdaOne<BinaryTree> refineRemover=new LambdaOne<BinaryTree>(){
    private final Pattern refine=Pattern.compile(""String_Node_Str"");
    @Override public void call(    BinaryTree node){
      if (!node.isLexical()) {
        Alphabet<String> alphabet=node.getAlphabet();
        int p=node.getSymbol();
        String pStr=alphabet.lookupObject(p);
        pStr=refine.matcher(pStr).replaceAll(""String_Node_Str"");
        node.setSymbol(alphabet.lookupIndex(pStr));
      }
    }
  }
;
  for (int i=0; i < binaryParses.size(); i++) {
    BinaryTree tree=binaryParses.get(i);
    tree.postOrderTraversal(refineRemover);
    binaryParses.set(i,tree);
  }
  log.info(""String_Node_Str"");
  NaryTreebank naryParses=new NaryTreebank();
  for (  BinaryTree tree : binaryParses) {
    naryParses.add(tree.collapseToNary(ntAlphabet));
  }
  binaryTrees=null;
  if (parseFile != null) {
    log.info(""String_Node_Str"" + parseFile);
    naryParses.writeTreesInOneLineFormat(parseFile);
  }
  if (evalbDir != null) {
    Evalb evalb=new Evalb(evalbDir);
    evalb.runEvalb(treeFile,parseFile,new File(""String_Node_Str""));
  }
}",0.9956436506207798
131620,"public void setRandom(){
  LambdaOneToOne<Double,Double> lambda=new LambdaOneToOne<Double,Double>(){
    @Override public Double call(    Double obj){
      return Prng.nextDouble();
    }
  }
;
  applyRoot(lambda);
  applyChild(lambda);
  applyStop(lambda);
}","public void setRandom(){
  LambdaOneToOne<Double,Double> lambda=new LambdaOneToOne<Double,Double>(){
    @Override public Double call(    Double obj){
      return Prng.nextDouble();
    }
  }
;
  applyOldOrder(lambda);
}",0.8856548856548857
131621,"public void logNormalize(){
  Multinomials.normalizeLogProps(root);
  for (int c=0; c < numTags; c++) {
    for (int dir=0; dir < 2; dir++) {
      for (int val=0; val < 2; val++) {
        for (int sc=0; sc < 2; sc++) {
          Multinomials.normalizeLogProps(decision[c][dir][val]);
        }
      }
    }
  }
  double[][] logSums=new double[numTags][2];
  for (int c=0; c < numTags; c++) {
    for (int p=0; p < numTags; p++) {
      for (int dir=0; dir < 2; dir++) {
        logSums[p][dir]=Utilities.logAdd(logSums[p][dir],child[c][p][dir]);
      }
    }
  }
  for (int c=0; c < numTags; c++) {
    for (int p=0; p < numTags; p++) {
      for (int dir=0; dir < 2; dir++) {
        child[c][p][dir]-=logSums[p][dir];
        assert(!Double.isNaN(child[c][p][dir]));
      }
    }
  }
}","public void logNormalize(){
  Multinomials.normalizeLogProps(root);
  for (int c=0; c < numTags; c++) {
    for (int dir=0; dir < 2; dir++) {
      for (int val=0; val < 2; val++) {
        for (int sc=0; sc < 2; sc++) {
          Multinomials.normalizeLogProps(decision[c][dir][val]);
        }
      }
    }
  }
  double[][] logSums=new double[numTags][2];
  for (int p=0; p < numTags; p++) {
    Arrays.fill(logSums[p],Double.NEGATIVE_INFINITY);
  }
  for (int c=0; c < numTags; c++) {
    for (int p=0; p < numTags; p++) {
      for (int dir=0; dir < 2; dir++) {
        logSums[p][dir]=Utilities.logAdd(logSums[p][dir],child[c][p][dir]);
      }
    }
  }
  double uniform=Utilities.log(1.0 / numTags);
  for (int c=0; c < numTags; c++) {
    for (int p=0; p < numTags; p++) {
      for (int dir=0; dir < 2; dir++) {
        if (logSums[p][dir] != Double.NEGATIVE_INFINITY) {
          child[c][p][dir]-=logSums[p][dir];
        }
 else {
          child[c][p][dir]=uniform;
        }
        assert(!Double.isNaN(child[c][p][dir]));
      }
    }
  }
}",0.787027027027027
131622,"public void assertLogNormalized(double delta){
  Multinomials.assertLogNormalized(root,delta);
  for (int c=0; c < numTags; c++) {
    for (int dir=0; dir < 2; dir++) {
      for (int val=0; val < 2; val++) {
        for (int sc=0; sc < 2; sc++) {
          Multinomials.assertLogNormalized(decision[c][dir][val],delta);
        }
      }
    }
  }
  double[][] logSums=new double[numTags][2];
  for (int c=0; c < numTags; c++) {
    for (int p=0; p < numTags; p++) {
      for (int dir=0; dir < 2; dir++) {
        logSums[p][dir]=Utilities.logAdd(logSums[p][dir],child[c][p][dir]);
      }
    }
  }
  for (int p=0; p < numTags; p++) {
    for (int dir=0; dir < 2; dir++) {
      assert(Utilities.equals(0.0,logSums[p][dir],delta));
    }
  }
}","public void assertLogNormalized(double delta){
  Multinomials.assertLogNormalized(root,delta);
  for (int c=0; c < numTags; c++) {
    for (int dir=0; dir < 2; dir++) {
      for (int val=0; val < 2; val++) {
        for (int sc=0; sc < 2; sc++) {
          Multinomials.assertLogNormalized(decision[c][dir][val],delta);
        }
      }
    }
  }
  double[][] logSums=new double[numTags][2];
  for (int p=0; p < numTags; p++) {
    Arrays.fill(logSums[p],Double.NEGATIVE_INFINITY);
  }
  for (int c=0; c < numTags; c++) {
    for (int p=0; p < numTags; p++) {
      for (int dir=0; dir < 2; dir++) {
        logSums[p][dir]=Utilities.logAdd(logSums[p][dir],child[c][p][dir]);
      }
    }
  }
  for (int p=0; p < numTags; p++) {
    for (int dir=0; dir < 2; dir++) {
      assert(Utilities.equals(0.0,logSums[p][dir],delta));
    }
  }
}",0.89281210592686
131623,"private void addToQueue(LinkedList<NaryTree> queue,BinaryTree child,Alphabet<String> ntAlphabet){
  if (child == null) {
    return;
  }
  String parentStr=alphabet.lookupObject(child.getParent());
  if (GrammarConstants.isBinarized(parentStr)) {
    addToQueue(queue,child.leftChild,ntAlphabet);
    addToQueue(queue,child.rightChild,ntAlphabet);
  }
 else {
    queue.add(child.collapseToNary(ntAlphabet));
  }
}","private static void addToQueue(LinkedList<NaryTree> queue,BinaryTree child,Alphabet<String> ntAlphabet){
  if (child == null) {
    return;
  }
  String parentStr=child.alphabet.lookupObject(child.getParent());
  if (GrammarConstants.isBinarized(parentStr)) {
    addToQueue(queue,child.leftChild,ntAlphabet);
    addToQueue(queue,child.rightChild,ntAlphabet);
  }
 else {
    queue.add(child.collapseToNary(ntAlphabet));
  }
}",0.9845422116527944
131624,"@Override public DepTreebank getViterbiParse(SentenceCollection sentences,Model genericModel){
  DmvModel model=(DmvModel)genericModel;
  DepTreebank treebank=new DepTreebank(model.getTagAlphabet());
  parseWeight=0.0;
  for (  Sentence sentence : sentences) {
    Pair<DepTree,Double> pair=parse(sentence,model);
    DepTree tree=pair.get1();
    parseWeight+=pair.get2();
    treebank.add(tree);
  }
  return treebank;
}","@Override public DepTreebank getViterbiParse(SentenceCollection sentences,Model genericModel){
  DmvTrainCorpus corpus=new DmvTrainCorpus(sentences);
  return getViterbiParse(corpus,genericModel);
}",0.4032258064516129
131625,"public Pair<DepTree,Double> parse(Sentence sentence,DepSentenceDist sd){
  int numWords=sd.depInst.postags.length;
  int[] parents=new int[numWords];
  double parseWeight=CKYParser.parseSentence(sd,parents);
  for (int i=0; i < parents.length; i++) {
    parents[i]--;
  }
  DepTree tree=new DepTree(sentence,parents,true);
  return new Pair<DepTree,Double>(tree,parseWeight);
}","private Pair<DepTree,Double> parse(Sentence sentence,DepSentenceDist sd){
  int numWords=sd.depInst.postags.length;
  int[] parents=new int[numWords];
  double parseWeight=CKYParser.parseSentence(sd,parents);
  for (int i=0; i < parents.length; i++) {
    parents[i]--;
  }
  DepTree tree=new DepTree(sentence,parents,true);
  return new Pair<DepTree,Double>(tree,parseWeight);
}",0.9854689564068692
131626,"@Override public IntDoubleEntry next(){
  return new IntDoubleEntryImpl(i);
}","@Override public IntDoubleEntry next(){
  entry.i++;
  return entry;
}",0.7755102040816326
131627,"@Override public boolean hasNext(){
  return i < used;
}","@Override public boolean hasNext(){
  return entry.i + 1 < used;
}",0.918032786885246
131628,"public void add(int idx,double val){
  double curVal=getWithDefault(idx,0.0);
  put(idx,curVal + val);
}","public void add(SortedIntDoubleVector other){
  for (  IntDoubleEntry ve : other) {
    add(ve.index(),ve.get());
  }
}",0.4304932735426009
131629,"@Override public IntIntEntry next(){
  return new IntIntEntryImpl(i);
}","@Override public IntIntEntry next(){
  entry.i++;
  return entry;
}",0.782608695652174
131630,"@Override public boolean hasNext(){
  return i < used;
}","@Override public boolean hasNext(){
  return entry.i + 1 < used;
}",0.918032786885246
131631,"public void add(int idx,int val){
  int curVal=getWithDefault(idx,0);
  put(idx,curVal + val);
}","public void add(SortedIntIntVector other){
  for (  IntIntEntry ve : other) {
    add(ve.index(),ve.get());
  }
}",0.3732057416267942
131632,"@Override public IntLongEntry next(){
  return new IntLongEntryImpl(i);
}","@Override public IntLongEntry next(){
  entry.i++;
  return entry;
}",0.7801418439716312
131633,"@Override public boolean hasNext(){
  return i < used;
}","@Override public boolean hasNext(){
  return entry.i + 1 < used;
}",0.918032786885246
131634,"private void evalAndWrite(DmvModel model,DepTreebank trainTreebank,String datasetName) throws IOException {
  ViterbiParser parser=TrainerFactory.getEvalParser();
  log.info(""String_Node_Str"" + datasetName);
  Evaluator trainEval=new DependencyParserEvaluator(parser,trainTreebank,datasetName);
  trainEval.evaluate(model);
  trainEval.print();
  if (trainOut != null) {
    DepTreebank trainParses=trainEval.getParses();
    if (trainType == DatasetType.CONLL_X) {
      CoNLLXWriter cw=new CoNLLXWriter(trainOut);
      for (int i=0; i < trainParses.size(); i++) {
        DepTree parse=trainParses.get(i);
        DepTree goldTree=trainTreebank.get(i);
        CoNLLXSentence sent=((CoNLLXDepTree)goldTree).getCoNLLXSentence();
        sent=new CoNLLXSentence(sent);
        sent.setHeadsFromParents(parse.getParents());
        cw.write(sent);
      }
      cw.close();
    }
 else     if (trainType == DatasetType.CONLL_2009) {
      CoNLL09Writer cw=new CoNLL09Writer(trainOut);
      for (int i=0; i < trainParses.size(); i++) {
        DepTree parse=trainParses.get(i);
        DepTree goldTree=trainTreebank.get(i);
        CoNLL09Sentence sent=((CoNLL09DepTree)goldTree).getCoNLL09Sentence();
        sent=new CoNLL09Sentence(sent);
        sent.setPheadsFromParents(parse.getParents());
        cw.write(sent);
      }
      cw.close();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + trainType);
    }
  }
}","private void evalAndWrite(DmvModel model,DepTreebank trainTreebank,String datasetName,File trainOut,DatasetType trainType) throws IOException {
  ViterbiParser parser=TrainerFactory.getEvalParser();
  log.info(""String_Node_Str"" + datasetName);
  Evaluator trainEval=new DependencyParserEvaluator(parser,trainTreebank,datasetName);
  trainEval.evaluate(model);
  trainEval.print();
  if (trainOut != null) {
    DepTreebank trainParses=trainEval.getParses();
    if (trainType == DatasetType.CONLL_X) {
      CoNLLXWriter cw=new CoNLLXWriter(trainOut);
      for (int i=0; i < trainParses.size(); i++) {
        DepTree parse=trainParses.get(i);
        DepTree goldTree=trainTreebank.get(i);
        CoNLLXSentence sent=((CoNLLXDepTree)goldTree).getCoNLLXSentence();
        sent=new CoNLLXSentence(sent);
        sent.setHeadsFromParents(parse.getParents());
        cw.write(sent);
      }
      cw.close();
    }
 else     if (trainType == DatasetType.CONLL_2009) {
      CoNLL09Writer cw=new CoNLL09Writer(trainOut);
      for (int i=0; i < trainParses.size(); i++) {
        DepTree parse=trainParses.get(i);
        DepTree goldTree=trainTreebank.get(i);
        CoNLL09Sentence sent=((CoNLL09DepTree)goldTree).getCoNLL09Sentence();
        sent=new CoNLL09Sentence(sent);
        sent.setPheadsFromParents(parse.getParents());
        cw.write(sent);
      }
      cw.close();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + trainType);
    }
  }
}",0.9876373626373628
131635,"public void run() throws ParseException, IOException {
  DepTreebank trainTreebank;
  DmvModel goldModel=null;
  if (trainType == DatasetType.PTB || trainType == DatasetType.CONLL_X || trainType == DatasetType.CONLL_2009) {
    log.info(""String_Node_Str"" + train);
    Alphabet<Label> alphabet=new Alphabet<Label>();
    trainTreebank=DepTreebankReader.getTreebank(train,trainType,DepTreebankReader.maxSentenceLength,alphabet);
  }
 else   if (trainType == DatasetType.SYNTHETIC) {
    if (synthetic == null) {
      throw new ParseException(""String_Node_Str"");
    }
    if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getThreePosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
    }
 else {
      throw new ParseException(""String_Node_Str"" + synthetic);
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(goldModel,syntheticSeed);
    trainTreebank=generator.getTreebank(DepTreebankReader.maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  DmvTrainCorpus trainCorpus=new DmvTrainCorpus(trainTreebank,propSupervised);
  log.info(""String_Node_Str"" + trainCorpus.getNumUnlabeled());
  log.info(""String_Node_Str"" + trainCorpus.getNumLabeled());
  log.info(""String_Node_Str"" + trainTreebank.size());
  log.info(""String_Node_Str"" + trainTreebank.getNumTokens());
  log.info(""String_Node_Str"" + trainTreebank.getNumTypes());
  printSentences(trainTreebank);
  DepTreebank testTreebank=null;
  if (test != null) {
    log.info(""String_Node_Str"" + test);
    testTreebank=DepTreebankReader.getTreebank(test,testType,maxSentenceLengthTest,trainTreebank.getAlphabet());
    log.info(""String_Node_Str"" + testTreebank.size());
    log.info(""String_Node_Str"" + testTreebank.getNumTokens());
    log.info(""String_Node_Str"" + testTreebank.getNumTypes());
  }
  if (relaxOnly) {
    DmvSolFactory initSolFactory=new DmvSolFactory(TrainerFactory.getDmvSolFactoryPrm(trainTreebank,goldModel));
    DmvSolution initSol=initSolFactory.getInitFeasSol(trainCorpus);
    DmvRelaxationFactory relaxFactory=TrainerFactory.getDmvRelaxationFactory();
    DmvRelaxation relax=relaxFactory.getInstance(trainCorpus,initSol);
    DmvSolution initBoundsSol=updateBounds(trainCorpus,relax,trainTreebank,goldModel);
    Timer timer=new Timer();
    timer.start();
    DmvProblemNode rootNode=new DmvProblemNode(null);
    DmvRelaxedSolution relaxSol=(DmvRelaxedSolution)relax.getRelaxedSolution(rootNode);
    timer.stop();
    log.info(""String_Node_Str"" + timer.totMs());
    log.info(""String_Node_Str"" + relaxSol.getScore());
    if (initBoundsSol != null) {
      log.info(""String_Node_Str"" + initBoundsSol.getScore());
      log.info(""String_Node_Str"" + Math.abs(relaxSol.getScore() - initBoundsSol.getScore()) / Math.abs(initBoundsSol.getScore()));
    }
    DmvProjectorFactory projectorFactory=TrainerFactory.getDmvProjectorFactory(trainTreebank,goldModel);
    DmvProjector dmvProjector=(DmvProjector)projectorFactory.getInstance(trainCorpus,relax);
    DmvSolution projSol=dmvProjector.getProjectedDmvSolution(relaxSol);
    if (projSol != null) {
      log.info(""String_Node_Str"" + projSol.getScore());
    }
 else {
      log.warn(""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"");
    Trainer trainer=TrainerFactory.getTrainer(trainTreebank,goldModel);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(trainCorpus);
      updateBounds(trainCorpus,bnb.getRootRelaxation(),trainTreebank,goldModel);
      bnb.train();
    }
 else {
      trainer.train(trainCorpus);
    }
    DmvModel model=(DmvModel)trainer.getModel();
    evalAndWrite(model,trainTreebank,""String_Node_Str"");
    if (testTreebank != null) {
      evalAndWrite(model,testTreebank,""String_Node_Str"");
    }
    if (printModel != null) {
      BufferedWriter writer=new BufferedWriter(new FileWriter(printModel));
      writer.write(""String_Node_Str"");
      writer.write(model.toString());
      writer.close();
    }
  }
}","public void run() throws ParseException, IOException {
  DepTreebank trainTreebank;
  DmvModel goldModel=null;
  if (trainType == DatasetType.PTB || trainType == DatasetType.CONLL_X || trainType == DatasetType.CONLL_2009) {
    log.info(""String_Node_Str"" + train);
    Alphabet<Label> alphabet=new Alphabet<Label>();
    trainTreebank=DepTreebankReader.getTreebank(train,trainType,DepTreebankReader.maxSentenceLength,alphabet);
  }
 else   if (trainType == DatasetType.SYNTHETIC) {
    if (synthetic == null) {
      throw new ParseException(""String_Node_Str"");
    }
    if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getThreePosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      goldModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
    }
 else {
      throw new ParseException(""String_Node_Str"" + synthetic);
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(goldModel,syntheticSeed);
    trainTreebank=generator.getTreebank(DepTreebankReader.maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  DmvTrainCorpus trainCorpus=new DmvTrainCorpus(trainTreebank,propSupervised);
  log.info(""String_Node_Str"" + trainCorpus.getNumUnlabeled());
  log.info(""String_Node_Str"" + trainCorpus.getNumLabeled());
  log.info(""String_Node_Str"" + trainTreebank.size());
  log.info(""String_Node_Str"" + trainTreebank.getNumTokens());
  log.info(""String_Node_Str"" + trainTreebank.getNumTypes());
  printSentences(trainTreebank);
  DepTreebank testTreebank=null;
  if (test != null) {
    log.info(""String_Node_Str"" + test);
    testTreebank=DepTreebankReader.getTreebank(test,testType,maxSentenceLengthTest,trainTreebank.getAlphabet());
    log.info(""String_Node_Str"" + testTreebank.size());
    log.info(""String_Node_Str"" + testTreebank.getNumTokens());
    log.info(""String_Node_Str"" + testTreebank.getNumTypes());
  }
  if (relaxOnly) {
    DmvSolFactory initSolFactory=new DmvSolFactory(TrainerFactory.getDmvSolFactoryPrm(trainTreebank,goldModel));
    DmvSolution initSol=initSolFactory.getInitFeasSol(trainCorpus);
    DmvRelaxationFactory relaxFactory=TrainerFactory.getDmvRelaxationFactory();
    DmvRelaxation relax=relaxFactory.getInstance(trainCorpus,initSol);
    DmvSolution initBoundsSol=updateBounds(trainCorpus,relax,trainTreebank,goldModel);
    Timer timer=new Timer();
    timer.start();
    DmvProblemNode rootNode=new DmvProblemNode(null);
    DmvRelaxedSolution relaxSol=(DmvRelaxedSolution)relax.getRelaxedSolution(rootNode);
    timer.stop();
    log.info(""String_Node_Str"" + timer.totMs());
    log.info(""String_Node_Str"" + relaxSol.getScore());
    if (initBoundsSol != null) {
      log.info(""String_Node_Str"" + initBoundsSol.getScore());
      log.info(""String_Node_Str"" + Math.abs(relaxSol.getScore() - initBoundsSol.getScore()) / Math.abs(initBoundsSol.getScore()));
    }
    DmvProjectorFactory projectorFactory=TrainerFactory.getDmvProjectorFactory(trainTreebank,goldModel);
    DmvProjector dmvProjector=(DmvProjector)projectorFactory.getInstance(trainCorpus,relax);
    DmvSolution projSol=dmvProjector.getProjectedDmvSolution(relaxSol);
    if (projSol != null) {
      log.info(""String_Node_Str"" + projSol.getScore());
    }
 else {
      log.warn(""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"");
    Trainer trainer=TrainerFactory.getTrainer(trainTreebank,goldModel);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(trainCorpus);
      updateBounds(trainCorpus,bnb.getRootRelaxation(),trainTreebank,goldModel);
      bnb.train();
    }
 else {
      trainer.train(trainCorpus);
    }
    DmvModel model=(DmvModel)trainer.getModel();
    evalAndWrite(model,trainTreebank,""String_Node_Str"",trainOut,trainType);
    if (testTreebank != null) {
      evalAndWrite(model,testTreebank,""String_Node_Str"",testOut,testType);
    }
    if (printModel != null) {
      BufferedWriter writer=new BufferedWriter(new FileWriter(printModel));
      writer.write(""String_Node_Str"");
      writer.write(model.toString());
      writer.close();
    }
  }
}",0.995768688293371
131636,"public static Chart parseSentence(int[] sent,CnfGrammar grammar){
  Chart chart=new Chart(sent,grammar);
  for (int i=0; i <= sent.length - 1; i++) {
    for (    Rule r : grammar.getLexicalRulesWithChild(sent[i])) {
      double score=r.getScore();
      chart.updateCell(i,i + 1,r,score);
    }
  }
  for (int width=1; width <= sent.length; width++) {
    for (int start=0; start <= sent.length - width; start++) {
      int end=start + width;
      for (int mid=start + 1; mid <= end - 1; mid++) {
        for (        final int leftChildNt : chart.getNonTerminals(start,mid)) {
          for (          final int rightChildNt : chart.getNonTerminals(mid,end)) {
            for (            final Rule r : grammar.getBinaryRulesWithChildren(leftChildNt,rightChildNt)) {
              double score=r.getScore() + chart.getMaxScore(start,mid,r.getLeftChild()) + chart.getMaxScore(mid,end,r.getRightChild());
              chart.updateCell(start,mid,end,r,score);
            }
          }
        }
      }
      for (      final int parentNt : chart.getNonTerminals(start,end)) {
        for (        Rule r : grammar.getUnaryRulesWithChild(parentNt)) {
          double score=r.getScore();
          chart.updateCell(start,end,r,score);
        }
      }
    }
  }
  return chart;
}","public static Chart parseSentence(int[] sent,CnfGrammar grammar){
  Chart chart=new Chart(sent,grammar);
  for (int i=0; i <= sent.length - 1; i++) {
    for (    Rule r : grammar.getLexicalRulesWithChild(sent[i])) {
      double score=r.getScore();
      chart.updateCell(i,i + 1,r,score);
    }
  }
  for (int width=1; width <= sent.length; width++) {
    for (int start=0; start <= sent.length - width; start++) {
      int end=start + width;
      for (int mid=start + 1; mid <= end - 1; mid++) {
        for (        final int leftChildNt : chart.getNonTerminals(start,mid)) {
          for (          final int rightChildNt : chart.getNonTerminals(mid,end)) {
            for (            final Rule r : grammar.getBinaryRulesWithChildren(leftChildNt,rightChildNt)) {
              double score=r.getScore() + chart.getMaxScore(start,mid,r.getLeftChild()) + chart.getMaxScore(mid,end,r.getRightChild());
              chart.updateCell(start,mid,end,r,score);
            }
          }
        }
      }
      for (      final int parentNt : chart.getNonTerminals(start,end)) {
        for (        Rule r : grammar.getUnaryRulesWithChild(parentNt)) {
          double score=r.getScore() + chart.getMaxScore(start,end,r.getLeftChild());
          chart.updateCell(start,end,r,score);
        }
      }
    }
  }
  return chart;
}",0.981679389312977
131637,"@Test public void testSimpleSentence2(){
  CnfGrammarBuilder builder=new CnfGrammarBuilder();
  builder.loadFromResource(CnfGrammarBuilderTest.timeFliesGrammarResource);
  CnfGrammar grammar=builder.getGrammar();
  Pair<CfgTree,Double> pair=parseSentence(""String_Node_Str"",grammar);
  CfgTree tree=pair.get1();
  double logProb=pair.get2();
  System.out.println(logProb);
  System.out.println(tree);
  System.out.println(tree.getAsPennTreebankString());
  String treeStr=tree.getAsPennTreebankString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  String goldTree=""String_Node_Str"";
  Assert.assertEquals(goldTree,treeStr);
  Assert.assertEquals(-11.0,logProb,1e-13);
}","@Test public void testSimpleSentence2() throws IOException {
  CnfGrammarBuilder builder=new CnfGrammarBuilder();
  builder.loadFromResource(CnfGrammarBuilderTest.timeFliesGrammarResource);
  CnfGrammar grammar=builder.getGrammar();
  Pair<CfgTree,Double> pair=parseSentence(""String_Node_Str"",grammar);
  CfgTree tree=pair.get1();
  double logProb=pair.get2();
  System.out.println(logProb);
  System.out.println(tree);
  System.out.println(tree.getAsPennTreebankString());
  String treeStr=tree.getAsPennTreebankString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  System.out.println(treeStr);
  String goldTree=""String_Node_Str"";
  Assert.assertEquals(goldTree,treeStr);
  Assert.assertEquals(-11.0,logProb,1e-13);
}",0.9635453895639744
131638,"@Test public void testSimpleSentence1(){
  CnfGrammarBuilder builder=new CnfGrammarBuilder();
  builder.loadFromResource(CnfGrammarBuilderTest.timeFliesGrammarResource);
  CnfGrammar grammar=builder.getGrammar();
  Pair<CfgTree,Double> pair=parseSentence(""String_Node_Str"",grammar);
  CfgTree tree=pair.get1();
  double logProb=pair.get2();
  System.out.println(logProb);
  System.out.println(tree);
  System.out.println(tree.getAsPennTreebankString());
  String goldTree=""String_Node_Str"";
  String treeStr=tree.getAsPennTreebankString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  Assert.assertEquals(goldTree,treeStr);
  Assert.assertEquals(-11.0,logProb,1e-13);
}","@Test public void testSimpleSentence1() throws IOException {
  CnfGrammarBuilder builder=new CnfGrammarBuilder();
  builder.loadFromResource(CnfGrammarBuilderTest.timeFliesGrammarResource);
  CnfGrammar grammar=builder.getGrammar();
  Pair<CfgTree,Double> pair=parseSentence(""String_Node_Str"",grammar);
  CfgTree tree=pair.get1();
  double logProb=pair.get2();
  System.out.println(logProb);
  System.out.println(tree);
  System.out.println(tree.getAsPennTreebankString());
  String goldTree=""String_Node_Str"";
  String treeStr=tree.getAsPennTreebankString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  Assert.assertEquals(goldTree,treeStr);
  Assert.assertEquals(-11.0,logProb,1e-13);
}",0.9853801169590644
131639,"public void loadFromInputStream(InputStream inputStream) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
  String line;
  GrReaderState state=GrReaderState.RootSymbol;
  Pattern spaceRegex=Pattern.compile(""String_Node_Str"");
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    if (line.startsWith(""String_Node_Str"") || line.equals(""String_Node_Str"")) {
      continue;
    }
    if (line.equals(""String_Node_Str"")) {
      state=GrReaderState.LexicalRules;
      continue;
    }
    if (state == GrReaderState.RootSymbol) {
      rootSymbol=ntAlphabet.lookupIndex(line);
      state=GrReaderState.NonTerminalRules;
      continue;
    }
    String[] splits=spaceRegex.split(line);
    Rule r;
    if (splits.length == 4) {
      String parent=splits[0];
      String child=splits[2];
      double logProb=Double.parseDouble(splits[3]);
      if (state == GrReaderState.LexicalRules) {
        r=getLexicalRule(parent,child,logProb);
        lexRules.add(r);
      }
 else {
        r=getUnaryRule(parent,child,logProb);
        unaryRules.add(r);
      }
    }
 else     if (splits.length == 5 && state == GrReaderState.NonTerminalRules) {
      String parent=splits[0];
      String leftChild=splits[2];
      String rightChild=splits[3];
      double logProb=Double.parseDouble(splits[4]);
      r=getBinaryRule(parent,leftChild,rightChild,logProb);
      binaryRules.add(r);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + line);
    }
    allRules.add(r);
  }
  lexAlphabet.stopGrowth();
  ntAlphabet.stopGrowth();
}","public void loadFromInputStream(InputStream inputStream) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
  String line;
  GrReaderState state=GrReaderState.RootSymbol;
  Pattern spaceRegex=Pattern.compile(""String_Node_Str"");
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    if (line.startsWith(""String_Node_Str"") || line.equals(""String_Node_Str"")) {
      continue;
    }
    if (line.startsWith(""String_Node_Str"")) {
      state=GrReaderState.LexicalRules;
      continue;
    }
    if (state == GrReaderState.RootSymbol) {
      if (line.contains(""String_Node_Str"")) {
        rootSymbol=ntAlphabet.lookupIndex(""String_Node_Str"");
      }
 else {
        rootSymbol=ntAlphabet.lookupIndex(line);
      }
      state=GrReaderState.NonTerminalRules;
      continue;
    }
    String[] splits=spaceRegex.split(line);
    Rule r;
    if (splits.length == 4) {
      String parent=splits[0];
      String child=splits[2];
      double logProb=Double.parseDouble(splits[3]);
      if (state == GrReaderState.LexicalRules) {
        r=getLexicalRule(parent,child,logProb);
        lexRules.add(r);
      }
 else {
        r=getUnaryRule(parent,child,logProb);
        unaryRules.add(r);
      }
    }
 else     if (splits.length == 5 && state == GrReaderState.NonTerminalRules) {
      String parent=splits[0];
      String leftChild=splits[2];
      String rightChild=splits[3];
      double logProb=Double.parseDouble(splits[4]);
      r=getBinaryRule(parent,leftChild,rightChild,logProb);
      binaryRules.add(r);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + line);
    }
    allRules.add(r);
  }
  lexAlphabet.stopGrowth();
  ntAlphabet.stopGrowth();
}",0.9517857142857142
131640,"public void loadFromResource(String resourceName){
  InputStream inputStream=this.getClass().getResourceAsStream(resourceName);
  if (inputStream == null) {
    throw new RuntimeException(""String_Node_Str"" + resourceName);
  }
  try {
    loadFromInputStream(inputStream);
    inputStream.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void loadFromResource(String resourceName) throws IOException {
  InputStream inputStream=this.getClass().getResourceAsStream(resourceName);
  if (inputStream == null) {
    throw new RuntimeException(""String_Node_Str"" + resourceName);
  }
  loadFromInputStream(inputStream);
  inputStream.close();
}",0.3284023668639053
131641,"@Test public void testLoadGrammarFromFile(){
  CnfGrammarBuilder builder=new CnfGrammarBuilder();
  builder.loadFromResource(timeFliesGrammarResource);
  CnfGrammar grammar=builder.getGrammar();
  System.out.println(grammar);
  assertEquals(5,grammar.getNumLexicalTypes());
  assertEquals(8,grammar.getNumNonTerminals());
  assertEquals(1,grammar.getBinaryRulesWithChildren(grammar.getNtAlphabet().lookupIndex(""String_Node_Str""),grammar.getNtAlphabet().lookupIndex(""String_Node_Str"")).size());
}","@Test public void testLoadGrammarFromFile() throws IOException {
  CnfGrammarBuilder builder=new CnfGrammarBuilder();
  builder.loadFromResource(timeFliesGrammarResource);
  CnfGrammar grammar=builder.getGrammar();
  System.out.println(grammar);
  assertEquals(5,grammar.getNumLexicalTypes());
  assertEquals(8,grammar.getNumNonTerminals());
  assertEquals(1,grammar.getBinaryRulesWithChildren(grammar.getNtAlphabet().lookupIndex(""String_Node_Str""),grammar.getNtAlphabet().lookupIndex(""String_Node_Str"")).size());
}",0.9801980198019802
131642,"@Override public WarmStart getWarmStart(){
  DmvProblemNode cur=this;
  while (cur != null) {
    if (cur.warmStart != null) {
      WarmStart ws=warmStart.get();
      if (ws != null) {
        return ws;
      }
    }
    cur=cur.parent;
  }
  return null;
}","private static WarmStart getWarmStart(DmvProblemNode cur){
  while (cur != null) {
    if (cur.warmStart != null) {
      WarmStart ws=cur.warmStart.get();
      if (ws != null) {
        return ws;
      }
    }
    cur=cur.parent;
  }
  return null;
}",0.9044834307992202
131643,"public void addConsToMatrix(DmvTreeProgram pp,IloLPMatrix mat) throws IloException {
  mat.addRows(pp.oneArcPerWall);
  CplexUtils.addRows(mat,pp.oneParent);
  CplexUtils.addRows(mat,pp.oneArcPerPair);
  mat.addRows(pp.rootFlowIsSentLength);
  CplexUtils.addRows(mat,pp.flowDiff);
  CplexUtils.addRows(mat,pp.flowBoundRoot);
  CplexUtils.addRows(mat,pp.flowBoundChild);
  CplexUtils.addRows(mat,pp.arcFlowBoundRoot);
  CplexUtils.addRows(mat,pp.arcFlowBoundChild);
  if (pp.projectiveRoot != null && pp.projectiveChild != null) {
    CplexUtils.addRows(mat,pp.projectiveRoot);
    CplexUtils.addRows(mat,pp.projectiveChild);
  }
  CplexUtils.addRows(mat,pp.numToSideCons);
  CplexUtils.addRows(mat,pp.genAdjCons);
  CplexUtils.addRows(mat,pp.numNonAdjCons);
  CplexUtils.addRows(mat,pp.stopAdjCons);
  if (pp.featCountCons != null) {
    CplexUtils.addRows(mat,pp.featCountCons);
  }
  if (pp.universalPostCons != null) {
    mat.addRow(pp.universalPostCons);
  }
}","public void addConsToMatrix(DmvTreeProgram pp,IloLPMatrix mat) throws IloException {
  CplexUtils.addRows(mat,pp.oneArcPerWall);
  CplexUtils.addRows(mat,pp.oneParent);
  CplexUtils.addRows(mat,pp.oneArcPerPair);
  CplexUtils.addRows(mat,pp.rootFlowIsSentLength);
  CplexUtils.addRows(mat,pp.flowDiff);
  CplexUtils.addRows(mat,pp.flowBoundRoot);
  CplexUtils.addRows(mat,pp.flowBoundChild);
  CplexUtils.addRows(mat,pp.arcFlowBoundRoot);
  CplexUtils.addRows(mat,pp.arcFlowBoundChild);
  if (pp.projectiveRoot != null && pp.projectiveChild != null) {
    CplexUtils.addRows(mat,pp.projectiveRoot);
    CplexUtils.addRows(mat,pp.projectiveChild);
  }
  CplexUtils.addRows(mat,pp.numToSideCons);
  CplexUtils.addRows(mat,pp.genAdjCons);
  CplexUtils.addRows(mat,pp.numNonAdjCons);
  CplexUtils.addRows(mat,pp.stopAdjCons);
  if (pp.featCountCons != null) {
    CplexUtils.addRows(mat,pp.featCountCons);
  }
  if (pp.universalPostCons != null) {
    CplexUtils.addRow(mat,pp.universalPostCons);
  }
}",0.9475292919001528
131644,"public static void addRows(IloLPMatrix mat,IloRange[] ranges) throws IloException {
  if (ranges == null) {
    return;
  }
  for (int i=0; i < ranges.length; i++) {
    if (ranges[i] != null) {
      mat.addRow(ranges[i]);
    }
  }
}","public static void addRows(IloLPMatrix mat,IloRange[] ranges) throws IloException {
  if (ranges == null) {
    return;
  }
  for (int i=0; i < ranges.length; i++) {
    addRow(mat,ranges[i]);
  }
}",0.8960739030023095
131645,"private void buildModel(IloCplex cplex,DmvSolution initFeasSol) throws IloException {
  this.bounds=new CptBounds(this.idm);
  mp=new LpProblem();
  mp.origMatrix=cplex.LPMatrix(""String_Node_Str"");
  sto.init(cplex,mp.origMatrix,idm,bounds);
  int numConds=idm.getNumConds();
  sto.createModelParamVars();
  sto.addModelParamConstraints();
  DmvParseLpBuilder builder=new DmvParseLpBuilder(prm.parsePrm,cplex);
  mp.pp=builder.buildDmvTreeProgram(corpus);
  builder.addConsToMatrix(mp.pp,mp.origMatrix);
  DimReducer dr=new DimReducer(prm.drPrm);
  mp.drMatrix=cplex.LPMatrix(""String_Node_Str"");
  dr.reduceDimensionality(mp.origMatrix,mp.drMatrix);
  if (mp.drMatrix.getNrows() == 0) {
    mp.drMatrix=null;
  }
  RltPrm rltPrm=prm.rltPrm;
  if (prm.objVarFilter) {
    if (rltPrm.rowAdder != null && rltPrm.factorFilter != null) {
      log.warn(""String_Node_Str"");
    }
    rltPrm.factorFilter=new VarRltFactorFilter(getObjVarCols());
    rltPrm.rowAdder=new VarRltRowAdder(getObjVarPairs());
  }
 else {
    rltPrm.rowAdder=new UnionRltRowAdder(new VarRltRowAdder(getObjVarPairs()),rltPrm.rowAdder);
  }
  if (mp.drMatrix == null) {
    log.info(""String_Node_Str"");
    mp.rlt=new Rlt(cplex,mp.origMatrix,rltPrm);
    IloLPMatrix rltMat=mp.rlt.getRltMatrix();
    cplex.add(mp.origMatrix);
    cplex.add(rltMat);
  }
 else {
    log.info(""String_Node_Str"");
    mp.rlt=new Rlt(cplex,mp.drMatrix,rltPrm);
    IloLPMatrix rltMat=mp.rlt.getRltMatrix();
    cplex.add(mp.origMatrix);
    cplex.add(mp.drMatrix);
    cplex.add(rltMat);
  }
  mp.objective=cplex.addMinimize();
  mp.objVars=new IloNumVar[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.objVars[c]=new IloNumVar[numParams];
    for (int m=0; m < numParams; m++) {
      mp.objVars[c][m]=mp.rlt.getRltVar(sto.modelParamVars[c][m],mp.pp.featCountVars[c][m]);
      cplex.setLinearCoef(mp.objective,-1.0,mp.objVars[c][m]);
    }
  }
  log.info(CplexUtils.getMatrixStats(mp.origMatrix));
  if (mp.drMatrix != null) {
    log.info(CplexUtils.getMatrixStats(mp.drMatrix));
  }
  log.info(CplexUtils.getMatrixStats(mp.rlt.getRltMatrix()));
}","private void buildModel(IloCplex cplex,DmvSolution initFeasSol) throws IloException {
  this.bounds=new CptBounds(this.idm);
  mp=new LpProblem();
  mp.origMatrix=cplex.LPMatrix(""String_Node_Str"");
  sto.init(cplex,mp.origMatrix,idm,bounds);
  int numConds=idm.getNumConds();
  sto.createModelParamVars();
  sto.addModelParamConstraints();
  DmvParseLpBuilder builder=new DmvParseLpBuilder(prm.parsePrm,cplex);
  mp.pp=builder.buildDmvTreeProgram(corpus);
  builder.addConsToMatrix(mp.pp,mp.origMatrix);
  DimReducer dr=new DimReducer(prm.drPrm);
  mp.drMatrix=cplex.LPMatrix(""String_Node_Str"");
  dr.reduceDimensionality(mp.origMatrix,mp.drMatrix);
  if (mp.drMatrix.getNrows() == 0) {
    mp.drMatrix=null;
  }
  RltPrm rltPrm=prm.rltPrm;
  if (prm.objVarFilter) {
    if (rltPrm.rowAdder != null && rltPrm.factorFilter != null) {
      log.warn(""String_Node_Str"");
    }
    rltPrm.factorFilter=new VarRltFactorFilter(getObjVarCols());
    rltPrm.rowAdder=new VarRltRowAdder(getObjVarPairs(),false);
  }
 else {
    VarRltRowAdder envelopeAdder=new VarRltRowAdder(getObjVarPairs(),true);
    rltPrm.rowAdder=new UnionRltRowAdder(envelopeAdder,rltPrm.rowAdder);
  }
  if (mp.drMatrix == null) {
    log.info(""String_Node_Str"");
    mp.rlt=new Rlt(cplex,mp.origMatrix,rltPrm);
    IloLPMatrix rltMat=mp.rlt.getRltMatrix();
    cplex.add(mp.origMatrix);
    cplex.add(rltMat);
  }
 else {
    log.info(""String_Node_Str"");
    mp.rlt=new Rlt(cplex,mp.drMatrix,rltPrm);
    IloLPMatrix rltMat=mp.rlt.getRltMatrix();
    cplex.add(mp.origMatrix);
    cplex.add(mp.drMatrix);
    cplex.add(rltMat);
  }
  mp.objective=cplex.addMinimize();
  mp.objVars=new IloNumVar[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.objVars[c]=new IloNumVar[numParams];
    for (int m=0; m < numParams; m++) {
      mp.objVars[c][m]=mp.rlt.getRltVar(sto.modelParamVars[c][m],mp.pp.featCountVars[c][m]);
      cplex.setLinearCoef(mp.objective,-1.0,mp.objVars[c][m]);
    }
  }
  log.info(CplexUtils.getMatrixStats(mp.origMatrix));
  if (mp.drMatrix != null) {
    log.info(CplexUtils.getMatrixStats(mp.drMatrix));
  }
  log.info(CplexUtils.getMatrixStats(mp.rlt.getRltMatrix()));
}",0.9744886233049872
131646,"@Override public void init(Rlt rlt,long numUnfilteredRows) throws IloException {
  for (  RltRowAdder adder : adders) {
    if (adder != null) {
      adder.init(rlt,numUnfilteredRows);
    }
  }
}","@Override public void init(Rlt rlt,long numUnfilteredRows) throws IloException {
  for (  RltRowAdder adder : adders) {
    adder.init(rlt,numUnfilteredRows);
  }
}",0.9085872576177284
131647,"public UnionRltRowAdder(RltRowAdder... adders){
  this.adders=new ArrayList<RltRowAdder>(Arrays.asList(adders));
}","public UnionRltRowAdder(RltRowAdder... adders){
  this.adders=new ArrayList<RltRowAdder>();
  for (  RltRowAdder adder : adders) {
    if (adder != null) {
      this.adders.add(adder);
    }
  }
}",0.662379421221865
131648,"@Override public RelaxedSolution getRelaxedSolution(ProblemNode curNode,double incumbentScore){
  switchTimer.start();
  setAsActiveNode(curNode);
  if (curNode.getWarmStart() != null) {
    setWarmStart(curNode.getWarmStart());
  }
  switchTimer.stop();
  RelaxedSolution relaxSol=solveRelaxation(curNode,incumbentScore);
  if (curNode.getLocalUb() < relaxSol.getScore()) {
    relaxSol.setScore(curNode.getLocalUb());
  }
 else {
    curNode.setOptimisticBound(relaxSol.getScore());
  }
  curNode.setWarmStart(getWarmStart());
  return relaxSol;
}","@Override public RelaxedSolution getRelaxedSolution(ProblemNode curNode,double incumbentScore){
  switchTimer.start();
  setAsActiveNode(curNode);
  if (curNode.getWarmStart() != null) {
    setWarmStart(curNode.getWarmStart());
  }
  switchTimer.stop();
  Pair<RelaxedSolution,WarmStart> pair=solveRelaxation(curNode,incumbentScore);
  RelaxedSolution relaxSol=pair.get1();
  WarmStart warmStart=pair.get2();
  if (curNode.getLocalUb() < relaxSol.getScore()) {
    relaxSol.setScore(curNode.getLocalUb());
  }
 else {
    curNode.setOptimisticBound(relaxSol.getScore());
  }
  curNode.setWarmStart(warmStart);
  return relaxSol;
}",0.8915254237288136
131649,"public Pair<RelaxStatus,Double> runDWAlgo(IloCplex cplex,double upperBound,int depth) throws UnknownObjectException, IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  ArrayList<Status> iterationStatus=new ArrayList<Status>();
  WarmStart warmStart=null;
  iterationLowerBounds.add(INTERNAL_BEST_SCORE);
  int cut;
  int dwIter;
  for (dwIter=0, cut=0; ; dwIter++) {
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    int maxCutRounds=(depth == 0) ? prm.rootMaxCutRounds : prm.maxCutRounds;
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForDw(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == RelaxStatus.Infeasible || status == RelaxStatus.Unknown) {
      return new Pair<RelaxStatus,Double>(status,INTERNAL_WORST_SCORE);
    }
    if (dwIter >= prm.maxDwIterations) {
      break;
    }
    if (prm.tempDir != null) {
      cplex.writeSolution(new File(prm.tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    warmStart=getWarmStart();
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + prm.OBJ_VAL_DECREASE_TOLERANCE) {
      Status prevStatus=iterationStatus.size() > 0 ? iterationStatus.get(iterationObjVals.size() - 1) : Status.Unknown;
      log.warn(String.format(""String_Node_Str"",prevObjVal,objVal,prevStatus,cplex.getStatus()));
      throw new IllegalStateException(""String_Node_Str"");
    }
    iterationObjVals.add(objVal);
    iterationStatus.add(cplex.getStatus());
    SubproblemRetVal sprv=addColumns(cplex);
    if (sprv.isInfeasible) {
      return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
    }
    double lowerBound=objVal + sprv.sumReducedCosts;
    iterationLowerBounds.add(lowerBound);
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Pruned;
      break;
    }
 else     if (sprv.numPositiveRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      status=RelaxStatus.Optimal;
      if (cut < maxCutRounds) {
        int numCutAdded=addCuts(cplex,iterationObjVals,iterationStatus,cut);
        log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
        if (numCutAdded == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        cut++;
      }
 else {
        break;
      }
    }
 else {
    }
  }
  double lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + prm.maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + switchTimer.totMs() / numSolves);
  log.debug(""String_Node_Str"" + simplexTimer.totMs() / numSolves);
  printSummary();
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}","public Triple<RelaxStatus,Double,WarmStart> runDWAlgo(IloCplex cplex,double upperBound,int depth) throws UnknownObjectException, IloException {
  if (!isFeasible()) {
    return new Triple<RelaxStatus,Double,WarmStart>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE,null);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  ArrayList<Status> iterationStatus=new ArrayList<Status>();
  WarmStart warmStart=null;
  iterationLowerBounds.add(INTERNAL_BEST_SCORE);
  int cut;
  int dwIter;
  for (dwIter=0, cut=0; ; dwIter++) {
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    int maxCutRounds=(depth == 0) ? prm.rootMaxCutRounds : prm.maxCutRounds;
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForDw(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == RelaxStatus.Infeasible || status == RelaxStatus.Unknown) {
      return new Triple<RelaxStatus,Double,WarmStart>(status,INTERNAL_WORST_SCORE,null);
    }
    if (dwIter >= prm.maxDwIterations) {
      break;
    }
    if (prm.tempDir != null) {
      cplex.writeSolution(new File(prm.tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    warmStart=getWarmStart();
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + prm.OBJ_VAL_DECREASE_TOLERANCE) {
      Status prevStatus=iterationStatus.size() > 0 ? iterationStatus.get(iterationObjVals.size() - 1) : Status.Unknown;
      log.warn(String.format(""String_Node_Str"",prevObjVal,objVal,prevStatus,cplex.getStatus()));
      throw new IllegalStateException(""String_Node_Str"");
    }
    iterationObjVals.add(objVal);
    iterationStatus.add(cplex.getStatus());
    SubproblemRetVal sprv=addColumns(cplex);
    if (sprv.isInfeasible) {
      return new Triple<RelaxStatus,Double,WarmStart>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE,null);
    }
    double lowerBound=objVal + sprv.sumReducedCosts;
    iterationLowerBounds.add(lowerBound);
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Pruned;
      break;
    }
 else     if (sprv.numPositiveRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      status=RelaxStatus.Optimal;
      if (cut < maxCutRounds) {
        int numCutAdded=addCuts(cplex,iterationObjVals,iterationStatus,cut);
        log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
        if (numCutAdded == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        cut++;
      }
 else {
        break;
      }
    }
 else {
    }
  }
  double lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + prm.maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + switchTimer.totMs() / numSolves);
  log.debug(""String_Node_Str"" + simplexTimer.totMs() / numSolves);
  printSummary();
  return new Triple<RelaxStatus,Double,WarmStart>(status,lowerBound,warmStart);
}",0.9730644478916936
131650,"private RelaxedSolution solveRelaxation(ProblemNode curNode,double incumbentScore){
  try {
    numSolves++;
    double upperBound=-incumbentScore;
    Pair<RelaxStatus,Double> pair=runDWAlgo(cplex,upperBound,curNode.getDepth());
    RelaxStatus status=pair.get1();
    double lowerBound=pair.get2();
    double objective=-lowerBound;
    assert(!Double.isNaN(objective));
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (!status.hasSolution()) {
      return new DmvRelaxedSolution(null,null,objective,status,null,null,Double.NaN);
    }
    if (prm.tempDir != null) {
      cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + lowerBound);
    RelaxedSolution relaxSol=extractSolution(status,objective);
    log.info(""String_Node_Str"" + relaxSol.getTrueObjectiveForRelaxedSolution());
    return relaxSol;
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}","private Pair<RelaxedSolution,WarmStart> solveRelaxation(ProblemNode curNode,double incumbentScore){
  try {
    numSolves++;
    double upperBound=-incumbentScore;
    Triple<RelaxStatus,Double,WarmStart> triple=runDWAlgo(cplex,upperBound,curNode.getDepth());
    RelaxStatus status=triple.get1();
    double lowerBound=triple.get2();
    WarmStart warmStart=triple.get3();
    double objective=-lowerBound;
    assert(!Double.isNaN(objective));
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (!status.hasSolution()) {
      DmvRelaxedSolution relaxSol=new DmvRelaxedSolution(null,null,objective,status,null,null,Double.NaN);
      return new Pair<RelaxedSolution,WarmStart>(relaxSol,warmStart);
    }
    if (prm.tempDir != null) {
      cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + lowerBound);
    RelaxedSolution relaxSol=extractSolution(status,objective);
    log.info(""String_Node_Str"" + relaxSol.getTrueObjectiveForRelaxedSolution());
    return new Pair<RelaxedSolution,WarmStart>(relaxSol,warmStart);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}",0.9010214864388868
131651,"@Override public RelaxedSolution getRelaxedSolution(ProblemNode curNode,double incumbentScore){
  setAsActiveNode(curNode);
  if (curNode.getWarmStart() != null) {
    setWarmStart(curNode.getWarmStart());
  }
  RelaxedSolution relaxSol=solveRelaxation(curNode,incumbentScore);
  if (curNode.getLocalUb() < relaxSol.getScore()) {
    relaxSol.setScore(curNode.getLocalUb());
  }
 else {
    curNode.setOptimisticBound(relaxSol.getScore());
  }
  curNode.setWarmStart(getWarmStart());
  return relaxSol;
}","@Override public RelaxedSolution getRelaxedSolution(ProblemNode curNode,double incumbentScore){
  switchTimer.start();
  setAsActiveNode(curNode);
  if (curNode.getWarmStart() != null) {
    setWarmStart(curNode.getWarmStart());
  }
  switchTimer.stop();
  Pair<RelaxedSolution,WarmStart> pair=solveRelaxation(curNode,incumbentScore);
  RelaxedSolution relaxSol=pair.get1();
  WarmStart warmStart=pair.get2();
  if (curNode.getLocalUb() < relaxSol.getScore()) {
    relaxSol.setScore(curNode.getLocalUb());
  }
 else {
    curNode.setOptimisticBound(relaxSol.getScore());
  }
  curNode.setWarmStart(warmStart);
  return relaxSol;
}",0.8475770925110132
131652,"public DmvRltRelaxation(DmvRltRelaxPrm prm){
  this.prm=prm;
  this.numSolves=0;
  this.simplexTimer=new Timer();
  this.sto=new LpSumToOneBuilder(prm.stoPrm);
}","public DmvRltRelaxation(DmvRltRelaxPrm prm){
  this.prm=prm;
  this.numSolves=0;
  this.simplexTimer=new Timer();
  this.switchTimer=new Timer();
  this.sto=new LpSumToOneBuilder(prm.stoPrm);
}",0.9096045197740112
131653,"private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound,int depth) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  int maxCutRounds=(depth == 0) ? prm.rootMaxCutRounds : prm.maxCutRounds;
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  int totalSimplexIterations=0;
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  Timer timer=new Timer();
  int cut;
  for (cut=0; ; ) {
    timer.start();
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex);
    log.trace(""String_Node_Str"" + cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getCplexStatus());
    log.debug(""String_Node_Str"" + cplex.isDualFeasible());
    log.debug(""String_Node_Str"" + cplex.isPrimalFeasible());
    double lowerBound;
    if (status == RelaxStatus.Unknown) {
      log.debug(""String_Node_Str"" + cplex.getObjValue());
      lowerBound=INTERNAL_BEST_SCORE;
    }
 else     if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
    }
 else {
      if (prm.tempDir != null) {
        cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
      }
      warmStart=getWarmStart();
      lowerBound=cplex.getObjValue();
      log.trace(""String_Node_Str"" + lowerBound);
      double prevLowerBound=cutIterLowerBounds.size() > 0 ? cutIterLowerBounds.get(cutIterLowerBounds.size() - 1) : INTERNAL_WORST_SCORE;
      if (!Utilities.lte(prevLowerBound,lowerBound,prm.OBJ_VAL_DECREASE_TOLERANCE)) {
        Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterLowerBounds.size() - 1) : Status.Unknown;
        log.warn(String.format(""String_Node_Str"",prevLowerBound,lowerBound,prevStatus,cplex.getStatus()));
      }
      if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
        log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
      }
      if (lowerBound >= upperBound) {
        status=RelaxStatus.Pruned;
      }
    }
    cutIterLowerBounds.add(lowerBound);
    cutIterStatuses.add(cplex.getStatus());
    totalSimplexIterations+=cplex.getNiterations();
    log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
    timer.stop();
    if (status == RelaxStatus.Unknown || status == RelaxStatus.Infeasible || status == RelaxStatus.Pruned || timer.totSec() > prm.timeoutSeconds) {
      break;
    }
 else     if (cut < maxCutRounds) {
      int numCutAdded=addCuts(cplex,cut);
      log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
      if (numCutAdded == 0) {
        log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
        break;
      }
      cut++;
    }
 else {
      break;
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
  log.debug(""String_Node_Str"" + cutIterStatuses);
  log.debug(""String_Node_Str"" + simplexTimer.totMs() / numSolves);
  log.debug(""String_Node_Str"" + totalSimplexIterations);
  int origCons=mp.origMatrix.getNrows() - sto.getNumStoCons();
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),origCons,mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}","private Triple<RelaxStatus,Double,WarmStart> runSimplexAlgo(IloCplex cplex2,double upperBound,int depth) throws IloException {
  if (!isFeasible()) {
    return new Triple<RelaxStatus,Double,WarmStart>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE,null);
  }
  int maxCutRounds=(depth == 0) ? prm.rootMaxCutRounds : prm.maxCutRounds;
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  int totalSimplexIterations=0;
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  Timer timer=new Timer();
  int cut;
  for (cut=0; ; ) {
    timer.start();
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex);
    log.debug(""String_Node_Str"" + cplex.getStatus());
    log.debug(""String_Node_Str"" + cplex.getCplexStatus());
    log.debug(""String_Node_Str"" + cplex.isDualFeasible());
    log.debug(""String_Node_Str"" + cplex.isPrimalFeasible());
    double lowerBound;
    if (status == RelaxStatus.Unknown) {
      lowerBound=INTERNAL_BEST_SCORE;
    }
 else     if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
    }
 else {
      if (prm.tempDir != null) {
        cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
      }
      warmStart=getWarmStart();
      lowerBound=cplex.getObjValue();
      log.trace(""String_Node_Str"" + lowerBound);
      double prevLowerBound=cutIterLowerBounds.size() > 0 ? cutIterLowerBounds.get(cutIterLowerBounds.size() - 1) : INTERNAL_WORST_SCORE;
      if (!Utilities.lte(prevLowerBound,lowerBound,prm.OBJ_VAL_DECREASE_TOLERANCE)) {
        Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterLowerBounds.size() - 1) : Status.Unknown;
        log.warn(String.format(""String_Node_Str"",prevLowerBound,lowerBound,prevStatus,cplex.getStatus()));
      }
      if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
        log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
      }
      if (lowerBound >= upperBound) {
        status=RelaxStatus.Pruned;
      }
    }
    cutIterLowerBounds.add(lowerBound);
    cutIterStatuses.add(cplex.getStatus());
    totalSimplexIterations+=cplex.getNiterations();
    log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
    timer.stop();
    if (status == RelaxStatus.Unknown || status == RelaxStatus.Infeasible || status == RelaxStatus.Pruned || timer.totSec() > prm.timeoutSeconds) {
      break;
    }
 else     if (cut < maxCutRounds) {
      int numCutAdded=addCuts(cplex,cut);
      log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
      if (numCutAdded == 0) {
        log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
        break;
      }
      cut++;
    }
 else {
      break;
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
  log.debug(""String_Node_Str"" + cutIterStatuses);
  log.debug(""String_Node_Str"" + switchTimer.totMs() / numSolves);
  log.debug(""String_Node_Str"" + simplexTimer.totMs() / numSolves);
  log.debug(""String_Node_Str"" + totalSimplexIterations);
  int origCons=mp.origMatrix.getNrows() - sto.getNumStoCons();
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),origCons,mp.rlt.getRltMatrix().getNrows()));
  return new Triple<RelaxStatus,Double,WarmStart>(status,lowerBound,warmStart);
}",0.9609877840535924
131654,"private RelaxedSolution solveRelaxation(ProblemNode curNode,double incumbentScore){
  try {
    numSolves++;
    double upperBound=-incumbentScore;
    Pair<RelaxStatus,Double> pair=runSimplexAlgo(cplex,upperBound,curNode.getDepth());
    RelaxStatus status=pair.get1();
    double lowerBound=pair.get2();
    double objective=-lowerBound;
    assert(!Double.isNaN(objective));
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (!status.hasSolution()) {
      return new DmvRelaxedSolution(null,null,objective,status,null,null,Double.NaN);
    }
    if (prm.tempDir != null) {
      cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + lowerBound);
    RelaxedSolution relaxSol=extractSolution(status,objective);
    log.info(""String_Node_Str"" + relaxSol.getTrueObjectiveForRelaxedSolution());
    return relaxSol;
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}","private Pair<RelaxedSolution,WarmStart> solveRelaxation(ProblemNode curNode,double incumbentScore){
  try {
    numSolves++;
    double upperBound=-incumbentScore;
    Triple<RelaxStatus,Double,WarmStart> triple=runSimplexAlgo(cplex,upperBound,curNode.getDepth());
    RelaxStatus status=triple.get1();
    double lowerBound=triple.get2();
    WarmStart warmStart=triple.get3();
    double objective=-lowerBound;
    assert(!Double.isNaN(objective));
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (!status.hasSolution()) {
      DmvRelaxedSolution relaxSol=new DmvRelaxedSolution(null,null,objective,status,null,null,Double.NaN);
      return new Pair<RelaxedSolution,WarmStart>(relaxSol,warmStart);
    }
    if (prm.tempDir != null) {
      cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + lowerBound);
    RelaxedSolution relaxSol=extractSolution(status,objective);
    log.info(""String_Node_Str"" + relaxSol.getTrueObjectiveForRelaxedSolution());
    return new Pair<RelaxedSolution,WarmStart>(relaxSol,warmStart);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}",0.9013689013689014
131655,"public static Trainer getTrainer(DepTreebank goldTreebank,DmvModel goldModel) throws ParseException {
  if (!modelName.equals(""String_Node_Str"")) {
    throw new ParseException(""String_Node_Str"" + modelName);
  }
  DmvRelaxationFactory relaxFactory=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")|| algorithm.equals(""String_Node_Str"")) {
    relaxFactory=getDmvRelaxationFactory();
  }
  DependencyParserEvaluator parserEvaluator=new DependencyParserEvaluator(getEvalParser(),goldTreebank,""String_Node_Str"");
  Trainer trainer=null;
  DmvViterbiEMTrainer viterbiTrainer=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    IlpSolverFactory ilpSolverFactory=null;
    if (parserName.startsWith(""String_Node_Str"")) {
      IlpSolverId ilpSolverId=IlpSolverId.getById(ilpSolver);
      ilpSolverFactory=new IlpSolverFactory(ilpSolverId,numThreads,ilpWorkMemMegs);
    }
    if (parserName.equals(""String_Node_Str"")) {
      parser=new DmvCkyParser();
    }
 else     if (parserName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiSentenceParser(formulation,ilpSolverFactory);
    }
 else     if (parserName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiParser(formulation,ilpSolverFactory);
    }
 else     if (parserName.equals(""String_Node_Str"") || parserName.equals(""String_Node_Str"")) {
      DeltaGenerator deltaGen;
      if (deltaGenerator.equals(""String_Node_Str"")) {
        deltaGen=new FixedIntervalDeltaGenerator(interval,numPerSide);
      }
 else       if (deltaGenerator.equals(""String_Node_Str"")) {
        deltaGen=new FactorDeltaGenerator(factor,numPerSide);
      }
 else {
        throw new ParseException(""String_Node_Str"" + deltaGenerator);
      }
      if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new InitializedIlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen,ilpSolverFactory);
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
    }
 else {
      throw new ParseException(""String_Node_Str"" + parserName);
    }
    ModelFactory modelFactory;
    if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new UniformDmvModelFactory();
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new RandomDmvModelFactory(lambda);
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new SupervisedDmvModelFactory(goldTreebank);
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new FixableModelFactory(null);
      ((FixableModelFactory)modelFactory).fixModel(goldModel);
    }
 else {
      throw new ParseException(""String_Node_Str"" + initWeights);
    }
    if (algorithm.equals(""String_Node_Str"")) {
      DmvViterbiEMTrainerPrm vtPrm=new DmvViterbiEMTrainerPrm(iterations,convergenceRatio,numRestarts,timeoutSeconds,lambda,parserEvaluator);
      trainer=new DmvViterbiEMTrainer(vtPrm,parser,modelFactory);
    }
    if (algorithm.equals(""String_Node_Str"")) {
      DmvViterbiEMTrainerPrm vtPrm=new DmvViterbiEMTrainerPrm(iterations,convergenceRatio,0,Double.POSITIVE_INFINITY,lambda,null);
      viterbiTrainer=new DmvViterbiEMTrainer(vtPrm,parser,modelFactory);
    }
  }
  CptBoundsDeltaFactory brancher=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    VariableSplitter varSplitter;
    if (varSplit.equals(""String_Node_Str"")) {
      varSplitter=new MidpointVarSplitter(MidpointChoice.HALF_PROB);
    }
 else     if (varSplit.equals(""String_Node_Str"")) {
      varSplitter=new MidpointVarSplitter(MidpointChoice.HALF_LOGPROB);
    }
 else {
      throw new ParseException(""String_Node_Str"" + varSplit);
    }
    VariableSelector varSelector;
    if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new FullStrongVariableSelector(varSplitter);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new PseudocostVariableSelector(varSplitter);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RegretVariableSelector();
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RandomVariableSelector(true);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RandomVariableSelector(false);
    }
 else {
      throw new ParseException(""String_Node_Str"" + varSelection);
    }
    brancher=new BasicCptBoundsDeltaFactory(varSelector,varSplitter);
  }
  NodeOrderer nodeOrderer=null;
  if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new PqNodeOrderer(new BfsComparator());
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    DfsNodeOrdererPrm prm=new DfsNodeOrdererPrm();
    nodeOrderer=new DfsNodeOrderer(prm);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    PlungingBfsNodeOrdererPrm prm=new PlungingBfsNodeOrdererPrm();
    prm.localRelativeGapThreshold=localRelativeGapThreshold;
    nodeOrderer=new PlungingBfsNodeOrderer(prm);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new DfsRandChildAtDepthNodeOrderer(60);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new DfsRandWalkNodeOrderer(60);
  }
  DmvSolFactoryPrm initSolPrm=getDmvSolFactoryPrm();
  DmvProjectorFactory projectorFactory=getDmvProjectorFactory();
  LazyBnbSolverPrm bnbPrm=new LazyBnbSolverPrm();
  bnbPrm.disableFathoming=disableFathoming;
  bnbPrm.epsilon=epsilon;
  bnbPrm.evaluator=new DmvSolutionEvaluator(parserEvaluator);
  bnbPrm.leafNodeOrderer=nodeOrderer;
  bnbPrm.timeoutSeconds=timeoutSeconds;
  if (algorithm.equals(""String_Node_Str"")) {
    bnbPrm.evaluator=null;
    bnbPrm.timeoutSeconds=bnbTimeoutSeconds;
    LocalBnBDmvTrainerPrm lbPrm=new LocalBnBDmvTrainerPrm(viterbiTrainer,bnbPrm,brancher,relaxFactory,projectorFactory,numRestarts,offsetProb,probOfSkipCm,timeoutSeconds,parserEvaluator,initSolPrm);
    trainer=new LocalBnBDmvTrainer(lbPrm);
  }
 else   if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    LazyBnbSolverFactory bnbSolverFactory;
    if (algorithm.equals(""String_Node_Str"")) {
      RandWalkBnbSamplerPrm prm=new RandWalkBnbSamplerPrm();
      prm.maxSamples=10000;
      bnbSolverFactory=prm;
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      DepthStratifiedBnbSamplerPrm prm=new DepthStratifiedBnbSamplerPrm();
      prm.maxDepth=60;
      bnbSolverFactory=prm;
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      bnbSolverFactory=bnbPrm;
    }
 else {
      throw new ParseException(""String_Node_Str"" + algorithm);
    }
    BnBDmvTrainerPrm bnbtPrm=new BnBDmvTrainerPrm();
    bnbtPrm.initSolPrm=initSolPrm;
    bnbtPrm.brancher=brancher;
    bnbtPrm.bnbSolverFactory=bnbSolverFactory;
    bnbtPrm.relaxFactory=relaxFactory;
    bnbtPrm.projectorFactory=projectorFactory;
    trainer=new BnBDmvTrainer(bnbtPrm);
  }
  if (trainer == null) {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}","public static Trainer getTrainer(DepTreebank goldTreebank,DmvModel goldModel) throws ParseException {
  if (!modelName.equals(""String_Node_Str"")) {
    throw new ParseException(""String_Node_Str"" + modelName);
  }
  boolean isBnbAlgorithm=(algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")|| algorithm.equals(""String_Node_Str""));
  DmvRelaxationFactory relaxFactory=null;
  if (isBnbAlgorithm) {
    relaxFactory=getDmvRelaxationFactory();
  }
  DependencyParserEvaluator parserEvaluator=new DependencyParserEvaluator(getEvalParser(),goldTreebank,""String_Node_Str"");
  Trainer trainer=null;
  DmvViterbiEMTrainer viterbiTrainer=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    IlpSolverFactory ilpSolverFactory=null;
    if (parserName.startsWith(""String_Node_Str"")) {
      IlpSolverId ilpSolverId=IlpSolverId.getById(ilpSolver);
      ilpSolverFactory=new IlpSolverFactory(ilpSolverId,numThreads,ilpWorkMemMegs);
    }
    if (parserName.equals(""String_Node_Str"")) {
      parser=new DmvCkyParser();
    }
 else     if (parserName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiSentenceParser(formulation,ilpSolverFactory);
    }
 else     if (parserName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiParser(formulation,ilpSolverFactory);
    }
 else     if (parserName.equals(""String_Node_Str"") || parserName.equals(""String_Node_Str"")) {
      DeltaGenerator deltaGen;
      if (deltaGenerator.equals(""String_Node_Str"")) {
        deltaGen=new FixedIntervalDeltaGenerator(interval,numPerSide);
      }
 else       if (deltaGenerator.equals(""String_Node_Str"")) {
        deltaGen=new FactorDeltaGenerator(factor,numPerSide);
      }
 else {
        throw new ParseException(""String_Node_Str"" + deltaGenerator);
      }
      if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new InitializedIlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen,ilpSolverFactory);
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
    }
 else {
      throw new ParseException(""String_Node_Str"" + parserName);
    }
    ModelFactory modelFactory;
    if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new UniformDmvModelFactory();
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new RandomDmvModelFactory(lambda);
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new SupervisedDmvModelFactory(goldTreebank);
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new FixableModelFactory(null);
      ((FixableModelFactory)modelFactory).fixModel(goldModel);
    }
 else {
      throw new ParseException(""String_Node_Str"" + initWeights);
    }
    if (algorithm.equals(""String_Node_Str"")) {
      DmvViterbiEMTrainerPrm vtPrm=new DmvViterbiEMTrainerPrm(iterations,convergenceRatio,numRestarts,timeoutSeconds,lambda,parserEvaluator);
      trainer=new DmvViterbiEMTrainer(vtPrm,parser,modelFactory);
    }
    if (algorithm.equals(""String_Node_Str"")) {
      DmvViterbiEMTrainerPrm vtPrm=new DmvViterbiEMTrainerPrm(iterations,convergenceRatio,0,Double.POSITIVE_INFINITY,lambda,null);
      viterbiTrainer=new DmvViterbiEMTrainer(vtPrm,parser,modelFactory);
    }
  }
  CptBoundsDeltaFactory brancher=null;
  if (isBnbAlgorithm) {
    VariableSplitter varSplitter;
    if (varSplit.equals(""String_Node_Str"")) {
      varSplitter=new MidpointVarSplitter(MidpointChoice.HALF_PROB);
    }
 else     if (varSplit.equals(""String_Node_Str"")) {
      varSplitter=new MidpointVarSplitter(MidpointChoice.HALF_LOGPROB);
    }
 else {
      throw new ParseException(""String_Node_Str"" + varSplit);
    }
    VariableSelector varSelector;
    if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new FullStrongVariableSelector(varSplitter);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new PseudocostVariableSelector(varSplitter);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RegretVariableSelector();
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RandomVariableSelector(true);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RandomVariableSelector(false);
    }
 else {
      throw new ParseException(""String_Node_Str"" + varSelection);
    }
    brancher=new BasicCptBoundsDeltaFactory(varSelector,varSplitter);
  }
  NodeOrderer nodeOrderer=null;
  if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new PqNodeOrderer(new BfsComparator());
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    DfsNodeOrdererPrm prm=new DfsNodeOrdererPrm();
    nodeOrderer=new DfsNodeOrderer(prm);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    PlungingBfsNodeOrdererPrm prm=new PlungingBfsNodeOrdererPrm();
    prm.localRelativeGapThreshold=localRelativeGapThreshold;
    nodeOrderer=new PlungingBfsNodeOrderer(prm);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new DfsRandChildAtDepthNodeOrderer(60);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new DfsRandWalkNodeOrderer(60);
  }
  DmvSolFactoryPrm initSolPrm=getDmvSolFactoryPrm();
  DmvProjectorFactory projectorFactory=getDmvProjectorFactory();
  LazyBnbSolverPrm bnbPrm=new LazyBnbSolverPrm();
  bnbPrm.disableFathoming=disableFathoming;
  bnbPrm.epsilon=epsilon;
  bnbPrm.evaluator=new DmvSolutionEvaluator(parserEvaluator);
  bnbPrm.leafNodeOrderer=nodeOrderer;
  bnbPrm.timeoutSeconds=timeoutSeconds;
  if (algorithm.equals(""String_Node_Str"")) {
    bnbPrm.evaluator=null;
    bnbPrm.timeoutSeconds=bnbTimeoutSeconds;
    LocalBnBDmvTrainerPrm lbPrm=new LocalBnBDmvTrainerPrm(viterbiTrainer,bnbPrm,brancher,relaxFactory,projectorFactory,numRestarts,offsetProb,probOfSkipCm,timeoutSeconds,parserEvaluator,initSolPrm);
    trainer=new LocalBnBDmvTrainer(lbPrm);
  }
 else   if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    LazyBnbSolverFactory bnbSolverFactory;
    if (algorithm.equals(""String_Node_Str"")) {
      RandWalkBnbSamplerPrm prm=new RandWalkBnbSamplerPrm();
      prm.maxSamples=10000;
      prm.bnbPrm=bnbPrm;
      bnbSolverFactory=prm;
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      DepthStratifiedBnbSamplerPrm prm=new DepthStratifiedBnbSamplerPrm();
      prm.maxDepth=60;
      prm.bnbPrm=bnbPrm;
      bnbSolverFactory=prm;
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      bnbSolverFactory=bnbPrm;
    }
 else {
      throw new ParseException(""String_Node_Str"" + algorithm);
    }
    BnBDmvTrainerPrm bnbtPrm=new BnBDmvTrainerPrm();
    bnbtPrm.initSolPrm=initSolPrm;
    bnbtPrm.brancher=brancher;
    bnbtPrm.bnbSolverFactory=bnbSolverFactory;
    bnbtPrm.relaxFactory=relaxFactory;
    bnbtPrm.projectorFactory=projectorFactory;
    trainer=new BnBDmvTrainer(bnbtPrm);
  }
  if (trainer == null) {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}",0.9691539566377128
131656,"public DmvViterbiEMTrainerPrm(int iterations,double convergenceRatio,int numRestarts,double timeoutSeconds,double lambda,DependencyParserEvaluator evaluator){
}","public DmvViterbiEMTrainerPrm(int iterations,double convergenceRatio,int numRestarts,double timeoutSeconds,double lambda,DependencyParserEvaluator evaluator){
  this.lambda=lambda;
  this.evaluator=evaluator;
  this.emPrm.iterations=iterations;
  this.emPrm.convergenceRatio=convergenceRatio;
  this.emPrm.numRestarts=numRestarts;
  this.emPrm.timeoutSeconds=timeoutSeconds;
}",0.5970149253731343
131657,"public static Trainer getTrainer(DepTreebank goldTreebank,DmvModel goldModel) throws ParseException {
  if (!modelName.equals(""String_Node_Str"")) {
    throw new ParseException(""String_Node_Str"" + modelName);
  }
  DmvRelaxationFactory relaxFactory=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    relaxFactory=getDmvRelaxationFactory();
  }
  DependencyParserEvaluator parserEvaluator=new DependencyParserEvaluator(getEvalParser(),goldTreebank,""String_Node_Str"");
  Trainer trainer=null;
  DmvViterbiEMTrainer viterbiTrainer=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    IlpSolverFactory ilpSolverFactory=null;
    if (parserName.startsWith(""String_Node_Str"")) {
      IlpSolverId ilpSolverId=IlpSolverId.getById(ilpSolver);
      ilpSolverFactory=new IlpSolverFactory(ilpSolverId,numThreads,ilpWorkMemMegs);
    }
    if (parserName.equals(""String_Node_Str"")) {
      parser=new DmvCkyParser();
    }
 else     if (parserName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiSentenceParser(formulation,ilpSolverFactory);
    }
 else     if (parserName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiParser(formulation,ilpSolverFactory);
    }
 else     if (parserName.equals(""String_Node_Str"") || parserName.equals(""String_Node_Str"")) {
      DeltaGenerator deltaGen;
      if (deltaGenerator.equals(""String_Node_Str"")) {
        deltaGen=new FixedIntervalDeltaGenerator(interval,numPerSide);
      }
 else       if (deltaGenerator.equals(""String_Node_Str"")) {
        deltaGen=new FactorDeltaGenerator(factor,numPerSide);
      }
 else {
        throw new ParseException(""String_Node_Str"" + deltaGenerator);
      }
      if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new InitializedIlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen,ilpSolverFactory);
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
    }
 else {
      throw new ParseException(""String_Node_Str"" + parserName);
    }
    ModelFactory modelFactory;
    if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new UniformDmvModelFactory();
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new RandomDmvModelFactory(lambda);
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new SupervisedDmvModelFactory(goldTreebank);
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new FixableModelFactory(null);
      ((FixableModelFactory)modelFactory).fixModel(goldModel);
    }
 else {
      throw new ParseException(""String_Node_Str"" + initWeights);
    }
    if (algorithm.equals(""String_Node_Str"")) {
      DmvViterbiEMTrainerPrm vtPrm=new DmvViterbiEMTrainerPrm(iterations,convergenceRatio,numRestarts,timeoutSeconds,lambda,parserEvaluator);
      trainer=new DmvViterbiEMTrainer(vtPrm,parser,modelFactory);
    }
    if (algorithm.equals(""String_Node_Str"")) {
      DmvViterbiEMTrainerPrm vtPrm=new DmvViterbiEMTrainerPrm(iterations,convergenceRatio,0,Double.POSITIVE_INFINITY,lambda,null);
      viterbiTrainer=new DmvViterbiEMTrainer(vtPrm,parser,modelFactory);
    }
  }
  CptBoundsDeltaFactory brancher=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    VariableSplitter varSplitter;
    if (varSplit.equals(""String_Node_Str"")) {
      varSplitter=new MidpointVarSplitter(MidpointChoice.HALF_PROB);
    }
 else     if (varSplit.equals(""String_Node_Str"")) {
      varSplitter=new MidpointVarSplitter(MidpointChoice.HALF_LOGPROB);
    }
 else {
      throw new ParseException(""String_Node_Str"" + varSplit);
    }
    VariableSelector varSelector;
    if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new FullStrongVariableSelector(varSplitter);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new PseudocostVariableSelector(varSplitter);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RegretVariableSelector();
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RandomVariableSelector(true);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RandomVariableSelector(false);
    }
 else {
      throw new ParseException(""String_Node_Str"" + varSelection);
    }
    brancher=new BasicCptBoundsDeltaFactory(varSelector,varSplitter);
  }
  NodeOrderer nodeOrderer=null;
  if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new PqNodeOrderer(new BfsComparator());
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    DfsNodeOrdererPrm prm=new DfsNodeOrdererPrm();
    nodeOrderer=new DfsNodeOrderer(prm);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    PlungingBfsNodeOrdererPrm prm=new PlungingBfsNodeOrdererPrm();
    prm.localRelativeGapThreshold=localRelativeGapThreshold;
    nodeOrderer=new PlungingBfsNodeOrderer(prm);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new DfsRandChildAtDepthNodeOrderer(60);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new DfsRandWalkNodeOrderer(60);
  }
  DmvSolFactoryPrm initSolPrm=getDmvSolFactoryPrm();
  DmvProjectorFactory projectorFactory=getDmvProjectorFactory();
  LazyBnbSolverPrm bnbPrm=new LazyBnbSolverPrm();
  bnbPrm.disableFathoming=disableFathoming;
  bnbPrm.epsilon=epsilon;
  bnbPrm.evaluator=new DmvSolutionEvaluator(parserEvaluator);
  bnbPrm.leafNodeOrderer=nodeOrderer;
  bnbPrm.timeoutSeconds=timeoutSeconds;
  if (algorithm.equals(""String_Node_Str"")) {
    bnbPrm.evaluator=null;
    bnbPrm.timeoutSeconds=bnbTimeoutSeconds;
    LocalBnBDmvTrainerPrm lbPrm=new LocalBnBDmvTrainerPrm(viterbiTrainer,bnbPrm,brancher,relaxFactory,projectorFactory,numRestarts,offsetProb,probOfSkipCm,timeoutSeconds,parserEvaluator,initSolPrm);
    trainer=new LocalBnBDmvTrainer(lbPrm);
  }
 else   if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    LazyBnbSolverFactory bnbSolverFactory;
    if (algorithm.equals(""String_Node_Str"")) {
      RandWalkBnbSamplerPrm prm=new RandWalkBnbSamplerPrm();
      prm.maxSamples=10000;
      bnbSolverFactory=prm;
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      DepthStratifiedBnbSamplerPrm prm=new DepthStratifiedBnbSamplerPrm();
      prm.maxDepth=60;
      bnbSolverFactory=prm;
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      bnbSolverFactory=bnbPrm;
    }
 else {
      throw new ParseException(""String_Node_Str"" + algorithm);
    }
    BnBDmvTrainerPrm bnbtPrm=new BnBDmvTrainerPrm();
    bnbtPrm.initSolPrm=initSolPrm;
    bnbtPrm.brancher=brancher;
    bnbtPrm.bnbSolverFactory=bnbSolverFactory;
    bnbtPrm.relaxFactory=relaxFactory;
    bnbtPrm.projectorFactory=projectorFactory;
    trainer=new BnBDmvTrainer(bnbtPrm);
  }
  if (trainer == null) {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}","public static Trainer getTrainer(DepTreebank goldTreebank,DmvModel goldModel) throws ParseException {
  if (!modelName.equals(""String_Node_Str"")) {
    throw new ParseException(""String_Node_Str"" + modelName);
  }
  DmvRelaxationFactory relaxFactory=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")|| algorithm.equals(""String_Node_Str"")) {
    relaxFactory=getDmvRelaxationFactory();
  }
  DependencyParserEvaluator parserEvaluator=new DependencyParserEvaluator(getEvalParser(),goldTreebank,""String_Node_Str"");
  Trainer trainer=null;
  DmvViterbiEMTrainer viterbiTrainer=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    IlpSolverFactory ilpSolverFactory=null;
    if (parserName.startsWith(""String_Node_Str"")) {
      IlpSolverId ilpSolverId=IlpSolverId.getById(ilpSolver);
      ilpSolverFactory=new IlpSolverFactory(ilpSolverId,numThreads,ilpWorkMemMegs);
    }
    if (parserName.equals(""String_Node_Str"")) {
      parser=new DmvCkyParser();
    }
 else     if (parserName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiSentenceParser(formulation,ilpSolverFactory);
    }
 else     if (parserName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiParser(formulation,ilpSolverFactory);
    }
 else     if (parserName.equals(""String_Node_Str"") || parserName.equals(""String_Node_Str"")) {
      DeltaGenerator deltaGen;
      if (deltaGenerator.equals(""String_Node_Str"")) {
        deltaGen=new FixedIntervalDeltaGenerator(interval,numPerSide);
      }
 else       if (deltaGenerator.equals(""String_Node_Str"")) {
        deltaGen=new FactorDeltaGenerator(factor,numPerSide);
      }
 else {
        throw new ParseException(""String_Node_Str"" + deltaGenerator);
      }
      if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new InitializedIlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen,ilpSolverFactory);
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
    }
 else {
      throw new ParseException(""String_Node_Str"" + parserName);
    }
    ModelFactory modelFactory;
    if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new UniformDmvModelFactory();
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new RandomDmvModelFactory(lambda);
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new SupervisedDmvModelFactory(goldTreebank);
    }
 else     if (initWeights.equals(""String_Node_Str"")) {
      modelFactory=new FixableModelFactory(null);
      ((FixableModelFactory)modelFactory).fixModel(goldModel);
    }
 else {
      throw new ParseException(""String_Node_Str"" + initWeights);
    }
    if (algorithm.equals(""String_Node_Str"")) {
      DmvViterbiEMTrainerPrm vtPrm=new DmvViterbiEMTrainerPrm(iterations,convergenceRatio,numRestarts,timeoutSeconds,lambda,parserEvaluator);
      trainer=new DmvViterbiEMTrainer(vtPrm,parser,modelFactory);
    }
    if (algorithm.equals(""String_Node_Str"")) {
      DmvViterbiEMTrainerPrm vtPrm=new DmvViterbiEMTrainerPrm(iterations,convergenceRatio,0,Double.POSITIVE_INFINITY,lambda,null);
      viterbiTrainer=new DmvViterbiEMTrainer(vtPrm,parser,modelFactory);
    }
  }
  CptBoundsDeltaFactory brancher=null;
  if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    VariableSplitter varSplitter;
    if (varSplit.equals(""String_Node_Str"")) {
      varSplitter=new MidpointVarSplitter(MidpointChoice.HALF_PROB);
    }
 else     if (varSplit.equals(""String_Node_Str"")) {
      varSplitter=new MidpointVarSplitter(MidpointChoice.HALF_LOGPROB);
    }
 else {
      throw new ParseException(""String_Node_Str"" + varSplit);
    }
    VariableSelector varSelector;
    if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new FullStrongVariableSelector(varSplitter);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new PseudocostVariableSelector(varSplitter);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RegretVariableSelector();
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RandomVariableSelector(true);
    }
 else     if (varSelection.equals(""String_Node_Str"")) {
      varSelector=new RandomVariableSelector(false);
    }
 else {
      throw new ParseException(""String_Node_Str"" + varSelection);
    }
    brancher=new BasicCptBoundsDeltaFactory(varSelector,varSplitter);
  }
  NodeOrderer nodeOrderer=null;
  if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new PqNodeOrderer(new BfsComparator());
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    DfsNodeOrdererPrm prm=new DfsNodeOrdererPrm();
    nodeOrderer=new DfsNodeOrderer(prm);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    PlungingBfsNodeOrdererPrm prm=new PlungingBfsNodeOrdererPrm();
    prm.localRelativeGapThreshold=localRelativeGapThreshold;
    nodeOrderer=new PlungingBfsNodeOrderer(prm);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new DfsRandChildAtDepthNodeOrderer(60);
  }
 else   if (nodeOrder.equals(""String_Node_Str"")) {
    nodeOrderer=new DfsRandWalkNodeOrderer(60);
  }
  DmvSolFactoryPrm initSolPrm=getDmvSolFactoryPrm();
  DmvProjectorFactory projectorFactory=getDmvProjectorFactory();
  LazyBnbSolverPrm bnbPrm=new LazyBnbSolverPrm();
  bnbPrm.disableFathoming=disableFathoming;
  bnbPrm.epsilon=epsilon;
  bnbPrm.evaluator=new DmvSolutionEvaluator(parserEvaluator);
  bnbPrm.leafNodeOrderer=nodeOrderer;
  bnbPrm.timeoutSeconds=timeoutSeconds;
  if (algorithm.equals(""String_Node_Str"")) {
    bnbPrm.evaluator=null;
    bnbPrm.timeoutSeconds=bnbTimeoutSeconds;
    LocalBnBDmvTrainerPrm lbPrm=new LocalBnBDmvTrainerPrm(viterbiTrainer,bnbPrm,brancher,relaxFactory,projectorFactory,numRestarts,offsetProb,probOfSkipCm,timeoutSeconds,parserEvaluator,initSolPrm);
    trainer=new LocalBnBDmvTrainer(lbPrm);
  }
 else   if (algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    LazyBnbSolverFactory bnbSolverFactory;
    if (algorithm.equals(""String_Node_Str"")) {
      RandWalkBnbSamplerPrm prm=new RandWalkBnbSamplerPrm();
      prm.maxSamples=10000;
      bnbSolverFactory=prm;
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      DepthStratifiedBnbSamplerPrm prm=new DepthStratifiedBnbSamplerPrm();
      prm.maxDepth=60;
      bnbSolverFactory=prm;
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      bnbSolverFactory=bnbPrm;
    }
 else {
      throw new ParseException(""String_Node_Str"" + algorithm);
    }
    BnBDmvTrainerPrm bnbtPrm=new BnBDmvTrainerPrm();
    bnbtPrm.initSolPrm=initSolPrm;
    bnbtPrm.brancher=brancher;
    bnbtPrm.bnbSolverFactory=bnbSolverFactory;
    bnbtPrm.relaxFactory=relaxFactory;
    bnbtPrm.projectorFactory=projectorFactory;
    trainer=new BnBDmvTrainer(bnbtPrm);
  }
  if (trainer == null) {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}",0.994693680656054
131658,"@Test public void testArgParser() throws ParseException {
{
    String[] args=""String_Node_Str"".split(""String_Node_Str"");
    ArgParser parser=new ArgParser();
    parser.addClass(ArgParserTest.class);
    parser.parseArgs(args);
    Assert.assertEquals(2,intVal);
    Assert.assertEquals(1e10,doubleVal,1e-13);
  }
{
    String[] args=""String_Node_Str"".split(""String_Node_Str"");
    ArgParser parser=new ArgParser();
    parser.addClass(ArgParserTest.class);
    parser.parseArgs(args);
    Assert.assertEquals(3,intVal);
    Assert.assertEquals(3e10,doubleVal,1e-13);
  }
{
    String[] args=""String_Node_Str"".split(""String_Node_Str"");
    ArgParser parser=new ArgParser();
    parser.addClass(ArgParserTest.class);
    parser.parseArgs(args);
    Assert.assertEquals(""String_Node_Str"",strVal);
    Assert.assertEquals(new File(""String_Node_Str""),fileVal);
  }
}","@Test public void testArgParser() throws ParseException {
{
    String[] args=""String_Node_Str"".split(""String_Node_Str"");
    ArgParser parser=new ArgParser();
    parser.addClass(ArgParserTest.class);
    parser.parseArgs(args);
    Assert.assertEquals(2,intVal);
    Assert.assertEquals(1e10,doubleVal,1e-13);
  }
{
    String[] args=""String_Node_Str"".split(""String_Node_Str"");
    ArgParser parser=new ArgParser();
    parser.addClass(ArgParserTest.class);
    parser.parseArgs(args);
    Assert.assertEquals(3,intVal);
    Assert.assertEquals(3e10,doubleVal,1e-13);
  }
{
    String[] args=""String_Node_Str"".split(""String_Node_Str"");
    ArgParser parser=new ArgParser();
    parser.addClass(ArgParserTest.class);
    parser.parseArgs(args);
    Assert.assertEquals(""String_Node_Str"",strVal);
    Assert.assertEquals(new File(""String_Node_Str""),fileVal);
  }
{
    String[] args=""String_Node_Str"".split(""String_Node_Str"");
    ArgParser parser=new ArgParser();
    parser.addClass(ArgParserTest.class);
    parser.parseArgs(args);
    Assert.assertEquals(MockEnum.OPT2,enumVal);
  }
}",0.8852459016393442
131659,"public void fathom(ProblemNode node,FathomStatus status){
switch (status) {
case Infeasible:
    numInfeasible++;
  break;
case Pruned:
numPruned++;
break;
case CompletelySolved:
numCompletelySolved++;
break;
case BottomedOut:
numBottomedOut++;
break;
}
depthSum+=node.getDepth();
}","public void fathom(ProblemNode node,FathomStatus status){
switch (status) {
case NotFathomed:
    return;
case Infeasible:
  numInfeasible++;
break;
case Pruned:
numPruned++;
break;
case CompletelySolved:
numCompletelySolved++;
break;
case BottomedOut:
numBottomedOut++;
break;
}
depthSum+=node.getDepth();
}",0.9423728813559322
131660,"public SearchStatus runBranchAndBound(ProblemNode rootNode,Solution initialSolution,double initialScore){
  this.incumbentSolution=initialSolution;
  this.incumbentScore=initialScore;
  globalUb=BEST_SCORE;
  status=SearchStatus.NON_OPTIMAL_SOLUTION_FOUND;
  clearLeafNodes();
  int numProcessed=0;
  FathomStats fathom=new FathomStats();
  addRootToLeafNodes(rootNode);
  double rootLogSpace=Double.NaN;
  double logSpaceRemain=Double.NaN;
  ProblemNode curNode=null;
  evalIncumbent(initialSolution);
  while (hasNextLeafNode()) {
    if (nodeTimer.isRunning()) {
      nodeTimer.stop();
    }
    nodeTimer.start();
    ProblemNode worstLeaf=getWorstLeaf();
    if (worstLeaf.getOptimisticBound() > globalUb + 1e-8) {
      log.warn(String.format(""String_Node_Str"",worstLeaf.getOptimisticBound(),globalUb));
    }
    globalUb=worstLeaf.getOptimisticBound();
    assert(!Double.isNaN(globalUb));
    numProcessed++;
    double relativeDiff=computeRelativeDiff(globalUb,incumbentScore);
    if (relativeDiff <= prm.epsilon) {
      break;
    }
 else     if (nodeTimer.totSec() > prm.timeoutSeconds) {
      break;
    }
    printSummary(globalUb,relativeDiff,numProcessed,fathom);
    if (log.isDebugEnabled() && numProcessed % 100 == 0) {
      printLeafNodeBoundHistogram();
      printTimers(numProcessed);
      printSpaceRemaining(numProcessed,rootLogSpace,logSpaceRemain);
    }
    curNode=getNextLeafNode();
    NodeResult result=processNode(curNode);
    fathom.fathom(curNode,result.status);
    if (result.status != FathomStatus.NotFathomed && prm.relaxation instanceof DmvRelaxation) {
      DmvRelaxation relax=(DmvRelaxation)prm.relaxation;
      if (numProcessed == 1) {
        rootLogSpace=relax.getBounds().getLogSpace();
        logSpaceRemain=rootLogSpace;
      }
      logSpaceRemain=Utilities.logSubtractExact(logSpaceRemain,relax.getBounds().getLogSpace());
    }
    if (result.status == FathomStatus.NotFathomed) {
      addToLeafNodes(result,curNode == rootNode);
    }
  }
  if (nodeTimer.isRunning()) {
    nodeTimer.stop();
  }
  if (!hasNextLeafNode()) {
    globalUb=incumbentScore + prm.epsilon * Math.abs(incumbentScore);
  }
  evalIncumbent(incumbentSolution);
  double relativeDiff=computeRelativeDiff(globalUb,incumbentScore);
  if (Utilities.lte(relativeDiff,prm.epsilon,1e-13)) {
    status=SearchStatus.OPTIMAL_SOLUTION_FOUND;
  }
  printSummary(globalUb,relativeDiff,numProcessed,fathom);
  printTimers(numProcessed);
  clearLeafNodes();
  log.info(""String_Node_Str"" + status);
  return status;
}","public SearchStatus runBranchAndBound(ProblemNode rootNode,Solution initialSolution,double initialScore){
  this.incumbentSolution=initialSolution;
  this.incumbentScore=initialScore;
  globalUb=BEST_SCORE;
  status=SearchStatus.NON_OPTIMAL_SOLUTION_FOUND;
  clearLeafNodes();
  int numProcessed=0;
  FathomStats fathom=new FathomStats();
  addRootToLeafNodes(rootNode);
  double rootLogSpace=Double.NaN;
  double logSpaceRemain=Double.NaN;
  ProblemNode curNode=null;
  evalIncumbent(initialSolution);
  while (hasNextLeafNode()) {
    if (nodeTimer.isRunning()) {
      nodeTimer.stop();
    }
    nodeTimer.start();
    ProblemNode worstLeaf=getWorstLeaf();
    if (worstLeaf.getOptimisticBound() > globalUb + 1e-8) {
      log.warn(String.format(""String_Node_Str"",worstLeaf.getOptimisticBound(),globalUb));
    }
    globalUb=worstLeaf.getOptimisticBound();
    assert(!Double.isNaN(globalUb));
    numProcessed++;
    double relativeDiff=computeRelativeDiff(globalUb,incumbentScore);
    if (relativeDiff <= prm.epsilon) {
      break;
    }
 else     if (nodeTimer.totSec() > prm.timeoutSeconds) {
      break;
    }
    printSummary(globalUb,relativeDiff,numProcessed,fathom);
    if (log.isDebugEnabled() && numProcessed % 100 == 0) {
      printLeafNodeBoundHistogram();
      printTimers(numProcessed);
      printSpaceRemaining(numProcessed,rootLogSpace,logSpaceRemain);
    }
    curNode=getNextLeafNode();
    NodeResult result=processNode(curNode);
    fathom.add(curNode,result.status);
    if (result.status != FathomStatus.NotFathomed && prm.relaxation instanceof DmvRelaxation) {
      DmvRelaxation relax=(DmvRelaxation)prm.relaxation;
      if (numProcessed == 1) {
        rootLogSpace=relax.getBounds().getLogSpace();
        logSpaceRemain=rootLogSpace;
      }
      logSpaceRemain=Utilities.logSubtractExact(logSpaceRemain,relax.getBounds().getLogSpace());
    }
    if (result.status == FathomStatus.NotFathomed) {
      addToLeafNodes(result,curNode == rootNode);
    }
  }
  if (nodeTimer.isRunning()) {
    nodeTimer.stop();
  }
  if (!hasNextLeafNode()) {
    globalUb=incumbentScore + prm.epsilon * Math.abs(incumbentScore);
  }
  evalIncumbent(incumbentSolution);
  double relativeDiff=computeRelativeDiff(globalUb,incumbentScore);
  if (Utilities.lte(relativeDiff,prm.epsilon,1e-13)) {
    status=SearchStatus.OPTIMAL_SOLUTION_FOUND;
  }
  printSummary(globalUb,relativeDiff,numProcessed,fathom);
  printTimers(numProcessed);
  clearLeafNodes();
  log.info(""String_Node_Str"" + status);
  return status;
}",0.99822729958637
131661,"@Override public Collection<UnorderedPair> getRltRowsForLeq(int startFac1,int endFac1,int startFac2,int endFac2,RowType type){
  List<Factor> leqFactors=rlt.getLeqFactors();
  Map<Integer,List<Integer>> varConsMap=getVarConsMap(leqFactors);
  Set<UnorderedPair> rltRows=new HashSet<UnorderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    Integer i : Utilities.safeGet(varConsMap,varIdPair.get1())) {
      for (      Integer j : Utilities.safeGet(varConsMap,varIdPair.get2())) {
        if ((startFac1 <= i && i < endFac1 && startFac2 <= j && j < endFac2) || (startFac2 <= i && i < endFac2 && startFac1 <= j && j < endFac1)) {
          rltRows.add(new UnorderedPair(i,j));
        }
      }
    }
  }
  return rltRows;
}","@Override public Collection<UnorderedPair> getRltRowsForLeq(int startFac1,int endFac1,int startFac2,int endFac2,RowType type){
  List<Factor> leqFactors=rlt.getLeqFactors();
  Map<Integer,List<Integer>> varConsMap=getVarConsMap(leqFactors);
  Set<UnorderedPair> rltRows=new HashSet<UnorderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    Integer i : Utilities.safeGetList(varConsMap,varIdPair.get1())) {
      for (      Integer j : Utilities.safeGetList(varConsMap,varIdPair.get2())) {
        if ((startFac1 <= i && i < endFac1 && startFac2 <= j && j < endFac2) || (startFac2 <= i && i < endFac2 && startFac1 <= j && j < endFac1)) {
          rltRows.add(new UnorderedPair(i,j));
        }
      }
    }
  }
  return rltRows;
}",0.9946595460614152
131662,"@Override public Collection<OrderedPair> getRltRowsForEq(int startFac,int endFac,int numVars,RowType type){
  List<Factor> eqFactors=Utilities.sublist(rlt.getEqFactors(),startFac,endFac);
  Map<Integer,List<Integer>> varConsMap=getVarConsMap(eqFactors);
  Set<OrderedPair> rltRows=new HashSet<OrderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    Integer consId1 : Utilities.safeGet(varConsMap,varIdPair.get1())) {
      rltRows.add(new OrderedPair(consId1,varIdPair.get2()));
    }
    for (    Integer consId2 : Utilities.safeGet(varConsMap,varIdPair.get2())) {
      rltRows.add(new OrderedPair(consId2,varIdPair.get1()));
    }
  }
  return rltRows;
}","@Override public Collection<OrderedPair> getRltRowsForEq(int startFac,int endFac,int numVars,RowType type){
  List<Factor> eqFactors=Utilities.sublist(rlt.getEqFactors(),startFac,endFac);
  Map<Integer,List<Integer>> varConsMap=getVarConsMap(eqFactors);
  Set<OrderedPair> rltRows=new HashSet<OrderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    Integer consId1 : Utilities.safeGetList(varConsMap,varIdPair.get1())) {
      rltRows.add(new OrderedPair(consId1,varIdPair.get2()));
    }
    for (    Integer consId2 : Utilities.safeGetList(varConsMap,varIdPair.get2())) {
      rltRows.add(new OrderedPair(consId2,varIdPair.get1()));
    }
  }
  return rltRows;
}",0.9941434846266471
131663,"@Override public Collection<UnorderedPair> getRltRowsForLeq(int startFac1,int endFac1,int startFac2,int endFac2,RowType type){
  List<Factor> leqFactors=rlt.getLeqFactors();
  Map<Integer,List<Integer>> varConsMap=getVarConsMap(leqFactors);
  Set<UnorderedPair> rltRows=new HashSet<UnorderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    Integer i : varConsMap.get(varIdPair.get1())) {
      for (      Integer j : varConsMap.get(varIdPair.get2())) {
        if ((startFac1 <= i && i < endFac1 && startFac2 <= j && j < endFac2) || (startFac2 <= i && i < endFac2 && startFac1 <= j && j < endFac1)) {
          rltRows.add(new UnorderedPair(i,j));
        }
      }
    }
  }
  return rltRows;
}","@Override public Collection<UnorderedPair> getRltRowsForLeq(int startFac1,int endFac1,int startFac2,int endFac2,RowType type){
  List<Factor> leqFactors=rlt.getLeqFactors();
  Map<Integer,List<Integer>> varConsMap=getVarConsMap(leqFactors);
  Set<UnorderedPair> rltRows=new HashSet<UnorderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    Integer i : Utilities.safeGet(varConsMap,varIdPair.get1())) {
      for (      Integer j : Utilities.safeGet(varConsMap,varIdPair.get2())) {
        if ((startFac1 <= i && i < endFac1 && startFac2 <= j && j < endFac2) || (startFac2 <= i && i < endFac2 && startFac1 <= j && j < endFac1)) {
          rltRows.add(new UnorderedPair(i,j));
        }
      }
    }
  }
  return rltRows;
}",0.905608755129959
131664,"@Override public Collection<OrderedPair> getRltRowsForEq(int startFac,int endFac,int numVars,RowType type){
  List<Factor> eqFactors=Utilities.sublist(rlt.getEqFactors(),startFac,endFac);
  Map<Integer,List<Integer>> varConsMap=getVarConsMap(eqFactors);
  Set<OrderedPair> rltRows=new HashSet<OrderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    Integer consId1 : varConsMap.get(varIdPair.get1())) {
      rltRows.add(new OrderedPair(consId1,varIdPair.get2()));
    }
    for (    Integer consId2 : varConsMap.get(varIdPair.get2())) {
      rltRows.add(new OrderedPair(consId2,varIdPair.get1()));
    }
  }
  return rltRows;
}","@Override public Collection<OrderedPair> getRltRowsForEq(int startFac,int endFac,int numVars,RowType type){
  List<Factor> eqFactors=Utilities.sublist(rlt.getEqFactors(),startFac,endFac);
  Map<Integer,List<Integer>> varConsMap=getVarConsMap(eqFactors);
  Set<OrderedPair> rltRows=new HashSet<OrderedPair>();
  for (  UnorderedPair varIdPair : varIdPairs) {
    for (    Integer consId1 : Utilities.safeGet(varConsMap,varIdPair.get1())) {
      rltRows.add(new OrderedPair(consId1,varIdPair.get2()));
    }
    for (    Integer consId2 : Utilities.safeGet(varConsMap,varIdPair.get2())) {
      rltRows.add(new OrderedPair(consId2,varIdPair.get1()));
    }
  }
  return rltRows;
}",0.9639097744360904
131665,"public static <X>Double safeGet(Map<X,Double> map,X key){
  Double value=map.get(key);
  if (value == null) {
    return DOUBLE_ZERO;
  }
  return value;
}","public static <X,Y>List<Y> safeGet(Map<X,List<Y>> map,X key){
  List<Y> list=map.get(key);
  if (list == null) {
    return Collections.emptyList();
  }
 else {
    return list;
  }
}",0.6745562130177515
131666,"public CptBounds(IndexedCpt icpt){
  int[][] supFreqCm=icpt.getTotSupervisedFreqCm();
  int[][] totMaxFreqCm=icpt.getTotalMaxFreqCm();
  lbs=new double[2][icpt.getNumConds()][];
  ubs=new double[2][icpt.getNumConds()][];
  for (  Type type : Type.values()) {
    int t=type.getAsInt();
    for (int c=0; c < lbs[t].length; c++) {
      lbs[t][c]=new double[icpt.getNumParams(c)];
      ubs[t][c]=new double[lbs[t][c].length];
      if (type == Type.PARAM) {
        Arrays.fill(lbs[t][c],DEFAULT_LOWER_BOUND);
        Arrays.fill(ubs[t][c],DEFAULT_UPPER_BOUND);
        double totMaxFreqC=Vectors.sum(totMaxFreqCm[c]);
        for (int m=0; m < lbs[t][c].length; m++) {
          if (totMaxFreqCm[c][m] == 0 && totMaxFreqC > 0) {
            ubs[t][c][m]=lbs[t][c][m];
          }
        }
      }
 else {
        for (int m=0; m < lbs[t][c].length; m++) {
          lbs[t][c][m]=supFreqCm[c][m];
          ubs[t][c][m]=totMaxFreqCm[c][m];
        }
      }
    }
  }
}","public CptBounds(IndexedCpt icpt){
  int[][] supFreqCm=icpt.getTotSupervisedFreqCm();
  int[][] totMaxFreqCm=icpt.getTotMaxFreqCm();
  lbs=new double[2][icpt.getNumConds()][];
  ubs=new double[2][icpt.getNumConds()][];
  for (  Type type : Type.values()) {
    int t=type.getAsInt();
    for (int c=0; c < lbs[t].length; c++) {
      lbs[t][c]=new double[icpt.getNumParams(c)];
      ubs[t][c]=new double[lbs[t][c].length];
      if (type == Type.PARAM) {
        Arrays.fill(lbs[t][c],DEFAULT_LOWER_BOUND);
        Arrays.fill(ubs[t][c],DEFAULT_UPPER_BOUND);
        double totMaxFreqCmVal=Vectors.sum(totMaxFreqCm[c]);
        for (int m=0; m < lbs[t][c].length; m++) {
          if (totMaxFreqCm[c][m] == 0 && totMaxFreqCmVal > 0) {
            ubs[t][c][m]=lbs[t][c][m];
          }
        }
      }
 else {
        for (int m=0; m < lbs[t][c].length; m++) {
          lbs[t][c][m]=supFreqCm[c][m];
          ubs[t][c][m]=totMaxFreqCm[c][m];
        }
      }
    }
  }
}",0.9948612538540595
131667,"private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound,int depth) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  int maxCutRounds=(depth == 0) ? prm.rootMaxCutRounds : prm.maxCutRounds;
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  Timer timer=new Timer();
  int cut;
  for (cut=0; ; ) {
    timer.start();
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex.getStatus(),cplex.getCplexStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getCplexStatus());
    double lowerBound;
    if (status == RelaxStatus.Unknown) {
      lowerBound=INTERNAL_BEST_SCORE;
    }
 else     if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
    }
 else {
      if (prm.tempDir != null) {
        cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
      }
      warmStart=getWarmStart();
      lowerBound=cplex.getObjValue();
      log.trace(""String_Node_Str"" + lowerBound);
      double prevLowerBound=cutIterLowerBounds.size() > 0 ? cutIterLowerBounds.get(cutIterLowerBounds.size() - 1) : INTERNAL_WORST_SCORE;
      if (!Utilities.lte(prevLowerBound,lowerBound,prm.OBJ_VAL_DECREASE_TOLERANCE)) {
        Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterLowerBounds.size() - 1) : Status.Unknown;
        log.warn(String.format(""String_Node_Str"",prevLowerBound,lowerBound,prevStatus,cplex.getStatus()));
      }
      if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
        log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
      }
      if (lowerBound >= upperBound) {
        status=RelaxStatus.Pruned;
      }
    }
    cutIterLowerBounds.add(lowerBound);
    cutIterStatuses.add(cplex.getStatus());
    log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
    timer.stop();
    if (status == RelaxStatus.Unknown || status == RelaxStatus.Infeasible || status == RelaxStatus.Pruned || timer.totSec() > prm.timeoutSeconds) {
      break;
    }
 else     if (cut < maxCutRounds) {
      int numCutAdded=addCuts(cplex,cut);
      log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
      if (numCutAdded == 0) {
        log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
        break;
      }
      cut++;
    }
 else {
      break;
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
  log.debug(""String_Node_Str"" + cutIterStatuses);
  log.debug(""String_Node_Str"" + simplexTimer.totMs() / numSolves);
  int origCons=mp.origMatrix.getNrows() - sto.getNumStoCons();
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),origCons,mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}","private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound,int depth) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  int maxCutRounds=(depth == 0) ? prm.rootMaxCutRounds : prm.maxCutRounds;
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  Timer timer=new Timer();
  int cut;
  for (cut=0; ; ) {
    timer.start();
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex);
    log.trace(""String_Node_Str"" + cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getCplexStatus());
    log.debug(""String_Node_Str"" + cplex.isDualFeasible());
    log.debug(""String_Node_Str"" + cplex.isPrimalFeasible());
    double lowerBound;
    if (status == RelaxStatus.Unknown) {
      log.debug(""String_Node_Str"" + cplex.getObjValue());
      lowerBound=INTERNAL_BEST_SCORE;
    }
 else     if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
    }
 else {
      if (prm.tempDir != null) {
        cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
      }
      warmStart=getWarmStart();
      lowerBound=cplex.getObjValue();
      log.trace(""String_Node_Str"" + lowerBound);
      double prevLowerBound=cutIterLowerBounds.size() > 0 ? cutIterLowerBounds.get(cutIterLowerBounds.size() - 1) : INTERNAL_WORST_SCORE;
      if (!Utilities.lte(prevLowerBound,lowerBound,prm.OBJ_VAL_DECREASE_TOLERANCE)) {
        Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterLowerBounds.size() - 1) : Status.Unknown;
        log.warn(String.format(""String_Node_Str"",prevLowerBound,lowerBound,prevStatus,cplex.getStatus()));
      }
      if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
        log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
      }
      if (lowerBound >= upperBound) {
        status=RelaxStatus.Pruned;
      }
    }
    cutIterLowerBounds.add(lowerBound);
    cutIterStatuses.add(cplex.getStatus());
    log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
    timer.stop();
    if (status == RelaxStatus.Unknown || status == RelaxStatus.Infeasible || status == RelaxStatus.Pruned || timer.totSec() > prm.timeoutSeconds) {
      break;
    }
 else     if (cut < maxCutRounds) {
      int numCutAdded=addCuts(cplex,cut);
      log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
      if (numCutAdded == 0) {
        log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
        break;
      }
      cut++;
    }
 else {
      break;
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
  log.debug(""String_Node_Str"" + cutIterStatuses);
  log.debug(""String_Node_Str"" + simplexTimer.totMs() / numSolves);
  int origCons=mp.origMatrix.getNrows() - sto.getNumStoCons();
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),origCons,mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}",0.9603891591382904
131668,"protected static DmvRltRelaxation getLp(DmvTrainCorpus corpus,final int numCuts,boolean envelopeOnly){
  CutCountComputer ccc=new CutCountComputer(){
    @Override public int getNumCuts(    int numParams){
      return numCuts;
    }
  }
;
  DmvRltRelaxPrm prm=new DmvRltRelaxPrm(new File(""String_Node_Str""),numCuts,ccc,envelopeOnly);
  prm.rltPrm.nameRltVarsAndCons=false;
  DmvRltRelaxation dw=new DmvRltRelaxation(prm);
  dw.init1(corpus);
  dw.init2(null);
  return dw;
}","protected static DmvRltRelaxation getLp(DmvTrainCorpus corpus,final int numCuts,boolean envelopeOnly){
  CutCountComputer ccc=new CutCountComputer(){
    @Override public int getNumCuts(    int numParams){
      return numCuts;
    }
  }
;
  DmvRltRelaxPrm prm=new DmvRltRelaxPrm(new File(""String_Node_Str""),numCuts,ccc,envelopeOnly);
  prm.rltPrm.nameRltVarsAndCons=false;
  DmvRltRelaxation relax=new DmvRltRelaxation(prm);
  relax.init1(corpus);
  relax.init2(null);
  return relax;
}",0.9106029106029108
131669,"@Test public void testSupervised(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,Prng.nextInt(1000000));
  DepTreebank treebank=generator.getTreebank(10);
  DmvTrainCorpus corpus=new DmvTrainCorpus(treebank,1.0);
  DmvRltRelaxPrm prm=new DmvRltRelaxPrm(null,100,new CutCountComputer(),false);
  prm.tempDir=new File(""String_Node_Str"");
  prm.stoPrm.minSumForCuts=1.000001;
  DmvRltRelaxation dwRelax=new DmvRltRelaxation(prm);
  dwRelax.init1(corpus);
  dwRelax.init2(null);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dwRelax.solveRelaxation();
  DmvMStep mStep=new DmvMStep(0.0);
  DmvModel m1=mStep.getModel(treebank);
  DmvObjective obj=new DmvObjective(corpus);
  double m1Obj=obj.computeTrueObjective(m1,treebank);
  Assert.assertEquals(m1Obj,relaxSol.getScore(),1e-4);
}","@Test public void testSupervised(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,Prng.nextInt(1000000));
  DepTreebank treebank=generator.getTreebank(100);
  DmvTrainCorpus corpus=new DmvTrainCorpus(treebank,1.0);
  DmvRltRelaxPrm prm=new DmvRltRelaxPrm(null,100,new CutCountComputer(),false);
  prm.tempDir=new File(""String_Node_Str"");
  prm.stoPrm.minSumForCuts=1.000001;
  DmvRltRelaxation dwRelax=new DmvRltRelaxation(prm);
  dwRelax.init1(corpus);
  dwRelax.init2(null);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dwRelax.solveRelaxation();
  double[][] regret=RegretVariableSelector.getRegretCm(relaxSol);
  for (int c=0; c < regret.length; c++) {
    for (int m=0; m < regret[c].length; m++) {
      Assert.assertEquals(0.0,regret[c][m],1e-11);
    }
  }
  Assert.assertEquals(0.0,relaxSol.getTreebank().getPropFracArcs(),1e-13);
  DmvMStep mStep=new DmvMStep(0.0);
  DmvModel m1=mStep.getModel(treebank);
  DmvObjective obj=new DmvObjective(corpus);
  double m1Obj=obj.computeTrueObjective(m1,treebank);
  Assert.assertEquals(m1Obj,relaxSol.getScore(),0.4);
}",0.6834071885770556
131670,"@Test public void testEarlyStopping(){
  DmvModel dmvModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,Prng.nextInt(1000000));
  DepTreebank treebank=generator.getTreebank(50);
  DmvTrainCorpus corpus=new DmvTrainCorpus(treebank,0.0);
  double incumbentScore=-1.2;
  DmvRltRelaxation relax=getLp(corpus,1);
  DmvSolution initSol=DmvDantzigWolfeRelaxationTest.getInitFeasSol(corpus);
  double offsetProb=0.5;
  double probOfSkip=0.5;
  LocalBnBDmvTrainer.setBoundsFromInitSol(relax,initSol,offsetProb,probOfSkip);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)relax.solveRelaxation(incumbentScore,0);
  Assert.assertTrue(relaxSol.getScore() <= incumbentScore);
}","@Test public void testEarlyStopping(){
  DmvModel dmvModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,Prng.nextInt(1000000));
  DepTreebank treebank=generator.getTreebank(50);
  DmvTrainCorpus corpus=new DmvTrainCorpus(treebank,0.0);
  double incumbentScore=-3.0;
  DmvRltRelaxPrm prm=new DmvRltRelaxPrm();
  prm.tempDir=new File(""String_Node_Str"");
  prm.rltPrm.envelopeOnly=false;
  prm.rltPrm.nameRltVarsAndCons=false;
  prm.cplexPrm.simplexDisplay=2;
  DmvRltRelaxation relax=new DmvRltRelaxation(prm);
  relax.init1(corpus);
  relax.init2(null);
  DmvSolution initSol=DmvDantzigWolfeRelaxationTest.getInitFeasSol(corpus);
  double offsetProb=0.5;
  double probOfSkip=0.25;
  LocalBnBDmvTrainer.setBoundsFromInitSol(relax,initSol,offsetProb,probOfSkip);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)relax.solveRelaxation(incumbentScore,0);
  System.out.println(relaxSol.getScore());
  Assert.assertTrue(relaxSol.getScore() <= incumbentScore);
}",0.7881885292447472
131671,"@Test public void testCounts(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  IndexedDmvModel idm=getIdm(sentences);
  assertEquals(1 + 6 + 3 * 2 * 2,idm.getNumConds());
  assertEquals(3,idm.getNumParams(0));
  assertEquals(3,idm.getNumParams(4));
  assertEquals(2,idm.getNumParams(10));
  assertEquals(""String_Node_Str"",idm.getName(1,2));
  for (int i=0; i < idm.getNumSentVars(0); i++) {
    int c=idm.getC(0,i);
    int m=idm.getM(0,i);
    System.out.println(idm.getName(c,m));
  }
  assertEquals(2 + 2 + (1 + 3 + 1+ 3),idm.getNumSentVars(0));
  int c, m, s;
  c=0;
  m=2;
  s=2;
  assertEquals(""String_Node_Str"",idm.getName(c,m));
  assertEquals(1,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  assertEquals(-1,idm.getSi(0,c,m));
  assertEquals(-1,idm.getSi(1,c,m));
  c=1;
  m=0;
  s=1;
  assertEquals(""String_Node_Str"",idm.getName(c,m));
  assertEquals(3,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  assertEquals(-1,idm.getSi(0,c,m));
  assertEquals(-1,idm.getSi(2,c,m));
  c=1 + 6;
  m=0;
  s=1;
  assertEquals(""String_Node_Str"",idm.getName(c,m));
  assertEquals(3,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  s=0;
  assertEquals(1,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  s=2;
  assertEquals(1,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  int[][] maxFreqCm=idm.getTotalMaxFreqCm();
  assertEquals(2,maxFreqCm[0][1]);
}","@Test public void testCounts(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  IndexedDmvModel idm=getIdm(sentences);
  assertEquals(1 + 6 + 3 * 2 * 2,idm.getNumConds());
  assertEquals(3,idm.getNumParams(0));
  assertEquals(3,idm.getNumParams(4));
  assertEquals(2,idm.getNumParams(10));
  assertEquals(""String_Node_Str"",idm.getName(1,2));
  for (int i=0; i < idm.getNumSentVars(0); i++) {
    int c=idm.getC(0,i);
    int m=idm.getM(0,i);
    System.out.println(idm.getName(c,m));
  }
  assertEquals(2 + 2 + (1 + 3 + 1+ 3),idm.getNumSentVars(0));
  int c, m, s;
  c=0;
  m=2;
  s=2;
  assertEquals(""String_Node_Str"",idm.getName(c,m));
  assertEquals(1,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  assertEquals(-1,idm.getSi(0,c,m));
  assertEquals(-1,idm.getSi(1,c,m));
  c=1;
  m=0;
  s=1;
  assertEquals(""String_Node_Str"",idm.getName(c,m));
  assertEquals(3,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  assertEquals(-1,idm.getSi(0,c,m));
  assertEquals(-1,idm.getSi(2,c,m));
  c=1 + 6;
  m=0;
  s=1;
  assertEquals(""String_Node_Str"",idm.getName(c,m));
  assertEquals(3,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  s=0;
  assertEquals(1,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  s=2;
  assertEquals(1,idm.getMaxFreq(s,idm.getSi(s,c,m)));
  int[][] maxFreqCm=idm.getTotMaxFreqCm();
  assertEquals(2,maxFreqCm[0][1]);
}",0.9993211133740664
131672,"private void setCplexParams(IloCplex cplex) throws IloException, FileNotFoundException {
  cplex.setParam(DoubleParam.WorkMem,workMemMegs);
  cplex.setParam(IntParam.Threads,numThreads);
  cplex.setParam(IntParam.ParallelMode,1);
  cplex.setParam(IntParam.RootAlg,simplexAlgorithm);
  cplex.setParam(IntParam.ItLim,maxSimplexIterations);
  cplex.setParam(DoubleParam.TiLim,timeoutSeconds);
  cplex.setParam(IntParam.AdvInd,1);
}","private void setCplexParams(IloCplex cplex) throws IloException, FileNotFoundException {
  cplex.setParam(DoubleParam.WorkMem,workMemMegs);
  cplex.setParam(IntParam.Threads,numThreads);
  cplex.setParam(IntParam.ParallelMode,1);
  cplex.setParam(IntParam.RootAlg,simplexAlgorithm);
  cplex.setParam(IntParam.ItLim,maxSimplexIterations);
  cplex.setParam(DoubleParam.TiLim,timeoutSeconds);
  cplex.setParam(IntParam.AdvInd,1);
  cplex.setParam(IntParam.SimDisplay,simplexDisplay);
}",0.9406593406593406
131673,"private void printSpaceRemaining(int numProcessed,double rootLogSpace,double logSpaceRemain){
  log.info(""String_Node_Str"" + logSpaceRemain);
  if (numProcessed % 10000 == 0) {
    double logSpaceRemainAdd=computeLogSpaceRemain();
    log.info(""String_Node_Str"" + logSpaceRemainAdd);
    if (!Utilities.equals(logSpaceRemain,logSpaceRemainAdd,1e-4)) {
      log.warn(""String_Node_Str"");
    }
  }
  log.info(""String_Node_Str"" + Utilities.exp(logSpaceRemain));
  log.info(""String_Node_Str"" + Utilities.exp(logSpaceRemain - rootLogSpace));
}","private void printSpaceRemaining(int numProcessed,double rootLogSpace,double logSpaceRemain){
  log.info(""String_Node_Str"" + logSpaceRemain);
  log.info(""String_Node_Str"" + Utilities.exp(logSpaceRemain));
  log.info(""String_Node_Str"" + Utilities.exp(logSpaceRemain - rootLogSpace));
}",0.3815309842041312
131674,"/** 
 * @return negative infinity if the problem is infeasible, and an upperbound otherwise
 */
@Override public double getOptimisticBound(double incumbentScore){
  if (!isOptimisticBoundCached) {
    if (dwRelax != null) {
      if (warmStart != null) {
        dwRelax.setWarmStart(warmStart);
      }
      relaxSol=(RelaxedDmvSolution)dwRelax.solveRelaxation(incumbentScore,depth);
      optimisticBound=relaxSol.getScore();
      isOptimisticBoundCached=true;
      warmStart=dwRelax.getWarmStart();
    }
 else     if (parent != null) {
      return parent.getOptimisticBound();
    }
 else {
      return LazyBranchAndBoundSolver.BEST_SCORE;
    }
  }
  return optimisticBound;
}","/** 
 * @return negative infinity if the problem is infeasible, and an upperbound otherwise
 */
@Override public double getOptimisticBound(double incumbentScore){
  if (!isOptimisticBoundCached) {
    if (dwRelax != null) {
      if (warmStart != null) {
        dwRelax.setWarmStart(warmStart);
      }
      relaxSol=(RelaxedDmvSolution)dwRelax.solveRelaxation(incumbentScore,depth);
      if (optimisticBound < relaxSol.getScore()) {
        relaxSol.setScore(optimisticBound);
      }
      optimisticBound=relaxSol.getScore();
      isOptimisticBoundCached=true;
      warmStart=dwRelax.getWarmStart();
    }
 else     if (parent != null) {
      return parent.getOptimisticBound();
    }
 else {
      return LazyBranchAndBoundSolver.BEST_SCORE;
    }
  }
  return optimisticBound;
}",0.9301694915254236
131675,"@Override public void updateTimeRemaining(double timeoutSeconds){
  CplexPrm.updateTimeoutSeconds(cplex,timeoutSeconds);
}","@Override public void updateTimeRemaining(double timeoutSeconds){
  prm.timeoutSeconds=timeoutSeconds;
  CplexPrm.updateTimeoutSeconds(cplex,timeoutSeconds);
}",0.8683274021352313
131676,"private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  TDoubleArrayList cutIterObjVals=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  int cut;
  for (cut=0; ; ) {
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex.getStatus(),cplex.getCplexStatus());
    double objVal;
    double lowerBound;
    if (status == RelaxStatus.Unknown) {
      objVal=INTERNAL_BEST_SCORE;
      lowerBound=INTERNAL_BEST_SCORE;
    }
 else {
      log.trace(""String_Node_Str"" + cplex.getStatus());
      log.trace(""String_Node_Str"" + cplex.getCplexStatus());
      if (status == RelaxStatus.Infeasible) {
        return new Pair<RelaxStatus,Double>(status,INTERNAL_WORST_SCORE);
      }
      if (prm.tempDir != null) {
        cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
      }
      warmStart=getWarmStart();
      objVal=cplex.getObjValue();
      log.trace(""String_Node_Str"" + objVal);
      double prevObjVal=cutIterObjVals.size() > 0 ? cutIterObjVals.get(cutIterObjVals.size() - 1) : INTERNAL_WORST_SCORE;
      if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
        Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterObjVals.size() - 1) : Status.Unknown;
        log.warn(String.format(""String_Node_Str"",prevObjVal,objVal,prevStatus,cplex.getStatus()));
      }
      lowerBound=objVal;
      if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
        log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
      }
    }
    cutIterObjVals.add(objVal);
    cutIterStatuses.add(cplex.getStatus());
    cutIterLowerBounds.add(lowerBound);
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Pruned;
      break;
    }
 else {
      status=RelaxStatus.Optimal;
      if (cut < prm.maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
        int numCutAdded=addCuts(cplex,cut);
        log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
        if (numCutAdded == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        cut++;
      }
 else {
        break;
      }
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
  log.debug(""String_Node_Str"" + cutIterLowerBounds);
  log.debug(""String_Node_Str"" + cutIterStatuses);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer) / numSolves);
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),mp.origMatrix.getNrows(),mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}","private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  Stopwatch timer=new Stopwatch();
  int cut;
  for (cut=0; ; ) {
    timer.start();
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex.getStatus(),cplex.getCplexStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getCplexStatus());
    double lowerBound;
    if (status == RelaxStatus.Unknown) {
      lowerBound=INTERNAL_BEST_SCORE;
    }
 else     if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
    }
 else {
      if (prm.tempDir != null) {
        cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
      }
      warmStart=getWarmStart();
      lowerBound=cplex.getObjValue();
      log.trace(""String_Node_Str"" + lowerBound);
      double prevLowerBound=cutIterLowerBounds.size() > 0 ? cutIterLowerBounds.get(cutIterLowerBounds.size() - 1) : INTERNAL_WORST_SCORE;
      if (!Utilities.lte(prevLowerBound,lowerBound,prm.OBJ_VAL_DECREASE_TOLERANCE)) {
        Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterLowerBounds.size() - 1) : Status.Unknown;
        log.warn(String.format(""String_Node_Str"",prevLowerBound,lowerBound,prevStatus,cplex.getStatus()));
      }
      if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
        log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
      }
    }
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Pruned;
    }
    cutIterLowerBounds.add(lowerBound);
    cutIterStatuses.add(cplex.getStatus());
    log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
    timer.stop();
    if (status == RelaxStatus.Unknown || status == RelaxStatus.Infeasible || status == RelaxStatus.Pruned || Time.totSec(timer) > prm.timeoutSeconds) {
      break;
    }
 else     if (cut < prm.maxCutRounds) {
      int numCutAdded=addCuts(cplex,cut);
      log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
      if (numCutAdded == 0) {
        log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
        break;
      }
      cut++;
    }
 else {
      break;
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterLowerBounds));
  log.debug(""String_Node_Str"" + cutIterStatuses);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer) / numSolves);
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),mp.origMatrix.getNrows(),mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}",0.6560490940970193
131677,"public CptBounds(IndexedCpt icpt){
  int[][] totMaxFreqCm=icpt.getTotalMaxFreqCm();
  lbs=new double[2][icpt.getNumConds()][];
  ubs=new double[2][icpt.getNumConds()][];
  for (  Type type : Type.values()) {
    int t=type.getAsInt();
    for (int c=0; c < lbs[t].length; c++) {
      lbs[t][c]=new double[icpt.getNumParams(c)];
      ubs[t][c]=new double[lbs[t][c].length];
      if (type == Type.PARAM) {
        Arrays.fill(lbs[t][c],DEFAULT_LOWER_BOUND);
        Arrays.fill(ubs[t][c],DEFAULT_UPPER_BOUND);
        double totMaxFreqC=Vectors.sum(totMaxFreqCm[c]);
        for (int m=0; m < lbs[t][c].length; m++) {
          if (totMaxFreqCm[c][m] == 0 && totMaxFreqC > 0) {
            ubs[t][c][m]=lbs[t][c][m];
          }
        }
      }
 else {
        Arrays.fill(lbs[t][c],0);
        for (int m=0; m < lbs[t][c].length; m++) {
          ubs[t][c][m]=totMaxFreqCm[c][m];
        }
      }
    }
  }
}","public CptBounds(IndexedCpt icpt){
  int[][] supFreqCm=icpt.getTotSupervisedFreqCm();
  int[][] totMaxFreqCm=icpt.getTotalMaxFreqCm();
  lbs=new double[2][icpt.getNumConds()][];
  ubs=new double[2][icpt.getNumConds()][];
  for (  Type type : Type.values()) {
    int t=type.getAsInt();
    for (int c=0; c < lbs[t].length; c++) {
      lbs[t][c]=new double[icpt.getNumParams(c)];
      ubs[t][c]=new double[lbs[t][c].length];
      if (type == Type.PARAM) {
        Arrays.fill(lbs[t][c],DEFAULT_LOWER_BOUND);
        Arrays.fill(ubs[t][c],DEFAULT_UPPER_BOUND);
        double totMaxFreqC=Vectors.sum(totMaxFreqCm[c]);
        for (int m=0; m < lbs[t][c].length; m++) {
          if (totMaxFreqCm[c][m] == 0 && totMaxFreqC > 0) {
            ubs[t][c][m]=lbs[t][c][m];
          }
        }
      }
 else {
        for (int m=0; m < lbs[t][c].length; m++) {
          lbs[t][c][m]=supFreqCm[c][m];
          ubs[t][c][m]=totMaxFreqCm[c][m];
        }
      }
    }
  }
}",0.9336165693043016
131678,"/** 
 * Used by DmvBoundsFactory
 */
public int[][] getTotalMaxFreqCm();",public int[][] getTotalMaxFreqCm();,0.6542056074766355
131679,"public String getName(int c,int m){
  throw new RuntimeException(""String_Node_Str"");
}","@Override public String getName(int c,int m){
  throw new RuntimeException(""String_Node_Str"");
}",0.945054945054945
131680,"public int getNumTotalParams(){
  throw new RuntimeException(""String_Node_Str"");
}","@Override public int getNumTotalParams(){
  throw new RuntimeException(""String_Node_Str"");
}",0.942528735632184
131681,"public int[][] getTotalMaxFreqCm(){
  int[][] totMaxFreqCm=new int[numConds][numParams];
  for (int i=0; i < totMaxFreqCm.length; i++) {
    Arrays.fill(totMaxFreqCm[i],1);
  }
  return totMaxFreqCm;
}","@Override public int[][] getTotalMaxFreqCm(){
  int[][] totMaxFreqCm=new int[numConds][numParams];
  for (int i=0; i < totMaxFreqCm.length; i++) {
    Arrays.fill(totMaxFreqCm[i],1);
  }
  return totMaxFreqCm;
}",0.9757281553398058
131682,"public int getNumNonZeroUnsupMaxFreqCms(){
  throw new RuntimeException(""String_Node_Str"");
}","@Override public int getNumNonZeroUnsupMaxFreqCms(){
  throw new RuntimeException(""String_Node_Str"");
}",0.9489795918367347
131683,"private void init(IndexedDmvModel idm){
  int[][] maxFreqCm=idm.getTotalMaxFreqCm();
  int numCm=0;
  for (int c=0; c < maxFreqCm.length; c++) {
    numCm+=maxFreqCm[c].length;
  }
  cms=new CM[numCm];
  freqs=new double[numCm];
  for (int c=0, i=0; c < maxFreqCm.length; c++) {
    for (int m=0; m < maxFreqCm[c].length; m++) {
      cms[i]=new CM(c,m);
      freqs[i]=uniform && maxFreqCm[c][m] > 0 ? 1.0 : maxFreqCm[c][m];
      i++;
    }
  }
}","private void init(IndexedDmvModel idm){
  int[][] maxFreqCm=idm.getTotUnsupervisedMaxFreqCm();
  int numCm=0;
  for (int c=0; c < maxFreqCm.length; c++) {
    numCm+=maxFreqCm[c].length;
  }
  cms=new CM[numCm];
  freqs=new double[numCm];
  for (int c=0, i=0; c < maxFreqCm.length; c++) {
    for (int m=0; m < maxFreqCm[c].length; m++) {
      cms[i]=new CM(c,m);
      freqs[i]=uniform && maxFreqCm[c][m] > 0 ? 1.0 : maxFreqCm[c][m];
      i++;
    }
  }
}",0.9845474613686536
131684,"protected RelaxedSolution extractSolution(RelaxStatus status,double objective) throws UnknownObjectException, IloException {
  double[][] optimalLogProbs=extractRelaxedLogProbs();
  double[][] optimalFeatCounts=getFeatureCounts();
  double[][] objVals=new double[idm.getNumConds()][];
  for (int c=0; c < idm.getNumConds(); c++) {
    objVals[c]=cplex.getValues(mp.objVars[c]);
  }
  double trueRelaxObj=dmvObj.computeTrueObjective(optimalLogProbs,optimalFeatCounts);
  RelaxedDepTreebank treebank=extractRelaxedParse();
  log.info(""String_Node_Str"" + treebank.getPropFracArcs());
  return new RelaxedDmvSolution(Utilities.copyOf(optimalLogProbs),treebank,objective,status,Utilities.copyOf(optimalFeatCounts),Utilities.copyOf(objVals),trueRelaxObj);
}","protected RelaxedSolution extractSolution(RelaxStatus status,double objective) throws UnknownObjectException, IloException {
  double[][] optimalLogProbs=extractRelaxedLogProbs();
  double[][] optimalFeatCounts=getFeatureCounts();
  double[][] objVals=new double[idm.getNumConds()][];
  for (int c=0; c < idm.getNumConds(); c++) {
    objVals[c]=cplex.getValues(mp.objVars[c]);
  }
  int[][] totSupFreqCm=idm.getTotSupervisedFreqCm();
  for (int c=0; c < idm.getNumConds(); c++) {
    for (int m=0; m < idm.getNumParams(c); m++) {
      optimalFeatCounts[c][m]+=totSupFreqCm[c][m];
      objVals[c][m]+=optimalLogProbs[c][m] * (double)totSupFreqCm[c][m];
    }
  }
  double trueRelaxObj=dmvObj.computeTrueObjective(optimalLogProbs,optimalFeatCounts);
  RelaxedDepTreebank treebank=extractRelaxedParse();
  log.info(""String_Node_Str"" + treebank.getPropFracArcs());
  return new RelaxedDmvSolution(Utilities.copyOf(optimalLogProbs),treebank,objective,status,Utilities.copyOf(optimalFeatCounts),Utilities.copyOf(objVals),trueRelaxObj);
}",0.8414565826330532
131685,"protected void buildModel(IloCplex cplex,DmvSolution initFeasSol) throws IloException {
  this.bounds=new CptBounds(this.idm);
  mp=new MasterProblem();
  mp.lpMatrix=cplex.addLPMatrix(""String_Node_Str"");
  sto.init(cplex,mp.lpMatrix,idm,bounds);
  int numConds=idm.getNumConds();
  mp.objective=cplex.addMinimize();
  sto.createModelParamVars();
  int[][] totSupFreqCm=idm.getTotSupervisedFreqCm(corpus);
  for (int c=0; c < numConds; c++) {
    for (int m=0; m < idm.getNumParams(c); m++) {
      if (totSupFreqCm[c][m] != 0) {
        cplex.setLinearCoef(mp.objective,-totSupFreqCm[c][m],sto.modelParamVars[c][m]);
      }
    }
  }
  mp.objVars=new IloNumVar[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.objVars[c]=new IloNumVar[numParams];
    for (int m=0; m < numParams; m++) {
      mp.objVars[c][m]=cplex.numVar(-Double.MAX_VALUE,Double.MAX_VALUE,String.format(""String_Node_Str"",c,m));
      cplex.setLinearCoef(mp.objective,-1.0,mp.objVars[c][m]);
    }
  }
  mp.couplConsLower=new IloRange[numConds][];
  mp.couplConsUpper=new IloRange[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.couplConsLower[c]=new IloRange[numParams];
    mp.couplConsUpper[c]=new IloRange[numParams];
    for (int m=0; m < numParams; m++) {
      String name;
      IloNumVar slackVarLower=cplex.numVar(-Double.MAX_VALUE,0.0,String.format(""String_Node_Str"",c,m));
      name=String.format(""String_Node_Str"",c,m);
      double maxFreqCm=idm.getUnsupervisedMaxTotalFreqCm(c,m);
      IloNumExpr rhsLower=cplex.sum(slackVarLower,cplex.diff(cplex.prod(maxFreqCm,sto.modelParamVars[c][m]),mp.objVars[c][m]));
      mp.couplConsLower[c][m]=cplex.eq(maxFreqCm * bounds.getLb(Type.PARAM,c,m),rhsLower,name);
      IloNumVar slackVarUpper=cplex.numVar(-Double.MAX_VALUE,0.0,String.format(""String_Node_Str"",c,m));
      name=String.format(""String_Node_Str"",c,m);
      IloNumExpr rhsUpper=cplex.sum(cplex.prod(-1.0,mp.objVars[c][m]),slackVarUpper);
      mp.couplConsUpper[c][m]=cplex.eq(0.0,rhsUpper,name);
    }
  }
  for (int c=0; c < numConds; c++) {
    mp.lpMatrix.addRows(mp.couplConsLower[c]);
  }
  for (int c=0; c < numConds; c++) {
    mp.lpMatrix.addRows(mp.couplConsUpper[c]);
  }
  mp.lambdaSumCons=new IloRange[corpus.getNumUnlabeled()];
  mp.lambdaVars=new ArrayList<LambdaVar>();
  mp.lambdaVarSet=new HashSet<LambdaVar>();
  addFeasibleSolution(initFeasSol);
  sto.addModelParamConstraints();
}","protected void buildModel(IloCplex cplex,DmvSolution initFeasSol) throws IloException {
  this.bounds=new CptBounds(this.idm);
  mp=new MasterProblem();
  mp.lpMatrix=cplex.addLPMatrix(""String_Node_Str"");
  sto.init(cplex,mp.lpMatrix,idm,bounds);
  int numConds=idm.getNumConds();
  mp.objective=cplex.addMinimize();
  sto.createModelParamVars();
  int[][] totSupFreqCm=idm.getTotSupervisedFreqCm(corpus);
  for (int c=0; c < numConds; c++) {
    for (int m=0; m < idm.getNumParams(c); m++) {
      if (totSupFreqCm[c][m] != 0) {
        cplex.setLinearCoef(mp.objective,-totSupFreqCm[c][m],sto.modelParamVars[c][m]);
      }
    }
  }
  mp.objVars=new IloNumVar[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.objVars[c]=new IloNumVar[numParams];
    for (int m=0; m < numParams; m++) {
      mp.objVars[c][m]=cplex.numVar(-Double.MAX_VALUE,Double.MAX_VALUE,String.format(""String_Node_Str"",c,m));
      cplex.setLinearCoef(mp.objective,-1.0,mp.objVars[c][m]);
    }
  }
  mp.couplConsLower=new IloRange[numConds][];
  mp.couplConsUpper=new IloRange[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.couplConsLower[c]=new IloRange[numParams];
    mp.couplConsUpper[c]=new IloRange[numParams];
    for (int m=0; m < numParams; m++) {
      String name;
      IloNumVar slackVarLower=cplex.numVar(-Double.MAX_VALUE,0.0,String.format(""String_Node_Str"",c,m));
      name=String.format(""String_Node_Str"",c,m);
      double maxFreqCm=idm.getTotUnsupervisedMaxFreqCm(c,m);
      IloNumExpr rhsLower=cplex.sum(slackVarLower,cplex.diff(cplex.prod(maxFreqCm,sto.modelParamVars[c][m]),mp.objVars[c][m]));
      mp.couplConsLower[c][m]=cplex.eq(maxFreqCm * bounds.getLb(Type.PARAM,c,m),rhsLower,name);
      IloNumVar slackVarUpper=cplex.numVar(-Double.MAX_VALUE,0.0,String.format(""String_Node_Str"",c,m));
      name=String.format(""String_Node_Str"",c,m);
      IloNumExpr rhsUpper=cplex.sum(cplex.prod(-1.0,mp.objVars[c][m]),slackVarUpper);
      mp.couplConsUpper[c][m]=cplex.eq(0.0,rhsUpper,name);
    }
  }
  for (int c=0; c < numConds; c++) {
    mp.lpMatrix.addRows(mp.couplConsLower[c]);
  }
  for (int c=0; c < numConds; c++) {
    mp.lpMatrix.addRows(mp.couplConsUpper[c]);
  }
  mp.lambdaSumCons=new IloRange[corpus.getNumUnlabeled()];
  mp.lambdaVars=new ArrayList<LambdaVar>();
  mp.lambdaVarSet=new HashSet<LambdaVar>();
  addFeasibleSolution(initFeasSol);
  sto.addModelParamConstraints();
}",0.9983916365098512
131686,"@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSemiSupervisedSyntheticCorpus(dmvModel);
  DmvDantzigWolfeRelaxation dw=getDw(trainCorpus,10);
  DmvSolution initBoundsSol=LocalBnBDmvTrainer.getInitSol(InitSol.VITERBI_EM,trainCorpus,dw,null,null);
  LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initBoundsSol,0.1,0.0);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.813,relaxSol.getScore(),1e-3);
}","@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSemiSupervisedSyntheticCorpus(dmvModel);
  DmvDantzigWolfeRelaxation dw=getDw(trainCorpus,10);
  DmvSolution initBoundsSol=LocalBnBDmvTrainer.getInitSol(InitSol.VITERBI_EM,trainCorpus,dw,null,null);
  LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initBoundsSol,0.1,0.0);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-277.897,relaxSol.getScore(),1e-3);
}",0.9919427036705462
131687,"private void buildModel(IloCplex cplex,DmvSolution initFeasSol) throws IloException {
  this.bounds=new CptBounds(this.idm);
  mp=new LpProblem();
  mp.origMatrix=cplex.LPMatrix(""String_Node_Str"");
  sto.init(cplex,mp.origMatrix,idm,bounds);
  int numConds=idm.getNumConds();
  sto.createModelParamVars();
  sto.addModelParamConstraints();
  DmvParseLpBuilder builder=new DmvParseLpBuilder(cplex,IlpFormulation.FLOW_PROJ_LPRELAX_FCOBJ);
  mp.pp=builder.buildDmvTreeProgram(corpus);
  builder.addConsToMatrix(mp.pp,mp.origMatrix);
  RltPrm rltPrm=prm.rltPrm;
  rltPrm.alwaysKeepRowFilter=new VarRltRowFilter(getObjVarPairs());
  if (prm.objVarFilter) {
    if (rltPrm.rowFilter != null && rltPrm.factorFilter != null) {
      log.warn(""String_Node_Str"");
    }
    rltPrm.rowFilter=new VarRltRowFilter(getObjVarPairs());
    rltPrm.factorFilter=new VarRltFactorFilter(getObjVarCols());
  }
  mp.rlt=new Rlt(cplex,mp.origMatrix,rltPrm);
  IloLPMatrix rltMat=mp.rlt.getRltMatrix();
  cplex.add(mp.origMatrix);
  cplex.add(rltMat);
  mp.objective=cplex.addMinimize();
  int[][] totSupFreqCm=idm.getTotSupervisedFreqCm(corpus);
  for (int c=0; c < numConds; c++) {
    for (int m=0; m < idm.getNumParams(c); m++) {
      if (totSupFreqCm[c][m] != 0) {
        cplex.setLinearCoef(mp.objective,-totSupFreqCm[c][m],sto.modelParamVars[c][m]);
      }
    }
  }
  mp.objVars=new IloNumVar[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.objVars[c]=new IloNumVar[numParams];
    for (int m=0; m < numParams; m++) {
      mp.objVars[c][m]=mp.rlt.getRltVar(sto.modelParamVars[c][m],mp.pp.featCountVars[c][m]);
      cplex.setLinearCoef(mp.objective,-1.0,mp.objVars[c][m]);
    }
  }
}","private void buildModel(IloCplex cplex,DmvSolution initFeasSol) throws IloException {
  this.bounds=new CptBounds(this.idm);
  mp=new LpProblem();
  mp.origMatrix=cplex.LPMatrix(""String_Node_Str"");
  sto.init(cplex,mp.origMatrix,idm,bounds);
  int numConds=idm.getNumConds();
  sto.createModelParamVars();
  sto.addModelParamConstraints();
  DmvParseLpBuilder builder=new DmvParseLpBuilder(cplex,IlpFormulation.FLOW_PROJ_LPRELAX_FCOBJ);
  mp.pp=builder.buildDmvTreeProgram(corpus);
  builder.addConsToMatrix(mp.pp,mp.origMatrix);
  RltPrm rltPrm=prm.rltPrm;
  rltPrm.alwaysKeepRowFilter=new VarRltRowFilter(getObjVarPairs());
  if (prm.objVarFilter) {
    if (rltPrm.rowFilter != null && rltPrm.factorFilter != null) {
      log.warn(""String_Node_Str"");
    }
    rltPrm.rowFilter=new VarRltRowFilter(getObjVarPairs());
    rltPrm.factorFilter=new VarRltFactorFilter(getObjVarCols());
  }
  mp.rlt=new Rlt(cplex,mp.origMatrix,rltPrm);
  IloLPMatrix rltMat=mp.rlt.getRltMatrix();
  cplex.add(mp.origMatrix);
  cplex.add(rltMat);
  mp.objective=cplex.addMinimize();
  mp.objVars=new IloNumVar[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.objVars[c]=new IloNumVar[numParams];
    for (int m=0; m < numParams; m++) {
      mp.objVars[c][m]=mp.rlt.getRltVar(sto.modelParamVars[c][m],mp.pp.featCountVars[c][m]);
      cplex.setLinearCoef(mp.objective,-1.0,mp.objVars[c][m]);
    }
  }
}",0.8879720723579816
131688,"private int addCuts(IloCplex cplex,int cut) throws UnknownObjectException, IloException {
  List<Integer> rows=sto.projectModelParamsAndAddCuts();
  return mp.rlt.addRows(rows);
}","private int addCuts(IloCplex cplex,int cut) throws UnknownObjectException, IloException {
  List<Integer> rows=sto.projectModelParamsAndAddCuts();
  return rows.size() + mp.rlt.addRowsAsFactors(rows);
}",0.9396325459317584
131689,"private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  TDoubleArrayList cutIterObjVals=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  int cut;
  for (cut=0; ; ) {
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex.getStatus());
    double objVal;
    double lowerBound;
    if (status != RelaxStatus.Unknown) {
      log.trace(""String_Node_Str"" + cplex.getStatus());
      log.trace(""String_Node_Str"" + cplex.getCplexStatus());
      if (status == RelaxStatus.Infeasible) {
        return new Pair<RelaxStatus,Double>(status,INTERNAL_WORST_SCORE);
      }
      if (prm.tempDir != null) {
        cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
      }
      warmStart=getWarmStart();
      objVal=cplex.getObjValue();
      log.trace(""String_Node_Str"" + objVal);
      double prevObjVal=cutIterObjVals.size() > 0 ? cutIterObjVals.get(cutIterObjVals.size() - 1) : INTERNAL_WORST_SCORE;
      if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
        Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterObjVals.size() - 1) : Status.Unknown;
        log.warn(String.format(""String_Node_Str"",prevObjVal,objVal,prevStatus,cplex.getStatus()));
      }
      lowerBound=objVal;
      if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
        log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
      }
    }
 else {
      objVal=INTERNAL_BEST_SCORE;
      lowerBound=INTERNAL_BEST_SCORE;
    }
    cutIterObjVals.add(objVal);
    cutIterStatuses.add(cplex.getStatus());
    cutIterLowerBounds.add(lowerBound);
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Pruned;
      break;
    }
 else {
      status=RelaxStatus.Optimal;
      if (cut < prm.maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
        int numCutAdded=addCuts(cplex,cut);
        log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
        if (numCutAdded == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        cut++;
      }
 else {
        break;
      }
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
  log.debug(""String_Node_Str"" + cutIterLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer) / numSolves);
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),mp.origMatrix.getNrows(),mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}","private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  TDoubleArrayList cutIterObjVals=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  int cut;
  for (cut=0; ; ) {
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex.getStatus(),cplex.getCplexStatus());
    double objVal;
    double lowerBound;
    if (status == RelaxStatus.Unknown) {
      objVal=INTERNAL_BEST_SCORE;
      lowerBound=INTERNAL_BEST_SCORE;
    }
 else {
      log.trace(""String_Node_Str"" + cplex.getStatus());
      log.trace(""String_Node_Str"" + cplex.getCplexStatus());
      if (status == RelaxStatus.Infeasible) {
        return new Pair<RelaxStatus,Double>(status,INTERNAL_WORST_SCORE);
      }
      if (prm.tempDir != null) {
        cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
      }
      warmStart=getWarmStart();
      objVal=cplex.getObjValue();
      log.trace(""String_Node_Str"" + objVal);
      double prevObjVal=cutIterObjVals.size() > 0 ? cutIterObjVals.get(cutIterObjVals.size() - 1) : INTERNAL_WORST_SCORE;
      if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
        Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterObjVals.size() - 1) : Status.Unknown;
        log.warn(String.format(""String_Node_Str"",prevObjVal,objVal,prevStatus,cplex.getStatus()));
      }
      lowerBound=objVal;
      if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
        log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
      }
    }
    cutIterObjVals.add(objVal);
    cutIterStatuses.add(cplex.getStatus());
    cutIterLowerBounds.add(lowerBound);
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Pruned;
      break;
    }
 else {
      status=RelaxStatus.Optimal;
      if (cut < prm.maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
        int numCutAdded=addCuts(cplex,cut);
        log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
        if (numCutAdded == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        cut++;
      }
 else {
        break;
      }
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
  log.debug(""String_Node_Str"" + cutIterLowerBounds);
  log.debug(""String_Node_Str"" + cutIterStatuses);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer) / numSolves);
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),mp.origMatrix.getNrows(),mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}",0.735696425944992
131690,"@Override public VariableId select(DmvProblemNode node){
  CptBounds origBounds=node.getBounds();
  RelaxedDmvSolution relaxSol=node.getRelaxedSolution();
  double[][] regret=getRegretCm(relaxSol);
  if (regret == null) {
    log.warn(""String_Node_Str"");
    return randBrancher.select(node);
  }
  for (int c=0; c < regret.length; c++) {
    for (int m=0; m < regret[c].length; m++) {
      if (!origBounds.canBranch(Type.PARAM,c,m)) {
        regret[c][m]=Double.NEGATIVE_INFINITY;
      }
    }
  }
  IntTuple max=Utilities.getArgmax(regret);
  int c=max.get(0);
  int m=max.get(1);
  if (c == -1 || m == -1 || regret[c][m] == Double.NEGATIVE_INFINITY) {
    log.warn(""String_Node_Str"" + node.getId());
    return new VariableId();
  }
  String name=node.getIdm().getName(c,m);
  log.info(String.format(""String_Node_Str"",c,m,name,regret[c][m]));
  assert(regret[c][m] != Double.NEGATIVE_INFINITY);
  return new VariableId(c,m);
}","@Override public VariableId select(DmvProblemNode node){
  CptBounds origBounds=node.getBounds();
  RelaxedDmvSolution relaxSol=node.getRelaxedSolution();
  double[][] regret=getRegretCm(relaxSol);
  if (regret == null) {
    log.warn(""String_Node_Str"");
    return randBrancher.select(node);
  }
  for (int c=0; c < regret.length; c++) {
    for (int m=0; m < regret[c].length; m++) {
      if (!origBounds.canBranch(Type.PARAM,c,m)) {
        regret[c][m]=Double.NEGATIVE_INFINITY;
      }
    }
  }
  IntTuple max=Utilities.getArgmax(regret);
  int c=max.get(0);
  int m=max.get(1);
  assert(!Double.isNaN(regret[c][m]));
  if (c == -1 || m == -1) {
    log.warn(""String_Node_Str"" + node.getId());
    return new VariableId();
  }
  String name=node.getIdm().getName(c,m);
  log.info(String.format(""String_Node_Str"",c,m,name,regret[c][m]));
  assert(!Double.isInfinite(regret[c][m]));
  return new VariableId(c,m);
}",0.9076175040518638
131691,"public DmvSolution getProjectedDmvSolution(RelaxedDmvSolution relaxSol){
  if (!relaxSol.getStatus().hasSolution()) {
    return null;
  }
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    double[] probs=Vectors.getExp(logProbs[c]);
    probs=Projections.getProjectedParams(probs);
    logProbs[c]=Vectors.getLog(probs);
  }
  DepTreebank treebank=getProjectedParses(relaxSol.getTreebank());
  double score=obj.computeTrueObjective(logProbs,treebank);
  DmvSolution sol=new DmvSolution(logProbs,idm,treebank,score);
  return sol;
}","public DmvSolution getProjectedDmvSolution(RelaxedDmvSolution relaxSol){
  if (!relaxSol.getStatus().hasSolution()) {
    return null;
  }
  double[][] logProbs=Utilities.copyOf(relaxSol.getLogProbs());
  for (int c=0; c < logProbs.length; c++) {
    double[] probs=Vectors.getExp(logProbs[c]);
    probs=Projections.getProjectedParams(probs);
    logProbs[c]=Vectors.getLog(probs);
  }
  DepTreebank treebank=getProjectedParses(relaxSol.getTreebank());
  double score=obj.computeTrueObjective(logProbs,treebank);
  DmvSolution sol=new DmvSolution(logProbs,idm,treebank,score);
  return sol;
}",0.9845890410958904
131692,"public IndexedDmvModel(DmvTrainCorpus corpus){
  this.sentences=corpus.getSentences();
  this.alphabet=sentences.getLabelAlphabet();
  this.vocab=sentences.getVocab();
  numTags=vocab.size() - 1;
  log.trace(""String_Node_Str"" + numTags);
  rhsToC=new Alphabet<Rhs>();
  rhsToC.startGrowth();
  rhsToC.lookupObject(new Rhs(ROOT));
  for (int p=0; p < numTags; p++)   for (int dir=0; dir < 2; dir++)   for (int cv=0; cv < childValency; cv++)   rhsToC.lookupObject(new Rhs(CHILD,p,dir,cv));
  for (int p=0; p < numTags; p++)   for (int dir=0; dir < 2; dir++)   for (int dv=0; dv < decisionValency; dv++)   rhsToC.lookupObject(new Rhs(DECISION,p,dir,dv));
  rhsToC.stopGrowth();
  log.trace(""String_Node_Str"" + rhsToC.size() + ""String_Node_Str""+ rhsToC);
  int[][][] sentMaxFreqCm=new int[sentences.size()][][];
  for (int s=0; s < sentences.size(); s++) {
    sentMaxFreqCm[s]=getSentMaxFreqCm(sentences.get(s));
  }
  sentParamToI=new ArrayList<Alphabet<ParamId>>();
  for (int s=0; s < sentences.size(); s++) {
    Alphabet<ParamId> paramToI=new Alphabet<ParamId>();
    for (int c=0; c < getNumConds(); c++) {
      Rhs rhs=rhsToC.lookupIndex(c);
      for (int m=0; m < getNumParams(c); m++) {
        if (sentMaxFreqCm[s][c][m] > 0) {
          paramToI.lookupObject(new ParamId(rhs,m));
        }
      }
    }
    paramToI.stopGrowth();
    sentParamToI.add(paramToI);
    log.trace(""String_Node_Str"" + s + ""String_Node_Str""+ paramToI.size()+ ""String_Node_Str""+ paramToI);
  }
  sentCmToI=new ArrayList<Alphabet<CM>>();
  for (int s=0; s < sentences.size(); s++) {
    Alphabet<ParamId> paramToI=sentParamToI.get(s);
    Alphabet<CM> cmToI=new Alphabet<CM>();
    for (int i=0; i < paramToI.size(); i++) {
      ParamId p=paramToI.lookupIndex(i);
      Rhs rhs=p.get1();
      int m=p.get2();
      cmToI.lookupObject(new CM(rhsToC.lookupObject(rhs),m));
    }
    cmToI.stopGrowth();
    sentCmToI.add(cmToI);
    log.trace(""String_Node_Str"" + s + ""String_Node_Str""+ cmToI.size()+ ""String_Node_Str""+ cmToI);
  }
  sentMaxFreqSi=new int[sentences.size()][];
  for (int s=0; s < sentences.size(); s++) {
    sentMaxFreqSi[s]=new int[getNumSentVars(s)];
    for (int c=0; c < getNumConds(); c++) {
      for (int m=0; m < getNumParams(c); m++) {
        if (sentMaxFreqCm[s][c][m] > 0) {
          int i=getSi(s,c,m);
          sentMaxFreqSi[s][i]=sentMaxFreqCm[s][c][m];
        }
      }
    }
  }
  numTotalParams=0;
  for (int c=0; c < getNumConds(); c++) {
    for (int m=0; m < getNumParams(c); m++) {
      numTotalParams++;
    }
  }
  numNZUnsupMaxFreqCms=0;
  unsupMaxTotFreqCm=new int[getNumConds()][];
  for (int c=0; c < getNumConds(); c++) {
    unsupMaxTotFreqCm[c]=new int[getNumParams(c)];
    for (int m=0; m < getNumParams(c); m++) {
      for (int s=0; s < sentMaxFreqSi.length; s++) {
        if (!corpus.isLabeled(s)) {
          unsupMaxTotFreqCm[c][m]+=sentMaxFreqCm[s][c][m];
        }
      }
      if (unsupMaxTotFreqCm[c][m] > 0) {
        numNZUnsupMaxFreqCms++;
      }
    }
  }
}","public IndexedDmvModel(DmvTrainCorpus corpus){
  this.sentences=corpus.getSentences();
  this.alphabet=sentences.getLabelAlphabet();
  this.vocab=sentences.getVocab();
  numTags=alphabet.size();
  log.trace(""String_Node_Str"" + numTags);
  rhsToC=new Alphabet<Rhs>();
  rhsToC.startGrowth();
  rhsToC.lookupObject(new Rhs(ROOT));
  for (int p=0; p < numTags; p++)   for (int dir=0; dir < 2; dir++)   for (int cv=0; cv < childValency; cv++)   rhsToC.lookupObject(new Rhs(CHILD,p,dir,cv));
  for (int p=0; p < numTags; p++)   for (int dir=0; dir < 2; dir++)   for (int dv=0; dv < decisionValency; dv++)   rhsToC.lookupObject(new Rhs(DECISION,p,dir,dv));
  rhsToC.stopGrowth();
  log.trace(""String_Node_Str"" + rhsToC.size() + ""String_Node_Str""+ rhsToC);
  int[][][] sentMaxFreqCm=new int[sentences.size()][][];
  for (int s=0; s < sentences.size(); s++) {
    sentMaxFreqCm[s]=getSentMaxFreqCm(sentences.get(s));
  }
  sentParamToI=new ArrayList<Alphabet<ParamId>>();
  for (int s=0; s < sentences.size(); s++) {
    Alphabet<ParamId> paramToI=new Alphabet<ParamId>();
    for (int c=0; c < getNumConds(); c++) {
      Rhs rhs=rhsToC.lookupIndex(c);
      for (int m=0; m < getNumParams(c); m++) {
        if (sentMaxFreqCm[s][c][m] > 0) {
          paramToI.lookupObject(new ParamId(rhs,m));
        }
      }
    }
    paramToI.stopGrowth();
    sentParamToI.add(paramToI);
    log.trace(""String_Node_Str"" + s + ""String_Node_Str""+ paramToI.size()+ ""String_Node_Str""+ paramToI);
  }
  sentCmToI=new ArrayList<Alphabet<CM>>();
  for (int s=0; s < sentences.size(); s++) {
    Alphabet<ParamId> paramToI=sentParamToI.get(s);
    Alphabet<CM> cmToI=new Alphabet<CM>();
    for (int i=0; i < paramToI.size(); i++) {
      ParamId p=paramToI.lookupIndex(i);
      Rhs rhs=p.get1();
      int m=p.get2();
      cmToI.lookupObject(new CM(rhsToC.lookupObject(rhs),m));
    }
    cmToI.stopGrowth();
    sentCmToI.add(cmToI);
    log.trace(""String_Node_Str"" + s + ""String_Node_Str""+ cmToI.size()+ ""String_Node_Str""+ cmToI);
  }
  sentMaxFreqSi=new int[sentences.size()][];
  for (int s=0; s < sentences.size(); s++) {
    sentMaxFreqSi[s]=new int[getNumSentVars(s)];
    for (int c=0; c < getNumConds(); c++) {
      for (int m=0; m < getNumParams(c); m++) {
        if (sentMaxFreqCm[s][c][m] > 0) {
          int i=getSi(s,c,m);
          sentMaxFreqSi[s][i]=sentMaxFreqCm[s][c][m];
        }
      }
    }
  }
  numTotalParams=0;
  for (int c=0; c < getNumConds(); c++) {
    for (int m=0; m < getNumParams(c); m++) {
      numTotalParams++;
    }
  }
  numNZUnsupMaxFreqCms=0;
  unsupMaxTotFreqCm=new int[getNumConds()][];
  for (int c=0; c < getNumConds(); c++) {
    unsupMaxTotFreqCm[c]=new int[getNumParams(c)];
    for (int m=0; m < getNumParams(c); m++) {
      for (int s=0; s < sentMaxFreqSi.length; s++) {
        if (!corpus.isLabeled(s)) {
          unsupMaxTotFreqCm[c][m]+=sentMaxFreqCm[s][c][m];
        }
      }
      if (unsupMaxTotFreqCm[c][m] > 0) {
        numNZUnsupMaxFreqCms++;
      }
    }
  }
}",0.9978423236514524
131693,"public static BoundFactor getBoundFactorUpper(IloNumVar[] numVars,int colIdx) throws IloException {
  double varUb=numVars[colIdx].getUB();
  if (varUb != Rlt.CPLEX_POS_INF) {
    int[] varInd=new int[]{colIdx};
    double[] varVal=new double[]{1.0};
    return new BoundFactor(varUb,varInd,varVal,colIdx,Lu.UPPER);
  }
  return null;
}","public static BoundFactor getBoundFactorUpper(IloNumVar[] numVars,int colIdx,IloLPMatrix mat) throws IloException {
  double varUb=numVars[colIdx].getUB();
  if (varUb < CPLEX_POS_INF_CUTOFF) {
    int[] varInd=new int[]{colIdx};
    double[] varVal=new double[]{1.0};
    return new BoundFactor(varUb,varInd,varVal,colIdx,Lu.UPPER,mat);
  }
  return null;
}",0.9481268011527376
131694,"public BoundFactor(double g,int[] Gind,double[] Gval,int colIdx,Lu lu){
  super(g,Gind,Gval);
  this.colIdx=colIdx;
  this.lu=lu;
}","public BoundFactor(double g,int[] Gind,double[] Gval,int colIdx,Lu lu,IloLPMatrix mat){
  super(g,Gind,Gval,mat);
  this.colIdx=colIdx;
  this.lu=lu;
}",0.9290780141843972
131695,"public RowFactor(double g,int[] Gind,double[] Gval,int rowIdx,RowFactorType type){
  super(g,Gind,Gval);
  this.rowIdx=rowIdx;
  this.type=type;
}","public RowFactor(double g,int[] Gind,double[] Gval,int rowIdx,RowFactorType type,IloLPMatrix mat){
  super(g,Gind,Gval,mat);
  this.rowIdx=rowIdx;
  this.type=type;
}",0.935897435897436
131696,"/** 
 * Creates the constraint and bounds factors.
 */
public static List<Factor> getFactors(IloLPMatrix mat,boolean envelopeOnly) throws IloException {
  int n=mat.getNcols();
  int m=mat.getNrows();
  IloNumVar[] numVars=mat.getNumVars();
  List<Factor> factors=new ArrayList<Factor>();
  for (int colIdx=0; colIdx < n; colIdx++) {
    BoundFactor bfLb=getBoundFactorLower(numVars,colIdx);
    if (bfLb != null) {
      factors.add(bfLb);
    }
    BoundFactor bfUb=getBoundFactorUpper(numVars,colIdx);
    if (bfUb != null) {
      factors.add(bfUb);
    }
  }
  if (!envelopeOnly) {
    int startRow=0;
    int numRows=m;
    addRowFactors(startRow,numRows,mat,factors);
  }
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"");
    for (    Factor f : factors) {
      log.trace(""String_Node_Str"" + f);
    }
  }
  return factors;
}","/** 
 * Creates the constraint and bounds factors.
 */
public static List<Factor> getFactors(IloLPMatrix mat,boolean envelopeOnly) throws IloException {
  int n=mat.getNcols();
  int m=mat.getNrows();
  IloNumVar[] numVars=mat.getNumVars();
  List<Factor> factors=new ArrayList<Factor>();
  for (int colIdx=0; colIdx < n; colIdx++) {
    BoundFactor bfLb=getBoundFactorLower(numVars,colIdx,mat);
    if (bfLb != null) {
      factors.add(bfLb);
    }
    BoundFactor bfUb=getBoundFactorUpper(numVars,colIdx,mat);
    if (bfUb != null) {
      factors.add(bfUb);
    }
  }
  if (!envelopeOnly) {
    int startRow=0;
    int numRows=m;
    addRowFactors(startRow,numRows,mat,factors);
  }
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"");
    for (    Factor f : factors) {
      log.trace(""String_Node_Str"" + f);
    }
  }
  return factors;
}",0.9952996474735604
131697,"public static BoundFactor getBoundFactorLower(IloNumVar[] numVars,int colIdx) throws IloException {
  double varLb=numVars[colIdx].getLB();
  if (varLb != Rlt.CPLEX_NEG_INF) {
    int[] varInd=new int[]{colIdx};
    double[] varVal=new double[]{-1.0};
    return new BoundFactor(-varLb,varInd,varVal,colIdx,Lu.LOWER);
  }
  return null;
}","public static BoundFactor getBoundFactorLower(IloNumVar[] numVars,int colIdx,IloLPMatrix mat) throws IloException {
  double varLb=numVars[colIdx].getLB();
  if (CPLEX_NEG_INF_CUTOFF < varLb) {
    int[] varInd=new int[]{colIdx};
    double[] varVal=new double[]{-1.0};
    return new BoundFactor(-varLb,varInd,varVal,colIdx,Lu.LOWER,mat);
  }
  return null;
}",0.9312320916905444
131698,"public Factor(double g,int[] Gind,double[] Gval){
  this.g=g;
  this.G=new FastSparseVector(Gind,Gval);
}","public Factor(double g,int[] Gind,double[] Gval,IloLPMatrix mat){
  this.g=g;
  this.G=new FastSparseVector(Gind,Gval);
  this.mat=mat;
}",0.8677685950413223
131699,"/** 
 * Create numRows RowFactors starting from the startRow'th row of mat and add these rows to factors.
 * @return The number of new factors added to factors.
 */
public static int addRowFactors(int startRow,int numRows,IloLPMatrix mat,List<Factor> factors) throws IloException {
  int numNewFactors=0;
  double[] lb=new double[numRows];
  double[] ub=new double[numRows];
  int[][] Aind=new int[numRows][];
  double[][] Aval=new double[numRows][];
  mat.getRows(startRow,numRows,lb,ub,Aind,Aval);
  for (int rowIdx=0; rowIdx < numRows; rowIdx++) {
    if (lb[rowIdx] == ub[rowIdx]) {
      factors.add(new RowFactor(ub[rowIdx],Aind[rowIdx],Aval[rowIdx],rowIdx,RowFactorType.EQ));
      numNewFactors++;
    }
 else {
      if (lb[rowIdx] != Rlt.CPLEX_NEG_INF) {
        double[] vals=Utilities.copyOf(Aval[rowIdx]);
        Vectors.scale(vals,-1.0);
        factors.add(new RowFactor(-lb[rowIdx],Aind[rowIdx],vals,rowIdx,RowFactorType.LOWER));
        numNewFactors++;
      }
      if (ub[rowIdx] != Rlt.CPLEX_POS_INF) {
        factors.add(new RowFactor(ub[rowIdx],Aind[rowIdx],Aval[rowIdx],rowIdx,RowFactorType.UPPER));
        numNewFactors++;
      }
    }
  }
  return numNewFactors;
}","/** 
 * Create numRows RowFactors starting from the startRow'th row of mat and add these rows to factors.
 * @return The number of new factors added to factors.
 */
public static int addRowFactors(int startRow,int numRows,IloLPMatrix mat,List<Factor> factors) throws IloException {
  int numNewFactors=0;
  double[] lb=new double[numRows];
  double[] ub=new double[numRows];
  int[][] Aind=new int[numRows][];
  double[][] Aval=new double[numRows][];
  mat.getRows(startRow,numRows,lb,ub,Aind,Aval);
  for (int rowIdx=0; rowIdx < numRows; rowIdx++) {
    if (lb[rowIdx] == ub[rowIdx]) {
      factors.add(new RowFactor(ub[rowIdx],Aind[rowIdx],Aval[rowIdx],rowIdx,RowFactorType.EQ,mat));
      numNewFactors++;
    }
 else {
      if (CPLEX_NEG_INF_CUTOFF < lb[rowIdx]) {
        double[] vals=Utilities.copyOf(Aval[rowIdx]);
        Vectors.scale(vals,-1.0);
        factors.add(new RowFactor(-lb[rowIdx],Aind[rowIdx],vals,rowIdx,RowFactorType.LOWER,mat));
        numNewFactors++;
      }
      if (ub[rowIdx] < CPLEX_POS_INF_CUTOFF) {
        factors.add(new RowFactor(ub[rowIdx],Aind[rowIdx],Aval[rowIdx],rowIdx,RowFactorType.UPPER,mat));
        numNewFactors++;
      }
    }
  }
  return numNewFactors;
}",0.9725457570715474
131700,"@Override public double[][] getScores(DmvProblemNode node){
  if (scores == null) {
    idm=node.getIdm();
    scores=new double[idm.getNumConds()][];
    deltaSum=new double[idm.getNumConds()][][];
    numObserved=new int[idm.getNumConds()][][];
    for (int c=0; c < idm.getNumConds(); c++) {
      scores[c]=new double[idm.getNumParams(c)];
      deltaSum[c]=new double[idm.getNumParams(c)][2];
      numObserved[c]=new int[idm.getNumParams(c)][2];
    }
  }
  CptBounds origBounds=node.getBounds();
  double parentBound=node.getOptimisticBound();
  for (int c=0; c < idm.getNumConds(); c++) {
    for (int m=0; m < idm.getNumParams(c); m++) {
      if (numObserved[c][m][0] < RELIABILITY_THRESHOLD || numObserved[c][m][1] < RELIABILITY_THRESHOLD) {
        node.setAsActiveNode();
        List<CptBoundsDeltaList> deltas=varSplitter.split(origBounds,new VariableId(c,m));
        List<ProblemNode> children=node.branch(deltas);
        assert(children.size() == 2);
        for (int lu=0; lu < 2; lu++) {
          if (numObserved[c][m][lu] < RELIABILITY_THRESHOLD) {
            DmvProblemNode child=(DmvProblemNode)children.get(lu);
            assert(child.getDeltas().getPrimary().getLu().getAsInt() == lu);
            child.setAsActiveNode();
            double cBound=child.getOptimisticBound();
            double cDelta=parentBound - cBound;
            deltaSum[c][m][lu]+=cDelta;
            numObserved[c][m][lu]++;
            String name=node.getIdm().getName(c,m);
            log.trace(String.format(""String_Node_Str"",c,m,lu,name,cDelta));
          }
        }
        updateScore(c,m);
        node.setAsActiveNode();
      }
    }
  }
  CptBoundsDelta primaryDelta=node.getDeltas().getPrimary();
  if (primaryDelta != null) {
    int c=primaryDelta.getC();
    int m=primaryDelta.getM();
    int lu=primaryDelta.getLu().getAsInt();
    deltaSum[c][m][lu]+=node.getParent().getOptimisticBound() - node.getOptimisticBound();
    numObserved[c][m][lu]++;
    updateScore(c,m);
  }
  return scores;
}","@Override public double[][] getScores(DmvProblemNode node){
  if (scores == null) {
    idm=node.getIdm();
    scores=new double[idm.getNumConds()][];
    deltaSum=new double[idm.getNumConds()][][];
    numObserved=new int[idm.getNumConds()][][];
    for (int c=0; c < idm.getNumConds(); c++) {
      scores[c]=new double[idm.getNumParams(c)];
      deltaSum[c]=new double[idm.getNumParams(c)][2];
      numObserved[c]=new int[idm.getNumParams(c)][2];
    }
  }
  CptBounds origBounds=node.getBounds();
  double parentBound=node.getOptimisticBound();
  for (int c=0; c < idm.getNumConds(); c++) {
    for (int m=0; m < idm.getNumParams(c); m++) {
      if (numObserved[c][m][0] < RELIABILITY_THRESHOLD || numObserved[c][m][1] < RELIABILITY_THRESHOLD) {
        node.setAsActiveNode();
        List<CptBoundsDeltaList> deltas=varSplitter.split(origBounds,new VariableId(c,m));
        List<ProblemNode> children=node.branch(deltas);
        assert(children.size() == 2);
        for (int lu=0; lu < 2; lu++) {
          if (numObserved[c][m][lu] < RELIABILITY_THRESHOLD) {
            DmvProblemNode child=(DmvProblemNode)children.get(lu);
            assert(child.getDeltas().getPrimary().getLu().getAsInt() == lu);
            child.setAsActiveNode();
            double cBound=child.getOptimisticBound();
            double cDelta=parentBound - cBound;
            deltaSum[c][m][lu]+=cDelta;
            numObserved[c][m][lu]++;
            String name=idm.getName(c,m);
            log.trace(String.format(""String_Node_Str"",c,m,lu,name,cDelta));
          }
        }
        updateScore(c,m);
        node.setAsActiveNode();
      }
    }
  }
  CptBoundsDelta primaryDelta=node.getDeltas().getPrimary();
  if (primaryDelta != null) {
    int c=primaryDelta.getC();
    int m=primaryDelta.getM();
    int lu=primaryDelta.getLu().getAsInt();
    deltaSum[c][m][lu]+=node.getParent().getOptimisticBound() - node.getOptimisticBound();
    numObserved[c][m][lu]++;
    updateScore(c,m);
  }
  return scores;
}",0.9960278053624628
131701,"private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  TDoubleArrayList cutIterObjVals=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  int cut;
  for (cut=0; ; ) {
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getCplexStatus());
    if (status == RelaxStatus.Infeasible) {
      return new Pair<RelaxStatus,Double>(status,INTERNAL_WORST_SCORE);
    }
    if (prm.tempDir != null) {
      cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    warmStart=getWarmStart();
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=cutIterObjVals.size() > 0 ? cutIterObjVals.get(cutIterObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterObjVals.size() - 1) : Status.Unknown;
      log.warn(String.format(""String_Node_Str"",prevObjVal,objVal,prevStatus,cplex.getStatus()));
    }
    cutIterObjVals.add(objVal);
    cutIterStatuses.add(cplex.getStatus());
    double lowerBound;
    if (status == RelaxStatus.Optimal) {
      lowerBound=objVal;
      if (log.isTraceEnabled()) {
        double dualBound=getDualObjVal();
        if (!Utilities.equals(objVal,dualBound,1e-13)) {
          log.warn(String.format(""String_Node_Str"",dualBound,objVal));
        }
      }
    }
 else     if (cplex.isDualFeasible()) {
      double dualBound=getDualObjVal();
      if (!Utilities.lte(dualBound,objVal,1e-13)) {
        log.warn(String.format(""String_Node_Str"",dualBound,objVal));
      }
      lowerBound=dualBound;
    }
 else {
      lowerBound=INTERNAL_BEST_SCORE;
    }
    cutIterLowerBounds.add(lowerBound);
    if (status == RelaxStatus.Feasible) {
      log.warn(""String_Node_Str"");
    }
    if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
      log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
    }
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Pruned;
      break;
    }
 else {
      status=RelaxStatus.Optimal;
      if (cut < prm.maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
        int numCutAdded=addCuts(cplex,cut);
        log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
        if (numCutAdded == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        cut++;
      }
 else {
        break;
      }
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
  log.debug(""String_Node_Str"" + cutIterLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer) / numSolves);
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),mp.origMatrix.getNrows(),mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}","private Pair<RelaxStatus,Double> runSimplexAlgo(IloCplex cplex2,double upperBound) throws IloException {
  if (!isFeasible()) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  TDoubleArrayList cutIterLowerBounds=new TDoubleArrayList();
  TDoubleArrayList cutIterObjVals=new TDoubleArrayList();
  ArrayList<Status> cutIterStatuses=new ArrayList<Status>();
  WarmStart warmStart=null;
  cutIterLowerBounds.add(INTERNAL_BEST_SCORE);
  cplex.setParam(DoubleParam.ObjULim,upperBound);
  int cut;
  for (cut=0; ; ) {
    if (prm.tempDir != null) {
      cplex.exportModel(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    status=RelaxStatus.getForLp(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getCplexStatus());
    if (status == RelaxStatus.Infeasible) {
      return new Pair<RelaxStatus,Double>(status,INTERNAL_WORST_SCORE);
    }
    if (prm.tempDir != null) {
      cplex.writeSolution(new File(prm.tempDir,""String_Node_Str"").getAbsolutePath());
    }
    warmStart=getWarmStart();
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=cutIterObjVals.size() > 0 ? cutIterObjVals.get(cutIterObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      Status prevStatus=cutIterStatuses.size() > 0 ? cutIterStatuses.get(cutIterObjVals.size() - 1) : Status.Unknown;
      log.warn(String.format(""String_Node_Str"",prevObjVal,objVal,prevStatus,cplex.getStatus()));
    }
    cutIterObjVals.add(objVal);
    cutIterStatuses.add(cplex.getStatus());
    double lowerBound=objVal;
    cutIterLowerBounds.add(lowerBound);
    if (cplex.getCplexStatus() == CplexStatus.AbortObjLim && lowerBound < upperBound) {
      log.warn(String.format(""String_Node_Str"",lowerBound,upperBound));
    }
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Pruned;
      break;
    }
 else {
      status=RelaxStatus.Optimal;
      if (cut < prm.maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
        int numCutAdded=addCuts(cplex,cut);
        log.debug(""String_Node_Str"" + numCutAdded + ""String_Node_Str""+ cut);
        if (numCutAdded == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        cut++;
      }
 else {
        break;
      }
    }
  }
  double lowerBound=Vectors.max(cutIterLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,cutIterObjVals));
  log.debug(""String_Node_Str"" + cutIterLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer) / numSolves);
  log.info(String.format(""String_Node_Str"",sto.getNumStoCons(),mp.origMatrix.getNrows(),mp.rlt.getRltMatrix().getNrows()));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}",0.649019888396051
131702,"@Test public void testEarlyStopping(){
  Logger.getRootLogger().setLevel(Level.TRACE);
  DmvModel dmvModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,Prng.nextInt(1000000));
  DepTreebank treebank=generator.getTreebank(50);
  DmvTrainCorpus corpus=new DmvTrainCorpus(treebank,0.0);
  double incumbentScore=-1.2;
  DmvRltRelaxation relax=getLp(corpus,1);
  DmvSolution initSol=DmvDantzigWolfeRelaxationTest.getInitFeasSol(corpus);
  double offsetProb=0.5;
  double probOfSkip=0.5;
  LocalBnBDmvTrainer.setBoundsFromInitSol(relax,initSol,offsetProb,probOfSkip);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)relax.solveRelaxation(incumbentScore);
  Assert.assertTrue(relaxSol.getScore() <= incumbentScore);
}","@Test public void testEarlyStopping(){
  DmvModel dmvModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,Prng.nextInt(1000000));
  DepTreebank treebank=generator.getTreebank(50);
  DmvTrainCorpus corpus=new DmvTrainCorpus(treebank,0.0);
  double incumbentScore=-1.2;
  DmvRltRelaxation relax=getLp(corpus,1);
  DmvSolution initSol=DmvDantzigWolfeRelaxationTest.getInitFeasSol(corpus);
  double offsetProb=0.5;
  double probOfSkip=0.5;
  LocalBnBDmvTrainer.setBoundsFromInitSol(relax,initSol,offsetProb,probOfSkip);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)relax.solveRelaxation(incumbentScore);
  Assert.assertTrue(relaxSol.getScore() <= incumbentScore);
}",0.9683377308707124
131703,"/** 
 * Gets the dual objective value from CPLEX.
 */
public static double getDualObjectiveValue(IloCplex cplex,IloLPMatrix mat) throws IloException {
  if (!cplex.isDualFeasible()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  double[] duals=cplex.getDuals(mat);
  double[] redCosts=cplex.getReducedCosts(mat);
  IloNumVar[] numVars=mat.getNumVars();
  BasisStatus[] varBasis=cplex.getBasisStatuses(numVars);
  BasisStatus[] conBasis=cplex.getBasisStatuses(mat.getRanges());
  int numRows=mat.getNrows();
  double[] lb=new double[numRows];
  double[] ub=new double[numRows];
  int[][] Aind=new int[numRows][];
  double[][] Aval=new double[numRows][];
  mat.getRows(0,numRows,lb,ub,Aind,Aval);
  double dualObjVal=0.0;
  for (int i=0; i < duals.length; i++) {
    if (Utilities.equals(lb[i],ub[i],1e-13) && !isInfinite(lb[i])) {
      dualObjVal+=duals[i] * lb[i];
    }
 else {
      if (!isInfinite(lb[i]) && conBasis[i] == BasisStatus.AtLower) {
        dualObjVal+=duals[i] * lb[i];
      }
 else       if (!isInfinite(ub[i]) && conBasis[i] == BasisStatus.AtUpper) {
        dualObjVal+=duals[i] * ub[i];
      }
 else       if (conBasis[i] == BasisStatus.AtUpper || conBasis[i] == BasisStatus.AtLower) {
        if (!isInfinite(lb[i]) && isInfinite(ub[i])) {
          dualObjVal+=duals[i] * lb[i];
        }
 else         if (isInfinite(lb[i]) && !isInfinite(ub[i])) {
          dualObjVal+=duals[i] * ub[i];
        }
      }
    }
  }
  for (int i=0; i < redCosts.length; i++) {
    double varLb=numVars[i].getLB();
    double varUb=numVars[i].getUB();
    if (varBasis[i] == BasisStatus.AtLower && !Utilities.equals(varLb,0.0,1e-13) && !isInfinite(varLb)) {
      dualObjVal+=redCosts[i] * varLb;
    }
 else     if (varBasis[i] == BasisStatus.AtUpper && !Utilities.equals(varUb,0.0,1e-13) && !isInfinite(varUb)) {
      dualObjVal+=redCosts[i] * varUb;
    }
 else     if (varBasis[i] == BasisStatus.AtLower || varBasis[i] == BasisStatus.AtUpper) {
      if (!isInfinite(varLb) && isInfinite(varUb)) {
        dualObjVal+=redCosts[i] * varLb;
      }
 else       if (isInfinite(varLb) && !isInfinite(varUb)) {
        dualObjVal+=redCosts[i] * varUb;
      }
    }
  }
  return dualObjVal;
}","/** 
 * Gets the dual objective value from CPLEX. This method is currently broken. We would need to test it on a CPLEX problem where we can do early stopping as we do in RLT. Then we could compare against the objective value given by the dual simplex algorithm, which (it turns out) is exactly what we want anyway.
 */
@Deprecated public static double getDualObjectiveValue(IloCplex cplex,IloLPMatrix mat) throws IloException {
  if (!cplex.isDualFeasible()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  double[] duals=cplex.getDuals(mat);
  double[] redCosts=cplex.getReducedCosts(mat);
  IloNumVar[] numVars=mat.getNumVars();
  BasisStatus[] varBasis=cplex.getBasisStatuses(numVars);
  BasisStatus[] conBasis=cplex.getBasisStatuses(mat.getRanges());
  int numRows=mat.getNrows();
  double[] lb=new double[numRows];
  double[] ub=new double[numRows];
  int[][] Aind=new int[numRows][];
  double[][] Aval=new double[numRows][];
  mat.getRows(0,numRows,lb,ub,Aind,Aval);
  double dualObjVal=0.0;
  for (int i=0; i < duals.length; i++) {
    if (Utilities.equals(lb[i],ub[i],1e-13) && !isInfinite(lb[i])) {
      dualObjVal+=duals[i] * lb[i];
    }
 else {
      if (!isInfinite(lb[i]) && conBasis[i] == BasisStatus.AtLower) {
        dualObjVal+=duals[i] * lb[i];
      }
 else       if (!isInfinite(ub[i]) && conBasis[i] == BasisStatus.AtUpper) {
        dualObjVal+=duals[i] * ub[i];
      }
 else       if (conBasis[i] == BasisStatus.AtUpper || conBasis[i] == BasisStatus.AtLower) {
        if (!isInfinite(lb[i]) && isInfinite(ub[i])) {
          dualObjVal+=duals[i] * lb[i];
        }
 else         if (isInfinite(lb[i]) && !isInfinite(ub[i])) {
          dualObjVal+=duals[i] * ub[i];
        }
      }
    }
  }
  for (int i=0; i < redCosts.length; i++) {
    double varLb=numVars[i].getLB();
    double varUb=numVars[i].getUB();
    if (varBasis[i] == BasisStatus.AtLower && !Utilities.equals(varLb,0.0,1e-13) && !isInfinite(varLb)) {
      dualObjVal+=redCosts[i] * varLb;
    }
 else     if (varBasis[i] == BasisStatus.AtUpper && !Utilities.equals(varUb,0.0,1e-13) && !isInfinite(varUb)) {
      dualObjVal+=redCosts[i] * varUb;
    }
 else     if (varBasis[i] == BasisStatus.AtLower || varBasis[i] == BasisStatus.AtUpper) {
      if (!isInfinite(varLb) && isInfinite(varUb)) {
        dualObjVal+=redCosts[i] * varLb;
      }
 else       if (isInfinite(varLb) && !isInfinite(varUb)) {
        dualObjVal+=redCosts[i] * varUb;
      }
    }
  }
  return dualObjVal;
}",0.941251325556734
131704,"public void run(CommandLine cmd) throws ParseException, IOException {
  DepTreebank trainTreebank;
  DmvModel trueModel=null;
  if (cmd.hasOption(""String_Node_Str"")) {
    String trainPath=cmd.getOptionValue(""String_Node_Str"");
    log.info(""String_Node_Str"" + trainPath);
    int maxSentenceLength=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    Alphabet<Label> alphabet=new Alphabet<Label>();
    trainTreebank=getTreebank(cmd,trainPath,maxSentenceLength,alphabet);
  }
 else   if (cmd.hasOption(""String_Node_Str"")) {
    String synthetic=cmd.getOptionValue(""String_Node_Str"");
    if (synthetic.equals(""String_Node_Str"")) {
      trueModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      trueModel=SimpleStaticDmvModel.getThreePosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      trueModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
    }
 else {
      throw new ParseException(""String_Node_Str"" + synthetic);
    }
    long syntheticSeed=123454321;
    if (cmd.hasOption(""String_Node_Str"")) {
      syntheticSeed=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(trueModel,syntheticSeed);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",100);
    trainTreebank=generator.getTreebank(maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  double propSupervised=Command.getOptionValue(cmd,""String_Node_Str"",0.0);
  DmvTrainCorpus trainCorpus=new DmvTrainCorpus(trainTreebank,propSupervised);
  log.info(""String_Node_Str"" + trainCorpus.getNumUnlabeled());
  log.info(""String_Node_Str"" + trainCorpus.getNumLabeled());
  log.info(""String_Node_Str"" + trainTreebank.size());
  log.info(""String_Node_Str"" + trainTreebank.getNumTokens());
  log.info(""String_Node_Str"" + trainTreebank.getNumTypes());
  printSentences(cmd,trainTreebank);
  DepTreebank testTreebank=null;
  if (cmd.hasOption(""String_Node_Str"")) {
    String testPath=cmd.getOptionValue(""String_Node_Str"");
    log.info(""String_Node_Str"" + testPath);
    int maxSentenceLengthTest=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    testTreebank=getTreebank(cmd,testPath,maxSentenceLengthTest,trainTreebank.getAlphabet());
    log.info(""String_Node_Str"" + testTreebank.size());
    log.info(""String_Node_Str"" + testTreebank.getNumTokens());
    log.info(""String_Node_Str"" + testTreebank.getNumTypes());
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    DmvRelaxation dw=(DmvRelaxation)TrainerFactory.getTrainer(cmd,trainTreebank,trueModel);
    dw.init1(trainCorpus);
    dw.init2(LocalBnBDmvTrainer.getInitSol(InitSol.UNIFORM,trainCorpus,null,null,null));
    DmvSolution initBoundsSol=updateBounds(cmd,trainCorpus,dw,trainTreebank,trueModel);
    Stopwatch timer=new Stopwatch();
    timer.start();
    RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
    timer.stop();
    log.info(""String_Node_Str"" + Time.totMs(timer));
    log.info(""String_Node_Str"" + relaxSol.getScore());
    if (initBoundsSol != null) {
      log.info(""String_Node_Str"" + initBoundsSol.getScore());
      log.info(""String_Node_Str"" + Math.abs(relaxSol.getScore() - initBoundsSol.getScore()) / Math.abs(initBoundsSol.getScore()));
    }
    DmvProjector dmvProjector=new DmvProjector(trainCorpus,dw);
    DmvSolution projSol=dmvProjector.getProjectedDmvSolution(relaxSol);
    log.info(""String_Node_Str"" + projSol.getScore());
  }
 else {
    log.info(""String_Node_Str"");
    Trainer trainer=(Trainer)TrainerFactory.getTrainer(cmd,trainTreebank,trueModel);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(trainCorpus);
      updateBounds(cmd,trainCorpus,bnb.getRootRelaxation(),trainTreebank,trueModel);
      bnb.train();
    }
 else {
      trainer.train(trainCorpus);
    }
    Model model=trainer.getModel();
    log.info(""String_Node_Str"");
    ViterbiParser parser=TrainerFactory.getEvalParser();
    Evaluator trainEval=new DependencyParserEvaluator(parser,trainTreebank,""String_Node_Str"");
    trainEval.evaluate(model);
    trainEval.print();
    if (testTreebank != null) {
      log.info(""String_Node_Str"");
      Evaluator testEval=new DependencyParserEvaluator(parser,testTreebank,""String_Node_Str"");
      testEval.evaluate(model);
      testEval.print();
    }
    String printModel=Command.getOptionValue(cmd,""String_Node_Str"",null);
    if (printModel != null) {
      BufferedWriter writer=new BufferedWriter(new FileWriter(printModel));
      writer.write(""String_Node_Str"");
      writer.write(model.toString());
      writer.close();
    }
  }
}","public void run(CommandLine cmd) throws ParseException, IOException {
  DepTreebank trainTreebank;
  DmvModel trueModel=null;
  if (cmd.hasOption(""String_Node_Str"")) {
    String trainPath=cmd.getOptionValue(""String_Node_Str"");
    log.info(""String_Node_Str"" + trainPath);
    int maxSentenceLength=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    Alphabet<Label> alphabet=new Alphabet<Label>();
    trainTreebank=getTreebank(cmd,trainPath,maxSentenceLength,alphabet);
  }
 else   if (cmd.hasOption(""String_Node_Str"")) {
    String synthetic=cmd.getOptionValue(""String_Node_Str"");
    if (synthetic.equals(""String_Node_Str"")) {
      trueModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      trueModel=SimpleStaticDmvModel.getThreePosTagInstance();
    }
 else     if (synthetic.equals(""String_Node_Str"")) {
      trueModel=SimpleStaticDmvModel.getAltThreePosTagInstance();
    }
 else {
      throw new ParseException(""String_Node_Str"" + synthetic);
    }
    long syntheticSeed=123454321;
    if (cmd.hasOption(""String_Node_Str"")) {
      syntheticSeed=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(trueModel,syntheticSeed);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",100);
    trainTreebank=generator.getTreebank(maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  double propSupervised=Command.getOptionValue(cmd,""String_Node_Str"",0.0);
  DmvTrainCorpus trainCorpus=new DmvTrainCorpus(trainTreebank,propSupervised);
  log.info(""String_Node_Str"" + trainCorpus.getNumUnlabeled());
  log.info(""String_Node_Str"" + trainCorpus.getNumLabeled());
  log.info(""String_Node_Str"" + trainTreebank.size());
  log.info(""String_Node_Str"" + trainTreebank.getNumTokens());
  log.info(""String_Node_Str"" + trainTreebank.getNumTypes());
  printSentences(cmd,trainTreebank);
  DepTreebank testTreebank=null;
  if (cmd.hasOption(""String_Node_Str"")) {
    String testPath=cmd.getOptionValue(""String_Node_Str"");
    log.info(""String_Node_Str"" + testPath);
    int maxSentenceLengthTest=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    testTreebank=getTreebank(cmd,testPath,maxSentenceLengthTest,trainTreebank.getAlphabet());
    log.info(""String_Node_Str"" + testTreebank.size());
    log.info(""String_Node_Str"" + testTreebank.getNumTokens());
    log.info(""String_Node_Str"" + testTreebank.getNumTypes());
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    DmvRelaxation dw=(DmvRelaxation)TrainerFactory.getTrainer(cmd,trainTreebank,trueModel);
    dw.init1(trainCorpus);
    dw.init2(LocalBnBDmvTrainer.getInitSol(InitSol.UNIFORM,trainCorpus,null,null,null));
    DmvSolution initBoundsSol=updateBounds(cmd,trainCorpus,dw,trainTreebank,trueModel);
    Stopwatch timer=new Stopwatch();
    timer.start();
    RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
    timer.stop();
    log.info(""String_Node_Str"" + Time.totMs(timer));
    log.info(""String_Node_Str"" + relaxSol.getScore());
    if (initBoundsSol != null) {
      log.info(""String_Node_Str"" + initBoundsSol.getScore());
      log.info(""String_Node_Str"" + Math.abs(relaxSol.getScore() - initBoundsSol.getScore()) / Math.abs(initBoundsSol.getScore()));
    }
    DmvProjector dmvProjector=new DmvProjector(trainCorpus);
    DmvSolution projSol=dmvProjector.getProjectedDmvSolution(relaxSol);
    log.info(""String_Node_Str"" + projSol.getScore());
  }
 else {
    log.info(""String_Node_Str"");
    Trainer trainer=(Trainer)TrainerFactory.getTrainer(cmd,trainTreebank,trueModel);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(trainCorpus);
      updateBounds(cmd,trainCorpus,bnb.getRootRelaxation(),trainTreebank,trueModel);
      bnb.train();
    }
 else {
      trainer.train(trainCorpus);
    }
    Model model=trainer.getModel();
    log.info(""String_Node_Str"");
    ViterbiParser parser=TrainerFactory.getEvalParser();
    Evaluator trainEval=new DependencyParserEvaluator(parser,trainTreebank,""String_Node_Str"");
    trainEval.evaluate(model);
    trainEval.print();
    if (testTreebank != null) {
      log.info(""String_Node_Str"");
      Evaluator testEval=new DependencyParserEvaluator(parser,testTreebank,""String_Node_Str"");
      testEval.evaluate(model);
      testEval.print();
    }
    String printModel=Command.getOptionValue(cmd,""String_Node_Str"",null);
    if (printModel != null) {
      BufferedWriter writer=new BufferedWriter(new FileWriter(printModel));
      writer.write(""String_Node_Str"");
      writer.write(model.toString());
      writer.close();
    }
  }
}",0.9996832435856826
131705,"@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSyntheticCorpus(dmvModel);
  DmvDantzigWolfeRelaxation dw=getDw(trainCorpus,10);
  DmvSolution initBoundsSol=LocalBnBDmvTrainer.getInitSol(InitSol.VITERBI_EM,trainCorpus,dw,null,null);
  LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initBoundsSol,0.1,0.0);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.813,relaxSol.getScore(),1e-3);
}","@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSemiSupervisedSyntheticCorpus(dmvModel);
  DmvDantzigWolfeRelaxation dw=getDw(trainCorpus,10);
  DmvSolution initBoundsSol=LocalBnBDmvTrainer.getInitSol(InitSol.VITERBI_EM,trainCorpus,dw,null,null);
  LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initBoundsSol,0.1,0.0);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.813,relaxSol.getScore(),1e-3);
}",0.9872958257713248
131706,"@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSyntheticCorpus(dmvModel);
  DmvRltRelaxation dw=getLp(trainCorpus,10);
  DmvSolution initBoundsSol=LocalBnBDmvTrainer.getInitSol(InitSol.VITERBI_EM,trainCorpus,dw,null,null);
  LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initBoundsSol,0.1,0.0);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.813,relaxSol.getScore(),1e-3);
}","@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSemiSupervisedSyntheticCorpus(dmvModel);
  DmvRltRelaxation dw=getLp(trainCorpus,10);
  DmvSolution initBoundsSol=LocalBnBDmvTrainer.getInitSol(InitSol.VITERBI_EM,trainCorpus,dw,null,null);
  LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initBoundsSol,0.1,0.0);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.813,relaxSol.getScore(),1e-3);
}",0.9870848708487084
131707,"public DmvSolution getProjectedDmvSolution(RelaxedDmvSolution relaxSol){
  if (!relaxSol.getStatus().hasSolution()) {
    return null;
  }
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    double[] probs=Vectors.getExp(logProbs[c]);
    probs=Projections.getProjectedParams(probs);
    logProbs[c]=Vectors.getLog(probs);
  }
  IndexedDmvModel idm=dwRelax.getIdm();
  DepTreebank treebank=getProjectedParses(relaxSol.getTreebank());
  double score=dwRelax.computeTrueObjective(logProbs,treebank);
  DmvSolution sol=new DmvSolution(logProbs,idm,treebank,score);
  return sol;
}","public DmvSolution getProjectedDmvSolution(RelaxedDmvSolution relaxSol){
  if (!relaxSol.getStatus().hasSolution()) {
    return null;
  }
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    double[] probs=Vectors.getExp(logProbs[c]);
    probs=Projections.getProjectedParams(probs);
    logProbs[c]=Vectors.getLog(probs);
  }
  DepTreebank treebank=getProjectedParses(relaxSol.getTreebank());
  double score=obj.computeTrueObjective(logProbs,treebank);
  DmvSolution sol=new DmvSolution(logProbs,idm,treebank,score);
  return sol;
}",0.8408710217755444
131708,"public DmvProjector(DmvTrainCorpus corpus,DmvRelaxation dwRelax){
  super();
  this.corpus=corpus;
  this.dwRelax=dwRelax;
}","public DmvProjector(DmvTrainCorpus corpus){
  super();
  this.corpus=corpus;
  this.idm=new IndexedDmvModel(this.corpus);
  this.obj=new DmvObjective(this.corpus);
}",0.6505190311418685
131709,"private DepTreebank getProjectedParses(RelaxedDepTreebank fracTreebank){
  double[][] fracRoots=fracTreebank.getFracRoots();
  double[][][] fracChildren=fracTreebank.getFracChildren();
  DepTreebank treebank=new DepTreebank(corpus.getLabelAlphabet());
  for (int s=0; s < fracChildren.length; s++) {
    if (corpus.isLabeled(s)) {
      treebank.add(corpus.getTree(s));
    }
 else {
      Sentence sentence=corpus.getSentence(s);
      double[] fracRoot=fracRoots[s];
      double[][] fracChild=fracChildren[s];
      DepTree tree=Projections.getProjectiveParse(sentence,fracRoot,fracChild);
      treebank.add(tree);
    }
  }
  return treebank;
}","public DepTreebank getProjectedParses(RelaxedDepTreebank fracTreebank){
  double[][] fracRoots=fracTreebank.getFracRoots();
  double[][][] fracChildren=fracTreebank.getFracChildren();
  DepTreebank treebank=new DepTreebank(corpus.getLabelAlphabet());
  for (int s=0; s < fracChildren.length; s++) {
    if (corpus.isLabeled(s)) {
      treebank.add(corpus.getTree(s));
    }
 else {
      Sentence sentence=corpus.getSentence(s);
      double[] fracRoot=fracRoots[s];
      double[][] fracChild=fracChildren[s];
      DepTree tree=Projections.getProjectiveParse(sentence,fracRoot,fracChild);
      treebank.add(tree);
    }
  }
  return treebank;
}",0.9915188897455668
131710,"@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSyntheticCorpus(dmvModel);
  DmvRltRelaxation dw=getLp(trainCorpus,10);
  DmvSolution initBoundsSol=LocalBnBDmvTrainer.getInitSol(InitSol.VITERBI_EM,trainCorpus,dw,null,null);
  LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initBoundsSol,0.1,0.0);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.813,relaxSol.getScore(),1e-3);
}","@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSemiSupervisedSyntheticCorpus(dmvModel);
  DmvRltRelaxation dw=getLp(trainCorpus,10);
  DmvSolution initBoundsSol=LocalBnBDmvTrainer.getInitSol(InitSol.VITERBI_EM,trainCorpus,dw,null,null);
  LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initBoundsSol,0.1,0.0);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.813,relaxSol.getScore(),1e-3);
}",0.9870848708487084
131711,"@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSyntheticCorpus(dmvModel);
  DmvDantzigWolfeRelaxation dw=getDw(trainCorpus);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.866,relaxSol.getScore(),1e-3);
}","@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=DmvCkyParserTest.getSemiSupervisedSyntheticCorpus(dmvModel);
  DmvDantzigWolfeRelaxation dw=getDw(trainCorpus);
  RelaxedDmvSolution relaxSol=(RelaxedDmvSolution)dw.solveRelaxation();
  assertEquals(-14.866,relaxSol.getScore(),1e-3);
}",0.9813333333333332
131712,"public ViterbiEmDmvProjector(DmvTrainCorpus corpus,DmvRelaxation dwRelax,DmvSolution initFeasSol){
  dmvProjector=new DmvProjector(corpus,dwRelax);
  this.corpus=corpus;
  this.dwRelax=dwRelax;
  this.initFeasSol=initFeasSol;
}","public ViterbiEmDmvProjector(DmvTrainCorpus corpus,DmvRelaxation dwRelax,DmvSolution initFeasSol){
  dmvProjector=new DmvProjector(corpus);
  this.corpus=corpus;
  this.dwRelax=dwRelax;
  this.initFeasSol=initFeasSol;
}",0.9820627802690582
131713,"@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=getSyntheticCorpus(dmvModel);
  System.out.println(dmvModel.toString());
  System.out.println(trainCorpus);
  double expectedParseWeight=-31.278;
  getDpParses(dmvModel,trainCorpus,expectedParseWeight);
}","@Test public void testSemiSupervisedOnSynthetic(){
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvTrainCorpus trainCorpus=getSemiSupervisedSyntheticCorpus(dmvModel);
  System.out.println(dmvModel.toString());
  System.out.println(trainCorpus);
  double expectedParseWeight=-31.278;
  getDpParses(dmvModel,trainCorpus,expectedParseWeight);
}",0.9804469273743016
131714,"/** 
 * Initializes from a fractional parse in order to project back into the feasible region.
 * @param fracRoot
 */
private void cacheModel(double[] fracRoot,double[][] fracChild){
  int[] i2tag=depInst.postags;
  for (int c=0; c < i2tag.length; c++) {
    root[c]=Utilities.log(fracRoot[c]);
    for (int p=0; p < i2tag.length; p++) {
      if (c == p)       continue;
      if (nontermMap.childValency > 1) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      child[c][p][0]=Utilities.log(fracChild[p][c]);
    }
    for (int dir=0; dir < 2; dir++) {
      for (int v=0; v < nontermMap.decisionValency; v++) {
        for (int choice=0; choice < 2; choice++) {
          decision[c][dir][v][choice]=0.0;
        }
      }
    }
  }
}","/** 
 * Initializes from a fractional parse in order to project back into the feasible region.
 * @param fracRoot
 */
private void cacheModel(double[] fracRoot,double[][] fracChild){
  int[] i2tag=depInst.postags;
  for (int c=0; c < i2tag.length; c++) {
    root[c]=Utilities.logForIlp(fracRoot[c]);
    for (int p=0; p < i2tag.length; p++) {
      if (c == p)       continue;
      if (nontermMap.childValency > 1) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      child[c][p][0]=Utilities.logForIlp(fracChild[p][c]);
    }
    for (int dir=0; dir < 2; dir++) {
      for (int v=0; v < nontermMap.decisionValency; v++) {
        for (int choice=0; choice < 2; choice++) {
          decision[c][dir][v][choice]=0.0;
        }
      }
    }
  }
}",0.9921671018276762
131715,"private static RltProgram getRltConstraints(IloCplex cplex,int n,IloNumVar[] numVars,int size,List<Factor> factors,IloLPMatrix inputMatrix) throws IloException {
  IloNumVar[][] rltVars=new IloNumVar[n][];
  for (int i=0; i < n; i++) {
    rltVars[i]=new IloNumVar[i + 1];
    for (int j=0; j <= i; j++) {
      rltVars[i][j]=cplex.numVar(numVars[i].getLB() * numVars[j].getLB(),numVars[i].getUB() * numVars[j].getUB(),String.format(""String_Node_Str"",i,j));
    }
  }
  IloLPMatrix rltMat=cplex.LPMatrix();
  rltMat.addCols(numVars);
  for (int i=0; i < n; i++) {
    rltMat.addCols(rltVars[i]);
  }
  int[][] rltVarsInd=new int[n][];
  for (int i=0; i < n; i++) {
    rltVarsInd[i]=new int[i + 1];
    for (int j=0; j <= i; j++) {
      rltVarsInd[i][j]=rltMat.getIndex(rltVars[i][j]);
    }
  }
  for (int i=0; i < factors.size(); i++) {
    Factor facI=factors.get(i);
    for (int j=0; j < factors.size(); j++) {
      Factor facJ=factors.get(j);
      SparseVector row=new FastSparseVector(size);
      SparseVector facIG=facI.G.copy();
      SparseVector facJG=facJ.G.copy();
      row.add(facIG.scale(facJ.g));
      row.add(facJG.scale(facI.g));
      SparseVector ip=facI.G.hadamardProd(facJ.G);
      ip=ip.scale(-1.0);
      SparseVector shiftedIp=new SparseVector(size);
      for (int idx=0; idx < ip.getUsed(); idx++) {
        int k=ip.getIndex()[idx];
        double val=ip.getData()[idx];
        shiftedIp.set(rltVarsInd[k][k],val);
      }
      row=(SparseVector)row.add(shiftedIp);
      for (int ii=0; ii < facI.G.getUsed(); ii++) {
        int k=facI.G.getIndex()[ii];
        double vi=facI.G.getData()[ii];
        for (int jj=0; jj < facJ.G.getUsed(); jj++) {
          int l=facJ.G.getIndex()[jj];
          double vj=facJ.G.getData()[jj];
          if (k == l) {
            continue;
          }
          row.add(rltVarsInd[Math.max(k,l)][Math.min(k,l)],-vi * vj);
        }
      }
      String name=String.format(""String_Node_Str"",i,j);
      int rowind=rltMat.addRow(CPLEX_NEG_INF,facI.g * facJ.g,row.getIndex(),row.getData());
      rltMat.getRange(rowind).setName(name);
      log.debug(name + ""String_Node_Str"" + row+ ""String_Node_Str""+ facI.g * facJ.g);
    }
  }
  return new RltProgram(rltMat,rltVars,inputMatrix);
}","private static RltProgram getRltConstraints(IloCplex cplex,int n,IloNumVar[] numVars,int size,List<Factor> factors,IloLPMatrix inputMatrix) throws IloException {
  IloNumVar[][] rltVars=new IloNumVar[n][];
  for (int i=0; i < n; i++) {
    rltVars[i]=new IloNumVar[i + 1];
    for (int j=0; j <= i; j++) {
      rltVars[i][j]=cplex.numVar(numVars[i].getLB() * numVars[j].getLB(),numVars[i].getUB() * numVars[j].getUB(),String.format(""String_Node_Str"",i,j));
    }
  }
  IloLPMatrix rltMat=cplex.LPMatrix();
  rltMat.addCols(numVars);
  for (int i=0; i < n; i++) {
    rltMat.addCols(rltVars[i]);
  }
  int[][] rltVarsInd=new int[n][];
  for (int i=0; i < n; i++) {
    rltVarsInd[i]=new int[i + 1];
    for (int j=0; j <= i; j++) {
      rltVarsInd[i][j]=rltMat.getIndex(rltVars[i][j]);
    }
  }
  for (int i=0; i < factors.size(); i++) {
    Factor facI=factors.get(i);
    for (int j=0; j <= i; j++) {
      Factor facJ=factors.get(j);
      SparseVector row=new FastSparseVector(size);
      SparseVector facIG=facI.G.copy();
      SparseVector facJG=facJ.G.copy();
      row.add(facIG.scale(facJ.g));
      row.add(facJG.scale(facI.g));
      SparseVector ip=facI.G.hadamardProd(facJ.G);
      ip=ip.scale(-1.0);
      SparseVector shiftedIp=new SparseVector(size);
      for (int idx=0; idx < ip.getUsed(); idx++) {
        int k=ip.getIndex()[idx];
        double val=ip.getData()[idx];
        shiftedIp.set(rltVarsInd[k][k],val);
      }
      row=(SparseVector)row.add(shiftedIp);
      for (int ii=0; ii < facI.G.getUsed(); ii++) {
        int k=facI.G.getIndex()[ii];
        double vi=facI.G.getData()[ii];
        for (int jj=0; jj < facJ.G.getUsed(); jj++) {
          int l=facJ.G.getIndex()[jj];
          double vj=facJ.G.getData()[jj];
          if (k == l) {
            continue;
          }
          row.add(rltVarsInd[Math.max(k,l)][Math.min(k,l)],-vi * vj);
        }
      }
      String name=String.format(""String_Node_Str"",i,j);
      int rowind=rltMat.addRow(CPLEX_NEG_INF,facI.g * facJ.g,row.getIndex(),row.getData());
      rltMat.getRange(rowind).setName(name);
      log.debug(name + ""String_Node_Str"" + row+ ""String_Node_Str""+ facI.g * facJ.g);
    }
  }
  return new RltProgram(rltMat,rltVars,inputMatrix);
}",0.9959982214317474
131716,"@Test public void testBoundsOnlyYieldConvexEnvelope() throws IloException {
  double x1Lb=2;
  double x1Ub=3;
  double x2Lb=5;
  double x2Ub=7;
  IloCplex cplex=new IloCplex();
  cplex.setParam(IntParam.RootAlg,IloCplex.Algorithm.Primal);
  IloNumVar x1=cplex.numVar(x1Lb,x1Ub,""String_Node_Str"");
  IloNumVar x2=cplex.numVar(x2Lb,x2Ub,""String_Node_Str"");
  IloNumVar[] vars=new IloNumVar[]{x1,x2};
  IloLPMatrix mat=cplex.LPMatrix(""String_Node_Str"");
  mat.addCols(vars);
  RltProgram rlt=Rlt.getFirstOrderRlt(cplex,mat);
  IloLPMatrix rltMat=rlt.getRltMatrix();
  cplex.add(rltMat);
  System.out.println(rltMat);
  String rltMatStr=rltMat.toString();
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertEquals(16,rltMat.getNrows());
}","@Test public void testBoundsOnlyYieldConvexEnvelope() throws IloException {
  double x1Lb=2;
  double x1Ub=3;
  double x2Lb=5;
  double x2Ub=7;
  IloCplex cplex=new IloCplex();
  cplex.setParam(IntParam.RootAlg,IloCplex.Algorithm.Primal);
  IloNumVar x1=cplex.numVar(x1Lb,x1Ub,""String_Node_Str"");
  IloNumVar x2=cplex.numVar(x2Lb,x2Ub,""String_Node_Str"");
  IloNumVar[] vars=new IloNumVar[]{x1,x2};
  IloLPMatrix mat=cplex.LPMatrix(""String_Node_Str"");
  mat.addCols(vars);
  RltProgram rlt=Rlt.getFirstOrderRlt(cplex,mat);
  IloLPMatrix rltMat=rlt.getRltMatrix();
  cplex.add(rltMat);
  System.out.println(rltMat);
  String rltMatStr=rltMat.toString();
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertEquals(10,rltMat.getNrows());
}",0.8939544103072349
131717,"@Test public void testGetConvexEnvelope() throws IloException {
  double x1Lb=2;
  double x1Ub=3;
  double x2Lb=5;
  double x2Ub=7;
  IloCplex cplex=new IloCplex();
  cplex.setParam(IntParam.RootAlg,IloCplex.Algorithm.Primal);
  IloNumVar x1=cplex.numVar(x1Lb,x1Ub,""String_Node_Str"");
  IloNumVar x2=cplex.numVar(x2Lb,x2Ub,""String_Node_Str"");
  IloRange c1=cplex.le(cplex.sum(cplex.prod(-6,x1),cplex.prod(8,x2)),48);
  IloRange c2=cplex.le(cplex.sum(cplex.prod(3,x1),cplex.prod(8,x2)),120);
  IloNumVar[] vars=new IloNumVar[]{x1,x2};
  IloRange[] cons=new IloRange[]{c1,c2};
  IloLPMatrix mat=cplex.LPMatrix(""String_Node_Str"");
  mat.addCols(vars);
  mat.addRows(cons);
  RltProgram rlt=Rlt.getConvexConcaveEnvelope(cplex,mat);
  IloLPMatrix rltMat=rlt.getRltMatrix();
  cplex.add(rltMat);
  System.out.println(rltMat);
  String rltMatStr=rltMat.toString();
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertEquals(16,rltMat.getNrows());
}","@Test public void testGetConvexEnvelope() throws IloException {
  double x1Lb=2;
  double x1Ub=3;
  double x2Lb=5;
  double x2Ub=7;
  IloCplex cplex=new IloCplex();
  cplex.setParam(IntParam.RootAlg,IloCplex.Algorithm.Primal);
  IloNumVar x1=cplex.numVar(x1Lb,x1Ub,""String_Node_Str"");
  IloNumVar x2=cplex.numVar(x2Lb,x2Ub,""String_Node_Str"");
  IloRange c1=cplex.le(cplex.sum(cplex.prod(-6,x1),cplex.prod(8,x2)),48);
  IloRange c2=cplex.le(cplex.sum(cplex.prod(3,x1),cplex.prod(8,x2)),120);
  IloNumVar[] vars=new IloNumVar[]{x1,x2};
  IloRange[] cons=new IloRange[]{c1,c2};
  IloLPMatrix mat=cplex.LPMatrix(""String_Node_Str"");
  mat.addCols(vars);
  mat.addRows(cons);
  RltProgram rlt=Rlt.getConvexConcaveEnvelope(cplex,mat);
  IloLPMatrix rltMat=rlt.getRltMatrix();
  cplex.add(rltMat);
  System.out.println(rltMat);
  String rltMatStr=rltMat.toString();
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertTrue(rltMatStr.contains(""String_Node_Str""));
  assertEquals(10,rltMat.getNrows());
}",0.9119341563786008
131718,"private ParsingProblem buildProgram(DmvTrainCorpus corpus,DmvModel model) throws IloException {
  ParsingProblem pp=new ParsingProblem();
  pp.arcRoot=new IloNumVar[corpus.size()][];
  pp.arcChild=new IloNumVar[corpus.size()][][];
  pp.flowRoot=new IloNumVar[corpus.size()][];
  pp.flowChild=new IloNumVar[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.arcRoot[s]=new IloNumVar[sent.size()];
    pp.arcChild[s]=new IloNumVar[sent.size()][sent.size()];
    pp.flowRoot[s]=new IloNumVar[sent.size()];
    pp.flowChild[s]=new IloNumVar[sent.size()][sent.size()];
    for (int c=0; c < sent.size(); c++) {
      pp.arcRoot[s][c]=cplex.numVar(0,1,String.format(""String_Node_Str"",s,c));
      pp.flowRoot[s][c]=cplex.numVar(0,sent.size(),String.format(""String_Node_Str"",s,c));
    }
    for (int p=0; p < sent.size(); p++) {
      for (int c=0; c < sent.size(); c++) {
        pp.arcChild[s][p][c]=cplex.numVar(0,1,String.format(""String_Node_Str"",s,p,c));
        pp.flowChild[s][p][c]=cplex.numVar(0,sent.size(),String.format(""String_Node_Str"",s,p,c));
      }
    }
  }
  pp.numToSide=new IloNumVar[corpus.size()][][];
  pp.genAdj=new IloNumVar[corpus.size()][][];
  pp.noGenAdj=new IloNumVar[corpus.size()][][];
  pp.numNonAdj=new IloNumVar[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.numToSide[s]=new IloNumVar[sent.size()][2];
    pp.genAdj[s]=new IloNumVar[sent.size()][2];
    pp.noGenAdj[s]=new IloNumVar[sent.size()][2];
    pp.numNonAdj[s]=new IloNumVar[sent.size()][2];
    for (int i=0; i < sent.size(); i++) {
      for (int side=0; side < 2; side++) {
        pp.numToSide[s][i][side]=cplex.numVar(0,sent.size(),String.format(""String_Node_Str"",s,i,side));
        pp.genAdj[s][i][side]=cplex.numVar(0,1,String.format(""String_Node_Str"",s,i,side));
        pp.noGenAdj[s][i][side]=cplex.numVar(0,1,String.format(""String_Node_Str"",s,i,side));
        pp.numNonAdj[s][i][side]=cplex.numVar(0,sent.size() - 1,String.format(""String_Node_Str"",s,i,side));
      }
    }
  }
  pp.oneArcPerWall=new IloRange[corpus.size()];
  for (int s=0; s < corpus.size(); s++) {
    double[] ones=new double[pp.arcRoot[s].length];
    Arrays.fill(ones,1.0);
    IloLinearNumExpr expr=cplex.scalProd(ones,pp.arcRoot[s]);
    pp.oneArcPerWall[s]=cplex.eq(expr,1.0,""String_Node_Str"");
  }
  pp.oneParent=new IloRange[corpus.size()][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.oneParent[s]=new IloRange[sent.size()];
    for (int c=0; c < sent.size(); c++) {
      IloLinearNumExpr expr=cplex.linearNumExpr();
      for (int p=0; p < sent.size(); p++) {
        expr.addTerm(1.0,pp.arcChild[s][p][c]);
      }
      expr.addTerm(1.0,pp.arcRoot[s][c]);
      pp.oneParent[s][c]=cplex.eq(expr,1.0,""String_Node_Str"");
    }
  }
  pp.rootFlowIsSentLength=new IloRange[corpus.size()];
  for (int s=0; s < corpus.size(); s++) {
    double[] ones=new double[pp.arcRoot[s].length];
    Arrays.fill(ones,1.0);
    IloLinearNumExpr expr=cplex.scalProd(ones,pp.flowRoot[s]);
    Sentence sent=corpus.getSentence(s);
    pp.rootFlowIsSentLength[s]=cplex.eq(expr,sent.size(),""String_Node_Str"");
  }
  pp.flowDiff=new IloRange[corpus.size()][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.flowDiff[s]=new IloRange[sent.size()];
    for (int i=0; i < sent.size(); i++) {
      IloLinearNumExpr expr=cplex.linearNumExpr();
      for (int p=0; p < sent.size(); p++) {
        expr.addTerm(1.0,pp.flowChild[s][p][i]);
      }
      expr.addTerm(1.0,pp.flowRoot[s][i]);
      for (int c=0; c < sent.size(); c++) {
        expr.addTerm(-1.0,pp.flowChild[s][i][c]);
      }
      pp.flowDiff[s][i]=cplex.eq(expr,1.0,""String_Node_Str"");
    }
  }
  pp.flowBound=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.flowBound[s]=new IloRange[sent.size()][sent.size()];
    for (int c=0; c < sent.size(); c++) {
      for (int p=0; p < sent.size(); p++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        expr.addTerm(1.0,pp.flowChild[s][p][c]);
        expr.addTerm(-sent.size(),pp.arcChild[s][p][c]);
        pp.flowBound[s][p][c]=cplex.le(expr,0.0,""String_Node_Str"");
      }
    }
  }
  if (formulation == IlpFormulation.FLOW_PROJ_LPRELAX) {
    pp.projectivity=new IloRange[corpus.size()][][];
    for (int s=0; s < corpus.size(); s++) {
      Sentence sent=corpus.getSentence(s);
      pp.projectivity[s]=new IloRange[sent.size()][sent.size()];
      for (int p=0; p < sent.size(); p++) {
        for (int c=0; c < sent.size(); c++) {
          if (c == p) {
            continue;
          }
          IloLinearNumExpr expr=cplex.linearNumExpr();
          for (int k=Math.min(p,c) + 1; k < Math.max(p,c); k++) {
            for (int l=0; l < sent.size(); l++) {
              if (l >= Math.min(p,c) && l <= Math.max(p,c)) {
                continue;
              }
              expr.addTerm(1.0,pp.arcChild[s][k][l]);
              expr.addTerm(1.0,pp.arcChild[s][l][k]);
            }
          }
          expr.addTerm(sent.size(),pp.arcChild[s][p][c]);
          pp.projectivity[s][p][c]=cplex.le(expr,sent.size(),""String_Node_Str"");
        }
      }
    }
  }
  pp.numToSideCons=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.numToSideCons[s]=new IloRange[sent.size()][2];
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        if (side == DmvModel.Lr.LEFT.getAsInt()) {
          for (int c=0; c < p - 1; c++) {
            expr.addTerm(1.0,pp.arcChild[s][p][c]);
          }
        }
 else {
          for (int c=p + 1; c < sent.size(); c++) {
            expr.addTerm(1.0,pp.arcChild[s][p][c]);
          }
        }
        expr.addTerm(-1.0,pp.numToSide[s][p][side]);
        pp.numToSideCons[s][p][side]=cplex.eq(expr,0.0,""String_Node_Str"");
      }
    }
  }
  pp.genAdjCons=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.genAdjCons[s]=new IloRange[sent.size()][2];
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        expr.addTerm(-1.0,pp.genAdj[s][p][side]);
        expr.addTerm(1.0 / sent.size(),pp.numToSide[s][p][side]);
        pp.genAdjCons[s][p][side]=cplex.le(expr,0.0,""String_Node_Str"");
      }
    }
  }
  pp.numNonAdjCons=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.numNonAdjCons[s]=new IloRange[sent.size()][2];
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        expr.addTerm(1.0,pp.numToSide[s][p][side]);
        expr.addTerm(-1.0,pp.genAdj[s][p][side]);
        expr.addTerm(-1.0,pp.numNonAdj[s][p][side]);
        pp.numNonAdjCons[s][p][side]=cplex.eq(expr,0.0,""String_Node_Str"");
      }
    }
  }
  pp.noGenAdjCons=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.noGenAdjCons[s]=new IloRange[sent.size()][2];
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        expr.addTerm(1.0,pp.genAdj[s][p][side]);
        expr.addTerm(1.0,pp.noGenAdj[s][p][side]);
        pp.noGenAdjCons[s][p][side]=cplex.eq(expr,1.0,""String_Node_Str"");
      }
    }
  }
  pp.mat=cplex.LPMatrix();
  pp.mat.addRows(pp.oneArcPerWall);
  addRows(pp.mat,pp.oneParent);
  pp.mat.addRows(pp.rootFlowIsSentLength);
  addRows(pp.mat,pp.flowDiff);
  addRows(pp.mat,pp.flowBound);
  if (formulation == IlpFormulation.FLOW_PROJ_LPRELAX) {
    addRows(pp.mat,pp.projectivity);
  }
  addRows(pp.mat,pp.numToSideCons);
  addRows(pp.mat,pp.genAdjCons);
  addRows(pp.mat,pp.numNonAdjCons);
  addRows(pp.mat,pp.noGenAdjCons);
  pp.obj=cplex.maximize();
  IloLinearNumExpr expr=cplex.linearNumExpr();
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    DepSentenceDist sd=new DepSentenceDist(sent,model);
    for (int c=0; c < sent.size(); c++) {
      expr.addTerm(sd.root[c],pp.arcRoot[s][c]);
      for (int p=0; p < sent.size(); p++) {
        expr.addTerm(sd.child[c][p][0],pp.arcChild[s][p][c]);
      }
    }
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        expr.addTerm(sd.decision[p][side][0][0],pp.noGenAdj[s][p][side]);
        expr.addTerm(sd.decision[p][side][0][1] + sd.decision[p][side][1][0],pp.genAdj[s][p][side]);
        expr.addTerm(sd.decision[p][side][1][1],pp.numNonAdj[s][p][side]);
      }
    }
  }
  pp.obj.setExpr(expr);
  return pp;
}","private ParsingProblem buildProgram(DmvTrainCorpus corpus,DmvModel model) throws IloException {
  ParsingProblem pp=new ParsingProblem();
  pp.arcRoot=new IloNumVar[corpus.size()][];
  pp.arcChild=new IloNumVar[corpus.size()][][];
  pp.flowRoot=new IloNumVar[corpus.size()][];
  pp.flowChild=new IloNumVar[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.arcRoot[s]=new IloNumVar[sent.size()];
    pp.arcChild[s]=new IloNumVar[sent.size()][sent.size()];
    pp.flowRoot[s]=new IloNumVar[sent.size()];
    pp.flowChild[s]=new IloNumVar[sent.size()][sent.size()];
    for (int c=0; c < sent.size(); c++) {
      pp.arcRoot[s][c]=cplex.numVar(0,1,String.format(""String_Node_Str"",s,c));
      pp.flowRoot[s][c]=cplex.numVar(0,sent.size(),String.format(""String_Node_Str"",s,c));
    }
    for (int p=0; p < sent.size(); p++) {
      for (int c=0; c < sent.size(); c++) {
        if (p == c) {
          continue;
        }
        pp.arcChild[s][p][c]=cplex.numVar(0,1,String.format(""String_Node_Str"",s,p,c));
        pp.flowChild[s][p][c]=cplex.numVar(0,sent.size(),String.format(""String_Node_Str"",s,p,c));
      }
    }
  }
  pp.numToSide=new IloNumVar[corpus.size()][][];
  pp.genAdj=new IloNumVar[corpus.size()][][];
  pp.stopAdj=new IloNumVar[corpus.size()][][];
  pp.numNonAdj=new IloNumVar[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.numToSide[s]=new IloNumVar[sent.size()][2];
    pp.genAdj[s]=new IloNumVar[sent.size()][2];
    pp.stopAdj[s]=new IloNumVar[sent.size()][2];
    pp.numNonAdj[s]=new IloNumVar[sent.size()][2];
    for (int i=0; i < sent.size(); i++) {
      for (int side=0; side < 2; side++) {
        pp.numToSide[s][i][side]=cplex.numVar(0,sent.size(),String.format(""String_Node_Str"",s,i,side));
        pp.genAdj[s][i][side]=cplex.numVar(0,1,String.format(""String_Node_Str"",s,i,side));
        pp.stopAdj[s][i][side]=cplex.numVar(0,1,String.format(""String_Node_Str"",s,i,side));
        pp.numNonAdj[s][i][side]=cplex.numVar(0,sent.size() - 1,String.format(""String_Node_Str"",s,i,side));
      }
    }
  }
  pp.oneArcPerWall=new IloRange[corpus.size()];
  for (int s=0; s < corpus.size(); s++) {
    double[] ones=new double[pp.arcRoot[s].length];
    Arrays.fill(ones,1.0);
    IloLinearNumExpr expr=cplex.scalProd(ones,pp.arcRoot[s]);
    pp.oneArcPerWall[s]=cplex.eq(expr,1.0,""String_Node_Str"");
  }
  pp.oneParent=new IloRange[corpus.size()][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.oneParent[s]=new IloRange[sent.size()];
    for (int c=0; c < sent.size(); c++) {
      IloLinearNumExpr expr=cplex.linearNumExpr();
      for (int p=0; p < sent.size(); p++) {
        if (p == c) {
          continue;
        }
        expr.addTerm(1.0,pp.arcChild[s][p][c]);
      }
      expr.addTerm(1.0,pp.arcRoot[s][c]);
      pp.oneParent[s][c]=cplex.eq(expr,1.0,""String_Node_Str"");
    }
  }
  pp.rootFlowIsSentLength=new IloRange[corpus.size()];
  for (int s=0; s < corpus.size(); s++) {
    double[] ones=new double[pp.arcRoot[s].length];
    Arrays.fill(ones,1.0);
    IloLinearNumExpr expr=cplex.scalProd(ones,pp.flowRoot[s]);
    Sentence sent=corpus.getSentence(s);
    pp.rootFlowIsSentLength[s]=cplex.eq(expr,sent.size(),""String_Node_Str"");
  }
  pp.flowDiff=new IloRange[corpus.size()][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.flowDiff[s]=new IloRange[sent.size()];
    for (int i=0; i < sent.size(); i++) {
      IloLinearNumExpr expr=cplex.linearNumExpr();
      for (int p=0; p < sent.size(); p++) {
        if (p == i) {
          continue;
        }
        expr.addTerm(1.0,pp.flowChild[s][p][i]);
      }
      expr.addTerm(1.0,pp.flowRoot[s][i]);
      for (int c=0; c < sent.size(); c++) {
        if (i == c) {
          continue;
        }
        expr.addTerm(-1.0,pp.flowChild[s][i][c]);
      }
      pp.flowDiff[s][i]=cplex.eq(expr,1.0,""String_Node_Str"");
    }
  }
  pp.flowBoundRoot=new IloRange[corpus.size()][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.flowBoundRoot[s]=new IloRange[sent.size()];
    for (int c=0; c < sent.size(); c++) {
      IloLinearNumExpr expr=cplex.linearNumExpr();
      expr.addTerm(1.0,pp.flowRoot[s][c]);
      expr.addTerm(-sent.size(),pp.arcRoot[s][c]);
      pp.flowBoundRoot[s][c]=cplex.le(expr,0.0,""String_Node_Str"");
    }
  }
  pp.flowBoundChild=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.flowBoundChild[s]=new IloRange[sent.size()][sent.size()];
    for (int c=0; c < sent.size(); c++) {
      for (int p=0; p < sent.size(); p++) {
        if (p == c) {
          continue;
        }
        IloLinearNumExpr expr=cplex.linearNumExpr();
        expr.addTerm(1.0,pp.flowChild[s][p][c]);
        expr.addTerm(-sent.size(),pp.arcChild[s][p][c]);
        pp.flowBoundChild[s][p][c]=cplex.le(expr,0.0,""String_Node_Str"");
      }
    }
  }
  if (formulation == IlpFormulation.FLOW_PROJ_LPRELAX) {
    pp.projectiveRoot=new IloRange[corpus.size()][];
    for (int s=0; s < corpus.size(); s++) {
      Sentence sent=corpus.getSentence(s);
      pp.projectiveRoot[s]=new IloRange[sent.size()];
      for (int c=0; c < sent.size(); c++) {
        int p=-1;
        IloLinearNumExpr expr=cplex.linearNumExpr();
        for (int k=Math.min(p,c) + 1; k < Math.max(p,c); k++) {
          for (int l=0; l < sent.size(); l++) {
            if (l >= Math.min(p,c) && l <= Math.max(p,c)) {
              continue;
            }
            expr.addTerm(1.0,pp.arcChild[s][k][l]);
            expr.addTerm(1.0,pp.arcChild[s][l][k]);
          }
        }
        expr.addTerm(sent.size(),pp.arcRoot[s][c]);
        pp.projectiveRoot[s][c]=cplex.le(expr,sent.size(),""String_Node_Str"");
      }
    }
    pp.projectiveChild=new IloRange[corpus.size()][][];
    for (int s=0; s < corpus.size(); s++) {
      Sentence sent=corpus.getSentence(s);
      pp.projectiveChild[s]=new IloRange[sent.size()][sent.size()];
      for (int c=0; c < sent.size(); c++) {
        for (int p=0; p < sent.size(); p++) {
          if (c == p) {
            continue;
          }
          IloLinearNumExpr expr=cplex.linearNumExpr();
          for (int k=Math.min(p,c) + 1; k < Math.max(p,c); k++) {
            for (int l=0; l < sent.size(); l++) {
              if (l >= Math.min(p,c) && l <= Math.max(p,c)) {
                continue;
              }
              expr.addTerm(1.0,pp.arcChild[s][k][l]);
              expr.addTerm(1.0,pp.arcChild[s][l][k]);
            }
          }
          expr.addTerm(sent.size(),pp.arcChild[s][p][c]);
          pp.projectiveChild[s][p][c]=cplex.le(expr,sent.size(),""String_Node_Str"");
        }
      }
    }
  }
  pp.numToSideCons=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.numToSideCons[s]=new IloRange[sent.size()][2];
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        if (side == DmvModel.Lr.LEFT.getAsInt()) {
          for (int c=0; c < p; c++) {
            expr.addTerm(1.0,pp.arcChild[s][p][c]);
          }
        }
 else {
          for (int c=p + 1; c < sent.size(); c++) {
            expr.addTerm(1.0,pp.arcChild[s][p][c]);
          }
        }
        expr.addTerm(-1.0,pp.numToSide[s][p][side]);
        pp.numToSideCons[s][p][side]=cplex.eq(expr,0.0,""String_Node_Str"");
      }
    }
  }
  pp.genAdjCons=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.genAdjCons[s]=new IloRange[sent.size()][2];
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        expr.addTerm(-1.0,pp.genAdj[s][p][side]);
        expr.addTerm(1.0 / sent.size(),pp.numToSide[s][p][side]);
        pp.genAdjCons[s][p][side]=cplex.le(expr,0.0,""String_Node_Str"");
      }
    }
  }
  pp.numNonAdjCons=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.numNonAdjCons[s]=new IloRange[sent.size()][2];
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        expr.addTerm(1.0,pp.numToSide[s][p][side]);
        expr.addTerm(-1.0,pp.genAdj[s][p][side]);
        expr.addTerm(-1.0,pp.numNonAdj[s][p][side]);
        pp.numNonAdjCons[s][p][side]=cplex.eq(expr,0.0,""String_Node_Str"");
      }
    }
  }
  pp.stopAdjCons=new IloRange[corpus.size()][][];
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    pp.stopAdjCons[s]=new IloRange[sent.size()][2];
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        IloLinearNumExpr expr=cplex.linearNumExpr();
        expr.addTerm(1.0,pp.genAdj[s][p][side]);
        expr.addTerm(1.0,pp.stopAdj[s][p][side]);
        pp.stopAdjCons[s][p][side]=cplex.eq(expr,1.0,""String_Node_Str"");
      }
    }
  }
  pp.mat=cplex.LPMatrix();
  pp.mat.addRows(pp.oneArcPerWall);
  CplexUtils.addRows(pp.mat,pp.oneParent);
  pp.mat.addRows(pp.rootFlowIsSentLength);
  CplexUtils.addRows(pp.mat,pp.flowDiff);
  CplexUtils.addRows(pp.mat,pp.flowBoundRoot);
  CplexUtils.addRows(pp.mat,pp.flowBoundChild);
  if (formulation == IlpFormulation.FLOW_PROJ_LPRELAX) {
    CplexUtils.addRows(pp.mat,pp.projectiveRoot);
    CplexUtils.addRows(pp.mat,pp.projectiveChild);
  }
  CplexUtils.addRows(pp.mat,pp.numToSideCons);
  CplexUtils.addRows(pp.mat,pp.genAdjCons);
  CplexUtils.addRows(pp.mat,pp.numNonAdjCons);
  CplexUtils.addRows(pp.mat,pp.stopAdjCons);
  pp.obj=cplex.maximize();
  IloLinearNumExpr expr=cplex.linearNumExpr();
  for (int s=0; s < corpus.size(); s++) {
    Sentence sent=corpus.getSentence(s);
    DepSentenceDist sd=new DepSentenceDist(sent,model);
    for (int c=0; c < sent.size(); c++) {
      expr.addTerm(sd.root[c],pp.arcRoot[s][c]);
      for (int p=0; p < sent.size(); p++) {
        if (p == c) {
          continue;
        }
        expr.addTerm(sd.child[c][p][0],pp.arcChild[s][p][c]);
      }
    }
    for (int p=0; p < sent.size(); p++) {
      for (int side=0; side < 2; side++) {
        expr.addTerm(sd.decision[p][side][0][0],pp.stopAdj[s][p][side]);
        expr.addTerm(sd.decision[p][side][0][1] + sd.decision[p][side][1][0],pp.genAdj[s][p][side]);
        expr.addTerm(sd.decision[p][side][1][1],pp.numNonAdj[s][p][side]);
      }
    }
  }
  pp.obj.setExpr(expr);
  return pp;
}",0.882522942757187
131719,"@Override protected void evalIncumbent(Solution incumbentSolution,double incumbentScore){
  if (evaluator != null && incumbentSolution != null) {
    log.info(""String_Node_Str"" + incumbentScore);
    DmvSolution sol=(DmvSolution)incumbentSolution;
    log.info(""String_Node_Str"" + evaluator.evaluate(sol.getTreebank()));
  }
}","@Override protected void evalIncumbent(Solution incumbentSolution){
  if (evaluator != null && incumbentSolution != null) {
    DmvSolution sol=(DmvSolution)incumbentSolution;
    log.info(""String_Node_Str"" + sol.getScore());
    log.info(""String_Node_Str"" + evaluator.evaluate(sol.getTreebank()));
  }
}",0.7619047619047619
131720,"public SearchStatus runBranchAndBound(ProblemNode rootNode,Solution initialSolution,double initialScore){
  this.incumbentSolution=initialSolution;
  this.incumbentScore=initialScore;
  double upperBound=BEST_SCORE;
  status=SearchStatus.NON_OPTIMAL_SOLUTION_FOUND;
  leafNodePQ=new PriorityQueue<ProblemNode>(11,leafComparator);
  upperBoundPQ=new PriorityQueue<ProblemNode>(11,new BfsComparator());
  int numProcessed=0;
  FathomStats fathom=new FathomStats();
  addToLeafNodes(rootNode);
  double rootLogSpace=rootNode.getLogSpace();
  double logSpaceRemain=rootLogSpace;
  ProblemNode curNode=null;
  evalIncumbent(initialSolution,logSpaceRemain);
  while (hasNextLeafNode()) {
    if (nodeTimer.isRunning()) {
      nodeTimer.stop();
    }
    nodeTimer.start();
    switchTimer.start();
    if (upperBoundPQ.peek().getOptimisticBound() > upperBound + 1e-8) {
      log.warn(String.format(""String_Node_Str"",upperBoundPQ.peek().getOptimisticBound(),upperBound));
    }
    upperBound=upperBoundPQ.peek().getOptimisticBound();
    assert(!Double.isNaN(upperBound));
    curNode=getNextLeafNode();
    numProcessed++;
    double relativeDiff=computeRelativeDiff(upperBound,incumbentScore);
    printSummary(upperBound,relativeDiff,numProcessed,fathom);
    if (log.isDebugEnabled() && numProcessed % 100 == 0) {
      printLeafNodeBoundHistogram();
      printTimers(numProcessed);
      printSpaceRemaining(numProcessed,rootLogSpace,logSpaceRemain);
    }
    curNode.setAsActiveNode();
    switchTimer.stop();
    if (relativeDiff <= epsilon) {
      break;
    }
 else     if (Time.totSec(nodeTimer) > timeoutSeconds) {
      break;
    }
    log.info(String.format(""String_Node_Str"",curNode.getId(),curNode.getDepth(),curNode.getSide()));
    relaxTimer.start();
    double curNodeLowerBound=curNode.getOptimisticBound(incumbentScore);
    RelaxedSolution relax=curNode.getRelaxedSolution();
    relaxTimer.stop();
    if (curNodeLowerBound <= incumbentScore) {
      if (relax.getStatus() == RelaxStatus.Infeasible) {
        fathom.fathom(curNode,FathomStatus.Infeasible);
      }
 else       if (relax.getStatus() == RelaxStatus.Pruned) {
        fathom.fathom(curNode,FathomStatus.Pruned);
      }
 else {
        log.warn(""String_Node_Str"" + relax.getStatus());
      }
      logSpaceRemain=Utilities.logSubtractExact(logSpaceRemain,curNode.getLogSpace());
      continue;
    }
    feasTimer.start();
    Solution sol=curNode.getFeasibleSolution();
    assert(sol == null || !Double.isNaN(sol.getScore()));
    if (sol != null && sol.getScore() > incumbentScore) {
      incumbentScore=sol.getScore();
      incumbentSolution=sol;
      evalIncumbent(incumbentSolution,incumbentScore);
    }
    feasTimer.stop();
    if (Utilities.equals(sol.getScore(),relax.getScore(),1e-13)) {
      fathom.fathom(curNode,FathomStatus.CompletelySolved);
      logSpaceRemain=Utilities.logSubtractExact(logSpaceRemain,curNode.getLogSpace());
      continue;
    }
    branchTimer.start();
    List<ProblemNode> children=curNode.branch();
    if (children.size() == 0) {
      fathom.fathom(curNode,FathomStatus.BottomedOut);
      logSpaceRemain=Utilities.logSubtractExact(logSpaceRemain,curNode.getLogSpace());
    }
    for (    ProblemNode childNode : children) {
      addToLeafNodes(childNode);
    }
    branchTimer.stop();
  }
  evalIncumbent(incumbentSolution,incumbentScore);
  double relativeDiff=computeRelativeDiff(upperBound,incumbentScore);
  if (relativeDiff <= epsilon) {
    status=SearchStatus.OPTIMAL_SOLUTION_FOUND;
  }
  printSummary(upperBound,relativeDiff,numProcessed,fathom);
  leafNodePQ=null;
  log.info(""String_Node_Str"" + status);
  return status;
}","public SearchStatus runBranchAndBound(ProblemNode rootNode,Solution initialSolution,double initialScore){
  this.incumbentSolution=initialSolution;
  this.incumbentScore=initialScore;
  double upperBound=BEST_SCORE;
  status=SearchStatus.NON_OPTIMAL_SOLUTION_FOUND;
  leafNodePQ=new PriorityQueue<ProblemNode>(11,leafComparator);
  upperBoundPQ=new PriorityQueue<ProblemNode>(11,new BfsComparator());
  int numProcessed=0;
  FathomStats fathom=new FathomStats();
  addToLeafNodes(rootNode);
  double rootLogSpace=rootNode.getLogSpace();
  double logSpaceRemain=rootLogSpace;
  ProblemNode curNode=null;
  evalIncumbent(initialSolution);
  while (hasNextLeafNode()) {
    if (nodeTimer.isRunning()) {
      nodeTimer.stop();
    }
    nodeTimer.start();
    switchTimer.start();
    if (upperBoundPQ.peek().getOptimisticBound() > upperBound + 1e-8) {
      log.warn(String.format(""String_Node_Str"",upperBoundPQ.peek().getOptimisticBound(),upperBound));
    }
    upperBound=upperBoundPQ.peek().getOptimisticBound();
    assert(!Double.isNaN(upperBound));
    curNode=getNextLeafNode();
    numProcessed++;
    double relativeDiff=computeRelativeDiff(upperBound,incumbentScore);
    printSummary(upperBound,relativeDiff,numProcessed,fathom);
    if (log.isDebugEnabled() && numProcessed % 100 == 0) {
      printLeafNodeBoundHistogram();
      printTimers(numProcessed);
      printSpaceRemaining(numProcessed,rootLogSpace,logSpaceRemain);
    }
    curNode.setAsActiveNode();
    switchTimer.stop();
    if (relativeDiff <= epsilon) {
      break;
    }
 else     if (Time.totSec(nodeTimer) > timeoutSeconds) {
      break;
    }
    log.info(String.format(""String_Node_Str"",curNode.getId(),curNode.getDepth(),curNode.getSide()));
    relaxTimer.start();
    double curNodeLowerBound=curNode.getOptimisticBound(incumbentScore);
    RelaxedSolution relax=curNode.getRelaxedSolution();
    relaxTimer.stop();
    if (curNodeLowerBound <= incumbentScore) {
      if (relax.getStatus() == RelaxStatus.Infeasible) {
        fathom.fathom(curNode,FathomStatus.Infeasible);
      }
 else       if (relax.getStatus() == RelaxStatus.Pruned) {
        fathom.fathom(curNode,FathomStatus.Pruned);
      }
 else {
        log.warn(""String_Node_Str"" + relax.getStatus());
      }
      logSpaceRemain=Utilities.logSubtractExact(logSpaceRemain,curNode.getLogSpace());
      continue;
    }
    feasTimer.start();
    Solution sol=curNode.getFeasibleSolution();
    assert(sol == null || !Double.isNaN(sol.getScore()));
    if (sol != null && sol.getScore() > incumbentScore) {
      incumbentScore=sol.getScore();
      incumbentSolution=sol;
      evalIncumbent(incumbentSolution);
    }
    feasTimer.stop();
    if (Utilities.equals(sol.getScore(),relax.getScore(),1e-13)) {
      fathom.fathom(curNode,FathomStatus.CompletelySolved);
      logSpaceRemain=Utilities.logSubtractExact(logSpaceRemain,curNode.getLogSpace());
      continue;
    }
    branchTimer.start();
    List<ProblemNode> children=curNode.branch();
    if (children.size() == 0) {
      fathom.fathom(curNode,FathomStatus.BottomedOut);
      logSpaceRemain=Utilities.logSubtractExact(logSpaceRemain,curNode.getLogSpace());
    }
    for (    ProblemNode childNode : children) {
      addToLeafNodes(childNode);
    }
    branchTimer.stop();
  }
  evalIncumbent(incumbentSolution);
  double relativeDiff=computeRelativeDiff(upperBound,incumbentScore);
  if (relativeDiff <= epsilon) {
    status=SearchStatus.OPTIMAL_SOLUTION_FOUND;
  }
  printSummary(upperBound,relativeDiff,numProcessed,fathom);
  leafNodePQ=null;
  log.info(""String_Node_Str"" + status);
  return status;
}",0.9938415218283836
131721,"/** 
 * Override this method.
 */
protected void evalIncumbent(Solution incumbentSolution,double incumbentScore){
  return;
}","/** 
 * Override this method.
 */
protected void evalIncumbent(Solution incumbentSolution){
  return;
}",0.9035087719298246
131722,"@Override public VariableId select(DmvProblemNode node){
  VariableId regretVarId=regretFactory.select(node);
  IndexedDmvModel idm=node.getIdm();
  DmvBounds origBounds=node.getBounds();
  double parentBound=node.getOptimisticBound();
  double maxScore=EPSILON * EPSILON;
  int maxC=-1;
  int maxM=-1;
  for (int c=0; c < idm.getNumConds(); c++) {
    for (int m=0; m < idm.getNumParams(c); m++) {
      if (!origBounds.canBranch(c,m)) {
        continue;
      }
      node.setAsActiveNode();
      List<DmvBoundsDelta> deltas=varSplitter.split(origBounds,new VariableId(c,m));
      List<ProblemNode> children=node.branch(deltas);
      assert(children.size() == 2);
      DmvProblemNode child1=(DmvProblemNode)children.get(0);
      child1.setAsActiveNode();
      double c1Bound=child1.getOptimisticBound();
      DmvProblemNode child2=(DmvProblemNode)children.get(0);
      child2.setAsActiveNode();
      double c2Bound=child2.getOptimisticBound();
      double c1Delta=parentBound - c1Bound;
      double c2Delta=parentBound - c2Bound;
      double score=Math.max(c1Delta,EPSILON) * Math.max(c2Delta,EPSILON);
      if (score > maxScore) {
        maxScore=score;
        maxC=c;
        maxM=m;
      }
      String name=idm.getName(c,m);
      log.trace(String.format(""String_Node_Str"",c,m,name,score));
    }
  }
  node.setAsActiveNode();
  if (maxC == -1 || maxM == -1) {
    return regretVarId;
  }
  String name=idm.getName(maxC,maxM);
  log.info(String.format(""String_Node_Str"",maxC,maxM,name,maxScore));
  return new VariableId(maxC,maxM);
}","@Override public VariableId select(DmvProblemNode node){
  VariableId regretVarId=regretFactory.select(node);
  IndexedDmvModel idm=node.getIdm();
  DmvBounds origBounds=node.getBounds();
  double maxScore=EPSILON * EPSILON;
  int maxC=-1;
  int maxM=-1;
  for (int c=0; c < idm.getNumConds(); c++) {
    for (int m=0; m < idm.getNumParams(c); m++) {
      if (!origBounds.canBranch(c,m)) {
        continue;
      }
      double score=getStrongScore(node,c,m);
      if (score > maxScore) {
        maxScore=score;
        maxC=c;
        maxM=m;
      }
    }
  }
  if (maxC == -1 || maxM == -1) {
    return regretVarId;
  }
  String name=idm.getName(maxC,maxM);
  log.info(String.format(""String_Node_Str"",maxC,maxM,name,maxScore));
  return new VariableId(maxC,maxM);
}",0.3948497854077253
131723,"@Test public void testQualityOfRelaxation() throws IOException {
  DmvModel goldModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(goldModel,Prng.nextInt(1000000));
  DepTreebank goldTreebank=generator.getTreebank(100);
  System.out.println(goldTreebank);
  System.out.println(goldModel);
  SentenceCollection sentences=goldTreebank.getSentences();
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences,100);
  IndexedDmvModel idm=dw.getIdm();
  double[][] goldLogProbs=idm.getCmLogProbs(DmvModelConverter.getDepProbMatrix(goldModel,sentences.getLabelAlphabet()));
  DmvSolution goldSol=new DmvSolution(goldLogProbs,idm,goldTreebank,dw.computeTrueObjective(goldLogProbs,goldTreebank));
  InitSol opt=InitSol.GOLD;
  DmvSolution initSol;
  if (opt == InitSol.VITERBI_EM) {
    initSol=getInitFeasSol(sentences);
  }
 else   if (opt == InitSol.GOLD) {
    initSol=goldSol;
  }
 else   if (opt == InitSol.RANDOM || opt == InitSol.UNIFORM) {
    DmvWeightGenerator weightGen;
    if (opt == InitSol.RANDOM) {
      Prng.seed(System.currentTimeMillis());
      weightGen=new DmvRandomWeightGenerator(0.00001);
    }
 else {
      weightGen=new DmvUniformWeightGenerator();
    }
    DmvModelFactory modelFactory=new DmvModelFactory(weightGen);
    DmvModel randModel=(DmvModel)modelFactory.getInstance(sentences);
    double[][] logProbs=idm.getCmLogProbs(DmvModelConverter.getDepProbMatrix(randModel,sentences.getLabelAlphabet()));
    ViterbiParser parser=new DmvCkyParser();
    DepTreebank treebank=parser.getViterbiParse(sentences,randModel);
    initSol=new DmvSolution(logProbs,idm,treebank,dw.computeTrueObjective(logProbs,treebank));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + opt);
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + goldSol.getScore() + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + initSol.getScore());
  sb.append(""String_Node_Str"");
  RDataFrame df=new RDataFrame();
  Stopwatch timer=new Stopwatch();
  for (double offsetProb=10e-7; offsetProb <= 1.001; offsetProb+=0.05) {
    for (double probOfSkipCm=0.0; probOfSkipCm <= 0.2; probOfSkipCm+=0.1) {
      int numTimes=1;
      double avgScore=0.0;
      for (int i=0; i < numTimes; i++) {
        timer.start();
        setBoundsFromInitSol(dw,initSol,offsetProb,probOfSkipCm);
        RelaxedDmvSolution relaxSol=dw.solveRelaxation();
        avgScore+=relaxSol.getScore();
        timer.stop();
        System.out.println(""String_Node_Str"" + Time.avgMs(timer) * (numTimes * 0.5 / 0.01 * 1.0 / 0.1 - i * offsetProb / 0.01 * probOfSkipCm / 0.1) / 1000);
      }
      avgScore/=(double)numTimes;
      RRow row=new RRow();
      row.put(""String_Node_Str"",offsetProb);
      row.put(""String_Node_Str"",probOfSkipCm * 100);
      row.put(""String_Node_Str"",avgScore);
      row.put(""String_Node_Str"",Math.abs(avgScore - initSol.getScore()) / Math.abs(initSol.getScore()));
      row.put(""String_Node_Str"",containsInitSol(dw.getBounds(),goldSol.getLogProbs()));
      df.add(row);
    }
  }
  System.out.println(df);
  System.out.println(sb);
  System.out.println(""String_Node_Str"" + Time.totMs(timer) / df.getNumRows());
  FileWriter writer=new FileWriter(""String_Node_Str"");
  df.write(writer);
  writer.close();
}","@Test public void testQualityOfRelaxation() throws IOException {
  DmvModel goldModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(goldModel,Prng.nextInt(1000000));
  DepTreebank goldTreebank=generator.getTreebank(100);
  System.out.println(goldTreebank);
  System.out.println(goldModel);
  SentenceCollection sentences=goldTreebank.getSentences();
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences,100);
  IndexedDmvModel idm=dw.getIdm();
  double[][] goldLogProbs=idm.getCmLogProbs(DmvModelConverter.getDepProbMatrix(goldModel,sentences.getLabelAlphabet()));
  DmvSolution goldSol=new DmvSolution(goldLogProbs,idm,goldTreebank,dw.computeTrueObjective(goldLogProbs,goldTreebank));
  InitSol opt=InitSol.GOLD;
  DmvSolution initSol;
  if (opt == InitSol.VITERBI_EM) {
    initSol=getInitFeasSol(sentences);
  }
 else   if (opt == InitSol.GOLD) {
    initSol=goldSol;
  }
 else   if (opt == InitSol.RANDOM || opt == InitSol.UNIFORM) {
    DmvWeightGenerator weightGen;
    if (opt == InitSol.RANDOM) {
      Prng.seed(System.currentTimeMillis());
      weightGen=new DmvRandomWeightGenerator(0.00001);
    }
 else {
      weightGen=new DmvUniformWeightGenerator();
    }
    DmvModelFactory modelFactory=new DmvModelFactory(weightGen);
    DmvModel randModel=(DmvModel)modelFactory.getInstance(sentences);
    double[][] logProbs=idm.getCmLogProbs(DmvModelConverter.getDepProbMatrix(randModel,sentences.getLabelAlphabet()));
    ViterbiParser parser=new DmvCkyParser();
    DepTreebank treebank=parser.getViterbiParse(sentences,randModel);
    initSol=new DmvSolution(logProbs,idm,treebank,dw.computeTrueObjective(logProbs,treebank));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + opt);
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + goldSol.getScore() + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + initSol.getScore());
  sb.append(""String_Node_Str"");
  RDataFrame df=new RDataFrame();
  Stopwatch timer=new Stopwatch();
  for (double offsetProb=10e-7; offsetProb <= 1.001; offsetProb+=0.05) {
    for (double probOfSkipCm=0.0; probOfSkipCm <= 0.2; probOfSkipCm+=0.1) {
      int numTimes=1;
      double avgScore=0.0;
      for (int i=0; i < numTimes; i++) {
        timer.start();
        LocalBnBDmvTrainer.setBoundsFromInitSol(dw,initSol,offsetProb,probOfSkipCm);
        RelaxedDmvSolution relaxSol=dw.solveRelaxation();
        avgScore+=relaxSol.getScore();
        timer.stop();
        System.out.println(""String_Node_Str"" + Time.avgMs(timer) * (numTimes * 0.5 / 0.01 * 1.0 / 0.1 - i * offsetProb / 0.01 * probOfSkipCm / 0.1) / 1000);
      }
      avgScore/=(double)numTimes;
      RRow row=new RRow();
      row.put(""String_Node_Str"",offsetProb);
      row.put(""String_Node_Str"",probOfSkipCm * 100);
      row.put(""String_Node_Str"",avgScore);
      row.put(""String_Node_Str"",Math.abs(avgScore - initSol.getScore()) / Math.abs(initSol.getScore()));
      row.put(""String_Node_Str"",containsInitSol(dw.getBounds(),goldSol.getLogProbs()));
      df.add(row);
    }
  }
  System.out.println(df);
  System.out.println(sb);
  System.out.println(""String_Node_Str"" + Time.totMs(timer) / df.getNumRows());
  FileWriter writer=new FileWriter(""String_Node_Str"");
  df.write(writer);
  writer.close();
}",0.9971338060039222
131724,"public static void setBoundsFromInitSol(DmvRelaxation dw,DmvSolution initSol,double offsetProb,double probOfSkipCm){
  boolean forward=true;
  double offsetLogProb=Utilities.log(offsetProb);
  double[][] logProbs=initSol.getLogProbs();
  for (int c=0; c < dw.getIdm().getNumConds(); c++) {
    for (int m=0; m < dw.getIdm().getNumParams(c); m++) {
      double newL, newU;
      DmvBounds origBounds=dw.getBounds();
      double lb=origBounds.getLb(c,m);
      double ub=origBounds.getUb(c,m);
      if (Prng.nextDouble() < probOfSkipCm) {
        newL=DmvBounds.DEFAULT_LOWER_BOUND;
        newU=DmvBounds.DEFAULT_UPPER_BOUND;
      }
 else {
        newU=Utilities.logAdd(logProbs[c][m],offsetLogProb);
        if (newU > DmvBounds.DEFAULT_UPPER_BOUND) {
          newU=DmvBounds.DEFAULT_UPPER_BOUND;
        }
        if (logProbs[c][m] > offsetLogProb) {
          newL=Utilities.logSubtract(logProbs[c][m],offsetLogProb);
        }
 else {
          newL=DmvBounds.DEFAULT_LOWER_BOUND;
        }
      }
      double deltU=newU - ub;
      double deltL=newL - lb;
      DmvBoundsDelta deltas1=new DmvBoundsDelta(c,m,Lu.UPPER,deltU);
      DmvBoundsDelta deltas2=new DmvBoundsDelta(c,m,Lu.LOWER,deltL);
      if (forward) {
        dw.forwardApply(deltas1);
        dw.forwardApply(deltas2);
      }
 else {
        dw.reverseApply(deltas1);
        dw.reverseApply(deltas2);
      }
      System.out.println(""String_Node_Str"" + dw.getBounds().getLb(c,m) + ""String_Node_Str""+ dw.getBounds().getUb(c,m));
    }
  }
}","public static void setBoundsFromInitSol(DmvRelaxation dw,DmvSolution initSol,double offsetProb,double probOfSkipCm){
  boolean forward=true;
  double offsetLogProb=Utilities.log(offsetProb);
  double[][] logProbs=initSol.getLogProbs();
  for (int c=0; c < dw.getIdm().getNumConds(); c++) {
    for (int m=0; m < dw.getIdm().getNumParams(c); m++) {
      double newL, newU;
      DmvBounds origBounds=dw.getBounds();
      double lb=origBounds.getLb(c,m);
      double ub=origBounds.getUb(c,m);
      if (Prng.nextDouble() < probOfSkipCm) {
        newL=DmvBounds.DEFAULT_LOWER_BOUND;
        newU=DmvBounds.DEFAULT_UPPER_BOUND;
      }
 else {
        newU=Utilities.logAdd(logProbs[c][m],offsetLogProb);
        if (newU > DmvBounds.DEFAULT_UPPER_BOUND) {
          newU=DmvBounds.DEFAULT_UPPER_BOUND;
        }
        if (logProbs[c][m] > offsetLogProb) {
          newL=Utilities.logSubtract(logProbs[c][m],offsetLogProb);
        }
 else {
          newL=DmvBounds.DEFAULT_LOWER_BOUND;
        }
      }
      double deltU=newU - ub;
      double deltL=newL - lb;
      DmvBoundsDelta deltas1=new DmvBoundsDelta(c,m,Lu.UPPER,deltU);
      DmvBoundsDelta deltas2=new DmvBoundsDelta(c,m,Lu.LOWER,deltL);
      if (forward) {
        if (lb <= newU) {
          dw.forwardApply(deltas1);
          dw.forwardApply(deltas2);
        }
 else {
          dw.forwardApply(deltas2);
          dw.forwardApply(deltas1);
        }
      }
 else {
        dw.reverseApply(deltas1);
        dw.reverseApply(deltas2);
      }
      System.out.println(""String_Node_Str"" + dw.getBounds().getLb(c,m) + ""String_Node_Str""+ dw.getBounds().getUb(c,m));
    }
  }
}",0.9589646464646464
131725,"private void addSetContraints(int setSize,int c) throws IloException {
  double[] ones=new double[setSize];
  Arrays.fill(ones,1.0);
  int numParams=idm.getNumParams(c);
  int counter=0;
  for (  int[] paramIndices : Sets.getSets(setSize,numParams)) {
    assert(paramIndices.length == setSize);
    IloNumVar[] paramVars=new IloNumVar[setSize];
    for (int i=0; i < setSize; i++) {
      int m=paramIndices[i];
      paramVars[i]=mp.modelParamVars[c][m];
    }
    IloLinearNumExpr vectorExpr=cplex.scalProd(ones,paramVars);
    IloRange constraint=cplex.le(vectorExpr,1.0,String.format(""String_Node_Str"",c,counter++));
    mp.lpMatrix.addRow(constraint);
  }
}","private void addSetContraints(int setSize,int c) throws IloException {
  double[] ones=new double[setSize];
  Arrays.fill(ones,1.0);
  int numParams=idm.getNumParams(c);
  int counter=0;
  setSize=Math.min(setSize,numParams);
  for (  int[] paramIndices : Sets.getSets(setSize,numParams)) {
    assert(paramIndices.length == setSize);
    IloNumVar[] paramVars=new IloNumVar[setSize];
    for (int i=0; i < setSize; i++) {
      int m=paramIndices[i];
      paramVars[i]=mp.modelParamVars[c][m];
    }
    IloLinearNumExpr vectorExpr=cplex.scalProd(ones,paramVars);
    IloRange constraint=cplex.le(vectorExpr,1.0,String.format(""String_Node_Str"",c,counter++));
    mp.lpMatrix.addRow(constraint);
  }
}",0.9714285714285714
131726,"public static List<int[]> getSets(int setSize,int numParams){
  List<HashSet<Integer>> hss=getSetsHelper(setSize,numParams);
  List<int[]> sets=new ArrayList<int[]>(hss.size());
  for (  HashSet<Integer> set : hss) {
    sets.add(asArray(set));
  }
  return sets;
}","public static List<int[]> getSets(int setSize,int numParams){
  if (setSize > numParams) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<HashSet<Integer>> hss=getSetsHelper(setSize,numParams);
  List<int[]> sets=new ArrayList<int[]>(hss.size());
  for (  HashSet<Integer> set : hss) {
    sets.add(asArray(set));
  }
  return sets;
}",0.8520900321543409
131727,"public Pair<RelaxStatus,Double> runDWAlgo(IloCplex cplex,MasterProblem mp,double upperBound) throws UnknownObjectException, IloException {
  if (!areFeasibleBounds(bounds)) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  DmvCkyParser parser=new DmvCkyParser();
  double lowerBound=INTERNAL_BEST_SCORE;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  WarmStart warmStart=null;
  int cut;
  int dwIter;
  for (dwIter=0, cut=0; ; dwIter++) {
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    warmStart=getWarmStart();
    status=RelaxStatus.get(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
      return new Pair<RelaxStatus,Double>(status,lowerBound);
    }
    if (dwIter >= maxDwIterations) {
      break;
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
    }
    iterationObjVals.add(objVal);
    double[] pricesLower=cplex.getDuals(mp.lpMatrix,0,idm.getNumTotalParams());
    double[] pricesUpper=cplex.getDuals(mp.lpMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
    int numConds=idm.getNumConds();
    double[][] parseWeights=new double[numConds][];
    int j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      parseWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        parseWeights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
        j++;
      }
    }
    DepProbMatrix dpm=idm.getDepProbMatrix(parseWeights);
    double[] convexLambdaPrices=cplex.getDuals(mp.lambdaSumCons);
    double sumReducedCost=0.0;
    int numPositiveLambdaRedCosts=0;
    for (int s=0; s < sentences.size(); s++) {
      parsingTimer.start();
      Pair<DepTree,Double> pPair=parser.parse(sentences.get(s),dpm);
      parsingTimer.stop();
      DepTree tree=pPair.get1();
      double pReducedCost=-pPair.get2() - convexLambdaPrices[s];
      if (pReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
        if (addLambdaVar(s,tree)) {
          numPositiveLambdaRedCosts++;
        }
 else {
          log.warn(String.format(""String_Node_Str"",pReducedCost,s,tree.getParents().toString()));
        }
      }
      sumReducedCost+=pReducedCost;
    }
    lowerBound=objVal + sumReducedCost;
    iterationLowerBounds.add(lowerBound);
    if (numPositiveLambdaRedCosts > 0 && sumReducedCost > 1e-6) {
      log.warn(""String_Node_Str"" + sumReducedCost);
    }
    if (lowerBound >= upperBound) {
      break;
    }
 else     if (numPositiveLambdaRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      status=RelaxStatus.Optimal;
      if (cut < maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
        iterationObjVals.clear();
        double[][] params=new double[idm.getNumConds()][];
        for (int c=0; c < idm.getNumConds(); c++) {
          params[c]=cplex.getValues(mp.modelParamVars[c]);
        }
        int numNewStoConstraints=0;
        for (int c=0; c < idm.getNumConds(); c++) {
          Vectors.exp(params[c]);
          if (Vectors.sum(params[c]) > minSumForCuts) {
            numNewStoConstraints++;
            addSumToOneConstraint(c,params[c]);
          }
        }
        if (numNewStoConstraints == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        log.debug(""String_Node_Str"" + numNewStoConstraints + ""String_Node_Str""+ cut);
        cut++;
      }
 else {
        break;
      }
    }
 else {
      log.debug(""String_Node_Str"" + numPositiveLambdaRedCosts + ""String_Node_Str"");
    }
  }
  lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer));
  log.debug(""String_Node_Str"" + Time.totMs(parsingTimer));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}","public Pair<RelaxStatus,Double> runDWAlgo(IloCplex cplex,MasterProblem mp,double upperBound) throws UnknownObjectException, IloException {
  if (!areFeasibleBounds(bounds)) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  DmvCkyParser parser=new DmvCkyParser();
  double lowerBound=INTERNAL_BEST_SCORE;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  WarmStart warmStart=null;
  int cut;
  int dwIter;
  for (dwIter=0, cut=0; ; dwIter++) {
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    warmStart=getWarmStart();
    status=RelaxStatus.get(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
      return new Pair<RelaxStatus,Double>(status,lowerBound);
    }
    if (dwIter >= maxDwIterations) {
      break;
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
    }
    iterationObjVals.add(objVal);
    double[] pricesLower=cplex.getDuals(mp.lpMatrix,0,idm.getNumTotalParams());
    double[] pricesUpper=cplex.getDuals(mp.lpMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
    int numConds=idm.getNumConds();
    double[][] parseWeights=new double[numConds][];
    int j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      parseWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        parseWeights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
        j++;
      }
    }
    DepProbMatrix dpm=idm.getDepProbMatrix(parseWeights);
    double[] convexLambdaPrices=cplex.getDuals(mp.lambdaSumCons);
    double sumReducedCost=0.0;
    int numPositiveLambdaRedCosts=0;
    for (int s=0; s < sentences.size(); s++) {
      parsingTimer.start();
      Pair<DepTree,Double> pPair=parser.parse(sentences.get(s),dpm);
      parsingTimer.stop();
      DepTree tree=pPair.get1();
      double pReducedCost=-pPair.get2() - convexLambdaPrices[s];
      if (pReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
        if (addLambdaVar(s,tree)) {
          numPositiveLambdaRedCosts++;
        }
 else {
          log.warn(String.format(""String_Node_Str"",pReducedCost,s,tree.getParents().toString()));
        }
      }
      sumReducedCost+=pReducedCost;
    }
    lowerBound=objVal + sumReducedCost;
    iterationLowerBounds.add(lowerBound);
    if (numPositiveLambdaRedCosts > 0 && sumReducedCost > 1e-6) {
      log.warn(""String_Node_Str"" + sumReducedCost);
    }
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Fathomed;
      break;
    }
 else     if (numPositiveLambdaRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      status=RelaxStatus.Optimal;
      if (cut < maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
        iterationObjVals.clear();
        double[][] params=new double[idm.getNumConds()][];
        for (int c=0; c < idm.getNumConds(); c++) {
          params[c]=cplex.getValues(mp.modelParamVars[c]);
        }
        int numNewStoConstraints=0;
        for (int c=0; c < idm.getNumConds(); c++) {
          Vectors.exp(params[c]);
          if (Vectors.sum(params[c]) > minSumForCuts) {
            numNewStoConstraints++;
            addSumToOneConstraint(c,params[c]);
          }
        }
        if (numNewStoConstraints == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        log.debug(""String_Node_Str"" + numNewStoConstraints + ""String_Node_Str""+ cut);
        cut++;
      }
 else {
        break;
      }
    }
 else {
      log.debug(""String_Node_Str"" + numPositiveLambdaRedCosts + ""String_Node_Str"");
    }
  }
  lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer));
  log.debug(""String_Node_Str"" + Time.totMs(parsingTimer));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}",0.9965059399021664
131728,"private void applyDelta(DmvBoundsDelta delta){
  try {
    int c=delta.getC();
    int m=delta.getM();
    double origLb=bounds.getLb(c,m);
    double origUb=bounds.getUb(c,m);
    double newLb=origLb;
    double newUb=origUb;
    if (delta.getLu() == Lu.LOWER) {
      newLb=origLb + delta.getDelta();
    }
 else     if (delta.getLu() == Lu.UPPER) {
      newUb=origUb + delta.getDelta();
    }
 else {
      throw new IllegalStateException();
    }
    assert(newLb <= newUb);
    bounds.set(c,m,newLb,newUb);
    mp.modelParamVars[c][m].setLB(newLb);
    mp.modelParamVars[c][m].setUB(newUb);
    TIntArrayList rowind=new TIntArrayList();
    TIntArrayList colind=new TIntArrayList();
    TDoubleArrayList val=new TDoubleArrayList();
    int lowCmInd=mp.lpMatrix.getIndex(mp.couplConsLower[c][m]);
    int upCmInd=mp.lpMatrix.getIndex(mp.couplConsUpper[c][m]);
    for (    LambdaVar lv : mp.lambdaVars) {
      int i=idm.getSi(lv.s,c,m);
      if (i != -1) {
        rowind.add(lowCmInd);
        colind.add(lv.colind);
        val.add(bounds.getLb(c,m) * lv.sentSol[i]);
        rowind.add(upCmInd);
        colind.add(lv.colind);
        val.add(bounds.getUb(c,m) * lv.sentSol[i]);
      }
    }
    if (rowind.size() > 0) {
      mp.lpMatrix.setNZs(rowind.toNativeArray(),colind.toNativeArray(),val.toNativeArray());
    }
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}","private void applyDelta(DmvBoundsDelta delta){
}",0.0661612680909717
131729,"public Pair<RelaxStatus,Double> runDWAlgo(IloCplex cplex,MasterProblem mp,double upperBound) throws UnknownObjectException, IloException {
  if (hasInfeasibleBounds || !areFeasibleBounds(bounds)) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  DmvCkyParser parser=new DmvCkyParser();
  double lowerBound=INTERNAL_BEST_SCORE;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  WarmStart warmStart=null;
  int dwIter;
  for (dwIter=0; ; dwIter++) {
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    warmStart=getWarmStart();
    status=RelaxStatus.get(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
      return new Pair<RelaxStatus,Double>(status,lowerBound);
    }
    if (dwIter >= maxDwIterations) {
      break;
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
    }
    iterationObjVals.add(objVal);
    double[] pricesLower=cplex.getDuals(mp.lpMatrix,0,idm.getNumTotalParams());
    double[] pricesUpper=cplex.getDuals(mp.lpMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
    int numConds=idm.getNumConds();
    double[][] parseWeights=new double[numConds][];
    int j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      parseWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        parseWeights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
        j++;
      }
    }
    DepProbMatrix dpm=idm.getDepProbMatrix(parseWeights);
    double[] convexLambdaPrices=cplex.getDuals(mp.lambdaSumCons);
    double[][] modelWeights=new double[numConds][];
    j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      modelWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        modelWeights[c][m]=-pricesLower[j] * idm.getTotalMaxFreqCm(c,m);
        j++;
      }
    }
    double convexGammaPrice=cplex.getDual(mp.gammaSumCons);
    double sumReducedCost=0.0;
    int numPositiveGammaRedCosts=0;
    ModelParamSubproblem mps=new ModelParamSubproblem();
    stoTimer.start();
    Pair<double[][],Double> mPair=mps.solveModelParamSubproblemJOptimizeLogProb(modelWeights,bounds);
    stoTimer.stop();
    if (mPair == null) {
      hasInfeasibleBounds=true;
      return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
    }
    double[][] logProbs=mPair.get1();
    double mReducedCost=mPair.get2() - convexGammaPrice;
    if (log.isDebugEnabled()) {
      int index=mp.gammaVars.indexOf(new GammaVar(null,logProbs));
      if (index != -1) {
        GammaVar gv=mp.gammaVars.get(index);
        log.debug(String.format(""String_Node_Str"",cplex.getReducedCost(gv.gammaVar),mReducedCost));
        assert(Utilities.equals(cplex.getReducedCost(gv.gammaVar),mReducedCost,1e-13));
      }
    }
    if (mReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
      if (addGammaVar(logProbs)) {
        numPositiveGammaRedCosts++;
        if (mp.gammaVars.size() > mp.lpMatrix.getNrows()) {
          for (int i=0; i < mp.gammaVars.size(); i++) {
            GammaVar gv=mp.gammaVars.get(i);
            BasisStatus bstatus=cplex.getBasisStatus(gv.gammaVar);
            if (bstatus != BasisStatus.Basic) {
              removeGammaVar(gv);
            }
          }
          assert(mp.gammaVars.size() > 0);
        }
      }
    }
    sumReducedCost+=mReducedCost;
    int numPositiveLambdaRedCosts=0;
    for (int s=0; s < sentences.size(); s++) {
      parsingTimer.start();
      Pair<DepTree,Double> pPair=parser.parse(sentences.get(s),dpm);
      parsingTimer.stop();
      DepTree tree=pPair.get1();
      double pReducedCost=-pPair.get2() - convexLambdaPrices[s];
      if (pReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
        if (addLambdaVar(s,tree)) {
          numPositiveLambdaRedCosts++;
        }
 else {
          log.warn(String.format(""String_Node_Str"",pReducedCost,s,tree.getParents().toString()));
        }
      }
      sumReducedCost+=pReducedCost;
    }
    lowerBound=objVal + sumReducedCost;
    iterationLowerBounds.add(lowerBound);
    if (numPositiveLambdaRedCosts > 0 && sumReducedCost > 1e-6) {
      log.warn(""String_Node_Str"" + sumReducedCost);
    }
    if (lowerBound >= upperBound) {
      break;
    }
 else     if (numPositiveLambdaRedCosts + numPositiveGammaRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      status=RelaxStatus.Optimal;
      break;
    }
 else {
      log.debug(String.format(""String_Node_Str"",numPositiveLambdaRedCosts,numPositiveGammaRedCosts));
    }
  }
  lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(""String_Node_Str"" + iterationObjVals);
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer));
  log.debug(""String_Node_Str"" + Time.totMs(parsingTimer));
  log.debug(""String_Node_Str"" + Time.totMs(stoTimer));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}","public Pair<RelaxStatus,Double> runDWAlgo(IloCplex cplex,MasterProblem mp,double upperBound) throws UnknownObjectException, IloException {
  if (hasInfeasibleBounds || !areFeasibleBounds(bounds)) {
    return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  RelaxStatus status=RelaxStatus.Unknown;
  DmvCkyParser parser=new DmvCkyParser();
  double lowerBound=INTERNAL_BEST_SCORE;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  WarmStart warmStart=null;
  int dwIter;
  for (dwIter=0; ; dwIter++) {
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    warmStart=getWarmStart();
    status=RelaxStatus.get(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == RelaxStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
      return new Pair<RelaxStatus,Double>(status,lowerBound);
    }
    if (dwIter >= maxDwIterations) {
      break;
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
    }
    iterationObjVals.add(objVal);
    double[] pricesLower=cplex.getDuals(mp.lpMatrix,0,idm.getNumTotalParams());
    double[] pricesUpper=cplex.getDuals(mp.lpMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
    int numConds=idm.getNumConds();
    double[][] parseWeights=new double[numConds][];
    int j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      parseWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        parseWeights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
        j++;
      }
    }
    DepProbMatrix dpm=idm.getDepProbMatrix(parseWeights);
    double[] convexLambdaPrices=cplex.getDuals(mp.lambdaSumCons);
    double[][] modelWeights=new double[numConds][];
    j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      modelWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        modelWeights[c][m]=-pricesLower[j] * idm.getTotalMaxFreqCm(c,m);
        j++;
      }
    }
    double convexGammaPrice=cplex.getDual(mp.gammaSumCons);
    double sumReducedCost=0.0;
    int numPositiveGammaRedCosts=0;
    ModelParamSubproblem mps=new ModelParamSubproblem();
    stoTimer.start();
    Pair<double[][],Double> mPair=mps.solveModelParamSubproblemJOptimizeLogProb(modelWeights,bounds);
    stoTimer.stop();
    if (mPair == null) {
      hasInfeasibleBounds=true;
      return new Pair<RelaxStatus,Double>(RelaxStatus.Infeasible,INTERNAL_WORST_SCORE);
    }
    double[][] logProbs=mPair.get1();
    double mReducedCost=mPair.get2() - convexGammaPrice;
    if (log.isDebugEnabled()) {
      int index=mp.gammaVars.indexOf(new GammaVar(null,logProbs));
      if (index != -1) {
        GammaVar gv=mp.gammaVars.get(index);
        log.debug(String.format(""String_Node_Str"",cplex.getReducedCost(gv.gammaVar),mReducedCost));
        assert(Utilities.equals(cplex.getReducedCost(gv.gammaVar),mReducedCost,1e-13));
      }
    }
    if (mReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
      if (addGammaVar(logProbs)) {
        numPositiveGammaRedCosts++;
        if (mp.gammaVars.size() > mp.lpMatrix.getNrows()) {
          for (int i=0; i < mp.gammaVars.size(); i++) {
            GammaVar gv=mp.gammaVars.get(i);
            BasisStatus bstatus=cplex.getBasisStatus(gv.gammaVar);
            if (bstatus != BasisStatus.Basic) {
              removeGammaVar(gv);
            }
          }
          assert(mp.gammaVars.size() > 0);
        }
      }
    }
    sumReducedCost+=mReducedCost;
    int numPositiveLambdaRedCosts=0;
    for (int s=0; s < sentences.size(); s++) {
      parsingTimer.start();
      Pair<DepTree,Double> pPair=parser.parse(sentences.get(s),dpm);
      parsingTimer.stop();
      DepTree tree=pPair.get1();
      double pReducedCost=-pPair.get2() - convexLambdaPrices[s];
      if (pReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
        if (addLambdaVar(s,tree)) {
          numPositiveLambdaRedCosts++;
        }
 else {
          log.warn(String.format(""String_Node_Str"",pReducedCost,s,tree.getParents().toString()));
        }
      }
      sumReducedCost+=pReducedCost;
    }
    lowerBound=objVal + sumReducedCost;
    iterationLowerBounds.add(lowerBound);
    if (numPositiveLambdaRedCosts > 0 && sumReducedCost > 1e-6) {
      log.warn(""String_Node_Str"" + sumReducedCost);
    }
    if (lowerBound >= upperBound) {
      status=RelaxStatus.Fathomed;
      break;
    }
 else     if (numPositiveLambdaRedCosts + numPositiveGammaRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      status=RelaxStatus.Optimal;
      break;
    }
 else {
      log.debug(String.format(""String_Node_Str"",numPositiveLambdaRedCosts,numPositiveGammaRedCosts));
    }
  }
  lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(""String_Node_Str"" + iterationObjVals);
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer));
  log.debug(""String_Node_Str"" + Time.totMs(parsingTimer));
  log.debug(""String_Node_Str"" + Time.totMs(stoTimer));
  return new Pair<RelaxStatus,Double>(status,lowerBound);
}",0.9970845481049564
131730,"private MasterProblem buildModel(IloMPModeler cplex,DmvSolution initFeasSol) throws IloException {
  mp=new MasterProblem();
  int numConds=idm.getNumConds();
  mp.objective=cplex.addMinimize();
  mp.objVars=new IloNumVar[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.objVars[c]=new IloNumVar[numParams];
    for (int m=0; m < numParams; m++) {
      mp.objVars[c][m]=cplex.numVar(-Double.MAX_VALUE,Double.MAX_VALUE,String.format(""String_Node_Str"",c,m));
      cplex.setLinearCoef(mp.objective,-1.0,mp.objVars[c][m]);
    }
  }
  mp.couplConsLower=new IloRange[numConds][];
  mp.couplConsUpper=new IloRange[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.couplConsLower[c]=new IloRange[numParams];
    mp.couplConsUpper[c]=new IloRange[numParams];
    for (int m=0; m < numParams; m++) {
      String name;
      IloNumVar slackVarLower=cplex.numVar(-Double.MAX_VALUE,0.0,String.format(""String_Node_Str"",c,m));
      name=String.format(""String_Node_Str"",c,m);
      double maxFreqCm=idm.getTotalMaxFreqCm(c,m);
      IloNumExpr rhsLower=cplex.diff(slackVarLower,mp.objVars[c][m]);
      mp.couplConsLower[c][m]=cplex.eq(maxFreqCm * bounds.getLb(c,m),rhsLower,name);
      IloNumVar slackVarUpper=cplex.numVar(-Double.MAX_VALUE,0.0,String.format(""String_Node_Str"",c,m));
      name=String.format(""String_Node_Str"",c,m);
      IloNumExpr rhsUpper=cplex.sum(cplex.prod(-1.0,mp.objVars[c][m]),slackVarUpper);
      mp.couplConsUpper[c][m]=cplex.eq(0.0,rhsUpper,name);
    }
  }
  mp.lpMatrix=cplex.addLPMatrix(""String_Node_Str"");
  for (int c=0; c < numConds; c++) {
    mp.lpMatrix.addRows(mp.couplConsLower[c]);
  }
  for (int c=0; c < numConds; c++) {
    mp.lpMatrix.addRows(mp.couplConsUpper[c]);
  }
  mp.lambdaSumCons=new IloRange[sentences.size()];
  mp.lambdaVars=new ArrayList<LambdaVar>();
  mp.lambdaVarSet=new HashSet<LambdaVar>();
  for (int s=0; s < sentences.size(); s++) {
    DepTree tree=initFeasSol.getTreebank().get(s);
    addLambdaVar(s,tree);
  }
  mp.gammaVars=new ArrayList<GammaVar>();
  double[][] initLogProbs=initFeasSol.getLogProbs();
  for (int c=0; c < numConds; c++) {
    double[] params=Vectors.getExp(initLogProbs[c]);
    params=projections.getProjectedParams(bounds,c,params);
    if (params == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    initLogProbs[c]=Vectors.getLog(params);
  }
  addGammaVar(initLogProbs);
  return mp;
}","private MasterProblem buildModel(IloMPModeler cplex,DmvSolution initFeasSol) throws IloException {
  mp=new MasterProblem();
  int numConds=idm.getNumConds();
  mp.objective=cplex.addMinimize();
  mp.objVars=new IloNumVar[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.objVars[c]=new IloNumVar[numParams];
    for (int m=0; m < numParams; m++) {
      mp.objVars[c][m]=cplex.numVar(-Double.MAX_VALUE,Double.MAX_VALUE,String.format(""String_Node_Str"",c,m));
      cplex.setLinearCoef(mp.objective,-1.0,mp.objVars[c][m]);
    }
  }
  mp.couplConsLower=new IloRange[numConds][];
  mp.couplConsUpper=new IloRange[numConds][];
  for (int c=0; c < numConds; c++) {
    int numParams=idm.getNumParams(c);
    mp.couplConsLower[c]=new IloRange[numParams];
    mp.couplConsUpper[c]=new IloRange[numParams];
    for (int m=0; m < numParams; m++) {
      String name;
      IloNumVar slackVarLower=cplex.numVar(-Double.MAX_VALUE,0.0,String.format(""String_Node_Str"",c,m));
      name=String.format(""String_Node_Str"",c,m);
      double maxFreqCm=idm.getTotalMaxFreqCm(c,m);
      IloNumExpr rhsLower=cplex.diff(slackVarLower,mp.objVars[c][m]);
      mp.couplConsLower[c][m]=cplex.eq(maxFreqCm * bounds.getLb(c,m),rhsLower,name);
      IloNumVar slackVarUpper=cplex.numVar(-Double.MAX_VALUE,0.0,String.format(""String_Node_Str"",c,m));
      name=String.format(""String_Node_Str"",c,m);
      IloNumExpr rhsUpper=cplex.sum(cplex.prod(-1.0,mp.objVars[c][m]),slackVarUpper);
      mp.couplConsUpper[c][m]=cplex.eq(0.0,rhsUpper,name);
    }
  }
  mp.lpMatrix=cplex.addLPMatrix(""String_Node_Str"");
  for (int c=0; c < numConds; c++) {
    mp.lpMatrix.addRows(mp.couplConsLower[c]);
  }
  for (int c=0; c < numConds; c++) {
    mp.lpMatrix.addRows(mp.couplConsUpper[c]);
  }
  mp.lambdaSumCons=new IloRange[sentences.size()];
  mp.lambdaVars=new ArrayList<LambdaVar>();
  mp.lambdaVarSet=new HashSet<LambdaVar>();
  addFeasibleSolution(initFeasSol);
  return mp;
}",0.86875
131731,"public static RelaxStatus get(Status status){
  if (status == Status.Infeasible || status == Status.InfeasibleOrUnbounded || status == Status.Unbounded) {
    return Infeasible;
  }
 else {
    return Feasible;
  }
}","public static RelaxStatus get(Status status){
  if (status == Status.Infeasible || status == Status.InfeasibleOrUnbounded || status == Status.Unbounded || status == Status.Bounded) {
    return Infeasible;
  }
 else   if (status == Status.Error || status == Status.Unknown) {
    return Unknown;
  }
 else {
    return Feasible;
  }
}",0.7854545454545454
131732,"public void run(CommandLine cmd) throws ParseException, IOException {
  DepTreebank depTreebank;
  if (cmd.hasOption(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
    String trainPath=cmd.getOptionValue(""String_Node_Str"");
    int maxSentenceLength=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    depTreebank=new DepTreebank(maxSentenceLength,maxNumSentences);
    if (cmd.hasOption(""String_Node_Str"")) {
      depTreebank.setTreeFilter(new VerbTreeFilter());
    }
    depTreebank.loadPath(trainPath);
    String reduceTags=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
    if (""String_Node_Str"".equals(reduceTags)) {
      log.info(""String_Node_Str"");
      (new Ptb45To17TagReducer()).reduceTags(depTreebank);
    }
 else     if (!""String_Node_Str"".equals(reduceTags)) {
      log.info(""String_Node_Str"" + reduceTags);
      (new FileMapTagReducer(new File(reduceTags))).reduceTags(depTreebank);
    }
  }
 else   if (cmd.hasOption(""String_Node_Str"")) {
    DmvModel trueModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    long syntheticSeed=123454321;
    if (cmd.hasOption(""String_Node_Str"")) {
      syntheticSeed=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(trueModel,syntheticSeed);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",100);
    depTreebank=generator.getTreebank(maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + depTreebank.size());
  log.info(""String_Node_Str"" + depTreebank.getNumTokens());
  log.info(""String_Node_Str"" + depTreebank.getNumTypes());
  SentenceCollection sentences=depTreebank.getSentences();
  printSentences(cmd,depTreebank,sentences);
  if (cmd.hasOption(""String_Node_Str"")) {
    DmvRelaxation dw=(DmvRelaxation)TrainerFactory.getTrainer(cmd);
    dw.init(sentences,DmvDantzigWolfeRelaxationTest.getInitFeasSol(sentences,2));
    DmvSolution initBoundsSol=updateBounds(cmd,sentences,dw);
    Stopwatch timer=new Stopwatch();
    timer.start();
    RelaxedDmvSolution relaxSol=dw.solveRelaxation();
    timer.stop();
    log.info(""String_Node_Str"" + Time.totMs(timer));
    log.info(""String_Node_Str"" + relaxSol.getScore());
    if (initBoundsSol != null) {
      log.info(""String_Node_Str"" + Math.abs(relaxSol.getScore() - initBoundsSol.getScore()) / Math.abs(initBoundsSol.getScore()));
    }
  }
 else {
    log.info(""String_Node_Str"");
    Trainer trainer=(Trainer)TrainerFactory.getTrainer(cmd);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(sentences);
      updateBounds(cmd,sentences,bnb.getRootRelaxation());
      bnb.train();
    }
 else {
      trainer.train(sentences);
    }
    Model model=trainer.getModel();
    log.info(""String_Node_Str"");
    ViterbiParser parser=TrainerFactory.getEvalParser();
    Evaluator pwEval=new DependencyParserEvaluator(parser,depTreebank);
    pwEval.evaluate(model);
    pwEval.print();
    String printModel=Command.getOptionValue(cmd,""String_Node_Str"",null);
    if (printModel != null) {
      BufferedWriter writer=new BufferedWriter(new FileWriter(printModel));
      writer.write(""String_Node_Str"");
      writer.write(model.toString());
      writer.close();
    }
  }
}","public void run(CommandLine cmd) throws ParseException, IOException {
  DepTreebank depTreebank;
  if (cmd.hasOption(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
    String trainPath=cmd.getOptionValue(""String_Node_Str"");
    int maxSentenceLength=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    depTreebank=new DepTreebank(maxSentenceLength,maxNumSentences);
    if (cmd.hasOption(""String_Node_Str"")) {
      depTreebank.setTreeFilter(new VerbTreeFilter());
    }
    depTreebank.loadPath(trainPath);
    String reduceTags=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
    if (""String_Node_Str"".equals(reduceTags)) {
      log.info(""String_Node_Str"");
      (new Ptb45To17TagReducer()).reduceTags(depTreebank);
    }
 else     if (!""String_Node_Str"".equals(reduceTags)) {
      log.info(""String_Node_Str"" + reduceTags);
      (new FileMapTagReducer(new File(reduceTags))).reduceTags(depTreebank);
    }
  }
 else   if (cmd.hasOption(""String_Node_Str"")) {
    DmvModel trueModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    long syntheticSeed=123454321;
    if (cmd.hasOption(""String_Node_Str"")) {
      syntheticSeed=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(trueModel,syntheticSeed);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",100);
    depTreebank=generator.getTreebank(maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + depTreebank.size());
  log.info(""String_Node_Str"" + depTreebank.getNumTokens());
  log.info(""String_Node_Str"" + depTreebank.getNumTypes());
  SentenceCollection sentences=depTreebank.getSentences();
  printSentences(cmd,depTreebank,sentences);
  if (cmd.hasOption(""String_Node_Str"")) {
    DmvRelaxation dw=(DmvRelaxation)TrainerFactory.getTrainer(cmd);
    dw.setSentences(sentences);
    dw.init(DmvDantzigWolfeRelaxationTest.getInitFeasSol(sentences,2));
    DmvSolution initBoundsSol=updateBounds(cmd,sentences,dw);
    Stopwatch timer=new Stopwatch();
    timer.start();
    RelaxedDmvSolution relaxSol=dw.solveRelaxation();
    timer.stop();
    log.info(""String_Node_Str"" + Time.totMs(timer));
    log.info(""String_Node_Str"" + relaxSol.getScore());
    if (initBoundsSol != null) {
      log.info(""String_Node_Str"" + Math.abs(relaxSol.getScore() - initBoundsSol.getScore()) / Math.abs(initBoundsSol.getScore()));
    }
  }
 else {
    log.info(""String_Node_Str"");
    Trainer trainer=(Trainer)TrainerFactory.getTrainer(cmd);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(sentences);
      updateBounds(cmd,sentences,bnb.getRootRelaxation());
      bnb.train();
    }
 else {
      trainer.train(sentences);
    }
    Model model=trainer.getModel();
    log.info(""String_Node_Str"");
    ViterbiParser parser=TrainerFactory.getEvalParser();
    Evaluator pwEval=new DependencyParserEvaluator(parser,depTreebank);
    pwEval.evaluate(model);
    pwEval.print();
    String printModel=Command.getOptionValue(cmd,""String_Node_Str"",null);
    if (printModel != null) {
      BufferedWriter writer=new BufferedWriter(new FileWriter(printModel));
      writer.write(""String_Node_Str"");
      writer.write(model.toString());
      writer.close();
    }
  }
}",0.9924396626926432
131733,"@Before public void setUp(){
  Prng.seed(1234567890);
}","@Before public void setUp(){
  Prng.seed(1234567890);
  DmvProblemNode.clearActiveNode();
}",0.7534246575342466
131734,"@Test public void testTwo(){
  double epsilon=0.1;
  BnBDmvTrainer trainer=new BnBDmvTrainer(epsilon,getDefaultBrancher(),new File(""String_Node_Str""));
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  trainer.train(sentences);
}","@Test public void testTwo(){
  double epsilon=0.4;
  BnBDmvTrainer trainer=new BnBDmvTrainer(epsilon,getDefaultBrancher(),new File(""String_Node_Str""));
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  trainer.train(sentences);
}",0.9971098265895952
131735,"@Test public void testSynthetic(){
  double epsilon=0.1;
  BnBDmvTrainer trainer=new BnBDmvTrainer(epsilon,getDefaultBrancher());
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,Prng.nextInt(1000000));
  DepTreebank treebank=generator.getTreebank(10);
  System.out.println(treebank);
  System.out.println(dmvModel);
  SentenceCollection sentences=treebank.getSentences();
  trainer.train(sentences);
}","public void testSynthetic(){
  double epsilon=0.9;
  DmvDantzigWolfeRelaxation dwRelax=new DmvDantzigWolfeRelaxation(null,1,new CutCountComputer());
  dwRelax.setMaxDwIterations(3);
  BnBDmvTrainer trainer=new BnBDmvTrainer(epsilon,getDefaultBrancher(),dwRelax);
  DmvModel dmvModel=SimpleStaticDmvModel.getThreePosTagInstance();
  DmvDepTreeGenerator generator=new DmvDepTreeGenerator(dmvModel,Prng.nextInt(1000000));
  DepTreebank treebank=generator.getTreebank(10);
  System.out.println(treebank);
  System.out.println(dmvModel);
  SentenceCollection sentences=treebank.getSentences();
  trainer.train(sentences);
}",0.8685403445149592
131736,"public Pair<Status,Double> runDWAlgo(IloCplex cplex,MasterProblem mp,double upperBound) throws UnknownObjectException, IloException {
  if (!areFeasibleBounds(bounds)) {
    return new Pair<Status,Double>(Status.Infeasible,INTERNAL_WORST_SCORE);
  }
  Status status=Status.Unknown;
  DmvCkyParser parser=new DmvCkyParser();
  double lowerBound=INTERNAL_BEST_SCORE;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  WarmStart warmStart=null;
  int cut;
  int dwIter;
  for (dwIter=0, cut=0; ; dwIter++) {
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    warmStart=getWarmStart();
    status=cplex.getStatus();
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == Status.Infeasible || status == Status.InfeasibleOrUnbounded || status == Status.Unbounded) {
      lowerBound=INTERNAL_WORST_SCORE;
      return new Pair<Status,Double>(status,lowerBound);
    }
    if (dwIter >= maxDwIterations) {
      status=(status == Status.Optimal) ? Status.Feasible : status;
      break;
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
    }
    iterationObjVals.add(objVal);
    double[] pricesLower=cplex.getDuals(mp.lpMatrix,0,idm.getNumTotalParams());
    double[] pricesUpper=cplex.getDuals(mp.lpMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
    int numConds=idm.getNumConds();
    double[][] parseWeights=new double[numConds][];
    int j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      parseWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        parseWeights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
        j++;
      }
    }
    DepProbMatrix dpm=idm.getDepProbMatrix(parseWeights);
    double[] convexLambdaPrices=cplex.getDuals(mp.lambdaSumCons);
    double sumReducedCost=0.0;
    int numPositiveLambdaRedCosts=0;
    for (int s=0; s < sentences.size(); s++) {
      parsingTimer.start();
      Pair<DepTree,Double> pPair=parser.parse(sentences.get(s),dpm);
      parsingTimer.stop();
      DepTree tree=pPair.get1();
      double pReducedCost=-pPair.get2() - convexLambdaPrices[s];
      if (pReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
        if (addLambdaVar(s,tree)) {
          numPositiveLambdaRedCosts++;
        }
 else {
          log.warn(String.format(""String_Node_Str"",pReducedCost,s,tree.getParents().toString()));
        }
      }
      sumReducedCost+=pReducedCost;
    }
    lowerBound=objVal + sumReducedCost;
    iterationLowerBounds.add(lowerBound);
    if (numPositiveLambdaRedCosts > 0 && sumReducedCost > 1e-6) {
      log.warn(""String_Node_Str"" + sumReducedCost);
    }
    if (lowerBound >= upperBound) {
      break;
    }
 else     if (numPositiveLambdaRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      if (cut < maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
        iterationObjVals.clear();
        double[][] params=new double[idm.getNumConds()][];
        for (int c=0; c < idm.getNumConds(); c++) {
          params[c]=cplex.getValues(mp.modelParamVars[c]);
        }
        int numNewStoConstraints=0;
        for (int c=0; c < idm.getNumConds(); c++) {
          Vectors.exp(params[c]);
          if (Vectors.sum(params[c]) > minSumForCuts) {
            numNewStoConstraints++;
            addSumToOneConstraint(c,params[c]);
          }
        }
        if (numNewStoConstraints == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        log.debug(""String_Node_Str"" + numNewStoConstraints + ""String_Node_Str""+ cut);
        cut++;
      }
 else {
        break;
      }
    }
 else {
      log.debug(""String_Node_Str"" + numPositiveLambdaRedCosts + ""String_Node_Str"");
    }
  }
  lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer));
  log.debug(""String_Node_Str"" + Time.totMs(parsingTimer));
  return new Pair<Status,Double>(status,lowerBound);
}","public Pair<SimpleStatus,Double> runDWAlgo(IloCplex cplex,MasterProblem mp,double upperBound) throws UnknownObjectException, IloException {
  if (!areFeasibleBounds(bounds)) {
    return new Pair<SimpleStatus,Double>(SimpleStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  SimpleStatus status=SimpleStatus.Unknown;
  DmvCkyParser parser=new DmvCkyParser();
  double lowerBound=INTERNAL_BEST_SCORE;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  WarmStart warmStart=null;
  int cut;
  int dwIter;
  for (dwIter=0, cut=0; ; dwIter++) {
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    warmStart=getWarmStart();
    status=SimpleStatus.get(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == SimpleStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
      return new Pair<SimpleStatus,Double>(status,lowerBound);
    }
    if (dwIter >= maxDwIterations) {
      break;
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
    }
    iterationObjVals.add(objVal);
    double[] pricesLower=cplex.getDuals(mp.lpMatrix,0,idm.getNumTotalParams());
    double[] pricesUpper=cplex.getDuals(mp.lpMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
    int numConds=idm.getNumConds();
    double[][] parseWeights=new double[numConds][];
    int j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      parseWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        parseWeights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
        j++;
      }
    }
    DepProbMatrix dpm=idm.getDepProbMatrix(parseWeights);
    double[] convexLambdaPrices=cplex.getDuals(mp.lambdaSumCons);
    double sumReducedCost=0.0;
    int numPositiveLambdaRedCosts=0;
    for (int s=0; s < sentences.size(); s++) {
      parsingTimer.start();
      Pair<DepTree,Double> pPair=parser.parse(sentences.get(s),dpm);
      parsingTimer.stop();
      DepTree tree=pPair.get1();
      double pReducedCost=-pPair.get2() - convexLambdaPrices[s];
      if (pReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
        if (addLambdaVar(s,tree)) {
          numPositiveLambdaRedCosts++;
        }
 else {
          log.warn(String.format(""String_Node_Str"",pReducedCost,s,tree.getParents().toString()));
        }
      }
      sumReducedCost+=pReducedCost;
    }
    lowerBound=objVal + sumReducedCost;
    iterationLowerBounds.add(lowerBound);
    if (numPositiveLambdaRedCosts > 0 && sumReducedCost > 1e-6) {
      log.warn(""String_Node_Str"" + sumReducedCost);
    }
    if (lowerBound >= upperBound) {
      break;
    }
 else     if (numPositiveLambdaRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      status=SimpleStatus.Optimal;
      if (cut < maxCutRounds) {
        log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
        iterationObjVals.clear();
        double[][] params=new double[idm.getNumConds()][];
        for (int c=0; c < idm.getNumConds(); c++) {
          params[c]=cplex.getValues(mp.modelParamVars[c]);
        }
        int numNewStoConstraints=0;
        for (int c=0; c < idm.getNumConds(); c++) {
          Vectors.exp(params[c]);
          if (Vectors.sum(params[c]) > minSumForCuts) {
            numNewStoConstraints++;
            addSumToOneConstraint(c,params[c]);
          }
        }
        if (numNewStoConstraints == 0) {
          log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
          break;
        }
        log.debug(""String_Node_Str"" + numNewStoConstraints + ""String_Node_Str""+ cut);
        cut++;
      }
 else {
        break;
      }
    }
 else {
      log.debug(""String_Node_Str"" + numPositiveLambdaRedCosts + ""String_Node_Str"");
    }
  }
  lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + cut);
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(String.format(""String_Node_Str"",cut,iterationObjVals));
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer));
  log.debug(""String_Node_Str"" + Time.totMs(parsingTimer));
  return new Pair<SimpleStatus,Double>(status,lowerBound);
}",0.9734090230056768
131737,"public void init(SentenceCollection sentences,DmvSolution initFeasSol){
  try {
    this.sentences=sentences;
    this.idm=new IndexedDmvModel(sentences);
    this.bounds=new DmvBounds(this.idm);
    this.cplex=new IloCplex();
    this.mp=buildModel(cplex,initFeasSol.getTreebank());
    setCplexParams(cplex);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void init(DmvSolution initFeasSol){
  try {
    this.bounds=new DmvBounds(this.idm);
    this.cplex=new IloCplex();
    this.mp=buildModel(cplex,initFeasSol.getTreebank());
    setCplexParams(cplex);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9190031152647976
131738,"public RelaxedDmvSolution solveRelaxation(double incumbentScore){
  try {
    double upperBound=-incumbentScore;
    Pair<Status,Double> pair=runDWAlgo(cplex,mp,upperBound);
    Status status=pair.get1();
    double lowerBound=pair.get2();
    double objective=-lowerBound;
    assert(!Double.isNaN(objective));
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (!(status == Status.Optimal || status == Status.Feasible)) {
      return new RelaxedDmvSolution(null,null,null,objective,status);
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + lowerBound);
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.numStoCons));
    optimalLogProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      optimalLogProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(Utilities.copyOf(optimalLogProbs),fracRoots,fracParses,objective,status);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}","public RelaxedDmvSolution solveRelaxation(double incumbentScore){
  try {
    double upperBound=-incumbentScore;
    Pair<SimpleStatus,Double> pair=runDWAlgo(cplex,mp,upperBound);
    SimpleStatus status=pair.get1();
    double lowerBound=pair.get2();
    double objective=-lowerBound;
    assert(!Double.isNaN(objective));
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (!status.hasSolution()) {
      return new RelaxedDmvSolution(null,null,null,objective,status);
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + lowerBound);
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.numStoCons));
    optimalLogProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      optimalLogProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(Utilities.copyOf(optimalLogProbs),fracRoots,fracParses,objective,status);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}",0.9813063558390148
131739,"public Pair<Status,Double> runDWAlgo(IloCplex cplex,MasterProblem mp,double upperBound) throws UnknownObjectException, IloException {
  if (hasInfeasibleBounds || !areFeasibleBounds(bounds)) {
    return new Pair<Status,Double>(Status.Infeasible,INTERNAL_WORST_SCORE);
  }
  Status status=Status.Unknown;
  DmvCkyParser parser=new DmvCkyParser();
  double lowerBound=INTERNAL_BEST_SCORE;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  WarmStart warmStart=null;
  int dwIter;
  for (dwIter=0; ; dwIter++) {
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    warmStart=getWarmStart();
    status=cplex.getStatus();
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == Status.Infeasible || status == Status.InfeasibleOrUnbounded || status == Status.Unbounded) {
      lowerBound=INTERNAL_WORST_SCORE;
      return new Pair<Status,Double>(status,lowerBound);
    }
    if (dwIter >= maxDwIterations) {
      status=(status == Status.Optimal) ? Status.Feasible : status;
      break;
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
    }
    iterationObjVals.add(objVal);
    double[] pricesLower=cplex.getDuals(mp.lpMatrix,0,idm.getNumTotalParams());
    double[] pricesUpper=cplex.getDuals(mp.lpMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
    int numConds=idm.getNumConds();
    double[][] parseWeights=new double[numConds][];
    int j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      parseWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        parseWeights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
        j++;
      }
    }
    DepProbMatrix dpm=idm.getDepProbMatrix(parseWeights);
    double[] convexLambdaPrices=cplex.getDuals(mp.lambdaSumCons);
    double[][] modelWeights=new double[numConds][];
    j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      modelWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        modelWeights[c][m]=-pricesLower[j] * idm.getTotalMaxFreqCm(c,m);
        j++;
      }
    }
    double convexGammaPrice=cplex.getDual(mp.gammaSumCons);
    double sumReducedCost=0.0;
    int numPositiveGammaRedCosts=0;
    ModelParamSubproblem mps=new ModelParamSubproblem();
    stoTimer.start();
    Pair<double[][],Double> mPair=mps.solveModelParamSubproblemJOptimizeLogProb(modelWeights,bounds);
    stoTimer.stop();
    if (mPair == null) {
      hasInfeasibleBounds=true;
      return new Pair<Status,Double>(Status.Infeasible,INTERNAL_WORST_SCORE);
    }
    double[][] logProbs=mPair.get1();
    double mReducedCost=mPair.get2() - convexGammaPrice;
    if (log.isDebugEnabled()) {
      int index=mp.gammaVars.indexOf(new GammaVar(null,logProbs));
      if (index != -1) {
        GammaVar gv=mp.gammaVars.get(index);
        log.debug(String.format(""String_Node_Str"",cplex.getReducedCost(gv.gammaVar),mReducedCost));
        assert(Utilities.equals(cplex.getReducedCost(gv.gammaVar),mReducedCost,1e-13));
      }
    }
    if (mReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
      if (addGammaVar(logProbs)) {
        numPositiveGammaRedCosts++;
        if (mp.gammaVars.size() > mp.lpMatrix.getNrows()) {
          for (int i=0; i < mp.gammaVars.size(); i++) {
            GammaVar gv=mp.gammaVars.get(i);
            BasisStatus bstatus=cplex.getBasisStatus(gv.gammaVar);
            if (bstatus != BasisStatus.Basic) {
              removeGammaVar(gv);
            }
          }
          assert(mp.gammaVars.size() > 0);
        }
      }
    }
    sumReducedCost+=mReducedCost;
    int numPositiveLambdaRedCosts=0;
    for (int s=0; s < sentences.size(); s++) {
      parsingTimer.start();
      Pair<DepTree,Double> pPair=parser.parse(sentences.get(s),dpm);
      parsingTimer.stop();
      DepTree tree=pPair.get1();
      double pReducedCost=-pPair.get2() - convexLambdaPrices[s];
      if (pReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
        if (addLambdaVar(s,tree)) {
          numPositiveLambdaRedCosts++;
        }
 else {
          log.warn(String.format(""String_Node_Str"",pReducedCost,s,tree.getParents().toString()));
        }
      }
      sumReducedCost+=pReducedCost;
    }
    lowerBound=objVal + sumReducedCost;
    iterationLowerBounds.add(lowerBound);
    if (numPositiveLambdaRedCosts > 0 && sumReducedCost > 1e-6) {
      log.warn(""String_Node_Str"" + sumReducedCost);
    }
    if (lowerBound >= upperBound) {
      break;
    }
 else     if (numPositiveLambdaRedCosts + numPositiveGammaRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      break;
    }
 else {
      log.debug(String.format(""String_Node_Str"",numPositiveLambdaRedCosts,numPositiveGammaRedCosts));
    }
  }
  lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(""String_Node_Str"" + iterationObjVals);
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer));
  log.debug(""String_Node_Str"" + Time.totMs(parsingTimer));
  log.debug(""String_Node_Str"" + Time.totMs(stoTimer));
  return new Pair<Status,Double>(status,lowerBound);
}","public Pair<SimpleStatus,Double> runDWAlgo(IloCplex cplex,MasterProblem mp,double upperBound) throws UnknownObjectException, IloException {
  if (hasInfeasibleBounds || !areFeasibleBounds(bounds)) {
    return new Pair<SimpleStatus,Double>(SimpleStatus.Infeasible,INTERNAL_WORST_SCORE);
  }
  SimpleStatus status=SimpleStatus.Unknown;
  DmvCkyParser parser=new DmvCkyParser();
  double lowerBound=INTERNAL_BEST_SCORE;
  TDoubleArrayList iterationLowerBounds=new TDoubleArrayList();
  TDoubleArrayList iterationObjVals=new TDoubleArrayList();
  WarmStart warmStart=null;
  int dwIter;
  for (dwIter=0; ; dwIter++) {
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    if (warmStart != null) {
      setWarmStart(warmStart);
    }
    simplexTimer.start();
    cplex.solve();
    simplexTimer.stop();
    warmStart=getWarmStart();
    status=SimpleStatus.get(cplex.getStatus());
    log.trace(""String_Node_Str"" + cplex.getStatus());
    if (status == SimpleStatus.Infeasible) {
      lowerBound=INTERNAL_WORST_SCORE;
      return new Pair<SimpleStatus,Double>(status,lowerBound);
    }
    if (dwIter >= maxDwIterations) {
      break;
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,String.format(""String_Node_Str"",dwIter)).getAbsolutePath());
    }
    double objVal=cplex.getObjValue();
    log.trace(""String_Node_Str"" + objVal);
    double prevObjVal=iterationObjVals.size() > 0 ? iterationObjVals.get(iterationObjVals.size() - 1) : INTERNAL_WORST_SCORE;
    if (objVal > prevObjVal + OBJ_VAL_DECREASE_TOLERANCE) {
      log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
    }
    iterationObjVals.add(objVal);
    double[] pricesLower=cplex.getDuals(mp.lpMatrix,0,idm.getNumTotalParams());
    double[] pricesUpper=cplex.getDuals(mp.lpMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
    int numConds=idm.getNumConds();
    double[][] parseWeights=new double[numConds][];
    int j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      parseWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        parseWeights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
        j++;
      }
    }
    DepProbMatrix dpm=idm.getDepProbMatrix(parseWeights);
    double[] convexLambdaPrices=cplex.getDuals(mp.lambdaSumCons);
    double[][] modelWeights=new double[numConds][];
    j=0;
    for (int c=0; c < numConds; c++) {
      int numParams=idm.getNumParams(c);
      modelWeights[c]=new double[numParams];
      for (int m=0; m < numParams; m++) {
        modelWeights[c][m]=-pricesLower[j] * idm.getTotalMaxFreqCm(c,m);
        j++;
      }
    }
    double convexGammaPrice=cplex.getDual(mp.gammaSumCons);
    double sumReducedCost=0.0;
    int numPositiveGammaRedCosts=0;
    ModelParamSubproblem mps=new ModelParamSubproblem();
    stoTimer.start();
    Pair<double[][],Double> mPair=mps.solveModelParamSubproblemJOptimizeLogProb(modelWeights,bounds);
    stoTimer.stop();
    if (mPair == null) {
      hasInfeasibleBounds=true;
      return new Pair<SimpleStatus,Double>(SimpleStatus.Infeasible,INTERNAL_WORST_SCORE);
    }
    double[][] logProbs=mPair.get1();
    double mReducedCost=mPair.get2() - convexGammaPrice;
    if (log.isDebugEnabled()) {
      int index=mp.gammaVars.indexOf(new GammaVar(null,logProbs));
      if (index != -1) {
        GammaVar gv=mp.gammaVars.get(index);
        log.debug(String.format(""String_Node_Str"",cplex.getReducedCost(gv.gammaVar),mReducedCost));
        assert(Utilities.equals(cplex.getReducedCost(gv.gammaVar),mReducedCost,1e-13));
      }
    }
    if (mReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
      if (addGammaVar(logProbs)) {
        numPositiveGammaRedCosts++;
        if (mp.gammaVars.size() > mp.lpMatrix.getNrows()) {
          for (int i=0; i < mp.gammaVars.size(); i++) {
            GammaVar gv=mp.gammaVars.get(i);
            BasisStatus bstatus=cplex.getBasisStatus(gv.gammaVar);
            if (bstatus != BasisStatus.Basic) {
              removeGammaVar(gv);
            }
          }
          assert(mp.gammaVars.size() > 0);
        }
      }
    }
    sumReducedCost+=mReducedCost;
    int numPositiveLambdaRedCosts=0;
    for (int s=0; s < sentences.size(); s++) {
      parsingTimer.start();
      Pair<DepTree,Double> pPair=parser.parse(sentences.get(s),dpm);
      parsingTimer.stop();
      DepTree tree=pPair.get1();
      double pReducedCost=-pPair.get2() - convexLambdaPrices[s];
      if (pReducedCost < NEGATIVE_REDUCED_COST_TOLERANCE) {
        if (addLambdaVar(s,tree)) {
          numPositiveLambdaRedCosts++;
        }
 else {
          log.warn(String.format(""String_Node_Str"",pReducedCost,s,tree.getParents().toString()));
        }
      }
      sumReducedCost+=pReducedCost;
    }
    lowerBound=objVal + sumReducedCost;
    iterationLowerBounds.add(lowerBound);
    if (numPositiveLambdaRedCosts > 0 && sumReducedCost > 1e-6) {
      log.warn(""String_Node_Str"" + sumReducedCost);
    }
    if (lowerBound >= upperBound) {
      break;
    }
 else     if (numPositiveLambdaRedCosts + numPositiveGammaRedCosts == 0) {
      lowerBound=cplex.getObjValue();
      status=SimpleStatus.Optimal;
      break;
    }
 else {
      log.debug(String.format(""String_Node_Str"",numPositiveLambdaRedCosts,numPositiveGammaRedCosts));
    }
  }
  lowerBound=Vectors.max(iterationLowerBounds.toNativeArray());
  log.debug(""String_Node_Str"" + dwIter);
  log.debug(""String_Node_Str"" + maxDwIterations);
  log.debug(""String_Node_Str"" + lowerBound);
  log.debug(""String_Node_Str"" + iterationObjVals);
  log.debug(""String_Node_Str"" + iterationLowerBounds);
  log.debug(""String_Node_Str"" + Time.totMs(simplexTimer));
  log.debug(""String_Node_Str"" + Time.totMs(parsingTimer));
  log.debug(""String_Node_Str"" + Time.totMs(stoTimer));
  return new Pair<SimpleStatus,Double>(status,lowerBound);
}",0.9767906164212627
131740,"public void init(SentenceCollection sentences,DmvSolution initFeasSol){
  try {
    this.sentences=sentences;
    this.idm=new IndexedDmvModel(sentences);
    this.bounds=new DmvBounds(this.idm);
    this.cplex=new IloCplex();
    this.mp=buildModel(cplex,initFeasSol);
    setCplexParams(cplex);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void init(DmvSolution initFeasSol){
  try {
    this.bounds=new DmvBounds(this.idm);
    this.cplex=new IloCplex();
    this.mp=buildModel(cplex,initFeasSol);
    setCplexParams(cplex);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9171974522292994
131741,"public RelaxedDmvSolution solveRelaxation(double incumbentScore){
  try {
    double upperBound=-incumbentScore;
    Pair<Status,Double> pair=runDWAlgo(cplex,mp,upperBound);
    Status status=pair.get1();
    double lowerBound=pair.get2();
    double objective=-lowerBound;
    assert(!Double.isNaN(objective));
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (!(status == Status.Optimal || status == Status.Feasible)) {
      return new RelaxedDmvSolution(null,null,null,objective,status);
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + lowerBound);
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.gammaVars.size()));
    optimalLogProbs=new double[idm.getNumConds()][];
    for (int i=0; i < mp.gammaVars.size(); i++) {
      GammaVar gv=mp.gammaVars.get(i);
      double gammaValue=cplex.getValue(gv.gammaVar);
      for (int c=0; c < idm.getNumConds(); c++) {
        int numParams=idm.getNumParams(c);
        if (optimalLogProbs[c] == null) {
          optimalLogProbs[c]=new double[numParams];
        }
        for (int m=0; m < numParams; m++) {
          optimalLogProbs[c][m]+=gammaValue * gv.logProbs[c][m];
        }
      }
    }
    for (int c=0; c < idm.getNumConds(); c++) {
      double[] probs=Vectors.getExp(optimalLogProbs[c]);
      if (!Utilities.lte(Vectors.sum(probs),1.0,1e-8)) {
        log.warn(String.format(""String_Node_Str"",c,Vectors.sum(probs)));
      }
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(Utilities.copyOf(optimalLogProbs),fracRoots,fracParses,objective,status);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}","public RelaxedDmvSolution solveRelaxation(double incumbentScore){
  try {
    double upperBound=-incumbentScore;
    Pair<SimpleStatus,Double> pair=runDWAlgo(cplex,mp,upperBound);
    SimpleStatus status=pair.get1();
    double lowerBound=pair.get2();
    double objective=-lowerBound;
    assert(!Double.isNaN(objective));
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (!status.hasSolution()) {
      return new RelaxedDmvSolution(null,null,null,objective,status);
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + lowerBound);
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.gammaVars.size()));
    optimalLogProbs=new double[idm.getNumConds()][];
    for (int i=0; i < mp.gammaVars.size(); i++) {
      GammaVar gv=mp.gammaVars.get(i);
      double gammaValue=cplex.getValue(gv.gammaVar);
      for (int c=0; c < idm.getNumConds(); c++) {
        int numParams=idm.getNumParams(c);
        if (optimalLogProbs[c] == null) {
          optimalLogProbs[c]=new double[numParams];
        }
        for (int m=0; m < numParams; m++) {
          optimalLogProbs[c][m]+=gammaValue * gv.logProbs[c][m];
        }
      }
    }
    for (int c=0; c < idm.getNumConds(); c++) {
      double[] probs=Vectors.getExp(optimalLogProbs[c]);
      if (!Utilities.lte(Vectors.sum(probs),1.0,1e-8)) {
        log.warn(String.format(""String_Node_Str"",c,Vectors.sum(probs)));
      }
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(Utilities.copyOf(optimalLogProbs),fracRoots,fracParses,objective,status);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}",0.9852558542931484
131742,"@Test public void testCutsOnManyPosTags(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences,15);
  RelaxedDmvSolution relaxSol=dw.solveRelaxation();
  assertEquals(0.0,relaxSol.getScore(),1e-11);
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    Vectors.exp(logProbs[c]);
    System.out.println(dw.getIdm().getName(c,0) + ""String_Node_Str"" + Vectors.sum(logProbs[c]));
    Assert.assertTrue(Vectors.sum(logProbs[c]) <= DmvDantzigWolfeRelaxation.DEFAULT_MIN_SUM_FOR_CUTS);
  }
}","@Test public void testCutsOnManyPosTags(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences,15);
  RelaxedDmvSolution relaxSol=dw.solveRelaxation();
  assertEquals(0.0,relaxSol.getScore(),DEFAULT_SOLUTION_TOLERANCE);
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    Vectors.exp(logProbs[c]);
    System.out.println(dw.getIdm().getName(c,0) + ""String_Node_Str"" + Vectors.sum(logProbs[c]));
    Assert.assertTrue(Vectors.sum(logProbs[c]) <= DmvDantzigWolfeRelaxation.DEFAULT_MIN_SUM_FOR_CUTS);
  }
}",0.6615969581749049
131743,"@Test public void testAdditionalCuttingPlanes(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  int maxCuts=5;
  double[] maxSums=new double[maxCuts];
  double prevSum=Double.POSITIVE_INFINITY;
  for (int numCuts=1; numCuts < maxCuts; numCuts++) {
    Prng.seed(12345);
    DmvDantzigWolfeRelaxationResolution dw=getDw(sentences,numCuts);
    RelaxedDmvSolution relaxSol=dw.solveRelaxation();
    assertEquals(0.0,relaxSol.getScore(),1e-11);
    double maxSum=0.0;
    double[][] logProbs=relaxSol.getLogProbs();
    for (int c=0; c < logProbs.length; c++) {
      Vectors.exp(logProbs[c]);
      double sum=Vectors.sum(logProbs[c]);
      if (sum > maxSum) {
        maxSum=sum;
      }
    }
    maxSums[numCuts]=maxSum;
    System.out.println(""String_Node_Str"" + Arrays.toString(maxSums));
    Assert.assertTrue(maxSum <= prevSum);
    prevSum=maxSum;
  }
  System.out.println(""String_Node_Str"" + Arrays.toString(maxSums));
}","@Test public void testAdditionalCuttingPlanes(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  int maxCuts=5;
  double[] maxSums=new double[maxCuts];
  double prevSum=Double.POSITIVE_INFINITY;
  for (int numCuts=1; numCuts < maxCuts; numCuts++) {
    Prng.seed(12345);
    DmvDantzigWolfeRelaxationResolution dw=getDw(sentences,numCuts);
    RelaxedDmvSolution relaxSol=dw.solveRelaxation();
    assertEquals(0.0,relaxSol.getScore(),DEFAULT_SOLUTION_TOLERANCE);
    double maxSum=0.0;
    double[][] logProbs=relaxSol.getLogProbs();
    for (int c=0; c < logProbs.length; c++) {
      Vectors.exp(logProbs[c]);
      double sum=Vectors.sum(logProbs[c]);
      if (sum > maxSum) {
        maxSum=sum;
      }
    }
    maxSums[numCuts]=maxSum;
    System.out.println(""String_Node_Str"" + Arrays.toString(maxSums));
    Assert.assertTrue(maxSum <= prevSum);
    prevSum=maxSum;
  }
  System.out.println(""String_Node_Str"" + Arrays.toString(maxSums));
}",0.9873002867677182
131744,"@Test public void testTwoSentences(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences);
  RelaxedDmvSolution relaxSol=dw.solveRelaxation();
  assertEquals(0.0,relaxSol.getScore(),1e-11);
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    Vectors.exp(logProbs[c]);
    System.out.println(dw.getIdm().getName(c,0) + ""String_Node_Str"" + Vectors.sum(logProbs[c]));
  }
}","@Test public void testTwoSentences(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences);
  RelaxedDmvSolution relaxSol=dw.solveRelaxation();
  assertEquals(0.0,relaxSol.getScore(),DEFAULT_SOLUTION_TOLERANCE);
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    Vectors.exp(logProbs[c]);
    System.out.println(dw.getIdm().getName(c,0) + ""String_Node_Str"" + Vectors.sum(logProbs[c]));
  }
}",0.9738837405223252
131745,"/** 
 * Helper function 
 * @return DW relaxation with 1 round of cuts, and 1 initial cut per parameter
 */
public static DmvDantzigWolfeRelaxationResolution getDw(SentenceCollection sentences,final int numCuts){
  DmvSolution initSol=getInitFeasSol(sentences);
  System.out.println(initSol);
  DmvDantzigWolfeRelaxationResolution dw=new DmvDantzigWolfeRelaxationResolution(new File(""String_Node_Str""));
  dw.init(sentences,initSol);
  return dw;
}","/** 
 * Helper function 
 * @return DW relaxation with 1 round of cuts, and 1 initial cut per parameter
 */
public static DmvDantzigWolfeRelaxationResolution getDw(SentenceCollection sentences,final int numCuts){
  DmvSolution initSol=getInitFeasSol(sentences);
  System.out.println(initSol);
  DmvDantzigWolfeRelaxationResolution dw=new DmvDantzigWolfeRelaxationResolution(new File(""String_Node_Str""));
  dw.setSentences(sentences);
  dw.init(initSol);
  return dw;
}",0.945414847161572
131746,"@Test public void testThreeWordSentence(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences);
  RelaxedDmvSolution relaxSol=dw.solveRelaxation();
  assertEquals(0.0,relaxSol.getScore(),1e-11);
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    Vectors.exp(logProbs[c]);
    System.out.println(dw.getIdm().getName(c,0) + ""String_Node_Str"" + Vectors.sum(logProbs[c]));
    for (int m=0; m < logProbs[c].length; m++) {
    }
  }
}","@Test public void testThreeWordSentence(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences);
  RelaxedDmvSolution relaxSol=dw.solveRelaxation();
  assertEquals(0.0,relaxSol.getScore(),DEFAULT_SOLUTION_TOLERANCE);
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    Vectors.exp(logProbs[c]);
    System.out.println(dw.getIdm().getName(c,0) + ""String_Node_Str"" + Vectors.sum(logProbs[c]));
    for (int m=0; m < logProbs[c].length; m++) {
    }
  }
}",0.9741451209341118
131747,"@Test public void testBounds(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences);
  DmvBounds bds=dw.getBounds();
  double origLower=bds.getLb(0,0);
  double origUpper=bds.getUb(0,0);
  double newL, newU;
  newL=Utilities.log(0.11);
  newU=Utilities.log(0.90);
  RelaxedDmvSolution relaxSol;
  relaxSol=testBoundsHelper(dw,origLower,origUpper,true);
  tempStaticLogProbs=relaxSol.getLogProbs();
  assertEquals(0.0,relaxSol.getScore(),1e-11);
  relaxSol=testBoundsHelper(dw,newL,newU,true);
  relaxSol=testBoundsHelper(dw,origLower,origUpper,true);
  assertEquals(0.0,relaxSol.getScore(),1e-7);
  assertEquals(origLower,bds.getLb(0,0),1e-7);
  assertEquals(origUpper,bds.getUb(0,0),1e-13);
}","@Test public void testBounds(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences);
  DmvBounds bds=dw.getBounds();
  double origLower=bds.getLb(0,0);
  double origUpper=bds.getUb(0,0);
  double newL, newU;
  newL=Utilities.log(0.11);
  newU=Utilities.log(0.90);
  RelaxedDmvSolution relaxSol;
  relaxSol=testBoundsHelper(dw,origLower,origUpper,true);
  tempStaticLogProbs=relaxSol.getLogProbs();
  assertEquals(0.0,relaxSol.getScore(),DEFAULT_SOLUTION_TOLERANCE);
  relaxSol=testBoundsHelper(dw,newL,newU,true);
  relaxSol=testBoundsHelper(dw,origLower,origUpper,true);
  assertEquals(0.0,relaxSol.getScore(),1e-7);
  assertEquals(origLower,bds.getLb(0,0),1e-7);
  assertEquals(origUpper,bds.getUb(0,0),1e-13);
}",0.982275586049171
131748,"@Test public void testOneWordSentence(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences);
  RelaxedDmvSolution relaxSol=dw.solveRelaxation();
  assertEquals(0.0,relaxSol.getScore(),1e-11);
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    Vectors.exp(logProbs[c]);
    System.out.println(dw.getIdm().getName(c,0) + ""String_Node_Str"" + Vectors.sum(logProbs[c]));
    for (int m=0; m < logProbs[c].length; m++) {
    }
  }
}","@Test public void testOneWordSentence(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  DmvDantzigWolfeRelaxationResolution dw=getDw(sentences);
  RelaxedDmvSolution relaxSol=dw.solveRelaxation();
  assertEquals(0.0,relaxSol.getScore(),DEFAULT_SOLUTION_TOLERANCE);
  double[][] logProbs=relaxSol.getLogProbs();
  for (int c=0; c < logProbs.length; c++) {
    Vectors.exp(logProbs[c]);
    System.out.println(dw.getIdm().getName(c,0) + ""String_Node_Str"" + Vectors.sum(logProbs[c]));
    for (int m=0; m < logProbs[c].length; m++) {
    }
  }
}",0.9740585774058578
131749,"/** 
 * Helper function 
 * @return DW relaxation with 1 round of cuts, and 1 initial cut per parameter
 */
public static DmvDantzigWolfeRelaxation getDw(SentenceCollection sentences,final int numCuts){
  DmvSolution initSol=getInitFeasSol(sentences);
  System.out.println(initSol);
  CutCountComputer ccc=new CutCountComputer(){
    @Override public int getNumCuts(    int numParams){
      return numCuts;
    }
  }
;
  DmvDantzigWolfeRelaxation dw=new DmvDantzigWolfeRelaxation(new File(""String_Node_Str""),numCuts,ccc);
  dw.init(sentences,initSol);
  return dw;
}","/** 
 * Helper function 
 * @return DW relaxation with 1 round of cuts, and 1 initial cut per parameter
 */
public static DmvDantzigWolfeRelaxation getDw(SentenceCollection sentences,final int numCuts){
  DmvSolution initSol=getInitFeasSol(sentences);
  System.out.println(initSol);
  CutCountComputer ccc=new CutCountComputer(){
    @Override public int getNumCuts(    int numParams){
      return numCuts;
    }
  }
;
  DmvDantzigWolfeRelaxation dw=new DmvDantzigWolfeRelaxation(new File(""String_Node_Str""),numCuts,ccc);
  dw.setSentences(sentences);
  dw.init(initSol);
  return dw;
}",0.9566724436741768
131750,"public SearchStatus runBranchAndBound(ProblemNode rootNode,double epsilon,Comparator<ProblemNode> comparator){
  this.incumbentSolution=null;
  this.incumbentScore=WORST_SCORE;
  double upperBound=BEST_SCORE;
  status=SearchStatus.NON_OPTIMAL_SOLUTION_FOUND;
  leafNodePQ=new PriorityQueue<ProblemNode>(11,comparator);
  upperBoundPQ=new PriorityQueue<ProblemNode>(11,new BfsComparator());
  int numFathomed=0;
  addToLeafNodes(rootNode);
  while (hasNextLeafNode()) {
    if (upperBoundPQ.peek().getOptimisticBound() > upperBound + 1e-8) {
      log.warn(String.format(""String_Node_Str"",upperBoundPQ.peek().getOptimisticBound(),upperBound));
    }
    upperBound=upperBoundPQ.peek().getOptimisticBound();
    ProblemNode curNode=getNextLeafNode();
    assert(!Double.isNaN(upperBound));
    double relativeDiff=Math.abs(upperBound - incumbentScore) / Math.abs(incumbentScore);
    log.info(String.format(""String_Node_Str"",upperBound,incumbentScore,relativeDiff,leafNodePQ.size(),numFathomed));
    if (log.isDebugEnabled()) {
      double[] bounds=new double[leafNodePQ.size()];
      int i=0;
      for (      ProblemNode node : leafNodePQ) {
        bounds[i]=node.getOptimisticBound();
        i++;
      }
      log.debug(getHistogram(bounds));
    }
    curNode.setAsActiveNode();
    if (relativeDiff <= epsilon) {
      status=SearchStatus.OPTIMAL_SOLUTION_FOUND;
      curNode.end();
      break;
    }
    log.info(String.format(""String_Node_Str"",curNode.getId(),curNode.getDepth(),curNode.getSide()));
    if (curNode.getOptimisticBound(incumbentScore) <= incumbentScore) {
      numFathomed++;
      continue;
    }
    Solution sol=curNode.getFeasibleSolution();
    assert(sol == null || !Double.isNaN(sol.getScore()));
    if (sol != null && sol.getScore() > incumbentScore) {
      incumbentScore=sol.getScore();
      incumbentSolution=sol;
    }
    List<ProblemNode> children=curNode.branch();
    for (    ProblemNode childNode : children) {
      addToLeafNodes(childNode);
    }
  }
  double relativeDiff=Math.abs(upperBound - incumbentScore) / Math.abs(incumbentScore);
  log.info(String.format(""String_Node_Str"",upperBound,incumbentScore,relativeDiff,leafNodePQ.size(),numFathomed));
  leafNodePQ=null;
  log.info(""String_Node_Str"" + status);
  return status;
}","public SearchStatus runBranchAndBound(ProblemNode rootNode,double epsilon,Comparator<ProblemNode> comparator){
  this.incumbentSolution=null;
  this.incumbentScore=WORST_SCORE;
  double upperBound=BEST_SCORE;
  status=SearchStatus.NON_OPTIMAL_SOLUTION_FOUND;
  leafNodePQ=new PriorityQueue<ProblemNode>(11,comparator);
  upperBoundPQ=new PriorityQueue<ProblemNode>(11,new BfsComparator());
  int numFathomed=0;
  addToLeafNodes(rootNode);
  ProblemNode curNode=null;
  while (hasNextLeafNode()) {
    if (upperBoundPQ.peek().getOptimisticBound() > upperBound + 1e-8) {
      log.warn(String.format(""String_Node_Str"",upperBoundPQ.peek().getOptimisticBound(),upperBound));
    }
    upperBound=upperBoundPQ.peek().getOptimisticBound();
    curNode=getNextLeafNode();
    assert(!Double.isNaN(upperBound));
    double relativeDiff=Math.abs(upperBound - incumbentScore) / Math.abs(incumbentScore);
    log.info(String.format(""String_Node_Str"",upperBound,incumbentScore,relativeDiff,leafNodePQ.size(),numFathomed));
    if (log.isDebugEnabled()) {
      double[] bounds=new double[leafNodePQ.size()];
      int i=0;
      for (      ProblemNode node : leafNodePQ) {
        bounds[i]=node.getOptimisticBound();
        i++;
      }
      log.debug(getHistogram(bounds));
    }
    curNode.setAsActiveNode();
    if (relativeDiff <= epsilon) {
      break;
    }
    log.info(String.format(""String_Node_Str"",curNode.getId(),curNode.getDepth(),curNode.getSide()));
    if (curNode.getOptimisticBound(incumbentScore) <= incumbentScore) {
      numFathomed++;
      continue;
    }
    Solution sol=curNode.getFeasibleSolution();
    assert(sol == null || !Double.isNaN(sol.getScore()));
    if (sol != null && sol.getScore() > incumbentScore) {
      incumbentScore=sol.getScore();
      incumbentSolution=sol;
    }
    List<ProblemNode> children=curNode.branch();
    for (    ProblemNode childNode : children) {
      addToLeafNodes(childNode);
    }
  }
  if (curNode != null) {
    curNode.end();
  }
  double relativeDiff=Math.abs(upperBound - incumbentScore) / Math.abs(incumbentScore);
  if (relativeDiff <= epsilon) {
    status=SearchStatus.OPTIMAL_SOLUTION_FOUND;
  }
  log.info(String.format(""String_Node_Str"",upperBound,incumbentScore,relativeDiff,leafNodePQ.size(),numFathomed));
  leafNodePQ=null;
  log.info(""String_Node_Str"" + status);
  return status;
}",0.6695352839931153
131751,"public static Object getTrainer(CommandLine cmd) throws ParseException {
  final String algorithm=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final int iterations=Command.getOptionValue(cmd,""String_Node_Str"",10);
  final double convergenceRatio=Command.getOptionValue(cmd,""String_Node_Str"",0.99999);
  final String modelName=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String parserName=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String deltaGenerator=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final double interval=Command.getOptionValue(cmd,""String_Node_Str"",0.01);
  final double factor=Command.getOptionValue(cmd,""String_Node_Str"",1.1);
  final int numPerSide=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final IlpFormulation formulation=getOptionValue(cmd,""String_Node_Str"",IlpFormulation.DP_PROJ);
  final double lambda=Command.getOptionValue(cmd,""String_Node_Str"",0.1);
  final int numThreads=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final String ilpSolver=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final double ilpWorkMemMegs=Command.getOptionValue(cmd,""String_Node_Str"",512.0);
  final double epsilon=Command.getOptionValue(cmd,""String_Node_Str"",0.1);
  final String branch=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String relaxation=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final int maxSimplexIterations=Command.getOptionValue(cmd,""String_Node_Str"",2100000000);
  final int maxDwIterations=Command.getOptionValue(cmd,""String_Node_Str"",1000);
  final int maxSetSizeToConstrain=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final int maxCutRounds=Command.getOptionValue(cmd,""String_Node_Str"",100);
  final double minSumForCuts=Command.getOptionValue(cmd,""String_Node_Str"",1.01);
  final String dwTempDir=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  DmvRelaxation relax=null;
  if (cmd.hasOption(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    File dwTemp=dwTempDir.equals(""String_Node_Str"") ? null : new File(dwTempDir);
    if (relaxation.equals(""String_Node_Str"")) {
      DmvDantzigWolfeRelaxation dw=new DmvDantzigWolfeRelaxation(dwTemp,maxCutRounds,new CutCountComputer());
      dw.setMaxSimplexIterations(maxSimplexIterations);
      dw.setMaxDwIterations(maxDwIterations);
      dw.setMaxSetSizeToConstrain(maxSetSizeToConstrain);
      dw.setMinSumForCuts(minSumForCuts);
      relax=dw;
    }
 else     if (relaxation.equals(""String_Node_Str"")) {
      DmvDantzigWolfeRelaxationResolution dw=new DmvDantzigWolfeRelaxationResolution(dwTemp);
      dw.setMaxSimplexIterations(maxSimplexIterations);
      dw.setMaxDwIterations(maxDwIterations);
      relax=dw;
    }
 else     if (relaxation.equals(""String_Node_Str"")) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else {
      throw new ParseException(""String_Node_Str"" + relaxation);
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      return relax;
    }
  }
  Trainer trainer=null;
  if (algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    if (modelName.equals(""String_Node_Str"")) {
      evalParser=new DmvCkyParser();
      IlpSolverFactory ilpSolverFactory=null;
      if (parserName.startsWith(""String_Node_Str"")) {
        IlpSolverId ilpSolverId=IlpSolverId.getById(ilpSolver);
        ilpSolverFactory=new IlpSolverFactory(ilpSolverId,numThreads,ilpWorkMemMegs);
        ilpSolverFactory.setBlockFileWriter(new DeltaParseBlockFileWriter(formulation));
      }
      if (parserName.equals(""String_Node_Str"")) {
        parser=new DmvCkyParser();
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiSentenceParser(formulation,ilpSolverFactory);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParser(formulation,ilpSolverFactory);
      }
 else       if (parserName.equals(""String_Node_Str"") || parserName.equals(""String_Node_Str"")) {
        DeltaGenerator deltaGen;
        if (deltaGenerator.equals(""String_Node_Str"")) {
          deltaGen=new FixedIntervalDeltaGenerator(interval,numPerSide);
        }
 else         if (deltaGenerator.equals(""String_Node_Str"")) {
          deltaGen=new FactorDeltaGenerator(factor,numPerSide);
        }
 else {
          throw new ParseException(""String_Node_Str"" + deltaGenerator);
        }
        if (parserName.equals(""String_Node_Str"")) {
          parser=new IlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen);
        }
 else         if (parserName.equals(""String_Node_Str"")) {
          parser=new InitializedIlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen,ilpSolverFactory);
        }
 else {
          throw new ParseException(""String_Node_Str"" + parserName);
        }
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    MStep<DepTreebank> mStep;
    ModelFactory modelFactory;
    if (modelName.equals(""String_Node_Str"")) {
      mStep=new DmvMStep(lambda);
      modelFactory=new DmvModelFactory(new DmvUniformWeightGenerator());
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    trainer=new ViterbiTrainer(parser,mStep,modelFactory,iterations,convergenceRatio);
  }
 else   if (algorithm.equals(""String_Node_Str"")) {
    if (modelName.equals(""String_Node_Str"")) {
      DmvBoundsDeltaFactory brancher;
      if (branch.equals(""String_Node_Str"")) {
        brancher=new FullStrongBranchingDeltaFactory();
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RegretDmvBoundsDeltaFactory();
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RandomDmvBoundsDeltaFactory(true);
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RandomDmvBoundsDeltaFactory(false);
      }
 else {
        throw new ParseException(""String_Node_Str"" + branch);
      }
      trainer=new BnBDmvTrainer(epsilon,brancher,relax);
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
  }
 else {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}","public static Object getTrainer(CommandLine cmd) throws ParseException {
  final String algorithm=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final int iterations=Command.getOptionValue(cmd,""String_Node_Str"",10);
  final double convergenceRatio=Command.getOptionValue(cmd,""String_Node_Str"",0.99999);
  final String modelName=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String parserName=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String deltaGenerator=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final double interval=Command.getOptionValue(cmd,""String_Node_Str"",0.01);
  final double factor=Command.getOptionValue(cmd,""String_Node_Str"",1.1);
  final int numPerSide=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final IlpFormulation formulation=getOptionValue(cmd,""String_Node_Str"",IlpFormulation.DP_PROJ);
  final double lambda=Command.getOptionValue(cmd,""String_Node_Str"",0.1);
  final int numThreads=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final String ilpSolver=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final double ilpWorkMemMegs=Command.getOptionValue(cmd,""String_Node_Str"",512.0);
  final double epsilon=Command.getOptionValue(cmd,""String_Node_Str"",0.1);
  final String branch=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String relaxation=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final int maxSimplexIterations=Command.getOptionValue(cmd,""String_Node_Str"",2100000000);
  final int maxDwIterations=Command.getOptionValue(cmd,""String_Node_Str"",1000);
  final int maxSetSizeToConstrain=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final int maxCutRounds=Command.getOptionValue(cmd,""String_Node_Str"",100);
  final double minSumForCuts=Command.getOptionValue(cmd,""String_Node_Str"",1.01);
  final String dwTempDir=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  DmvRelaxation relax=null;
  if (cmd.hasOption(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    File dwTemp=dwTempDir.equals(""String_Node_Str"") ? null : new File(dwTempDir);
    if (relaxation.equals(""String_Node_Str"")) {
      DmvDantzigWolfeRelaxation dw=new DmvDantzigWolfeRelaxation(dwTemp,maxCutRounds,new CutCountComputer());
      dw.setMaxSimplexIterations(maxSimplexIterations);
      dw.setMaxDwIterations(maxDwIterations);
      dw.setMaxSetSizeToConstrain(maxSetSizeToConstrain);
      dw.setMinSumForCuts(minSumForCuts);
      relax=dw;
    }
 else     if (relaxation.equals(""String_Node_Str"")) {
      DmvDantzigWolfeRelaxationResolution dw=new DmvDantzigWolfeRelaxationResolution(dwTemp);
      dw.setMaxSimplexIterations(maxSimplexIterations);
      dw.setMaxDwIterations(maxDwIterations);
      relax=dw;
    }
 else     if (relaxation.equals(""String_Node_Str"")) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else {
      throw new ParseException(""String_Node_Str"" + relaxation);
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      return relax;
    }
  }
  if (modelName.equals(""String_Node_Str"")) {
    evalParser=new DmvCkyParser();
  }
  Trainer trainer=null;
  if (algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    if (modelName.equals(""String_Node_Str"")) {
      IlpSolverFactory ilpSolverFactory=null;
      if (parserName.startsWith(""String_Node_Str"")) {
        IlpSolverId ilpSolverId=IlpSolverId.getById(ilpSolver);
        ilpSolverFactory=new IlpSolverFactory(ilpSolverId,numThreads,ilpWorkMemMegs);
        ilpSolverFactory.setBlockFileWriter(new DeltaParseBlockFileWriter(formulation));
      }
      if (parserName.equals(""String_Node_Str"")) {
        parser=new DmvCkyParser();
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiSentenceParser(formulation,ilpSolverFactory);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParser(formulation,ilpSolverFactory);
      }
 else       if (parserName.equals(""String_Node_Str"") || parserName.equals(""String_Node_Str"")) {
        DeltaGenerator deltaGen;
        if (deltaGenerator.equals(""String_Node_Str"")) {
          deltaGen=new FixedIntervalDeltaGenerator(interval,numPerSide);
        }
 else         if (deltaGenerator.equals(""String_Node_Str"")) {
          deltaGen=new FactorDeltaGenerator(factor,numPerSide);
        }
 else {
          throw new ParseException(""String_Node_Str"" + deltaGenerator);
        }
        if (parserName.equals(""String_Node_Str"")) {
          parser=new IlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen);
        }
 else         if (parserName.equals(""String_Node_Str"")) {
          parser=new InitializedIlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen,ilpSolverFactory);
        }
 else {
          throw new ParseException(""String_Node_Str"" + parserName);
        }
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    MStep<DepTreebank> mStep;
    ModelFactory modelFactory;
    if (modelName.equals(""String_Node_Str"")) {
      mStep=new DmvMStep(lambda);
      modelFactory=new DmvModelFactory(new DmvUniformWeightGenerator());
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    trainer=new ViterbiTrainer(parser,mStep,modelFactory,iterations,convergenceRatio);
  }
 else   if (algorithm.equals(""String_Node_Str"")) {
    if (modelName.equals(""String_Node_Str"")) {
      DmvBoundsDeltaFactory brancher;
      if (branch.equals(""String_Node_Str"")) {
        brancher=new FullStrongBranchingDeltaFactory();
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RegretDmvBoundsDeltaFactory();
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RandomDmvBoundsDeltaFactory(true);
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RandomDmvBoundsDeltaFactory(false);
      }
 else {
        throw new ParseException(""String_Node_Str"" + branch);
      }
      trainer=new BnBDmvTrainer(epsilon,brancher,relax);
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
  }
 else {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}",0.9794257998904796
131752,"public double[][] getRegretCm(){
  try {
    double[][] featCounts=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      featCounts[c]=new double[idm.getNumParams(c)];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] sentSol=triple.sentSol;
      for (int i=0; i < sentSol.length; i++) {
        int c=idm.getC(s,i);
        int m=idm.getM(s,i);
        featCounts[c][m]+=sentSol[i] * frac;
      }
    }
    double[][] objVals=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      objVals[c]=cplex.getValues(mp.objVars[c]);
    }
    double[][] regret=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      regret[c]=new double[idm.getNumParams(c)];
      for (int m=0; m < idm.getNumParams(c); m++) {
        regret[c][m]=objVals[c][m] - (logProbs[c][m] * featCounts[c][m]);
        if (!Utilities.gte(regret[c][m],0.0,1e-7)) {
          log.warn(String.format(""String_Node_Str"",c,m,regret[c][m]));
        }
      }
    }
    return regret;
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}","public double[][] getRegretCm(){
  try {
    double[][] featCounts=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      featCounts[c]=new double[idm.getNumParams(c)];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] sentSol=triple.sentSol;
      for (int i=0; i < sentSol.length; i++) {
        int c=idm.getC(s,i);
        int m=idm.getM(s,i);
        featCounts[c][m]+=sentSol[i] * frac;
      }
    }
    double[][] objVals=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      objVals[c]=cplex.getValues(mp.objVars[c]);
    }
    double[][] regret=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      regret[c]=new double[idm.getNumParams(c)];
      for (int m=0; m < idm.getNumParams(c); m++) {
        regret[c][m]=objVals[c][m] - (optimalLogProbs[c][m] * featCounts[c][m]);
        if (!Utilities.gte(regret[c][m],0.0,1e-7)) {
          log.warn(String.format(""String_Node_Str"",c,m,regret[c][m]));
        }
      }
    }
    return regret;
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}",0.9962794543199668
131753,"public RelaxedDmvSolution solveRelaxation(){
  try {
    Status status=runDWAlgo(cplex,mp);
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (status != Status.Optimal) {
      return new RelaxedDmvSolution(null,null,null,LazyBranchAndBoundSolver.WORST_SCORE,status);
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + cplex.getObjValue());
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.numStoCons));
    double objective=-cplex.getObjValue();
    assert(!Double.isNaN(objective));
    assert(Utilities.lte(objective,0.0,1e-7));
    logProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      logProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(logProbs,fracRoots,fracParses,objective,status);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}","public RelaxedDmvSolution solveRelaxation(){
  try {
    Status status=runDWAlgo(cplex,mp);
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (status != Status.Optimal) {
      return new RelaxedDmvSolution(null,null,null,LazyBranchAndBoundSolver.WORST_SCORE,status);
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + cplex.getObjValue());
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.numStoCons));
    double objective=-cplex.getObjValue();
    assert(!Double.isNaN(objective));
    assert(Utilities.lte(objective,0.0,1e-7));
    optimalLogProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      optimalLogProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(Utilities.copyOf(optimalLogProbs),fracRoots,fracParses,objective,status);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}",0.989667049368542
131754,"public double[][] getRegretCm(){
  try {
    double[][] featCounts=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      featCounts[c]=new double[idm.getNumParams(c)];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] sentSol=triple.sentSol;
      for (int i=0; i < sentSol.length; i++) {
        int c=idm.getC(s,i);
        int m=idm.getM(s,i);
        featCounts[c][m]+=sentSol[i] * frac;
      }
    }
    double[][] objVals=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      objVals[c]=cplex.getValues(mp.objVars[c]);
    }
    double[][] regret=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      regret[c]=new double[idm.getNumParams(c)];
      for (int m=0; m < idm.getNumParams(c); m++) {
        regret[c][m]=objVals[c][m] - (logProbs[c][m] * featCounts[c][m]);
        if (!Utilities.gte(regret[c][m],0.0,1e-7)) {
          log.warn(String.format(""String_Node_Str"",c,m,regret[c][m]));
        }
      }
    }
    return regret;
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}","public double[][] getRegretCm(){
  try {
    double[][] featCounts=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      featCounts[c]=new double[idm.getNumParams(c)];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] sentSol=triple.sentSol;
      for (int i=0; i < sentSol.length; i++) {
        int c=idm.getC(s,i);
        int m=idm.getM(s,i);
        featCounts[c][m]+=sentSol[i] * frac;
      }
    }
    double[][] objVals=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      objVals[c]=cplex.getValues(mp.objVars[c]);
    }
    double[][] regret=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      regret[c]=new double[idm.getNumParams(c)];
      for (int m=0; m < idm.getNumParams(c); m++) {
        regret[c][m]=objVals[c][m] - (optimalLogProbs[c][m] * featCounts[c][m]);
        if (!Utilities.gte(regret[c][m],0.0,1e-7)) {
          log.warn(String.format(""String_Node_Str"",c,m,regret[c][m]));
        }
      }
    }
    return regret;
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}",0.9962794543199668
131755,"public RelaxedDmvSolution solveRelaxation(){
  try {
    Status status=runDWAlgo(cplex,mp);
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (status != Status.Optimal) {
      return new RelaxedDmvSolution(null,null,null,LazyBranchAndBoundSolver.WORST_SCORE,status);
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + cplex.getObjValue());
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.gammaVars.size()));
    double objective=-cplex.getObjValue();
    assert(!Double.isNaN(objective));
    assert(Utilities.lte(objective,0.0,1e-7));
    logProbs=new double[idm.getNumConds()][];
    for (int i=0; i < mp.gammaVars.size(); i++) {
      GammaVar gv=mp.gammaVars.get(i);
      double gammaValue=cplex.getValue(gv.gammaVar);
      for (int c=0; c < idm.getNumConds(); c++) {
        int numParams=idm.getNumParams(c);
        if (logProbs[c] == null) {
          logProbs[c]=new double[numParams];
        }
        for (int m=0; m < numParams; m++) {
          logProbs[c][m]+=gammaValue * gv.logProbs[c][m];
        }
      }
    }
    for (int c=0; c < idm.getNumConds(); c++) {
      double[] probs=Vectors.getExp(logProbs[c]);
      if (!Utilities.lte(Vectors.sum(probs),1.0,1e-8)) {
        log.warn(String.format(""String_Node_Str"",c,Vectors.sum(probs)));
      }
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(logProbs,fracRoots,fracParses,objective,status);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}","public RelaxedDmvSolution solveRelaxation(){
  try {
    Status status=runDWAlgo(cplex,mp);
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + status);
    if (status != Status.Optimal) {
      return new RelaxedDmvSolution(null,null,null,LazyBranchAndBoundSolver.WORST_SCORE,status);
    }
    if (tempDir != null) {
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + cplex.getObjValue());
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.gammaVars.size()));
    double objective=-cplex.getObjValue();
    assert(!Double.isNaN(objective));
    assert(Utilities.lte(objective,0.0,1e-7));
    optimalLogProbs=new double[idm.getNumConds()][];
    for (int i=0; i < mp.gammaVars.size(); i++) {
      GammaVar gv=mp.gammaVars.get(i);
      double gammaValue=cplex.getValue(gv.gammaVar);
      for (int c=0; c < idm.getNumConds(); c++) {
        int numParams=idm.getNumParams(c);
        if (optimalLogProbs[c] == null) {
          optimalLogProbs[c]=new double[numParams];
        }
        for (int m=0; m < numParams; m++) {
          optimalLogProbs[c][m]+=gammaValue * gv.logProbs[c][m];
        }
      }
    }
    for (int c=0; c < idm.getNumConds(); c++) {
      double[] probs=Vectors.getExp(optimalLogProbs[c]);
      if (!Utilities.lte(Vectors.sum(probs),1.0,1e-8)) {
        log.warn(String.format(""String_Node_Str"",c,Vectors.sum(probs)));
      }
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(Utilities.copyOf(optimalLogProbs),fracRoots,fracParses,objective,status);
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}",0.9870317002881844
131756,"public void run(CommandLine cmd) throws ParseException, IOException {
  DepTreebank depTreebank;
  if (cmd.hasOption(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
    String trainPath=cmd.getOptionValue(""String_Node_Str"");
    int maxSentenceLength=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    depTreebank=new DepTreebank(maxSentenceLength,maxNumSentences);
    if (cmd.hasOption(""String_Node_Str"")) {
      depTreebank.setTreeFilter(new VerbTreeFilter());
    }
    depTreebank.loadPath(trainPath);
    String reduceTags=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
    if (""String_Node_Str"".equals(reduceTags)) {
      log.info(""String_Node_Str"");
      (new Ptb45To17TagReducer()).reduceTags(depTreebank);
    }
 else     if (!""String_Node_Str"".equals(reduceTags)) {
      log.info(""String_Node_Str"" + reduceTags);
      (new FileMapTagReducer(new File(reduceTags))).reduceTags(depTreebank);
    }
  }
 else   if (cmd.hasOption(""String_Node_Str"")) {
    DmvModel trueModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    long syntheticSeed=123454321;
    if (cmd.hasOption(""String_Node_Str"")) {
      syntheticSeed=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(trueModel,syntheticSeed);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",100);
    depTreebank=generator.getTreebank(maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + depTreebank.size());
  log.info(""String_Node_Str"" + depTreebank.getNumTokens());
  log.info(""String_Node_Str"" + depTreebank.getNumTypes());
  SentenceCollection sentences=depTreebank.getSentences();
  printSentences(cmd,depTreebank,sentences);
  if (cmd.hasOption(""String_Node_Str"")) {
    DmvDantzigWolfeRelaxation dw=DmvDantzigWolfeRelaxationTest.getDw(sentences,100);
    DmvSolution initBoundsSol=updateBounds(cmd,sentences,dw);
    Stopwatch timer=new Stopwatch();
    timer.start();
    RelaxedDmvSolution relaxSol=dw.solveRelaxation();
    timer.stop();
    log.info(""String_Node_Str"" + Time.totMs(timer));
    log.info(""String_Node_Str"" + relaxSol.getScore());
    if (initBoundsSol != null) {
      log.info(""String_Node_Str"" + Math.abs(relaxSol.getScore() - initBoundsSol.getScore()) / Math.abs(initBoundsSol.getScore()));
    }
  }
 else {
    log.info(""String_Node_Str"");
    Trainer trainer=TrainerFactory.getTrainer(cmd);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(sentences);
      updateBounds(cmd,sentences,bnb.getRootRelaxation());
      bnb.train();
    }
 else {
      trainer.train(sentences);
    }
    Model model=trainer.getModel();
    log.info(""String_Node_Str"");
    ViterbiParser parser=TrainerFactory.getEvalParser();
    Evaluator pwEval=new DependencyParserEvaluator(parser,depTreebank);
    pwEval.evaluate(model);
    pwEval.print();
    String printModel=Command.getOptionValue(cmd,""String_Node_Str"",null);
    if (printModel != null) {
      BufferedWriter writer=new BufferedWriter(new FileWriter(printModel));
      writer.write(""String_Node_Str"");
      writer.write(model.toString());
      writer.close();
    }
  }
}","public void run(CommandLine cmd) throws ParseException, IOException {
  DepTreebank depTreebank;
  if (cmd.hasOption(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
    String trainPath=cmd.getOptionValue(""String_Node_Str"");
    int maxSentenceLength=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",Integer.MAX_VALUE);
    depTreebank=new DepTreebank(maxSentenceLength,maxNumSentences);
    if (cmd.hasOption(""String_Node_Str"")) {
      depTreebank.setTreeFilter(new VerbTreeFilter());
    }
    depTreebank.loadPath(trainPath);
    String reduceTags=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
    if (""String_Node_Str"".equals(reduceTags)) {
      log.info(""String_Node_Str"");
      (new Ptb45To17TagReducer()).reduceTags(depTreebank);
    }
 else     if (!""String_Node_Str"".equals(reduceTags)) {
      log.info(""String_Node_Str"" + reduceTags);
      (new FileMapTagReducer(new File(reduceTags))).reduceTags(depTreebank);
    }
  }
 else   if (cmd.hasOption(""String_Node_Str"")) {
    DmvModel trueModel=SimpleStaticDmvModel.getTwoPosTagInstance();
    long syntheticSeed=123454321;
    if (cmd.hasOption(""String_Node_Str"")) {
      syntheticSeed=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
    DmvDepTreeGenerator generator=new DmvDepTreeGenerator(trueModel,syntheticSeed);
    int maxNumSentences=Command.getOptionValue(cmd,""String_Node_Str"",100);
    depTreebank=generator.getTreebank(maxNumSentences);
  }
 else {
    throw new ParseException(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + depTreebank.size());
  log.info(""String_Node_Str"" + depTreebank.getNumTokens());
  log.info(""String_Node_Str"" + depTreebank.getNumTypes());
  SentenceCollection sentences=depTreebank.getSentences();
  printSentences(cmd,depTreebank,sentences);
  if (cmd.hasOption(""String_Node_Str"")) {
    DmvRelaxation dw=(DmvRelaxation)TrainerFactory.getTrainer(cmd);
    DmvSolution initBoundsSol=updateBounds(cmd,sentences,dw);
    Stopwatch timer=new Stopwatch();
    timer.start();
    RelaxedDmvSolution relaxSol=dw.solveRelaxation();
    timer.stop();
    log.info(""String_Node_Str"" + Time.totMs(timer));
    log.info(""String_Node_Str"" + relaxSol.getScore());
    if (initBoundsSol != null) {
      log.info(""String_Node_Str"" + Math.abs(relaxSol.getScore() - initBoundsSol.getScore()) / Math.abs(initBoundsSol.getScore()));
    }
  }
 else {
    log.info(""String_Node_Str"");
    Trainer trainer=(Trainer)TrainerFactory.getTrainer(cmd);
    if (trainer instanceof BnBDmvTrainer) {
      BnBDmvTrainer bnb=(BnBDmvTrainer)trainer;
      bnb.init(sentences);
      updateBounds(cmd,sentences,bnb.getRootRelaxation());
      bnb.train();
    }
 else {
      trainer.train(sentences);
    }
    Model model=trainer.getModel();
    log.info(""String_Node_Str"");
    ViterbiParser parser=TrainerFactory.getEvalParser();
    Evaluator pwEval=new DependencyParserEvaluator(parser,depTreebank);
    pwEval.evaluate(model);
    pwEval.print();
    String printModel=Command.getOptionValue(cmd,""String_Node_Str"",null);
    if (printModel != null) {
      BufferedWriter writer=new BufferedWriter(new FileWriter(printModel));
      writer.write(""String_Node_Str"");
      writer.write(model.toString());
      writer.close();
    }
  }
}",0.9868656716417912
131757,"public BnBDmvTrainer(double epsilon,DmvBoundsDeltaFactory brancher,DmvRelaxation relax,File tempDir){
  this.epsilon=epsilon;
  this.bnbSolver=new LazyBranchAndBoundSolver();
  this.brancher=brancher;
  if (relax == null) {
    relax=new DmvDantzigWolfeRelaxation(null,100,new CutCountComputer());
  }
  this.relax=relax;
  this.tempDir=tempDir;
}","public BnBDmvTrainer(double epsilon,DmvBoundsDeltaFactory brancher,DmvRelaxation relax,File tempDir){
  this.epsilon=epsilon;
  this.bnbSolver=new LazyBranchAndBoundSolver();
  this.brancher=brancher;
  this.relax=relax;
  this.tempDir=tempDir;
}",0.688026981450253
131758,"public static Trainer getTrainer(CommandLine cmd) throws ParseException {
  final String algorithm=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final int iterations=Command.getOptionValue(cmd,""String_Node_Str"",10);
  final double convergenceRatio=Command.getOptionValue(cmd,""String_Node_Str"",0.99999);
  final String modelName=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String parserName=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String deltaGenerator=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final double interval=Command.getOptionValue(cmd,""String_Node_Str"",0.01);
  final double factor=Command.getOptionValue(cmd,""String_Node_Str"",1.1);
  final int numPerSide=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final IlpFormulation formulation=getOptionValue(cmd,""String_Node_Str"",IlpFormulation.DP_PROJ);
  final double lambda=Command.getOptionValue(cmd,""String_Node_Str"",0.1);
  final int numThreads=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final String ilpSolver=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final double ilpWorkMemMegs=Command.getOptionValue(cmd,""String_Node_Str"",512.0);
  final double epsilon=Command.getOptionValue(cmd,""String_Node_Str"",0.1);
  final String branch=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String relaxation=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final int maxSimplexIterations=Command.getOptionValue(cmd,""String_Node_Str"",2100000000);
  final int maxDwIterations=Command.getOptionValue(cmd,""String_Node_Str"",1000);
  final int maxSetSizeToConstrain=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final int maxCutRounds=Command.getOptionValue(cmd,""String_Node_Str"",100);
  final double minSumForCuts=Command.getOptionValue(cmd,""String_Node_Str"",1.01);
  Trainer trainer=null;
  if (algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    if (modelName.equals(""String_Node_Str"")) {
      evalParser=new DmvCkyParser();
      IlpSolverFactory ilpSolverFactory=null;
      if (parserName.startsWith(""String_Node_Str"")) {
        IlpSolverId ilpSolverId=IlpSolverId.getById(ilpSolver);
        ilpSolverFactory=new IlpSolverFactory(ilpSolverId,numThreads,ilpWorkMemMegs);
        ilpSolverFactory.setBlockFileWriter(new DeltaParseBlockFileWriter(formulation));
      }
      if (parserName.equals(""String_Node_Str"")) {
        parser=new DmvCkyParser();
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiSentenceParser(formulation,ilpSolverFactory);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParser(formulation,ilpSolverFactory);
      }
 else       if (parserName.equals(""String_Node_Str"") || parserName.equals(""String_Node_Str"")) {
        DeltaGenerator deltaGen;
        if (deltaGenerator.equals(""String_Node_Str"")) {
          deltaGen=new FixedIntervalDeltaGenerator(interval,numPerSide);
        }
 else         if (deltaGenerator.equals(""String_Node_Str"")) {
          deltaGen=new FactorDeltaGenerator(factor,numPerSide);
        }
 else {
          throw new ParseException(""String_Node_Str"" + deltaGenerator);
        }
        if (parserName.equals(""String_Node_Str"")) {
          parser=new IlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen);
        }
 else         if (parserName.equals(""String_Node_Str"")) {
          parser=new InitializedIlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen,ilpSolverFactory);
        }
 else {
          throw new ParseException(""String_Node_Str"" + parserName);
        }
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    MStep<DepTreebank> mStep;
    ModelFactory modelFactory;
    if (modelName.equals(""String_Node_Str"")) {
      mStep=new DmvMStep(lambda);
      modelFactory=new DmvModelFactory(new DmvUniformWeightGenerator());
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    trainer=new ViterbiTrainer(parser,mStep,modelFactory,iterations,convergenceRatio);
  }
 else   if (algorithm.equals(""String_Node_Str"")) {
    if (modelName.equals(""String_Node_Str"")) {
      DmvBoundsDeltaFactory brancher;
      if (branch.equals(""String_Node_Str"")) {
        brancher=new FullStrongBranchingDeltaFactory();
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RegretDmvBoundsDeltaFactory();
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RandomDmvBoundsDeltaFactory(true);
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RandomDmvBoundsDeltaFactory(false);
      }
 else {
        throw new ParseException(""String_Node_Str"" + branch);
      }
      DmvRelaxation relax;
      if (relaxation.equals(""String_Node_Str"")) {
        DmvDantzigWolfeRelaxation dw=new DmvDantzigWolfeRelaxation(null,maxCutRounds,new CutCountComputer());
        dw.setMaxSimplexIterations(maxSimplexIterations);
        dw.setMaxDwIterations(maxDwIterations);
        dw.setMaxSetSizeToConstrain(maxSetSizeToConstrain);
        dw.setMinSumForCuts(minSumForCuts);
        relax=dw;
      }
 else       if (relaxation.equals(""String_Node_Str"")) {
        DmvDantzigWolfeRelaxationResolution dw=new DmvDantzigWolfeRelaxationResolution(null);
        dw.setMaxSimplexIterations(maxSimplexIterations);
        dw.setMaxDwIterations(maxDwIterations);
        relax=dw;
      }
 else       if (relaxation.equals(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        throw new ParseException(""String_Node_Str"" + relaxation);
      }
      trainer=new BnBDmvTrainer(epsilon,brancher,relax);
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
  }
 else {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}","public static Object getTrainer(CommandLine cmd) throws ParseException {
  final String algorithm=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final int iterations=Command.getOptionValue(cmd,""String_Node_Str"",10);
  final double convergenceRatio=Command.getOptionValue(cmd,""String_Node_Str"",0.99999);
  final String modelName=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String parserName=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String deltaGenerator=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final double interval=Command.getOptionValue(cmd,""String_Node_Str"",0.01);
  final double factor=Command.getOptionValue(cmd,""String_Node_Str"",1.1);
  final int numPerSide=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final IlpFormulation formulation=getOptionValue(cmd,""String_Node_Str"",IlpFormulation.DP_PROJ);
  final double lambda=Command.getOptionValue(cmd,""String_Node_Str"",0.1);
  final int numThreads=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final String ilpSolver=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final double ilpWorkMemMegs=Command.getOptionValue(cmd,""String_Node_Str"",512.0);
  final double epsilon=Command.getOptionValue(cmd,""String_Node_Str"",0.1);
  final String branch=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final String relaxation=Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str"");
  final int maxSimplexIterations=Command.getOptionValue(cmd,""String_Node_Str"",2100000000);
  final int maxDwIterations=Command.getOptionValue(cmd,""String_Node_Str"",1000);
  final int maxSetSizeToConstrain=Command.getOptionValue(cmd,""String_Node_Str"",2);
  final int maxCutRounds=Command.getOptionValue(cmd,""String_Node_Str"",100);
  final double minSumForCuts=Command.getOptionValue(cmd,""String_Node_Str"",1.01);
  DmvRelaxation relax=null;
  if (cmd.hasOption(""String_Node_Str"") || algorithm.equals(""String_Node_Str"")) {
    if (relaxation.equals(""String_Node_Str"")) {
      DmvDantzigWolfeRelaxation dw=new DmvDantzigWolfeRelaxation(null,maxCutRounds,new CutCountComputer());
      dw.setMaxSimplexIterations(maxSimplexIterations);
      dw.setMaxDwIterations(maxDwIterations);
      dw.setMaxSetSizeToConstrain(maxSetSizeToConstrain);
      dw.setMinSumForCuts(minSumForCuts);
      relax=dw;
    }
 else     if (relaxation.equals(""String_Node_Str"")) {
      DmvDantzigWolfeRelaxationResolution dw=new DmvDantzigWolfeRelaxationResolution(null);
      dw.setMaxSimplexIterations(maxSimplexIterations);
      dw.setMaxDwIterations(maxDwIterations);
      relax=dw;
    }
 else     if (relaxation.equals(""String_Node_Str"")) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else {
      throw new ParseException(""String_Node_Str"" + relaxation);
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      return relax;
    }
  }
  Trainer trainer=null;
  if (algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    if (modelName.equals(""String_Node_Str"")) {
      evalParser=new DmvCkyParser();
      IlpSolverFactory ilpSolverFactory=null;
      if (parserName.startsWith(""String_Node_Str"")) {
        IlpSolverId ilpSolverId=IlpSolverId.getById(ilpSolver);
        ilpSolverFactory=new IlpSolverFactory(ilpSolverId,numThreads,ilpWorkMemMegs);
        ilpSolverFactory.setBlockFileWriter(new DeltaParseBlockFileWriter(formulation));
      }
      if (parserName.equals(""String_Node_Str"")) {
        parser=new DmvCkyParser();
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiSentenceParser(formulation,ilpSolverFactory);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParser(formulation,ilpSolverFactory);
      }
 else       if (parserName.equals(""String_Node_Str"") || parserName.equals(""String_Node_Str"")) {
        DeltaGenerator deltaGen;
        if (deltaGenerator.equals(""String_Node_Str"")) {
          deltaGen=new FixedIntervalDeltaGenerator(interval,numPerSide);
        }
 else         if (deltaGenerator.equals(""String_Node_Str"")) {
          deltaGen=new FactorDeltaGenerator(factor,numPerSide);
        }
 else {
          throw new ParseException(""String_Node_Str"" + deltaGenerator);
        }
        if (parserName.equals(""String_Node_Str"")) {
          parser=new IlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen);
        }
 else         if (parserName.equals(""String_Node_Str"")) {
          parser=new InitializedIlpViterbiParserWithDeltas(formulation,ilpSolverFactory,deltaGen,ilpSolverFactory);
        }
 else {
          throw new ParseException(""String_Node_Str"" + parserName);
        }
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    MStep<DepTreebank> mStep;
    ModelFactory modelFactory;
    if (modelName.equals(""String_Node_Str"")) {
      mStep=new DmvMStep(lambda);
      modelFactory=new DmvModelFactory(new DmvUniformWeightGenerator());
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    trainer=new ViterbiTrainer(parser,mStep,modelFactory,iterations,convergenceRatio);
  }
 else   if (algorithm.equals(""String_Node_Str"")) {
    if (modelName.equals(""String_Node_Str"")) {
      DmvBoundsDeltaFactory brancher;
      if (branch.equals(""String_Node_Str"")) {
        brancher=new FullStrongBranchingDeltaFactory();
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RegretDmvBoundsDeltaFactory();
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RandomDmvBoundsDeltaFactory(true);
      }
 else       if (branch.equals(""String_Node_Str"")) {
        brancher=new RandomDmvBoundsDeltaFactory(false);
      }
 else {
        throw new ParseException(""String_Node_Str"" + branch);
      }
      trainer=new BnBDmvTrainer(epsilon,brancher,relax);
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
  }
 else {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}",0.8235102307002528
131759,"public double[] solveModelParamSubproblemJOptimizeLogProb(final double[] weights,DmvBounds bounds,int c){
  final int numParams=weights.length;
  final DoubleMatrix1D weights1D=F1.make(weights);
  final DoubleMatrix2D zeros2D=F2.make(numParams,numParams);
  StrictlyConvexMultivariateRealFunction objectiveFunction=new StrictlyConvexMultivariateRealFunction(){
    public double value(    DoubleMatrix1D X){
      return X.zDotProduct(weights1D);
    }
    public DoubleMatrix1D gradient(    DoubleMatrix1D X){
      return weights1D;
    }
    public DoubleMatrix2D hessian(    DoubleMatrix1D X){
      return zeros2D;
    }
    public int getDim(){
      return numParams;
    }
  }
;
  ConvexMultivariateRealFunction[] inequalities=new ConvexMultivariateRealFunction[1 + 2 * numParams];
  inequalities[0]=new ConvexMultivariateRealFunction(){
    @Override public double value(    DoubleMatrix1D X){
      return X.aggregate(Functions.plus,Functions.exp) - 1.0;
    }
    @Override public DoubleMatrix1D gradient(    DoubleMatrix1D X){
      return X.copy().assign(Functions.exp);
    }
    @Override public DoubleMatrix2D hessian(    DoubleMatrix1D X){
      DoubleMatrix2D hessian=F2.make(numParams,numParams);
      for (int m=0; m < numParams; m++) {
        hessian.setQuick(m,m,Math.exp(X.getQuick(m)));
      }
      return hessian;
    }
    @Override public int getDim(){
      return numParams;
    }
  }
;
  for (int m=0; m < numParams; m++) {
    double[] factors=new double[numParams];
    factors[m]=-1;
    inequalities[1 + m]=new LinearMultivariateRealFunction(F1.make(factors),bounds.getLb(c,m));
  }
  for (int m=0; m < numParams; m++) {
    double[] factors=new double[numParams];
    factors[m]=1;
    inequalities[1 + numParams + m]=new LinearMultivariateRealFunction(F1.make(factors),-bounds.getUb(c,m));
  }
  OptimizationRequest or=new OptimizationRequest();
  or.f0=objectiveFunction;
  double[] initLogProbs=new double[numParams];
  for (int m=0; m < numParams; m++) {
    initLogProbs[m]=bounds.getLb(c,m);
  }
  or.initialPoint=F1.make(initLogProbs);
  or.fi=inequalities;
  CvxOptimizer opt=new CvxOptimizer();
  opt.setOptimizationRequest(or);
  OptimizationResponse response;
  try {
    response=opt.optimize();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (response.returnCode == OptimizationResponse.FAILED) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  DoubleMatrix1D sol=response.solution;
  return sol.toArray();
}","public double[] solveModelParamSubproblemJOptimizeLogProb(final double[] weights,DmvBounds bounds,int c){
  final int numParams=weights.length;
  final DoubleMatrix1D weights1D=F1.make(weights);
  final DoubleMatrix2D zeros2D=F2.make(numParams,numParams);
  StrictlyConvexMultivariateRealFunction objectiveFunction=new StrictlyConvexMultivariateRealFunction(){
    public double value(    DoubleMatrix1D X){
      return X.zDotProduct(weights1D);
    }
    public DoubleMatrix1D gradient(    DoubleMatrix1D X){
      return weights1D;
    }
    public DoubleMatrix2D hessian(    DoubleMatrix1D X){
      return zeros2D;
    }
    public int getDim(){
      return numParams;
    }
  }
;
  ConvexMultivariateRealFunction[] inequalities=new ConvexMultivariateRealFunction[1 + 2 * numParams];
  inequalities[0]=new ConvexMultivariateRealFunction(){
    @Override public double value(    DoubleMatrix1D X){
      return X.aggregate(Functions.plus,Functions.exp) - 1.0;
    }
    @Override public DoubleMatrix1D gradient(    DoubleMatrix1D X){
      return X.copy().assign(Functions.exp);
    }
    @Override public DoubleMatrix2D hessian(    DoubleMatrix1D X){
      DoubleMatrix2D hessian=F2.make(numParams,numParams);
      for (int m=0; m < numParams; m++) {
        hessian.setQuick(m,m,Math.exp(X.getQuick(m)));
      }
      return hessian;
    }
    @Override public int getDim(){
      return numParams;
    }
  }
;
  for (int m=0; m < numParams; m++) {
    double[] factors=new double[numParams];
    factors[m]=-1;
    inequalities[1 + m]=new LinearMultivariateRealFunction(F1.make(factors),bounds.getLb(c,m) - 1e-13);
  }
  for (int m=0; m < numParams; m++) {
    double[] factors=new double[numParams];
    factors[m]=1;
    inequalities[1 + numParams + m]=new LinearMultivariateRealFunction(F1.make(factors),-(bounds.getUb(c,m) + 1e-13));
  }
  OptimizationRequest or=new OptimizationRequest();
  or.f0=objectiveFunction;
  double[] initLogProbs=new double[numParams];
  for (int m=0; m < numParams; m++) {
    initLogProbs[m]=bounds.getLb(c,m);
  }
  or.initialPoint=F1.make(initLogProbs);
  or.fi=inequalities;
  CvxOptimizer opt=new CvxOptimizer();
  opt.setOptimizationRequest(or);
  OptimizationResponse response;
  try {
    response=opt.optimize();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (response.returnCode == OptimizationResponse.FAILED) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  DoubleMatrix1D sol=response.solution;
  return sol.toArray();
}",0.9964129135113592
131760,"private DmvSolution updateBounds(CommandLine cmd,SentenceCollection sentences,DmvRelaxation dw){
  if (cmd.hasOption(""String_Node_Str"")) {
    InitSol opt=InitSol.getById(Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str""));
    IndexedDmvModel idm=dw.getIdm();
    DmvSolution initBoundsSol;
    if (opt == InitSol.VITERBI_EM) {
      initBoundsSol=DmvDantzigWolfeRelaxationTest.getInitFeasSol(sentences);
    }
 else     if (opt == InitSol.GOLD) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else     if (opt == InitSol.RANDOM || opt == InitSol.UNIFORM) {
      DmvWeightGenerator weightGen;
      if (opt == InitSol.RANDOM) {
        Prng.seed(System.currentTimeMillis());
        weightGen=new DmvRandomWeightGenerator(0.00001);
      }
 else {
        weightGen=new DmvUniformWeightGenerator();
      }
      DmvModelFactory modelFactory=new DmvModelFactory(weightGen);
      DmvModel randModel=(DmvModel)modelFactory.getInstance(sentences);
      double[][] logProbs=idm.getCmLogProbs(DmvModelConverter.getDepProbMatrix(randModel,sentences.getLabelAlphabet()));
      ViterbiParser parser=new DmvCkyParser();
      DepTreebank treebank=parser.getViterbiParse(sentences,randModel);
      initBoundsSol=new DmvSolution(logProbs,idm,treebank,dw.computeTrueObjective(logProbs,treebank));
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + opt);
    }
    double offsetProb=Command.getOptionValue(cmd,""String_Node_Str"",1.0);
    double probOfSkipCm=Command.getOptionValue(cmd,""String_Node_Str"",0.0);
    int numDoubledCms=Command.getOptionValue(cmd,""String_Node_Str"",0);
    if (numDoubledCms > 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    DmvDantzigWolfeRelaxationTest.setBoundsFromInitSol(dw,initBoundsSol,offsetProb,probOfSkipCm);
    return initBoundsSol;
  }
  return null;
}","private DmvSolution updateBounds(CommandLine cmd,SentenceCollection sentences,DmvRelaxation dw){
  if (cmd.hasOption(""String_Node_Str"")) {
    InitSol opt=InitSol.getById(Command.getOptionValue(cmd,""String_Node_Str"",""String_Node_Str""));
    IndexedDmvModel idm=new IndexedDmvModel(sentences);
    DmvSolution initBoundsSol;
    if (opt == InitSol.VITERBI_EM) {
      initBoundsSol=DmvDantzigWolfeRelaxationTest.getInitFeasSol(sentences);
    }
 else     if (opt == InitSol.GOLD) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else     if (opt == InitSol.RANDOM || opt == InitSol.UNIFORM) {
      DmvWeightGenerator weightGen;
      if (opt == InitSol.RANDOM) {
        Prng.seed(System.currentTimeMillis());
        weightGen=new DmvRandomWeightGenerator(0.00001);
      }
 else {
        weightGen=new DmvUniformWeightGenerator();
      }
      DmvModelFactory modelFactory=new DmvModelFactory(weightGen);
      DmvModel randModel=(DmvModel)modelFactory.getInstance(sentences);
      double[][] logProbs=idm.getCmLogProbs(DmvModelConverter.getDepProbMatrix(randModel,sentences.getLabelAlphabet()));
      ViterbiParser parser=new DmvCkyParser();
      DepTreebank treebank=parser.getViterbiParse(sentences,randModel);
      initBoundsSol=new DmvSolution(logProbs,idm,treebank,dw.computeTrueObjective(logProbs,treebank));
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + opt);
    }
    double offsetProb=Command.getOptionValue(cmd,""String_Node_Str"",1.0);
    double probOfSkipCm=Command.getOptionValue(cmd,""String_Node_Str"",0.0);
    int numDoubledCms=Command.getOptionValue(cmd,""String_Node_Str"",0);
    if (numDoubledCms > 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    DmvDantzigWolfeRelaxationTest.setBoundsFromInitSol(dw,initBoundsSol,offsetProb,probOfSkipCm);
    return initBoundsSol;
  }
  return null;
}",0.9906040268456376
131761,"@Override public double getStopWeight(Triple<Label,String,Boolean> triple){
  Map<Boolean,Integer> map=stopCounts.get(triple);
  double numStop;
  double numNotStop;
  if (map != null) {
    numStop=Utilities.safeGet(map,Boolean.TRUE);
    numNotStop=Utilities.safeGet(map,Boolean.FALSE);
  }
 else {
    numStop=0;
    numNotStop=0;
  }
  double weight=(numStop + lambda) / (numStop + numNotStop + 2 * lambda);
  return weight;
}","@Override public double getStopWeight(Triple<Label,String,Boolean> triple){
  Map<Boolean,Integer> map=stopCounts.get(triple);
  double numStop;
  double numNotStop;
  if (map != null) {
    numStop=Utilities.safeGet(map,Boolean.TRUE);
    numNotStop=Utilities.safeGet(map,Boolean.FALSE);
  }
 else {
    numStop=0;
    numNotStop=0;
    if (lambda == 0) {
      return 0.5;
    }
  }
  double weight=(numStop + lambda) / (numStop + numNotStop + 2 * lambda);
  return weight;
}",0.948180815876516
131762,"@Override public LabeledMultinomial<Label> getChooseMulti(Pair<Label,String> pair,List<Label> children){
  LabeledMultinomial<Label> mult=new LabeledMultinomial<Label>();
  for (  Label child : children) {
    int c=tagAlphabet.lookupObject(child);
    if (child.equals(WallDepTreeNode.WALL_LABEL)) {
      mult.put(child,0.0);
    }
 else     if (pair.get1().equals(WallDepTreeNode.WALL_LABEL)) {
      mult.put(child,Utilities.exp(dpm.root[c]));
    }
 else {
      int p=tagAlphabet.lookupObject(pair.get1());
      int dir=pair.get2().equals(""String_Node_Str"") ? Constants.LEFT : Constants.RIGHT;
      int cv=0;
      mult.put(child,Utilities.exp(dpm.child[c][p][dir][cv]));
    }
  }
  return mult;
}","@Override public LabeledMultinomial<Label> getChooseMulti(Pair<Label,String> pair,List<Label> children){
  LabeledMultinomial<Label> mult=new LabeledMultinomial<Label>();
  for (  Label child : children) {
    int c=tagAlphabet.lookupObject(child);
    if (pair.get1().equals(WallDepTreeNode.WALL_LABEL)) {
      mult.put(child,Utilities.exp(dpm.root[c]));
    }
 else {
      int p=tagAlphabet.lookupObject(pair.get1());
      int dir=pair.get2().equals(""String_Node_Str"") ? Constants.LEFT : Constants.RIGHT;
      int cv=0;
      mult.put(child,Utilities.exp(dpm.child[c][p][dir][cv]));
    }
  }
  return mult;
}",0.93111279333838
131763,"public Model getInstance(Set<Label> vocab,boolean oneRoot){
  DmvModel dmv=new DmvModel();
  for (  Label label : vocab) {
    for (    String lr : leftRight) {
      for (      boolean adj : adjacent) {
        Triple<Label,String,Boolean> triple=new Triple<Label,String,Boolean>(label,lr,adj);
        double weight;
        weight=weightGen.getStopWeight(triple);
        dmv.putStopWeight(triple,weight);
      }
    }
  }
  List<Label> vocabList=new ArrayList<Label>(vocab);
  for (  Label parent : vocabList) {
    for (    String lr : leftRight) {
      Pair<Label,String> pair=new Pair<Label,String>(parent,lr);
      dmv.setChooseWeights(parent,lr,weightGen.getChooseMulti(pair,vocabList));
    }
  }
  if (oneRoot) {
    dmv.putStopWeight(WallDepTreeNode.WALL_LABEL,""String_Node_Str"",true,1.0);
    dmv.putStopWeight(WallDepTreeNode.WALL_LABEL,""String_Node_Str"",false,1.0);
    dmv.putStopWeight(WallDepTreeNode.WALL_LABEL,""String_Node_Str"",true,0.0);
    dmv.putStopWeight(WallDepTreeNode.WALL_LABEL,""String_Node_Str"",false,1.0);
  }
  return dmv;
}","public Model getInstance(Set<Label> vocab,boolean oneRoot){
  DmvModel dmv=new DmvModel();
  for (  Label label : vocab) {
    for (    String lr : leftRight) {
      if (label.equals(WallDepTreeNode.WALL_LABEL) && lr.equals(""String_Node_Str"")) {
        continue;
      }
      for (      boolean adj : adjacent) {
        Triple<Label,String,Boolean> triple=new Triple<Label,String,Boolean>(label,lr,adj);
        double weight;
        weight=weightGen.getStopWeight(triple);
        dmv.putStopWeight(triple,weight);
      }
    }
  }
  List<Label> vocabList=new ArrayList<Label>(vocab);
  List<Label> childList=new ArrayList<Label>(vocabList);
  boolean containedWall=childList.remove(WallDepTreeNode.WALL_LABEL);
  assert(containedWall);
  for (  Label parent : vocabList) {
    for (    String lr : leftRight) {
      if (parent.equals(WallDepTreeNode.WALL_LABEL) && lr.equals(""String_Node_Str"")) {
        continue;
      }
      Pair<Label,String> pair=new Pair<Label,String>(parent,lr);
      dmv.setChooseWeights(parent,lr,weightGen.getChooseMulti(pair,childList));
    }
  }
  if (oneRoot) {
    dmv.putStopWeight(WallDepTreeNode.WALL_LABEL,""String_Node_Str"",true,0.0);
    dmv.putStopWeight(WallDepTreeNode.WALL_LABEL,""String_Node_Str"",false,1.0);
  }
  return dmv;
}",0.3452991452991453
131764,"private void recursivelyGenerate(ProjDepTreeNode parent){
  sampleChildren(parent,""String_Node_Str"");
  sampleChildren(parent,""String_Node_Str"");
  for (  DepTreeNode child : parent.getChildren()) {
    recursivelyGenerate((ProjDepTreeNode)child);
  }
}","private void recursivelyGenerate(ProjDepTreeNode parent){
  if (!parent.isWall()) {
    sampleChildren(parent,""String_Node_Str"");
  }
  sampleChildren(parent,""String_Node_Str"");
  for (  DepTreeNode child : parent.getChildren()) {
    recursivelyGenerate((ProjDepTreeNode)child);
  }
}",0.9405204460966544
131765,"public double[][] getRegretCm(){
  try {
    double[][] logProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      logProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] featCounts=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      featCounts[c]=new double[idm.getNumParams(c)];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] sentSol=triple.sentSol;
      for (int i=0; i < sentSol.length; i++) {
        int c=idm.getC(s,i);
        int m=idm.getM(s,i);
        featCounts[c][m]=sentSol[i] * frac;
      }
    }
    double[][] objVals=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      objVals[c]=cplex.getValues(mp.objVars[c]);
    }
    double[][] regret=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      regret[c]=new double[idm.getNumParams(c)];
      for (int m=0; m < idm.getNumParams(c); m++) {
        regret[c][m]=objVals[c][m] - (logProbs[c][m] * featCounts[c][m]);
      }
    }
    return regret;
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}","public double[][] getRegretCm(){
  try {
    double[][] logProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      logProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] featCounts=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      featCounts[c]=new double[idm.getNumParams(c)];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] sentSol=triple.sentSol;
      for (int i=0; i < sentSol.length; i++) {
        int c=idm.getC(s,i);
        int m=idm.getM(s,i);
        featCounts[c][m]+=sentSol[i] * frac;
      }
    }
    double[][] objVals=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      objVals[c]=cplex.getValues(mp.objVars[c]);
    }
    double[][] regret=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      regret[c]=new double[idm.getNumParams(c)];
      for (int m=0; m < idm.getNumParams(c); m++) {
        regret[c][m]=objVals[c][m] - (logProbs[c][m] * featCounts[c][m]);
        assert(Utilities.gte(regret[c][m],0.0));
      }
    }
    return regret;
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}",0.9802215189873418
131766,"public RelaxedDmvSolution solveRelaxation(){
  try {
    runDWAlgo(cplex,mp);
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + cplex.getStatus());
    if (cplex.getStatus() != Status.Optimal) {
      return new RelaxedDmvSolution(null,null,null,LazyBranchAndBoundSolver.WORST_SCORE,cplex.getStatus());
    }
    log.info(""String_Node_Str"" + cplex.getObjValue());
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.numStoCons));
    double objective=-cplex.getObjValue();
    assert(!Double.isNaN(objective));
    double[][] logProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      logProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(logProbs,fracRoots,fracParses,objective,cplex.getStatus());
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}","public RelaxedDmvSolution solveRelaxation(){
  try {
    runDWAlgo(cplex,mp);
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + cplex.getStatus());
    if (cplex.getStatus() != Status.Optimal) {
      return new RelaxedDmvSolution(null,null,null,LazyBranchAndBoundSolver.WORST_SCORE,cplex.getStatus());
    }
    log.info(""String_Node_Str"" + cplex.getObjValue());
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.numStoCons));
    double objective=-cplex.getObjValue();
    assert(!Double.isNaN(objective));
    assert(Utilities.lte(objective,0.0));
    double[][] logProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      logProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(logProbs,fracRoots,fracParses,objective,cplex.getStatus());
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}",0.9901869158878503
131767,"private void addParentChildLinksToNodes(){
  checkTree();
  for (int i=0; i < parents.length; i++) {
    NonprojDepTreeNode node=(NonprojDepTreeNode)getNodeByPosition(i);
    node.setParent((NonprojDepTreeNode)getNodeByPosition(parents[i]));
    for (int j=0; j < parents.length; j++) {
      if (parents[j] == i) {
        node.addChild((NonprojDepTreeNode)getNodeByPosition(j));
      }
    }
  }
}","private void addParentChildLinksToNodes(){
  checkTree();
  for (int i=0; i < parents.length; i++) {
    NonprojDepTreeNode child=(NonprojDepTreeNode)getNodeByPosition(i);
    NonprojDepTreeNode parent=(NonprojDepTreeNode)getNodeByPosition(parents[i]);
    child.setParent(parent);
    parent.addChild(child);
  }
}",0.6601398601398601
131768,"@Override public void train(SentenceCollection sentences){
  Model bestModel=null;
  double bestLogLikelihood=Double.NEGATIVE_INFINITY;
  for (int r=0; r < numRestarts; r++) {
    trainOnce(sentences);
    if (logLikelihood > bestLogLikelihood) {
      bestLogLikelihood=logLikelihood;
      bestModel=model;
    }
  }
  log.info(""String_Node_Str"" + bestLogLikelihood);
  model=bestModel;
  logLikelihood=bestLogLikelihood;
}","@Override public void train(SentenceCollection sentences){
  double bestLogLikelihood=Double.NEGATIVE_INFINITY;
  Model bestModel=null;
  C bestCounts=null;
  for (int r=0; r < numRestarts; r++) {
    trainOnce(sentences);
    if (logLikelihood > bestLogLikelihood) {
      bestLogLikelihood=logLikelihood;
      bestModel=model;
      bestCounts=counts;
    }
  }
  log.info(""String_Node_Str"" + bestLogLikelihood);
  logLikelihood=bestLogLikelihood;
  model=bestModel;
  counts=bestCounts;
}",0.806979280261723
131769,"public void runDWAlgo(IloCplex cplex,MasterProblem mp) throws UnknownObjectException, IloException {
  DmvCkyParser parser=new DmvCkyParser();
  double prevObjVal=Double.POSITIVE_INFINITY;
  for (int cut=0; cut < numCutRounds; cut++) {
    while (true) {
      cplex.solve();
      log.trace(""String_Node_Str"" + cplex.getStatus());
      if (tempDir != null) {
        cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
        cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      }
      if (cplex.getStatus() == Status.Infeasible) {
        return;
      }
      double objVal=cplex.getObjValue();
      log.trace(""String_Node_Str"" + objVal);
      if (objVal > prevObjVal) {
        log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
      }
      prevObjVal=objVal;
      double[] pricesLower=cplex.getDuals(mp.couplMatrix,0,idm.getNumTotalParams());
      double[] pricesUpper=cplex.getDuals(mp.couplMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
      int numConds=idm.getNumConds();
      double[][] weights=new double[numConds][];
      int j=0;
      for (int c=0; c < numConds; c++) {
        int numParams=idm.getNumParams(c);
        weights[c]=new double[numParams];
        for (int m=0; m < numParams; m++) {
          weights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
          j++;
        }
      }
      DepProbMatrix dpm=idm.getDepProbMatrix(weights);
      double[] convexPrices=cplex.getDuals(mp.lambdaSumCons);
      int numPositiveRedCosts=0;
      for (int s=0; s < sentences.size(); s++) {
        Pair<DepTree,Double> pair=parser.parse(sentences.get(s),dpm);
        DepTree tree=pair.get1();
        double reducedCost=-pair.get2() - convexPrices[s];
        if (reducedCost < -5e-8) {
          if (addLambdaVar(cplex,s,tree)) {
            numPositiveRedCosts++;
          }
 else {
            log.warn(String.format(""String_Node_Str"",reducedCost,s,tree.getParents().toString()));
          }
        }
      }
      if (numPositiveRedCosts == 0) {
        break;
      }
    }
    if (cut == numCutRounds - 1) {
      break;
    }
    log.debug(""String_Node_Str"" + cut);
    double[][] params=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      params[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    for (int c=0; c < idm.getNumConds(); c++) {
      Vectors.exp(params[c]);
      if (Vectors.sum(params[c]) > MIN_SUM_FOR_CUT) {
        addSumToOneConstraint(cplex,c,params[c]);
      }
    }
  }
}","public void runDWAlgo(IloCplex cplex,MasterProblem mp) throws UnknownObjectException, IloException {
  DmvCkyParser parser=new DmvCkyParser();
  double prevObjVal=Double.POSITIVE_INFINITY;
  for (int cut=0; cut < numCutRounds; cut++) {
    while (true) {
      cplex.solve();
      log.trace(""String_Node_Str"" + cplex.getStatus());
      if (tempDir != null) {
        cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
        cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      }
      if (cplex.getStatus() == Status.Infeasible) {
        return;
      }
      double objVal=cplex.getObjValue();
      log.trace(""String_Node_Str"" + objVal);
      if (objVal > prevObjVal) {
        log.warn(""String_Node_Str"" + prevObjVal + ""String_Node_Str""+ objVal);
      }
      prevObjVal=objVal;
      double[] pricesLower=cplex.getDuals(mp.couplMatrix,0,idm.getNumTotalParams());
      double[] pricesUpper=cplex.getDuals(mp.couplMatrix,idm.getNumTotalParams(),idm.getNumTotalParams());
      int numConds=idm.getNumConds();
      double[][] weights=new double[numConds][];
      int j=0;
      for (int c=0; c < numConds; c++) {
        int numParams=idm.getNumParams(c);
        weights[c]=new double[numParams];
        for (int m=0; m < numParams; m++) {
          weights[c][m]=(pricesLower[j] * bounds.getLb(c,m) + pricesUpper[j] * bounds.getUb(c,m));
          j++;
        }
      }
      DepProbMatrix dpm=idm.getDepProbMatrix(weights);
      double[] convexPrices=cplex.getDuals(mp.lambdaSumCons);
      int numPositiveRedCosts=0;
      for (int s=0; s < sentences.size(); s++) {
        Pair<DepTree,Double> pair=parser.parse(sentences.get(s),dpm);
        DepTree tree=pair.get1();
        double reducedCost=-pair.get2() - convexPrices[s];
        if (reducedCost < -5e-8) {
          if (addLambdaVar(cplex,s,tree)) {
            numPositiveRedCosts++;
          }
 else {
            log.warn(String.format(""String_Node_Str"",reducedCost,s,tree.getParents().toString()));
          }
        }
      }
      if (numPositiveRedCosts == 0) {
        break;
      }
 else {
        log.debug(""String_Node_Str"" + numPositiveRedCosts + ""String_Node_Str"");
      }
    }
    if (cut == numCutRounds - 1) {
      break;
    }
    double[][] params=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      params[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    int numNewStoConstraints=0;
    for (int c=0; c < idm.getNumConds(); c++) {
      Vectors.exp(params[c]);
      if (Vectors.sum(params[c]) > MIN_SUM_FOR_CUT) {
        numNewStoConstraints++;
        addSumToOneConstraint(cplex,c,params[c]);
      }
    }
    if (numNewStoConstraints == 0) {
      log.debug(""String_Node_Str"" + cut + ""String_Node_Str"");
      break;
    }
 else {
      log.debug(""String_Node_Str"" + numNewStoConstraints + ""String_Node_Str""+ cut);
    }
  }
}",0.9183599419448476
131770,"private boolean addLambdaVar(IloMPModeler cplex,int s,DepTree tree) throws IloException {
  LambdaVar lvTemp=new LambdaVar(null,s,tree.getParents(),null,-1);
  if (mp.lambdaVarSet.contains(lvTemp)) {
    return false;
  }
  int[] sentSol=idm.getSentSol(sentences.get(s),s,tree);
  int numSentVars=idm.getNumSentVars(s);
  IloColumn lambdaCol=cplex.column(mp.objective,0.0);
  IloNumVar lambdaVar;
  if (mp.lambdaSumCons[s] == null) {
    lambdaVar=cplex.numVar(lambdaCol,0.0,Double.MAX_VALUE,String.format(""String_Node_Str"",s,numLambdas++));
    mp.lambdaSumCons[s]=cplex.addEq(lambdaVar,1.0,""String_Node_Str"");
  }
 else {
    lambdaCol=lambdaCol.and(cplex.column(mp.lambdaSumCons[s],1.0));
    lambdaVar=cplex.numVar(lambdaCol,0.0,Double.MAX_VALUE,String.format(""String_Node_Str"",s,numLambdas++));
  }
  int[] ind=new int[numSentVars * 2];
  double[] val=new double[numSentVars * 2];
  int j=0;
  for (int i=0; i < numSentVars; i++) {
    int c=idm.getC(s,i);
    int m=idm.getM(s,i);
    ind[j]=mp.couplMatrix.getIndex(mp.couplConsLower[c][m]);
    val[j]=bounds.getLb(c,m) * sentSol[i];
    j++;
    ind[j]=mp.couplMatrix.getIndex(mp.couplConsUpper[c][m]);
    val[j]=bounds.getUb(c,m) * sentSol[i];
  }
  int colind=mp.couplMatrix.addColumn(lambdaVar,ind,val);
  LambdaVar lv=new LambdaVar(lambdaVar,s,tree.getParents(),sentSol,colind);
  mp.lambdaVars.add(lv);
  mp.lambdaVarSet.add(lv);
  return true;
}","private boolean addLambdaVar(IloMPModeler cplex,int s,DepTree tree) throws IloException {
  LambdaVar lvTemp=new LambdaVar(null,s,tree.getParents(),null,-1);
  if (mp.lambdaVarSet.contains(lvTemp)) {
    return false;
  }
  int[] sentSol=idm.getSentSol(sentences.get(s),s,tree);
  int numSentVars=idm.getNumSentVars(s);
  IloColumn lambdaCol=cplex.column(mp.objective,0.0);
  IloNumVar lambdaVar;
  if (mp.lambdaSumCons[s] == null) {
    lambdaVar=cplex.numVar(lambdaCol,0.0,Double.MAX_VALUE,String.format(""String_Node_Str"",s,numLambdas++));
    mp.lambdaSumCons[s]=cplex.addEq(lambdaVar,1.0,""String_Node_Str"");
  }
 else {
    lambdaCol=lambdaCol.and(cplex.column(mp.lambdaSumCons[s],1.0));
    lambdaVar=cplex.numVar(lambdaCol,0.0,Double.MAX_VALUE,String.format(""String_Node_Str"",s,numLambdas++));
  }
  int[] ind=new int[numSentVars * 2];
  double[] val=new double[numSentVars * 2];
  int j=0;
  for (int i=0; i < numSentVars; i++) {
    int c=idm.getC(s,i);
    int m=idm.getM(s,i);
    ind[j]=mp.couplMatrix.getIndex(mp.couplConsLower[c][m]);
    val[j]=bounds.getLb(c,m) * sentSol[i];
    j++;
    ind[j]=mp.couplMatrix.getIndex(mp.couplConsUpper[c][m]);
    val[j]=bounds.getUb(c,m) * sentSol[i];
    j++;
  }
  int colind=mp.couplMatrix.addColumn(lambdaVar,ind,val);
  LambdaVar lv=new LambdaVar(lambdaVar,s,tree.getParents(),sentSol,colind);
  mp.lambdaVars.add(lv);
  mp.lambdaVarSet.add(lv);
  return true;
}",0.9968186638388123
131771,"@Test public void testTwo(){
  double epsilon=0.1;
  BnBDmvTrainer trainer=new BnBDmvTrainer(epsilon);
  trainer.setTempDir(new File(""String_Node_Str""));
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  trainer.train(sentences);
}","public void testTwo(){
  double epsilon=0.1;
  BnBDmvTrainer trainer=new BnBDmvTrainer(epsilon);
  trainer.setTempDir(new File(""String_Node_Str""));
  SentenceCollection sentences=new SentenceCollection();
  sentences.addSentenceFromString(""String_Node_Str"");
  sentences.addSentenceFromString(""String_Node_Str"");
  trainer.train(sentences);
}",0.991304347826087
131772,"public RelaxedDmvSolution solveRelaxation(){
  try {
    runDWAlgo(cplex,mp);
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + cplex.getStatus());
    if (cplex.getStatus() != Status.Optimal) {
      return new RelaxedDmvSolution(null,null,null,LazyBranchAndBoundSolver.WORST_SCORE,cplex.getStatus());
    }
    log.info(""String_Node_Str"" + cplex.getObjValue());
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.numStoCons));
    double objective=-cplex.getObjValue();
    double[][] logProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      logProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(logProbs,fracRoots,fracParses,objective,cplex.getStatus());
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}","public RelaxedDmvSolution solveRelaxation(){
  try {
    runDWAlgo(cplex,mp);
    if (tempDir != null) {
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      cplex.writeSolution(new File(tempDir,""String_Node_Str"").getAbsolutePath());
    }
    log.info(""String_Node_Str"" + cplex.getStatus());
    if (cplex.getStatus() != Status.Optimal) {
      return new RelaxedDmvSolution(null,null,null,LazyBranchAndBoundSolver.WORST_SCORE,cplex.getStatus());
    }
    log.info(""String_Node_Str"" + cplex.getObjValue());
    log.info(String.format(""String_Node_Str"",mp.lambdaVars.size(),mp.numStoCons));
    double objective=-cplex.getObjValue();
    assert(!Double.isNaN(objective));
    double[][] logProbs=new double[idm.getNumConds()][];
    for (int c=0; c < idm.getNumConds(); c++) {
      logProbs[c]=cplex.getValues(mp.modelParamVars[c]);
    }
    double[][] fracRoots=new double[sentences.size()][];
    double[][][] fracParses=new double[sentences.size()][][];
    for (int s=0; s < sentences.size(); s++) {
      Sentence sentence=sentences.get(s);
      fracRoots[s]=new double[sentence.size()];
      fracParses[s]=new double[sentence.size()][sentence.size()];
    }
    for (    LambdaVar triple : mp.lambdaVars) {
      double frac=cplex.getValue(triple.lambdaVar);
      int s=triple.s;
      int[] parents=triple.parents;
      double[] fracRoot=fracRoots[s];
      double[][] fracParse=fracParses[s];
      for (int child=0; child < parents.length; child++) {
        int parent=parents[child];
        if (parent == WallDepTreeNode.WALL_POSITION) {
          fracRoot[child]+=frac;
        }
 else {
          fracParse[parent][child]+=frac;
        }
      }
    }
    return new RelaxedDmvSolution(logProbs,fracRoots,fracParses,objective,cplex.getStatus());
  }
 catch (  IloException e) {
    if (e instanceof ilog.cplex.CpxException) {
      ilog.cplex.CpxException cpxe=(ilog.cplex.CpxException)e;
      System.err.println(""String_Node_Str"" + cpxe.getStatus());
      System.err.println(""String_Node_Str"" + cpxe.getMessage());
    }
    throw new RuntimeException(e);
  }
}",0.9909523809523808
131773,"private void applyDelta(DmvBoundsDelta delta){
  try {
    int c=delta.getC();
    int m=delta.getM();
    double origLb=mp.modelParamVars[c][m].getLB();
    double origUb=mp.modelParamVars[c][m].getUB();
    double newLb=origLb;
    double newUb=origUb;
    if (delta.getLu() == Lu.LOWER) {
      newLb=origLb + delta.getDelta();
    }
 else     if (delta.getLu() == Lu.UPPER) {
      newUb=origUb + delta.getDelta();
    }
 else {
      throw new IllegalStateException();
    }
    bounds.set(c,m,newLb,newUb);
    mp.modelParamVars[c][m].setLB(newLb);
    mp.modelParamVars[c][m].setUB(newUb);
    TIntArrayList rowind=new TIntArrayList();
    TIntArrayList colind=new TIntArrayList();
    TDoubleArrayList val=new TDoubleArrayList();
    int lowCmInd=mp.couplMatrix.getIndex(mp.couplConsLower[c][m]);
    int upCmInd=mp.couplMatrix.getIndex(mp.couplConsUpper[c][m]);
    for (    LambdaVar lv : mp.lambdaVars) {
      int i=idm.getSi(lv.s,c,m);
      if (i != -1) {
        rowind.add(lowCmInd);
        colind.add(lv.colind);
        val.add(bounds.getLb(c,m) * lv.sentSol[i]);
        rowind.add(upCmInd);
        colind.add(lv.colind);
        val.add(bounds.getUb(c,m) * lv.sentSol[i]);
      }
    }
    if (rowind.size() > 0) {
      mp.couplMatrix.setNZs(rowind.toNativeArray(),colind.toNativeArray(),val.toNativeArray());
    }
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}","private void applyDelta(DmvBoundsDelta delta){
  try {
    int c=delta.getC();
    int m=delta.getM();
    double origLb=mp.modelParamVars[c][m].getLB();
    double origUb=mp.modelParamVars[c][m].getUB();
    double newLb=origLb;
    double newUb=origUb;
    if (delta.getLu() == Lu.LOWER) {
      newLb=origLb + delta.getDelta();
    }
 else     if (delta.getLu() == Lu.UPPER) {
      newUb=origUb + delta.getDelta();
    }
 else {
      throw new IllegalStateException();
    }
    assert(newLb <= newUb);
    bounds.set(c,m,newLb,newUb);
    mp.modelParamVars[c][m].setLB(newLb);
    mp.modelParamVars[c][m].setUB(newUb);
    TIntArrayList rowind=new TIntArrayList();
    TIntArrayList colind=new TIntArrayList();
    TDoubleArrayList val=new TDoubleArrayList();
    int lowCmInd=mp.couplMatrix.getIndex(mp.couplConsLower[c][m]);
    int upCmInd=mp.couplMatrix.getIndex(mp.couplConsUpper[c][m]);
    for (    LambdaVar lv : mp.lambdaVars) {
      int i=idm.getSi(lv.s,c,m);
      if (i != -1) {
        rowind.add(lowCmInd);
        colind.add(lv.colind);
        val.add(bounds.getLb(c,m) * lv.sentSol[i]);
        rowind.add(upCmInd);
        colind.add(lv.colind);
        val.add(bounds.getUb(c,m) * lv.sentSol[i]);
      }
    }
    if (rowind.size() > 0) {
      mp.couplMatrix.setNZs(rowind.toNativeArray(),colind.toNativeArray(),val.toNativeArray());
    }
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
}",0.9901823281907434
131774,"@Override public List<DmvBoundsDelta> getDmvBounds(DmvProblemNode node){
  DmvBounds origBounds=node.getBounds();
  RelaxedDmvSolution relaxSol=node.getRelaxedSolution();
  double[][] regret=node.getRegretCm();
  IntTuple max=Utilities.getArgmax(regret);
  int c=max.get(0);
  int m=max.get(1);
  String name=node.getIdm().getName(c,m);
  log.info(String.format(""String_Node_Str"",c,m,name,regret[c][m]));
  return splitAtMidPoint(origBounds,c,m,relaxSol.getLogProbs()[c][m]);
}","@Override public List<DmvBoundsDelta> getDmvBounds(DmvProblemNode node){
  DmvBounds origBounds=node.getBounds();
  double[][] regret=node.getRegretCm();
  IntTuple max=Utilities.getArgmax(regret);
  int c=max.get(0);
  int m=max.get(1);
  String name=node.getIdm().getName(c,m);
  log.info(String.format(""String_Node_Str"",c,m,name,regret[c][m]));
  return splitHalfProbSpace(origBounds,c,m);
}",0.8495981630309989
131775,"public DepTreebank getTreebank(int numTrees){
  DepTreebank treebank=new DepTreebank();
  for (int i=0; i < numTrees; i++) {
    ProjDepTreeNode wall=new ProjDepTreeNode(WallDepTreeNode.WALL_LABEL);
    recursivelyGenerate(wall);
    treebank.add(new DepTree(wall));
  }
  return treebank;
}","public DepTreebank getTreebank(int numTrees){
  DepTreebank treebank=new DepTreebank();
  for (int i=0; i < numTrees; i++) {
    ProjDepTreeNode wall=new ProjWallDepTreeNode();
    recursivelyGenerate(wall);
    treebank.add(new DepTree(wall));
  }
  return treebank;
}",0.9464285714285714
131776,"/** 
 * Returns the Process which contains the exit code.
 */
public static Process runProcess(String[] cmdArray,File logFile,File dir){
  try {
    ProcessBuilder pb=new ProcessBuilder(cmdArray);
    pb.redirectErrorStream(true);
    pb.directory(dir);
    Process proc=pb.start();
    if (logFile != null) {
      InputStream inputStream=new BufferedInputStream(proc.getInputStream());
      BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(logFile));
      int read=0;
      byte[] bytes=new byte[1024];
      while ((read=inputStream.read(bytes)) != -1) {
        out.write(bytes,0,read);
      }
      inputStream.close();
      out.flush();
      out.close();
    }
    proc.waitFor();
    return proc;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + cmdToString(cmdArray) + ""String_Node_Str""+ Files.tail(logFile),e);
  }
}","/** 
 * Returns the Process which contains the exit code.
 */
public static Process runProcess(String[] cmdArray,File logFile,File dir){
  try {
    ProcessBuilder pb=new ProcessBuilder(cmdArray);
    pb.redirectErrorStream(true);
    pb.directory(dir);
    Process proc=pb.start();
    if (logFile != null) {
      InputStream inputStream=new BufferedInputStream(proc.getInputStream());
      BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(logFile));
      int read=0;
      byte[] bytes=new byte[1024];
      while ((read=inputStream.read(bytes)) != -1) {
        out.write(bytes,0,read);
      }
      inputStream.close();
      out.flush();
      out.close();
    }
    proc.waitFor();
    return proc;
  }
 catch (  Exception e) {
    String tail=""String_Node_Str"";
    try {
      tail=Files.tail(logFile);
    }
 catch (    Throwable t) {
    }
    throw new RuntimeException(""String_Node_Str"" + cmdToString(cmdArray) + ""String_Node_Str""+ tail,e);
  }
}",0.9255490091055169
131777,"@Override public DepTree getViterbiParse(Sentence sentence,Model model){
  File tempDir=Files.createTempDir(""String_Node_Str"",workspace);
  File zimplFile=encode(tempDir,sentence,model);
  ZimplSolver solver=new ZimplSolver(tempDir,ilpSolverFactory.getInstance(tempDir));
  solver.solve(zimplFile);
  Map<String,Double> result=solver.getResult();
  DepTree tree=decode(sentence,result);
  return tree;
}","@Override public DepTree getViterbiParse(Sentence sentence,Model model){
  File tempDir=Files.createTempDir(""String_Node_Str"",workspace);
  File zimplFile=encode(tempDir,sentence,model);
  ZimplSolver solver=new ZimplSolver(tempDir,ilpSolverFactory.getInstance(tempDir));
  solver.solve(zimplFile);
  Map<String,Double> result=solver.getResult();
  parseWeight=solver.getObjective();
  DepTree tree=decode(sentence,result);
  return tree;
}",0.9561091340450772
131778,"@Override public Map<Quadruple<Label,String,Label,String>,Double> getCWDeltas(Map<Triple<Label,String,Label>,Double> chooseWeights){
  Map<Quadruple<Label,String,Label,String>,Double> cwDeltas=new HashMap<Quadruple<Label,String,Label,String>,Double>();
  for (  Entry<Triple<Label,String,Label>,Double> entry : chooseWeights.entrySet()) {
    Label parent=entry.getKey().get1();
    String lr=entry.getKey().get2();
    Label child=entry.getKey().get3();
    double weight=entry.getValue();
    for (int i=-numPerSide; i <= numPerSide; i++) {
      String deltaId=""String_Node_Str"" + Math.pow(factor,i);
      if (i == 1) {
        deltaId=FixedIntervalDeltaGenerator.IDENTITY_DELTA_ID;
      }
      Quadruple<Label,String,Label,String> key=new Quadruple<Label,String,Label,String>(parent,lr,child,deltaId);
      double newWeight=weight * Math.pow(factor,i);
      if (newWeight <= 1.0 && newWeight >= 0.0) {
        cwDeltas.put(key,newWeight);
      }
    }
  }
  return cwDeltas;
}","@Override public Map<Quadruple<Label,String,Label,String>,Double> getCWDeltas(Map<Triple<Label,String,Label>,Double> chooseWeights){
  Map<Quadruple<Label,String,Label,String>,Double> cwDeltas=super.getCWDeltas(chooseWeights);
  for (  Entry<Triple<Label,String,Label>,Double> entry : chooseWeights.entrySet()) {
    double weight=entry.getValue();
    for (int i=-numPerSide; i <= numPerSide; i++) {
      if (i == 1) {
        continue;
      }
      String deltaId=""String_Node_Str"" + Math.pow(factor,i);
      Quadruple<Label,String,Label,String> key=getDeltaKey(entry.getKey(),deltaId);
      double newWeight=weight * Math.pow(factor,i);
      if (newWeight <= 1.0 && newWeight >= 0.0) {
        cwDeltas.put(key,newWeight);
      }
    }
  }
  return cwDeltas;
}",0.7589743589743589
131779,"@Override public Map<Quadruple<Label,String,Label,String>,Double> getCWDeltas(Map<Triple<Label,String,Label>,Double> chooseWeights){
  Map<Quadruple<Label,String,Label,String>,Double> cwDeltas=new HashMap<Quadruple<Label,String,Label,String>,Double>();
  for (  Entry<Triple<Label,String,Label>,Double> entry : chooseWeights.entrySet()) {
    Label parent=entry.getKey().get1();
    String lr=entry.getKey().get2();
    Label child=entry.getKey().get3();
    double weight=entry.getValue();
    for (int i=-numPerSide; i <= numPerSide; i++) {
      String deltaId=""String_Node_Str"" + interval * i;
      if (i == 0) {
        deltaId=IDENTITY_DELTA_ID;
      }
      Quadruple<Label,String,Label,String> key=new Quadruple<Label,String,Label,String>(parent,lr,child,deltaId);
      double newWeight=weight + interval * i;
      if (newWeight <= 1.0 && newWeight >= 0.0) {
        cwDeltas.put(key,newWeight);
      }
    }
  }
  return cwDeltas;
}","@Override public Map<Quadruple<Label,String,Label,String>,Double> getCWDeltas(Map<Triple<Label,String,Label>,Double> chooseWeights){
  Map<Quadruple<Label,String,Label,String>,Double> cwDeltas=super.getCWDeltas(chooseWeights);
  for (  Entry<Triple<Label,String,Label>,Double> entry : chooseWeights.entrySet()) {
    double weight=entry.getValue();
    for (int i=-numPerSide; i <= numPerSide; i++) {
      if (i == 0) {
        continue;
      }
      String deltaId=""String_Node_Str"" + interval * i;
      Quadruple<Label,String,Label,String> key=getDeltaKey(entry.getKey(),deltaId);
      double newWeight=weight + interval * i;
      if (newWeight <= 1.0 && newWeight >= 0.0) {
        cwDeltas.put(key,newWeight);
      }
    }
  }
  return cwDeltas;
}",0.7680563711098062
131780,"@Override protected DepTreebank decode(SentenceCollection sentences,Map<String,Double> result){
  Map<String,Integer> cwDeltaCounts=new HashMap<String,Integer>();
  for (  Entry<String,Double> entry : result.entrySet()) {
    String zimplVar=entry.getKey();
    Double value=entry.getValue();
    String[] splits=zimplVarRegex.split(zimplVar);
    String varType=splits[0];
    if (varType.equals(""String_Node_Str"")) {
      String parentWord=splits[1];
      String lr=splits[2];
      String childWord=splits[3];
      String deltaId=splits[4];
      long longVal=Math.round(value);
      if (longVal == 1) {
        Utilities.increment(cwDeltaCounts,deltaId,1);
      }
    }
  }
  log.debug(""String_Node_Str"");
  for (  String deltaId : cwDeltaCounts.keySet()) {
    log.debug(""String_Node_Str"" + deltaId + ""String_Node_Str""+ cwDeltaCounts.get(deltaId));
  }
  return super.decode(sentences,result);
}","@Override protected DepTreebank decode(SentenceCollection sentences,Map<String,Double> result){
  Map<String,Integer> cwDeltaCounts=new HashMap<String,Integer>();
  for (  Entry<String,Double> entry : result.entrySet()) {
    String zimplVar=entry.getKey();
    Double value=entry.getValue();
    String[] splits=zimplVarRegex.split(zimplVar);
    String varType=splits[0];
    if (varType.equals(""String_Node_Str"")) {
      String deltaId=splits[splits.length - 1];
      long longVal=Math.round(value);
      if (longVal == 1) {
        Utilities.increment(cwDeltaCounts,deltaId,1);
      }
    }
  }
  log.debug(""String_Node_Str"");
  for (  String deltaId : cwDeltaCounts.keySet()) {
    log.debug(""String_Node_Str"" + deltaId + ""String_Node_Str""+ cwDeltaCounts.get(deltaId));
  }
  return super.decode(sentences,result);
}",0.9283236994219654
131781,"@Override public void solve(File lpFile){
  if (!lpFile.getPath().endsWith(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"" + lpFile.getPath());
  }
  result=new HashMap<String,Double>();
  try {
    IloCplex cplex=new IloCplex();
    cplex.importModel(lpFile.getAbsolutePath());
    File ordFile=new File(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
    if (ordFile.exists()) {
      log.debug(""String_Node_Str"" + ordFile.getPath());
      cplex.readOrder(ordFile.getAbsolutePath());
    }
    File mstFile=new File(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
    if (mstFile.exists()) {
      log.debug(""String_Node_Str"" + mstFile.getPath());
      cplex.readMIPStart(mstFile.getAbsolutePath());
    }
    cplex.setParam(DoubleParam.WorkMem,workMemMegs);
    cplex.setParam(StringParam.WorkDir,tempDir.getAbsolutePath());
    cplex.setParam(DoubleParam.TreLim,32000.0);
    cplex.setParam(IntParam.Threads,numThreads);
    cplex.setParam(IntParam.ParallelMode,1);
    OutputStream out=new BufferedOutputStream(new FileOutputStream(new File(tempDir,""String_Node_Str"")));
    cplex.setOut(out);
    cplex.setWarning(out);
    if (cplex.solve()) {
      cplex.output().println(""String_Node_Str"" + cplex.getStatus());
      cplex.output().println(""String_Node_Str"" + cplex.getObjValue());
      IloLPMatrix lp=(IloLPMatrix)cplex.LPMatrixIterator().next();
      IloNumVar[] vars=lp.getNumVars();
      double[] vals=cplex.getValues(lp);
      assert(vars.length == vals.length);
      for (int i=0; i < vars.length; i++) {
        result.put(vars[i].getName(),vals[i]);
      }
      cplex.writeSolution(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
    }
    cplex.end();
    out.close();
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void solve(File lpFile){
  if (!lpFile.getPath().endsWith(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"" + lpFile.getPath());
  }
  result=new HashMap<String,Double>();
  try {
    IloCplex cplex=new IloCplex();
    cplex.importModel(lpFile.getAbsolutePath());
    File ordFile=new File(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
    if (ordFile.exists()) {
      log.debug(""String_Node_Str"" + ordFile.getPath());
      cplex.readOrder(ordFile.getAbsolutePath());
    }
    File mstFile=new File(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
    if (mstFile.exists()) {
      log.debug(""String_Node_Str"" + mstFile.getPath());
      cplex.readMIPStart(mstFile.getAbsolutePath());
    }
    cplex.setParam(DoubleParam.WorkMem,workMemMegs);
    cplex.setParam(StringParam.WorkDir,tempDir.getAbsolutePath());
    cplex.setParam(DoubleParam.TreLim,32000.0);
    cplex.setParam(IntParam.Threads,numThreads);
    cplex.setParam(IntParam.ParallelMode,1);
    cplex.setParam(IntParam.MIPOrdType,1);
    OutputStream out=new BufferedOutputStream(new FileOutputStream(new File(tempDir,""String_Node_Str"")));
    cplex.setOut(out);
    cplex.setWarning(out);
    if (cplex.solve()) {
      cplex.output().println(""String_Node_Str"" + cplex.getStatus());
      cplex.output().println(""String_Node_Str"" + cplex.getObjValue());
      IloLPMatrix lp=(IloLPMatrix)cplex.LPMatrixIterator().next();
      IloNumVar[] vars=lp.getNumVars();
      double[] vals=cplex.getValues(lp);
      assert(vars.length == vals.length);
      for (int i=0; i < vars.length; i++) {
        result.put(vars[i].getName(),vals[i]);
      }
      cplex.writeSolution(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
    }
    cplex.end();
    out.close();
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9889997441800972
131782,"@Override public void solve(File lpFile){
  result=null;
  File solFile=new File(tempDir,lpFile.getName().replace(""String_Node_Str"",""String_Node_Str""));
  String[] cmdArray=new String[]{gurobiBinary,""String_Node_Str"" + solFile.getAbsolutePath(),""String_Node_Str"" + numThreads,""String_Node_Str"" + tempDir.getAbsolutePath(),""String_Node_Str"" + workMemMegs / 1024.0,lpFile.getAbsolutePath()};
  File gurobiLog=new File(tempDir,""String_Node_Str"");
  Command.runCommand(cmdArray,gurobiLog,tempDir);
  Matcher objValMatcher=Files.getFirstMatch(gurobiLog,Pattern.compile(""String_Node_Str""));
  objective=Double.parseDouble(objValMatcher.group(1));
  try {
    result=readGurobiSol(solFile);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public boolean solve(File lpFile){
  result=null;
  File solFile=new File(tempDir,lpFile.getName().replace(""String_Node_Str"",""String_Node_Str""));
  String[] cmdArray=new String[]{gurobiBinary,""String_Node_Str"" + solFile.getAbsolutePath(),""String_Node_Str"" + numThreads,""String_Node_Str"" + tempDir.getAbsolutePath(),""String_Node_Str"" + workMemMegs / 1024.0,lpFile.getAbsolutePath()};
  File gurobiLog=new File(tempDir,""String_Node_Str"");
  Command.runCommand(cmdArray,gurobiLog,tempDir);
  if (!Files.fileContains(gurobiLog,""String_Node_Str"")) {
    return false;
  }
  Matcher objValMatcher=Files.getFirstMatch(gurobiLog,Pattern.compile(""String_Node_Str""));
  objective=Double.parseDouble(objValMatcher.group(1));
  try {
    result=readGurobiSol(solFile);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return true;
}",0.9340796019900498
131783,"@Override public void solve(File lpFile){
  if (!lpFile.getPath().endsWith(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"" + lpFile.getPath());
  }
  result=new HashMap<String,Double>();
  try {
    IloCplex cplex=new IloCplex();
    OutputStream out=new BufferedOutputStream(new FileOutputStream(new File(tempDir,""String_Node_Str"")));
    try {
      cplex.importModel(lpFile.getAbsolutePath());
      File ordFile=new File(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
      if (ordFile.exists()) {
        log.warn(""String_Node_Str"" + ordFile.getPath());
      }
      File mstFile=new File(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
      if (mstFile.exists()) {
        log.debug(""String_Node_Str"" + mstFile.getPath());
        cplex.readMIPStart(mstFile.getAbsolutePath());
      }
      cplex.setParam(DoubleParam.WorkMem,workMemMegs);
      cplex.setParam(StringParam.WorkDir,tempDir.getAbsolutePath());
      cplex.setParam(DoubleParam.TreLim,32000.0);
      cplex.setParam(IntParam.Threads,numThreads);
      cplex.setParam(IntParam.ParallelMode,1);
      cplex.setOut(out);
      cplex.setWarning(out);
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      cplex.writeParam(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      if (cplex.solve()) {
        cplex.output().println(""String_Node_Str"" + cplex.getStatus());
        cplex.output().println(""String_Node_Str"" + cplex.getObjValue());
        objective=cplex.getObjValue();
        IloLPMatrix lp=(IloLPMatrix)cplex.LPMatrixIterator().next();
        IloNumVar[] vars=lp.getNumVars();
        double[] vals=cplex.getValues(lp);
        assert(vars.length == vals.length);
        for (int i=0; i < vars.length; i++) {
          result.put(vars[i].getName(),vals[i]);
        }
        cplex.writeSolution(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
      }
    }
  finally {
      cplex.end();
      out.close();
    }
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public boolean solve(File lpFile){
  if (!lpFile.getPath().endsWith(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"" + lpFile.getPath());
  }
  result=new HashMap<String,Double>();
  try {
    IloCplex cplex=new IloCplex();
    OutputStream out=new BufferedOutputStream(new FileOutputStream(new File(tempDir,""String_Node_Str"")));
    try {
      cplex.importModel(lpFile.getAbsolutePath());
      File ordFile=new File(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
      if (ordFile.exists()) {
        log.warn(""String_Node_Str"" + ordFile.getPath());
      }
      File mstFile=new File(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
      if (mstFile.exists()) {
        log.debug(""String_Node_Str"" + mstFile.getPath());
        cplex.readMIPStart(mstFile.getAbsolutePath());
      }
      cplex.setParam(DoubleParam.WorkMem,workMemMegs);
      cplex.setParam(StringParam.WorkDir,tempDir.getAbsolutePath());
      cplex.setParam(DoubleParam.TreLim,32000.0);
      cplex.setParam(IntParam.Threads,numThreads);
      cplex.setParam(IntParam.ParallelMode,1);
      cplex.setOut(out);
      cplex.setWarning(out);
      cplex.exportModel(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      cplex.writeParam(new File(tempDir,""String_Node_Str"").getAbsolutePath());
      cplex.solve();
      if (cplex.getStatus() != Status.Optimal) {
        return false;
      }
      cplex.output().println(""String_Node_Str"" + cplex.getStatus());
      cplex.output().println(""String_Node_Str"" + cplex.getObjValue());
      objective=cplex.getObjValue();
      IloLPMatrix lp=(IloLPMatrix)cplex.LPMatrixIterator().next();
      IloNumVar[] vars=lp.getNumVars();
      double[] vals=cplex.getValues(lp);
      assert(vars.length == vals.length);
      for (int i=0; i < vars.length; i++) {
        result.put(vars[i].getName(),vals[i]);
      }
      cplex.writeSolution(lpFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
      return true;
    }
  finally {
      cplex.end();
      out.close();
    }
  }
 catch (  IloException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9707946570070184
131784,void solve(File lpFile);,boolean solve(File lpFile);,0.8235294117647058
131785,"@Override public void solve(File lpFile){
  result=new HashMap<String,Double>();
  File gurobiLog=new File(tempDir,""String_Node_Str"");
  try {
    GRBEnv env=new GRBEnv(gurobiLog.getAbsolutePath());
    GRBModel model=new GRBModel(env,lpFile.getAbsolutePath());
    model.optimize();
    objective=model.get(GRB.DoubleAttr.ObjVal);
    for (    GRBVar var : model.getVars()) {
      String gurobiVar=var.get(GRB.StringAttr.VarName);
      double value=var.get(GRB.DoubleAttr.X);
      result.put(gurobiVar,value);
    }
  }
 catch (  GRBException e) {
    throw new RuntimeException(e);
  }
}","@Override public boolean solve(File lpFile){
  result=new HashMap<String,Double>();
  File gurobiLog=new File(tempDir,""String_Node_Str"");
  try {
    GRBEnv env=new GRBEnv(gurobiLog.getAbsolutePath());
    GRBModel model=new GRBModel(env,lpFile.getAbsolutePath());
    model.optimize();
    if (model.get(GRB.IntAttr.Status) != GRB.OPTIMAL) {
      return false;
    }
    objective=model.get(GRB.DoubleAttr.ObjVal);
    for (    GRBVar var : model.getVars()) {
      String gurobiVar=var.get(GRB.StringAttr.VarName);
      double value=var.get(GRB.DoubleAttr.X);
      result.put(gurobiVar,value);
    }
    return true;
  }
 catch (  GRBException e) {
    throw new RuntimeException(e);
  }
}",0.9144634525660964
131786,"private void runZimpl(String type,int verbosity){
  String[] cmdArray=new String[]{zimplBinary,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",outputPrefix,""String_Node_Str"",type,""String_Node_Str"" + String.valueOf(verbosity),zimplFile.getAbsolutePath()};
  File zimplLog=new File(tempDir,""String_Node_Str"");
  Command.runCommand(cmdArray,zimplLog,tempDir);
}","private void runZimpl(String type,int verbosity){
  String[] cmdArray=new String[]{zimplBinary,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",outputPrefix,""String_Node_Str"",type,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + String.valueOf(verbosity),zimplFile.getAbsolutePath()};
  File zimplLog=new File(tempDir,""String_Node_Str"");
  Command.runCommand(cmdArray,zimplLog,tempDir);
}",0.9528795811518324
131787,"public void solve(File zimplFile){
  result=new HashMap<String,Double>();
  ZimplRunner zimplRunner=new ZimplRunner(zimplFile,tempDir);
  zimplRunner.runZimpl();
  File lpFile=zimplRunner.getLpFile();
  File tblFile=zimplRunner.getTblFile();
  ilpSolver.solve(lpFile);
  objective=ilpSolver.getObjective();
  Map<String,Double> solMap=ilpSolver.getResult();
  try {
    Map<String,String> tblMap=readTblMap(tblFile);
    for (    Entry<String,Double> entry : solMap.entrySet()) {
      String gurobiVar=entry.getKey();
      Double value=entry.getValue();
      value=value == -0.0 ? 0.0 : value;
      String zimplVar=tblMap.get(gurobiVar);
      result.put(zimplVar,value);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void solve(File zimplFile){
  result=new HashMap<String,Double>();
  ZimplRunner zimplRunner=new ZimplRunner(zimplFile,tempDir);
  zimplRunner.runZimpl();
  File lpFile=zimplRunner.getLpFile();
  File tblFile=zimplRunner.getTblFile();
  if (!ilpSolver.solve(lpFile)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  objective=ilpSolver.getObjective();
  Map<String,Double> solMap=ilpSolver.getResult();
  try {
    Map<String,String> tblMap=readTblMap(tblFile);
    for (    Entry<String,Double> entry : solMap.entrySet()) {
      String gurobiVar=entry.getKey();
      Double value=entry.getValue();
      value=value == -0.0 ? 0.0 : value;
      String zimplVar=tblMap.get(gurobiVar);
      result.put(zimplVar,value);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9591836734693876
131788,"public static DepTreebank getParses(Model model,SentenceCollection sentences,IlpFormulation formulation,DeltaGenerator deltaGen,double expectedParseWeight){
  IlpSolverFactory factory=new IlpSolverFactory(IlpSolverId.GUROBI_CL,2,128);
  IlpViterbiParserWithDeltas parser=new IlpViterbiParserWithDeltas(formulation,factory,deltaGen);
  DepTreebank trees=parser.getViterbiParse(sentences,model);
  for (  DepTree depTree : trees) {
    System.out.println(depTree);
  }
  Assert.assertEquals(expectedParseWeight,parser.getLastParseWeight(),1E-13);
  return trees;
}","public static DepTreebank getParses(Model model,SentenceCollection sentences,IlpFormulation formulation,DeltaGenerator deltaGen,double expectedParseWeight){
  IlpSolverFactory factory=new IlpSolverFactory(IlpSolverId.GUROBI_CL,2,128);
  IlpViterbiParserWithDeltas parser=new MockIlpViterbiParserWithDeltas(formulation,factory,deltaGen);
  DepTreebank trees=parser.getViterbiParse(sentences,model);
  for (  DepTree depTree : trees) {
    System.out.println(depTree);
  }
  Assert.assertEquals(expectedParseWeight,parser.getLastParseWeight(),1E-13);
  return trees;
}",0.99645390070922
131789,"@Test public void testProjAndNonprojDeltaParsers(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(IlpViterbiParserTest.getSentenceFromString(""String_Node_Str""));
  sentences.add(IlpViterbiParserTest.getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator(lambda));
  Model model=modelFactory.getInstance(sentences);
  double expectedParseWeight;
  DeltaGenerator deltaGen;
  expectedParseWeight=-140.25513195;
  deltaGen=new FixedIntervalDeltaGenerator(0.1,1);
  DepTreebank npFlowTrees=getParses(model,sentences,IlpFormulation.FLOW_NONPROJ,deltaGen,expectedParseWeight);
  expectedParseWeight=-171.80570295;
  deltaGen=new FactorDeltaGenerator(1.1,2);
  DepTreebank pFlowTrees=getParses(model,sentences,IlpFormulation.FLOW_PROJ,deltaGen,expectedParseWeight);
}","@Test public void testProjAndNonprojDeltaParsers(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(IlpViterbiParserTest.getSentenceFromString(""String_Node_Str""));
  sentences.add(IlpViterbiParserTest.getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator(lambda));
  Model model=modelFactory.getInstance(sentences);
  double expectedParseWeight;
  DeltaGenerator deltaGen;
  expectedParseWeight=-35.35388011;
  deltaGen=new FixedIntervalDeltaGenerator(0.1,1);
  DepTreebank npFlowTrees=getParses(model,sentences,IlpFormulation.FLOW_NONPROJ,deltaGen,expectedParseWeight);
  expectedParseWeight=-39.12828011;
  deltaGen=new FactorDeltaGenerator(1.1,2);
  DepTreebank pFlowTrees=getParses(model,sentences,IlpFormulation.FLOW_PROJ,deltaGen,expectedParseWeight);
}",0.9787735849056604
131790,"@Test public void testIdentityDeltaGen(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(IlpViterbiParserTest.getSentenceFromString(""String_Node_Str""));
  sentences.add(IlpViterbiParserTest.getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator(lambda));
  Model model=modelFactory.getInstance(sentences);
  double expectedParseWeight=-40.56204981;
  DeltaGenerator deltaGen;
  deltaGen=new FactorDeltaGenerator(1.1,2);
  DepTreebank treesStandard=IlpViterbiParserTest.getParses(model,sentences,IlpFormulation.FLOW_NONPROJ,expectedParseWeight);
  deltaGen=new IdentityDeltaGenerator();
  DepTreebank treesDelta=getParses(model,sentences,IlpFormulation.FLOW_NONPROJ,deltaGen,expectedParseWeight);
  for (int i=0; i < treesStandard.size(); i++) {
    assertArrayEquals(treesStandard.get(i).getParents(),treesDelta.get(i).getParents());
  }
}","@Test public void testIdentityDeltaGen(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(IlpViterbiParserTest.getSentenceFromString(""String_Node_Str""));
  sentences.add(IlpViterbiParserTest.getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator(lambda));
  Model model=modelFactory.getInstance(sentences);
  double expectedParseWeight=-40.56204981;
  DeltaGenerator deltaGen;
  DepTreebank treesStandard=IlpViterbiParserTest.getParses(model,sentences,IlpFormulation.FLOW_NONPROJ,expectedParseWeight);
  deltaGen=new IdentityDeltaGenerator();
  DepTreebank treesDelta=getParses(model,sentences,IlpFormulation.FLOW_NONPROJ,deltaGen,expectedParseWeight);
  for (int i=0; i < treesStandard.size(); i++) {
    assertArrayEquals(treesStandard.get(i).getParents(),treesDelta.get(i).getParents());
  }
}",0.9756906077348066
131791,"@Override public double getStopWeight(Triple<Label,String,Boolean> triple){
  return Prng.random.nextDouble();
}","@Override public double getStopWeight(Triple<Label,String,Boolean> triple){
  double stop=0.0;
  while (stop == 0.0) {
    stop=Prng.random.nextDouble();
  }
  return stop;
}",0.7552447552447552
131792,"@Override public double[] getChooseMulti(Pair<Label,String> pair,List<Label> children){
  return Multinomials.randomMultinomial(children.size());
}","@Override public double[] getChooseMulti(Pair<Label,String> pair,List<Label> children){
  double[] chooseMulti=Multinomials.randomMultinomial(children.size());
  for (int i=0; i < chooseMulti.length; i++) {
    chooseMulti[i]+=lambda;
  }
  Multinomials.normalizeProps(chooseMulti);
  return chooseMulti;
}",0.6181015452538632
131793,"@Test public void testFirstSentenceFromWsj(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator());
  Model model=modelFactory.getInstance(sentences);
  Stopwatch timer;
  timer=new Stopwatch();
  timer.start();
  DepTreebank flowTrees=getParses(model,sentences,IlpFormulation.FLOW_PROJ);
  timer.stop();
  System.out.println(timer.getAverageDuration().getDurationInMilliseconds());
  timer=new Stopwatch();
  timer.start();
  DepTreebank mflowTrees=getParses(model,sentences,IlpFormulation.FLOW_PROJ);
  timer.stop();
  System.out.println(timer.getAverageDuration().getDurationInMilliseconds());
  timer=new Stopwatch();
  timer.start();
  DepTreebank expTrees=getParses(model,sentences,IlpFormulation.EXPLICIT_PROJ);
  timer.stop();
  System.out.println(timer.getAverageDuration().getDurationInMilliseconds());
  for (int i=0; i < expTrees.size(); i++) {
    assertArrayEquals(expTrees.get(i).getParents(),mflowTrees.get(i).getParents());
    assertArrayEquals(expTrees.get(i).getParents(),flowTrees.get(i).getParents());
  }
  timer=new Stopwatch();
  timer.start();
  DepTreebank dpTrees=getParses(model,sentences,IlpFormulation.DP_PROJ);
  timer.stop();
  System.out.println(timer.getAverageDuration().getDurationInMilliseconds());
  for (int i=0; i < expTrees.size(); i++) {
    assertArrayEquals(expTrees.get(i).getParents(),dpTrees.get(i).getParents());
  }
}","@Test public void testFirstSentenceFromWsj(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator(lambda));
  Model model=modelFactory.getInstance(sentences);
  Stopwatch timer;
  timer=new Stopwatch();
  timer.start();
  DepTreebank flowTrees=getParses(model,sentences,IlpFormulation.FLOW_PROJ);
  timer.stop();
  System.out.println(timer.getAverageDuration().getDurationInMilliseconds());
  timer=new Stopwatch();
  timer.start();
  DepTreebank mflowTrees=getParses(model,sentences,IlpFormulation.FLOW_PROJ);
  timer.stop();
  System.out.println(timer.getAverageDuration().getDurationInMilliseconds());
  timer=new Stopwatch();
  timer.start();
  DepTreebank expTrees=getParses(model,sentences,IlpFormulation.EXPLICIT_PROJ);
  timer.stop();
  System.out.println(timer.getAverageDuration().getDurationInMilliseconds());
  for (int i=0; i < expTrees.size(); i++) {
    assertArrayEquals(expTrees.get(i).getParents(),mflowTrees.get(i).getParents());
    assertArrayEquals(expTrees.get(i).getParents(),flowTrees.get(i).getParents());
  }
  timer=new Stopwatch();
  timer.start();
  DepTreebank dpTrees=getParses(model,sentences,IlpFormulation.DP_PROJ);
  timer.stop();
  System.out.println(timer.getAverageDuration().getDurationInMilliseconds());
  for (int i=0; i < expTrees.size(); i++) {
    assertArrayEquals(expTrees.get(i).getParents(),dpTrees.get(i).getParents());
  }
}",0.9980132450331126
131794,"@Test public void testProjParses(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator());
  Model model=modelFactory.getInstance(sentences);
  DepTreebank flowTrees=getParses(model,sentences,IlpFormulation.FLOW_PROJ);
  DepTreebank mflowTrees=getParses(model,sentences,IlpFormulation.MFLOW_PROJ);
  DepTreebank expTrees=getParses(model,sentences,IlpFormulation.EXPLICIT_PROJ);
  DepTreebank dpTrees=getParses(model,sentences,IlpFormulation.DP_PROJ);
  for (int i=0; i < dpTrees.size(); i++) {
    assertArrayEquals(expTrees.get(i).getParents(),dpTrees.get(i).getParents());
    assertArrayEquals(flowTrees.get(i).getParents(),dpTrees.get(i).getParents());
    assertArrayEquals(mflowTrees.get(i).getParents(),dpTrees.get(i).getParents());
  }
}","@Test public void testProjParses(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator(lambda));
  Model model=modelFactory.getInstance(sentences);
  DepTreebank flowTrees=getParses(model,sentences,IlpFormulation.FLOW_PROJ);
  DepTreebank mflowTrees=getParses(model,sentences,IlpFormulation.MFLOW_PROJ);
  DepTreebank expTrees=getParses(model,sentences,IlpFormulation.EXPLICIT_PROJ);
  DepTreebank dpTrees=getParses(model,sentences,IlpFormulation.DP_PROJ);
  for (int i=0; i < dpTrees.size(); i++) {
    assertArrayEquals(expTrees.get(i).getParents(),dpTrees.get(i).getParents());
    assertArrayEquals(flowTrees.get(i).getParents(),dpTrees.get(i).getParents());
    assertArrayEquals(mflowTrees.get(i).getParents(),dpTrees.get(i).getParents());
  }
}",0.9966178128523112
131795,"@Test public void testNonProj(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator());
  Model model=modelFactory.getInstance(sentences);
  DepTreebank flowTrees=getParses(model,sentences,IlpFormulation.FLOW_NONPROJ);
  DepTreebank mflowTrees=getParses(model,sentences,IlpFormulation.MFLOW_NONPROJ);
  for (int i=0; i < flowTrees.size(); i++) {
    assertArrayEquals(flowTrees.get(i).getParents(),mflowTrees.get(i).getParents());
  }
}","@Test public void testNonProj(){
  SentenceCollection sentences=new SentenceCollection();
  sentences.add(getSentenceFromString(""String_Node_Str""));
  ModelFactory modelFactory=new DmvModelFactory(new RandomWeightGenerator(lambda));
  Model model=modelFactory.getInstance(sentences);
  DepTreebank flowTrees=getParses(model,sentences,IlpFormulation.FLOW_NONPROJ);
  DepTreebank mflowTrees=getParses(model,sentences,IlpFormulation.MFLOW_NONPROJ);
  for (int i=0; i < flowTrees.size(); i++) {
    assertArrayEquals(flowTrees.get(i).getParents(),mflowTrees.get(i).getParents());
  }
}",0.9948096885813148
131796,"public static Trainer getModel(CommandLine cmd) throws ParseException {
  final String algorithm=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final int iterations=cmd.hasOption(""String_Node_Str"") ? Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")) : 10;
  final String modelName=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final String parserName=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final IlpFormulation formulation=cmd.hasOption(""String_Node_Str"") ? IlpFormulation.getById(cmd.getOptionValue(""String_Node_Str"")) : IlpFormulation.DP_PROJ;
  final double lambda=cmd.hasOption(""String_Node_Str"") ? Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")) : 0.1;
  final int numThreads=cmd.hasOption(""String_Node_Str"") ? Integer.valueOf(cmd.getOptionValue(""String_Node_Str"")) : 2;
  Trainer trainer=null;
  if (algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    MStep<DepTreebank> mStep;
    ModelFactory modelFactory;
    if (modelName.equals(""String_Node_Str"")) {
      if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParser(formulation,numThreads);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiCorpusParser(formulation,numThreads);
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
      mStep=new DmvMStep(lambda);
      modelFactory=new DmvModelFactory(new RandomWeightGenerator());
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    trainer=new ViterbiTrainer(parser,mStep,modelFactory,iterations);
  }
 else {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}","public static Trainer getModel(CommandLine cmd) throws ParseException {
  final String algorithm=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final int iterations=cmd.hasOption(""String_Node_Str"") ? Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")) : 10;
  final String modelName=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final String parserName=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final IlpFormulation formulation=cmd.hasOption(""String_Node_Str"") ? IlpFormulation.getById(cmd.getOptionValue(""String_Node_Str"")) : IlpFormulation.DP_PROJ;
  final double lambda=cmd.hasOption(""String_Node_Str"") ? Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")) : 0.1;
  final int numThreads=cmd.hasOption(""String_Node_Str"") ? Integer.valueOf(cmd.getOptionValue(""String_Node_Str"")) : 2;
  Trainer trainer=null;
  if (algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    MStep<DepTreebank> mStep;
    ModelFactory modelFactory;
    if (modelName.equals(""String_Node_Str"")) {
      if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiParser(formulation,numThreads);
      }
 else       if (parserName.equals(""String_Node_Str"")) {
        parser=new IlpViterbiCorpusParser(formulation,numThreads);
      }
 else {
        throw new ParseException(""String_Node_Str"" + parserName);
      }
      mStep=new DmvMStep(lambda);
      modelFactory=new DmvModelFactory(new RandomWeightGenerator(lambda));
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    trainer=new ViterbiTrainer(parser,mStep,modelFactory,iterations);
  }
 else {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}",0.998367791077258
131797,"private Map<Label,Map<Label,Integer>> getChooseCounts(DepTreebank treebank){
  Map<Label,Map<Label,Integer>> chooseCounts=new HashMap<Label,Map<Label,Integer>>();
  for (  DepTree tree : treebank) {
    for (    DepTreeNode parentNode : tree) {
      Label parent=parentNode.getLabel();
      for (      DepTreeNode childNode : parentNode.getChildren()) {
        Label child=childNode.getLabel();
        Utilities.increment(chooseCounts,parent,child,1);
      }
    }
  }
  return chooseCounts;
}","private Map<Pair<Label,String>,Map<Label,Integer>> getChooseCounts(DepTreebank treebank){
  Map<Pair<Label,String>,Map<Label,Integer>> chooseCounts=new HashMap<Pair<Label,String>,Map<Label,Integer>>();
  for (  DepTree tree : treebank) {
    for (    DepTreeNode parentNode : tree) {
      Label parent=parentNode.getLabel();
      for (      String lr : DmvModelFactory.leftRight) {
        List<DepTreeNode> sideChildren=parentNode.getChildrenToSide(lr);
        Pair<Label,String> pair=new Pair<Label,String>(parent,lr);
        for (        DepTreeNode childNode : sideChildren) {
          Label child=childNode.getLabel();
          Utilities.increment(chooseCounts,pair,child,1);
        }
      }
    }
  }
  return chooseCounts;
}",0.5529506871463218
131798,"public MLWeightGenerator(Map<Label,Map<Label,Integer>> chooseCounts,Map<Triple<Label,String,Boolean>,Map<Boolean,Integer>> stopCounts,double lambda){
  this.chooseCounts=chooseCounts;
  this.stopCounts=stopCounts;
  this.lambda=lambda;
}","public MLWeightGenerator(Map<Pair<Label,String>,Map<Label,Integer>> chooseCounts,Map<Triple<Label,String,Boolean>,Map<Boolean,Integer>> stopCounts,double lambda){
  this.chooseCounts=chooseCounts;
  this.stopCounts=stopCounts;
  this.lambda=lambda;
}",0.9527720739219712
131799,"@Override public double[] getChooseMulti(Label parent,List<Label> children){
  Map<Label,Integer> childCounts=chooseCounts.get(parent);
  double[] mult=new double[children.size()];
  for (int i=0; i < mult.length; i++) {
    int childCount;
    if (childCounts != null) {
      childCount=Utilities.safeGet(childCounts,children.get(i));
    }
 else {
      childCount=0;
    }
    mult[i]=childCount + lambda;
  }
  Multinomials.normalizeProps(mult);
  return mult;
}","@Override public double[] getChooseMulti(Pair<Label,String> pair,List<Label> children){
  Map<Label,Integer> childCounts=chooseCounts.get(pair);
  double[] mult=new double[children.size()];
  for (int i=0; i < mult.length; i++) {
    int childCount;
    if (childCounts != null) {
      childCount=Utilities.safeGet(childCounts,children.get(i));
    }
 else {
      childCount=0;
    }
    mult[i]=childCount + lambda;
  }
  Multinomials.normalizeProps(mult);
  return mult;
}",0.9734888653234358
131800,"public Map<Pair<Label,Label>,Double> getChooseWeights(){
  return cwMap;
}","public Map<Triple<Label,String,Label>,Double> getChooseWeights(){
  return cwMap;
}",0.9044585987261148
131801,"public void putChooseWeight(Pair<Label,Label> pair,double d){
  cwMap.put(pair,d);
}","public void putChooseWeight(Triple<Label,String,Label> triple,double d){
  cwMap.put(triple,d);
}",0.8287292817679558
131802,"@Override public double[] getChooseMulti(Label parent,List<Label> children){
  return Multinomials.randomMultinomial(children.size());
}","@Override public double[] getChooseMulti(Pair<Label,String> pair,List<Label> children){
  return Multinomials.randomMultinomial(children.size());
}",0.939929328621908
131803,"@Override public Model getInstance(SentenceCollection sentences){
  DmvModel dmv=new DmvModel();
  Set<Label> vocab=getVocab(sentences);
  for (  Label label : vocab) {
    for (    String lr : leftRight) {
      for (      boolean adj : adjacent) {
        Triple<Label,String,Boolean> triple=new Triple<Label,String,Boolean>(label,lr,adj);
        double weight;
        weight=weightGen.getStopWeight(triple);
        dmv.putStopWeight(triple,weight);
      }
    }
  }
  Map<Label,Set<Label>> parentChildMap=getParentChildMap(sentences);
  for (  Entry<Label,Set<Label>> entry : parentChildMap.entrySet()) {
    Label parent=entry.getKey();
    List<Label> children=new ArrayList<Label>(entry.getValue());
    double[] multinomial=weightGen.getChooseMulti(parent,children);
    for (int i=0; i < multinomial.length; i++) {
      Pair<Label,Label> pair=new Pair<Label,Label>(parent,children.get(i));
      dmv.putChooseWeight(pair,multinomial[i]);
    }
  }
  return dmv;
}","@Override public Model getInstance(SentenceCollection sentences){
  DmvModel dmv=new DmvModel();
  Set<Label> vocab=sentences.getVocab();
  for (  Label label : vocab) {
    for (    String lr : leftRight) {
      for (      boolean adj : adjacent) {
        Triple<Label,String,Boolean> triple=new Triple<Label,String,Boolean>(label,lr,adj);
        double weight;
        weight=weightGen.getStopWeight(triple);
        dmv.putStopWeight(triple,weight);
      }
    }
  }
  List<Label> vocabList=new ArrayList<Label>(vocab);
  for (  Label parent : vocabList) {
    for (    String lr : leftRight) {
      Pair<Label,String> pair=new Pair<Label,String>(parent,lr);
      double[] multinomial=weightGen.getChooseMulti(pair,vocabList);
      for (int i=0; i < multinomial.length; i++) {
        Triple<Label,String,Label> triple=new Triple<Label,String,Label>(parent,lr,vocabList.get(i));
        dmv.putChooseWeight(triple,multinomial[i]);
      }
    }
  }
  return dmv;
}",0.7405128205128205
131804,"public void run(CommandLine cmd) throws ParseException {
  log.info(""String_Node_Str"");
  String trainPath=cmd.getOptionValue(""String_Node_Str"");
  Treebank treebank=new MemoryTreebank();
  CategoryWordTag.suppressTerminalDetails=true;
  treebank.loadPath(trainPath);
  final HeadFinder chf=new CollinsHeadFinder();
  treebank.apply(new TreeVisitor(){
    public void visitTree(    Tree pt){
      pt.percolateHeads(chf);
    }
  }
);
  DepTreebank depTreebank;
  if (cmd.hasOption(""String_Node_Str"") || cmd.hasOption(""String_Node_Str"")) {
    DepTreebank depTreebankTmp=new DepTreebank(treebank);
    depTreebank=new DepTreebank();
    int maxSentenceLength=Integer.MAX_VALUE;
    if (cmd.hasOption(""String_Node_Str"")) {
      maxSentenceLength=Integer.valueOf(cmd.getOptionValue(""String_Node_Str""));
    }
    int maxNumSentences=Integer.MAX_VALUE;
    if (cmd.hasOption(""String_Node_Str"")) {
      maxNumSentences=Integer.valueOf(cmd.getOptionValue(""String_Node_Str""));
    }
    for (    DepTree tree : depTreebankTmp) {
      if (depTreebank.size() > maxNumSentences) {
        break;
      }
      int len=tree.getNodes().size();
      if (len <= maxSentenceLength) {
        depTreebank.add(tree);
      }
    }
  }
 else {
    depTreebank=new DepTreebank(treebank);
  }
  log.info(""String_Node_Str"" + depTreebank.size());
  SentenceCollection sentences=new SentenceCollection(depTreebank);
  log.info(""String_Node_Str"");
  Trainer model=TrainerFactory.getModel(cmd);
  model.train(sentences);
  log.info(""String_Node_Str"");
  PrintWriter pw=new PrintWriter(System.out);
  if (cmd.hasOption(""String_Node_Str"")) {
    Evaluator pwEval=new DependencyParserEvaluator();
    pwEval.evaluate(model);
    pwEval.print(pw);
  }
}","public void run(CommandLine cmd) throws ParseException {
  log.info(""String_Node_Str"");
  String trainPath=cmd.getOptionValue(""String_Node_Str"");
  Treebank treebank=new MemoryTreebank();
  CategoryWordTag.suppressTerminalDetails=true;
  treebank.loadPath(trainPath);
  final HeadFinder chf=new CollinsHeadFinder();
  treebank.apply(new TreeVisitor(){
    public void visitTree(    Tree pt){
      pt.percolateHeads(chf);
    }
  }
);
  DepTreebank depTreebank;
  if (cmd.hasOption(""String_Node_Str"") || cmd.hasOption(""String_Node_Str"")) {
    DepTreebank depTreebankTmp=new DepTreebank(treebank);
    depTreebank=new DepTreebank();
    int maxSentenceLength=Integer.MAX_VALUE;
    if (cmd.hasOption(""String_Node_Str"")) {
      maxSentenceLength=Integer.valueOf(cmd.getOptionValue(""String_Node_Str""));
    }
    int maxNumSentences=Integer.MAX_VALUE;
    if (cmd.hasOption(""String_Node_Str"")) {
      maxNumSentences=Integer.valueOf(cmd.getOptionValue(""String_Node_Str""));
    }
    for (    DepTree tree : depTreebankTmp) {
      if (depTreebank.size() >= maxNumSentences) {
        break;
      }
      int len=tree.getNodes().size();
      if (len <= maxSentenceLength) {
        depTreebank.add(tree);
      }
    }
  }
 else {
    depTreebank=new DepTreebank(treebank);
  }
  log.info(""String_Node_Str"" + depTreebank.size());
  SentenceCollection sentences=depTreebank.getSentences();
  log.info(""String_Node_Str"");
  Trainer trainer=TrainerFactory.getModel(cmd);
  trainer.train(sentences);
  ViterbiParser parser=((ViterbiTrainer)trainer).getParser();
  Model model=trainer.getModel();
  log.info(""String_Node_Str"");
  Evaluator pwEval=new DependencyParserEvaluator(parser,depTreebank);
  pwEval.evaluate(model);
  pwEval.print();
}",0.9013840830449829
131805,"public SentenceCollection(DepTreebank treebank){
  super();
  for (  DepTree tree : treebank) {
    Sentence sentence=new Sentence(tree);
    add(sentence);
  }
}","SentenceCollection(DepTreebank treebank){
  super();
  for (  DepTree tree : treebank) {
    Sentence sentence=new Sentence(tree);
    add(sentence);
  }
}",0.9779179810725552
131806,"@Override public void print(PrintWriter pw){
}","@Override public void print(){
  log.info(String.format(""String_Node_Str"",accuracy));
}",0.5864661654135338
131807,"@Override public void evaluate(Trainer model){
}","@Override public void evaluate(Model model){
  int correct=0;
  int total=0;
  SentenceCollection sentences=depTreebank.getSentences();
  DepTreebank parses=parser.getViterbiParse(sentences,model);
  for (int i=0; i < depTreebank.size(); i++) {
    int[] goldParents=depTreebank.get(i).getParents();
    int[] parseParents=parses.get(i).getParents();
    for (int j=0; j < goldParents.length; j++) {
      if (goldParents[j] == parseParents[j]) {
        correct++;
      }
      total++;
    }
  }
  accuracy=(double)correct / (double)total;
}",0.1418918918918918
131808,void print(PrintWriter pw);,void print();,0.65
131809,void evaluate(Trainer model);,void evaluate(Model model);,0.8214285714285714
131810,"@Override public Model getModel(DepTreebank treebank){
  WeightGenerator weightGen=new MLWeightGenerator(getChooseCounts(treebank),getStopCounts(treebank));
  DmvModelFactory dmvFactory=new DmvModelFactory(weightGen);
  SentenceCollection sentences=new SentenceCollection(treebank);
  DmvModel dmv=(DmvModel)dmvFactory.getInstance(sentences);
  return dmv;
}","@Override public Model getModel(DepTreebank treebank){
  WeightGenerator weightGen=new MLWeightGenerator(getChooseCounts(treebank),getStopCounts(treebank),lambda);
  DmvModelFactory dmvFactory=new DmvModelFactory(weightGen);
  SentenceCollection sentences=treebank.getSentences();
  DmvModel dmv=(DmvModel)dmvFactory.getInstance(sentences);
  return dmv;
}",0.938375350140056
131811,"@Override public double getStopWeight(Triple<Label,String,Boolean> triple){
  Map<Boolean,Integer> map=stopCounts.get(triple);
  double numStop=Utilities.safeGet(map,Boolean.TRUE);
  double numNotStop=Utilities.safeGet(map,Boolean.FALSE);
  double weight=numStop / (numStop + numNotStop);
  return weight;
}","@Override public double getStopWeight(Triple<Label,String,Boolean> triple){
  Map<Boolean,Integer> map=stopCounts.get(triple);
  double numStop;
  double numNotStop;
  if (map != null) {
    numStop=Utilities.safeGet(map,Boolean.TRUE);
    numNotStop=Utilities.safeGet(map,Boolean.FALSE);
  }
 else {
    numStop=0;
    numNotStop=0;
  }
  double weight=(numStop + lambda) / (numStop + numNotStop + 2 * lambda);
  return weight;
}",0.7978290366350068
131812,"public MLWeightGenerator(Map<Label,Map<Label,Integer>> chooseCounts,Map<Triple<Label,String,Boolean>,Map<Boolean,Integer>> stopCounts){
  this.chooseCounts=chooseCounts;
  this.stopCounts=stopCounts;
}","public MLWeightGenerator(Map<Label,Map<Label,Integer>> chooseCounts,Map<Triple<Label,String,Boolean>,Map<Boolean,Integer>> stopCounts,double lambda){
  this.chooseCounts=chooseCounts;
  this.stopCounts=stopCounts;
  this.lambda=lambda;
}",0.9178082191780822
131813,"@Override public double[] getChooseMulti(Label parent,List<Label> children){
  Map<Label,Integer> childCounts=chooseCounts.get(parent);
  double[] mult=new double[children.size()];
  for (int i=0; i < mult.length; i++) {
    mult[i]=childCounts.get(children.get(i));
  }
  Multinomials.normalizeProps(mult);
  return mult;
}","@Override public double[] getChooseMulti(Label parent,List<Label> children){
  Map<Label,Integer> childCounts=chooseCounts.get(parent);
  double[] mult=new double[children.size()];
  for (int i=0; i < mult.length; i++) {
    int childCount;
    if (childCounts != null) {
      childCount=Utilities.safeGet(childCounts,children.get(i));
    }
 else {
      childCount=0;
    }
    mult[i]=childCount + lambda;
  }
  Multinomials.normalizeProps(mult);
  return mult;
}",0.7635903919089759
131814,"@Override public void train(SentenceCollection sentences){
  Model model=modelFactory.getInstance(sentences);
  for (int i=0; i < iterations; i++) {
    C counts=eStep.getCounts(sentences,model);
    model=mStep.getModel(counts);
  }
}","@Override public void train(SentenceCollection sentences){
  model=modelFactory.getInstance(sentences);
  for (int i=0; i < iterations; i++) {
    C counts=eStep.getCounts(sentences,model);
    model=mStep.getModel(counts);
  }
}",0.9870689655172412
131815,"public static Trainer getModel(CommandLine cmd) throws ParseException {
  final String algorithm=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final int iterations=cmd.hasOption(""String_Node_Str"") ? Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")) : 10;
  final String modelName=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final IlpFormulation formulation=cmd.hasOption(""String_Node_Str"") ? IlpFormulation.getById(cmd.getOptionValue(""String_Node_Str"")) : IlpFormulation.DP_PROJ;
  Trainer trainer=null;
  if (algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    MStep<DepTreebank> mStep;
    ModelFactory modelFactory;
    if (modelName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiParser(formulation);
      mStep=new DmvMStep();
      modelFactory=new DmvModelFactory(new RandomWeightGenerator());
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    trainer=new ViterbiTrainer(parser,mStep,modelFactory,iterations);
  }
 else {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}","public static Trainer getModel(CommandLine cmd) throws ParseException {
  final String algorithm=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final int iterations=cmd.hasOption(""String_Node_Str"") ? Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")) : 10;
  final String modelName=cmd.hasOption(""String_Node_Str"") ? cmd.getOptionValue(""String_Node_Str"") : ""String_Node_Str"";
  final IlpFormulation formulation=cmd.hasOption(""String_Node_Str"") ? IlpFormulation.getById(cmd.getOptionValue(""String_Node_Str"")) : IlpFormulation.DP_PROJ;
  final double lambda=cmd.hasOption(""String_Node_Str"") ? Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")) : 0.1;
  Trainer trainer=null;
  if (algorithm.equals(""String_Node_Str"")) {
    ViterbiParser parser;
    MStep<DepTreebank> mStep;
    ModelFactory modelFactory;
    if (modelName.equals(""String_Node_Str"")) {
      parser=new IlpViterbiParser(formulation);
      mStep=new DmvMStep(lambda);
      modelFactory=new DmvModelFactory(new RandomWeightGenerator());
    }
 else {
      throw new ParseException(""String_Node_Str"" + modelName);
    }
    trainer=new ViterbiTrainer(parser,mStep,modelFactory,iterations);
  }
 else {
    throw new ParseException(""String_Node_Str"" + algorithm);
  }
  return trainer;
}",0.9487590072057646
131816,"public static void addOptions(Options options){
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
}","public static void addOptions(Options options){
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
}",0.9020556227327692
131817,"@Override public DepTree getViterbiParse(Sentence sentence,Model model){
  File tempDir=Command.createTempDir(""String_Node_Str"",workspace);
  File zimplFile=encode(tempDir,sentence,model);
  ZimplSolver solver=new ZimplSolver(tempDir,new JavaGurobiIlpSolver(tempDir));
  solver.solve(zimplFile);
  Map<String,Double> result=solver.getResult();
  DepTree tree=decode(sentence,result);
  return tree;
}","@Override public DepTree getViterbiParse(Sentence sentence,Model model){
  File tempDir=Command.createTempDir(""String_Node_Str"",workspace);
  File zimplFile=encode(tempDir,sentence,model);
  ZimplSolver solver=new ZimplSolver(tempDir,new ClGurobiIlpSolver(tempDir));
  solver.solve(zimplFile);
  Map<String,Double> result=solver.getResult();
  DepTree tree=decode(sentence,result);
  return tree;
}",0.9924812030075189
131818,"public IlpViterbiParser(boolean projective){
  XmlCodeContainerReader reader=new XmlCodeContainerReader();
  reader.loadZimplCodeFromResource(ZIMPL_CODE_XML);
  codeMap=reader.getCodeMap();
  workspace=Command.createTempDir(""String_Node_Str"",new File(""String_Node_Str""));
}","public IlpViterbiParser(boolean projective){
  this.projective=projective;
  XmlCodeContainerReader reader=new XmlCodeContainerReader();
  reader.loadZimplCodeFromResource(ZIMPL_CODE_XML);
  codeMap=reader.getCodeMap();
  workspace=Command.createTempDir(""String_Node_Str"",new File(""String_Node_Str""));
}",0.9479166666666666
131819,"@Override public void solve(File lpFile){
  result=null;
  File solFile=new File(tempDir,lpFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str""));
  String[] cmdArray=new String[]{gurobiBinary,""String_Node_Str"" + solFile,lpFile.getAbsolutePath()};
  File gurobiLog=new File(tempDir,""String_Node_Str"");
  Command.runCommand(cmdArray,gurobiLog,tempDir);
  try {
    result=readGurobiSol(solFile);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void solve(File lpFile){
  result=null;
  File solFile=new File(tempDir,lpFile.getName().replace(""String_Node_Str"",""String_Node_Str""));
  String[] cmdArray=new String[]{gurobiBinary,""String_Node_Str"" + solFile.getAbsolutePath(),lpFile.getAbsolutePath()};
  File gurobiLog=new File(tempDir,""String_Node_Str"");
  Command.runCommand(cmdArray,gurobiLog,tempDir);
  try {
    result=readGurobiSol(solFile);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.978238341968912
131820,"private void runZimpl(String type,int verbosity){
  String[] cmdArray=new String[]{zimplBinary,""String_Node_Str"",outputPrefix,""String_Node_Str"",type,""String_Node_Str"" + String.valueOf(verbosity),zimplFile.getAbsolutePath()};
  File zimplLog=new File(outputPrefix + ""String_Node_Str"");
  Command.runCommand(cmdArray,zimplLog,tempDir);
}","private void runZimpl(String type,int verbosity){
  String[] cmdArray=new String[]{zimplBinary,""String_Node_Str"",outputPrefix,""String_Node_Str"",type,""String_Node_Str"" + String.valueOf(verbosity),zimplFile.getAbsolutePath()};
  File zimplLog=new File(tempDir,""String_Node_Str"");
  Command.runCommand(cmdArray,zimplLog,tempDir);
}",0.9653092006033184
131821,"private void checkTree(){
  int emptyCount=countChildrenOf(EMPTY);
  if (emptyCount != 0) {
    throw new IllegalStateException(""String_Node_Str"" + emptyCount);
  }
  int wallCount=countChildrenOf(WALL);
  if (wallCount != 1) {
    throw new IllegalStateException(""String_Node_Str"" + wallCount);
  }
  for (int i=0; i < parents.length; i++) {
    int numAncestors=0;
    int parent=parents[i];
    while (parent != WALL) {
      numAncestors+=1;
      if (numAncestors > parents.length - 1) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      parent=parents[parent];
    }
  }
  if (nodes.size() != parents.length) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void checkTree(){
  int emptyCount=countChildrenOf(EMPTY);
  if (emptyCount != 0) {
    throw new IllegalStateException(""String_Node_Str"" + emptyCount);
  }
  int wallCount=countChildrenOf(WALL);
  if (wallCount != 1) {
    throw new IllegalStateException(""String_Node_Str"" + wallCount);
  }
  for (int i=0; i < parents.length; i++) {
    int numAncestors=0;
    int parent=parents[i];
    while (parent != WALL) {
      numAncestors+=1;
      if (numAncestors > parents.length - 1) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      parent=parents[parent];
    }
  }
  if (nodes.size() - 1 != parents.length) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9971590909090908
131822,"private void addParentChildLinksToNodes(){
  checkTree();
  for (int i=0; i < parents.length; i++) {
    DepTreeNode node=nodes.get(i);
    if (parents[i] != WALL) {
      node.setParent(nodes.get(parents[i]));
    }
    for (int j=0; j < parents.length; j++) {
      if (parents[j] == i) {
        node.addChild(nodes.get(j));
      }
    }
  }
}","private void addParentChildLinksToNodes(){
  checkTree();
  for (int i=0; i < parents.length; i++) {
    DepTreeNode node=getNodeByPosition(i);
    node.setParent(getNodeByPosition(parents[i]));
    for (int j=0; j < parents.length; j++) {
      if (parents[j] == i) {
        node.addChild(getNodeByPosition(j));
      }
    }
  }
}",0.7529411764705882
131823,"public DepTree(Sentence sentence,int[] parents){
  this.parents=parents;
  for (int i=0; i < sentence.size(); i++) {
    Label label=sentence.get(i);
    nodes.add(new DepTreeNode(label,i));
  }
  addParentChildLinksToNodes();
}","public DepTree(Sentence sentence,int[] parents){
  this.parents=parents;
  nodes.add(new WallDepTreeNode());
  for (int i=0; i < sentence.size(); i++) {
    Label label=sentence.get(i);
    nodes.add(new DepTreeNode(label,i));
  }
  addParentChildLinksToNodes();
}",0.926829268292683
131824,"public Sentence(DepTree tree){
  super();
  for (  DepTreeNode node : tree.getNodes()) {
    add(node.getLabel());
  }
}","public Sentence(DepTree tree){
  super();
  for (  DepTreeNode node : tree.getNodes()) {
    if (!node.isWall()) {
      add(node.getLabel());
    }
  }
}",0.8759124087591241
131825,"public static Map<Label,Set<Label>> getParentChildMap(SentenceCollection sentences){
  Map<Label,Set<Label>> map=new HashMap<Label,Set<Label>>();
  for (  Sentence sent : sentences) {
    for (int i=0; i < sent.size(); i++) {
      for (int j=0; j < sent.size(); j++) {
        if (j != i) {
          Label parent=sent.get(i);
          Label child=sent.get(j);
          Utilities.addToSet(map,parent,child);
        }
      }
    }
  }
  return map;
}","public static Map<Label,Set<Label>> getParentChildMap(SentenceCollection sentences){
  Map<Label,Set<Label>> map=new HashMap<Label,Set<Label>>();
  for (  Sentence sent : sentences) {
    for (int i=0; i < sent.size(); i++) {
      Label parent=sent.get(i);
      for (int j=0; j < sent.size(); j++) {
        if (j != i) {
          Label child=sent.get(j);
          Utilities.addToSet(map,parent,child);
        }
      }
      Utilities.addToSet(map,WallDepTreeNode.WALL_LABEL,parent);
      Utilities.addToSet(map,parent,WallDepTreeNode.WALL_LABEL);
    }
  }
  return map;
}",0.7059961315280464
131826,"public static Set<Label> getVocab(SentenceCollection sentences){
  Set<Label> vocab=new HashSet<Label>();
  for (  Sentence sent : sentences) {
    for (    Label label : sent) {
      vocab.add(label);
    }
  }
  return vocab;
}","public static Set<Label> getVocab(SentenceCollection sentences){
  Set<Label> vocab=new HashSet<Label>();
  for (  Sentence sent : sentences) {
    for (    Label label : sent) {
      vocab.add(label);
    }
  }
  vocab.add(WallDepTreeNode.WALL_LABEL);
  return vocab;
}",0.9181636726546906
131827,"private String encode(File tempDir,Sentence sentence,Model model){
  try {
    encodeSentence(tempDir,sentence);
    DmvModel dmv=(DmvModel)model;
    encodeDmv(tempDir,dmv);
    File zimplFile=createZimplFile(tempDir);
    return zimplFile.getAbsolutePath();
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e);
  }
}","private String encode(File tempDir,Sentence sentence,Model model){
  try {
    SentenceCollection sentences=new SentenceCollection();
    sentences.add(sentence);
    encodeSentences(tempDir,sentences);
    DmvModel dmv=(DmvModel)model;
    WeightCopier weightCopier=new WeightCopier(dmv);
    DmvModel filteredDmv=(DmvModel)(new DmvModelFactory(weightCopier)).getInstance(sentences);
    encodeDmv(tempDir,filteredDmv);
    File zimplFile=createZimplFile(tempDir);
    return zimplFile.getAbsolutePath();
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e);
  }
}",0.7198275862068966
131828,"public void updateAccTime(long timestamp){
  int counter=0;
  if (timestamp < this.accTime) {
    this.accTime=timestamp;
    counter=accImageMapping.size() - accImageMappingIdx;
    accImageMappingIdx=0;
  }
 else {
    this.accTime=timestamp;
    while (accImageMapping.get(accImageMappingIdx).second < timestamp) {
      accImageMappingIdx++;
      counter++;
      if (accImageMappingIdx == accImageMapping.size()) {
        accImageMappingIdx--;
        counter--;
        break;
      }
    }
  }
  this.imageTime.getAndAdd(counter);
}","public void updateAccTime(long timestamp){
  if (accImageMapping == null) {
    this.accTime=timestamp;
    return;
  }
  int counter=0;
  if (timestamp < this.accTime) {
    this.accTime=timestamp;
    counter=accImageMapping.size() - accImageMappingIdx;
    accImageMappingIdx=0;
  }
 else {
    this.accTime=timestamp;
    while (accImageMapping.get(accImageMappingIdx).second < timestamp) {
      accImageMappingIdx++;
      counter++;
      if (accImageMappingIdx == accImageMapping.size()) {
        accImageMappingIdx--;
        counter--;
        break;
      }
    }
  }
  this.imageTime.getAndAdd(counter);
}",0.9335634167385676
131829,"public void updateAccTime(long timestamp){
  int counter=0;
  if (timestamp < this.accTime) {
    this.accTime=timestamp;
    counter=accImageMapping.size() - accImageMappingIdx;
    accImageMappingIdx=0;
  }
 else {
    this.accTime=timestamp;
    while (accImageMapping.get(accImageMappingIdx).second < timestamp) {
      accImageMappingIdx++;
      counter++;
      if (accImageMappingIdx == accImageMapping.size()) {
        accImageMappingIdx--;
        counter--;
        break;
      }
    }
  }
  this.imageTime.getAndAdd(counter);
}","public void updateAccTime(long timestamp){
  if (accImageMapping == null) {
    this.accTime=timestamp;
    return;
  }
  int counter=0;
  if (timestamp < this.accTime) {
    this.accTime=timestamp;
    counter=accImageMapping.size() - accImageMappingIdx;
    accImageMappingIdx=0;
  }
 else {
    this.accTime=timestamp;
    while (accImageMapping.get(accImageMappingIdx).second < timestamp) {
      accImageMappingIdx++;
      counter++;
      if (accImageMappingIdx == accImageMapping.size()) {
        accImageMappingIdx--;
        counter--;
        break;
      }
    }
  }
  this.imageTime.getAndAdd(counter);
}",0.9335634167385676
131830,"public void onPreviewFrame(byte[] frame,Camera mCamera){
  if (isRunning) {
    Camera.Parameters parameters=mCamera.getParameters();
    if (videoStreamingThread != null) {
      videoStreamingThread.push(frame,parameters);
    }
  }
}","public void onPreviewFrame(byte[] frame,Camera mCamera){
  if (isRunning) {
    Camera.Parameters parameters=mCamera.getParameters();
    if (videoStreamingThread != null) {
      videoStreamingThread.push(frame,parameters);
    }
  }
  mCamera.addCallbackBuffer(frame);
}",0.9291338582677166
131831,"/** 
 * Called whenever a new frame is generated Puts the new frame into the @frameBuffer
 */
public void push(byte[] frame,Parameters parameters){
  Log.v(LOG_TAG,""String_Node_Str"");
  if (!Const.LOAD_IMAGES) {
synchronized (frameLock) {
      Size cameraImageSize=parameters.getPreviewSize();
      YuvImage image=new YuvImage(frame,parameters.getPreviewFormat(),cameraImageSize.width,cameraImageSize.height,null);
      ByteArrayOutputStream tmpBuffer=new ByteArrayOutputStream();
      image.compressToJpeg(new Rect(0,0,image.getWidth(),image.getHeight()),67,tmpBuffer);
      this.frameBuffer=tmpBuffer.toByteArray();
      this.frameID++;
      frameLock.notify();
    }
  }
 else {
    try {
      long dataTime=System.currentTimeMillis();
      int dataSize=(int)this.imageFiles[indexImageFile].length();
      FileInputStream fi=new FileInputStream(this.imageFiles[indexImageFile]);
      byte[] buffer=new byte[dataSize];
      fi.read(buffer,0,dataSize);
synchronized (frameLock) {
        this.frameBuffer=buffer;
        this.frameID++;
        frameLock.notify();
      }
      indexImageFile=(indexImageFile + 1) % this.imageFiles.length;
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
  }
  mCamera.addCallbackBuffer(frame);
}","/** 
 * Called whenever a new frame is generated Puts the new frame into the @frameBuffer
 */
public void push(byte[] frame,Parameters parameters){
  Log.v(LOG_TAG,""String_Node_Str"");
  if (!Const.LOAD_IMAGES) {
synchronized (frameLock) {
      Size cameraImageSize=parameters.getPreviewSize();
      YuvImage image=new YuvImage(frame,parameters.getPreviewFormat(),cameraImageSize.width,cameraImageSize.height,null);
      ByteArrayOutputStream tmpBuffer=new ByteArrayOutputStream();
      image.compressToJpeg(new Rect(0,0,image.getWidth(),image.getHeight()),67,tmpBuffer);
      this.frameBuffer=tmpBuffer.toByteArray();
      this.frameID++;
      frameLock.notify();
    }
  }
 else {
    try {
      long dataTime=System.currentTimeMillis();
      int dataSize=(int)this.imageFiles[indexImageFile].length();
      FileInputStream fi=new FileInputStream(this.imageFiles[indexImageFile]);
      byte[] buffer=new byte[dataSize];
      fi.read(buffer,0,dataSize);
synchronized (frameLock) {
        this.frameBuffer=buffer;
        this.frameID++;
        frameLock.notify();
      }
      indexImageFile=(indexImageFile + 1) % this.imageFiles.length;
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
  }
}",0.9857369255150554
131832,"public void reset(){
  this.prevRecvFrameID=0;
  this.sentPackets.clear();
}","public void reset(){
  this.currentToken=Const.TOKEN_SIZE;
  this.prevRecvFrameID=0;
  this.sentPackets.clear();
}",0.8
131833,"public void onPreviewFrame(byte[] frame,Camera mCamera){
  if (isRunning) {
    Camera.Parameters parameters=mCamera.getParameters();
    if (videoStreamingThread != null) {
      videoStreamingThread.push(frame,parameters);
    }
  }
}","public void onPreviewFrame(byte[] frame,Camera mCamera){
  if (isRunning) {
    Camera.Parameters parameters=mCamera.getParameters();
    if (videoStreamingThread != null) {
      videoStreamingThread.push(frame,parameters);
    }
  }
  mCamera.addCallbackBuffer(frame);
}",0.9291338582677166
131834,"/** 
 * Called whenever a new frame is generated Puts the new frame into the @frameBuffer
 */
public void push(byte[] frame,Parameters parameters){
  Log.v(LOG_TAG,""String_Node_Str"");
  if (!Const.LOAD_IMAGES) {
synchronized (frameLock) {
      Size cameraImageSize=parameters.getPreviewSize();
      YuvImage image=new YuvImage(frame,parameters.getPreviewFormat(),cameraImageSize.width,cameraImageSize.height,null);
      ByteArrayOutputStream tmpBuffer=new ByteArrayOutputStream();
      image.compressToJpeg(new Rect(0,0,image.getWidth(),image.getHeight()),67,tmpBuffer);
      this.frameBuffer=tmpBuffer.toByteArray();
      this.frameID++;
      frameLock.notify();
    }
  }
 else {
    try {
      long dataTime=System.currentTimeMillis();
      int dataSize=(int)this.imageFiles[indexImageFile].length();
      FileInputStream fi=new FileInputStream(this.imageFiles[indexImageFile]);
      byte[] buffer=new byte[dataSize];
      fi.read(buffer,0,dataSize);
synchronized (frameLock) {
        this.frameBuffer=buffer;
        this.frameID++;
        frameLock.notify();
      }
      indexImageFile=(indexImageFile + 1) % this.imageFiles.length;
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
  }
  mCamera.addCallbackBuffer(frame);
}","/** 
 * Called whenever a new frame is generated Puts the new frame into the @frameBuffer
 */
public void push(byte[] frame,Parameters parameters){
  Log.v(LOG_TAG,""String_Node_Str"");
  if (!Const.LOAD_IMAGES) {
synchronized (frameLock) {
      Size cameraImageSize=parameters.getPreviewSize();
      YuvImage image=new YuvImage(frame,parameters.getPreviewFormat(),cameraImageSize.width,cameraImageSize.height,null);
      ByteArrayOutputStream tmpBuffer=new ByteArrayOutputStream();
      image.compressToJpeg(new Rect(0,0,image.getWidth(),image.getHeight()),67,tmpBuffer);
      this.frameBuffer=tmpBuffer.toByteArray();
      this.frameID++;
      frameLock.notify();
    }
  }
 else {
    try {
      long dataTime=System.currentTimeMillis();
      int dataSize=(int)this.imageFiles[indexImageFile].length();
      FileInputStream fi=new FileInputStream(this.imageFiles[indexImageFile]);
      byte[] buffer=new byte[dataSize];
      fi.read(buffer,0,dataSize);
synchronized (frameLock) {
        this.frameBuffer=buffer;
        this.frameID++;
        frameLock.notify();
      }
      indexImageFile=(indexImageFile + 1) % this.imageFiles.length;
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
  }
}",0.9857369255150554
131835,"public void reset(){
  this.prevRecvFrameID=0;
  this.sentPackets.clear();
}","public void reset(){
  this.currentToken=Const.TOKEN_SIZE;
  this.prevRecvFrameID=0;
  this.sentPackets.clear();
}",0.8
131836,"/** 
 * Terminates all services.
 */
private void terminate(){
  Log.v(LOG_TAG,""String_Node_Str"");
  isRunning=false;
  if ((resultThread != null) && (resultThread.isAlive())) {
    resultThread.close();
    resultThread=null;
  }
  if ((videoStreamingThread != null) && (videoStreamingThread.isAlive())) {
    videoStreamingThread.stopStreaming();
    videoStreamingThread=null;
  }
  if ((accStreamingThread != null) && (accStreamingThread.isAlive())) {
    accStreamingThread.stopStreaming();
    accStreamingThread=null;
  }
  if (tokenController != null) {
    tokenController.close();
    tokenController=null;
  }
  if (tts != null) {
    tts.stop();
    tts.shutdown();
    tts=null;
  }
  if (preview != null) {
    preview.setPreviewCallback(null);
    preview.close();
    preview=null;
  }
  if (sensorManager != null) {
    sensorManager.unregisterListener(this);
    sensorManager=null;
    sensorAcc=null;
  }
}","/** 
 * Terminates all services.
 */
private void terminate(){
  Log.v(LOG_TAG,""String_Node_Str"");
  isRunning=false;
  if ((resultThread != null) && (resultThread.isAlive())) {
    resultThread.close();
    resultThread=null;
  }
  if ((videoStreamingThread != null) && (videoStreamingThread.isAlive())) {
    videoStreamingThread.stopStreaming();
    videoStreamingThread=null;
  }
  if ((accStreamingThread != null) && (accStreamingThread.isAlive())) {
    accStreamingThread.stopStreaming();
    accStreamingThread=null;
  }
  if ((controlThread != null) && (controlThread.isAlive())) {
    controlThread.close();
    controlThread=null;
  }
  if (tokenController != null) {
    tokenController.close();
    tokenController=null;
  }
  if (tts != null) {
    tts.stop();
    tts.shutdown();
    tts=null;
  }
  if (preview != null) {
    preview.setPreviewCallback(null);
    preview.close();
    preview=null;
  }
  if (sensorManager != null) {
    sensorManager.unregisterListener(this);
    sensorManager=null;
    sensorAcc=null;
  }
}",0.9405789740985272
131837,"@Override public void run(){
  Log.v(LOG_TAG,""String_Node_Str"");
  animationDisplayIdx=(animationDisplayIdx + 1) % nAnimationFrames;
  Message msg=Message.obtain();
  msg.what=NetworkProtocol.NETWORK_RET_ANIMATION;
  msg.obj=animationFrames[animationDisplayIdx];
  returnMsgHandler.sendMessage(msg);
  timer.schedule(new animationTask(),animationPeriods[animationDisplayIdx]);
}","@Override public void run(){
  Log.v(LOG_TAG,""String_Node_Str"");
  animationDisplayIdx=(animationDisplayIdx + 1) % nAnimationFrames;
  Message msg=Message.obtain();
  msg.what=NetworkProtocol.NETWORK_RET_ANIMATION;
  msg.obj=animationFrames[animationDisplayIdx];
  returnMsgHandler.sendMessage(msg);
  if (isRunning)   timer.schedule(new animationTask(),animationPeriods[animationDisplayIdx]);
}",0.9780077619663649
131838,"public void close(){
  this.isRunning=false;
  try {
    if (this.networkReader != null) {
      this.networkReader.close();
      this.networkReader=null;
    }
  }
 catch (  IOException e) {
  }
  try {
    if (this.networkWriter != null) {
      this.networkWriter.close();
      this.networkWriter=null;
    }
  }
 catch (  IOException e) {
  }
  try {
    if (this.tcpSocket != null) {
      this.tcpSocket.shutdownInput();
      this.tcpSocket.shutdownOutput();
      this.tcpSocket.close();
      this.tcpSocket=null;
    }
  }
 catch (  IOException e) {
  }
}","public void close(){
  this.isRunning=false;
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  try {
    if (this.networkReader != null) {
      this.networkReader.close();
      this.networkReader=null;
    }
  }
 catch (  IOException e) {
  }
  try {
    if (this.networkWriter != null) {
      this.networkWriter.close();
      this.networkWriter=null;
    }
  }
 catch (  IOException e) {
  }
  try {
    if (this.tcpSocket != null) {
      this.tcpSocket.shutdownInput();
      this.tcpSocket.shutdownOutput();
      this.tcpSocket.close();
      this.tcpSocket=null;
    }
  }
 catch (  IOException e) {
  }
}",0.9473684210526316
131839,"private void init_once(){
  mPreview=(CameraPreview)findViewById(R.id.camera_preview);
  mPreview.setPreviewCallback(previewCallback);
  Const.ROOT_DIR.mkdirs();
  if (mTTS == null) {
    mTTS=new TextToSpeech(this,this);
  }
  if (mSensorManager == null) {
    mSensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);
    mAccelerometer=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
    mSensorManager.registerListener(this,mAccelerometer,SensorManager.SENSOR_DELAY_NORMAL);
  }
  if (this.errorAlertDialog == null) {
    this.errorAlertDialog=new AlertDialog.Builder(GabrielClientActivity.this).create();
    this.errorAlertDialog.setTitle(""String_Node_Str"");
    this.errorAlertDialog.setIcon(R.drawable.ic_launcher);
  }
  if (cameraRecorder != null) {
    cameraRecorder.close();
    cameraRecorder=null;
  }
  if (localOutputStream != null) {
    try {
      localOutputStream.close();
    }
 catch (    IOException e) {
    }
    localOutputStream=null;
  }
  if (cameraRecorder == null) {
    cameraRecorder=new CameraConnector();
    cameraRecorder.init();
    Log.d(LOG_TAG,""String_Node_Str"");
  }
  if (localOutputStream == null) {
    localOutputStream=new BufferedOutputStream(new FileOutputStream(cameraRecorder.getInputFileDescriptor()),LOCAL_OUTPUT_BUFF_SIZE);
    Log.d(LOG_TAG,""String_Node_Str"");
  }
  hasStarted=true;
}","private void init_once(){
  mPreview=(CameraPreview)findViewById(R.id.camera_preview);
  mPreview.setPreviewCallback(previewCallback);
  Const.ROOT_DIR.mkdirs();
  Const.LATENCY_DIR.mkdirs();
  if (mTTS == null) {
    mTTS=new TextToSpeech(this,this);
  }
  if (mSensorManager == null) {
    mSensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);
    mAccelerometer=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
    mSensorManager.registerListener(this,mAccelerometer,SensorManager.SENSOR_DELAY_NORMAL);
  }
  if (this.errorAlertDialog == null) {
    this.errorAlertDialog=new AlertDialog.Builder(GabrielClientActivity.this).create();
    this.errorAlertDialog.setTitle(""String_Node_Str"");
    this.errorAlertDialog.setIcon(R.drawable.ic_launcher);
  }
  if (cameraRecorder != null) {
    cameraRecorder.close();
    cameraRecorder=null;
  }
  if (localOutputStream != null) {
    try {
      localOutputStream.close();
    }
 catch (    IOException e) {
    }
    localOutputStream=null;
  }
  if (cameraRecorder == null) {
    cameraRecorder=new CameraConnector();
    cameraRecorder.init();
    Log.d(LOG_TAG,""String_Node_Str"");
  }
  if (localOutputStream == null) {
    localOutputStream=new BufferedOutputStream(new FileOutputStream(cameraRecorder.getInputFileDescriptor()),LOCAL_OUTPUT_BUFF_SIZE);
    Log.d(LOG_TAG,""String_Node_Str"");
  }
  hasStarted=true;
}",0.9890909090909092
131840,"public void init(){
  try {
    localLoop=new LocalServerSocket(""String_Node_Str"");
    localReceiver=new LocalSocket();
    localReceiver.connect(localLoop.getLocalSocketAddress());
    localReceiver.setReceiveBufferSize(LOCAL_BUFF_SIZE);
    localReceiver.setSendBufferSize(LOCAL_BUFF_SIZE);
    localSender=localLoop.accept();
    localSender.setReceiveBufferSize(LOCAL_BUFF_SIZE);
    localSender.setSendBufferSize(LOCAL_BUFF_SIZE);
    Log.d(LOG_TAG,""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.e(LOG_TAG,""String_Node_Str"" + e.getMessage());
  }
}","public void init(){
  try {
    localLoop=new LocalServerSocket(""String_Node_Str"");
    localReceiver=new LocalSocket();
    localReceiver.connect(localLoop.getLocalSocketAddress());
    localReceiver.setReceiveBufferSize(LOCAL_BUFF_SIZE);
    localReceiver.setSendBufferSize(LOCAL_BUFF_SIZE);
    localSender=localLoop.accept();
    localSender.setReceiveBufferSize(LOCAL_BUFF_SIZE);
    localSender.setSendBufferSize(LOCAL_BUFF_SIZE);
    Log.d(LOG_TAG,""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.e(LOG_TAG,""String_Node_Str"" + e);
  }
}",0.9883824843610366
131841,"public JdbcDaoImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate){
  this.npJdbcTemplate=namedParameterJdbcTemplate;
  List<File> fileList=this.getFileInfo(Constants.CLASSPATH + ""String_Node_Str"");
  for (  File file : fileList) {
    this.loadFileContents(file);
  }
}","public JdbcDaoImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate){
  this.npJdbcTemplate=namedParameterJdbcTemplate;
  List<File> fileList=this.getFileList(Constants.CLASSPATH + ""String_Node_Str"");
  for (  File file : fileList) {
    this.loadFileContents(file);
  }
}",0.9855595667870036
131842,"@Override @SuppressWarnings(""String_Node_Str"") public boolean preHandle(HttpServletRequest request,HttpServletResponse response,Object handler) throws Exception {
  String uri=request.getRequestURI();
  if (uri.endsWith(""String_Node_Str"")) {
    Pagination pagination=PaginationThreadUtils.get();
    if (pagination == null) {
      pagination=new Pagination();
      PaginationThreadUtils.set(pagination);
    }
    Map<String,String[]> params=request.getParameterMap();
    if (params.get(PAGE_NOW) == null) {
      pagination.setPageNow(1);
    }
 else {
      String pageNow=params.get(PAGE_NOW)[0];
      if (StringUtils.isBlank(pageNow)) {
        pagination.setPageNow(1);
      }
 else {
        pagination.setPageNow(Integer.parseInt(pageNow));
      }
    }
    if (params.get(PAGE_SIZE) != null) {
      String pageSize=params.get(PAGE_SIZE)[0];
      if (StringUtils.isNotBlank(pageSize)) {
        pagination.setPageSize(Integer.parseInt(pageSize));
      }
    }
    logger.info(""String_Node_Str"",pagination.getPageNow(),pagination.getPageSize());
  }
  return true;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean preHandle(HttpServletRequest request,HttpServletResponse response,Object handler) throws Exception {
  String uri=request.getRequestURI();
  if (uri.endsWith(""String_Node_Str"")) {
    Pagination pagination=PaginationThreadUtils.get();
    if (pagination == null) {
      pagination=new Pagination();
      PaginationThreadUtils.set(pagination);
    }
    Map<String,String[]> params=request.getParameterMap();
    if (params.get(PAGE_NOW) == null) {
      pagination.setPageNow(1);
    }
 else {
      String pageNow=params.get(PAGE_NOW)[0];
      if (StringUtils.isBlank(pageNow)) {
        pagination.setPageNow(1);
      }
 else {
        pagination.setPageNow(NumberUtils.toInt(pageNow,1));
      }
    }
    if (params.get(PAGE_SIZE) != null) {
      String pageSize=params.get(PAGE_SIZE)[0];
      if (StringUtils.isNotBlank(pageSize)) {
        pagination.setPageSize(NumberUtils.toInt(pageSize));
      }
    }
    logger.info(""String_Node_Str"",pagination.getPageNow(),pagination.getPageSize());
  }
  return true;
}",0.974169741697417
131843,"/** 
 * Indicates whether the engine has been configured correctly and is ready for operation. In more advanced engines, the result of this method should be taken as a suggestion and not as a prerequisite to operate the engine.
 * @param message (if not null) contains the configuration errors of theengine
 * @return whether the engine is ready to operate
 */
public boolean isReady(StringBuilder message){
  message.setLength(0);
  if (this.inputVariables.isEmpty()) {
    message.append(""String_Node_Str"");
  }
  for (int i=0; i < this.inputVariables.size(); ++i) {
    InputVariable inputVariable=this.inputVariables.get(i);
    if (inputVariable == null) {
      message.append(String.format(""String_Node_Str"",i));
    }
  }
  if (this.outputVariables.isEmpty()) {
    message.append(""String_Node_Str"");
  }
  for (int i=0; i < this.outputVariables.size(); ++i) {
    OutputVariable outputVariable=this.outputVariables.get(i);
    if (outputVariable == null) {
      message.append(String.format(""String_Node_Str"",i));
    }
 else {
      if (outputVariable.getTerms().isEmpty()) {
        message.append(String.format(""String_Node_Str"",outputVariable.getName()));
      }
      Defuzzifier defuzzifier=outputVariable.getDefuzzifier();
      if (defuzzifier == null) {
        message.append(String.format(""String_Node_Str"",outputVariable.getName()));
      }
 else       if (defuzzifier instanceof IntegralDefuzzifier && outputVariable.fuzzyOutput().getAggregation() == null) {
        message.append(String.format(""String_Node_Str"",outputVariable.getName()));
      }
    }
  }
  if (this.ruleBlocks.isEmpty()) {
    message.append(""String_Node_Str"");
  }
  for (int i=0; i < this.ruleBlocks.size(); ++i) {
    RuleBlock ruleBlock=this.ruleBlocks.get(i);
    if (ruleBlock == null) {
      message.append(String.format(""String_Node_Str"",i));
    }
 else {
      if (ruleBlock.getRules().isEmpty()) {
        message.append(String.format(""String_Node_Str"",ruleBlock.getName()));
      }
      int requiresConjunction=0;
      int requiresDisjunction=0;
      int requiresImplication=0;
      for (int r=0; r < this.ruleBlocks.size(); ++r) {
        Rule rule=ruleBlock.getRule(r);
        if (rule == null) {
          message.append(String.format(""String_Node_Str"",ruleBlock.getName(),r));
        }
 else {
          int thenIndex=rule.getText().indexOf(""String_Node_Str"" + Rule.FL_THEN + ""String_Node_Str"");
          int andIndex=rule.getText().indexOf(""String_Node_Str"" + Rule.FL_AND + ""String_Node_Str"");
          int orIndex=rule.getText().indexOf(""String_Node_Str"" + Rule.FL_OR + ""String_Node_Str"");
          if (andIndex != -1 && andIndex < thenIndex) {
            ++requiresConjunction;
          }
          if (orIndex != -1 && orIndex < thenIndex) {
            ++requiresDisjunction;
          }
          if (rule.isLoaded()) {
            Consequent consequent=rule.getConsequent();
            for (            Proposition proposition : consequent.getConclusions()) {
              Variable variable=proposition.getVariable();
              if (variable instanceof OutputVariable) {
                OutputVariable outputVariable=(OutputVariable)variable;
                if (outputVariable.getDefuzzifier() instanceof IntegralDefuzzifier) {
                  ++requiresImplication;
                  break;
                }
              }
            }
          }
        }
      }
      if (requiresConjunction > 0 && ruleBlock.getConjunction() == null) {
        message.append(String.format(""String_Node_Str"",ruleBlock.getName()));
        message.append(String.format(""String_Node_Str"",ruleBlock.getName(),requiresConjunction));
      }
      if (requiresDisjunction > 0 && ruleBlock.getDisjunction() == null) {
        message.append(String.format(""String_Node_Str"",ruleBlock.getName()));
        message.append(String.format(""String_Node_Str"",ruleBlock.getName(),requiresDisjunction));
      }
      if (requiresImplication > 0 && ruleBlock.getImplication() == null) {
        message.append(String.format(""String_Node_Str"",ruleBlock.getName()));
        message.append(String.format(""String_Node_Str"",ruleBlock.getName(),requiresImplication));
      }
    }
  }
  return message.length() == 0;
}","/** 
 * Indicates whether the engine has been configured correctly and is ready for operation. In more advanced engines, the result of this method should be taken as a suggestion and not as a prerequisite to operate the engine.
 * @param message (if not null) contains the configuration errors of theengine
 * @return whether the engine is ready to operate
 */
public boolean isReady(StringBuilder message){
  message.setLength(0);
  if (this.inputVariables.isEmpty()) {
    message.append(""String_Node_Str"");
  }
  for (int i=0; i < this.inputVariables.size(); ++i) {
    InputVariable inputVariable=this.inputVariables.get(i);
    if (inputVariable == null) {
      message.append(String.format(""String_Node_Str"",i));
    }
  }
  if (this.outputVariables.isEmpty()) {
    message.append(""String_Node_Str"");
  }
  for (int i=0; i < this.outputVariables.size(); ++i) {
    OutputVariable outputVariable=this.outputVariables.get(i);
    if (outputVariable == null) {
      message.append(String.format(""String_Node_Str"",i));
    }
 else {
      if (outputVariable.getTerms().isEmpty()) {
        message.append(String.format(""String_Node_Str"",outputVariable.getName()));
      }
      Defuzzifier defuzzifier=outputVariable.getDefuzzifier();
      if (defuzzifier == null) {
        message.append(String.format(""String_Node_Str"",outputVariable.getName()));
      }
 else       if (defuzzifier instanceof IntegralDefuzzifier && outputVariable.fuzzyOutput().getAggregation() == null) {
        message.append(String.format(""String_Node_Str"",outputVariable.getName()));
      }
    }
  }
  if (this.ruleBlocks.isEmpty()) {
    message.append(""String_Node_Str"");
  }
  for (int i=0; i < this.ruleBlocks.size(); ++i) {
    RuleBlock ruleBlock=this.ruleBlocks.get(i);
    if (ruleBlock == null) {
      message.append(String.format(""String_Node_Str"",i));
    }
 else {
      if (ruleBlock.getRules().isEmpty()) {
        message.append(String.format(""String_Node_Str"",ruleBlock.getName()));
      }
      int requiresConjunction=0;
      int requiresDisjunction=0;
      int requiresImplication=0;
      for (int r=0; r < ruleBlock.numberOfRules(); ++r) {
        Rule rule=ruleBlock.getRule(r);
        if (rule == null) {
          message.append(String.format(""String_Node_Str"",ruleBlock.getName(),r));
        }
 else {
          int thenIndex=rule.getText().indexOf(""String_Node_Str"" + Rule.FL_THEN + ""String_Node_Str"");
          int andIndex=rule.getText().indexOf(""String_Node_Str"" + Rule.FL_AND + ""String_Node_Str"");
          int orIndex=rule.getText().indexOf(""String_Node_Str"" + Rule.FL_OR + ""String_Node_Str"");
          if (andIndex != -1 && andIndex < thenIndex) {
            ++requiresConjunction;
          }
          if (orIndex != -1 && orIndex < thenIndex) {
            ++requiresDisjunction;
          }
          if (rule.isLoaded()) {
            Consequent consequent=rule.getConsequent();
            for (            Proposition proposition : consequent.getConclusions()) {
              Variable variable=proposition.getVariable();
              if (variable instanceof OutputVariable) {
                OutputVariable outputVariable=(OutputVariable)variable;
                if (outputVariable.getDefuzzifier() instanceof IntegralDefuzzifier) {
                  ++requiresImplication;
                  break;
                }
              }
            }
          }
        }
      }
      if (requiresConjunction > 0 && ruleBlock.getConjunction() == null) {
        message.append(String.format(""String_Node_Str"",ruleBlock.getName()));
        message.append(String.format(""String_Node_Str"",ruleBlock.getName(),requiresConjunction));
      }
      if (requiresDisjunction > 0 && ruleBlock.getDisjunction() == null) {
        message.append(String.format(""String_Node_Str"",ruleBlock.getName()));
        message.append(String.format(""String_Node_Str"",ruleBlock.getName(),requiresDisjunction));
      }
      if (requiresImplication > 0 && ruleBlock.getImplication() == null) {
        message.append(String.format(""String_Node_Str"",ruleBlock.getName()));
        message.append(String.format(""String_Node_Str"",ruleBlock.getName(),requiresImplication));
      }
    }
  }
  return message.length() == 0;
}",0.9970466627288836
131844,"public double[] run(int times){
  double[] runtimes=new double[times];
  final int offset=engine.getInputVariables().size();
  for (int t=0; t < times; ++t) {
    obtained=new ArrayList<double[]>(expected.size());
    for (int i=0; i < obtained.size(); ++i) {
      obtained.add(new double[engine.variables().size()]);
    }
    engine.restart();
    long start=System.nanoTime();
    for (int evaluation=0; evaluation < expected.size(); ++evaluation) {
      double[] expectedValues=expected.get(evaluation);
      double[] obtainedValues=obtained.get(evaluation);
      if (expectedValues.length < engine.getInputVariables().size()) {
        throw new RuntimeException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",expectedValues.length,evaluation + 1,engine.numberOfInputVariables()));
      }
      for (int i=0; i < engine.getInputVariables().size(); ++i) {
        engine.getInputVariables().get(i).setValue(expectedValues[i]);
        obtainedValues[i]=expectedValues[i];
      }
      engine.process();
      for (int i=0; i < engine.getOutputVariables().size(); ++i) {
        obtainedValues[i + offset]=engine.getOutputVariables().get(i).getValue();
      }
    }
    long end=System.nanoTime();
    runtimes[t]=end - start;
  }
  for (  double x : runtimes) {
    this.times.add(x);
  }
  return runtimes;
}","public double[] run(int times){
  double[] runtimes=new double[times];
  final int offset=engine.getInputVariables().size();
  for (int t=0; t < times; ++t) {
    obtained=new ArrayList<double[]>(expected.size());
    for (int i=0; i < expected.size(); ++i) {
      obtained.add(new double[engine.variables().size()]);
    }
    engine.restart();
    long start=System.nanoTime();
    for (int evaluation=0; evaluation < expected.size(); ++evaluation) {
      double[] expectedValues=expected.get(evaluation);
      double[] obtainedValues=obtained.get(evaluation);
      if (expectedValues.length < engine.getInputVariables().size()) {
        throw new RuntimeException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",expectedValues.length,evaluation + 1,engine.numberOfInputVariables()));
      }
      for (int i=0; i < engine.getInputVariables().size(); ++i) {
        engine.getInputVariables().get(i).setValue(expectedValues[i]);
        obtainedValues[i]=expectedValues[i];
      }
      engine.process();
      for (int i=0; i < engine.getOutputVariables().size(); ++i) {
        obtainedValues[i + offset]=engine.getOutputVariables().get(i).getValue();
      }
    }
    long end=System.nanoTime();
    runtimes[t]=end - start;
  }
  for (  double x : runtimes) {
    this.times.add(x);
  }
  return runtimes;
}",0.9955621301775148
131845,"public static Engine takagiSugeno(){
  Engine engine=new Engine();
  engine.setName(""String_Node_Str"");
  InputVariable inputVariable1=new InputVariable();
  inputVariable1.setName(""String_Node_Str"");
  inputVariable1.setRange(0.000,10.000);
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",0.000,1.000,2.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",1.000,2.000,3.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",2.000,3.000,4.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",3.000,4.000,5.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",4.000,5.000,6.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",5.000,6.000,7.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",6.000,7.000,8.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",7.000,8.000,9.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",8.000,9.000,10.000));
  engine.addInputVariable(inputVariable1);
  OutputVariable outputVariable1=new OutputVariable();
  outputVariable1.setName(""String_Node_Str"");
  outputVariable1.setRange(-1.000,1.000);
  outputVariable1.setLockOutputRange(false);
  outputVariable1.setLockValidOutput(true);
  outputVariable1.setDefaultValue(Double.NaN);
  outputVariable1.setDefuzzifier(new WeightedAverage());
  outputVariable1.output().setAccumulation(null);
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.840));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.450));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.040));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",-0.180));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",-0.190));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",-0.040));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.090));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.120));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.040));
  engine.addOutputVariable(outputVariable1);
  OutputVariable outputVariable2=new OutputVariable();
  outputVariable2.setName(""String_Node_Str"");
  outputVariable2.setRange(Double.NaN,Double.NaN);
  outputVariable2.setLockOutputRange(false);
  outputVariable2.setLockValidOutput(true);
  outputVariable2.setDefaultValue(Double.NaN);
  outputVariable2.setDefuzzifier(new WeightedAverage());
  outputVariable2.output().setAccumulation(null);
  outputVariable2.addTerm(Function.create(""String_Node_Str"",""String_Node_Str"",engine,true));
  engine.addOutputVariable(outputVariable2);
  OutputVariable outputVariable3=new OutputVariable();
  outputVariable3.setName(""String_Node_Str"");
  outputVariable3.setRange(Double.NaN,Double.NaN);
  outputVariable3.setLockOutputRange(false);
  outputVariable3.setLockValidOutput(false);
  outputVariable3.setDefaultValue(Double.NaN);
  outputVariable3.setDefuzzifier(new WeightedAverage());
  outputVariable3.output().setAccumulation(null);
  outputVariable3.addTerm(Function.create(""String_Node_Str"",""String_Node_Str"",engine,true));
  engine.addOutputVariable(outputVariable3);
  RuleBlock ruleBlock1=new RuleBlock();
  ruleBlock1.setName(""String_Node_Str"");
  ruleBlock1.setConjunction(null);
  ruleBlock1.setDisjunction(null);
  ruleBlock1.setActivation(new AlgebraicProduct());
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  engine.addRuleBlock(ruleBlock1);
  return engine;
}","public static Engine takagiSugeno(){
  Engine engine=new Engine();
  engine.setName(""String_Node_Str"");
  InputVariable inputVariable1=new InputVariable();
  inputVariable1.setName(""String_Node_Str"");
  inputVariable1.setRange(0.000,10.000);
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",0.000,1.000,2.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",1.000,2.000,3.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",2.000,3.000,4.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",3.000,4.000,5.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",4.000,5.000,6.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",5.000,6.000,7.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",6.000,7.000,8.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",7.000,8.000,9.000));
  inputVariable1.addTerm(new Triangle(""String_Node_Str"",8.000,9.000,10.000));
  engine.addInputVariable(inputVariable1);
  OutputVariable outputVariable1=new OutputVariable();
  outputVariable1.setName(""String_Node_Str"");
  outputVariable1.setRange(-1.000,1.000);
  outputVariable1.setLockOutputRange(false);
  outputVariable1.setLockValidOutput(true);
  outputVariable1.setDefaultValue(Double.NaN);
  outputVariable1.setDefuzzifier(new WeightedAverage());
  outputVariable1.output().setAccumulation(null);
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.840));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.450));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.040));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",-0.180));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",-0.190));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",-0.040));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.090));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.120));
  outputVariable1.addTerm(new Constant(""String_Node_Str"",0.040));
  engine.addOutputVariable(outputVariable1);
  OutputVariable outputVariable2=new OutputVariable();
  outputVariable2.setName(""String_Node_Str"");
  outputVariable2.setRange(-1,1);
  outputVariable2.setLockOutputRange(false);
  outputVariable2.setLockValidOutput(true);
  outputVariable2.setDefaultValue(Double.NaN);
  outputVariable2.setDefuzzifier(new WeightedAverage());
  outputVariable2.output().setAccumulation(null);
  outputVariable2.addTerm(Function.create(""String_Node_Str"",""String_Node_Str"",engine,true));
  engine.addOutputVariable(outputVariable2);
  OutputVariable outputVariable3=new OutputVariable();
  outputVariable3.setName(""String_Node_Str"");
  outputVariable3.setRange(-1,1);
  outputVariable3.setLockOutputRange(false);
  outputVariable3.setLockValidOutput(false);
  outputVariable3.setDefaultValue(Double.NaN);
  outputVariable3.setDefuzzifier(new WeightedAverage());
  outputVariable3.output().setAccumulation(null);
  outputVariable3.addTerm(Function.create(""String_Node_Str"",""String_Node_Str"",engine,true));
  engine.addOutputVariable(outputVariable3);
  RuleBlock ruleBlock1=new RuleBlock();
  ruleBlock1.setName(""String_Node_Str"");
  ruleBlock1.setConjunction(null);
  ruleBlock1.setDisjunction(null);
  ruleBlock1.setActivation(new AlgebraicProduct());
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  ruleBlock1.addRule(Rule.parse(""String_Node_Str"",engine));
  engine.addRuleBlock(ruleBlock1);
  return engine;
}",0.993611040122668
131846,"public HedgeFactory(){
  register(Any.class);
  register(Extremely.class);
  register(Not.class);
  register(Seldom.class);
  register(Somewhat.class);
  register(Very.class);
}","public HedgeFactory(){
  register(new Any().getName(),Any.class);
  register(new Extremely().getName(),Extremely.class);
  register(new Not().getName(),Not.class);
  register(new Seldom().getName(),Seldom.class);
  register(new Somewhat().getName(),Somewhat.class);
  register(new Very().getName(),Very.class);
}",0.3026584867075664
131847,"protected Term extractTerm(String line){
  String spacedLine=""String_Node_Str"";
  for (  char c : line.toCharArray()) {
    if (c == '(' || c == ')' || c == ',') {
      spacedLine+=' ';
    }
 else     if (c == ':') {
      spacedLine+=""String_Node_Str"";
    }
 else     if (c == '=') {
      spacedLine+=""String_Node_Str"";
    }
 else {
      spacedLine+=c;
    }
  }
  final int S_KWTERM=1, S_NAME=2, S_ASSIGN=3, S_TERM_CLASS=4, S_PARAMETERS=5;
  int state=S_KWTERM;
  StringTokenizer tokenizer=new StringTokenizer(spacedLine);
  String token=""String_Node_Str"", name=""String_Node_Str"", termClass=""String_Node_Str"";
  List<String> parameters=new ArrayList<>();
  while (tokenizer.hasMoreTokens()) {
    token=tokenizer.nextToken();
    if (state == S_KWTERM && ""String_Node_Str"".equals(token)) {
      state=S_NAME;
      continue;
    }
    if (state == S_NAME) {
      name=token;
      state=S_ASSIGN;
      continue;
    }
    if (state == S_ASSIGN && ""String_Node_Str"".equals(token)) {
      state=S_TERM_CLASS;
      continue;
    }
    if (state == S_TERM_CLASS) {
      if (Op.isNumeric(token)) {
        termClass=Constant.class.getSimpleName();
        parameters.add(token);
      }
 else       if (""String_Node_Str"".equals(token)) {
        termClass=Discrete.class.getSimpleName();
      }
 else {
        termClass=token;
      }
      state=S_PARAMETERS;
      continue;
    }
    if (state == S_PARAMETERS) {
      if (!Function.class.getSimpleName().equals(termClass) && (""String_Node_Str"".equals(token) || ""String_Node_Str"".equals(token) || ""String_Node_Str"".equals(token))) {
        continue;
      }
      if (""String_Node_Str"".equals(token)) {
        break;
      }
      parameters.add(token.trim());
    }
  }
  if (state <= S_ASSIGN) {
    throw new RuntimeException(""String_Node_Str"" + line);
  }
  double[] values=new double[parameters.size()];
  if (!Function.class.getSimpleName().equals(termClass)) {
    String parameter=""String_Node_Str"";
    try {
      for (int i=0; i < parameters.size(); ++i) {
        parameter=parameters.get(i);
        values[i]=Op.toDouble(parameter);
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(String.format(""String_Node_Str"" + ""String_Node_Str"",parameter,line));
    }
  }
  try {
    Term result=FactoryManager.instance().term().createInstance(termClass,values);
    result.setName(Op.makeValidId(name));
    if (Function.class.getSimpleName().equals(termClass) && !parameters.isEmpty()) {
      String infix=Op.join(parameters,""String_Node_Str"");
      if (infix.length() > 1 && infix.charAt(0) == '(' && infix.charAt(infix.length() - 1) == ')') {
        infix=infix.substring(1,infix.length() - 2);
      }
      ((Function)result).setText(infix);
    }
    return result;
  }
 catch (  Exception ex) {
    throw ex;
  }
}","protected Term extractTerm(String line){
  String spacedLine=""String_Node_Str"";
  for (  char c : line.toCharArray()) {
    if (c == '(' || c == ')' || c == ',') {
      spacedLine+=""String_Node_Str"" + c + ""String_Node_Str"";
    }
 else     if (c == ':') {
      spacedLine+=""String_Node_Str"";
    }
 else     if (c == '=') {
      spacedLine+=""String_Node_Str"";
    }
 else {
      spacedLine+=c;
    }
  }
  final int S_KWTERM=1, S_NAME=2, S_ASSIGN=3, S_TERM_CLASS=4, S_PARAMETERS=5;
  int state=S_KWTERM;
  StringTokenizer tokenizer=new StringTokenizer(spacedLine);
  String token, name=""String_Node_Str"", termClass=""String_Node_Str"";
  List<String> parameters=new ArrayList<>();
  while (tokenizer.hasMoreTokens()) {
    token=tokenizer.nextToken();
    if (state == S_KWTERM && ""String_Node_Str"".equals(token)) {
      state=S_NAME;
      continue;
    }
    if (state == S_NAME) {
      name=token;
      state=S_ASSIGN;
      continue;
    }
    if (state == S_ASSIGN && ""String_Node_Str"".equals(token)) {
      state=S_TERM_CLASS;
      continue;
    }
    if (state == S_TERM_CLASS) {
      if (Op.isNumeric(token)) {
        termClass=Constant.class.getSimpleName();
        parameters.add(token);
      }
 else       if (""String_Node_Str"".equals(token)) {
        termClass=Discrete.class.getSimpleName();
      }
 else {
        termClass=token;
      }
      state=S_PARAMETERS;
      continue;
    }
    if (state == S_PARAMETERS) {
      if (!Function.class.getSimpleName().equals(termClass) && (""String_Node_Str"".equals(token) || ""String_Node_Str"".equals(token) || ""String_Node_Str"".equals(token))) {
        continue;
      }
      if (""String_Node_Str"".equals(token)) {
        break;
      }
      parameters.add(token.trim());
    }
  }
  if (state <= S_ASSIGN) {
    throw new RuntimeException(""String_Node_Str"" + line);
  }
  double[] values=new double[parameters.size()];
  if (!Function.class.getSimpleName().equals(termClass)) {
    String parameter=""String_Node_Str"";
    try {
      for (int i=0; i < parameters.size(); ++i) {
        parameter=parameters.get(i);
        values[i]=Op.toDouble(parameter);
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(String.format(""String_Node_Str"" + ""String_Node_Str"",parameter,line));
    }
  }
  try {
    Term result=FactoryManager.instance().term().createInstance(termClass,values);
    result.setName(Op.makeValidId(name));
    if (Function.class.getSimpleName().equals(termClass) && !parameters.isEmpty()) {
      String infix=Op.join(parameters,""String_Node_Str"");
      if (infix.length() > 1 && infix.charAt(0) == '(' && infix.charAt(infix.length() - 1) == ')') {
        infix=infix.substring(1,infix.length() - 1);
      }
      ((Function)result).setText(infix);
    }
    return result;
  }
 catch (  Exception ex) {
    throw ex;
  }
}",0.9886965736488872
131848,"protected void processDefuzzify(String block,Engine engine) throws Exception {
  BufferedReader reader=new BufferedReader(new StringReader(block));
  String line=reader.readLine();
  String name;
  int index=line.indexOf(' ');
  if (index >= 0) {
    name=Op.makeValidId(line.substring(index + 1));
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + line);
  }
  if (!engine.hasOutputVariable(name)) {
    throw new RuntimeException(String.format(""String_Node_Str"",name,line));
  }
  OutputVariable outputVariable=engine.getOutputVariable(name);
  while ((line=reader.readLine()) != null) {
    StringTokenizer tokenizer=new StringTokenizer(line);
    String firstToken=tokenizer.nextToken();
    if (""String_Node_Str"".equals(firstToken)) {
      outputVariable.addTerm(prepareTerm(extractTerm(line),engine));
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      outputVariable.setDefuzzifier(extractDefuzzifier(line));
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      outputVariable.output().setAccumulation(extractSNorm(line));
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      Op.Pair<Double,Boolean> defaultAndLock=extractDefaultValue(line);
      outputVariable.setDefaultValue(defaultAndLock.first);
      outputVariable.setLockValidOutput(defaultAndLock.second);
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      Op.Pair<Double,Double> range=extractRange(line);
      outputVariable.setRange(range.first,range.second);
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      Op.Pair<Boolean,Boolean> output_range=extractLocksOutputAndRange(line);
      outputVariable.setLockValidOutput(output_range.first);
      outputVariable.setLockOutputRange(output_range.second);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"",firstToken));
    }
  }
}","protected void processDefuzzify(String block,Engine engine) throws Exception {
  BufferedReader reader=new BufferedReader(new StringReader(block));
  String line=reader.readLine();
  String name;
  int index=line.indexOf(' ');
  if (index >= 0) {
    name=Op.makeValidId(line.substring(index + 1));
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + line);
  }
  if (!engine.hasOutputVariable(name)) {
    throw new RuntimeException(String.format(""String_Node_Str"",name,line));
  }
  OutputVariable outputVariable=engine.getOutputVariable(name);
  while ((line=reader.readLine()) != null) {
    StringTokenizer tokenizer=new StringTokenizer(line);
    String firstToken=tokenizer.nextToken();
    if (""String_Node_Str"".equals(firstToken)) {
      outputVariable.addTerm(prepareTerm(extractTerm(line),engine));
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      outputVariable.setDefuzzifier(extractDefuzzifier(line));
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      outputVariable.output().setAccumulation(extractSNorm(line));
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      Op.Pair<Double,Boolean> defaultAndLock=extractDefaultValue(line);
      outputVariable.setDefaultValue(defaultAndLock.first);
      outputVariable.setLockValidOutput(defaultAndLock.second || outputVariable.isLockValidOutput());
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      Op.Pair<Double,Double> range=extractRange(line);
      outputVariable.setRange(range.first,range.second);
    }
 else     if (""String_Node_Str"".equals(firstToken)) {
      Op.Pair<Boolean,Boolean> output_range=extractLocksOutputAndRange(line);
      outputVariable.setLockValidOutput(output_range.first);
      outputVariable.setLockOutputRange(output_range.second);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"",firstToken));
    }
  }
}",0.9899150743099788
131849,"protected String translate(List<Proposition> propositions,List<Variable> variables){
  StringBuilder result=new StringBuilder();
  for (  Variable variable : variables) {
    int termIndexPlusOne=0;
    int plusHedge=0;
    double negated=1;
    for (    Proposition proposition : propositions) {
      if (!variable.equals(proposition.getVariable())) {
        continue;
      }
      for (int termIndex=0; termIndex < variable.numberOfTerms(); ++termIndex) {
        if (variable.getTerm(termIndex).equals(proposition.getTerm())) {
          termIndexPlusOne=termIndex + 1;
          break;
        }
      }
      if (!proposition.getHedges().isEmpty()) {
        FuzzyLite.logger().warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      }
      for (      Hedge hedge : proposition.getHedges()) {
        if (hedge instanceof Not) {
          negated*=-1;
        }
 else         if (hedge instanceof Somewhat) {
          plusHedge+=5;
        }
 else         if (hedge instanceof Extremely) {
          plusHedge+=3;
        }
 else         if (hedge instanceof Very) {
          plusHedge+=2;
        }
 else {
          plusHedge=-1;
        }
      }
      break;
    }
    if (negated < 0) {
      result.append(""String_Node_Str"");
    }
    result.append(termIndexPlusOne);
    if (!Op.isEq(plusHedge,0.0)) {
      if (plusHedge < 0) {
        result.append(String.format(""String_Node_Str"",Op.str(Double.NaN)));
      }
 else {
        result.append(String.format(""String_Node_Str"",plusHedge));
      }
    }
    result.append(""String_Node_Str"");
  }
  return result.toString();
}","protected String translate(List<Proposition> propositions,List<Variable> variables){
  StringBuilder result=new StringBuilder();
  for (  Variable variable : variables) {
    int termIndexPlusOne=0;
    int plusHedge=0;
    double negated=1;
    for (    Proposition proposition : propositions) {
      if (!variable.equals(proposition.getVariable())) {
        continue;
      }
      for (int termIndex=0; termIndex < variable.numberOfTerms(); ++termIndex) {
        if (variable.getTerm(termIndex).equals(proposition.getTerm())) {
          termIndexPlusOne=termIndex + 1;
          break;
        }
      }
      if (!proposition.getHedges().isEmpty()) {
        FuzzyLite.logger().warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      }
      for (      Hedge hedge : proposition.getHedges()) {
        if (hedge instanceof Not) {
          negated*=-1;
        }
 else         if (hedge instanceof Somewhat) {
          plusHedge+=5;
        }
 else         if (hedge instanceof Extremely) {
          plusHedge+=3;
        }
 else         if (hedge instanceof Very) {
          plusHedge+=2;
        }
 else {
          plusHedge=-1;
        }
      }
      break;
    }
    if (negated < 0) {
      result.append(""String_Node_Str"");
    }
    result.append(termIndexPlusOne);
    if (Op.isGE(plusHedge,0.0)) {
      result.append(String.format(""String_Node_Str"",plusHedge));
    }
 else {
      result.append(""String_Node_Str"");
    }
    result.append(""String_Node_Str"");
  }
  return result.toString();
}",0.9573791348600508
131850,"public double activationDegree(TNorm conjunction,SNorm disjunction,Expression node){
  if (node instanceof Proposition) {
    Proposition proposition=(Proposition)node;
    boolean isAny=false;
    for (    Hedge hedge : proposition.getHedges()) {
      isAny|=(hedge instanceof Any);
      if (isAny) {
        return 1.0;
      }
    }
    InputVariable inputVariable=(InputVariable)proposition.getVariable();
    double result=proposition.getTerm().membership(inputVariable.getInputValue());
    for (    Hedge hedge : proposition.getHedges()) {
      result=hedge.hedge(result);
    }
    return result;
  }
 else   if (node instanceof Operator) {
    Operator operator=(Operator)node;
    if (operator.getLeft() == null || operator.getRight() == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (Rule.FL_AND.equals(operator.getName())) {
      return conjunction.compute(activationDegree(conjunction,disjunction,operator.getLeft()),activationDegree(conjunction,disjunction,operator.getRight()));
    }
    if (Rule.FL_OR.equals(operator.getName())) {
      return disjunction.compute(activationDegree(conjunction,disjunction,operator.getLeft()),activationDegree(conjunction,disjunction,operator.getRight()));
    }
    throw new RuntimeException(String.format(""String_Node_Str"",operator.getName()));
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public double activationDegree(TNorm conjunction,SNorm disjunction,Expression node){
  if (node instanceof Proposition) {
    Proposition proposition=(Proposition)node;
    if (!proposition.variable.isEnabled()) {
      return 0.0;
    }
    boolean isAny=false;
    for (    Hedge hedge : proposition.getHedges()) {
      isAny|=(hedge instanceof Any);
      if (isAny) {
        return 1.0;
      }
    }
    InputVariable inputVariable=(InputVariable)proposition.getVariable();
    double result=proposition.getTerm().membership(inputVariable.getInputValue());
    for (    Hedge hedge : proposition.getHedges()) {
      result=hedge.hedge(result);
    }
    return result;
  }
 else   if (node instanceof Operator) {
    Operator operator=(Operator)node;
    if (operator.getLeft() == null || operator.getRight() == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (Rule.FL_AND.equals(operator.getName())) {
      return conjunction.compute(activationDegree(conjunction,disjunction,operator.getLeft()),activationDegree(conjunction,disjunction,operator.getRight()));
    }
    if (Rule.FL_OR.equals(operator.getName())) {
      return disjunction.compute(activationDegree(conjunction,disjunction,operator.getLeft()),activationDegree(conjunction,disjunction,operator.getRight()));
    }
    throw new RuntimeException(String.format(""String_Node_Str"",operator.getName()));
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.975916230366492
131851,"public void modify(double activationDegree,TNorm activation){
  for (  Proposition proposition : conclusions) {
    double threshold=activationDegree;
    for (    Hedge hedge : proposition.getHedges()) {
      threshold=hedge.hedge(threshold);
    }
    Thresholded term=new Thresholded();
    term.setTerm(proposition.getTerm());
    term.setThreshold(threshold);
    term.setActivation(activation);
    OutputVariable outputVariable=(OutputVariable)proposition.getVariable();
    outputVariable.output().getTerms().add(term);
    FuzzyLite.logger().fine(String.format(""String_Node_Str"",term.toString()));
  }
}","public void modify(double activationDegree,TNorm activation){
  for (  Proposition proposition : conclusions) {
    if (!proposition.variable.isEnabled()) {
      continue;
    }
    double threshold=activationDegree;
    for (    Hedge hedge : proposition.getHedges()) {
      threshold=hedge.hedge(threshold);
    }
    Thresholded term=new Thresholded();
    term.setTerm(proposition.getTerm());
    term.setThreshold(threshold);
    term.setActivation(activation);
    OutputVariable outputVariable=(OutputVariable)proposition.getVariable();
    outputVariable.output().getTerms().add(term);
    FuzzyLite.logger().fine(String.format(""String_Node_Str"",term.toString()));
  }
}",0.948182521268368
131852,"@Override public String toString(){
  String result=variable.getName() + ""String_Node_Str"" + Rule.FL_IS+ ""String_Node_Str"";
  for (  Hedge hedge : hedges) {
    result+=hedge.getName() + ""String_Node_Str"";
  }
  result+=term.getName();
  return result;
}","@Override public String toString(){
  String result=variable.getName() + ""String_Node_Str"" + Rule.FL_IS+ ""String_Node_Str"";
  for (  Hedge hedge : hedges) {
    result+=hedge.getName() + ""String_Node_Str"";
  }
  if (term != null) {
    result+=term.getName();
  }
  return result;
}",0.7947761194029851
131853,"public double defuzzify(){
  double result;
  boolean isValid=this.output.getTerms().size() > 0;
  if (isValid) {
    result=this.defuzzifier.defuzzify(output,minimum,maximum);
  }
 else {
    if (this.lockValidOutput && !Double.isNaN(this.lastValidOutput)) {
      result=this.lastValidOutput;
    }
 else {
      result=this.defaultValue;
    }
  }
  if (this.lockOutputRange) {
    if (Op.isLt(result,minimum)) {
      result=minimum;
    }
    if (Op.isGt(result,maximum)) {
      result=maximum;
    }
  }
  if (this.lockValidOutput && isValid) {
    this.lastValidOutput=result;
  }
  return result;
}","public double defuzzify(){
  double result;
  boolean isValid=this.enabled && !this.output.getTerms().isEmpty();
  if (isValid) {
    result=this.defuzzifier.defuzzify(output,minimum,maximum);
  }
 else {
    if (this.lockValidOutput && !Double.isNaN(this.lastValidOutput)) {
      result=this.lastValidOutput;
    }
 else {
      result=this.defaultValue;
    }
  }
  if (this.lockOutputRange) {
    if (Op.isLt(result,minimum)) {
      result=minimum;
    }
    if (Op.isGt(result,maximum)) {
      result=maximum;
    }
  }
  if (this.lockValidOutput && isValid) {
    this.lastValidOutput=result;
  }
  return result;
}",0.9707317073170731
131854,"public double defuzzifyNoLocks(){
  double result;
  boolean isValid=output.getTerms().size() > 0;
  if (isValid) {
    result=this.defuzzifier.defuzzify(output,minimum,maximum);
  }
 else {
    result=this.defaultValue;
  }
  return result;
}","public double defuzzifyNoLocks(){
  double result;
  boolean isValid=this.enabled && !output.getTerms().isEmpty();
  if (isValid) {
    result=this.defuzzifier.defuzzify(output,minimum,maximum);
  }
 else {
    result=this.defaultValue;
  }
  return result;
}",0.9282868525896414
131855,"public Variable(String name,double minimum,double maximum){
  this.name=name;
  this.minimum=minimum;
  this.maximum=maximum;
  this.terms=new ArrayList<>();
}","public Variable(String name,double minimum,double maximum){
  this.name=name;
  this.minimum=minimum;
  this.maximum=maximum;
  this.terms=new ArrayList<>();
  this.enabled=true;
}",0.9380530973451328
131856,"protected void executeSequentially(){
  try {
    begin();
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final OETLPipeline pipeline=new OETLPipeline(this,transformers,loader,logLevel,maxRetries,haltOnError);
    pipeline.begin();
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      pipeline.execute(current);
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,""String_Node_Str"",e);
  }
}","protected void executeSequentially(){
  try {
    begin();
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final OETLPipeline pipeline=new OETLPipeline(this,transformers,loader,logLevel,maxRetries,haltOnError);
    pipeline.begin();
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      pipeline.execute(current);
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,""String_Node_Str"",e);
    throw e;
  }
}",0.9884444444444443
131857,"protected Object lookup(Object joinValue,final boolean iReturnRIDS){
  Object result=null;
  if (joinValue != null) {
    if (sqlQuery == null && index == null) {
      if (lookup.toUpperCase().startsWith(""String_Node_Str""))       sqlQuery=new OSQLSynchQuery<ODocument>(lookup);
 else {
        index=pipeline.getDocumentDatabase().getMetadata().getIndexManager().getIndex(lookup);
        if (index == null) {
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",lookup);
          final String[] parts=lookup.split(""String_Node_Str"");
          sqlQuery=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + parts[0] + ""String_Node_Str""+ parts[1]+ ""String_Node_Str"");
        }
      }
    }
    if (index != null) {
      final OType idxFieldType=index.getDefinition().getTypes()[0];
      joinValue=OType.convert(joinValue,idxFieldType.getDefaultJavaType());
      result=index.get(joinValue);
    }
 else     result=pipeline.getDocumentDatabase().query(sqlQuery,joinValue);
    if (result != null && result instanceof Collection) {
      final Collection coll=(Collection)result;
      if (!coll.isEmpty()) {
        if (iReturnRIDS) {
          final List<ORID> resultRIDs=new ArrayList<ORID>(coll.size());
          for (          Object o : coll) {
            if (o instanceof OIdentifiable)             resultRIDs.add(((OIdentifiable)o).getIdentity());
          }
          result=resultRIDs;
        }
      }
 else       result=null;
    }
 else     if (result instanceof OIdentifiable) {
      if (iReturnRIDS)       result=((OIdentifiable)result).getIdentity();
 else       result=((OIdentifiable)result).getRecord();
    }
  }
  return result;
}","protected Object lookup(Object joinValue,final boolean iReturnRIDS){
  Object result=null;
  if (joinValue != null) {
    if (sqlQuery == null && index == null) {
      if (lookup.toUpperCase().startsWith(""String_Node_Str""))       sqlQuery=new OSQLSynchQuery<ODocument>(lookup);
 else {
        index=pipeline.getDocumentDatabase().getMetadata().getIndexManager().getIndex(lookup);
        if (index == null) {
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",lookup);
          final String[] parts=lookup.split(""String_Node_Str"");
          sqlQuery=new OSQLSynchQuery<ODocument>(""String_Node_Str"" + parts[0] + ""String_Node_Str""+ parts[1]+ ""String_Node_Str"");
        }
      }
    }
    if (index != null) {
      final OType idxFieldType=index.getDefinition().getTypes()[0];
      joinValue=OType.convert(joinValue,idxFieldType.getDefaultJavaType());
      result=index.get(joinValue);
    }
 else {
      if (sqlQuery instanceof OSQLSynchQuery)       ((OSQLSynchQuery)sqlQuery).resetPagination();
      result=pipeline.getDocumentDatabase().query(sqlQuery,joinValue);
    }
    if (result != null && result instanceof Collection) {
      final Collection coll=(Collection)result;
      if (!coll.isEmpty()) {
        if (iReturnRIDS) {
          final List<ORID> resultRIDs=new ArrayList<ORID>(coll.size());
          for (          Object o : coll) {
            if (o instanceof OIdentifiable)             resultRIDs.add(((OIdentifiable)o).getIdentity());
          }
          result=resultRIDs;
        }
      }
 else       result=null;
    }
 else     if (result instanceof OIdentifiable) {
      if (iReturnRIDS)       result=((OIdentifiable)result).getIdentity();
 else       result=((OIdentifiable)result).getRecord();
    }
  }
  return result;
}",0.968622893666473
131858,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9758576874205844
131859,"@Override public Object executeTransform(final Object input){
  final OrientVertex vertex;
  if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   if (input instanceof OIdentifiable)   vertex=pipeline.getGraphDatabase().getVertex(input);
 else   throw new OTransformException(getName() + ""String_Node_Str"" + input+ ""String_Node_Str"");
  final Object joinCurrentValue=joinValue != null ? joinValue : vertex.getProperty(joinFieldName);
  if (OMultiValue.isMultiValue(joinCurrentValue)) {
    for (    Object o : OMultiValue.getMultiValueIterable(joinCurrentValue)) {
      final Object r=lookup(o,false);
      if (createEdge(vertex,o,r) == null) {
        if (unresolvedLinkAction == ACTION.SKIP)         return null;
      }
    }
  }
 else {
    final Object result=lookup(joinCurrentValue,false);
    if (createEdge(vertex,joinCurrentValue,result) == null) {
      if (unresolvedLinkAction == ACTION.SKIP)       return null;
    }
  }
  return input;
}","@Override public Object executeTransform(final Object input){
  for (  Object o : OMultiValue.getMultiValueIterable(input)) {
    final OrientVertex vertex;
    if (o instanceof OrientVertex)     vertex=(OrientVertex)o;
 else     if (o instanceof OIdentifiable)     vertex=pipeline.getGraphDatabase().getVertex(o);
 else     throw new OTransformException(getName() + ""String_Node_Str"" + o+ ""String_Node_Str"");
    final Object joinCurrentValue=joinValue != null ? joinValue : vertex.getProperty(joinFieldName);
    if (OMultiValue.isMultiValue(joinCurrentValue)) {
      for (      Object ob : OMultiValue.getMultiValueIterable(joinCurrentValue)) {
        final Object r=lookup(ob,false);
        if (createEdge(vertex,ob,r) == null) {
          if (unresolvedLinkAction == ACTION.SKIP)           return null;
        }
      }
    }
 else {
      final Object result=lookup(joinCurrentValue,false);
      if (createEdge(vertex,joinCurrentValue,result) == null) {
        if (unresolvedLinkAction == ACTION.SKIP)         return null;
      }
    }
  }
  return input;
}",0.8790993636808615
131860,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  edgeClass=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str"")) {
    final String direction=iConfiguration.field(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=true;
 else     if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=false;
 else     throw new OConfigurationException(""String_Node_Str"" + direction);
  }
  if (iConfiguration.containsField(""String_Node_Str""))   targetVertexFields=(ODocument)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   edgeFields=(ODocument)iConfiguration.field(""String_Node_Str"");
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  edgeClass=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str"")) {
    final String direction=iConfiguration.field(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=true;
 else     if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=false;
 else     throw new OConfigurationException(""String_Node_Str"" + direction);
  }
  if (iConfiguration.containsField(""String_Node_Str""))   targetVertexFields=(ODocument)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   edgeFields=(ODocument)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   skipDuplicates=(Boolean)resolve(iConfiguration.field(""String_Node_Str""));
}",0.928532460447354
131861,"private List<OrientEdge> createEdge(final OrientVertex vertex,final Object joinCurrentValue,Object result){
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinCurrentValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (joinCurrentValue != null) {
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final OrientVertex linkedV=pipeline.getGraphDatabase().addTemporaryVertex(lookupParts[0]);
          linkedV.setProperty(lookupParts[1],joinCurrentValue);
          if (targetVertexFields != null) {
            for (            String f : targetVertexFields.fieldNames())             linkedV.setProperty(f,resolve(targetVertexFields.field(f)));
          }
          linkedV.save();
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedV.getRecord());
          result=linkedV;
        }
 else {
          throw new OConfigurationException(""String_Node_Str"");
        }
      }
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinCurrentValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinCurrentValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinCurrentValue + ""String_Node_Str"");
}
}
if (result != null) {
final List<OrientEdge> edges;
if (OMultiValue.isMultiValue(result)) {
final int size=OMultiValue.getSize(result);
if (size == 0) return null;
edges=new ArrayList<OrientEdge>(size);
}
 else edges=new ArrayList<OrientEdge>(1);
for (Object o : OMultiValue.getMultiValueIterable(result)) {
final OrientVertex targetVertex=pipeline.getGraphDatabase().getVertex(o);
final OrientEdge edge;
if (directionOut) edge=(OrientEdge)vertex.addEdge(edgeClass,targetVertex);
 else edge=(OrientEdge)targetVertex.addEdge(edgeClass,vertex);
if (edgeFields != null) {
for (String f : edgeFields.fieldNames()) edge.setProperty(f,resolve(edgeFields.field(f)));
}
edges.add(edge);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",edge);
}
return edges;
}
return null;
}","private List<OrientEdge> createEdge(final OrientVertex vertex,final Object joinCurrentValue,Object result){
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinCurrentValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (joinCurrentValue != null) {
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final OrientVertex linkedV=pipeline.getGraphDatabase().addTemporaryVertex(lookupParts[0]);
          linkedV.setProperty(lookupParts[1],joinCurrentValue);
          if (targetVertexFields != null) {
            for (            String f : targetVertexFields.fieldNames())             linkedV.setProperty(f,resolve(targetVertexFields.field(f)));
          }
          linkedV.save();
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedV.getRecord());
          result=linkedV;
        }
 else {
          throw new OConfigurationException(""String_Node_Str"");
        }
      }
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinCurrentValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinCurrentValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinCurrentValue + ""String_Node_Str"");
}
}
if (result != null) {
final List<OrientEdge> edges;
if (OMultiValue.isMultiValue(result)) {
final int size=OMultiValue.getSize(result);
if (size == 0) return null;
edges=new ArrayList<OrientEdge>(size);
}
 else edges=new ArrayList<OrientEdge>(1);
for (Object o : OMultiValue.getMultiValueIterable(result)) {
final OrientVertex targetVertex=pipeline.getGraphDatabase().getVertex(o);
try {
final OrientEdge edge;
if (directionOut) edge=(OrientEdge)vertex.addEdge(edgeClass,targetVertex);
 else edge=(OrientEdge)targetVertex.addEdge(edgeClass,vertex);
if (edgeFields != null) {
for (String f : edgeFields.fieldNames()) edge.setProperty(f,resolve(edgeFields.field(f)));
}
edges.add(edge);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",edge);
}
 catch (ORecordDuplicatedException e) {
if (skipDuplicates) {
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"");
continue;
}
 else {
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"");
throw e;
}
}
}
return edges;
}
return null;
}",0.9439515256438
131862,"@Override public Object executeTransform(final Object input){
  Object joinValue=((ODocument)((OIdentifiable)input).getRecord()).field(joinFieldName);
  final Object result=lookup(joinValue,false);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case NOTHING:
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
 else {
((ODocument)result).merge((ODocument)input,true,false);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",result,input);
return result;
}
return input;
}","@Override public Object executeTransform(final Object input){
  Object joinValue=((ODocument)((OIdentifiable)input).getRecord()).field(joinFieldName);
  final Object result=lookup(joinValue,false);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinValue,result);
  if (result == null || OMultiValue.getSize(result) == 0) {
switch (unresolvedLinkAction) {
case NOTHING:
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
 else if (OMultiValue.getSize(result) > 1) throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
 else {
final Object o=OMultiValue.getFirstValue(result);
((ODocument)o).merge((ODocument)((OIdentifiable)input).getRecord(),true,false);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",result,input);
return o;
}
return input;
}",0.874820143884892
131863,"@Override public void setUp(){
  super.setUp();
  graph.createVertexType(""String_Node_Str"");
  graph.createVertexType(""String_Node_Str"");
  graph.createEdgeType(""String_Node_Str"");
  graph.addVertex(""String_Node_Str"").setProperty(""String_Node_Str"",""String_Node_Str"");
  graph.commit();
}","@Override public void setUp(){
  super.setUp();
  final OrientVertexType v1=graph.createVertexType(""String_Node_Str"");
  final OrientVertexType v2=graph.createVertexType(""String_Node_Str"");
  final OrientEdgeType edgeType=graph.createEdgeType(""String_Node_Str"");
  edgeType.createProperty(""String_Node_Str"",OType.LINK,v2);
  edgeType.createProperty(""String_Node_Str"",OType.LINK,v1);
  edgeType.createIndex(""String_Node_Str"",OClass.INDEX_TYPE.UNIQUE,""String_Node_Str"",""String_Node_Str"");
  graph.addVertex(""String_Node_Str"").setProperty(""String_Node_Str"",""String_Node_Str"");
  graph.commit();
}",0.6522727272727272
131864,"@Test public void testErrorOnDuplicateVertex(){
  process(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  assertEquals(1,graph.countVertices(""String_Node_Str""));
}","@Test public void testErrorOnDuplicateVertex(){
  try {
    process(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    Assert.fail();
  }
 catch (  OETLProcessHaltedException e) {
    Assert.assertTrue(true);
  }
}",0.6237623762376238
131865,"public ODatabaseDocumentTx getDocumentDatabase(){
  return db;
}","public ODatabaseDocumentTx getDocumentDatabase(){
  if (db != null)   db.activateOnCurrentThread();
  return db;
}",0.7191011235955056
131866,"public OrientBaseGraph getGraphDatabase(){
  return graph;
}","public OrientBaseGraph getGraphDatabase(){
  if (graph != null)   graph.makeActive();
  return graph;
}",0.7361963190184049
131867,"protected synchronized ODatabaseDocumentTx init(){
  ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
  OrientBaseGraph graphDatabase;
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
graphDatabase=factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
pipeline.setGraphDatabase(graphDatabase);
documentDatabase=graphDatabase.getRawGraph();
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
 else ODatabaseRecordThreadLocal.INSTANCE.set(documentDatabase);
if (className != null) {
schemaClass=getOrCreateClass(className,null);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
if (classes != null) {
for (ODocument cls : classes) {
schemaClass=getOrCreateClass((String)cls.field(""String_Node_Str""),(String)cls.field(""String_Node_Str""));
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
}
if (indexes != null) {
for (ODocument idx : indexes) {
OIndex index;
String idxName=(String)resolve(idx.field(""String_Node_Str""));
if (idxName != null) {
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
}
final String idxClass=(String)resolve(idx.field(""String_Node_Str""));
if (idxClass == null) throw new OConfigurationException(""String_Node_Str"");
final OClass cls=getOrCreateClass(idxClass,null);
final String idxType=idx.field(""String_Node_Str"");
if (idxType == null) throw new OConfigurationException(""String_Node_Str"" + idxName + ""String_Node_Str"");
final List<String> idxFields=idx.field(""String_Node_Str"");
if (idxFields == null) throw new OConfigurationException(""String_Node_Str"");
String[] fields=new String[idxFields.size()];
for (int f=0; f < fields.length; ++f) {
final String fieldName=idxFields.get(f);
final String[] fieldNameParts=fieldName.split(""String_Node_Str"");
if (!cls.existsProperty(fieldNameParts[0])) {
if (fieldNameParts.length < 2) throw new OConfigurationException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
final String fieldType=fieldNameParts[1].toUpperCase();
final OType type=OType.valueOf(fieldType);
cls.createProperty(fieldNameParts[0],type);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxClass,fieldNameParts[0],fieldNameParts[1]);
}
fields[f]=fieldNameParts[0];
}
if (idxName == null) {
idxName=idxClass + ""String_Node_Str"";
for (int i=0; i < fields.length; ++i) {
if (i > 0) idxName+='_';
idxName+=fields[i];
}
}
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
index=cls.createIndex(idxName,idxType,fields);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxName,idxType,idxClass,idxFields);
}
}
return documentDatabase;
}","protected synchronized ODatabaseDocumentTx init(){
  ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
  OrientBaseGraph graphDatabase;
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL,dbUser,dbPassword);
graphDatabase=factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
pipeline.setGraphDatabase(graphDatabase);
documentDatabase=graphDatabase.getRawGraph();
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
 else ODatabaseRecordThreadLocal.INSTANCE.set(documentDatabase);
if (className != null) {
schemaClass=getOrCreateClass(className,null);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
if (classes != null) {
for (ODocument cls : classes) {
schemaClass=getOrCreateClass((String)cls.field(""String_Node_Str""),(String)cls.field(""String_Node_Str""));
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
}
if (indexes != null) {
for (ODocument idx : indexes) {
OIndex index;
String idxName=(String)resolve(idx.field(""String_Node_Str""));
if (idxName != null) {
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
}
final String idxClass=(String)resolve(idx.field(""String_Node_Str""));
if (idxClass == null) throw new OConfigurationException(""String_Node_Str"");
final OClass cls=getOrCreateClass(idxClass,null);
final String idxType=idx.field(""String_Node_Str"");
if (idxType == null) throw new OConfigurationException(""String_Node_Str"" + idxName + ""String_Node_Str"");
final List<String> idxFields=idx.field(""String_Node_Str"");
if (idxFields == null) throw new OConfigurationException(""String_Node_Str"");
String[] fields=new String[idxFields.size()];
for (int f=0; f < fields.length; ++f) {
final String fieldName=idxFields.get(f);
final String[] fieldNameParts=fieldName.split(""String_Node_Str"");
if (!cls.existsProperty(fieldNameParts[0])) {
if (fieldNameParts.length < 2) throw new OConfigurationException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
final String fieldType=fieldNameParts[1].toUpperCase();
final OType type=OType.valueOf(fieldType);
cls.createProperty(fieldNameParts[0],type);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxClass,fieldNameParts[0],fieldNameParts[1]);
}
fields[f]=fieldNameParts[0];
}
if (idxName == null) {
idxName=idxClass + ""String_Node_Str"";
for (int i=0; i < fields.length; ++i) {
if (i > 0) idxName+='_';
idxName+=fields[i];
}
}
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
index=cls.createIndex(idxName,idxType,fields);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxName,idxType,idxClass,idxFields);
}
}
return documentDatabase;
}",0.9970384995064164
131868,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   useLightweightEdges=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   standardElementConstraints=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   useLightweightEdges=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   standardElementConstraints=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL,dbUser,dbPassword);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}",0.9968376669009136
131869,"@Override public void begin(){
  if (!wal)   OGlobalConfiguration.USE_WAL.setValue(wal);
  ODatabaseDocumentTx documentDatabase=init();
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
documentDatabase.declareIntent(new OIntentMassiveInsert());
}","@Override public void begin(){
  if (!wal)   OGlobalConfiguration.USE_WAL.setValue(wal);
  ODatabaseDocumentTx documentDatabase=init();
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL,dbUser,dbPassword);
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
documentDatabase.declareIntent(new OIntentMassiveInsert());
}",0.9889705882352942
131870,"@Override public Object executeTransform(final Object input){
  Object joinValue=((ODocument)input).field(joinFieldName);
  final Object result=lookup(joinValue,false);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case NOTHING:
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
 else {
((ODocument)result).merge((ODocument)input,true,false);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",result,input);
return result;
}
return input;
}","@Override public Object executeTransform(final Object input){
  Object joinValue=((ODocument)((OIdentifiable)input).getRecord()).field(joinFieldName);
  final Object result=lookup(joinValue,false);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case NOTHING:
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
 else {
((ODocument)result).merge((ODocument)input,true,false);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",result,input);
return result;
}
return input;
}",0.9840571742715778
131871,"protected synchronized ODatabaseDocumentTx init(){
  ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
  OrientBaseGraph graphDatabase;
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
graphDatabase=factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
pipeline.setGraphDatabase(graphDatabase);
documentDatabase=graphDatabase.getRawGraph();
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
 else ODatabaseRecordThreadLocal.INSTANCE.set(documentDatabase);
if (classes != null) {
for (ODocument cls : classes) {
schemaClass=getOrCreateClass((String)cls.field(""String_Node_Str""),(String)cls.field(""String_Node_Str""));
Integer clusters=cls.field(""String_Node_Str"");
if (clusters != null) OClassImpl.addClusters(schemaClass,clusters);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
}
if (className != null) {
schemaClass=getOrCreateClass(className,null);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
if (indexes != null) {
for (ODocument idx : indexes) {
OIndex index;
String idxName=(String)resolve(idx.field(""String_Node_Str""));
if (idxName != null) {
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
}
final String idxClass=(String)resolve(idx.field(""String_Node_Str""));
if (idxClass == null) throw new OConfigurationException(""String_Node_Str"");
final OClass cls=getOrCreateClass(idxClass,null);
final String idxType=idx.field(""String_Node_Str"");
if (idxType == null) throw new OConfigurationException(""String_Node_Str"" + idxName + ""String_Node_Str"");
final List<String> idxFields=idx.field(""String_Node_Str"");
if (idxFields == null) throw new OConfigurationException(""String_Node_Str"");
String[] fields=new String[idxFields.size()];
for (int f=0; f < fields.length; ++f) {
final String fieldName=idxFields.get(f);
final String[] fieldNameParts=fieldName.split(""String_Node_Str"");
if (!cls.existsProperty(fieldNameParts[0])) {
if (fieldNameParts.length < 2) throw new OConfigurationException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
final String fieldType=fieldNameParts[1].toUpperCase();
final OType type=OType.valueOf(fieldType);
cls.createProperty(fieldNameParts[0],type);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxClass,fieldNameParts[0],fieldNameParts[1]);
}
fields[f]=fieldNameParts[0];
}
if (idxName == null) {
idxName=idxClass + ""String_Node_Str"";
for (int i=0; i < fields.length; ++i) {
if (i > 0) idxName+='_';
idxName+=fields[i];
}
}
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
index=cls.createIndex(idxName,idxType,fields);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxName,idxType,idxClass,idxFields);
}
}
return documentDatabase;
}","protected synchronized ODatabaseDocumentTx init(){
  ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
  OrientBaseGraph graphDatabase;
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL,dbUser,dbPassword);
graphDatabase=factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
pipeline.setGraphDatabase(graphDatabase);
documentDatabase=graphDatabase.getRawGraph();
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
 else ODatabaseRecordThreadLocal.INSTANCE.set(documentDatabase);
if (classes != null) {
for (ODocument cls : classes) {
schemaClass=getOrCreateClass((String)cls.field(""String_Node_Str""),(String)cls.field(""String_Node_Str""));
Integer clusters=cls.field(""String_Node_Str"");
if (clusters != null) OClassImpl.addClusters(schemaClass,clusters);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
}
if (className != null) {
schemaClass=getOrCreateClass(className,null);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
if (indexes != null) {
for (ODocument idx : indexes) {
OIndex index;
String idxName=(String)resolve(idx.field(""String_Node_Str""));
if (idxName != null) {
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
}
final String idxClass=(String)resolve(idx.field(""String_Node_Str""));
if (idxClass == null) throw new OConfigurationException(""String_Node_Str"");
final OClass cls=getOrCreateClass(idxClass,null);
final String idxType=idx.field(""String_Node_Str"");
if (idxType == null) throw new OConfigurationException(""String_Node_Str"" + idxName + ""String_Node_Str"");
final List<String> idxFields=idx.field(""String_Node_Str"");
if (idxFields == null) throw new OConfigurationException(""String_Node_Str"");
String[] fields=new String[idxFields.size()];
for (int f=0; f < fields.length; ++f) {
final String fieldName=idxFields.get(f);
final String[] fieldNameParts=fieldName.split(""String_Node_Str"");
if (!cls.existsProperty(fieldNameParts[0])) {
if (fieldNameParts.length < 2) throw new OConfigurationException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
final String fieldType=fieldNameParts[1].toUpperCase();
final OType type=OType.valueOf(fieldType);
cls.createProperty(fieldNameParts[0],type);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxClass,fieldNameParts[0],fieldNameParts[1]);
}
fields[f]=fieldNameParts[0];
}
if (idxName == null) {
idxName=idxClass + ""String_Node_Str"";
for (int i=0; i < fields.length; ++i) {
if (i > 0) idxName+='_';
idxName+=fields[i];
}
}
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
index=cls.createIndex(idxName,idxType,fields);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxName,idxType,idxClass,idxFields);
}
}
return documentDatabase;
}",0.99714648065948
131872,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   useLightweightEdges=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   standardElementConstraints=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   useLightweightEdges=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   standardElementConstraints=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL,dbUser,dbPassword);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}",0.9968376669009136
131873,"@Override public void begin(){
  if (!wal)   OGlobalConfiguration.USE_WAL.setValue(wal);
  ODatabaseDocumentTx documentDatabase=init();
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
documentDatabase.declareIntent(new OIntentMassiveInsert());
}","@Override public void begin(){
  if (!wal)   OGlobalConfiguration.USE_WAL.setValue(wal);
  ODatabaseDocumentTx documentDatabase=init();
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL,dbUser,dbPassword);
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
graphDatabase.setStandardElementConstraints(standardElementConstraints);
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
documentDatabase.declareIntent(new OIntentMassiveInsert());
}",0.9889705882352942
131874,"@Override public Object executeTransform(final Object input){
  line++;
  if (skipFrom > -1) {
    if (skipTo > -1) {
      if (line >= skipFrom && line <= skipTo)       return null;
    }
 else     if (line >= skipFrom)     return null;
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",input);
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (columnNames == null) {
    if (!columnsOnFirstLine)     throw new OTransformException(getName() + ""String_Node_Str"");
    columnNames=fields;
    for (int i=0; i < columnNames.size(); ++i)     columnNames.set(i,getCellContent(columnNames.get(i)));
    return null;
  }
  final ODocument doc=new ODocument();
  for (int i=0; i < columnNames.size() && i < fields.size(); ++i) {
    final String fieldName=columnNames.get(i);
    Object fieldValue=null;
    try {
      final String fieldStringValue=getCellContent(fields.get(i));
      final OType fieldType=columnTypes != null ? columnTypes.get(i) : null;
      if (fieldType != null && fieldType != OType.ANY) {
        fieldValue=getCellContent(fieldStringValue);
        try {
          fieldValue=OType.convert(fieldValue,fieldType.getDefaultJavaType());
          doc.field(fieldName,fieldValue);
        }
 catch (        Exception e) {
          processor.getStats().incrementErrors();
          log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",processor.getExtractor().getProgress(),fieldName,i,fieldValue,fieldValue.getClass().getName(),fieldType);
        }
      }
 else       if (fieldStringValue != null && !fieldStringValue.isEmpty()) {
        final char firstChar=fieldStringValue.charAt(0);
        if (Character.isDigit(firstChar)) {
          DateFormat df=new SimpleDateFormat(""String_Node_Str"");
          df.setLenient(true);
          try {
            fieldValue=df.parse(fieldStringValue);
          }
 catch (          ParseException pe) {
            try {
              if (fieldStringValue.contains(""String_Node_Str"") || fieldStringValue.contains(""String_Node_Str"")) {
                String numberAsString=fieldStringValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
                fieldValue=new Float(numberAsString);
                if (!isFinite((Float)fieldValue)) {
                  fieldValue=new Double(numberAsString);
                }
              }
 else               try {
                fieldValue=new Integer(fieldStringValue);
              }
 catch (              Exception e) {
                fieldValue=new Long(fieldStringValue);
              }
            }
 catch (            NumberFormatException nf) {
              fieldValue=fieldStringValue;
            }
          }
        }
 else         fieldValue=fieldStringValue;
        if (nullValue != null && nullValue.equals(fieldValue))         continue;
        doc.field(fieldName,fieldValue);
      }
    }
 catch (    Exception e) {
      processor.getStats().incrementErrors();
      log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",fieldName,fieldValue,e.toString());
    }
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",doc);
  return doc;
}","@Override public Object executeTransform(final Object input){
  if (skipTransform())   return null;
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",input);
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (!isColumnNamesCorrect(fields))   return null;
  final ODocument doc=new ODocument();
  for (int i=0; i < columnNames.size() && i < fields.size(); ++i) {
    final String fieldName=columnNames.get(i);
    Object fieldValue=null;
    try {
      final String fieldStringValue=getCellContent(fields.get(i));
      final OType fieldType=columnTypes != null ? columnTypes.get(i) : null;
      if (fieldType != null && fieldType != OType.ANY) {
        fieldValue=getCellContent(fieldStringValue);
        try {
          fieldValue=OType.convert(fieldValue,fieldType.getDefaultJavaType());
          doc.field(fieldName,fieldValue);
        }
 catch (        Exception e) {
          processor.getStats().incrementErrors();
          log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",processor.getExtractor().getProgress(),fieldName,i,fieldValue,fieldValue.getClass().getName(),fieldType);
        }
      }
 else       if (fieldStringValue != null && !fieldStringValue.isEmpty()) {
        fieldValue=determineTheType(fieldStringValue);
        if (nullValue != null && nullValue.equals(fieldValue))         continue;
        doc.field(fieldName,fieldValue);
      }
    }
 catch (    Exception e) {
      processor.getStats().incrementErrors();
      log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",fieldName,fieldValue,e.toString());
    }
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",doc);
  return doc;
}",0.6628618018752548
131875,"/** 
 * Creates an ETL processor by setting the configuration of each component.
 * @param iBeginBlocks List of Block configurations to execute at the beginning of processing
 * @param iSource Source component configuration
 * @param iExtractor Extractor component configuration
 * @param iTransformers List of Transformer configurations
 * @param iLoader Loader component configuration
 * @param iEndBlocks List of Block configurations to execute at the end of processing
 * @param iContext Execution Context
 */
public OETLProcessor parse(final Collection<ODocument> iBeginBlocks,final ODocument iSource,final ODocument iExtractor,final Collection<ODocument> iTransformers,final ODocument iLoader,final Collection<ODocument> iEndBlocks,final OBasicCommandContext iContext){
  if (iExtractor == null)   throw new IllegalArgumentException(""String_Node_Str"");
  context=iContext != null ? iContext : createDefaultContext();
  init();
  try {
    String name;
    beginBlocks=new ArrayList<OBlock>();
    if (iBeginBlocks != null)     for (    ODocument block : iBeginBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      beginBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
      b.execute();
    }
    if (iSource != null) {
      name=iSource.fieldNames()[0];
      source=factory.getSource(name);
      configureComponent(source,(ODocument)iSource.field(name),iContext);
    }
 else     source=factory.getSource(""String_Node_Str"");
    name=iExtractor.fieldNames()[0];
    extractor=factory.getExtractor(name);
    configureComponent(extractor,(ODocument)iExtractor.field(name),iContext);
    if (iLoader != null) {
      name=iLoader.fieldNames()[0];
      loader=factory.getLoader(name);
      configureComponent(loader,(ODocument)iLoader.field(name),iContext);
    }
 else     loader=factory.getLoader(""String_Node_Str"");
    transformers=new ArrayList<OTransformer>();
    if (iTransformers != null)     for (    ODocument t : iTransformers) {
      name=t.fieldNames()[0];
      final OTransformer tr=factory.getTransformer(name);
      transformers.add(tr);
      configureComponent(tr,(ODocument)t.field(name),iContext);
    }
    endBlocks=new ArrayList<OBlock>();
    if (iEndBlocks != null)     for (    ODocument block : iEndBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      endBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
    }
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"",e);
  }
  return this;
}","/** 
 * Creates an ETL processor by setting the configuration of each component.
 * @param iBeginBlocks List of Block configurations to execute at the beginning of processing
 * @param iSource Source component configuration
 * @param iExtractor Extractor component configuration
 * @param iTransformers List of Transformer configurations
 * @param iLoader Loader component configuration
 * @param iEndBlocks List of Block configurations to execute at the end of processing
 * @param iContext Execution Context
 * @return Current OETProcessor instance
 */
public OETLProcessor parse(final Collection<ODocument> iBeginBlocks,final ODocument iSource,final ODocument iExtractor,final Collection<ODocument> iTransformers,final ODocument iLoader,final Collection<ODocument> iEndBlocks,final OBasicCommandContext iContext){
  if (iExtractor == null)   throw new IllegalArgumentException(""String_Node_Str"");
  context=iContext != null ? iContext : createDefaultContext();
  init();
  try {
    String name;
    beginBlocks=new ArrayList<OBlock>();
    if (iBeginBlocks != null)     for (    ODocument block : iBeginBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      beginBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
      b.execute();
    }
    if (iSource != null) {
      name=iSource.fieldNames()[0];
      source=factory.getSource(name);
      configureComponent(source,(ODocument)iSource.field(name),iContext);
    }
 else     source=factory.getSource(""String_Node_Str"");
    name=iExtractor.fieldNames()[0];
    extractor=factory.getExtractor(name);
    configureComponent(extractor,(ODocument)iExtractor.field(name),iContext);
    if (iLoader != null) {
      name=iLoader.fieldNames()[0];
      loader=factory.getLoader(name);
      configureComponent(loader,(ODocument)iLoader.field(name),iContext);
    }
 else     loader=factory.getLoader(""String_Node_Str"");
    transformers=new ArrayList<OTransformer>();
    if (iTransformers != null)     for (    ODocument t : iTransformers) {
      name=t.fieldNames()[0];
      final OTransformer tr=factory.getTransformer(name);
      transformers.add(tr);
      configureComponent(tr,(ODocument)t.field(name),iContext);
    }
    endBlocks=new ArrayList<OBlock>();
    if (iEndBlocks != null)     for (    ODocument block : iEndBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      endBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
    }
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"",e);
  }
  return this;
}",0.992200875023778
131876,"/** 
 * Backport copy of   {@link Float#isFinite()} method that was introduced since Java 1.8 but we must support 1.6TODO replace after choosing Java 1.8 as minimal supported
 */
protected boolean isFinite(Float f){
  return Math.abs(f) <= FloatConsts.MAX_VALUE;
}","/** 
 * Backport copy of Float.isFinite() method that was introduced since Java 1.8 but we must support 1.6. TODO replace after choosing Java 1.8 as minimal supported
 */
protected boolean isFinite(Float f){
  return Math.abs(f) <= FloatConsts.MAX_VALUE;
}",0.953846153846154
131877,"@Override public Object executeTransform(final Object input){
  if (skipTransform())   return null;
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",input);
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (!isColumnNamesCorrect(fields))   return null;
  final ODocument doc=new ODocument();
  for (int i=0; i < columnNames.size() && i < fields.size(); ++i) {
    final String fieldName=columnNames.get(i);
    Object fieldValue=null;
    try {
      final String fieldStringValue=getCellContent(fields.get(i));
      final OType fieldType=columnTypes != null ? columnTypes.get(i) : null;
      if (fieldType != null && fieldType != OType.ANY) {
        fieldValue=getCellContent(fieldStringValue);
        try {
          fieldValue=OType.convert(fieldValue,fieldType.getDefaultJavaType());
          doc.field(fieldName,fieldValue);
        }
 catch (        Exception e) {
          processor.getStats().incrementErrors();
          log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",processor.getExtractor().getProgress(),fieldName,i,fieldValue,fieldValue.getClass().getName(),fieldType);
        }
      }
 else       if (fieldStringValue != null && !fieldStringValue.isEmpty()) {
        fieldValue=determineTheType(fieldStringValue);
        if (nullValue != null && nullValue.equals(fieldValue))         continue;
        doc.field(fieldName,fieldValue);
      }
    }
 catch (    Exception e) {
      processor.getStats().incrementErrors();
      log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",fieldName,fieldValue,e.toString());
    }
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",doc);
  return doc;
}","@Override public Object executeTransform(final Object input){
  if (skipTransform())   return null;
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",input);
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (!isColumnNamesCorrect(fields))   return null;
  final ODocument doc=new ODocument();
  for (int i=0; i < columnNames.size() && i < fields.size(); ++i) {
    final String fieldName=columnNames.get(i);
    Object fieldValue=null;
    try {
      final String fieldStringValue=getCellContent(fields.get(i));
      final OType fieldType=columnTypes != null ? columnTypes.get(i) : null;
      if (fieldType != null && fieldType != OType.ANY) {
        fieldValue=processKnownType(doc,i,fieldName,fieldStringValue,fieldType);
      }
 else {
        if (fieldStringValue == null)         fieldValue=null;
 else         fieldValue=determineTheType(fieldStringValue);
      }
      doc.field(fieldName,fieldValue);
    }
 catch (    Exception e) {
      processor.getStats().incrementErrors();
      log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",fieldName,fieldValue,e.toString());
    }
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",doc);
  return doc;
}",0.6980313646980314
131878,"public String getCellContent(String iValue){
  if (iValue == null)   return null;
  if (iValue.length() > 1 && (iValue.charAt(0) == stringCharacter && iValue.charAt(iValue.length() - 1) == stringCharacter))   return iValue.substring(1,iValue.length() - 1);
  return iValue;
}","public String getCellContent(String iValue){
  if (iValue == null || iValue.length() == 0 || ""String_Node_Str"".equals(iValue))   return null;
  if (iValue.length() > 1 && (iValue.charAt(0) == stringCharacter && iValue.charAt(iValue.length() - 1) == stringCharacter))   return iValue.substring(1,iValue.length() - 1);
  return iValue;
}",0.9016393442622952
131879,"@Test public void testNullCell(){
  String cfgJson=""String_Node_Str"";
  process(cfgJson);
  List<ODocument> res=getResult();
  ODocument doc=res.get(0);
  assertEquals(new Integer(1),(Integer)doc.field(""String_Node_Str""));
  assertNull((Integer)doc.field(""String_Node_Str""));
  assertEquals(""String_Node_Str"",(String)doc.field(""String_Node_Str""));
}","@Test public void testNullCell(){
  String cfgJson=""String_Node_Str"";
  process(cfgJson);
  List<ODocument> res=getResult();
  ODocument doc=res.get(0);
  assertEquals(new Integer(1),(Integer)doc.field(""String_Node_Str""));
  assertNull(doc.field(""String_Node_Str""));
  assertEquals(""String_Node_Str"",(String)doc.field(""String_Node_Str""));
}",0.9869375907111756
131880,"@Test public void testNullValueInCell(){
  String cfgJson=""String_Node_Str"";
  process(cfgJson);
  List<ODocument> res=getResult();
  ODocument doc=res.get(0);
  assertEquals(new Integer(1),(Integer)doc.field(""String_Node_Str""));
  assertNull((Integer)doc.field(""String_Node_Str""));
  assertEquals(""String_Node_Str"",(String)doc.field(""String_Node_Str""));
}","@Test public void testNullValueInCell(){
  String cfgJson=""String_Node_Str"";
  process(cfgJson);
  List<ODocument> res=getResult();
  ODocument doc=res.get(0);
  assertEquals(new Integer(1),(Integer)doc.field(""String_Node_Str""));
  assertNull(doc.field(""String_Node_Str""));
  assertEquals(""String_Node_Str"",(String)doc.field(""String_Node_Str""));
}",0.9871977240398292
131881,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.947945205479452
131882,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  edgeClass=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str"")) {
    final String direction=iConfiguration.field(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=true;
 else     if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=false;
 else     throw new OConfigurationException(""String_Node_Str"" + direction);
  }
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  edgeClass=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str"")) {
    final String direction=iConfiguration.field(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=true;
 else     if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=false;
 else     throw new OConfigurationException(""String_Node_Str"" + direction);
  }
  if (iConfiguration.containsField(""String_Node_Str""))   targetVertexFields=(ODocument)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   edgeFields=(ODocument)iConfiguration.field(""String_Node_Str"");
}",0.8294360385144429
131883,"private OrientEdge createEdge(final OrientVertex vertex,final Object joinCurrentValue,Object result){
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinCurrentValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=pipeline.getGraphDatabase().addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinCurrentValue);
        linkedV.save();
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedV.getRecord());
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinCurrentValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinCurrentValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinCurrentValue + ""String_Node_Str"");
}
}
if (result != null) {
final OrientVertex targetVertex=pipeline.getGraphDatabase().getVertex(result);
final OrientEdge edge;
if (directionOut) edge=(OrientEdge)vertex.addEdge(edgeClass,targetVertex);
 else edge=(OrientEdge)targetVertex.addEdge(edgeClass,vertex);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",edge);
return edge;
}
return null;
}","private OrientEdge createEdge(final OrientVertex vertex,final Object joinCurrentValue,Object result){
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinCurrentValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=pipeline.getGraphDatabase().addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinCurrentValue);
        if (targetVertexFields != null) {
          for (          String f : targetVertexFields.fieldNames())           linkedV.setProperty(f,resolve(targetVertexFields.field(f)));
        }
        linkedV.save();
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedV.getRecord());
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinCurrentValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinCurrentValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinCurrentValue + ""String_Node_Str"");
}
}
if (result != null) {
final OrientVertex targetVertex=pipeline.getGraphDatabase().getVertex(result);
final OrientEdge edge;
if (directionOut) edge=(OrientEdge)vertex.addEdge(edgeClass,targetVertex);
 else edge=(OrientEdge)targetVertex.addEdge(edgeClass,vertex);
if (edgeFields != null) {
for (String f : edgeFields.fieldNames()) edge.setProperty(f,resolve(edgeFields.field(f)));
}
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",edge);
return edge;
}
return null;
}",0.9059570607801632
131884,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9684908789386402
131885,"@Override public Object executeTransform(final Object input){
  if (input instanceof OIdentifiable) {
    final ORecord rec=((OIdentifiable)input).getRecord();
    if (rec instanceof ODocument) {
      final ODocument doc=(ODocument)rec;
      if (setOperation) {
        final Object newValue;
        if (expression != null) {
          if (sqlFilter == null)           sqlFilter=new OSQLFilter(expression,context,null);
          newValue=sqlFilter.evaluate(doc,null,context);
        }
 else         newValue=value;
        doc.field(fieldName,newValue);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,newValue,doc);
      }
 else {
        final Object prev=doc.removeField(fieldName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,prev,doc);
      }
      if (save) {
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",doc);
        final ODatabaseDocumentTx db=super.pipeline.getDocumentDatabase();
        db.save(doc);
      }
    }
  }
  return input;
}","@Override public Object executeTransform(final Object input){
  if (input instanceof OIdentifiable) {
    final ORecord rec=((OIdentifiable)input).getRecord();
    if (rec instanceof ODocument) {
      final ODocument doc=(ODocument)rec;
      if (setOperation) {
        final Object newValue;
        if (expression != null) {
          if (sqlFilter == null)           sqlFilter=new OSQLFilter(expression,context,null);
          newValue=sqlFilter.evaluate(doc,null,context);
        }
 else         newValue=value;
        doc.field(fieldName,newValue);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,newValue,doc);
      }
 else {
        if (fieldName != null) {
          final Object prev=doc.removeField(fieldName);
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,prev,doc);
        }
 else {
          for (          String f : fieldNames) {
            final Object prev=doc.removeField(f);
            log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",f,prev,doc);
          }
        }
      }
      if (save) {
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",doc);
        final ODatabaseDocumentTx db=super.pipeline.getDocumentDatabase();
        db.save(doc);
      }
    }
  }
  return input;
}",0.8751631143975641
131886,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  fieldName=(String)resolve(iConfiguration.field(""String_Node_Str""));
  expression=iConfiguration.field(""String_Node_Str"");
  value=iConfiguration.field(""String_Node_Str"");
  if (expression != null && value != null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   save=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   setOperation=""String_Node_Str"".equalsIgnoreCase((String)iConfiguration.field(""String_Node_Str""));
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  fieldName=(String)resolve(iConfiguration.field(""String_Node_Str""));
  fieldNames=(List<String>)resolve(iConfiguration.field(""String_Node_Str""));
  if (fieldNames == null && fieldName == null)   throw new IllegalArgumentException(""String_Node_Str"");
  expression=iConfiguration.field(""String_Node_Str"");
  value=iConfiguration.field(""String_Node_Str"");
  if (expression != null && value != null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   save=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   setOperation=""String_Node_Str"".equalsIgnoreCase((String)iConfiguration.field(""String_Node_Str""));
}",0.8877867327960323
131887,"public String getCellContent(String iValue){
  if (iValue == null || iValue.length() == 0 || ""String_Node_Str"".equals(iValue))   return null;
  if (iValue.length() > 1 && (iValue.charAt(0) == stringCharacter && iValue.charAt(iValue.length() - 1) == stringCharacter))   return iValue.substring(1,iValue.length() - 1);
  return iValue;
}","public String getCellContent(String iValue){
  if (iValue == null || iValue.isEmpty() || ""String_Node_Str"".equals(iValue))   return null;
  if (iValue.length() > 1 && (iValue.charAt(0) == stringCharacter && iValue.charAt(iValue.length() - 1) == stringCharacter))   return iValue.substring(1,iValue.length() - 1);
  return iValue;
}",0.9669669669669668
131888,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   useLightweightEdges=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   useLightweightEdges=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}",0.9478991596638656
131889,"@Override protected Object executeTransform(final Object input){
  context.setVariable(""String_Node_Str"",input);
  return block.execute();
}","@Override protected Object executeTransform(final Object input){
  context.setVariable(""String_Node_Str"",input);
  block.execute();
  return input;
}",0.9204152249134948
131890,"protected OExtractedItem fetchNext() throws IOException, ParseException {
  if (!reader.ready())   return null;
  String value=jsonReader.readString(new char[]{'}',']'},true);
  if (first != null) {
    value=first + value;
    first=null;
  }
  if (total == 1 && jsonReader.lastChar() == '}') {
    jsonReader=null;
  }
 else   if (total != 1 && jsonReader.lastChar() == ']') {
    if (!value.isEmpty())     value=value.substring(0,value.length() - 1);
    jsonReader=null;
  }
 else {
    jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
    if (jsonReader.lastChar() == ']')     jsonReader=null;
  }
  value=value.trim();
  if (value.isEmpty())   return null;
  return new OExtractedItem(current++,new ODocument().fromJSON(value));
}","protected OExtractedItem fetchNext() throws IOException, ParseException {
  if (!jsonReader.hasNext())   return null;
  String value=jsonReader.readString(new char[]{'}',']'},true);
  if (first != null) {
    value=first + value;
    first=null;
  }
  if (total == 1 && jsonReader.lastChar() == '}') {
    jsonReader=null;
  }
 else   if (total != 1 && jsonReader.lastChar() == ']') {
    if (!value.isEmpty())     value=value.substring(0,value.length() - 1);
    jsonReader=null;
  }
 else {
    jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
    if (jsonReader.lastChar() == ']')     jsonReader=null;
  }
  value=value.trim();
  if (value.isEmpty())   return null;
  return new OExtractedItem(current++,new ODocument().fromJSON(value));
}",0.9796747967479674
131891,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  joinFieldName=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   lookup=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   unresolvedLinkAction=ACTION.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  joinFieldName=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   joinValue=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   lookup=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   unresolvedLinkAction=ACTION.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
}",0.9032258064516128
131892,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9717682020802376
131893,"@Override public Object executeTransform(final Object input){
  if (graph == null)   throw new OETLProcessHaltedException(""String_Node_Str"");
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(getName() + ""String_Node_Str"" + input+ ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  Object result=lookup(joinValue,false);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinValue);
        linkedV.save();
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedV.getRecord());
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
final OrientEdge edge;
if (directionOut) edge=(OrientEdge)vertex.addEdge(edgeClass,targetVertex);
 else edge=(OrientEdge)targetVertex.addEdge(edgeClass,vertex);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",edge);
}
return input;
}","@Override public Object executeTransform(final Object input){
  if (graph == null)   throw new OETLProcessHaltedException(""String_Node_Str"");
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(getName() + ""String_Node_Str"" + input+ ""String_Node_Str"");
  final Object joinCurrentValue=joinValue != null ? joinValue : vertex.getProperty(joinFieldName);
  Object result=lookup(joinCurrentValue,false);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinCurrentValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinCurrentValue);
        linkedV.save();
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedV.getRecord());
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinCurrentValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinCurrentValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinCurrentValue + ""String_Node_Str"");
}
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
final OrientEdge edge;
if (directionOut) edge=(OrientEdge)vertex.addEdge(edgeClass,targetVertex);
 else edge=(OrientEdge)targetVertex.addEdge(edgeClass,vertex);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",edge);
}
return input;
}",0.9765561843168956
131894,"protected OExtractedItem fetchNext() throws IOException {
  if (!reader.ready())   return null;
  final String line=bReader.readLine();
  if (line == null)   return null;
  return new OExtractedItem(current++,line);
}","protected OExtractedItem fetchNext() throws IOException {
  if (!bReader.ready())   return null;
  final String line=bReader.readLine();
  if (line == null || line.isEmpty())   return null;
  return new OExtractedItem(current++,line);
}",0.9536423841059604
131895,"protected OClass getOrCreateClass(final String iClassName,final String iSuperClass){
  OClass cls;
  if (dbType == DB_TYPE.DOCUMENT) {
    final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
    if (documentDatabase.getMetadata().getSchema().existsClass(iClassName))     cls=documentDatabase.getMetadata().getSchema().getClass(iClassName);
 else {
      if (iSuperClass != null) {
        final OClass superClass=documentDatabase.getMetadata().getSchema().getClass(iSuperClass);
        if (superClass == null)         throw new OLoaderException(""String_Node_Str"" + iSuperClass + ""String_Node_Str"");
        cls=documentDatabase.getMetadata().getSchema().createClass(iClassName,superClass);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName,iSuperClass);
      }
 else {
        cls=documentDatabase.getMetadata().getSchema().createClass(iClassName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName);
      }
    }
  }
 else {
    final OrientBaseGraph graphDatabase=pipeline.getGraphDatabase();
    cls=graphDatabase.getVertexType(iClassName);
    if (cls == null) {
      if (iSuperClass != null) {
        final OClass superClass=graphDatabase.getRawGraph().getMetadata().getSchema().getClass(iSuperClass);
        if (superClass == null)         throw new OLoaderException(""String_Node_Str"" + iSuperClass + ""String_Node_Str"");
        if (graphDatabase.getVertexBaseType().isSuperClassOf(superClass)) {
          cls=graphDatabase.createVertexType(iClassName,superClass);
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName,iSuperClass);
        }
 else {
          cls=graphDatabase.createEdgeType(iClassName,superClass);
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName,iSuperClass);
        }
      }
 else {
        cls=graphDatabase.createVertexType(iClassName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName);
      }
    }
  }
  return cls;
}","protected OClass getOrCreateClass(final String iClassName,final String iSuperClass){
  OClass cls;
  if (dbType == DB_TYPE.DOCUMENT) {
    final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
    if (documentDatabase.getMetadata().getSchema().existsClass(iClassName))     cls=documentDatabase.getMetadata().getSchema().getClass(iClassName);
 else {
      if (iSuperClass != null) {
        final OClass superClass=documentDatabase.getMetadata().getSchema().getClass(iSuperClass);
        if (superClass == null)         throw new OLoaderException(""String_Node_Str"" + iSuperClass + ""String_Node_Str"");
        cls=documentDatabase.getMetadata().getSchema().createClass(iClassName,superClass);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName,iSuperClass);
      }
 else {
        cls=documentDatabase.getMetadata().getSchema().createClass(iClassName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName);
      }
    }
  }
 else {
    final OrientBaseGraph graphDatabase=pipeline.getGraphDatabase();
    cls=graphDatabase.getRawGraph().getMetadata().getSchema().getClass(iClassName);
    if (cls == null) {
      if (iSuperClass != null) {
        final OClass superClass=graphDatabase.getRawGraph().getMetadata().getSchema().getClass(iSuperClass);
        if (superClass == null)         throw new OLoaderException(""String_Node_Str"" + iSuperClass + ""String_Node_Str"");
        if (graphDatabase.getVertexBaseType().isSuperClassOf(superClass)) {
          cls=graphDatabase.createVertexType(iClassName,superClass);
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName,iSuperClass);
        }
 else {
          cls=graphDatabase.createEdgeType(iClassName,superClass);
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName,iSuperClass);
        }
      }
 else {
        cls=graphDatabase.createVertexType(iClassName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",iClassName);
      }
    }
  }
  return cls;
}",0.986335403726708
131896,"@Override public Object transform(final Object input){
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"" + input);
  if (input == null)   return null;
  if (!skip(input)) {
    context.setVariable(""String_Node_Str"",input);
    final Object result=executeTransform(input);
    if (output == null) {
      log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"" + result);
      return result;
    }
    context.setVariable(output,result);
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"" + input);
  return input;
}","@Override public Object transform(final Object input){
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",input);
  if (input == null)   return null;
  if (!skip(input)) {
    context.setVariable(""String_Node_Str"",input);
    final Object result=executeTransform(input);
    if (output == null) {
      log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",result);
      return result;
    }
    context.setVariable(output,result);
  }
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",input);
  return input;
}",0.988527724665392
131897,"@Override public Object executeTransform(final Object input){
  ODocument doc;
  if (!(input instanceof OIdentifiable)) {
    log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"");
    return null;
  }
  doc=((OIdentifiable)input).getRecord();
  Object joinRuntimeValue=null;
  if (joinFieldName != null)   joinRuntimeValue=doc.field(joinFieldName);
 else   if (joinValue != null)   joinRuntimeValue=resolve(joinValue);
  Object result;
  if (OMultiValue.isMultiValue(joinRuntimeValue)) {
    result=new ArrayList<Object>();
    for (    Object o : OMultiValue.getMultiValueIterable(joinRuntimeValue)) {
      final Object r=lookup(o);
      ((List<Object>)result).add(r);
    }
  }
 else   result=lookup(joinRuntimeValue);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinRuntimeValue,result);
  if (result != null) {
    if (linkFieldType != null) {
      if (linkFieldType == OType.LINK) {
        if (result instanceof Collection<?>) {
          if (!((Collection)result).isEmpty())           result=((Collection)result).iterator().next();
 else           result=null;
        }
      }
 else       if (linkFieldType == OType.LINKSET) {
        if (!(result instanceof Collection)) {
          final Set<OIdentifiable> res=new HashSet<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
 else       if (linkFieldType == OType.LINKLIST) {
        if (!(result instanceof Collection)) {
          final List<OIdentifiable> res=new ArrayList<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final ODocument linkedDoc=new ODocument(lookupParts[0]);
          linkedDoc.field(lookupParts[1],joinRuntimeValue);
          linkedDoc.save();
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedDoc.getRecord());
          result=linkedDoc;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinRuntimeValue + ""String_Node_Str"");
}
}
}
doc.field(linkFieldName,result);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkFieldName,result,input);
return input;
}","@Override public Object executeTransform(final Object input){
  ODocument doc;
  if (!(input instanceof OIdentifiable)) {
    log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",input.getClass());
    return null;
  }
  doc=((OIdentifiable)input).getRecord();
  Object joinRuntimeValue=null;
  if (joinFieldName != null)   joinRuntimeValue=doc.field(joinFieldName);
 else   if (joinValue != null)   joinRuntimeValue=resolve(joinValue);
  Object result;
  if (OMultiValue.isMultiValue(joinRuntimeValue)) {
    result=new ArrayList<Object>();
    for (    Object o : OMultiValue.getMultiValueIterable(joinRuntimeValue)) {
      final Object r=lookup(o);
      ((List<Object>)result).add(r);
    }
  }
 else   result=lookup(joinRuntimeValue);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinRuntimeValue,result);
  if (result != null) {
    if (linkFieldType != null) {
      if (linkFieldType == OType.LINK) {
        if (result instanceof Collection<?>) {
          if (!((Collection)result).isEmpty())           result=((Collection)result).iterator().next();
 else           result=null;
        }
      }
 else       if (linkFieldType == OType.LINKSET) {
        if (!(result instanceof Collection)) {
          final Set<OIdentifiable> res=new HashSet<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
 else       if (linkFieldType == OType.LINKLIST) {
        if (!(result instanceof Collection)) {
          final List<OIdentifiable> res=new ArrayList<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final ODocument linkedDoc=new ODocument(lookupParts[0]);
          linkedDoc.field(lookupParts[1],joinRuntimeValue);
          linkedDoc.save();
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedDoc.getRecord());
          result=linkedDoc;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinRuntimeValue + ""String_Node_Str"");
}
}
}
doc.field(linkFieldName,result);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkFieldName,result,input);
return input;
}",0.9968582517094808
131898,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   file=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   commands=iConfiguration.field(""String_Node_Str"");
  if (file == null && commands == null)   throw new OConfigurationException(""String_Node_Str"");
  console=new OConsoleDatabaseApp(new String[]{file});
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   file=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   commands=iConfiguration.field(""String_Node_Str"");
  if (file == null && commands == null)   throw new OConfigurationException(""String_Node_Str"");
  if (file != null)   console=new OConsoleDatabaseApp(new String[]{file});
 else   console=new OConsoleDatabaseApp(commands.toArray(new String[commands.size()]));
}",0.9086294416243654
131899,"@Override public Object executeTransform(final Object input){
  if (graph == null)   graph=pipeline.getGraphDatabase();
  if (graph == null)   throw new OETLProcessHaltedException(""String_Node_Str"");
  vertexClass=(String)resolve(vertexClass);
  if (vertexClass != null) {
    final OClass cls=graph.getVertexType(vertexClass);
    if (cls == null)     try {
      graph.createVertexType(vertexClass);
    }
 catch (    OSchemaException e) {
    }
  }
  final OrientVertex v=graph.getVertex(input);
  if (v == null)   return null;
  if (vertexClass != null)   v.setProperty(""String_Node_Str"",vertexClass);
  return v;
}","@Override public Object executeTransform(final Object input){
  if (graph == null)   graph=pipeline.getGraphDatabase();
  if (graph == null)   throw new OETLProcessHaltedException(""String_Node_Str"");
  vertexClass=(String)resolve(vertexClass);
  if (vertexClass != null) {
    final OClass cls=graph.getVertexType(vertexClass);
    if (cls == null)     try {
      graph.createVertexType(vertexClass);
    }
 catch (    OSchemaException e) {
    }
  }
  final OrientVertex v=graph.getVertex(input);
  if (v == null)   return null;
  if (vertexClass != null && !vertexClass.equals(v.getRecord().getClassName()))   v.setProperty(""String_Node_Str"",vertexClass);
  return v;
}",0.9589465530596436
131900,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (factory.exists() && dbAutoDropIfExists) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}",0.9904950495049504
131901,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9304029304029304
131902,"@Override public Object executeTransform(final Object input){
  if (input instanceof OIdentifiable) {
    final ORecord rec=((OIdentifiable)input).getRecord();
    if (rec instanceof ODocument) {
      final ODocument doc=(ODocument)rec;
      if (setOperation) {
        if (sqlFilter == null)         sqlFilter=new OSQLFilter(expression,context,null);
        final Object newValue=sqlFilter.evaluate(doc,null,context);
        doc.field(fieldName,newValue);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,newValue,doc);
      }
 else {
        final Object prev=doc.removeField(fieldName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,prev,doc);
      }
    }
  }
  return input;
}","@Override public Object executeTransform(final Object input){
  if (input instanceof OIdentifiable) {
    final ORecord rec=((OIdentifiable)input).getRecord();
    if (rec instanceof ODocument) {
      final ODocument doc=(ODocument)rec;
      if (setOperation) {
        final Object newValue;
        if (expression != null) {
          if (sqlFilter == null)           sqlFilter=new OSQLFilter(expression,context,null);
          newValue=sqlFilter.evaluate(doc,null,context);
        }
 else         newValue=value;
        doc.field(fieldName,newValue);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,newValue,doc);
      }
 else {
        final Object prev=doc.removeField(fieldName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,prev,doc);
      }
      if (save) {
        final ODatabaseDocumentTx db=super.pipeline.getDocumentDatabase();
        if (db == null)         throw new OETLProcessHaltedException(""String_Node_Str"");
        db.save(doc);
      }
    }
  }
  return input;
}",0.796400449943757
131903,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  fieldName=(String)resolve(iConfiguration.field(""String_Node_Str""));
  expression=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   setOperation=""String_Node_Str"".equalsIgnoreCase((String)iConfiguration.field(""String_Node_Str""));
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  fieldName=(String)resolve(iConfiguration.field(""String_Node_Str""));
  expression=iConfiguration.field(""String_Node_Str"");
  value=iConfiguration.field(""String_Node_Str"");
  if (expression != null && value != null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   save=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   setOperation=""String_Node_Str"".equalsIgnoreCase((String)iConfiguration.field(""String_Node_Str""));
}",0.7831325301204819
131904,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  fieldName=(String)resolve(iConfiguration.field(""String_Node_Str""));
  expression=iConfiguration.field(""String_Node_Str"");
  value=iConfiguration.field(""String_Node_Str"");
  if (expression != null && value != null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   save=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   setOperation=""String_Node_Str"".equalsIgnoreCase((String)iConfiguration.field(""String_Node_Str""));
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  fieldName=(String)resolve(iConfiguration.field(""String_Node_Str""));
  expression=iConfiguration.field(""String_Node_Str"");
  value=iConfiguration.field(""String_Node_Str"");
  if (expression != null && value != null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   save=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   setOperation=""String_Node_Str"".equalsIgnoreCase((String)iConfiguration.field(""String_Node_Str""));
}",0.9936753338018272
131905,"protected synchronized ODatabaseDocumentTx init(){
  ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
  OrientBaseGraph graphDatabase;
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
graphDatabase=factory.getNoTx();
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
 else ODatabaseRecordThreadLocal.INSTANCE.set(documentDatabase);
if (className != null) {
schemaClass=getOrCreateClass(className,null);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
if (classes != null) {
for (ODocument cls : classes) {
schemaClass=getOrCreateClass((String)cls.field(""String_Node_Str""),(String)cls.field(""String_Node_Str""));
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
}
if (indexes != null) {
for (ODocument idx : indexes) {
OIndex index;
String idxName=(String)resolve(idx.field(""String_Node_Str""));
if (idxName != null) {
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
}
final String idxClass=(String)resolve(idx.field(""String_Node_Str""));
if (idxClass == null) throw new OConfigurationException(""String_Node_Str"");
final OClass cls=getOrCreateClass(idxClass,null);
final String idxType=idx.field(""String_Node_Str"");
if (idxType == null) throw new OConfigurationException(""String_Node_Str"" + idxName + ""String_Node_Str"");
final List<String> idxFields=idx.field(""String_Node_Str"");
if (idxFields == null) throw new OConfigurationException(""String_Node_Str"");
String[] fields=new String[idxFields.size()];
for (int f=0; f < fields.length; ++f) {
final String fieldName=idxFields.get(f);
final String[] fieldNameParts=fieldName.split(""String_Node_Str"");
if (!cls.existsProperty(fieldNameParts[0])) {
if (fieldNameParts.length < 2) throw new OConfigurationException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
final String fieldType=fieldNameParts[1].toUpperCase();
final OType type=OType.valueOf(fieldType);
cls.createProperty(fieldNameParts[0],type);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxClass,fieldNameParts[0],fieldNameParts[1]);
}
fields[f]=fieldNameParts[0];
}
if (idxName == null) {
idxName=idxClass + ""String_Node_Str"";
for (int i=0; i < fields.length; ++i) {
if (i > 0) idxName+='_';
idxName+=fields[i];
}
}
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
index=cls.createIndex(idxName,idxType,fields);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxName,idxType,idxClass,idxFields);
}
}
return documentDatabase;
}","protected synchronized ODatabaseDocumentTx init(){
  ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
  OrientBaseGraph graphDatabase;
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
graphDatabase=factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
pipeline.setGraphDatabase(graphDatabase);
documentDatabase=graphDatabase.getRawGraph();
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
 else ODatabaseRecordThreadLocal.INSTANCE.set(documentDatabase);
if (className != null) {
schemaClass=getOrCreateClass(className,null);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
if (classes != null) {
for (ODocument cls : classes) {
schemaClass=getOrCreateClass((String)cls.field(""String_Node_Str""),(String)cls.field(""String_Node_Str""));
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",getName(),schemaClass.count(),getUnit(),className);
}
}
if (indexes != null) {
for (ODocument idx : indexes) {
OIndex index;
String idxName=(String)resolve(idx.field(""String_Node_Str""));
if (idxName != null) {
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
}
final String idxClass=(String)resolve(idx.field(""String_Node_Str""));
if (idxClass == null) throw new OConfigurationException(""String_Node_Str"");
final OClass cls=getOrCreateClass(idxClass,null);
final String idxType=idx.field(""String_Node_Str"");
if (idxType == null) throw new OConfigurationException(""String_Node_Str"" + idxName + ""String_Node_Str"");
final List<String> idxFields=idx.field(""String_Node_Str"");
if (idxFields == null) throw new OConfigurationException(""String_Node_Str"");
String[] fields=new String[idxFields.size()];
for (int f=0; f < fields.length; ++f) {
final String fieldName=idxFields.get(f);
final String[] fieldNameParts=fieldName.split(""String_Node_Str"");
if (!cls.existsProperty(fieldNameParts[0])) {
if (fieldNameParts.length < 2) throw new OConfigurationException(""String_Node_Str"" + fieldName + ""String_Node_Str"");
final String fieldType=fieldNameParts[1].toUpperCase();
final OType type=OType.valueOf(fieldType);
cls.createProperty(fieldNameParts[0],type);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxClass,fieldNameParts[0],fieldNameParts[1]);
}
fields[f]=fieldNameParts[0];
}
if (idxName == null) {
idxName=idxClass + ""String_Node_Str"";
for (int i=0; i < fields.length; ++i) {
if (i > 0) idxName+='_';
idxName+=fields[i];
}
}
index=documentDatabase.getMetadata().getIndexManager().getIndex(idxName);
if (index != null) continue;
index=cls.createIndex(idxName,idxType,fields);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",idxName,idxType,idxClass,idxFields);
}
}
return documentDatabase;
}",0.9755764304013664
131906,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   useLightweightEdges=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (dbAutoDropIfExists && factory.exists()) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}",0.9754684180027042
131907,"@Override public void begin(){
  if (!wal)   OGlobalConfiguration.USE_WAL.setValue(wal);
  ODatabaseDocumentTx documentDatabase=init();
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
documentDatabase.declareIntent(new OIntentMassiveInsert());
}","@Override public void begin(){
  if (!wal)   OGlobalConfiguration.USE_WAL.setValue(wal);
  ODatabaseDocumentTx documentDatabase=init();
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.setUseLightweightEdges(useLightweightEdges);
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
documentDatabase.declareIntent(new OIntentMassiveInsert());
}",0.9581263307310148
131908,"@Override public void begin(){
  if (graph == null) {
    graph=pipeline.getGraphDatabase();
    final OClass cls=graph.getEdgeType(edgeClass);
    if (cls == null)     graph.createEdgeType(edgeClass);
  }
  super.begin();
}","@Override public void begin(){
  if (graph == null) {
    graph=pipeline.getGraphDatabase();
    if (graph == null)     throw new OTransformException(getName() + ""String_Node_Str"");
    final OClass cls=graph.getEdgeType(edgeClass);
    if (cls == null)     graph.createEdgeType(edgeClass);
  }
  super.begin();
}",0.8342644320297952
131909,"@Override public Object executeTransform(final Object input){
  if (input instanceof OIdentifiable) {
    final ORecord rec=((OIdentifiable)input).getRecord();
    if (rec instanceof ODocument) {
      final ODocument doc=(ODocument)rec;
      if (setOperation) {
        final Object newValue;
        if (expression != null) {
          if (sqlFilter == null)           sqlFilter=new OSQLFilter(expression,context,null);
          newValue=sqlFilter.evaluate(doc,null,context);
        }
 else         newValue=value;
        doc.field(fieldName,newValue);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,newValue,doc);
      }
 else {
        final Object prev=doc.removeField(fieldName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,prev,doc);
      }
      if (save) {
        final ODatabaseDocumentTx db=super.pipeline.getDocumentDatabase();
        if (db == null)         throw new OETLProcessHaltedException(""String_Node_Str"");
        db.save(doc);
      }
    }
  }
  return input;
}","@Override public Object executeTransform(final Object input){
  if (input instanceof OIdentifiable) {
    final ORecord rec=((OIdentifiable)input).getRecord();
    if (rec instanceof ODocument) {
      final ODocument doc=(ODocument)rec;
      if (setOperation) {
        final Object newValue;
        if (expression != null) {
          if (sqlFilter == null)           sqlFilter=new OSQLFilter(expression,context,null);
          newValue=sqlFilter.evaluate(doc,null,context);
        }
 else         newValue=value;
        doc.field(fieldName,newValue);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,newValue,doc);
      }
 else {
        final Object prev=doc.removeField(fieldName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,prev,doc);
      }
      if (save) {
        final ODatabaseDocumentTx db=super.pipeline.getDocumentDatabase();
        if (db == null)         throw new OTransformException(""String_Node_Str"");
        db.save(doc);
      }
    }
  }
  return input;
}",0.9889476213358962
131910,"@Override public void execute(){
  if (!skip(null))   executeBlock();
}","@Override public Object execute(){
  if (!skip(null))   return executeBlock();
  return null;
}",0.8072289156626506
131911,protected abstract void executeBlock();,protected abstract Object executeBlock();,0.875
131912,void execute();,Object execute();,0.6875
131913,"@Override public void executeBlock(){
  cmd.executeInContext(context,params);
}","@Override public Object executeBlock(){
  return cmd.executeInContext(context,params);
}",0.8982035928143712
131914,"@Override public void executeBlock(){
  console.run();
}","@Override public Object executeBlock(){
  return console.run();
}",0.859504132231405
131915,"@Override public void executeBlock(){
  if (expression != null)   context.setVariable(name,expression.evaluate(null,null,context));
 else   context.setVariable(name,resolve(value));
}","@Override public Object executeBlock(){
  final Object v=expression != null ? expression.evaluate(null,null,context) : resolve(value);
  context.setVariable(name,v);
  return v;
}",0.7237569060773481
131916,"@Override protected Object executeTransform(final Object input){
  context.setVariable(""String_Node_Str"",input);
  block.execute();
  return input;
}","@Override protected Object executeTransform(final Object input){
  context.setVariable(""String_Node_Str"",input);
  return block.execute();
}",0.9204152249134948
131917,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  final String[] fieldNames=iConfiguration.fieldNames();
  if (fieldNames.length != 1)   throw new OConfigurationException(""String_Node_Str"");
  try {
    block=processor.getFactory().getBlock(fieldNames[0]);
    block.configure(processor,(ODocument)iConfiguration.field(fieldNames[0]),context);
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"",e);
  }
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  final String[] fieldNames=iConfiguration.fieldNames();
  try {
    block=processor.getFactory().getBlock(fieldNames[0]);
    block.configure(processor,(ODocument)iConfiguration.field(fieldNames[0]),context);
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"",e);
  }
}",0.9176245210727968
131918,"@Override public Object executeTransform(final Object input){
  Object joinRuntimeValue=null;
  if (joinFieldName != null)   joinRuntimeValue=((ODocument)input).field(joinFieldName);
 else   if (joinValue != null)   joinRuntimeValue=resolve(joinValue);
  Object result;
  if (OMultiValue.isMultiValue(joinRuntimeValue)) {
    result=new ArrayList<Object>();
    for (    Object o : OMultiValue.getMultiValueIterable(joinRuntimeValue)) {
      final Object r=lookup(o);
      ((List<Object>)result).add(r);
    }
  }
 else   result=lookup(joinRuntimeValue);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinRuntimeValue,result);
  if (result != null) {
    if (linkFieldType != null) {
      if (linkFieldType == OType.LINK) {
        if (result instanceof Collection<?>) {
          if (!((Collection)result).isEmpty())           result=((Collection)result).iterator().next();
 else           result=null;
        }
      }
 else       if (linkFieldType == OType.LINKSET) {
        if (!(result instanceof Collection)) {
          final Set<OIdentifiable> res=new HashSet<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
 else       if (linkFieldType == OType.LINKLIST) {
        if (!(result instanceof Collection)) {
          final List<OIdentifiable> res=new ArrayList<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final ODocument linkedDoc=new ODocument(lookupParts[0]);
          linkedDoc.field(lookupParts[1],joinRuntimeValue);
          linkedDoc.save();
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedDoc.getRecord());
          result=linkedDoc;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinRuntimeValue + ""String_Node_Str"");
}
}
}
((ODocument)((OIdentifiable)input).getRecord()).field(linkFieldName,result);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkFieldName,result,input);
return input;
}","@Override public Object executeTransform(final Object input){
  ODocument doc;
  if (!(input instanceof OIdentifiable)) {
    log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"");
    return null;
  }
  doc=((OIdentifiable)input).getRecord();
  Object joinRuntimeValue=null;
  if (joinFieldName != null)   joinRuntimeValue=doc.field(joinFieldName);
 else   if (joinValue != null)   joinRuntimeValue=resolve(joinValue);
  Object result;
  if (OMultiValue.isMultiValue(joinRuntimeValue)) {
    result=new ArrayList<Object>();
    for (    Object o : OMultiValue.getMultiValueIterable(joinRuntimeValue)) {
      final Object r=lookup(o);
      ((List<Object>)result).add(r);
    }
  }
 else   result=lookup(joinRuntimeValue);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinRuntimeValue,result);
  if (result != null) {
    if (linkFieldType != null) {
      if (linkFieldType == OType.LINK) {
        if (result instanceof Collection<?>) {
          if (!((Collection)result).isEmpty())           result=((Collection)result).iterator().next();
 else           result=null;
        }
      }
 else       if (linkFieldType == OType.LINKSET) {
        if (!(result instanceof Collection)) {
          final Set<OIdentifiable> res=new HashSet<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
 else       if (linkFieldType == OType.LINKLIST) {
        if (!(result instanceof Collection)) {
          final List<OIdentifiable> res=new ArrayList<OIdentifiable>();
          res.add((OIdentifiable)result);
          result=res;
        }
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final ODocument linkedDoc=new ODocument(lookupParts[0]);
          linkedDoc.field(lookupParts[1],joinRuntimeValue);
          linkedDoc.save();
          log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedDoc.getRecord());
          result=linkedDoc;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinRuntimeValue + ""String_Node_Str"");
}
}
}
doc.field(linkFieldName,result);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkFieldName,result,input);
return input;
}",0.9520015177385696
131919,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (factory.exists() && dbAutoDropIfExists) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=factory.setTransactional(tx).get();
graphDatabase.shutdown();
break;
}
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   wal=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreate=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoDropIfExists=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbAutoCreateProperties=(Boolean)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
  classes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    final ODatabaseDocumentTx documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists() && dbAutoDropIfExists) {
    log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
    documentDatabase.open(dbUser,dbPassword);
    documentDatabase.drop();
  }
if (documentDatabase.exists()) {
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",dbURL);
  documentDatabase.open(dbUser,dbPassword);
}
 else if (dbAutoCreate) {
  documentDatabase.create();
}
 else throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
documentDatabase.close();
break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
if (factory.exists() && dbAutoDropIfExists) {
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",dbURL);
factory.drop();
}
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
graphDatabase.shutdown();
break;
}
}",0.9908802537668516
131920,"@Override public void begin(){
  if (!wal)   OGlobalConfiguration.USE_WAL.setValue(wal);
  ODatabaseDocumentTx documentDatabase=init();
  final OrientBaseGraph graphDatabase;
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
graphDatabase=factory.setTransactional(false).get();
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
documentDatabase.declareIntent(new OIntentMassiveInsert());
}","@Override public void begin(){
  if (!wal)   OGlobalConfiguration.USE_WAL.setValue(wal);
  ODatabaseDocumentTx documentDatabase=init();
  if (documentDatabase == null) {
switch (dbType) {
case DOCUMENT:
      documentDatabase=new ODatabaseDocumentTx(dbURL);
    documentDatabase.open(dbUser,dbPassword);
  break;
case GRAPH:
final OrientGraphFactory factory=new OrientGraphFactory(dbURL);
final OrientBaseGraph graphDatabase=tx ? factory.getTx() : factory.getNoTx();
documentDatabase=graphDatabase.getRawGraph();
pipeline.setGraphDatabase(graphDatabase);
break;
}
pipeline.setDocumentDatabase(documentDatabase);
}
documentDatabase.declareIntent(new OIntentMassiveInsert());
}",0.9178885630498532
131921,"public OETLComponentFactory(){
  registerSource(OFileSource.class);
  registerSource(OHttpSource.class);
  registerSource(OInputSource.class);
  registerBlock(OCodeBlock.class);
  registerBlock(OLetBlock.class);
  registerBlock(OConsoleBlock.class);
  registerExtractor(OJDBCExtractor.class);
  registerExtractor(ORowExtractor.class);
  registerExtractor(OJsonExtractor.class);
  registerTransformer(OBlockTransformer.class);
  registerTransformer(OCodeTransformer.class);
  registerTransformer(OCSVTransformer.class);
  registerTransformer(OCommandTransformer.class);
  registerTransformer(OEdgeTransformer.class);
  registerTransformer(OFieldTransformer.class);
  registerTransformer(OJSONTransformer.class);
  registerTransformer(OLinkTransformer.class);
  registerTransformer(OLogTransformer.class);
  registerTransformer(OMergeTransformer.class);
  registerTransformer(OFlowTransformer.class);
  registerTransformer(OVertexTransformer.class);
  registerLoader(OOrientDBLoader.class);
  registerLoader(OOutputLoader.class);
}","public OETLComponentFactory(){
  registerSource(OFileSource.class);
  registerSource(OHttpSource.class);
  registerSource(OInputSource.class);
  registerSource(OContentSource.class);
  registerBlock(OCodeBlock.class);
  registerBlock(OLetBlock.class);
  registerBlock(OConsoleBlock.class);
  registerExtractor(OJDBCExtractor.class);
  registerExtractor(ORowExtractor.class);
  registerExtractor(OJsonExtractor.class);
  registerTransformer(OBlockTransformer.class);
  registerTransformer(OCodeTransformer.class);
  registerTransformer(OCSVTransformer.class);
  registerTransformer(OCommandTransformer.class);
  registerTransformer(OEdgeTransformer.class);
  registerTransformer(OFieldTransformer.class);
  registerTransformer(OJSONTransformer.class);
  registerTransformer(OLinkTransformer.class);
  registerTransformer(OLogTransformer.class);
  registerTransformer(OMergeTransformer.class);
  registerTransformer(OFlowTransformer.class);
  registerTransformer(OVertexTransformer.class);
  registerLoader(OOrientDBLoader.class);
  registerLoader(OOutputLoader.class);
}",0.98093422306959
131922,"public static void main(final String[] args){
  ODocument cfgGlobal=null;
  Collection<ODocument> cfgBegin=null;
  ODocument cfgSource=null;
  ODocument cfgExtract=null;
  Collection<ODocument> cfgTransformers=null;
  ODocument cfgLoader=null;
  Collection<ODocument> cfgEnd=null;
  System.out.println(""String_Node_Str"" + OConstants.getVersion() + ""String_Node_Str""+ OConstants.ORIENT_URL);
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  final OBasicCommandContext context=createDefaultContext();
  for (int i=0; i < args.length; ++i) {
    final String arg=args[i];
    if (arg.charAt(0) == '-') {
      final String[] parts=arg.substring(1).split(""String_Node_Str"");
      context.setVariable(parts[0].toUpperCase(),parts[1]);
    }
 else {
      try {
        final String config=OIOUtils.readFileAsString(new File(arg));
        final ODocument cfg=new ODocument().fromJSON(config,""String_Node_Str"");
        cfgGlobal=cfg.field(""String_Node_Str"");
        cfgBegin=cfg.field(""String_Node_Str"");
        cfgSource=cfg.field(""String_Node_Str"");
        cfgExtract=cfg.field(""String_Node_Str"");
        cfgTransformers=cfg.field(""String_Node_Str"");
        cfgLoader=cfg.field(""String_Node_Str"");
        cfgEnd=cfg.field(""String_Node_Str"");
      }
 catch (      IOException e) {
        throw new OConfigurationException(""String_Node_Str"" + arg);
      }
    }
  }
  if (cfgExtract == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (cfgGlobal != null) {
    for (    String f : cfgGlobal.fieldNames()) {
      context.setVariable(f,cfgGlobal.field(f));
    }
  }
  final OETLProcessor processor=new OETLProcessor(cfgBegin,cfgSource,cfgExtract,cfgTransformers,cfgLoader,cfgEnd,context);
  processor.execute();
}","public static void main(final String[] args){
  ODocument cfgGlobal=null;
  System.out.println(""String_Node_Str"" + OConstants.getVersion() + ""String_Node_Str""+ OConstants.ORIENT_URL);
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  final OBasicCommandContext context=createDefaultContext();
  ODocument configuration=null;
  for (int i=0; i < args.length; ++i) {
    final String arg=args[i];
    if (arg.charAt(0) == '-') {
      final String[] parts=arg.substring(1).split(""String_Node_Str"");
      context.setVariable(parts[0].toUpperCase(),parts[1]);
    }
 else {
      try {
        final String config=OIOUtils.readFileAsString(new File(arg));
        configuration=new ODocument().fromJSON(config,""String_Node_Str"");
        cfgGlobal=configuration.field(""String_Node_Str"");
      }
 catch (      IOException e) {
        throw new OConfigurationException(""String_Node_Str"" + arg);
      }
    }
  }
  if (cfgGlobal != null) {
    for (    String f : cfgGlobal.fieldNames()) {
      context.setVariable(f,cfgGlobal.field(f));
    }
  }
  new OETLProcessor().parse(configuration,context).execute();
}",0.5782335428382401
131923,"@Override public void end(){
  for (  OTransformer t : transformers)   t.end();
  if (source != null)   source.end();
  extractor.end();
  loader.end();
  for (  OBlock t : endBlocks) {
    t.begin();
    t.execute();
    t.end();
  }
  elapsed=System.currentTimeMillis() - startTime;
  if (dumpTask != null) {
    dumpTask.cancel();
  }
  out(LOG_LEVELS.INFO,""String_Node_Str"");
  dumpProgress();
}","protected void end(){
  for (  OTransformer t : transformers)   t.end();
  if (source != null)   source.end();
  extractor.end();
  loader.end();
  for (  OBlock t : endBlocks) {
    t.begin();
    t.execute();
    t.end();
  }
  elapsed=System.currentTimeMillis() - startTime;
  if (dumpTask != null) {
    dumpTask.cancel();
  }
  out(LOG_LEVELS.INFO,""String_Node_Str"");
  dumpProgress();
}",0.968394437420986
131924,"public void execute(){
  if (parallel)   executeParallel();
 else   executeSequentially();
}","public OETLProcessor execute(){
  if (parallel)   executeParallel();
 else   executeSequentially();
  return this;
}",0.8557692307692307
131925,"public void executeParallel(){
  try {
    begin();
    out(LOG_LEVELS.INFO,""String_Node_Str"",threads.length);
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final LinkedBlockingQueue<OExtractedItem> queue=new LinkedBlockingQueue<OExtractedItem>(threads.length * 500){
      @Override public boolean offer(      OExtractedItem e){
        try {
          put(e);
          return true;
        }
 catch (        InterruptedException ie) {
          Thread.currentThread().interrupt();
        }
        return false;
      }
    }
;
    final AtomicLong counter=new AtomicLong();
    final AtomicBoolean extractionFinished=new AtomicBoolean(false);
    final OETLProcessor processor=this;
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new Thread(new Runnable(){
        @Override public void run(){
          final OETLPipeline pipeline=new OETLPipeline(processor,transformers,loader,logLevel,maxRetries);
          pipeline.begin();
          while (!extractionFinished.get() || counter.get() > 0) {
            try {
              final OExtractedItem content=queue.take();
              try {
                pipeline.execute(content);
              }
  finally {
                counter.decrementAndGet();
              }
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
,""String_Node_Str"" + i);
      threads[i].setDaemon(true);
      threads[i].start();
    }
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      queue.offer(current);
      counter.incrementAndGet();
    }
    extractionFinished.set(true);
    while (counter.get() > 0) {
      out(LOG_LEVELS.INFO,""String_Node_Str"" + counter.get() + ""String_Node_Str"");
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,""String_Node_Str"",e);
  }
}","protected void executeParallel(){
  try {
    begin();
    out(LOG_LEVELS.INFO,""String_Node_Str"",threads.length);
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final LinkedBlockingQueue<OExtractedItem> queue=new LinkedBlockingQueue<OExtractedItem>(threads.length * 500){
      @Override public boolean offer(      OExtractedItem e){
        try {
          put(e);
          return true;
        }
 catch (        InterruptedException ie) {
          Thread.currentThread().interrupt();
        }
        return false;
      }
    }
;
    final AtomicLong counter=new AtomicLong();
    final AtomicBoolean extractionFinished=new AtomicBoolean(false);
    final OETLProcessor processor=this;
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new Thread(new Runnable(){
        @Override public void run(){
          final OETLPipeline pipeline=new OETLPipeline(processor,transformers,loader,logLevel,maxRetries);
          pipeline.begin();
          while (!extractionFinished.get() || counter.get() > 0) {
            try {
              final OExtractedItem content=queue.take();
              try {
                pipeline.execute(content);
              }
  finally {
                counter.decrementAndGet();
              }
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
,""String_Node_Str"" + i);
      threads[i].setDaemon(true);
      threads[i].start();
    }
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      queue.offer(current);
      counter.incrementAndGet();
    }
    extractionFinished.set(true);
    while (counter.get() > 0) {
      out(LOG_LEVELS.INFO,""String_Node_Str"" + counter.get() + ""String_Node_Str"");
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,""String_Node_Str"",e);
  }
}",0.9968129443491052
131926,"@Override public void begin(){
  out(LOG_LEVELS.INFO,""String_Node_Str"");
  final Integer cfgMaxRetries=(Integer)context.getVariable(""String_Node_Str"");
  if (cfgMaxRetries != null)   maxRetries=cfgMaxRetries;
  final int dumpEveryMs=(Integer)context.getVariable(""String_Node_Str"");
  if (dumpEveryMs > 0) {
    dumpTask=new TimerTask(){
      @Override public void run(){
        dumpProgress();
      }
    }
;
    Orient.instance().getTimer().schedule(dumpTask,dumpEveryMs,dumpEveryMs);
    startTime=System.currentTimeMillis();
  }
  for (  OBlock t : beginBlocks) {
    t.begin();
    t.execute();
    t.end();
  }
  if (source != null)   source.begin();
  extractor.begin();
}","protected void begin(){
  out(LOG_LEVELS.INFO,""String_Node_Str"");
  final Integer cfgMaxRetries=(Integer)context.getVariable(""String_Node_Str"");
  if (cfgMaxRetries != null)   maxRetries=cfgMaxRetries;
  final int dumpEveryMs=(Integer)context.getVariable(""String_Node_Str"");
  if (dumpEveryMs > 0) {
    dumpTask=new TimerTask(){
      @Override public void run(){
        dumpProgress();
      }
    }
;
    Orient.instance().getTimer().schedule(dumpTask,dumpEveryMs,dumpEveryMs);
    startTime=System.currentTimeMillis();
  }
  for (  OBlock t : beginBlocks) {
    t.begin();
    t.execute();
    t.end();
  }
  if (source != null)   source.begin();
  extractor.begin();
}",0.981549815498155
131927,"public OETLProcessor(final Collection<ODocument> iBeginBlocks,final ODocument iSource,final ODocument iExtractor,final Collection<ODocument> iTransformers,final ODocument iLoader,final Collection<ODocument> iEndBlocks,final OBasicCommandContext iContext){
  context=iContext;
  init();
  try {
    String name;
    beginBlocks=new ArrayList<OBlock>();
    if (iBeginBlocks != null)     for (    ODocument block : iBeginBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      beginBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
      b.execute();
    }
    if (iSource != null) {
      name=iSource.fieldNames()[0];
      source=factory.getSource(name);
      configureComponent(source,(ODocument)iSource.field(name),iContext);
    }
 else     source=factory.getSource(""String_Node_Str"");
    name=iExtractor.fieldNames()[0];
    extractor=factory.getExtractor(name);
    configureComponent(extractor,(ODocument)iExtractor.field(name),iContext);
    if (iLoader != null) {
      name=iLoader.fieldNames()[0];
      loader=factory.getLoader(name);
      configureComponent(loader,(ODocument)iLoader.field(name),iContext);
    }
 else     loader=factory.getLoader(""String_Node_Str"");
    transformers=new ArrayList<OTransformer>();
    if (iTransformers != null)     for (    ODocument t : iTransformers) {
      name=t.fieldNames()[0];
      final OTransformer tr=factory.getTransformer(name);
      transformers.add(tr);
      configureComponent(tr,(ODocument)t.field(name),iContext);
    }
    endBlocks=new ArrayList<OBlock>();
    if (iEndBlocks != null)     for (    ODocument block : iEndBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      endBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
    }
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"",e);
  }
}","public OETLProcessor(){
}",0.0253678335870116
131928,"@Override public Object executeTransform(final Object input){
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(getName() + ""String_Node_Str"" + input+ ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  Object result=lookup(joinValue);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinValue);
        linkedV.save();
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedV.getRecord());
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
final OrientEdge edge;
if (directionOut) edge=(OrientEdge)vertex.addEdge(edgeClass,targetVertex);
 else edge=(OrientEdge)targetVertex.addEdge(edgeClass,vertex);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",edge);
}
}
return input;
}","@Override public Object executeTransform(final Object input){
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(getName() + ""String_Node_Str"" + input+ ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  Object result=lookup(joinValue);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",joinValue,result);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinValue);
        linkedV.save();
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",linkedV.getRecord());
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(OETLProcessor.LOG_LEVELS.ERROR,""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(OETLProcessor.LOG_LEVELS.INFO,""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
final OrientEdge edge;
if (directionOut) edge=(OrientEdge)vertex.addEdge(edgeClass,targetVertex);
 else edge=(OrientEdge)targetVertex.addEdge(edgeClass,vertex);
log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",edge);
}
return input;
}",0.9907300115874856
131929,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}",0.8621908127208481
131930,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  name=iConfiguration.field(""String_Node_Str"");
  expression=new OSQLFilter((String)iConfiguration.field(""String_Node_Str""),iContext,null);
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  name=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str"")) {
    value=iConfiguration.field(""String_Node_Str"");
  }
 else   expression=new OSQLFilter((String)iConfiguration.field(""String_Node_Str""),iContext,null);
  if (value == null && expression == null)   throw new IllegalArgumentException(""String_Node_Str"");
}",0.7383177570093458
131931,"@Override public void executeBlock(){
  context.setVariable(name,expression.evaluate(null,null,context));
}","@Override public void executeBlock(){
  if (expression != null)   context.setVariable(name,expression.evaluate(null,null,context));
 else   context.setVariable(name,resolve(value));
}",0.7379310344827587
131932,"public void load(final Object input,OCommandContext context){
  if (input == null)   return;
  if (dbAutoCreateProperties) {
    if (dbType == DB_TYPE.DOCUMENT) {
      if (input instanceof ODocument) {
        final ODocument doc=(ODocument)input;
        final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
        final OClass cls;
        if (className != null)         cls=getOrCreateClass(className,null);
 else         cls=doc.getSchemaClass();
        for (        String f : doc.fieldNames()) {
          final String newName=transformFieldName(f);
          final String fName=newName != null ? newName : f;
          OProperty p=cls.getProperty(fName);
          if (p == null) {
            final Object fValue=doc.field(f);
            createProperty(cls,fName,fValue);
            if (newName != null) {
              doc.removeField(f);
              doc.field(newName,fValue);
            }
          }
        }
      }
    }
 else     if (dbType == DB_TYPE.GRAPH) {
      if (input instanceof OrientElement) {
        final OrientElement element=(OrientElement)input;
        final OrientBaseGraph graph=pipeline.getGraphDatabase();
        final OClass cls;
        final String clsName=className != null ? className : element.getLabel();
        if (clsName != null)         cls=getOrCreateClass(clsName,element.getBaseClassName());
 else         throw new IllegalArgumentException(""String_Node_Str"" + input);
        for (        String f : element.getPropertyKeys()) {
          final String newName=transformFieldName(f);
          final String fName=newName != null ? newName : f;
          OProperty p=cls.getProperty(fName);
          if (p == null) {
            final Object fValue=element.getProperty(f);
            createProperty(cls,fName,fValue);
            if (newName != null) {
              element.removeProperty(f);
              element.setProperty(newName,fValue);
            }
          }
        }
      }
    }
  }
  if (tx && dbType == DB_TYPE.DOCUMENT) {
    final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
    if (!documentDatabase.getTransaction().isActive())     documentDatabase.begin();
  }
  if (input instanceof OrientVertex) {
    final OrientVertex v=(OrientVertex)input;
    if (clusterName != null)     v.save(clusterName);
 else     v.save();
  }
 else   if (input instanceof ODocument) {
    final ODocument doc=(ODocument)input;
    if (className != null)     doc.setClassName(className);
    if (clusterName != null)     doc.save(clusterName);
 else     doc.save();
  }
  progress.incrementAndGet();
  if (batchCommit > 0) {
    if (batchCounter > batchCommit) {
      if (dbType == DB_TYPE.DOCUMENT) {
        final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
        documentDatabase.commit();
        documentDatabase.begin();
      }
 else {
        pipeline.getGraphDatabase().commit();
      }
      batchCounter=0;
    }
 else     batchCounter++;
  }
}","public void load(final Object input,OCommandContext context){
  if (input == null)   return;
  if (dbAutoCreateProperties) {
    if (dbType == DB_TYPE.DOCUMENT) {
      if (input instanceof ODocument) {
        final ODocument doc=(ODocument)input;
        final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
        final OClass cls;
        if (className != null)         cls=getOrCreateClass(className,null);
 else         cls=doc.getSchemaClass();
        for (        String f : doc.fieldNames()) {
          final String newName=transformFieldName(f);
          final String fName=newName != null ? newName : f;
          OProperty p=cls.getProperty(fName);
          if (p == null) {
            final Object fValue=doc.field(f);
            createProperty(cls,fName,fValue);
            if (newName != null) {
              doc.removeField(f);
              doc.field(newName,fValue);
            }
          }
        }
      }
    }
 else     if (dbType == DB_TYPE.GRAPH) {
      if (input instanceof OrientElement) {
        final OrientElement element=(OrientElement)input;
        final OClass cls;
        final String clsName=className != null ? className : (element instanceof OrientVertex ? ((OrientVertex)element).getLabel() : ((OrientEdge)element).getLabel());
        if (clsName != null)         cls=getOrCreateClass(clsName,element.getBaseClassName());
 else         throw new IllegalArgumentException(""String_Node_Str"" + input);
        for (        String f : element.getPropertyKeys()) {
          final String newName=transformFieldName(f);
          final String fName=newName != null ? newName : f;
          OProperty p=cls.getProperty(fName);
          if (p == null) {
            final Object fValue=element.getProperty(f);
            createProperty(cls,fName,fValue);
            if (newName != null) {
              element.removeProperty(f);
              element.setProperty(newName,fValue);
            }
          }
        }
      }
    }
  }
  if (tx && dbType == DB_TYPE.DOCUMENT) {
    final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
    if (!documentDatabase.getTransaction().isActive())     documentDatabase.begin();
  }
  if (input instanceof OrientVertex) {
    final OrientVertex v=(OrientVertex)input;
    if (clusterName != null)     v.save(clusterName);
 else     v.save();
  }
 else   if (input instanceof ODocument) {
    final ODocument doc=(ODocument)input;
    if (className != null)     doc.setClassName(className);
    if (clusterName != null)     doc.save(clusterName);
 else     doc.save();
  }
  progress.incrementAndGet();
  if (batchCommit > 0) {
    if (batchCounter > batchCommit) {
      if (dbType == DB_TYPE.DOCUMENT) {
        final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
        documentDatabase.commit();
        documentDatabase.begin();
      }
 else {
        pipeline.getGraphDatabase().commit();
      }
      batchCounter=0;
    }
 else     batchCounter++;
  }
}",0.9507978723404256
131933,"@Override public Object executeTransform(final Object input){
  if (input == null)   return null;
  params.put(""String_Node_Str"",input);
  Object result=cmd.executeInContext(context,params);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",cmd,result);
  return result;
}","@Override public Object executeTransform(final Object input){
  if (input == null)   return null;
  params.put(""String_Node_Str"",input);
  if (input instanceof OIdentifiable)   params.put(""String_Node_Str"",((OIdentifiable)input).getRecord());
  Object result=cmd.executeInContext(context,params);
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",cmd,result);
  return result;
}",0.8393939393939394
131934,"public OETLComponentFactory(){
  registerSource(OFileSource.class);
  registerSource(OHttpSource.class);
  registerSource(OInputSource.class);
  registerBlock(OCodeBlock.class);
  registerBlock(OLetBlock.class);
  registerBlock(OConsoleBlock.class);
  registerExtractor(OJDBCExtractor.class);
  registerExtractor(ORowExtractor.class);
  registerExtractor(OJsonExtractor.class);
  registerTransformer(OBlockTransformer.class);
  registerTransformer(OCodeTransformer.class);
  registerTransformer(OCSVTransformer.class);
  registerTransformer(OEdgeTransformer.class);
  registerTransformer(OFieldTransformer.class);
  registerTransformer(OJSONTransformer.class);
  registerTransformer(OLinkTransformer.class);
  registerTransformer(OLogTransformer.class);
  registerTransformer(OMergeTransformer.class);
  registerTransformer(OSkipTransformer.class);
  registerTransformer(OVertexTransformer.class);
  registerLoader(OOrientDBLoader.class);
  registerLoader(OOutputLoader.class);
}","public OETLComponentFactory(){
  registerSource(OFileSource.class);
  registerSource(OHttpSource.class);
  registerSource(OInputSource.class);
  registerBlock(OCodeBlock.class);
  registerBlock(OLetBlock.class);
  registerBlock(OConsoleBlock.class);
  registerExtractor(OJDBCExtractor.class);
  registerExtractor(ORowExtractor.class);
  registerExtractor(OJsonExtractor.class);
  registerTransformer(OBlockTransformer.class);
  registerTransformer(OCodeTransformer.class);
  registerTransformer(OCSVTransformer.class);
  registerTransformer(OCommandTransformer.class);
  registerTransformer(OEdgeTransformer.class);
  registerTransformer(OFieldTransformer.class);
  registerTransformer(OJSONTransformer.class);
  registerTransformer(OLinkTransformer.class);
  registerTransformer(OLogTransformer.class);
  registerTransformer(OMergeTransformer.class);
  registerTransformer(OSkipTransformer.class);
  registerTransformer(OVertexTransformer.class);
  registerLoader(OOrientDBLoader.class);
  registerLoader(OOutputLoader.class);
}",0.9750996015936256
131935,"@Override public Object executeTransform(final Object input){
  line++;
  if (skipFrom > -1) {
    if (skipTo > -1) {
      if (line >= skipFrom && line <= skipTo)       return null;
    }
 else     if (line >= skipFrom)     return null;
  }
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (columnNames == null) {
    if (!columnsOnFirstLine)     throw new OTransformException(""String_Node_Str"");
    columnNames=fields;
    for (int i=0; i < columnNames.size(); ++i)     columnNames.set(i,OStringSerializerHelper.getStringContent(columnNames.get(i)));
    return null;
  }
  final ODocument doc=new ODocument();
  for (int i=0; i < columnNames.size() && i < fields.size(); ++i) {
    final String fieldName=columnNames.get(i);
    Object fieldValue=null;
    try {
      final String fieldStringValue=fields.get(i);
      final OType fieldType=columnTypes != null ? columnTypes.get(i) : null;
      if (fieldType != null && fieldType != OType.ANY) {
        fieldValue=OStringSerializerHelper.getStringContent(fieldStringValue);
        try {
          fieldValue=OType.convert(fieldValue,fieldType.getDefaultJavaType());
          doc.field(fieldName,fieldValue);
        }
 catch (        Exception e) {
          processor.getStats().incrementErrors();
          log(""String_Node_Str"",processor.getExtractor().getProgress(),fieldName,i,fieldValue,fieldValue.getClass().getName(),fieldType);
        }
      }
 else       if (fieldStringValue != null && !fieldStringValue.isEmpty()) {
        final char firstChar=fieldStringValue.charAt(0);
        if (firstChar == stringCharacter)         fieldValue=OStringSerializerHelper.getStringContent(fieldStringValue);
 else         if (Character.isDigit(firstChar))         if (fieldStringValue.contains(""String_Node_Str"") || fieldStringValue.contains(""String_Node_Str""))         try {
          fieldValue=Float.parseFloat(fieldStringValue);
        }
 catch (        Exception e) {
          fieldValue=Double.parseDouble(fieldStringValue);
        }
 else         try {
          fieldValue=Integer.parseInt(fieldStringValue);
        }
 catch (        Exception e) {
          fieldValue=Long.parseLong(fieldStringValue);
        }
 else         fieldValue=fieldStringValue;
        if (nullValue != null && nullValue.equals(fieldValue))         continue;
        doc.field(fieldName,fieldValue);
      }
    }
 catch (    Exception e) {
      processor.getStats().incrementErrors();
      debug(""String_Node_Str"",fieldName,fieldValue,e.toString());
    }
  }
  return doc;
}","@Override public Object executeTransform(final Object input){
  line++;
  if (skipFrom > -1) {
    if (skipTo > -1) {
      if (line >= skipFrom && line <= skipTo)       return null;
    }
 else     if (line >= skipFrom)     return null;
  }
  final List<String> fields=OStringSerializerHelper.smartSplit(input.toString(),new char[]{separator},0,-1,false,false,false,false);
  if (columnNames == null) {
    if (!columnsOnFirstLine)     throw new OTransformException(getName() + ""String_Node_Str"");
    columnNames=fields;
    for (int i=0; i < columnNames.size(); ++i)     columnNames.set(i,OStringSerializerHelper.getStringContent(columnNames.get(i)));
    return null;
  }
  final ODocument doc=new ODocument();
  for (int i=0; i < columnNames.size() && i < fields.size(); ++i) {
    final String fieldName=columnNames.get(i);
    Object fieldValue=null;
    try {
      final String fieldStringValue=fields.get(i);
      final OType fieldType=columnTypes != null ? columnTypes.get(i) : null;
      if (fieldType != null && fieldType != OType.ANY) {
        fieldValue=OStringSerializerHelper.getStringContent(fieldStringValue);
        try {
          fieldValue=OType.convert(fieldValue,fieldType.getDefaultJavaType());
          doc.field(fieldName,fieldValue);
        }
 catch (        Exception e) {
          processor.getStats().incrementErrors();
          log(""String_Node_Str"",processor.getExtractor().getProgress(),fieldName,i,fieldValue,fieldValue.getClass().getName(),fieldType);
        }
      }
 else       if (fieldStringValue != null && !fieldStringValue.isEmpty()) {
        final char firstChar=fieldStringValue.charAt(0);
        if (firstChar == stringCharacter)         fieldValue=OStringSerializerHelper.getStringContent(fieldStringValue);
 else         if (Character.isDigit(firstChar))         if (fieldStringValue.contains(""String_Node_Str"") || fieldStringValue.contains(""String_Node_Str""))         try {
          fieldValue=Float.parseFloat(fieldStringValue);
        }
 catch (        Exception e) {
          fieldValue=Double.parseDouble(fieldStringValue);
        }
 else         try {
          fieldValue=Integer.parseInt(fieldStringValue);
        }
 catch (        Exception e) {
          fieldValue=Long.parseLong(fieldStringValue);
        }
 else         fieldValue=fieldStringValue;
        if (nullValue != null && nullValue.equals(fieldValue))         continue;
        doc.field(fieldName,fieldValue);
      }
    }
 catch (    Exception e) {
      processor.getStats().incrementErrors();
      debug(""String_Node_Str"",fieldName,fieldValue,e.toString());
    }
  }
  return doc;
}",0.9977125428898208
131936,"@Override public Object executeTransform(final Object input){
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(""String_Node_Str"" + input + ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  Object result=lookup(joinValue);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinValue);
        linkedV.save();
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
if (directionOut) vertex.addEdge(edgeClass,targetVertex);
 else targetVertex.addEdge(edgeClass,vertex);
}
}
return input;
}","@Override public Object executeTransform(final Object input){
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(getName() + ""String_Node_Str"" + input+ ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  Object result=lookup(joinValue);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinValue);
        linkedV.save();
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
if (directionOut) vertex.addEdge(edgeClass,targetVertex);
 else targetVertex.addEdge(edgeClass,vertex);
}
}
return input;
}",0.980151569830386
131937,"@Override public Object executeTransform(final Object input){
  if (input instanceof ODocument)   return input;
 else   if (input instanceof String)   return new ODocument((String)input);
 else   throw new OTransformException(""String_Node_Str"" + input + ""String_Node_Str""+ input.getClass()+ ""String_Node_Str"");
}","@Override public Object executeTransform(final Object input){
  if (input instanceof ODocument)   return input;
 else   if (input instanceof String)   return new ODocument((String)input);
 else   throw new OTransformException(getName() + ""String_Node_Str"" + input+ ""String_Node_Str""+ input.getClass()+ ""String_Node_Str"");
}",0.9543307086614172
131938,"public OETLPipeline(final OETLProcessor iProcessor,final List<OTransformer> iTransformers,final OLoader iLoader,final OETLProcessor.LOG_LEVELS iLogLevel,final int iMaxRetries){
  logLevel=iLogLevel;
  processor=iProcessor;
  context=(OBasicCommandContext)new OBasicCommandContext(iProcessor.getContext());
  transformers=iTransformers;
  loader=iLoader;
  for (  OTransformer t : transformers)   t.setPipeline(this);
  loader.setPipeline(this);
  maxRetries=iMaxRetries;
}","public OETLPipeline(final OETLProcessor iProcessor,final List<OTransformer> iTransformers,final OLoader iLoader,final OETLProcessor.LOG_LEVELS iLogLevel,final int iMaxRetries){
  logLevel=iLogLevel;
  processor=iProcessor;
  context=new OBasicCommandContext();
  transformers=iTransformers;
  loader=iLoader;
  for (  OTransformer t : transformers)   t.setPipeline(this);
  loader.setPipeline(this);
  maxRetries=iMaxRetries;
}",0.9410456062291436
131939,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   logLevel=OETLProcessor.LOG_LEVELS.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
 else   logLevel=iProcessor.getLogLevel();
  if (iConfiguration.containsField(""String_Node_Str""))   output=(String)iConfiguration.field(""String_Node_Str"");
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  ifExpression=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   logLevel=OETLProcessor.LOG_LEVELS.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
 else   logLevel=iProcessor.getLogLevel();
  if (iConfiguration.containsField(""String_Node_Str""))   output=(String)iConfiguration.field(""String_Node_Str"");
}",0.9076042518397384
131940,"@Override public void execute(){
  if (!skip())   executeBlock();
}","@Override public void execute(){
  if (!skip(null))   executeBlock();
}",0.9710144927536232
131941,"protected void executeSequentially(){
  try {
    begin();
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final OETLPipeline pipeline=new OETLPipeline(this,transformers,loader,logLevel,maxRetries);
    pipeline.begin();
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      pipeline.execute(current);
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,""String_Node_Str"" + e);
  }
}","protected void executeSequentially(){
  try {
    begin();
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final OETLPipeline pipeline=new OETLPipeline(this,transformers,loader,logLevel,maxRetries);
    pipeline.begin();
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      pipeline.execute(current);
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,""String_Node_Str"",e);
  }
}",0.9963302752293578
131942,"public void executeParallel(){
  try {
    begin();
    out(LOG_LEVELS.INFO,""String_Node_Str"",threads.length);
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final LinkedBlockingQueue<OExtractedItem> queue=new LinkedBlockingQueue<OExtractedItem>(threads.length * 500){
      @Override public boolean offer(      OExtractedItem e){
        try {
          put(e);
          return true;
        }
 catch (        InterruptedException ie) {
          Thread.currentThread().interrupt();
        }
        return false;
      }
    }
;
    final AtomicLong counter=new AtomicLong();
    final AtomicBoolean extractionFinished=new AtomicBoolean(false);
    final OETLProcessor processor=this;
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new Thread(new Runnable(){
        @Override public void run(){
          final OETLPipeline pipeline=new OETLPipeline(processor,transformers,loader,logLevel,maxRetries);
          pipeline.begin();
          while (!extractionFinished.get() || counter.get() > 0) {
            try {
              final OExtractedItem content=queue.take();
              try {
                pipeline.execute(content);
              }
  finally {
                counter.decrementAndGet();
              }
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
,""String_Node_Str"" + i);
      threads[i].setDaemon(true);
      threads[i].start();
    }
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      queue.offer(current);
      counter.incrementAndGet();
    }
    extractionFinished.set(true);
    while (counter.get() > 0) {
      out(LOG_LEVELS.INFO,""String_Node_Str"" + counter.get() + ""String_Node_Str"");
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,""String_Node_Str"" + e);
  }
}","public void executeParallel(){
  try {
    begin();
    out(LOG_LEVELS.INFO,""String_Node_Str"",threads.length);
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final LinkedBlockingQueue<OExtractedItem> queue=new LinkedBlockingQueue<OExtractedItem>(threads.length * 500){
      @Override public boolean offer(      OExtractedItem e){
        try {
          put(e);
          return true;
        }
 catch (        InterruptedException ie) {
          Thread.currentThread().interrupt();
        }
        return false;
      }
    }
;
    final AtomicLong counter=new AtomicLong();
    final AtomicBoolean extractionFinished=new AtomicBoolean(false);
    final OETLProcessor processor=this;
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new Thread(new Runnable(){
        @Override public void run(){
          final OETLPipeline pipeline=new OETLPipeline(processor,transformers,loader,logLevel,maxRetries);
          pipeline.begin();
          while (!extractionFinished.get() || counter.get() > 0) {
            try {
              final OExtractedItem content=queue.take();
              try {
                pipeline.execute(content);
              }
  finally {
                counter.decrementAndGet();
              }
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
,""String_Node_Str"" + i);
      threads[i].setDaemon(true);
      threads[i].start();
    }
    while (extractor.hasNext()) {
      final OExtractedItem current=extractor.next();
      queue.offer(current);
      counter.incrementAndGet();
    }
    extractionFinished.set(true);
    while (counter.get() > 0) {
      out(LOG_LEVELS.INFO,""String_Node_Str"" + counter.get() + ""String_Node_Str"");
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(LOG_LEVELS.ERROR,""String_Node_Str"",e);
  }
}",0.9990191270230504
131943,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   logLevel=OETLProcessor.LOG_LEVELS.valueOf((String)iConfiguration.field(""String_Node_Str""));
 else   logLevel=iProcessor.getLogLevel();
  if (iConfiguration.containsField(""String_Node_Str""))   output=(String)iConfiguration.field(""String_Node_Str"");
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   logLevel=OETLProcessor.LOG_LEVELS.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
 else   logLevel=iProcessor.getLogLevel();
  if (iConfiguration.containsField(""String_Node_Str""))   output=(String)iConfiguration.field(""String_Node_Str"");
}",0.974981046247157
131944,"@Override public Object executeTransform(final Object input){
  if (input instanceof ODocument) {
    if (setOperation) {
      if (sqlFilter == null)       sqlFilter=new OSQLFilter(expression,context,null);
      final Object newValue=sqlFilter.evaluate((ODocument)input,null,context);
      ((ODocument)input).field(fieldName,newValue);
      log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,newValue,input);
    }
 else {
      final Object prev=((ODocument)input).removeField(fieldName);
      log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,prev,input);
    }
  }
  return input;
}","@Override public Object executeTransform(final Object input){
  if (input instanceof OIdentifiable) {
    final ORecord rec=((OIdentifiable)input).getRecord();
    if (rec instanceof ODocument) {
      final ODocument doc=(ODocument)rec;
      if (setOperation) {
        if (sqlFilter == null)         sqlFilter=new OSQLFilter(expression,context,null);
        final Object newValue=sqlFilter.evaluate(doc,null,context);
        doc.field(fieldName,newValue);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,newValue,doc);
      }
 else {
        final Object prev=doc.removeField(fieldName);
        log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",fieldName,prev,doc);
      }
    }
  }
  return input;
}",0.7902149740548554
131945,"@Override public Object executeTransform(final Object input){
  OCommandRequest cmd=null;
  if (language.equals(""String_Node_Str"")) {
    cmd=new OCommandSQL(command);
    log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",command);
  }
 else   if (language.equals(""String_Node_Str"")) {
    cmd=new OCommandGremlin(command);
  }
 else   throw new OTransformException(getName() + ""String_Node_Str"" + language+ ""String_Node_Str"");
  Object result=pipeline.getDocumentDatabase().command(cmd).execute();
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",cmd,result);
  return result;
}","@Override public Object executeTransform(final Object input){
  OCommandRequest cmd=null;
  if (language.equals(""String_Node_Str"")) {
    cmd=new OCommandSQL(command);
    log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",command);
  }
 else   if (language.equals(""String_Node_Str"")) {
    cmd=new OCommandGremlin(command);
  }
 else   throw new OTransformException(getName() + ""String_Node_Str"" + language+ ""String_Node_Str"");
  cmd.setContext(context);
  Object result=pipeline.getDocumentDatabase().command(cmd).execute();
  log(OETLProcessor.LOG_LEVELS.DEBUG,""String_Node_Str"",cmd,result);
  return result;
}",0.9775561097256856
131946,"public void executeParallel(){
  try {
    begin();
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final LinkedBlockingQueue<Object> queue=new LinkedBlockingQueue<Object>(threads.length * 500){
      @Override public boolean offer(      Object e){
        try {
          put(e);
          return true;
        }
 catch (        InterruptedException ie) {
          Thread.currentThread().interrupt();
        }
        return false;
      }
    }
;
    final AtomicLong counter=new AtomicLong();
    final AtomicBoolean extractionFinished=new AtomicBoolean(false);
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new Thread(new Runnable(){
        @Override public void run(){
          final OETLPipeline pipeline=new OETLPipeline(transformers,loader,context);
          pipeline.begin();
          while (!extractionFinished.get() || counter.get() > 0) {
            try {
              final Object content=queue.take();
              try {
                pipeline.execute(content);
              }
  finally {
                counter.decrementAndGet();
              }
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
,""String_Node_Str"" + i);
      threads[i].start();
    }
    while (extractor.hasNext()) {
      final Object current=extractor.next();
      queue.offer(current);
      counter.incrementAndGet();
    }
    extractionFinished.set(true);
    while (counter.get() > 0) {
      out(true,""String_Node_Str"" + counter.get());
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(false,""String_Node_Str"" + e);
  }
}","public void executeParallel(){
  try {
    begin();
    out(true,""String_Node_Str"",threads.length);
    if (source != null) {
      final Reader reader=source.read();
      if (reader != null)       extractor.extract(reader);
    }
    final LinkedBlockingQueue<Object> queue=new LinkedBlockingQueue<Object>(threads.length * 500){
      @Override public boolean offer(      Object e){
        try {
          put(e);
          return true;
        }
 catch (        InterruptedException ie) {
          Thread.currentThread().interrupt();
        }
        return false;
      }
    }
;
    final AtomicLong counter=new AtomicLong();
    final AtomicBoolean extractionFinished=new AtomicBoolean(false);
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new Thread(new Runnable(){
        @Override public void run(){
          final OETLPipeline pipeline=new OETLPipeline(transformers,loader,context);
          pipeline.begin();
          while (!extractionFinished.get() || counter.get() > 0) {
            try {
              final Object content=queue.take();
              try {
                pipeline.execute(content);
              }
  finally {
                counter.decrementAndGet();
              }
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
,""String_Node_Str"" + i);
      threads[i].start();
    }
    while (extractor.hasNext()) {
      final Object current=extractor.next();
      queue.offer(current);
      counter.incrementAndGet();
    }
    extractionFinished.set(true);
    while (counter.get() > 0) {
      out(true,""String_Node_Str"" + counter.get() + ""String_Node_Str"");
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
    }
    end();
  }
 catch (  OETLProcessHaltedException e) {
    out(false,""String_Node_Str"" + e);
  }
}",0.9814915623298855
131947,"public void load(final Object input,OCommandContext context){
  if (input == null)   return;
  if (input instanceof OrientVertex) {
    final OrientVertex v=(OrientVertex)input;
    if (clusterName != null)     v.save(clusterName);
 else     v.save();
  }
 else   if (input instanceof ODocument) {
    final ODocument doc=(ODocument)input;
    if (className != null)     doc.setClassName(className);
    if (clusterName != null)     doc.save(clusterName);
 else     doc.save();
  }
  progress++;
  if (batchCommit > 0) {
    if (batchCounter > batchCommit) {
      if (dbType == DB_TYPE.DOCUMENT) {
        final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
        documentDatabase.commit();
        documentDatabase.begin();
      }
 else {
        pipeline.getGraphDatabase().commit();
      }
    }
    batchCounter++;
  }
}","public void load(final Object input,OCommandContext context){
  if (input == null)   return;
  if (input instanceof OrientVertex) {
    final OrientVertex v=(OrientVertex)input;
    if (clusterName != null)     v.save(clusterName);
 else     v.save();
  }
 else   if (input instanceof ODocument) {
    final ODocument doc=(ODocument)input;
    if (className != null)     doc.setClassName(className);
    if (clusterName != null)     doc.save(clusterName);
 else     doc.save();
  }
  progress.incrementAndGet();
  if (batchCommit > 0) {
    if (batchCounter > batchCommit) {
      if (dbType == DB_TYPE.DOCUMENT) {
        final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
        documentDatabase.commit();
        documentDatabase.begin();
      }
 else {
        pipeline.getGraphDatabase().commit();
      }
    }
    batchCounter++;
  }
}",0.9883720930232558
131948,"@Override public void load(final Object input,final OCommandContext context){
  progress++;
  System.out.println(input);
}","@Override public void load(final Object input,final OCommandContext context){
  progress.incrementAndGet();
  System.out.println(input);
}",0.9230769230769232
131949,"@Override public Object executeTransform(final Object input){
  if (graph == null) {
    graph=pipeline.getGraphDatabase();
    final OClass cls=graph.getEdgeType(edgeClass);
    if (cls == null)     graph.createEdgeType(edgeClass);
  }
  Object joinValue;
  final OrientVertex vertex;
  if (input instanceof ODocument) {
    joinValue=((ODocument)input).field(joinFieldName);
    vertex=graph.getVertex(input);
  }
 else {
    joinValue=((OrientVertex)input).getProperty(joinFieldName);
    vertex=(OrientVertex)input;
  }
  if (joinValue != null) {
    Object result=null;
    if (sqlQuery == null && index == null) {
      if (lookup.toUpperCase().startsWith(""String_Node_Str""))       sqlQuery=new OSQLSynchQuery<OrientVertex>(lookup);
 else       index=pipeline.getDocumentDatabase().getMetadata().getIndexManager().getIndex(lookup);
    }
    if (sqlQuery != null)     result=graph.command(sqlQuery).execute(joinValue);
 else {
      final OType idxFieldType=index.getDefinition().getTypes()[0];
      joinValue=idxFieldType.convert(joinValue,idxFieldType.getDefaultJavaType());
      result=index.get(joinValue);
    }
    if (result != null) {
      if (result instanceof Collection<?>) {
        if (!((Collection)result).isEmpty())         result=((Collection)result).iterator().next();
 else         result=null;
      }
      if (result != null) {
        final OrientVertex targetVertex=graph.getVertex(result);
        vertex.addEdge(edgeClass,targetVertex);
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
          linkedV.setProperty(lookupParts[1],joinValue);
          linkedV.save();
          result=linkedV;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
}
return input;
}","@Override public Object executeTransform(final Object input){
  if (graph == null) {
    graph=pipeline.getGraphDatabase();
    final OClass cls=graph.getEdgeType(edgeClass);
    if (cls == null)     graph.createEdgeType(edgeClass);
  }
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(""String_Node_Str"" + input + ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  if (joinValue != null) {
    Object result=null;
    if (sqlQuery == null && index == null) {
      if (lookup.toUpperCase().startsWith(""String_Node_Str""))       sqlQuery=new OSQLSynchQuery<OrientVertex>(lookup);
 else       index=pipeline.getDocumentDatabase().getMetadata().getIndexManager().getIndex(lookup);
    }
    if (sqlQuery != null)     result=graph.command(sqlQuery).execute(joinValue);
 else {
      final OType idxFieldType=index.getDefinition().getTypes()[0];
      joinValue=idxFieldType.convert(joinValue,idxFieldType.getDefaultJavaType());
      result=index.get(joinValue);
    }
    if (result != null) {
      if (result instanceof Collection<?>) {
        if (!((Collection)result).isEmpty())         result=((Collection)result).iterator().next();
 else         result=null;
      }
      if (result != null) {
        final OrientVertex targetVertex=graph.getVertex(result);
        vertex.addEdge(edgeClass,targetVertex);
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
          linkedV.setProperty(lookupParts[1],joinValue);
          linkedV.save();
          result=linkedV;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
}
return input;
}",0.8818181818181818
131950,"protected void log(final String iText,Object... iArgs){
  if (verbose)   System.out.println(getName() + ""String_Node_Str"" + String.format(iText,iArgs));
}","protected void log(final String iText,final Object... iArgs){
  if (verbose)   System.out.println(getName() + ""String_Node_Str"" + String.format(iText,iArgs));
}",0.9808917197452228
131951,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   verbose=(Boolean)iConfiguration.field(""String_Node_Str"");
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   verbose=(Boolean)iConfiguration.field(""String_Node_Str"");
 else   verbose=iProcessor.isVerbose();
}",0.9584199584199584
131952,"protected void checkTypeCompatibility(final OETLComponent iCurrentComponent,final OETLComponent iLastComponent){
  final String out;
  final List<String> ins;
  try {
    out=iLastComponent.getConfiguration().field(""String_Node_Str"");
    final Class outClass=getClassByName(iLastComponent,out);
    ins=iCurrentComponent.getConfiguration().field(""String_Node_Str"");
    for (    String in : ins) {
      final Class inClass=getClassByName(iCurrentComponent,in);
      if (inClass.isAssignableFrom(outClass)) {
        return;
      }
    }
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"" + iLastComponent.getName() + ""String_Node_Str""+ iCurrentComponent.getName()+ ""String_Node_Str"",e);
  }
  throw new OConfigurationException(""String_Node_Str"" + iCurrentComponent.getName() + ""String_Node_Str""+ ins+ ""String_Node_Str""+ iLastComponent.getName()+ ""String_Node_Str""+ out);
}","protected void checkTypeCompatibility(final OETLComponent iCurrentComponent,final OETLComponent iLastComponent){
  final String out;
  final List<String> ins;
  try {
    out=iLastComponent.getConfiguration().field(""String_Node_Str"");
    if (out == null)     return;
    ins=iCurrentComponent.getConfiguration().field(""String_Node_Str"");
    if (ins == null)     return;
    final Class outClass=getClassByName(iLastComponent,out);
    for (    String in : ins) {
      final Class inClass=getClassByName(iCurrentComponent,in);
      if (inClass.isAssignableFrom(outClass)) {
        return;
      }
    }
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"" + iLastComponent.getName() + ""String_Node_Str""+ iCurrentComponent.getName()+ ""String_Node_Str"",e);
  }
  throw new OConfigurationException(""String_Node_Str"" + iCurrentComponent.getName() + ""String_Node_Str""+ ins+ ""String_Node_Str""+ iLastComponent.getName()+ ""String_Node_Str""+ out);
}",0.8897136797454931
131953,"@Override public void end(){
  for (  OTransformer t : transformers)   t.end();
  source.end();
  extractor.end();
  loader.end();
  for (  OBlock t : endBlocks) {
    t.begin();
    t.execute();
    t.end();
  }
  elapsed=System.currentTimeMillis() - startTime;
  if (dumpTask != null) {
    dumpTask.cancel();
  }
  out(false,""String_Node_Str"");
  dumpProgress(false);
}","@Override public void end(){
  for (  OTransformer t : transformers)   t.end();
  if (source != null)   source.end();
  extractor.end();
  loader.end();
  for (  OBlock t : endBlocks) {
    t.begin();
    t.execute();
    t.end();
  }
  elapsed=System.currentTimeMillis() - startTime;
  if (dumpTask != null) {
    dumpTask.cancel();
  }
  out(false,""String_Node_Str"");
  dumpProgress(false);
}",0.9712793733681462
131954,"@Override public void begin(){
  out(false,""String_Node_Str"");
  final int dumpEveryMs=(Integer)context.getVariable(""String_Node_Str"");
  if (dumpEveryMs > 0) {
    dumpTask=new TimerTask(){
      @Override public void run(){
        dumpProgress(true);
      }
    }
;
    Orient.instance().getTimer().schedule(dumpTask,dumpEveryMs,dumpEveryMs);
    startTime=System.currentTimeMillis();
  }
  for (  OBlock t : beginBlocks) {
    t.begin();
    t.execute();
    t.end();
  }
  source.begin();
  extractor.begin();
  loader.begin();
  for (  OTransformer t : transformers)   t.begin();
}","@Override public void begin(){
  out(false,""String_Node_Str"");
  final int dumpEveryMs=(Integer)context.getVariable(""String_Node_Str"");
  if (dumpEveryMs > 0) {
    dumpTask=new TimerTask(){
      @Override public void run(){
        dumpProgress(true);
      }
    }
;
    Orient.instance().getTimer().schedule(dumpTask,dumpEveryMs,dumpEveryMs);
    startTime=System.currentTimeMillis();
  }
  for (  OBlock t : beginBlocks) {
    t.begin();
    t.execute();
    t.end();
  }
  if (source != null)   source.begin();
  extractor.begin();
  loader.begin();
  for (  OTransformer t : transformers)   t.begin();
}",0.9816360601001668
131955,"public OETLProcessor(final Collection<ODocument> iBeginBlocks,final ODocument iSource,final ODocument iExtractor,final Collection<ODocument> iTransformers,final ODocument iLoader,final Collection<ODocument> iEndBlocks,final OBasicCommandContext iContext){
  context=iContext;
  try {
    String name;
    beginBlocks=new ArrayList<OBlock>();
    if (iBeginBlocks != null)     for (    ODocument block : iBeginBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      beginBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
    }
    name=iSource.fieldNames()[0];
    source=factory.getSource(name);
    configureComponent(source,(ODocument)iSource.field(name),iContext);
    name=iExtractor.fieldNames()[0];
    extractor=factory.getExtractor(name);
    configureComponent(extractor,(ODocument)iExtractor.field(name),iContext);
    name=iLoader.fieldNames()[0];
    loader=factory.getLoader(name);
    configureComponent(loader,(ODocument)iLoader.field(name),iContext);
    transformers=new ArrayList<OTransformer>();
    for (    ODocument t : iTransformers) {
      name=t.fieldNames()[0];
      final OTransformer tr=factory.getTransformer(name);
      transformers.add(tr);
      configureComponent(tr,(ODocument)t.field(name),iContext);
    }
    endBlocks=new ArrayList<OBlock>();
    if (iEndBlocks != null)     for (    ODocument block : iEndBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      endBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
    }
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"",e);
  }
}","public OETLProcessor(final Collection<ODocument> iBeginBlocks,final ODocument iSource,final ODocument iExtractor,final Collection<ODocument> iTransformers,final ODocument iLoader,final Collection<ODocument> iEndBlocks,final OBasicCommandContext iContext){
  context=iContext;
  try {
    String name;
    beginBlocks=new ArrayList<OBlock>();
    if (iBeginBlocks != null)     for (    ODocument block : iBeginBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      beginBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
      b.execute();
    }
    if (iSource != null) {
      name=iSource.fieldNames()[0];
      source=factory.getSource(name);
      configureComponent(source,(ODocument)iSource.field(name),iContext);
    }
    name=iExtractor.fieldNames()[0];
    extractor=factory.getExtractor(name);
    configureComponent(extractor,(ODocument)iExtractor.field(name),iContext);
    name=iLoader.fieldNames()[0];
    loader=factory.getLoader(name);
    configureComponent(loader,(ODocument)iLoader.field(name),iContext);
    transformers=new ArrayList<OTransformer>();
    for (    ODocument t : iTransformers) {
      name=t.fieldNames()[0];
      final OTransformer tr=factory.getTransformer(name);
      transformers.add(tr);
      configureComponent(tr,(ODocument)t.field(name),iContext);
    }
    endBlocks=new ArrayList<OBlock>();
    if (iEndBlocks != null)     for (    ODocument block : iEndBlocks) {
      name=block.fieldNames()[0];
      final OBlock b=factory.getBlock(name);
      endBlocks.add(b);
      configureComponent(b,(ODocument)block.field(name),iContext);
    }
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"",e);
  }
}",0.9832078749276202
131956,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  name=iConfiguration.field(""String_Node_Str"");
  expression=new OSQLFilter((String)iConfiguration.field(""String_Node_Str""),iContext,null);
  executeBlock();
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  name=iConfiguration.field(""String_Node_Str"");
  expression=new OSQLFilter((String)iConfiguration.field(""String_Node_Str""),iContext,null);
}",0.9723076923076924
131957,"@Override public void configure(OETLProcessor iProcessor,ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  driverClass=resolveVariable((String)iConfiguration.field(""String_Node_Str""));
  url=resolveVariable((String)iConfiguration.field(""String_Node_Str""));
  userName=resolveVariable((String)iConfiguration.field(""String_Node_Str""));
  userPassword=resolveVariable((String)iConfiguration.field(""String_Node_Str""));
  query=resolveVariable((String)iConfiguration.field(""String_Node_Str""));
  queryCount=resolveVariable((String)iConfiguration.field(""String_Node_Str""));
  try {
    Class.forName(driverClass).newInstance();
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"" + driverClass + ""String_Node_Str"",e);
  }
  try {
    conn=DriverManager.getConnection(url,userName,userPassword);
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"" + url + ""String_Node_Str""+ userName+ ""String_Node_Str"",e);
  }
}","@Override public void configure(OETLProcessor iProcessor,ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  driverClass=(String)resolve(iConfiguration.field(""String_Node_Str""));
  url=(String)resolve(iConfiguration.field(""String_Node_Str""));
  userName=(String)resolve(iConfiguration.field(""String_Node_Str""));
  userPassword=(String)resolve(iConfiguration.field(""String_Node_Str""));
  query=(String)resolve(iConfiguration.field(""String_Node_Str""));
  queryCount=(String)resolve(iConfiguration.field(""String_Node_Str""));
  try {
    Class.forName(driverClass).newInstance();
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"" + driverClass + ""String_Node_Str"",e);
  }
  try {
    conn=DriverManager.getConnection(url,userName,userPassword);
  }
 catch (  Exception e) {
    throw new OConfigurationException(""String_Node_Str"" + url + ""String_Node_Str""+ userName+ ""String_Node_Str"",e);
  }
}",0.8813056379821959
131958,"@Override public Object next(){
  if (!hasNext())   throw new NoSuchElementException(""String_Node_Str"");
  try {
    final String line=bReader.readLine();
    current+=line.length();
    currentRow++;
    if (bReader.ready())     current++;
    return line;
  }
 catch (  IOException e) {
    throw new OExtractorException(e);
  }
}","@Override public Object next(){
  if (!hasNext())   throw new NoSuchElementException(""String_Node_Str"");
  try {
    final String line=bReader.readLine();
    current++;
    return line;
  }
 catch (  IOException e) {
    throw new OExtractorException(e);
  }
}",0.8802698145025295
131959,"public void configure(OETLProcessor iProcessor,ODocument iConfiguration,OBasicCommandContext iContext){
  path=resolveVariable((String)iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   lockFile=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   skipFirst=Long.parseLong((String)iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   skipLast=Long.parseLong((String)iConfiguration.field(""String_Node_Str""));
  if (path instanceof String)   path=new File((String)path);
  if (path instanceof File) {
    final File file=(File)path;
    fileName=file.getName();
  }
}","public void configure(OETLProcessor iProcessor,ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  path=resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   lockFile=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   skipFirst=Long.parseLong((String)iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   skipLast=Long.parseLong((String)iConfiguration.field(""String_Node_Str""));
  if (path instanceof String)   path=new File((String)path);
  if (path instanceof File) {
    final File file=(File)path;
    fileName=file.getName();
  }
}",0.949550794747754
131960,"@Override public Object transform(final Object input){
  if (input == null)   return null;
  if (skip(input))   return input;
 else   return executeTransform(input);
}","@Override public Object transform(final Object input){
  if (input == null)   return null;
  if (skip(input))   return input;
 else {
    context.setVariable(""String_Node_Str"",input);
    return executeTransform(input);
  }
}",0.8061224489795918
131961,"@Override protected Object executeTransform(final Object input){
  block.execute();
  return input;
}","@Override protected Object executeTransform(final Object input){
  context.setVariable(""String_Node_Str"",input);
  block.execute();
  return input;
}",0.808
131962,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  fieldName=resolveVariable((String)iConfiguration.field(""String_Node_Str""));
  expression=iConfiguration.field(""String_Node_Str"");
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  fieldName=(String)resolve(iConfiguration.field(""String_Node_Str""));
  expression=iConfiguration.field(""String_Node_Str"");
}",0.9572368421052632
131963,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + stringArray2Json(ACTION.values()) + ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + stringArray2Json(ACTION.values()) + ""String_Node_Str""+ ""String_Node_Str"");
}",0.9640831758034026
131964,"@Override public Object executeTransform(final Object input){
  Object joinValue=((ODocument)input).field(joinFieldName);
  if (joinValue != null) {
    Object result=null;
    if (sqlQuery == null && index == null) {
      if (lookup.toUpperCase().startsWith(""String_Node_Str""))       sqlQuery=new OSQLSynchQuery<ODocument>(lookup);
 else       index=db.getMetadata().getIndexManager().getIndex(lookup);
    }
    if (sqlQuery != null)     result=db.query(sqlQuery,joinValue);
 else {
      final OType idxFieldType=index.getDefinition().getTypes()[0];
      joinValue=idxFieldType.convert(joinValue,idxFieldType.getDefaultJavaType());
      result=index.get(joinValue);
    }
    if (result != null) {
      if (linkFieldType != null) {
        if (linkFieldType == OType.LINK) {
          if (result instanceof Collection<?>) {
            if (!((Collection)result).isEmpty())             result=((Collection)result).iterator().next();
 else             result=null;
          }
        }
 else         if (linkFieldType == OType.LINKSET) {
          if (!(result instanceof Collection)) {
            final Set<OIdentifiable> res=new HashSet<OIdentifiable>();
            res.add((OIdentifiable)result);
            result=res;
          }
        }
 else         if (linkFieldType == OType.LINKLIST) {
          if (!(result instanceof Collection)) {
            final List<OIdentifiable> res=new ArrayList<OIdentifiable>();
            res.add((OIdentifiable)result);
            result=res;
          }
        }
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final ODocument linkedDoc=new ODocument(lookupParts[0]);
          linkedDoc.field(lookupParts[1],joinValue);
          linkedDoc.save();
          result=linkedDoc;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  processor.out(true,""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
processor.out(true,""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
 else ((ODocument)input).field(linkFieldName,result);
}
return input;
}","@Override public Object executeTransform(final Object input){
  Object joinRuntimeValue=null;
  if (joinFieldName != null)   joinRuntimeValue=((ODocument)input).field(joinFieldName);
 else   if (joinValue != null)   joinRuntimeValue=resolve(joinValue);
  if (joinRuntimeValue != null) {
    Object result=null;
    if (sqlQuery == null && index == null) {
      if (lookup.toUpperCase().startsWith(""String_Node_Str""))       sqlQuery=new OSQLSynchQuery<ODocument>(lookup);
 else       index=db.getMetadata().getIndexManager().getIndex(lookup);
    }
    if (sqlQuery != null)     result=db.query(sqlQuery,joinRuntimeValue);
 else {
      final OType idxFieldType=index.getDefinition().getTypes()[0];
      joinRuntimeValue=idxFieldType.convert(joinRuntimeValue,idxFieldType.getDefaultJavaType());
      result=index.get(joinRuntimeValue);
    }
    if (result != null) {
      if (linkFieldType != null) {
        if (linkFieldType == OType.LINK) {
          if (result instanceof Collection<?>) {
            if (!((Collection)result).isEmpty())             result=((Collection)result).iterator().next();
 else             result=null;
          }
        }
 else         if (linkFieldType == OType.LINKSET) {
          if (!(result instanceof Collection)) {
            final Set<OIdentifiable> res=new HashSet<OIdentifiable>();
            res.add((OIdentifiable)result);
            result=res;
          }
        }
 else         if (linkFieldType == OType.LINKLIST) {
          if (!(result instanceof Collection)) {
            final List<OIdentifiable> res=new ArrayList<OIdentifiable>();
            res.add((OIdentifiable)result);
            result=res;
          }
        }
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final ODocument linkedDoc=new ODocument(lookupParts[0]);
          linkedDoc.field(lookupParts[1],joinRuntimeValue);
          linkedDoc.save();
          result=linkedDoc;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  processor.out(true,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
processor.out(true,""String_Node_Str"",getName(),joinRuntimeValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinRuntimeValue + ""String_Node_Str"");
}
}
 else ((ODocument)input).field(linkFieldName,result);
}
return input;
}",0.9614160700079556
131965,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  joinFieldName=iConfiguration.field(""String_Node_Str"");
  linkFieldName=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   linkFieldType=OType.valueOf((String)iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   lookup=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   unresolvedLinkAction=ACTION.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  db=processor.getDocumentDatabase();
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  joinFieldName=iConfiguration.field(""String_Node_Str"");
  joinValue=iConfiguration.field(""String_Node_Str"");
  linkFieldName=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   linkFieldType=OType.valueOf((String)iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   lookup=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   unresolvedLinkAction=ACTION.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  db=processor.getDocumentDatabase();
}",0.9648774022531478
131966,"public void load(final Object input,OCommandContext context){
  if (input == null)   return;
  if (input instanceof OrientVertex) {
    final OrientVertex v=(OrientVertex)input;
    if (clusterName != null)     v.save(clusterName);
 else     v.save();
  }
 else   if (input instanceof ODocument) {
    final ODocument doc=(ODocument)input;
    if (className != null)     doc.setClassName(className);
    if (clusterName != null)     doc.save(clusterName);
 else     doc.save();
  }
  progress.incrementAndGet();
  if (batchCommit > 0) {
    if (batchCounter > batchCommit) {
      if (dbType == DB_TYPE.DOCUMENT) {
        final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
        documentDatabase.commit();
        documentDatabase.begin();
      }
 else {
        pipeline.getGraphDatabase().commit();
      }
    }
    batchCounter++;
  }
}","public void load(final Object input,OCommandContext context){
  if (input == null)   return;
  if (tx && dbType == DB_TYPE.DOCUMENT) {
    final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
    if (!documentDatabase.getTransaction().isActive())     documentDatabase.begin();
  }
  if (input instanceof OrientVertex) {
    final OrientVertex v=(OrientVertex)input;
    if (clusterName != null)     v.save(clusterName);
 else     v.save();
  }
 else   if (input instanceof ODocument) {
    final ODocument doc=(ODocument)input;
    if (className != null)     doc.setClassName(className);
    if (clusterName != null)     doc.save(clusterName);
 else     doc.save();
  }
  progress.incrementAndGet();
  if (batchCommit > 0) {
    if (batchCounter > batchCommit) {
      if (dbType == DB_TYPE.DOCUMENT) {
        final ODatabaseDocumentTx documentDatabase=pipeline.getDocumentDatabase();
        documentDatabase.commit();
        documentDatabase.begin();
      }
 else {
        pipeline.getGraphDatabase().commit();
      }
      batchCounter=0;
    }
 else     batchCounter++;
  }
}",0.2522796352583586
131967,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   verbose=(Boolean)iConfiguration.field(""String_Node_Str"");
 else   verbose=iProcessor.isVerbose();
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   verbose=(Boolean)iConfiguration.field(""String_Node_Str"");
 else   verbose=iProcessor.isVerbose();
  if (iConfiguration.containsField(""String_Node_Str""))   output=(String)iConfiguration.field(""String_Node_Str"");
}",0.8986547085201794
131968,"@Override public Object transform(final Object input){
  if (input == null)   return null;
  if (skip(input))   return input;
 else {
    context.setVariable(""String_Node_Str"",input);
    return executeTransform(input);
  }
}","@Override public Object transform(final Object input){
  if (input == null)   return null;
  if (!skip(input)) {
    context.setVariable(""String_Node_Str"",input);
    final Object result=executeTransform(input);
    if (output == null)     return result;
    context.setVariable(output,result);
  }
  return input;
}",0.7245841035120147
131969,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str"");
}",0.7285714285714285
131970,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.7992700729927007
131971,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.6927374301675978
131972,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + stringArray2Json(ACTION.values()) + ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.6323268206039077
131973,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.7648902821316614
131974,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + stringArray2Json(ACTION.values()) + ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.5741935483870968
131975,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str"");
}",0.7285714285714285
131976,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + stringArray2Json(ACTION.values()) + ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.7035573122529645
131977,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.7648902821316614
131978,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.7648902821316614
131979,"@Override public Object executeTransform(final Object input){
  if (graph == null)   graph=pipeline.getGraphDatabase();
  vertexClass=(String)resolve(vertexClass);
  if (vertexClass != null) {
    final OClass cls=graph.getVertexType(vertexClass);
    if (cls == null)     graph.createVertexType(vertexClass);
  }
  final OrientVertex v=graph.getVertex(input);
  if (vertexClass != null)   v.setProperty(""String_Node_Str"",vertexClass);
  return v;
}","@Override public Object executeTransform(final Object input){
  if (graph == null)   graph=pipeline.getGraphDatabase();
  vertexClass=(String)resolve(vertexClass);
  if (vertexClass != null) {
    final OClass cls=graph.getVertexType(vertexClass);
    if (cls == null)     graph.createVertexType(vertexClass);
  }
  final OrientVertex v=graph.getVertex(input);
  if (v == null)   return null;
  if (vertexClass != null)   v.setProperty(""String_Node_Str"",vertexClass);
  return v;
}",0.9655913978494624
131980,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=iConfiguration.field(""String_Node_Str"");
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   verbose=iConfiguration.field(""String_Node_Str"");
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  processor=iProcessor;
  context=iContext;
  final String ifExpression=(String)resolve(iConfiguration.field(""String_Node_Str""));
  if (ifExpression != null)   ifFilter=new OSQLFilter(ifExpression,iContext,null);
  if (iConfiguration.containsField(""String_Node_Str""))   verbose=(Boolean)iConfiguration.field(""String_Node_Str"");
}",0.9709821428571428
131981,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists()) {
    documentDatabase.open(dbUser,dbPassword);
  }
 else {
    if (dbAutoCreate) {
      documentDatabase.create();
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
    }
  }
break;
case GRAPH:
graphDatabase=new OrientGraphFactory(dbURL).setTransactional(tx).get();
documentDatabase=graphDatabase.getRawGraph();
break;
}
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   dbURL=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbUser=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbPassword=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   dbType=DB_TYPE.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  if (iConfiguration.containsField(""String_Node_Str""))   tx=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   batchCommit=(Integer)iConfiguration.field(""String_Node_Str"");
  clusterName=iConfiguration.field(""String_Node_Str"");
  className=iConfiguration.field(""String_Node_Str"");
  indexes=iConfiguration.field(""String_Node_Str"");
switch (dbType) {
case DOCUMENT:
    documentDatabase=new ODatabaseDocumentTx(dbURL);
  if (documentDatabase.exists()) {
    documentDatabase.open(dbUser,dbPassword);
  }
 else {
    if (dbAutoCreate) {
      documentDatabase.create();
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + dbURL + ""String_Node_Str"");
    }
  }
break;
case GRAPH:
graphDatabase=new OrientGraphFactory(dbURL).setTransactional(tx).get();
documentDatabase=graphDatabase.getRawGraph();
break;
}
}",0.9941060903732808
131982,"public void configure(OETLProcessor iProcessor,ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  path=resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   lockFile=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   skipFirst=Long.parseLong((String)iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   skipLast=Long.parseLong((String)iConfiguration.field(""String_Node_Str""));
  if (path instanceof String)   path=new File((String)path);
  if (path instanceof File) {
    final File file=(File)path;
    if (!file.exists())     throw new OSourceException(""String_Node_Str"" + path + ""String_Node_Str"");
    fileName=file.getName();
  }
}","public void configure(OETLProcessor iProcessor,ODocument iConfiguration,OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  path=resolve(iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   lockFile=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   skipFirst=Long.parseLong((String)iConfiguration.field(""String_Node_Str""));
  if (iConfiguration.containsField(""String_Node_Str""))   skipLast=Long.parseLong((String)iConfiguration.field(""String_Node_Str""));
  if (path instanceof String)   path=new File((String)path);
  if (path instanceof File) {
    final File file=(File)path;
    if (!file.exists())     throw new OSourceException(""String_Node_Str"" + path + ""String_Node_Str"");
    fileName=file.getName();
  }
}",0.9947027663331371
131983,"@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   separator=iConfiguration.field(""String_Node_Str"").toString().charAt(0);
  if (iConfiguration.containsField(""String_Node_Str""))   columnsOnFirstLine=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str"")) {
    final List<String> columns=iConfiguration.field(""String_Node_Str"");
    columnNames=new ArrayList<String>(columns.size());
    columnTypes=new ArrayList<OType>(columns.size());
    for (    String c : columns) {
      final String[] parts=c.split(""String_Node_Str"");
      columnNames.add(parts[0]);
      if (parts.length > 1)       columnTypes.add(OType.valueOf(parts[1].toUpperCase()));
 else       columnTypes.add(OType.ANY);
    }
  }
  if (iConfiguration.containsField(""String_Node_Str""))   skipFrom=((Number)iConfiguration.field(""String_Node_Str"")).longValue();
  if (iConfiguration.containsField(""String_Node_Str""))   skipTo=((Number)iConfiguration.field(""String_Node_Str"")).longValue();
  if (iConfiguration.containsField(""String_Node_Str""))   nullValue=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   stringCharacter=iConfiguration.field(""String_Node_Str"").toString().charAt(0);
}","@Override public void configure(final OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  if (iConfiguration.containsField(""String_Node_Str""))   separator=iConfiguration.field(""String_Node_Str"").toString().charAt(0);
  if (iConfiguration.containsField(""String_Node_Str""))   columnsOnFirstLine=(Boolean)iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str"")) {
    final List<String> columns=iConfiguration.field(""String_Node_Str"");
    columnNames=new ArrayList<String>(columns.size());
    columnTypes=new ArrayList<OType>(columns.size());
    for (    String c : columns) {
      final String[] parts=c.split(""String_Node_Str"");
      columnNames.add(parts[0]);
      if (parts.length > 1)       columnTypes.add(OType.valueOf(parts[1].toUpperCase()));
 else       columnTypes.add(OType.ANY);
    }
  }
  if (iConfiguration.containsField(""String_Node_Str""))   skipFrom=((Number)iConfiguration.field(""String_Node_Str"")).longValue();
  if (iConfiguration.containsField(""String_Node_Str""))   skipTo=((Number)iConfiguration.field(""String_Node_Str"")).longValue();
  if (iConfiguration.containsField(""String_Node_Str""))   nullValue=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   stringCharacter=iConfiguration.field(""String_Node_Str"").toString().charAt(0);
}",0.9968717413972888
131984,"public void begin(){
  for (  OTransformer t : transformers)   t.begin();
  loader.begin();
}","public void begin(){
  loader.begin();
  for (  OTransformer t : transformers)   t.begin();
}",0.8064516129032258
131985,"protected boolean skip(final Object input){
  if (ifFilter != null && input instanceof ODocument) {
    final Object result=ifFilter.evaluate((ODocument)input,null,context);
    if (!(result instanceof Boolean))     throw new OConfigurationException(""String_Node_Str"" + getName() + ""String_Node_Str""+ result+ ""String_Node_Str"");
    return !((Boolean)result).booleanValue();
  }
  return false;
}","protected boolean skip(final Object input){
  if (ifFilter != null && input instanceof OIdentifiable) {
    final ODocument doc=((OIdentifiable)input).getRecord();
    final Object result=ifFilter.evaluate(doc,null,context);
    if (!(result instanceof Boolean))     throw new OConfigurationException(""String_Node_Str"" + getName() + ""String_Node_Str""+ result+ ""String_Node_Str"");
    return !((Boolean)result).booleanValue();
  }
  return false;
}",0.8944246737841044
131986,"@Override public Object executeTransform(final Object input){
  if (graph == null) {
    graph=pipeline.getGraphDatabase();
    final OClass cls=graph.getEdgeType(edgeClass);
    if (cls == null)     graph.createEdgeType(edgeClass);
  }
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(""String_Node_Str"" + input + ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  if (joinValue != null) {
    Object result=null;
    if (sqlQuery == null && index == null) {
      if (lookup.toUpperCase().startsWith(""String_Node_Str""))       sqlQuery=new OSQLSynchQuery<OrientVertex>(lookup);
 else       index=pipeline.getDocumentDatabase().getMetadata().getIndexManager().getIndex(lookup);
    }
    if (sqlQuery != null)     result=graph.command(sqlQuery).execute(joinValue);
 else {
      final OType idxFieldType=index.getDefinition().getTypes()[0];
      joinValue=idxFieldType.convert(joinValue,idxFieldType.getDefaultJavaType());
      result=index.get(joinValue);
    }
    if (result != null) {
      if (result instanceof Collection<?>) {
        if (!((Collection)result).isEmpty())         result=((Collection)result).iterator().next();
 else         result=null;
      }
      if (result != null) {
        final OrientVertex targetVertex=graph.getVertex(result);
        vertex.addEdge(edgeClass,targetVertex);
      }
    }
    if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
        if (lookup != null) {
          final String[] lookupParts=lookup.split(""String_Node_Str"");
          final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
          linkedV.setProperty(lookupParts[1],joinValue);
          linkedV.save();
          result=linkedV;
        }
 else         throw new OConfigurationException(""String_Node_Str"");
      break;
case ERROR:
    processor.getStats().incrementErrors();
  log(""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
}
}
return input;
}","@Override public Object executeTransform(final Object input){
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(""String_Node_Str"" + input + ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  Object result=lookup(joinValue);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinValue);
        linkedV.save();
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
vertex.addEdge(edgeClass,targetVertex);
}
}
return input;
}",0.6188513327837318
131987,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  joinFieldName=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   lookup=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str""))   unresolvedLinkAction=ACTION.valueOf(iConfiguration.field(""String_Node_Str"").toString().toUpperCase());
  edgeClass=iConfiguration.field(""String_Node_Str"");
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  edgeClass=iConfiguration.field(""String_Node_Str"");
}",0.5934343434343434
131988,"@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public ODocument getConfiguration(){
  return new ODocument().fromJSON(""String_Node_Str"" + getCommonConfigurationParameters() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ stringArray2Json(ACTION.values())+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9700787401574804
131989,"@Override public Object executeTransform(final Object input){
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(""String_Node_Str"" + input + ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  Object result=lookup(joinValue);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinValue);
        linkedV.save();
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
vertex.addEdge(edgeClass,targetVertex);
}
}
return input;
}","@Override public Object executeTransform(final Object input){
  final OrientVertex vertex;
  if (input instanceof OIdentifiable)   vertex=graph.getVertex(input);
 else   if (input instanceof OrientVertex)   vertex=(OrientVertex)input;
 else   throw new OTransformException(""String_Node_Str"" + input + ""String_Node_Str"");
  Object joinValue=vertex.getProperty(joinFieldName);
  Object result=lookup(joinValue);
  if (result == null) {
switch (unresolvedLinkAction) {
case CREATE:
      if (lookup != null) {
        final String[] lookupParts=lookup.split(""String_Node_Str"");
        final OrientVertex linkedV=graph.addTemporaryVertex(lookupParts[0]);
        linkedV.setProperty(lookupParts[1],joinValue);
        linkedV.save();
        result=linkedV;
      }
 else       throw new OConfigurationException(""String_Node_Str"");
    break;
case ERROR:
  processor.getStats().incrementErrors();
log(""String_Node_Str"",getName(),joinValue);
break;
case WARNING:
processor.getStats().incrementWarnings();
log(""String_Node_Str"",getName(),joinValue);
break;
case SKIP:
return null;
case HALT:
throw new OETLProcessHaltedException(""String_Node_Str"" + joinValue + ""String_Node_Str"");
}
if (result != null) {
final OrientVertex targetVertex=graph.getVertex(result);
if (directionOut) vertex.addEdge(edgeClass,targetVertex);
 else targetVertex.addEdge(edgeClass,vertex);
}
}
return input;
}",0.9762611275964392
131990,"@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  edgeClass=iConfiguration.field(""String_Node_Str"");
}","@Override public void configure(OETLProcessor iProcessor,final ODocument iConfiguration,final OBasicCommandContext iContext){
  super.configure(iProcessor,iConfiguration,iContext);
  edgeClass=iConfiguration.field(""String_Node_Str"");
  if (iConfiguration.containsField(""String_Node_Str"")) {
    final String direction=iConfiguration.field(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=true;
 else     if (""String_Node_Str"".equalsIgnoreCase(direction))     directionOut=false;
 else     throw new OConfigurationException(""String_Node_Str"" + direction);
  }
}",0.5608591885441527
131991,"/** 
 * Method builds OVS BridgeAugmentation InstanceIdentifier which is based on OVS Bridge name. <p>
 * @param serviceFunctionForwarderName serviceFunctionForwarderName String
 * @return InstanceIdentifier&lt;OvsdbBridgeAugmentation&gt;
 */
public static InstanceIdentifier<OvsdbBridgeAugmentation> buildOvsdbBridgeIID(String serviceFunctionForwarderName){
  InstanceIdentifier<OvsdbBridgeAugmentation> bridgeEntryIID=buildOvsdbNodeIID(serviceFunctionForwarderName).augmentation(OvsdbBridgeAugmentation.class);
  return bridgeEntryIID;
}","/** 
 * Method builds OVS BridgeAugmentation InstanceIdentifier which is based on OVS Bridge name. <p>
 * @param serviceFunctionForwarderName serviceFunctionForwarderName String
 * @return InstanceIdentifier&lt;OvsdbBridgeAugmentation&gt;
 */
public static InstanceIdentifier<OvsdbBridgeAugmentation> buildOvsdbBridgeIID(String serviceFunctionForwarderName){
  return buildOvsdbNodeIID(serviceFunctionForwarderName).augmentation(OvsdbBridgeAugmentation.class);
}",0.9090909090909092
131992,"public static Long getLongFromDpid(String dpid){
  String[] addressInBytes=dpid.split(""String_Node_Str"");
  Long address=Long.decode(HEX + addressInBytes[2]) << 40 | Long.decode(HEX + addressInBytes[3]) << 32 | Long.decode(HEX + addressInBytes[4]) << 24 | Long.decode(HEX + addressInBytes[5]) << 16 | Long.decode(HEX + addressInBytes[6]) << 8 | Long.decode(HEX + addressInBytes[7]);
  return address;
}","public static Long getLongFromDpid(String dpid){
  String[] addressInBytes=dpid.split(""String_Node_Str"");
  return (Long.decode(HEX + addressInBytes[2]) << 40 | Long.decode(HEX + addressInBytes[3]) << 32 | Long.decode(HEX + addressInBytes[4]) << 24 | Long.decode(HEX + addressInBytes[5]) << 16 | Long.decode(HEX + addressInBytes[6]) << 8 | Long.decode(HEX + addressInBytes[7]));
}",0.948849104859335
131993,"/** 
 * This gets the OVSDB Manager Topology Node for the  {@link ServiceFunctionForwarder}, using the IP address found in an IP based Data Plane Locator. If there isn't an IP based Data Plane Locator, then this will return null.
 * @param serviceFunctionForwarder -  {@link ServiceFunctionForwarder}
 * @return {@link Node}
 */
public static Node lookupTopologyNode(ServiceFunctionForwarder serviceFunctionForwarder){
  List<SffDataPlaneLocator> sffDplList=serviceFunctionForwarder.getSffDataPlaneLocator();
  IpAddress ip=null;
  if (sffDplList == null) {
    LOG.debug(""String_Node_Str"",serviceFunctionForwarder);
    return null;
  }
  for (  SffDataPlaneLocator sffDpl : sffDplList) {
    if (sffDpl.getDataPlaneLocator() != null && sffDpl.getDataPlaneLocator().getLocatorType() != null) {
      Class<? extends DataContainer> locatorType=sffDpl.getDataPlaneLocator().getLocatorType().getImplementedInterface();
      if (locatorType.isAssignableFrom(Ip.class)) {
        Ip ipPortLocator=(Ip)sffDpl.getDataPlaneLocator().getLocatorType();
        IpAddress ipAddress=new IpAddress(ipPortLocator.getIp().getValue());
        ip=ipAddress;
      }
    }
  }
  if (ip == null) {
    LOG.debug(""String_Node_Str"",serviceFunctionForwarder);
    return null;
  }
  return SfcOvsUtil.getManagerNodeByIp(ip);
}","/** 
 * This gets the OVSDB Manager Topology Node for the  {@link ServiceFunctionForwarder}, using the IP address found in an IP based Data Plane Locator. If there isn't an IP based Data Plane Locator, then this will return null.
 * @param serviceFunctionForwarder -  {@link ServiceFunctionForwarder}
 * @return {@link Node}
 */
public static Node lookupTopologyNode(ServiceFunctionForwarder serviceFunctionForwarder){
  List<SffDataPlaneLocator> sffDplList=serviceFunctionForwarder.getSffDataPlaneLocator();
  IpAddress ip=null;
  if (sffDplList == null) {
    LOG.debug(""String_Node_Str"",serviceFunctionForwarder);
    return null;
  }
  for (  SffDataPlaneLocator sffDpl : sffDplList) {
    if (sffDpl.getDataPlaneLocator() != null && sffDpl.getDataPlaneLocator().getLocatorType() != null) {
      Class<? extends DataContainer> locatorType=sffDpl.getDataPlaneLocator().getLocatorType().getImplementedInterface();
      if (locatorType.isAssignableFrom(Ip.class)) {
        Ip ipPortLocator=(Ip)sffDpl.getDataPlaneLocator().getLocatorType();
        ip=new IpAddress(ipPortLocator.getIp().getValue());
      }
    }
  }
  if (ip == null) {
    LOG.debug(""String_Node_Str"",serviceFunctionForwarder);
    return null;
  }
  return SfcOvsUtil.getManagerNodeByIp(ip);
}",0.9654368932038836
131994,"/** 
 * Method builds OVS TerminationPointAugmentation InstanceIdentifier which is based on: 1. OVS Node InstanceIdentifier which manages the OVS Bridge, to which the OVS TerminationPoint is attached 2. OVS Termination Point name. <p> If the two aforementioned fields are missing, NullPointerException is raised. <p>
 * @param ovsdbBridge OvsdbBridgeAugmentation
 * @param ovsdbTerminationPoint OvsdbTerminationPointAugmentation
 * @return InstanceIdentifier&lt;OvsdbTerminationPointAugmentation&gt;
 */
public static InstanceIdentifier<OvsdbTerminationPointAugmentation> buildOvsdbTerminationPointAugmentationIID(OvsdbBridgeAugmentation ovsdbBridge,OvsdbTerminationPointAugmentation ovsdbTerminationPoint){
  Preconditions.checkNotNull(ovsdbTerminationPoint,""String_Node_Str"" + ""String_Node_Str"");
  Preconditions.checkNotNull(ovsdbTerminationPoint.getName(),""String_Node_Str"" + ""String_Node_Str"");
  Preconditions.checkNotNull(ovsdbBridge,""String_Node_Str"");
  NodeId nodeId=getOvsBridgeNodeId(ovsdbBridge);
  String terminationPointId=ovsdbTerminationPoint.getName();
  InstanceIdentifier<OvsdbTerminationPointAugmentation> terminationPointIID=InstanceIdentifier.create(NetworkTopology.class).child(Topology.class,new TopologyKey(SouthboundConstants.OVSDB_TOPOLOGY_ID)).child(Node.class,new NodeKey(nodeId)).child(TerminationPoint.class,new TerminationPointKey(new TpId(terminationPointId))).augmentation(OvsdbTerminationPointAugmentation.class);
  return terminationPointIID;
}","/** 
 * Method builds OVS TerminationPointAugmentation InstanceIdentifier which is based on: 1. OVS Node InstanceIdentifier which manages the OVS Bridge, to which the OVS TerminationPoint is attached 2. OVS Termination Point name. <p> If the two aforementioned fields are missing, NullPointerException is raised. <p>
 * @param ovsdbBridge OvsdbBridgeAugmentation
 * @param ovsdbTerminationPoint OvsdbTerminationPointAugmentation
 * @return InstanceIdentifier&lt;OvsdbTerminationPointAugmentation&gt;
 */
public static InstanceIdentifier<OvsdbTerminationPointAugmentation> buildOvsdbTerminationPointAugmentationIID(OvsdbBridgeAugmentation ovsdbBridge,OvsdbTerminationPointAugmentation ovsdbTerminationPoint){
  Preconditions.checkNotNull(ovsdbTerminationPoint,""String_Node_Str"" + ""String_Node_Str"");
  Preconditions.checkNotNull(ovsdbTerminationPoint.getName(),""String_Node_Str"" + ""String_Node_Str"");
  Preconditions.checkNotNull(ovsdbBridge,""String_Node_Str"");
  NodeId nodeId=getOvsBridgeNodeId(ovsdbBridge);
  String terminationPointId=ovsdbTerminationPoint.getName();
  return InstanceIdentifier.create(NetworkTopology.class).child(Topology.class,new TopologyKey(SouthboundConstants.OVSDB_TOPOLOGY_ID)).child(Node.class,new NodeKey(nodeId)).child(TerminationPoint.class,new TerminationPointKey(new TpId(terminationPointId))).augmentation(OvsdbTerminationPointAugmentation.class);
}",0.9612565445026178
131995,"/** 
 * Method builds OVS TerminationPoint InstanceIdentifier which is based on SFF name and SFF DataPlane locator name. Method will return valid InstanceIdentifier only if the given SFF and SFF DataPlane locator belongs to SFF instance mapped to OVS. <p>
 * @param ovsdbBridgeNodeId OVSDB bridge NodeId where the SFF DPL resides
 * @param sffDataPlaneLocatorName Service Function Forwarder Data Plane locator name
 * @return InstanceIdentifier&lt;TerminationPoint&gt;
 */
public static InstanceIdentifier<TerminationPoint> buildOvsdbTerminationPointIID(NodeId ovsdbBridgeNodeId,String sffDataPlaneLocatorName){
  InstanceIdentifier<TerminationPoint> terminationPointIID=InstanceIdentifier.create(NetworkTopology.class).child(Topology.class,new TopologyKey(SouthboundConstants.OVSDB_TOPOLOGY_ID)).child(Node.class,new NodeKey(new NodeId(ovsdbBridgeNodeId))).child(TerminationPoint.class,new TerminationPointKey(new TpId(sffDataPlaneLocatorName)));
  return terminationPointIID;
}","/** 
 * Method builds OVS TerminationPoint InstanceIdentifier which is based on SFF name and SFF DataPlane locator name. Method will return valid InstanceIdentifier only if the given SFF and SFF DataPlane locator belongs to SFF instance mapped to OVS. <p>
 * @param ovsdbBridgeNodeId OVSDB bridge NodeId where the SFF DPL resides
 * @param sffDataPlaneLocatorName Service Function Forwarder Data Plane locator name
 * @return InstanceIdentifier&lt;TerminationPoint&gt;
 */
public static InstanceIdentifier<TerminationPoint> buildOvsdbTerminationPointIID(NodeId ovsdbBridgeNodeId,String sffDataPlaneLocatorName){
  return InstanceIdentifier.create(NetworkTopology.class).child(Topology.class,new TopologyKey(SouthboundConstants.OVSDB_TOPOLOGY_ID)).child(Node.class,new NodeKey(new NodeId(ovsdbBridgeNodeId))).child(TerminationPoint.class,new TerminationPointKey(new TpId(sffDataPlaneLocatorName)));
}",0.9499467518636848
131996,"/** 
 * Method builds OVSDB Topology InstanceIdentifier. <p>
 * @return InstanceIdentifier&lt;Topology&gt;
 */
public static InstanceIdentifier<Topology> buildOvsdbTopologyIID(){
  InstanceIdentifier<Topology> ovsdbTopologyIID=InstanceIdentifier.create(NetworkTopology.class).child(Topology.class,new TopologyKey(SouthboundConstants.OVSDB_TOPOLOGY_ID));
  return ovsdbTopologyIID;
}","/** 
 * Method builds OVSDB Topology InstanceIdentifier. <p>
 * @return InstanceIdentifier&lt;Topology&gt;
 */
public static InstanceIdentifier<Topology> buildOvsdbTopologyIID(){
  return InstanceIdentifier.create(NetworkTopology.class).child(Topology.class,new TopologyKey(SouthboundConstants.OVSDB_TOPOLOGY_ID));
}",0.8853868194842407
131997,"/** 
 * Method builds OVS Node InstanceIdentifier which is based on NodeId. <p>
 * @param nodeId NodeId
 * @return InstanceIdentifier&lt;Node&gt;
 */
public static InstanceIdentifier<Node> buildOvsdbNodeIID(NodeId nodeId){
  InstanceIdentifier<Node> nodeIID=InstanceIdentifier.create(NetworkTopology.class).child(Topology.class,new TopologyKey(SouthboundConstants.OVSDB_TOPOLOGY_ID)).child(Node.class,new NodeKey(nodeId));
  return nodeIID;
}","/** 
 * Method builds OVS Node InstanceIdentifier which is based on NodeId. <p>
 * @param nodeId NodeId
 * @return InstanceIdentifier&lt;Node&gt;
 */
public static InstanceIdentifier<Node> buildOvsdbNodeIID(NodeId nodeId){
  return InstanceIdentifier.create(NetworkTopology.class).child(Topology.class,new TopologyKey(SouthboundConstants.OVSDB_TOPOLOGY_ID)).child(Node.class,new NodeKey(nodeId));
}",0.930952380952381
131998,"public void registerPath(RenderedServicePath rsp){
  List<IpAddress> hopIpList=new ArrayList<>();
  List<RenderedServicePathHop> hops=rsp.getRenderedServicePathHop();
  for (  RenderedServicePathHop hop : hops) {
    SffDataPlaneLocatorName locatorName=hop.getServiceFunctionForwarderLocator();
    SffName sffName=hop.getServiceFunctionForwarder();
    ServiceFunctionForwarder sff=SfcProviderServiceForwarderAPI.readServiceFunctionForwarder(sffName);
    if (sff == null) {
      LOG.warn(""String_Node_Str"",sffName,hop.getHopNumber());
      return;
    }
    List<SffDataPlaneLocator> locators=sff.getSffDataPlaneLocator();
    if (locators == null) {
      LOG.debug(""String_Node_Str"",sff);
      return;
    }
    boolean found=false;
    for (    SffDataPlaneLocator locator : locators) {
      if (locator.getName().equals(locatorName)) {
        DataPlaneLocator dpLocator=locator.getDataPlaneLocator();
        LOG.debug(""String_Node_Str"",sffName,dpLocator);
        if (dpLocator.getLocatorType() instanceof Ip) {
          Ip sffLocator=(Ip)dpLocator.getLocatorType();
          if (sffLocator != null) {
            hopIpList.add(sffLocator.getIp());
            found=true;
            break;
          }
        }
      }
    }
    if (!found) {
      LOG.debug(""String_Node_Str"",sff);
      return;
    }
  }
  Eid spEid=LispAddressUtil.asServicePathEid(0,rsp.getPathId().longValue(),LispAddressUtil.STARTING_SERVICE_INDEX);
  registerElpMapping(spEid,hopIpList);
}","public void registerPath(RenderedServicePath rsp){
  List<IpAddress> hopIpList=new ArrayList<>();
  List<RenderedServicePathHop> hops=rsp.getRenderedServicePathHop();
  for (  RenderedServicePathHop hop : hops) {
    SffDataPlaneLocatorName locatorName=hop.getServiceFunctionForwarderLocator();
    SffName sffName=hop.getServiceFunctionForwarder();
    ServiceFunctionForwarder sff=SfcProviderServiceForwarderAPI.readServiceFunctionForwarder(sffName);
    if (sff == null) {
      LOG.warn(""String_Node_Str"",sffName,hop.getHopNumber());
      return;
    }
    List<SffDataPlaneLocator> locators=sff.getSffDataPlaneLocator();
    if (locators == null) {
      LOG.debug(""String_Node_Str"",sff);
      return;
    }
    boolean found=false;
    for (    SffDataPlaneLocator locator : locators) {
      if (locator.getName().equals(locatorName)) {
        DataPlaneLocator dpLocator=locator.getDataPlaneLocator();
        LOG.debug(""String_Node_Str"",sffName,dpLocator);
        if (dpLocator.getLocatorType() instanceof Ip) {
          Ip sffLocator=(Ip)dpLocator.getLocatorType();
          if (sffLocator != null) {
            hopIpList.add(sffLocator.getIp());
            found=true;
            break;
          }
        }
      }
    }
    if (!found) {
      LOG.debug(""String_Node_Str"",sff);
      return;
    }
  }
  Eid spEid=LispAddressUtil.asServicePathEid(0,rsp.getPathId(),LispAddressUtil.STARTING_SERVICE_INDEX);
  registerElpMapping(spEid,hopIpList);
}",0.9959294436906376
131999,"public void deletePath(RenderedServicePath rsp){
  Eid spEid=LispAddressUtil.asServicePathEid(0,rsp.getPathId().longValue(),LispAddressUtil.STARTING_SERVICE_INDEX);
  removeMapping(spEid);
}","public void deletePath(RenderedServicePath rsp){
  Eid spEid=LispAddressUtil.asServicePathEid(0,rsp.getPathId(),LispAddressUtil.STARTING_SERVICE_INDEX);
  removeMapping(spEid);
}",0.967391304347826
132000,"@Override public Object call() throws Exception {
  Object result=null;
switch (methodToCall) {
case GET_MAPPING:
    result=getLispMapping((Eid)methodParameters[0]);
  break;
case ADD_MAPPING:
result=addLispMapping((Eid)methodParameters[0],(List<Rloc>)methodParameters[1]);
break;
case DELETE_MAPPING:
result=removeLispMapping((Eid)methodParameters[0]);
break;
default :
break;
}
return result;
}","@Override public Object call(){
  Object result=null;
switch (methodToCall) {
case GET_MAPPING:
    result=getLispMapping((Eid)methodParameters[0]);
  break;
case ADD_MAPPING:
result=addLispMapping((Eid)methodParameters[0],(List<Rloc>)methodParameters[1]);
break;
case DELETE_MAPPING:
result=removeLispMapping((Eid)methodParameters[0]);
break;
default :
break;
}
return result;
}",0.9768041237113402
