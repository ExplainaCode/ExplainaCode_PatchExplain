record_number,buggy_code,fixed_code,code_similarity
36001,"protected String issueGet(String path) throws java.io.IOException, java.net.MalformedURLException {
  URL url=new URL(this._host.getProtocol(),this._host.getHost(),path);
  HttpURLConnection conn=initializeConnection(url);
  try {
    return readFromConnection(conn);
  }
  finally {
    conn.disconnect();
  }
}","protected String issueGet(String path) throws java.io.IOException, java.net.MalformedURLException {
  URL url=new URL(this._host.getProtocol(),this._host.getHost(),path);
  HttpURLConnection conn=initializeConnection(url);
  try {
    return readFromConnection(conn);
  }
 catch (  IOException ex) {
    InputStream s=conn.getErrorStream();
    InputStreamReader isr=new InputStreamReader(s);
    BufferedReader br=new BufferedReader(isr);
    try {
      String line=""String_Node_Str"";
      while ((line=br.readLine()) != null) {
        System.out.print(line);
      }
      System.out.println();
    }
  finally {
      s.close();
    }
    throw ex;
  }
 finally {
    conn.disconnect();
  }
}",0.5683168316831683
36002,"protected HttpURLConnection initializeConnection(URL url) throws IOException {
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setDoInput(true);
  conn.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  return conn;
}","protected HttpURLConnection initializeConnection(URL url) throws IOException {
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setDoInput(true);
  conn.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",this.authString);
  return conn;
}",0.910144927536232
36003,"public StatementResult getStatements() throws java.io.IOException {
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (this.filters != null && !this.filters.isEmpty()) {
    query.append(""String_Node_Str"");
    for (    Entry<String,String> item : this.filters.entrySet()) {
      query.append(item.getKey());
      query.append(""String_Node_Str"");
      query.append(item.getValue());
      query.append(""String_Node_Str"");
    }
    this.filters.clear();
  }
  String result=this.issueGet(query.toString());
  return this.getDecoder().fromJson(result,StatementResult.class);
}","public StatementResult getStatements() throws java.io.IOException {
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (this.filters != null && !this.filters.isEmpty()) {
    query.append(""String_Node_Str"");
    for (    Entry<String,String> item : this.filters.entrySet()) {
      query.append(item.getKey());
      query.append(""String_Node_Str"");
      query.append(item.getValue());
      query.append(""String_Node_Str"");
    }
    query.deleteCharAt(query.length() - 1);
    this.filters.clear();
  }
  String result=this.issueGet(query.toString());
  return this.getDecoder().fromJson(result,StatementResult.class);
}",0.9652448657187994
36004,"@Override public Actor deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  JsonObject obj=json.getAsJsonObject();
  Class<?> klass=null;
  try {
    String objectType=obj.get(OBJECT_TYPE).getAsJsonPrimitive().getAsString().toLowerCase();
    if (objectType.equals(Agent.AGENT.toLowerCase())) {
      klass=Class.forName(Agent.class.getCanonicalName());
    }
 else     if (objectType.equals(Group.GROUP.toLowerCase())) {
      klass=Class.forName(Group.class.getCanonicalName());
    }
  }
 catch (  ClassNotFoundException e) {
    throw new JsonParseException(e.getMessage());
  }
  return context.deserialize(json,klass);
}","@Override public Actor deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  JsonObject obj=json.getAsJsonObject();
  Class<?> klass=null;
  try {
    if (obj.has(OBJECT_TYPE)) {
      String objectType=obj.get(OBJECT_TYPE).getAsJsonPrimitive().getAsString().toLowerCase();
      if (objectType.equals(Agent.AGENT.toLowerCase())) {
        klass=Class.forName(Agent.class.getCanonicalName());
      }
 else       if (objectType.equals(Group.GROUP.toLowerCase())) {
        klass=Class.forName(Group.class.getCanonicalName());
      }
    }
 else {
      klass=Class.forName(Agent.class.getCanonicalName());
    }
  }
 catch (  ClassNotFoundException e) {
    throw new JsonParseException(e.getMessage());
  }
  return context.deserialize(json,klass);
}",0.8863483523873571
36005,"private synchronized TestInfo getTestInfo(final TestCase testCase){
  final Class<? extends TestCase> clazz=testCase.getClass();
  final Package thePackage=clazz.getPackage();
  final String name=testCase.getName();
  TestCaseInfo caseInfo=caseMap.get(thePackage);
  if (caseInfo == null) {
    caseInfo=new TestCaseInfo();
    caseInfo.testCaseClass=testCase.getClass();
    caseInfo.thePackage=thePackage;
    caseMap.put(thePackage,caseInfo);
  }
  TestInfo ti=caseInfo.testMap.get(name);
  if (ti == null) {
    ti=new TestInfo();
    ti.name=name;
    ti.testCase=testCase.getClass();
    ti.thePackage=thePackage;
    caseInfo.testMap.put(name,ti);
  }
  return ti;
}","private synchronized TestInfo getTestInfo(final TestCase testCase){
  final Class<? extends TestCase> clazz=testCase.getClass();
  final Package thePackage=clazz.getPackage();
  final String name=testCase.getName();
  StringBuilder sb=new StringBuilder();
  sb.append(thePackage).append(""String_Node_Str"").append(clazz.getSimpleName()).append(""String_Node_Str"").append(name);
  final String mapKey=sb.toString();
  TestCaseInfo caseInfo=caseMap.get(thePackage);
  if (caseInfo == null) {
    caseInfo=new TestCaseInfo();
    caseInfo.testCaseClass=testCase.getClass();
    caseInfo.thePackage=thePackage;
    caseMap.put(thePackage,caseInfo);
  }
  TestInfo ti=caseInfo.testMap.get(mapKey);
  if (ti == null) {
    ti=new TestInfo();
    ti.name=name;
    ti.testCase=testCase.getClass();
    ti.thePackage=thePackage;
    caseInfo.testMap.put(mapKey,ti);
  }
  return ti;
}",0.8597285067873304
36006,"@Override public void onCreate(final Bundle arguments){
  Log.d(TAG,""String_Node_Str"" + arguments.keySet());
  if (arguments != null) {
    junitOutputEnabled=getBooleanArgument(arguments,""String_Node_Str"",true);
    junitOutputDirectory=arguments.getString(""String_Node_Str"");
    junitOutputFilePostfix=arguments.getString(""String_Node_Str"");
    junitNoPackagePrefix=arguments.getString(""String_Node_Str"");
    junitSplitLevel=arguments.getString(""String_Node_Str"");
    junitSingleFileName=arguments.getString(""String_Node_Str"");
    justCount=getBooleanArgument(arguments,""String_Node_Str"",false);
    logOnly=getBooleanArgument(arguments,""String_Node_Str"",false);
  }
  setDefaultParameters();
  logParameters();
  deleteOldFiles();
  super.onCreate(arguments);
}","@Override public void onCreate(final Bundle arguments){
  Log.d(TAG,""String_Node_Str"" + arguments.keySet());
  if (arguments != null) {
    junitOutputEnabled=getBooleanArgument(arguments,""String_Node_Str"",true);
    junitOutputDirectory=arguments.getString(""String_Node_Str"");
    junitOutputFilePostfix=arguments.getString(""String_Node_Str"");
    junitNoPackagePrefix=arguments.getString(""String_Node_Str"");
    junitSplitLevel=arguments.getString(""String_Node_Str"");
    junitSingleFileName=arguments.getString(""String_Node_Str"");
    justCount=getBooleanArgument(arguments,""String_Node_Str"",false);
    logOnly=getBooleanArgument(arguments,""String_Node_Str"",false);
  }
  setDefaultParameters();
  logParameters();
  createDirectoryIfNotExist();
  deleteOldFiles();
  super.onCreate(arguments);
}",0.980242192479286
36007,"private void deleteOldFiles(){
  Log.d(TAG,""String_Node_Str"");
  final File[] filesToDelete=new File(junitOutputDirectory).listFiles(new FilenameFilter(){
    @Override public boolean accept(    final File dir,    final String filename){
      return filename.endsWith(junitOutputFilePostfix) || filename.equals(junitSingleFileName);
    }
  }
);
  Log.d(TAG,""String_Node_Str"" + Arrays.toString(filesToDelete));
  for (  final File f : filesToDelete) {
    f.delete();
  }
}","private void deleteOldFiles(){
  Log.d(TAG,""String_Node_Str"");
  final File[] filesToDelete=new File(junitOutputDirectory).listFiles(new FilenameFilter(){
    @Override public boolean accept(    final File dir,    final String filename){
      return filename.endsWith(junitOutputFilePostfix) || filename.equals(junitSingleFileName);
    }
  }
);
  if (filesToDelete != null) {
    Log.d(TAG,""String_Node_Str"" + Arrays.toString(filesToDelete));
    for (    final File f : filesToDelete) {
      f.delete();
    }
  }
}",0.944612286002014
36008,"@Override protected void updateItem(Object item,boolean empty){
  super.updateItem(item,empty);
  if (empty) {
    return;
  }
  Property valProp=(Property)getTableColumn().getCellObservableValue(getIndex());
  Node node;
  if (item == null) {
    node=new TextField();
    ((TextField)node).textProperty().bindBidirectional(valProp);
  }
 else   if (item instanceof Boolean) {
    node=new CheckBox();
    ((CheckBox)node).selectedProperty().bindBidirectional(valProp);
  }
 else   if (item instanceof HeapStatsMBean.LogLevel) {
    node=new ChoiceBox(FXCollections.observableArrayList(HeapStatsMBean.LogLevel.values()));
    ((ChoiceBox<HeapStatsMBean.LogLevel>)node).valueProperty().bindBidirectional(valProp);
  }
 else   if (item instanceof HeapStatsMBean.RankOrder) {
    node=new ChoiceBox(FXCollections.observableArrayList(HeapStatsMBean.RankOrder.values()));
    ((ChoiceBox<HeapStatsMBean.RankOrder>)node).valueProperty().bindBidirectional(valProp);
  }
 else   if (item instanceof Long) {
    node=new TextField();
    ((TextField)node).textProperty().bindBidirectional((Property<Long>)valProp,new LongStringConverter());
  }
 else {
    node=new TextField();
    ((TextField)node).textProperty().bindBidirectional(valProp);
  }
  setGraphic(node);
}","@Override protected void updateItem(Object item,boolean empty){
  super.updateItem(item,empty);
  if (empty) {
    return;
  }
  Property valProp=(Property)getTableColumn().getCellObservableValue(getIndex());
  Node node;
  if (item == null) {
    node=new TextField();
    ((TextField)node).textProperty().bindBidirectional(valProp);
  }
 else   if (item instanceof Boolean) {
    node=new CheckBox();
    ((CheckBox)node).selectedProperty().bindBidirectional(valProp);
  }
 else   if (item instanceof HeapStatsMBean.LogLevel) {
    node=new ChoiceBox(FXCollections.observableArrayList(HeapStatsMBean.LogLevel.values()));
    ((ChoiceBox<HeapStatsMBean.LogLevel>)node).valueProperty().bindBidirectional(valProp);
  }
 else   if (item instanceof HeapStatsMBean.RankOrder) {
    node=new ChoiceBox(FXCollections.observableArrayList(HeapStatsMBean.RankOrder.values()));
    ((ChoiceBox<HeapStatsMBean.RankOrder>)node).valueProperty().bindBidirectional(valProp);
  }
 else   if (item instanceof Integer) {
    node=new TextField();
    ((TextField)node).textProperty().bindBidirectional((Property<Integer>)valProp,new IntegerStringConverter());
  }
 else   if (item instanceof Long) {
    node=new TextField();
    ((TextField)node).textProperty().bindBidirectional((Property<Long>)valProp,new LongStringConverter());
  }
 else {
    node=new TextField();
    ((TextField)node).textProperty().bindBidirectional(valProp);
  }
  setGraphic(node);
}",0.9326923076923076
36009,"/** 
 * Initializes the controller class.
 */
@Override public void initialize(URL url,ResourceBundle rb){
  keyColumn.setCellValueFactory(new PropertyValueFactory<>(""String_Node_Str""));
  keyColumn.setCellFactory(p -> new TableCell<HeapStatsConfig,String>(){
    @Override protected void updateItem(    String item,    boolean empty){
      if (!empty) {
        HeapStatsConfig config=configTable.getItems().get(getIndex());
        styleProperty().bind(Bindings.createStringBinding(() -> config.changedProperty().get() ? ""String_Node_Str"" : ""String_Node_Str"",config.changedProperty()));
        setText(item);
      }
    }
  }
);
  valueColumn.setCellValueFactory(new PropertyValueFactory<>(""String_Node_Str""));
  valueColumn.setCellFactory(p -> new TableCell<HeapStatsConfig,Object>(){
    @Override protected void updateItem(    Object item,    boolean empty){
      super.updateItem(item,empty);
      if (empty) {
        return;
      }
      Property valProp=(Property)getTableColumn().getCellObservableValue(getIndex());
      Node node;
      if (item == null) {
        node=new TextField();
        ((TextField)node).textProperty().bindBidirectional(valProp);
      }
 else       if (item instanceof Boolean) {
        node=new CheckBox();
        ((CheckBox)node).selectedProperty().bindBidirectional(valProp);
      }
 else       if (item instanceof HeapStatsMBean.LogLevel) {
        node=new ChoiceBox(FXCollections.observableArrayList(HeapStatsMBean.LogLevel.values()));
        ((ChoiceBox<HeapStatsMBean.LogLevel>)node).valueProperty().bindBidirectional(valProp);
      }
 else       if (item instanceof HeapStatsMBean.RankOrder) {
        node=new ChoiceBox(FXCollections.observableArrayList(HeapStatsMBean.RankOrder.values()));
        ((ChoiceBox<HeapStatsMBean.RankOrder>)node).valueProperty().bindBidirectional(valProp);
      }
 else       if (item instanceof Long) {
        node=new TextField();
        ((TextField)node).textProperty().bindBidirectional((Property<Long>)valProp,new LongStringConverter());
      }
 else {
        node=new TextField();
        ((TextField)node).textProperty().bindBidirectional(valProp);
      }
      setGraphic(node);
    }
  }
);
}","/** 
 * Initializes the controller class.
 */
@Override public void initialize(URL url,ResourceBundle rb){
  keyColumn.setCellValueFactory(new PropertyValueFactory<>(""String_Node_Str""));
  keyColumn.setCellFactory(p -> new TableCell<HeapStatsConfig,String>(){
    @Override protected void updateItem(    String item,    boolean empty){
      if (!empty) {
        HeapStatsConfig config=configTable.getItems().get(getIndex());
        styleProperty().bind(Bindings.createStringBinding(() -> config.changedProperty().get() ? ""String_Node_Str"" : ""String_Node_Str"",config.changedProperty()));
        setText(item);
      }
    }
  }
);
  valueColumn.setCellValueFactory(new PropertyValueFactory<>(""String_Node_Str""));
  valueColumn.setCellFactory(p -> new TableCell<HeapStatsConfig,Object>(){
    @Override protected void updateItem(    Object item,    boolean empty){
      super.updateItem(item,empty);
      if (empty) {
        return;
      }
      Property valProp=(Property)getTableColumn().getCellObservableValue(getIndex());
      Node node;
      if (item == null) {
        node=new TextField();
        ((TextField)node).textProperty().bindBidirectional(valProp);
      }
 else       if (item instanceof Boolean) {
        node=new CheckBox();
        ((CheckBox)node).selectedProperty().bindBidirectional(valProp);
      }
 else       if (item instanceof HeapStatsMBean.LogLevel) {
        node=new ChoiceBox(FXCollections.observableArrayList(HeapStatsMBean.LogLevel.values()));
        ((ChoiceBox<HeapStatsMBean.LogLevel>)node).valueProperty().bindBidirectional(valProp);
      }
 else       if (item instanceof HeapStatsMBean.RankOrder) {
        node=new ChoiceBox(FXCollections.observableArrayList(HeapStatsMBean.RankOrder.values()));
        ((ChoiceBox<HeapStatsMBean.RankOrder>)node).valueProperty().bindBidirectional(valProp);
      }
 else       if (item instanceof Integer) {
        node=new TextField();
        ((TextField)node).textProperty().bindBidirectional((Property<Integer>)valProp,new IntegerStringConverter());
      }
 else       if (item instanceof Long) {
        node=new TextField();
        ((TextField)node).textProperty().bindBidirectional((Property<Long>)valProp,new LongStringConverter());
      }
 else {
        node=new TextField();
        ((TextField)node).textProperty().bindBidirectional(valProp);
      }
      setGraphic(node);
    }
  }
);
}",0.9568815331010452
36010,"private void configure(){
  String rootH2h=System.getProperty(H2H_CONFIG);
  if (rootH2h == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(rootH2h)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  parseConfig(rootH2h);
  if (config.getOutputSystem() == OutputSystem.REMOTE && config.getToken() != null) {
    ThunderExporterService.getInstance().registerAppInThunder();
  }
 else {
    ThunderExporterService.getInstance().setToken(config.getToken());
    LOGGER.info(""String_Node_Str"",config.getToken(),config.getNameApplication());
  }
}","private void configure(){
  String rootH2h=System.getProperty(H2H_CONFIG);
  if (rootH2h == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(rootH2h)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  parseConfig(rootH2h);
  if (config.getOutputSystem() == OutputSystem.REMOTE && config.getToken() == null) {
    ThunderExporterService.getInstance().registerAppInThunder();
  }
 else {
    LOGGER.info(""String_Node_Str"",config.getToken(),config.getNameApplication());
  }
}",0.9359430604982206
36011,"public void enableEntryPointCoverage() throws ClassNotFoundException, UnmodifiableClassException {
  LOGGER.info(""String_Node_Str"");
  Instrumentation instrumentation=InstrumentationHolder.getInstance().getInst();
  if (instrumentation != null) {
    TransformerService ts=new TransformerService();
    Map<String,List<EntryPathData>> mapConvert=ts.transformDataFromLeechPluginForTransformation(leechPluginRegistry.values());
    LOGGER.error(""String_Node_Str"");
    if (config.getOutputSystem() == OutputSystem.REMOTE && config.getToken() != null) {
      ThunderExporterService.getInstance().initRemoteApp();
    }
    instrumentation.addTransformer(new EntryPointTransformer(mapConvert),true);
    ts.transformAllClassScanByH2h(instrumentation,mapConvert.keySet());
  }
 else {
    LOGGER.error(""String_Node_Str"");
  }
}","public void enableEntryPointCoverage() throws ClassNotFoundException, UnmodifiableClassException {
  LOGGER.info(""String_Node_Str"");
  Instrumentation instrumentation=InstrumentationHolder.getInstance().getInst();
  if (instrumentation != null) {
    TransformerService ts=new TransformerService();
    Map<String,List<EntryPathData>> mapConvert=ts.transformDataFromLeechPluginForTransformation(leechPluginRegistry.values());
    if (config.getOutputSystem() == OutputSystem.REMOTE && config.getToken() != null) {
      ThunderExporterService.getInstance().initRemoteApp();
    }
    instrumentation.addTransformer(new EntryPointTransformer(mapConvert),true);
    ts.transformAllClassScanByH2h(instrumentation,mapConvert.keySet());
  }
 else {
    LOGGER.error(""String_Node_Str"");
  }
}",0.9770043505282784
36012,"public void sendRemotePerformance(String fullMethodName,long timeExec){
  MessageMetrics msg=new MessageMetrics();
  msg.setPathClassMethodName(fullMethodName);
  msg.setToken(token);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  Date date=new Date();
  msg.setDateIncoming(sdf.format(date));
  msg.setTimeExec(timeExec);
  queueRemotePerformance.add(msg);
}","public void sendRemotePerformance(String fullMethodName,long timeExec){
  MessageMetrics msg=new MessageMetrics();
  msg.setPathClassMethodName(fullMethodName);
  msg.setToken(CoreEngine.getInstance().getConfig().getToken());
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  Date date=new Date();
  msg.setDateIncoming(sdf.format(date));
  msg.setTimeExec(timeExec);
  queueRemotePerformance.add(msg);
}",0.9448621553884712
36013,"public void initRemoteApp(){
  TransformerService ts=new TransformerService();
  List<EntryPathData> res=ts.collectBreakerDataFromLeechPlugin(CoreEngine.getInstance().getLeechServiceRegistered());
  MessageThunderApp msg=new MessageThunderApp();
  msg.setListentryPathData(res);
  msg.setToken(token);
  sendDataHTTP(""String_Node_Str"",msg);
}","public void initRemoteApp(){
  LOGGER.info(""String_Node_Str"");
  TransformerService ts=new TransformerService();
  List<EntryPathData> res=ts.collectBreakerDataFromLeechPlugin(CoreEngine.getInstance().getLeechServiceRegistered());
  MessageThunderApp msg=new MessageThunderApp();
  msg.setListentryPathData(res);
  msg.setToken(CoreEngine.getInstance().getConfig().getToken());
  sendDataHTTP(""String_Node_Str"",msg);
}",0.8973684210526316
36014,"public void registerAppInThunder(){
  this.token=sendDataHTTP(""String_Node_Str"",CoreEngine.getInstance().getConfig());
  LOGGER.info(""String_Node_Str"",token,CoreEngine.getInstance().getConfig().getNameApplication());
}","public void registerAppInThunder(){
  String token=sendDataHTTP(""String_Node_Str"",CoreEngine.getInstance().getConfig());
  CoreEngine.getInstance().getConfig().setToken(token);
  LOGGER.info(""String_Node_Str"",token,CoreEngine.getInstance().getConfig().getNameApplication());
}",0.8623481781376519
36015,"public void sendRemoteBreaker(String pathClassMethodName){
  MessageBreaker msg=new MessageBreaker();
  msg.setPathClassMethodName(pathClassMethodName);
  msg.setToken(token);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  Date date=new Date();
  msg.setDateIncoming(sdf.format(date));
  queueRemoteBreaker.add(msg);
}","public void sendRemoteBreaker(String pathClassMethodName){
  MessageBreaker msg=new MessageBreaker();
  msg.setPathClassMethodName(pathClassMethodName);
  msg.setToken(CoreEngine.getInstance().getConfig().getToken());
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  Date date=new Date();
  msg.setDateIncoming(sdf.format(date));
  queueRemoteBreaker.add(msg);
}",0.9273743016759776
36016,"public Map<String,List<EntryPathData>> transformDataFromLeechPluginForTransformation(Collection<LeechService> leechService){
  Map<String,List<EntryPathData>> mapToTransform=new HashMap<String,List<EntryPathData>>();
  for (  LeechService leech : leechService) {
    for (    EntryPathData entryPath : leech.getFrameworkInformations().getListEntryPath()) {
      if (entryPath.getMethodName() != null) {
switch (entryPath.getTypePath()) {
case SERVLET:
          createRegistrerBreakerData(entryPath,mapToTransform,""String_Node_Str"",""String_Node_Str"");
        createRegistrerBreakerData(entryPath,mapToTransform,""String_Node_Str"",""String_Node_Str"");
      createRegistrerBreakerData(entryPath,mapToTransform,""String_Node_Str"",""String_Node_Str"");
    break;
case FILTER:
  createRegistrerBreakerData(entryPath,mapToTransform,""String_Node_Str"",""String_Node_Str"");
break;
default :
createRegistrerBreakerData(entryPath,mapToTransform,entryPath.getMethodName(),entryPath.getSignatureName());
break;
}
}
}
}
return mapToTransform;
}","public Map<String,List<EntryPathData>> transformDataFromLeechPluginForTransformation(Collection<LeechService> leechService){
  Map<String,List<EntryPathData>> mapToTransform=new HashMap<String,List<EntryPathData>>();
  for (  LeechService leech : leechService) {
    for (    EntryPathData entryPath : leech.getFrameworkInformations().getListEntryPath()) {
      if (entryPath.getMethodName() != null && !""String_Node_Str"".equals(entryPath.getClassName())) {
switch (entryPath.getTypePath()) {
case SERVLET:
          createRegistrerBreakerData(entryPath,mapToTransform,""String_Node_Str"",""String_Node_Str"");
        createRegistrerBreakerData(entryPath,mapToTransform,""String_Node_Str"",""String_Node_Str"");
      createRegistrerBreakerData(entryPath,mapToTransform,""String_Node_Str"",""String_Node_Str"");
    break;
case FILTER:
  createRegistrerBreakerData(entryPath,mapToTransform,""String_Node_Str"",""String_Node_Str"");
break;
default :
createRegistrerBreakerData(entryPath,mapToTransform,entryPath.getMethodName(),entryPath.getSignatureName());
break;
}
}
}
}
return mapToTransform;
}",0.9739459971577452
36017,"private void findAllClassAndMethod(ActionConfig action){
  try {
    Class<?> c=Class.forName(action.getClassName());
    for (    Method m : c.getDeclaredMethods()) {
      EntryPathData entry=new EntryPathData();
      entry.setTypePath(TypePath.DYNAMIC);
      entry.setMethodEntry(action.getClassName());
      entry.setClassName(m.getName());
      entry.setUri(action.getName());
      entry.setListEntryPathData(searchParameterMethod(m.getParameterTypes()));
      entry.setSignatureName(getInternalSignature(m));
      addEntryPath(entry);
    }
  }
 catch (  ClassNotFoundException e) {
    LOGGER.error(""String_Node_Str"" + Struts2Service.class.getCanonicalName() + ""String_Node_Str""+ action.getClassName()+ ""String_Node_Str""+ e.getMessage());
  }
}","private void findAllClassAndMethod(ActionConfig action){
  try {
    Class<?> c=Class.forName(action.getClassName());
    for (    Method m : c.getDeclaredMethods()) {
      EntryPathData entry=new EntryPathData();
      entry.setTypePath(TypePath.DYNAMIC);
      entry.setClassName(action.getClassName());
      entry.setMethodEntry(m.getName());
      entry.setUri(action.getName());
      entry.setListEntryPathData(searchParameterMethod(m.getParameterTypes()));
      entry.setSignatureName(getInternalSignature(m));
      addEntryPath(entry);
    }
  }
 catch (  ClassNotFoundException e) {
    LOGGER.error(""String_Node_Str"" + Struts2Service.class.getCanonicalName() + ""String_Node_Str""+ action.getClassName()+ ""String_Node_Str""+ e.getMessage());
  }
}",0.9353562005277044
36018,"@Override public void report(FrameworkInformations frameworkInformations){
  if (frameworkInformations.hasEntryPaths()) {
    LOG.info(""String_Node_Str"",frameworkInformations.getFrameworkEnum(),frameworkInformations.getVersion());
    LOG.info(""String_Node_Str"",frameworkInformations.getListEntryPath().size());
    if (LOG.isDebugEnabled()) {
      Gson gson=new Gson();
      LOG.debug(""String_Node_Str"" + gson.toJson(frameworkInformations.getListEntryPath()));
    }
  }
}","@Override public void report(FrameworkInformations frameworkInformations){
  if (frameworkInformations.hasEntryPaths()) {
    LOG.info(""String_Node_Str"",frameworkInformations.getFrameworkName(),frameworkInformations.getVersion());
    LOG.info(""String_Node_Str"",frameworkInformations.getListEntryPath().size());
    if (LOG.isDebugEnabled()) {
      Gson gson=new Gson();
      LOG.debug(""String_Node_Str"" + gson.toJson(frameworkInformations.getListEntryPath()));
    }
  }
}",0.991578947368421
36019,"private void autoDiscoverLeechPlugins(){
  Reflections reflections=new Reflections();
  Set<Class<? extends LeechService>> pluginsAvailable=reflections.getSubTypesOf(LeechService.class);
  for (  Class<? extends LeechService> plugin : pluginsAvailable) {
    try {
      LOGGER.info(""String_Node_Str"",plugin.getCanonicalName());
      LeechService leechService=plugin.newInstance();
      leechPluginRegistry.put(leechService.getFrameworkInformations().getFrameworkEnum(),leechService);
    }
 catch (    InstantiationException e) {
      LOGGER.error(""String_Node_Str"" + plugin.getCanonicalName(),e);
    }
catch (    IllegalAccessException e) {
      LOGGER.error(""String_Node_Str"" + plugin.getCanonicalName(),e);
    }
  }
}","private void autoDiscoverLeechPlugins(){
  Reflections reflections=new Reflections(""String_Node_Str"");
  Set<Class<? extends LeechService>> pluginsAvailable=reflections.getSubTypesOf(LeechService.class);
  for (  Class<? extends LeechService> plugin : pluginsAvailable) {
    try {
      LOGGER.info(""String_Node_Str"",plugin.getCanonicalName());
      LeechService leechService=plugin.newInstance();
      leechPluginRegistry.put(leechService.getFrameworkInformations().getFrameworkEnum(),leechService);
    }
 catch (    InstantiationException e) {
      LOGGER.error(""String_Node_Str"" + plugin.getCanonicalName(),e);
    }
catch (    IllegalAccessException e) {
      LOGGER.error(""String_Node_Str"" + plugin.getCanonicalName(),e);
    }
  }
}",0.9884432358939496
36020,"@Override protected void onResume(){
  super.onResume();
  BusProvider.get().register(this);
  if (restaurant == null) {
    progressDialog=new ProgressDialog(ref);
    progressDialog.setTitle(""String_Node_Str"");
    progressDialog.setMessage(""String_Node_Str"");
    progressDialog.show();
    BusProvider.get().post(new GetOneRestaurantEvent(mID));
  }
}","@Override protected void onResume(){
  super.onResume();
  BusProvider.get().register(this);
  if (restaurant == null) {
    progressDialog=new ProgressDialog(this);
    progressDialog.setTitle(""String_Node_Str"");
    progressDialog.setMessage(""String_Node_Str"");
    progressDialog.show();
    BusProvider.get().post(new GetOneRestaurantEvent(mID));
  }
}",0.9901547116736992
36021,"@Subscribe public void onGetLocalRestaurantEvent(GetLocalRestaurantEvent e){
  new AsyncTask<Void,Void,List<Restaurant>>(){
    private String TAG=""String_Node_Str"";
    protected List<Restaurant> doInBackground(    Void... voids){
      try {
        List<Restaurant> rest=RESTrepository.listRestaurants(""String_Node_Str"",""String_Node_Str"");
        return rest;
      }
 catch (      Exception e) {
        if (e instanceof SocketTimeoutException) {
          Log.e(TAG,""String_Node_Str"");
        }
 else {
          Log.e(TAG,""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
        }
        e.getStackTrace();
      }
      return null;
    }
    protected void onProgressUpdate(){
    }
    protected void onPostExecute(    List<Restaurant> rest){
      BusProvider.get().post(new LocalRestaurantReceivedEvent(rest));
    }
  }
.execute();
}","@Subscribe public void onGetLocalRestaurantEvent(GetLocalRestaurantEvent e){
  new AsyncTask<Void,Void,List<Restaurant>>(){
    private String TAG=""String_Node_Str"";
    protected List<Restaurant> doInBackground(    Void... voids){
      try {
        List<Restaurant> rest=RESTrepository.listRestaurants();
        return rest;
      }
 catch (      Exception e) {
        if (e instanceof SocketTimeoutException) {
          Log.e(TAG,""String_Node_Str"");
        }
 else {
          Log.e(TAG,""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getMessage());
        }
        e.getStackTrace();
      }
      return null;
    }
    protected void onProgressUpdate(){
    }
    protected void onPostExecute(    List<Restaurant> rest){
      BusProvider.get().post(new LocalRestaurantReceivedEvent(rest));
    }
  }
.execute();
}",0.9797101449275364
36022,"public static List<Restaurant> listRestaurants(String lat,String lon){
  return restService.listRestaurants(lat,lon);
}","public static List<Restaurant> listRestaurants(){
  return restService.listRestaurants(getLat(),getLong());
}",0.8421052631578947
36023,"public static List<Restaurant> searchRestaurant(String search){
  return restService.searchRestaurant(search);
}","public static List<Restaurant> searchRestaurant(String search){
  return restService.searchRestaurant(search,getLat(),getLong());
}",0.9218106995884774
36024,"public static Restaurant getRestaurant(int id){
  return restService.GetRestaurant(id);
}","public static Restaurant getRestaurant(int id){
  return restService.GetRestaurant(id,getLat(),getLong());
}",0.9035532994923858
36025,"@GET(""String_Node_Str"") Restaurant GetRestaurant(@Path(""String_Node_Str"") int id);","@GET(""String_Node_Str"") Restaurant GetRestaurant(@Path(""String_Node_Str"") int id,@Query(""String_Node_Str"") String latitude,@Query(""String_Node_Str"") String longitude);",0.6586345381526104
36026,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(R.layout.invitation_item_list,parent,false);
  TextView nameTextView=(TextView)rowView.findViewById(R.id.EventName);
  TextView text1TextView=(TextView)rowView.findViewById(R.id.EventText1);
  TextView text2TextView=(TextView)rowView.findViewById(R.id.EventText2);
  nameTextView.setText(values.get(position).getOrder().getRestaurant().getName());
  try {
    Date date=(new SimpleDateFormat(""String_Node_Str"")).parse(values.get(position).getOrder().getRequest_date().replaceAll(""String_Node_Str"",""String_Node_Str""));
    String dateString=new SimpleDateFormat(""String_Node_Str"").format(date);
    text1TextView.setText(dateString);
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  String userList=""String_Node_Str"";
  List<User> ul=values.get(position).getParticipants();
  for (int i=0; i < ul.size(); ++i) {
    userList+=ul.get(i).getName();
    if (i < ul.size() - 1) {
      userList+=""String_Node_Str"";
    }
  }
  text2TextView.setText(userList);
  return rowView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(R.layout.invitation_item_list,parent,false);
  TextView nameTextView=(TextView)rowView.findViewById(R.id.EventName);
  TextView text1TextView=(TextView)rowView.findViewById(R.id.EventText1);
  TextView text2TextView=(TextView)rowView.findViewById(R.id.EventText2);
  nameTextView.setText(values.get(position).getOrder().getRestaurant().getName());
  text1TextView.setText(values.get(position).getOrder().getRequest_date());
  String userList=""String_Node_Str"";
  List<User> ul=values.get(position).getParticipants();
  for (int i=0; i < ul.size(); ++i) {
    userList+=ul.get(i).getName();
    if (i < ul.size() - 1) {
      userList+=""String_Node_Str"";
    }
  }
  text2TextView.setText(userList);
  return rowView;
}",0.8067542213883677
36027,"@Subscribe public void onOnGetInvitationEvent(OnOneInvitationEvent e){
  mInvitation=e.get();
  if (mInvitation != null) {
    mHostControls.setVisibility(LinearLayout.GONE);
    mParticipantControls.setVisibility(LinearLayout.GONE);
    mStatusButton.setVisibility(Button.GONE);
    mAcceptButton.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT,1));
    mDeniedButton.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT,1));
    for (int i=0; i < mHostControls.getChildCount(); i++) {
      View view=mHostControls.getChildAt(i);
      view.setVisibility(View.GONE);
    }
    for (int i=0; i < mParticipantControls.getChildCount(); i++) {
      View view=mParticipantControls.getChildAt(i);
      view.setVisibility(View.GONE);
    }
    progressDialog.hide();
    Restaurant restaurant=mInvitation.getOrder().getRestaurant();
    if (restaurant.getPic() != null && !restaurant.getPic().isEmpty()) {
      Picasso.with(this).load(""String_Node_Str"" + restaurant.getPic()).placeholder(R.drawable.resto_big).into(mRestaurantCoverImageView);
    }
    mRestaurantName.setText(mInvitation.getOrder().getRestaurant().getName());
    String date=mInvitation.getOrder().getRequest_date().substring(0,10);
    date+=""String_Node_Str"" + mInvitation.getOrder().getStart_time() + ""String_Node_Str""+ mInvitation.getOrder().getEnd_time()+ ""String_Node_Str"";
    mDateTextView.setText(date);
    Calendar now=Calendar.getInstance();
    Date orderNow=null;
    long l=now.getTimeInMillis();
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    try {
      orderNow=sdf.parse(mInvitation.getOrder().getFormatDate());
    }
 catch (    ParseException e1) {
      e1.printStackTrace();
    }
    long l2=orderNow.getTime();
    int hour=now.get(Calendar.HOUR_OF_DAY);
    if (l < l2) {
      time=new CountDown(l2 - l,1000);
      time.start();
    }
 else {
      mCountDownTextView.setText(""String_Node_Str"");
    }
    mAddressTextView.setText(mInvitation.getOrder().getRestaurant().getAddress());
    int nbParticipantComming=0;
    List<User> userList=mInvitation.getParticipants();
    for (int i=0; i < userList.size(); ++i) {
      if (userList.get(i).getCust_id() == mUserID) {
        mThisUser=userList.get(i);
      }
      if (userList.get(i).getInv_status().equals(""String_Node_Str"")) {
        nbParticipantComming+=1;
      }
    }
    mFriendAdapter.update(userList);
    setListViewHeightBasedOnChildren(mInFriendsListView);
    List<Map<String,Object>> listT=new ArrayList<Map<String,Object>>();
    Map<String,Object> map;
    List<Dishe> disheList=mInvitation.getOrder().getDishes();
    for (int i=0; i < disheList.size(); ++i) {
      map=new HashMap<String,Object>();
      String disheName=disheList.get(i).getName();
      if (disheName.length() > 0) {
        disheName=String.valueOf(disheName.charAt(0)).toUpperCase() + disheName.subSequence(1,disheName.length());
      }
      map.put(""String_Node_Str"",disheName);
      map.put(""String_Node_Str"",+disheList.get(i).getPrice() + ""String_Node_Str"");
      map.put(""String_Node_Str"",disheList.get(i).getQuantity() + ""String_Node_Str"");
      listT.add(map);
    }
    SimpleAdapter dishAdapterTmp=new SimpleAdapter(this,listT,R.layout.dishe_item_list2,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new int[]{R.id.DisheName2,R.id.DishePrice2,R.id.DisheNum2});
    mDishesListView.setAdapter(dishAdapterTmp);
    setListViewHeightBasedOnChildren(mDishesListView);
    mTotalPrice.setText(mInvitation.getOrder().getTotal_price() + ""String_Node_Str"");
    mPricePerParticipant.setText((mInvitation.getOrder().getTotal_price() / (nbParticipantComming)) + ""String_Node_Str"");
switch (mInvitation.getOrder().getStatus()) {
case 1:
{
        if (mThisUser.isIs_host()) {
          mHostControls.setVisibility(View.VISIBLE);
          for (int i=0; i < mHostControls.getChildCount(); i++) {
            mHostControls.getChildAt(i).setVisibility(View.VISIBLE);
          }
        }
 else {
          mParticipantControls.setVisibility(View.VISIBLE);
          for (int i=0; i < mParticipantControls.getChildCount(); i++) {
            mParticipantControls.getChildAt(i).setVisibility(View.VISIBLE);
          }
          Log.v(TAG,mThisUser.getInv_status() + ""String_Node_Str"");
          if (mThisUser.getInv_status().equals(""String_Node_Str"")) {
            mAcceptButton.setVisibility(View.GONE);
          }
 else           if (mThisUser.getInv_status().equals(""String_Node_Str"")) {
            mDeniedButton.setVisibility(View.GONE);
          }
        }
        break;
      }
case 2:
{
      mStatusButton.setText(""String_Node_Str"");
      mStatusButton.setVisibility(View.VISIBLE);
      break;
    }
case 3:
{
    mStatusButton.setText(""String_Node_Str"");
    mStatusButton.setBackgroundResource(R.color.green);
    mStatusButton.setVisibility(View.VISIBLE);
    break;
  }
case 4:
{
  mStatusButton.setText(""String_Node_Str"");
  mStatusButton.setBackgroundResource(R.color.red);
  mStatusButton.setVisibility(View.VISIBLE);
  break;
}
case 5:
{
mStatusButton.setText(""String_Node_Str"");
mStatusButton.setBackgroundResource(R.color.red);
mStatusButton.setVisibility(View.VISIBLE);
break;
}
case 7:
{
mStatusButton.setText(""String_Node_Str"");
mStatusButton.setVisibility(View.VISIBLE);
break;
}
}
}
 else {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}","@Subscribe public void onOnGetInvitationEvent(OnOneInvitationEvent e){
  mInvitation=e.get();
  if (mInvitation != null) {
    mHostControls.setVisibility(LinearLayout.GONE);
    mParticipantControls.setVisibility(LinearLayout.GONE);
    mStatusButton.setVisibility(Button.GONE);
    mAcceptButton.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT,1));
    mDeniedButton.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT,1));
    for (int i=0; i < mHostControls.getChildCount(); i++) {
      View view=mHostControls.getChildAt(i);
      view.setVisibility(View.GONE);
    }
    for (int i=0; i < mParticipantControls.getChildCount(); i++) {
      View view=mParticipantControls.getChildAt(i);
      view.setVisibility(View.GONE);
    }
    progressDialog.hide();
    Restaurant restaurant=mInvitation.getOrder().getRestaurant();
    if (restaurant.getPic() != null && !restaurant.getPic().isEmpty()) {
      Picasso.with(this).load(""String_Node_Str"" + restaurant.getPic()).placeholder(R.drawable.resto_big).into(mRestaurantCoverImageView);
    }
    mRestaurantName.setText(mInvitation.getOrder().getRestaurant().getName());
    String date=mInvitation.getOrder().getFormatDate() + ""String_Node_Str"" + mInvitation.getOrder().getStart_time()+ ""String_Node_Str"";
    mDateTextView.setText(date);
    Date orderNow=null;
    long currentTimestamp=new Date().getTime();
    Log.v(""String_Node_Str"",currentTimestamp + ""String_Node_Str"");
    orderNow=mInvitation.getOrder().getrequestDate();
    long eventTimestamp=orderNow.getTime() + mInvitation.getOrder().getStart_time() * 1000 * 60* 60;
    Log.v(""String_Node_Str"",eventTimestamp + ""String_Node_Str"");
    if (currentTimestamp < eventTimestamp) {
      time=new CountDown(eventTimestamp - currentTimestamp,1000);
      time.start();
    }
 else {
      mCountDownTextView.setText(""String_Node_Str"");
    }
    mAddressTextView.setText(mInvitation.getOrder().getRestaurant().getAddress());
    int nbParticipantComming=0;
    List<User> userList=mInvitation.getParticipants();
    for (int i=0; i < userList.size(); ++i) {
      if (userList.get(i).getCust_id() == mUserID) {
        mThisUser=userList.get(i);
      }
      if (userList.get(i).getInv_status().equals(""String_Node_Str"")) {
        nbParticipantComming+=1;
      }
    }
    mFriendAdapter.update(userList);
    setListViewHeightBasedOnChildren(mInFriendsListView);
    List<Map<String,Object>> listT=new ArrayList<Map<String,Object>>();
    Map<String,Object> map;
    List<Dishe> disheList=mInvitation.getOrder().getDishes();
    for (int i=0; i < disheList.size(); ++i) {
      map=new HashMap<String,Object>();
      String disheName=disheList.get(i).getName();
      if (disheName.length() > 0) {
        disheName=String.valueOf(disheName.charAt(0)).toUpperCase() + disheName.subSequence(1,disheName.length());
      }
      map.put(""String_Node_Str"",disheName);
      map.put(""String_Node_Str"",+disheList.get(i).getPrice() + ""String_Node_Str"");
      map.put(""String_Node_Str"",disheList.get(i).getQuantity() + ""String_Node_Str"");
      listT.add(map);
    }
    SimpleAdapter dishAdapterTmp=new SimpleAdapter(this,listT,R.layout.dishe_item_list2,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new int[]{R.id.DisheName2,R.id.DishePrice2,R.id.DisheNum2});
    mDishesListView.setAdapter(dishAdapterTmp);
    setListViewHeightBasedOnChildren(mDishesListView);
    mTotalPrice.setText(mInvitation.getOrder().getTotal_price() + ""String_Node_Str"");
    mPricePerParticipant.setText((mInvitation.getOrder().getTotal_price() / (nbParticipantComming)) + ""String_Node_Str"");
switch (mInvitation.getOrder().getStatus()) {
case 1:
{
        if (mThisUser.isIs_host()) {
          mHostControls.setVisibility(View.VISIBLE);
          for (int i=0; i < mHostControls.getChildCount(); i++) {
            mHostControls.getChildAt(i).setVisibility(View.VISIBLE);
          }
        }
 else {
          mParticipantControls.setVisibility(View.VISIBLE);
          for (int i=0; i < mParticipantControls.getChildCount(); i++) {
            mParticipantControls.getChildAt(i).setVisibility(View.VISIBLE);
          }
          Log.v(TAG,mThisUser.getInv_status() + ""String_Node_Str"");
          if (mThisUser.getInv_status().equals(""String_Node_Str"")) {
            mAcceptButton.setVisibility(View.GONE);
          }
 else           if (mThisUser.getInv_status().equals(""String_Node_Str"")) {
            mDeniedButton.setVisibility(View.GONE);
          }
        }
        break;
      }
case 2:
{
      mStatusButton.setText(""String_Node_Str"");
      mStatusButton.setVisibility(View.VISIBLE);
      break;
    }
case 3:
{
    mStatusButton.setText(""String_Node_Str"");
    mStatusButton.setBackgroundResource(R.color.green);
    mStatusButton.setVisibility(View.VISIBLE);
    break;
  }
case 4:
{
  mStatusButton.setText(""String_Node_Str"");
  mStatusButton.setBackgroundResource(R.color.red);
  mStatusButton.setVisibility(View.VISIBLE);
  break;
}
case 5:
{
mStatusButton.setText(""String_Node_Str"");
mStatusButton.setBackgroundResource(R.color.red);
mStatusButton.setVisibility(View.VISIBLE);
break;
}
case 7:
{
mStatusButton.setText(""String_Node_Str"");
mStatusButton.setVisibility(View.VISIBLE);
break;
}
}
}
 else {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}",0.8894564027727107
36028,"public String getFormatDate(){
  String date=request_date.substring(0,10);
  date+=""String_Node_Str"" + start_time + ""String_Node_Str"";
  return date;
}","public String getFormatDate(){
  String dateString=""String_Node_Str"";
  try {
    Date date=(new SimpleDateFormat(""String_Node_Str"")).parse(request_date.replaceAll(""String_Node_Str"",""String_Node_Str""));
    dateString=new SimpleDateFormat(""String_Node_Str"").format(date);
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  return dateString;
}",0.2480314960629921
36029,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  init();
  setContentView(R.layout.activity_order_edit);
  ref=this;
  mRestaurantID=getIntent().getIntExtra(ARG_RESTAURANT_ID,0);
  start=(Spinner)findViewById(R.id.spinner);
  end=(Spinner)findViewById(R.id.spinner2);
  mRestaurantName=(TextView)findViewById(R.id.EventEdit_RestaurantName);
  mCoverImageView=(ImageView)findViewById(R.id.EventEdit_Cover);
  start.setAdapter(adapter);
  end.setAdapter(adapter2);
  start.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if ((position + 11 + end.getSelectedItemPosition()+ 1) <= 24) {
        order.setStart_time(position + 11);
        order.setEnd_time(end.getSelectedItemPosition() + 1);
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  end.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (order.getStart_time() + position + 1 <= 24) {
        order.setEnd_time(order.getStart_time() + position + 1);
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mDate=(DatePicker)findViewById(R.id.datePicker);
  mDate.init(2014,4,18,new DatePicker.OnDateChangedListener(){
    @Override public void onDateChanged(    DatePicker datePicker,    int i,    int i2,    int i3){
      order.setRequest_date(i + ""String_Node_Str"" + i2+ ""String_Node_Str""+ i3);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ (i2 + 1)+ ""String_Node_Str""+ i3);
    }
  }
);
  mDishes=(ListView)findViewById(R.id.DishList);
  LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mDishAdapter=new DishAdapter(this,inflater);
  mDishes.setAdapter(mDishAdapter);
  deleteDish=(Button)mDishes.findViewById(R.id.delete);
  friendList=(TextView)findViewById(R.id.friendList);
  mAddFriend=(Button)findViewById(R.id.addFriend);
  mAddFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings=new String[friends.size()];
      for (int i=0; i < friends.size(); i++) {
        itemStrings[i]=friends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setItems(itemStrings,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String tmp=friendList.getText().toString();
          tmp+=itemStrings[which] + ""String_Node_Str"";
          friendList.setText(tmp);
          User t=friends.get(which);
          inFriends.add(t);
          friends.remove(which);
        }
      }
).create().show();
    }
  }
);
  mDelFriend=(Button)findViewById(R.id.delFriend);
  mDelFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings2=new String[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        itemStrings2[i]=inFriends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setItems(itemStrings2,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          if (which == 0)           Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
 else {
            friends.add(inFriends.get(which));
            inFriends.remove(which);
            String tmp=""String_Node_Str"";
            for (int i=0; i < inFriends.size(); i++) {
              tmp+=inFriends.get(i).getName() + ""String_Node_Str"";
            }
            friendList.setText(tmp);
          }
        }
      }
).create().show();
    }
  }
);
  mSendInvitationButton=(Button)findViewById(R.id.SendActivityButton);
  mSendInvitationButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      order.setCustomer_id(cust_id);
      order.setRestaurant_id(mRestaurantID);
      int[] l=new int[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        l[i]=inFriends.get(i).getCust_id();
      }
      order.setCustomer_ids(l);
      List<Dishe> dl=new ArrayList<Dishe>();
      for (int i=0; i < dishes.size(); i++) {
        if (dishes.get(i).getQuantity() > 0) {
          dl.add(dishes.get(i));
        }
      }
      if (dl.size() == 0) {
        new AlertDialog.Builder(OrderEditActivity.this).setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",null).show();
        return;
      }
      order.setDishes(dl);
      progressDialog=new ProgressDialog(ref);
      progressDialog.setTitle(""String_Node_Str"");
      progressDialog.setMessage(""String_Node_Str"");
      progressDialog.show();
      BusProvider.get().post(new SaveOrderEvent(order));
      System.out.println(new Gson().toJson(order));
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  init();
  setContentView(R.layout.activity_order_edit);
  ref=this;
  mRestaurantID=getIntent().getIntExtra(ARG_RESTAURANT_ID,0);
  start=(Spinner)findViewById(R.id.spinner);
  end=(Spinner)findViewById(R.id.spinner2);
  mRestaurantName=(TextView)findViewById(R.id.EventEdit_RestaurantName);
  mCoverImageView=(ImageView)findViewById(R.id.EventEdit_Cover);
  start.setAdapter(adapter);
  end.setAdapter(adapter2);
  start.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if ((position + 11 + end.getSelectedItemPosition()+ 1) <= 24) {
        order.setStart_time(position + 11);
        order.setEnd_time(end.getSelectedItemPosition() + 1);
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  end.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (order.getStart_time() + position + 1 <= 24) {
        order.setEnd_time(order.getStart_time() + position + 1);
      }
 else {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mDate=(DatePicker)findViewById(R.id.datePicker);
  mDate.init(2014,4,18,new DatePicker.OnDateChangedListener(){
    @Override public void onDateChanged(    DatePicker datePicker,    int i,    int i2,    int i3){
      order.setRequest_date(i + ""String_Node_Str"" + (i2 + 1)+ ""String_Node_Str""+ i3);
    }
  }
);
  mDishes=(ListView)findViewById(R.id.DishList);
  LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mDishAdapter=new DishAdapter(this,inflater);
  mDishes.setAdapter(mDishAdapter);
  deleteDish=(Button)mDishes.findViewById(R.id.delete);
  friendList=(TextView)findViewById(R.id.friendList);
  mAddFriend=(Button)findViewById(R.id.addFriend);
  mAddFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings=new String[friends.size()];
      for (int i=0; i < friends.size(); i++) {
        itemStrings[i]=friends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setItems(itemStrings,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String tmp=friendList.getText().toString();
          tmp+=itemStrings[which] + ""String_Node_Str"";
          friendList.setText(tmp);
          User t=friends.get(which);
          inFriends.add(t);
          friends.remove(which);
        }
      }
).create().show();
    }
  }
);
  mDelFriend=(Button)findViewById(R.id.delFriend);
  mDelFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings2=new String[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        itemStrings2[i]=inFriends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setItems(itemStrings2,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          if (which == 0)           Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
 else {
            friends.add(inFriends.get(which));
            inFriends.remove(which);
            String tmp=""String_Node_Str"";
            for (int i=0; i < inFriends.size(); i++) {
              tmp+=inFriends.get(i).getName() + ""String_Node_Str"";
            }
            friendList.setText(tmp);
          }
        }
      }
).create().show();
    }
  }
);
  mSendInvitationButton=(Button)findViewById(R.id.SendActivityButton);
  mSendInvitationButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      order.setCustomer_id(cust_id);
      order.setRestaurant_id(mRestaurantID);
      int[] l=new int[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        l[i]=inFriends.get(i).getCust_id();
      }
      order.setCustomer_ids(l);
      List<Dishe> dl=new ArrayList<Dishe>();
      for (int i=0; i < dishes.size(); i++) {
        if (dishes.get(i).getQuantity() > 0) {
          dl.add(dishes.get(i));
        }
      }
      if (dl.size() == 0) {
        new AlertDialog.Builder(OrderEditActivity.this).setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",null).show();
        return;
      }
      order.setDishes(dl);
      progressDialog=new ProgressDialog(ref);
      progressDialog.setTitle(""String_Node_Str"");
      progressDialog.setMessage(""String_Node_Str"");
      progressDialog.show();
      BusProvider.get().post(new SaveOrderEvent(order));
      System.out.println(new Gson().toJson(order));
    }
  }
);
}",0.9911748483177054
36030,"@Override public void onDateChanged(DatePicker datePicker,int i,int i2,int i3){
  order.setRequest_date(i + ""String_Node_Str"" + i2+ ""String_Node_Str""+ i3);
  System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ (i2 + 1)+ ""String_Node_Str""+ i3);
}","@Override public void onDateChanged(DatePicker datePicker,int i,int i2,int i3){
  order.setRequest_date(i + ""String_Node_Str"" + (i2 + 1)+ ""String_Node_Str""+ i3);
}",0.7799043062200957
36031,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Invitation[] invitations=new Invitation[0];
  adapter=new MySimpleArrayAdapter(getActivity(),invitations);
  setListAdapter(adapter);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  adapter=new MySimpleArrayAdapter(getActivity(),new ArrayList<Invitation>());
  setListAdapter(adapter);
}",0.5342465753424658
36032,"public MySimpleArrayAdapter(Context context,Invitation[] values){
  super(context,R.layout.invitation_item_list,values);
  this.context=context;
  this.values=values;
}","public MySimpleArrayAdapter(Context context,ArrayList<Invitation> values){
  super(context,R.layout.invitation_item_list,values);
  this.context=context;
  this.values=values;
}",0.9623188405797102
36033,"public void update(Invitation[] values){
  Log.v(TAG,""String_Node_Str"" + values.length + ""String_Node_Str"");
  this.values=values;
  this.notifyDataSetChanged();
}","public void update(List<Invitation> invitations){
  Log.v(TAG,""String_Node_Str"" + invitations.size() + ""String_Node_Str"");
  this.values.clear();
  for (int i=0; i < invitations.size(); ++i) {
    this.values.add(invitations.get(i));
  }
  this.notifyDataSetChanged();
}",0.6235565819861432
36034,"@Subscribe public void OnInvitationListReceivedEvent(InvitationListReceivedEvent e){
  Log.v(TAG,""String_Node_Str"");
  List<Invitation> l=e.get();
  if (l != null) {
    for (int i=0; i < l.size(); i++) {
      adapter.add(l.get(i));
    }
    adapter.notifyDataSetChanged();
  }
 else {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}","@Subscribe public void OnInvitationListReceivedEvent(InvitationListReceivedEvent e){
  Log.v(TAG,""String_Node_Str"");
  List<Invitation> l=e.get();
  if (l != null) {
    adapter.update(l);
  }
 else {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}",0.8462709284627092
36035,"@Override public long getItemId(int position){
  return values[position].getInv_id();
}","@Override public long getItemId(int position){
  return values.get(position).getInv_id();
}",0.9550561797752808
36036,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(R.layout.invitation_item_list,parent,false);
  TextView nameTextView=(TextView)rowView.findViewById(R.id.EventName);
  TextView text1TextView=(TextView)rowView.findViewById(R.id.EventText1);
  TextView text2TextView=(TextView)rowView.findViewById(R.id.EventText2);
  ImageView imageView=(ImageView)rowView.findViewById(R.id.icon);
  text1TextView.setText(values[position].getOrder().getRestaurant().getName());
  return rowView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(R.layout.invitation_item_list,parent,false);
  TextView nameTextView=(TextView)rowView.findViewById(R.id.EventName);
  TextView text1TextView=(TextView)rowView.findViewById(R.id.EventText1);
  TextView text2TextView=(TextView)rowView.findViewById(R.id.EventText2);
  ImageView imageView=(ImageView)rowView.findViewById(R.id.icon);
  text1TextView.setText(""String_Node_Str"");
  return rowView;
}",0.9310897435897436
36037,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  order.setRequest_period(list.get(position));
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (position == 0) {
    order.setRequest_period(1);
  }
 else   if (position == 1) {
    order.setRequest_period(5);
  }
 else   if (position == 2) {
    order.setRequest_period(7);
  }
}",0.5781990521327014
36038,"private void init(){
  order=new Order();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,list);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  SharedPreferences preferences=this.getSharedPreferences(SHARED_PREF_DB_NAME,MODE_PRIVATE);
  cust_id=preferences.getInt(PREF_ACCOUNT_ID,1);
}","private void init(){
  order=new Order();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,list);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  SharedPreferences preferences=this.getSharedPreferences(SHARED_PREF_DB_NAME,MODE_PRIVATE);
  cust_id=preferences.getInt(PREF_ACCOUNT_ID,1);
  order.setRequest_date(""String_Node_Str"");
  order.setRequest_period(1);
}",0.9230769230769232
36039,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  init();
  setContentView(R.layout.activity_order_edit);
  ref=this;
  mRestaurantID=getIntent().getIntExtra(ARG_RESTAURANT_ID,0);
  mPeriod=(Spinner)findViewById(R.id.spinner);
  mPeriod.setAdapter(adapter);
  mPeriod.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      order.setRequest_period(list.get(position));
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mDate=(DatePicker)findViewById(R.id.datePicker);
  mDate.init(2014,5,14,new DatePicker.OnDateChangedListener(){
    @Override public void onDateChanged(    DatePicker datePicker,    int i,    int i2,    int i3){
      order.setRequest_date(i + ""String_Node_Str"" + i2+ ""String_Node_Str""+ i3);
    }
  }
);
  mDishes=(ListView)findViewById(R.id.DishList);
  mDishes.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      TextView tmp=(TextView)arg1.findViewById(R.id.textView2);
      int i=Integer.parseInt(tmp.getText().toString());
      i++;
      tmp.setText(i + ""String_Node_Str"");
      dishes.get(arg2).addDish();
    }
  }
);
  deleteDish=(Button)mDishes.findViewById(R.id.delete);
  friendList=(TextView)findViewById(R.id.friendList);
  mAddFriend=(Button)findViewById(R.id.addFriend);
  mAddFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings=new String[friends.size()];
      for (int i=0; i < friends.size(); i++) {
        itemStrings[i]=friends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setIcon(android.R.drawable.ic_lock_lock).setItems(itemStrings,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String tmp=friendList.getText().toString();
          tmp+=itemStrings[which] + ""String_Node_Str"";
          friendList.setText(tmp);
          User t=friends.get(which);
          inFriends.add(t);
          friends.remove(which);
        }
      }
).create().show();
    }
  }
);
  mDelFriend=(Button)findViewById(R.id.delFriend);
  mDelFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings=new String[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        itemStrings[i]=inFriends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setIcon(android.R.drawable.ic_lock_lock).setItems(itemStrings,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          friends.add(inFriends.get(which));
          inFriends.remove(which);
          String tmp=""String_Node_Str"";
          for (int i=0; i < inFriends.size(); i++) {
            tmp+=inFriends.get(i).getName() + ""String_Node_Str"";
          }
          friendList.setText(tmp);
        }
      }
).create().show();
    }
  }
);
  mSendInvitationButton=(Button)findViewById(R.id.SendActivityButton);
  mSendInvitationButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      order.setCustomer_id(cust_id);
      order.setRestaurant_id(mRestaurantID);
      order.setRequest_date(""String_Node_Str"");
      order.setRequest_period(""String_Node_Str"");
      int[] l=new int[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        l[i]=inFriends.get(i).getCust_id();
      }
      order.setCustomer_ids(l);
      List<Dishe> dl=new ArrayList<Dishe>();
      for (int i=0; i < dishes.size(); i++) {
        if (dishes.get(i).getQuantity() > 0) {
          dl.add(dishes.get(i));
        }
      }
      order.setDishes(dl);
      progressDialog=new ProgressDialog(ref);
      progressDialog.setTitle(""String_Node_Str"");
      progressDialog.setMessage(""String_Node_Str"");
      progressDialog.show();
      BusProvider.get().post(new SaveOrderEvent(order));
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  init();
  setContentView(R.layout.activity_order_edit);
  ref=this;
  mRestaurantID=getIntent().getIntExtra(ARG_RESTAURANT_ID,0);
  mPeriod=(Spinner)findViewById(R.id.spinner);
  mPeriod.setAdapter(adapter);
  mPeriod.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (position == 0) {
        order.setRequest_period(1);
      }
 else       if (position == 1) {
        order.setRequest_period(5);
      }
 else       if (position == 2) {
        order.setRequest_period(7);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mDate=(DatePicker)findViewById(R.id.datePicker);
  mDate.init(2014,5,14,new DatePicker.OnDateChangedListener(){
    @Override public void onDateChanged(    DatePicker datePicker,    int i,    int i2,    int i3){
      order.setRequest_date(i + ""String_Node_Str"" + i2+ ""String_Node_Str""+ i3);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ i2+ ""String_Node_Str""+ i3);
    }
  }
);
  mDishes=(ListView)findViewById(R.id.DishList);
  mDishes.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      TextView tmp=(TextView)arg1.findViewById(R.id.textView2);
      int i=Integer.parseInt(tmp.getText().toString());
      i++;
      tmp.setText(i + ""String_Node_Str"");
      dishes.get(arg2).addDish();
    }
  }
);
  deleteDish=(Button)mDishes.findViewById(R.id.delete);
  friendList=(TextView)findViewById(R.id.friendList);
  mAddFriend=(Button)findViewById(R.id.addFriend);
  mAddFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings=new String[friends.size()];
      for (int i=0; i < friends.size(); i++) {
        itemStrings[i]=friends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setIcon(android.R.drawable.ic_lock_lock).setItems(itemStrings,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String tmp=friendList.getText().toString();
          tmp+=itemStrings[which] + ""String_Node_Str"";
          friendList.setText(tmp);
          User t=friends.get(which);
          inFriends.add(t);
          friends.remove(which);
        }
      }
).create().show();
    }
  }
);
  mDelFriend=(Button)findViewById(R.id.delFriend);
  mDelFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings2=new String[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        itemStrings2[i]=inFriends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setIcon(android.R.drawable.ic_lock_lock).setItems(itemStrings2,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          friends.add(inFriends.get(which));
          inFriends.remove(which);
          String tmp=""String_Node_Str"";
          for (int i=0; i < inFriends.size(); i++) {
            tmp+=inFriends.get(i).getName() + ""String_Node_Str"";
          }
          friendList.setText(tmp);
        }
      }
).create().show();
    }
  }
);
  mSendInvitationButton=(Button)findViewById(R.id.SendActivityButton);
  mSendInvitationButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      order.setCustomer_id(cust_id);
      order.setRestaurant_id(mRestaurantID);
      int[] l=new int[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        l[i]=inFriends.get(i).getCust_id();
      }
      order.setCustomer_ids(l);
      List<Dishe> dl=new ArrayList<Dishe>();
      for (int i=0; i < dishes.size(); i++) {
        if (dishes.get(i).getQuantity() > 0) {
          dl.add(dishes.get(i));
        }
      }
      order.setDishes(dl);
      progressDialog=new ProgressDialog(ref);
      progressDialog.setTitle(""String_Node_Str"");
      progressDialog.setMessage(""String_Node_Str"");
      progressDialog.show();
      BusProvider.get().post(new SaveOrderEvent(order));
      System.out.println(new Gson().toJson(order));
    }
  }
);
}",0.845823704192803
36040,"@Override public void onDateChanged(DatePicker datePicker,int i,int i2,int i3){
  order.setRequest_date(i + ""String_Node_Str"" + i2+ ""String_Node_Str""+ i3);
}","@Override public void onDateChanged(DatePicker datePicker,int i,int i2,int i3){
  order.setRequest_date(i + ""String_Node_Str"" + i2+ ""String_Node_Str""+ i3);
  System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ i2+ ""String_Node_Str""+ i3);
}",0.7733990147783252
36041,"@Override public void onClick(View view){
  order.setCustomer_id(cust_id);
  order.setRestaurant_id(mRestaurantID);
  order.setRequest_date(""String_Node_Str"");
  order.setRequest_period(""String_Node_Str"");
  int[] l=new int[inFriends.size()];
  for (int i=0; i < inFriends.size(); i++) {
    l[i]=inFriends.get(i).getCust_id();
  }
  order.setCustomer_ids(l);
  List<Dishe> dl=new ArrayList<Dishe>();
  for (int i=0; i < dishes.size(); i++) {
    if (dishes.get(i).getQuantity() > 0) {
      dl.add(dishes.get(i));
    }
  }
  order.setDishes(dl);
  progressDialog=new ProgressDialog(ref);
  progressDialog.setTitle(""String_Node_Str"");
  progressDialog.setMessage(""String_Node_Str"");
  progressDialog.show();
  BusProvider.get().post(new SaveOrderEvent(order));
}","@Override public void onClick(View view){
  order.setCustomer_id(cust_id);
  order.setRestaurant_id(mRestaurantID);
  int[] l=new int[inFriends.size()];
  for (int i=0; i < inFriends.size(); i++) {
    l[i]=inFriends.get(i).getCust_id();
  }
  order.setCustomer_ids(l);
  List<Dishe> dl=new ArrayList<Dishe>();
  for (int i=0; i < dishes.size(); i++) {
    if (dishes.get(i).getQuantity() > 0) {
      dl.add(dishes.get(i));
    }
  }
  order.setDishes(dl);
  progressDialog=new ProgressDialog(ref);
  progressDialog.setTitle(""String_Node_Str"");
  progressDialog.setMessage(""String_Node_Str"");
  progressDialog.show();
  BusProvider.get().post(new SaveOrderEvent(order));
  System.out.println(new Gson().toJson(order));
}",0.3274932614555256
36042,"@Subscribe public void OnRestaurantDatasReceived(OnRestaurantDatasReceivedEvent e){
  progressDialog.dismiss();
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  restaurant=e.getRestaurant();
  order.setRestaurant(restaurant);
  friends=e.getFriends();
  dishes=restaurant.getDishes();
  for (int i=0; i < friends.size(); i++) {
    User t=friends.get(i);
    if (t.getCust_id() == cust_id) {
      inFriends.add(t);
      friends.remove(i);
      friendList.setText(t.getName() + ""String_Node_Str"");
      break;
    }
  }
  ArrayList<HashMap<String,Object>> listItem=new ArrayList<HashMap<String,Object>>();
  for (int i=0; i < dishes.size(); i++) {
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(""String_Node_Str"",dishes.get(i).getD_name());
    map.put(""String_Node_Str"",dishes.get(i).getD_price());
    map.put(""String_Node_Str"",dishes.get(i).getQuantity());
    listItem.add(map);
  }
  SimpleAdapter listItemAdapter=new SimpleAdapter(this,listItem,R.layout.dishe_item_list,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new int[]{R.id.DisheName,R.id.textView2,R.id.DishePrice});
  mDishes.setAdapter(listItemAdapter);
}","@Subscribe public void OnRestaurantDatasReceived(OnRestaurantDatasReceivedEvent e){
  progressDialog.dismiss();
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  restaurant=e.getRestaurant();
  order.setRestaurant(restaurant);
  friends=e.getFriends();
  dishes=restaurant.getDishes();
  if (inFriends.size() == 0) {
    for (int i=0; i < friends.size(); i++) {
      User t=friends.get(i);
      if (t.getCust_id() == cust_id) {
        inFriends.add(t);
        friends.remove(i);
        friendList.setText(t.getName() + ""String_Node_Str"");
        break;
      }
    }
  }
  ArrayList<HashMap<String,Object>> listItem=new ArrayList<HashMap<String,Object>>();
  for (int i=0; i < dishes.size(); i++) {
    HashMap<String,Object> map=new HashMap<String,Object>();
    map.put(""String_Node_Str"",dishes.get(i).getName());
    map.put(""String_Node_Str"",dishes.get(i).getPrice());
    map.put(""String_Node_Str"",dishes.get(i).getQuantity());
    listItem.add(map);
  }
  SimpleAdapter listItemAdapter=new SimpleAdapter(this,listItem,R.layout.dishe_item_list,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new int[]{R.id.DisheName,R.id.textView2,R.id.DishePrice});
  mDishes.setAdapter(listItemAdapter);
}",0.9305954825462012
36043,"public void setRequest_period(String request_period){
  this.request_period=request_period;
}","public void setRequest_period(int request_period){
  this.request_period=request_period;
}",0.9726775956284152
36044,"public String getRequest_period(){
  return request_period;
}","public int getRequest_period(){
  return request_period;
}",0.957983193277311
36045,"@Override public void onReceive(final Context context,Intent intent){
  if (intent.getAction().equals(PushConstants.ACTION_RECEIVE)) {
    final String method=intent.getStringExtra(PushConstants.EXTRA_METHOD);
    int errorCode=intent.getIntExtra(PushConstants.EXTRA_ERROR_CODE,PushConstants.ERROR_SUCCESS);
    String content=""String_Node_Str"";
    if (intent.getByteArrayExtra(PushConstants.EXTRA_CONTENT) != null) {
      content=new String(intent.getByteArrayExtra(PushConstants.EXTRA_CONTENT));
    }
    Log.i(""String_Node_Str"",""String_Node_Str"" + method + ""String_Node_Str""+ errorCode+ ""String_Node_Str""+ content);
    if (errorCode == 0) {
      JSONObject contentJson;
      JSONObject paramsJson;
      try {
        contentJson=new JSONObject(content);
        String paramsString=contentJson.getString(""String_Node_Str"");
        paramsJson=new JSONObject(paramsString);
        String userId=paramsJson.getString(""String_Node_Str"");
        Log.i(""String_Node_Str"",""String_Node_Str"" + userId);
        SharedPreferences preferences=context.getSharedPreferences(""String_Node_Str"",0);
        preferences.edit().putString(""String_Node_Str"",userId).commit();
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
 else   if (intent.getAction().equals(PushConstants.ACTION_MESSAGE)) {
    String message=intent.getExtras().getString(PushConstants.EXTRA_PUSH_MESSAGE_STRING);
    Toast.makeText(context,""String_Node_Str"" + message,Toast.LENGTH_SHORT).show();
  }
 else   if (intent.getAction().equals(PushConstants.ACTION_RECEIVER_NOTIFICATION_CLICK)) {
    String myMsg=intent.getStringExtra(PushConstants.EXTRA_EXTRA);
    Log.i(""String_Node_Str"",myMsg);
    try {
      JSONObject myJsonObj=new JSONObject(myMsg);
      int invitation_id=myJsonObj.getInt(""String_Node_Str"");
      Intent myIntent=OrderReviewActivity.createIntent(context,invitation_id);
      context.startActivity(myIntent);
      Toast.makeText(context,myMsg,Toast.LENGTH_SHORT).show();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void onReceive(final Context context,Intent intent){
  if (intent.getAction().equals(PushConstants.ACTION_RECEIVE)) {
    final String method=intent.getStringExtra(PushConstants.EXTRA_METHOD);
    int errorCode=intent.getIntExtra(PushConstants.EXTRA_ERROR_CODE,PushConstants.ERROR_SUCCESS);
    String content=""String_Node_Str"";
    if (intent.getByteArrayExtra(PushConstants.EXTRA_CONTENT) != null) {
      content=new String(intent.getByteArrayExtra(PushConstants.EXTRA_CONTENT));
    }
    Log.i(""String_Node_Str"",""String_Node_Str"" + method + ""String_Node_Str""+ errorCode+ ""String_Node_Str""+ content);
    if (errorCode == 0) {
      JSONObject contentJson;
      JSONObject paramsJson;
      try {
        contentJson=new JSONObject(content);
        String paramsString=contentJson.getString(""String_Node_Str"");
        paramsJson=new JSONObject(paramsString);
        String userId=paramsJson.getString(""String_Node_Str"");
        Log.i(""String_Node_Str"",""String_Node_Str"" + userId);
        SharedPreferences preferences=context.getSharedPreferences(""String_Node_Str"",0);
        preferences.edit().putString(""String_Node_Str"",userId).commit();
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
 else   if (intent.getAction().equals(PushConstants.ACTION_MESSAGE)) {
    String message=intent.getExtras().getString(PushConstants.EXTRA_PUSH_MESSAGE_STRING);
    Toast.makeText(context,""String_Node_Str"" + message,Toast.LENGTH_SHORT).show();
  }
 else   if (intent.getAction().equals(PushConstants.ACTION_RECEIVER_NOTIFICATION_CLICK)) {
    String myMsg=intent.getStringExtra(PushConstants.EXTRA_EXTRA);
    Log.i(""String_Node_Str"",myMsg);
    try {
      JSONObject myJsonObj=new JSONObject(myMsg);
      int invitation_id=myJsonObj.getInt(""String_Node_Str"");
      Intent myIntent=OrderReviewActivity.createIntent(context,invitation_id);
      myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      context.startActivity(myIntent);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9349770364998792
36046,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  init();
  setContentView(R.layout.activity_order_edit);
  ref=this;
  mRestaurantID=getIntent().getIntExtra(ARG_RESTAURANT_ID,0);
  mPeriod=(Spinner)findViewById(R.id.spinner);
  mPeriod.setAdapter(adapter);
  mPeriod.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (position == 0) {
        order.setStart_time(17);
        order.setEnd_time(19);
      }
 else       if (position == 1) {
        order.setStart_time(17);
        order.setEnd_time(19);
      }
 else       if (position == 2) {
        order.setStart_time(17);
        order.setEnd_time(19);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mDate=(DatePicker)findViewById(R.id.datePicker);
  mDate.init(2014,5,14,new DatePicker.OnDateChangedListener(){
    @Override public void onDateChanged(    DatePicker datePicker,    int i,    int i2,    int i3){
      order.setRequest_date(i + ""String_Node_Str"" + i2+ ""String_Node_Str""+ i3);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ i2+ ""String_Node_Str""+ i3);
    }
  }
);
  mDishes=(ListView)findViewById(R.id.DishList);
  mDishes.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      TextView tmp=(TextView)arg1.findViewById(R.id.textView2);
      int i=Integer.parseInt(tmp.getText().toString());
      i++;
      tmp.setText(i + ""String_Node_Str"");
      dishes.get(arg2).addDish();
    }
  }
);
  deleteDish=(Button)mDishes.findViewById(R.id.delete);
  friendList=(TextView)findViewById(R.id.friendList);
  mAddFriend=(Button)findViewById(R.id.addFriend);
  mAddFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings=new String[friends.size()];
      for (int i=0; i < friends.size(); i++) {
        itemStrings[i]=friends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setIcon(android.R.drawable.ic_lock_lock).setItems(itemStrings,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String tmp=friendList.getText().toString();
          tmp+=itemStrings[which] + ""String_Node_Str"";
          friendList.setText(tmp);
          User t=friends.get(which);
          inFriends.add(t);
          friends.remove(which);
        }
      }
).create().show();
    }
  }
);
  mDelFriend=(Button)findViewById(R.id.delFriend);
  mDelFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings2=new String[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        itemStrings2[i]=inFriends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setIcon(android.R.drawable.ic_lock_lock).setItems(itemStrings2,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          friends.add(inFriends.get(which));
          inFriends.remove(which);
          String tmp=""String_Node_Str"";
          for (int i=0; i < inFriends.size(); i++) {
            tmp+=inFriends.get(i).getName() + ""String_Node_Str"";
          }
          friendList.setText(tmp);
        }
      }
).create().show();
    }
  }
);
  mSendInvitationButton=(Button)findViewById(R.id.SendActivityButton);
  mSendInvitationButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      order.setCustomer_id(cust_id);
      order.setRestaurant_id(mRestaurantID);
      int[] l=new int[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        l[i]=inFriends.get(i).getCust_id();
      }
      order.setCustomer_ids(l);
      List<Dishe> dl=new ArrayList<Dishe>();
      for (int i=0; i < dishes.size(); i++) {
        if (dishes.get(i).getQuantity() > 0) {
          dl.add(dishes.get(i));
        }
      }
      order.setDishes(dl);
      progressDialog=new ProgressDialog(ref);
      progressDialog.setTitle(""String_Node_Str"");
      progressDialog.setMessage(""String_Node_Str"");
      progressDialog.show();
      BusProvider.get().post(new SaveOrderEvent(order));
      System.out.println(new Gson().toJson(order));
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  init();
  setContentView(R.layout.activity_order_edit);
  ref=this;
  mRestaurantID=getIntent().getIntExtra(ARG_RESTAURANT_ID,0);
  mPeriod=(Spinner)findViewById(R.id.spinner);
  mPeriod.setAdapter(adapter);
  mPeriod.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (position == 0) {
        order.setStart_time(17);
        order.setEnd_time(19);
      }
 else       if (position == 1) {
        order.setStart_time(17);
        order.setEnd_time(19);
      }
 else       if (position == 2) {
        order.setStart_time(17);
        order.setEnd_time(19);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mDate=(DatePicker)findViewById(R.id.datePicker);
  mDate.init(2014,5,14,new DatePicker.OnDateChangedListener(){
    @Override public void onDateChanged(    DatePicker datePicker,    int i,    int i2,    int i3){
      order.setRequest_date(i + ""String_Node_Str"" + i2+ ""String_Node_Str""+ i3);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ i2+ ""String_Node_Str""+ i3);
    }
  }
);
  mDishes=(ListView)findViewById(R.id.DishList);
  mDishes.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      TextView tmp=(TextView)arg1.findViewById(R.id.textView2);
      int i=Integer.parseInt(tmp.getText().toString());
      i++;
      tmp.setText(i + ""String_Node_Str"");
      dishes.get(arg2).addDish();
    }
  }
);
  deleteDish=(Button)mDishes.findViewById(R.id.delete);
  friendList=(TextView)findViewById(R.id.friendList);
  mAddFriend=(Button)findViewById(R.id.addFriend);
  mAddFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      final String[] itemStrings=new String[friends.size()];
      for (int i=0; i < friends.size(); i++) {
        itemStrings[i]=friends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setIcon(android.R.drawable.ic_lock_lock).setItems(itemStrings,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String tmp=friendList.getText().toString();
          tmp+=itemStrings[which] + ""String_Node_Str"";
          friendList.setText(tmp);
          User t=friends.get(which);
          inFriends.add(t);
          friends.remove(which);
        }
      }
).create().show();
    }
  }
);
  mDelFriend=(Button)findViewById(R.id.delFriend);
  mDelFriend.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (inFriends.size() == 1)       return;
      final String[] itemStrings2=new String[inFriends.size() - 1];
      for (int i=1; i < inFriends.size(); i++) {
        itemStrings2[i]=inFriends.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(OrderEditActivity.this);
      builder.setTitle(""String_Node_Str"").setIcon(android.R.drawable.ic_lock_lock).setItems(itemStrings2,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          friends.add(inFriends.get(which + 1));
          inFriends.remove(which + 1);
          String tmp=""String_Node_Str"";
          for (int i=0; i < inFriends.size(); i++) {
            tmp+=inFriends.get(i).getName() + ""String_Node_Str"";
          }
          friendList.setText(tmp);
        }
      }
).create().show();
    }
  }
);
  mSendInvitationButton=(Button)findViewById(R.id.SendActivityButton);
  mSendInvitationButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      order.setCustomer_id(cust_id);
      order.setRestaurant_id(mRestaurantID);
      int[] l=new int[inFriends.size()];
      for (int i=0; i < inFriends.size(); i++) {
        l[i]=inFriends.get(i).getCust_id();
      }
      order.setCustomer_ids(l);
      List<Dishe> dl=new ArrayList<Dishe>();
      for (int i=0; i < dishes.size(); i++) {
        if (dishes.get(i).getQuantity() > 0) {
          dl.add(dishes.get(i));
        }
      }
      if (dl.size() == 0) {
        new AlertDialog.Builder(OrderEditActivity.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",null).show();
        return;
      }
      order.setDishes(dl);
      progressDialog=new ProgressDialog(ref);
      progressDialog.setTitle(""String_Node_Str"");
      progressDialog.setMessage(""String_Node_Str"");
      progressDialog.show();
      BusProvider.get().post(new SaveOrderEvent(order));
      System.out.println(new Gson().toJson(order));
    }
  }
);
}",0.9304089371733116
36047,"@Override public void onClick(View view){
  order.setCustomer_id(cust_id);
  order.setRestaurant_id(mRestaurantID);
  int[] l=new int[inFriends.size()];
  for (int i=0; i < inFriends.size(); i++) {
    l[i]=inFriends.get(i).getCust_id();
  }
  order.setCustomer_ids(l);
  List<Dishe> dl=new ArrayList<Dishe>();
  for (int i=0; i < dishes.size(); i++) {
    if (dishes.get(i).getQuantity() > 0) {
      dl.add(dishes.get(i));
    }
  }
  order.setDishes(dl);
  progressDialog=new ProgressDialog(ref);
  progressDialog.setTitle(""String_Node_Str"");
  progressDialog.setMessage(""String_Node_Str"");
  progressDialog.show();
  BusProvider.get().post(new SaveOrderEvent(order));
  System.out.println(new Gson().toJson(order));
}","@Override public void onClick(View view){
  order.setCustomer_id(cust_id);
  order.setRestaurant_id(mRestaurantID);
  int[] l=new int[inFriends.size()];
  for (int i=0; i < inFriends.size(); i++) {
    l[i]=inFriends.get(i).getCust_id();
  }
  order.setCustomer_ids(l);
  List<Dishe> dl=new ArrayList<Dishe>();
  for (int i=0; i < dishes.size(); i++) {
    if (dishes.get(i).getQuantity() > 0) {
      dl.add(dishes.get(i));
    }
  }
  if (dl.size() == 0) {
    new AlertDialog.Builder(OrderEditActivity.this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",null).show();
    return;
  }
  order.setDishes(dl);
  progressDialog=new ProgressDialog(ref);
  progressDialog.setTitle(""String_Node_Str"");
  progressDialog.setMessage(""String_Node_Str"");
  progressDialog.show();
  BusProvider.get().post(new SaveOrderEvent(order));
  System.out.println(new Gson().toJson(order));
}",0.8781973203410475
36048,"public static ForcedMovement createRelative(Player player,int xOffset1,int yOffset1,int xOffset2,int yOffset2){
  ForcedMovement fm=new ForcedMovement();
  Position p=player.getPosition();
  fm.x1=p.getLocalX() + xOffset1;
  fm.y1=p.getLocalY() + yOffset1;
  fm.x2=p.getLocalX() + xOffset2;
  fm.y2=p.getLocalY() + yOffset2;
  fm.destination=new Position(p.getX() + xOffset2,p.getY() + yOffset2);
  return fm;
}","public static ForcedMovement createRelative(Player player,int xOffset1,int yOffset1,int midDuration,int xOffset2,int yOffset2,int totalDuration){
  ForcedMovement fm=new ForcedMovement();
  fm.firstPosition=player.getPosition().copy(xOffset1,yOffset1);
  fm.secondPosition=player.getPosition().copy(xOffset2,yOffset2);
  fm.midDuration=ClientFrameTickConversion.ticksToFrames(midDuration);
  fm.duration=ClientFrameTickConversion.ticksToFrames(totalDuration);
  fm.durationTicks=totalDuration;
  return fm;
}",0.4766050054406964
36049,"@Override public void encode(PlayerUpdateMessage message,GameFrameBuilder builder){
  builder.put(DataType.BYTE,DataTransformation.NEGATE,2);
  builder.put(DataType.BYTE,2);
  builder.put(DataType.BYTE,DataTransformation.ADD,2);
  builder.put(DataType.BYTE,2);
  builder.put(DataType.SHORT,DataOrder.LITTLE,2);
  builder.put(DataType.SHORT,DataOrder.LITTLE,2);
  builder.put(DataType.BYTE,DataTransformation.NEGATE,2);
}","@Override public void encode(PlayerUpdateMessage message,GameFrameBuilder builder){
  builder.put(DataType.BYTE,DataTransformation.NEGATE,movement.getFirstPosition().getLocalX(message.getLastKnownRegion().getRegionX()));
  builder.put(DataType.BYTE,movement.getFirstPosition().getLocalY(message.getLastKnownRegion().getRegionY()));
  builder.put(DataType.BYTE,DataTransformation.ADD,movement.getSecondPosition().getLocalX(message.getLastKnownRegion().getRegionX()));
  builder.put(DataType.BYTE,movement.getSecondPosition().getLocalY(message.getLastKnownRegion().getRegionY()));
  builder.put(DataType.SHORT,DataOrder.LITTLE,movement.getMidDuration());
  builder.put(DataType.SHORT,DataOrder.LITTLE,movement.getDuration());
  builder.put(DataType.BYTE,DataTransformation.NEGATE,movement.getDirection());
}",0.6742857142857143
36050,"public ForceMovementPlayerBlock(Player player){
  super(0x400);
}","public ForceMovementPlayerBlock(Player player){
  super(0x400);
  this.movement=player.getForcedMove();
}",0.7647058823529411
36051,"public PlayerDescriptor(Player player,int[] tickets,boolean force){
  if (player.isActive()) {
    int id=player.getId() - 1;
    int ticket=player.getAppearanceTicket();
    if (tickets[id] != ticket || force) {
      tickets[id]=ticket;
      addBlock(new AppearancePlayerBlock(player));
    }
  }
  if (player.isChatUpdated())   addBlock(new ChatPlayerBlock(player));
  if (player.isHitOneUpdated())   addBlock(new HitOnePlayerBlock(player));
  if (player.isHitTwoUpdated())   addBlock(new HitTwoPlayerBlock(player));
  if (player.isChatForced())   addBlock(new ForceChatPlayerBlock(player));
  if (player.isAnimationUpdated())   addBlock(new AnimationPlayerBlock(player));
  if (player.isSpotAnimationUpdated())   addBlock(new SpotAnimationPlayerBlock(player));
  if (player.isTurnToPositionUpdated())   addBlock(new TurnToPositionPlayerBlock(player));
  if (player.isTurnToTargetUpdated())   addBlock(new TurnToMobPlayerBlock(player));
}","public PlayerDescriptor(Player player,int[] tickets,boolean force){
  if (player.isActive()) {
    int id=player.getId() - 1;
    int ticket=player.getAppearanceTicket();
    if (tickets[id] != ticket || force) {
      tickets[id]=ticket;
      addBlock(new AppearancePlayerBlock(player));
    }
  }
  if (player.isChatUpdated())   addBlock(new ChatPlayerBlock(player));
  if (player.isHitOneUpdated())   addBlock(new HitOnePlayerBlock(player));
  if (player.isHitTwoUpdated())   addBlock(new HitTwoPlayerBlock(player));
  if (player.isChatForced())   addBlock(new ForceChatPlayerBlock(player));
  if (player.isAnimationUpdated())   addBlock(new AnimationPlayerBlock(player));
  if (player.isSpotAnimationUpdated())   addBlock(new SpotAnimationPlayerBlock(player));
  if (player.isTurnToPositionUpdated())   addBlock(new TurnToPositionPlayerBlock(player));
  if (player.isTurnToTargetUpdated())   addBlock(new TurnToMobPlayerBlock(player));
  if (player.isForceMovementUpdated())   addBlock(new ForceMovementPlayerBlock(player));
}",0.9548910288900152
36052,"private void preprocess(NPC npc){
  npc.tick();
  npc.getWalkingQueue().tick();
  npc.getCombatHandler().tick();
  npc.getHits().tick();
}","private void preprocess(NPC npc){
  npc.tick();
  if (npc.getDefinition().isAttackable()) {
    npc.getSkillSet().tick(npc.getHealthRegen(),2);
    npc.getCombatHandler().tick();
    npc.getHits().tick();
  }
  npc.getWalkingQueue().tick();
}",0.4263157894736842
36053,"public int getUnnoted(){
  return (unnoted || swapId == -1) ? id : swapId;
}","public int getUnnoted(){
  return (!isNoted() || swapId == -1) ? id : swapId;
}",0.9419354838709676
36054,"@Override public void perform(LoginService service){
  player.stopAction();
  service.serializer.savePlayer(player);
  player.unregister();
  player.getFriends().logout();
}","@Override public void perform(LoginService service){
  service.serializer.savePlayer(player);
  player.unregister();
  World.getWorld().getPlayers().remove(player);
}",0.7610619469026548
36055,"public void addLogoutRequest(Player player){
synchronized (oldPlayers) {
    oldPlayers.add(player);
  }
}","public void addLogoutRequest(Player player){
  player.setSession(null);
synchronized (oldPlayers) {
    oldPlayers.add(player);
  }
}",0.8870292887029289
36056,"public void buy(int index,int amount){
  if (activeShop == null) {
    return;
  }
  Item item=activeShop.getItemAtIndex(activeStock,index);
  if (item == null) {
    return;
  }
  int itemId=item.getId();
  ItemDefinition def=ItemDefinitions.forId(itemId);
  int cost=def.getValue() < 1 ? 1 : def.getValue();
  int assets=player.getInventory().getAmount(995);
  boolean coinsGone=false;
  if (cost * amount > assets) {
    coinsGone=assets % cost == 0;
    amount=assets / cost;
    if (amount < 1) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
  }
  int freeSlots=player.getInventory().freeSlots() + (coinsGone ? 1 : 0);
  if (!def.isStackable()) {
    amount=amount > freeSlots ? freeSlots : amount;
  }
 else {
    if (player.getInventory().contains(itemId)) {
      amount-=BasicMath.integerOverflow(player.getInventory().getAmount(itemId),amount);
    }
 else {
      if (freeSlots < 1) {
        amount=0;
      }
    }
  }
  if (amount < 1) {
    player.sendMessage(""String_Node_Str"");
    return;
  }
  if (!activeShop.contains(activeStock,itemId)) {
    return;
  }
  amount=activeShop.remove(activeStock,itemId,amount);
  if (amount > 0) {
    updateShopGlobally();
  }
  player.getInventory().remove(new Item(995,cost * amount));
  player.getInventory().add(new Item(itemId,amount));
}","public void buy(int index,int amount){
  if (activeShop == null) {
    return;
  }
  Item item=activeShop.getItemAtIndex(activeStock,index);
  if (item == null) {
    return;
  }
  int itemId=item.getId();
  ItemDefinition def=ItemDefinitions.forId(itemId);
  int cost=def.getValue() < 1 ? 1 : def.getValue();
  int assets=player.getInventory().getAmount(995);
  boolean coinsGone=false;
  if (cost * amount > assets || cost * amount < 1) {
    coinsGone=assets % cost == 0;
    amount=assets / cost;
    if (amount < 1) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
  }
  int freeSlots=player.getInventory().freeSlots() + (coinsGone ? 1 : 0);
  if (!def.isStackable()) {
    amount=amount > freeSlots ? freeSlots : amount;
  }
 else {
    if (player.getInventory().contains(itemId)) {
      amount-=BasicMath.integerOverflow(player.getInventory().getAmount(itemId),amount);
    }
 else {
      if (freeSlots < 1) {
        amount=0;
      }
    }
  }
  if (amount < 1) {
    player.sendMessage(""String_Node_Str"");
    return;
  }
  if (!activeShop.contains(activeStock,itemId)) {
    return;
  }
  amount=activeShop.remove(activeStock,itemId,amount);
  if (amount > 0 && activeStock != StockType.MAIN) {
    updateShopGlobally();
  }
  player.getInventory().remove(new Item(995,cost * amount));
  player.getInventory().add(new Item(itemId,amount));
}",0.9799256505576208
36057,"@Override public ObjectOptionMessage decode(GameFrame frame){
  GameFrameReader reader=new GameFrameReader(frame);
  int y=(int)reader.getSigned(DataType.SHORT,DataOrder.LITTLE,DataTransformation.ADD);
  int x=(int)reader.getSigned(DataType.SHORT,DataOrder.LITTLE);
  int id=(int)reader.getSigned(DataType.SHORT);
  return new ObjectOptionMessage(id,x,y,Option.TWO);
}","@Override public ObjectOptionMessage decode(GameFrame frame){
  GameFrameReader reader=new GameFrameReader(frame);
  int y=(int)reader.getSigned(DataType.SHORT,DataOrder.LITTLE,DataTransformation.ADD);
  int x=(int)reader.getSigned(DataType.SHORT,DataOrder.LITTLE);
  int id=(int)reader.getUnsigned(DataType.SHORT);
  return new ObjectOptionMessage(id,x,y,Option.TWO);
}",0.994579945799458
36058,"public void openShop(String shopName){
  if (!shops.containsKey(shopName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + shopName + ""String_Node_Str"");
  }
  player.getInterfaceSet().getWindow().setListener(this);
  Shop shop=shops.get(shopName);
  activeShop=shop;
  player.send(new InterfaceItemsMessage(93,player.getInventory().toArray()));
  if (shop.hasStock(StockType.PLAYER)) {
    player.send(new InterfaceItemsMessage(31,activeShop.getStock(StockType.PLAYER)));
  }
  player.setInterfaceText(620,22,shopName);
  player.send(new InterfaceVisibleMessage(620,34,shop.hasStock(StockType.PLAYER)));
  player.getInterfaceSet().openWindow(620);
  player.getInterfaceSet().openInventory(621);
  player.send(new ScriptMessage(150,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",-1,0,7,4,93,621 << 16}));
  player.send(new ScriptMessage(150,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",-1,0,4,10,31,(620 << 16) + 24}));
  player.send(new InterfaceAccessMessage(621,0,0,27,1278));
  player.send(new InterfaceAccessMessage(621,34,0,27,2360446));
  player.send(new ScriptMessage(25,""String_Node_Str"",new Object[]{shop.getShopId(),93}));
  openMainStock();
}","public void openShop(String shopName){
  if (!shops.containsKey(shopName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + shopName + ""String_Node_Str"");
  }
  Shop shop=shops.get(shopName);
  activeShop=shop;
  player.send(new InterfaceItemsMessage(93,player.getInventory().toArray()));
  if (shop.hasStock(StockType.PLAYER)) {
    player.send(new InterfaceItemsMessage(31,activeShop.getStock(StockType.PLAYER)));
  }
  player.setInterfaceText(620,22,shopName);
  player.send(new InterfaceVisibleMessage(620,34,shop.hasStock(StockType.PLAYER)));
  player.getInterfaceSet().openWindow(620);
  player.getInterfaceSet().openInventory(621);
  player.getInterfaceSet().getWindow().setListener(this);
  player.send(new ScriptMessage(150,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",-1,0,7,4,93,621 << 16}));
  player.send(new ScriptMessage(150,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",-1,0,4,10,31,(620 << 16) + 24}));
  player.send(new InterfaceAccessMessage(621,0,0,27,1278));
  player.send(new InterfaceAccessMessage(621,34,0,27,2360446));
  player.send(new ScriptMessage(25,""String_Node_Str"",new Object[]{shop.getShopId(),93}));
  openMainStock();
}",0.9603011635865846
36059,"@Override public void inboundBufferUpdated(ChannelHandlerContext ctx,ByteBuf buf) throws IOException {
  if (!buf.isReadable())   return;
  int service=buf.readUnsignedByte();
  ByteBuf additionalBuf=null;
  if (buf.isReadable()) {
    additionalBuf=buf.readBytes(buf.readableBytes());
  }
  ChannelPipeline pipeline=ctx.pipeline();
  pipeline.remove(HandshakeDecoder.class);
switch (service) {
case HandshakeMessage.SERVICE_LOGIN:
    pipeline.addFirst(new LoginEncoder(),new LoginDecoder());
  break;
case HandshakeMessage.SERVICE_UPDATE:
pipeline.addFirst(new FileResponseEncoder(),new UpdateStatusMessageEncoder(),new XorEncoder(),new UpdateDecoder());
break;
case HandshakeMessage.SERVICE_JAGGRAB:
pipeline.addFirst(new DelimiterBasedFrameDecoder(1024,Delimiters.lineDelimiter()),new StringDecoder(StandardCharsets.ISO_8859_1),new JaggrabDecoder());
break;
case HandshakeMessage.SERVICE_REGISTER_PERSONAL_DETAILS:
case HandshakeMessage.SERVICE_REGISTER_USERNAME:
case HandshakeMessage.SERVICE_REGISTER_COMMIT:
pipeline.addFirst(new RegisterEncoder(),new RegisterDecoder(service));
break;
case HandshakeMessage.SERVICE_AUTO_LOGIN:
pipeline.addFirst(new LoginEncoder(),new AutoLoginDecoder());
break;
case HandshakeMessage.SERVICE_WORLD_LIST:
pipeline.addFirst(new WorldListEncoder(),new WorldListDecoder());
break;
default :
throw new IOException(""String_Node_Str"" + service + ""String_Node_Str"");
}
ctx.nextInboundMessageBuffer().add(new HandshakeMessage(service));
ctx.fireInboundBufferUpdated();
if (additionalBuf != null) {
ChannelHandlerContext head=ctx.pipeline().firstContext();
head.nextInboundByteBuffer().writeBytes(additionalBuf);
head.fireInboundBufferUpdated();
}
}","@Override public void inboundBufferUpdated(ChannelHandlerContext ctx,ByteBuf buf) throws IOException {
  if (!buf.isReadable())   return;
  int service=buf.readUnsignedByte();
  ByteBuf additionalBuf=null;
  if (buf.isReadable()) {
    additionalBuf=buf.readBytes(buf.readableBytes());
  }
  ChannelPipeline pipeline=ctx.pipeline();
  pipeline.remove(HandshakeDecoder.class);
switch (service) {
case HandshakeMessage.SERVICE_LOGIN:
    pipeline.addFirst(new LoginEncoder(),new LoginDecoder());
  break;
case HandshakeMessage.SERVICE_UPDATE:
pipeline.addFirst(new FileResponseEncoder(),new UpdateStatusMessageEncoder(),new XorEncoder(),new UpdateDecoder());
break;
case HandshakeMessage.SERVICE_JAGGRAB:
pipeline.addFirst(new JaggrabEncoder(),new DelimiterBasedFrameDecoder(1024,Delimiters.lineDelimiter()),new StringDecoder(StandardCharsets.US_ASCII),new JaggrabDecoder());
break;
case HandshakeMessage.SERVICE_REGISTER_PERSONAL_DETAILS:
case HandshakeMessage.SERVICE_REGISTER_USERNAME:
case HandshakeMessage.SERVICE_REGISTER_COMMIT:
pipeline.addFirst(new RegisterEncoder(),new RegisterDecoder(service));
break;
case HandshakeMessage.SERVICE_AUTO_LOGIN:
pipeline.addFirst(new LoginEncoder(),new AutoLoginDecoder());
break;
case HandshakeMessage.SERVICE_WORLD_LIST:
pipeline.addFirst(new WorldListEncoder(),new WorldListDecoder());
break;
default :
throw new IOException(""String_Node_Str"" + service + ""String_Node_Str"");
}
ctx.nextInboundMessageBuffer().add(new HandshakeMessage(service));
ctx.fireInboundBufferUpdated();
if (additionalBuf != null) {
ChannelHandlerContext head=ctx.pipeline().firstContext();
head.nextInboundByteBuffer().writeBytes(additionalBuf);
head.fireInboundBufferUpdated();
}
}",0.9884649511978704
36060,"@Override public void decode(ChannelHandlerContext ctx,String str,MessageBuf<Object> out) throws Exception {
  if (!str.startsWith(""String_Node_Str""))   throw new IOException();
  out.add(new JaggrabRequest(str.substring(8)));
}","@Override public void decode(ChannelHandlerContext ctx,String str,MessageBuf<Object> out) throws Exception {
  if (!str.startsWith(""String_Node_Str"")) {
    return;
  }
  out.add(new JaggrabRequest(str.substring(8)));
}",0.7024608501118568
36061,"private void secondWindow(){
  player.setInterfaceText(VERIFY_WINDOW,37,itemsToString());
  player.setInterfaceText(VERIFY_WINDOW,41,otherPlayer.getTradeSession().itemsToString());
  player.setInterfaceText(VERIFY_WINDOW,45,""String_Node_Str"" + otherPlayer.getDisplayName());
  player.send(new InterfaceVisibleMessage(VERIFY_WINDOW,37,true));
  player.send(new InterfaceVisibleMessage(VERIFY_WINDOW,41,true));
  player.getInterfaceSet().openWindow(VERIFY_WINDOW,this);
  status=TradeStatus.VERIFYING;
}","private void secondWindow(){
  player.setInterfaceText(VERIFY_WINDOW,37,itemsToString());
  player.setInterfaceText(VERIFY_WINDOW,41,otherPlayer.getTradeSession().itemsToString());
  player.setInterfaceText(VERIFY_WINDOW,45,""String_Node_Str"" + otherPlayer.getDisplayName());
  player.send(new InterfaceVisibleMessage(VERIFY_WINDOW,37,true));
  player.send(new InterfaceVisibleMessage(VERIFY_WINDOW,41,true));
  player.getInterfaceSet().getWindow().removeListener();
  player.getInterfaceSet().openWindow(VERIFY_WINDOW,this);
  status=TradeStatus.VERIFYING;
}",0.9386213408876298
36062,"/** 
 * A Rune requirement that takes into account infinite supply staves. If you only want to check the inventory, just use inventory.getAmount
 * @param rune rune
 * @param amount number of runes required
 */
public RuneRequirement(Rune rune,int amount){
  this.rune=rune;
  this.amount=amount;
  error=""String_Node_Str"" + rune + ""String_Node_Str"";
}","/** 
 * A Rune requirement that takes into account infinite supply staves.
 * @param rune rune
 * @param amount number of runes required
 */
public RuneRequirement(Rune rune,int amount){
  this.rune=rune;
  this.amount=amount;
  error=""String_Node_Str"" + rune + ""String_Node_Str"";
}",0.889589905362776
36063,"@Override public void fulfill(Player player){
  int staff=player.getEquipment().get(Equipment.WEAPON).getId();
  for (  int validStaff : rune.getValidStaves()) {
    if (staff == validStaff) {
      return;
    }
  }
  player.getInventory().remove(new Item(rune.getItemId(),amount));
}","@Override public void fulfill(Player player){
  Item weapon=player.getEquipment().get(Equipment.WEAPON);
  if (weapon != null) {
    int staff=weapon.getId();
    for (    int validStaff : rune.getValidStaves()) {
      if (staff == validStaff) {
        return;
      }
    }
  }
  player.getInventory().remove(new Item(rune.getItemId(),amount));
}",0.8296529968454258
36064,"@Override public void itemsChanged(Inventory inventory){
  if (inventory.isEmpty()) {
    player.send(new InterfaceResetItemsMessage(id,child));
  }
 else {
    Item[] items=inventory.toArray();
    player.send(new InterfaceItemsMessage(id,child,type,items));
  }
}","@Override public void itemsChanged(Inventory inventory){
  if (inventory.isEmpty() && id >= 0 && child >= 0) {
    player.send(new InterfaceResetItemsMessage(id,child));
  }
 else {
    Item[] items=inventory.toArray();
    player.send(new InterfaceItemsMessage(id,child,type,items));
  }
}",0.954954954954955
36065,"/** 
 * This function does not output a formal XML document, but instead just the raw text  of a document annotated with XML markup around events and timexes.
 * @param docname The one file in the InfoFile that you want to stringify with XML markup.
 * @param eventElemName You can specify what you want the event's XML element to be (e.g., event or target)
 * @param idAttributeString You can specify what you want the event's XML attribute to be for its ID (e.g., id or eid)
 * @return A String which is the raw text with added XML markup around events and timexes.
 */
public String markupOriginalText(String docname,String eventElemName,String idAttributeString,boolean numericIDOnly,boolean showTense,boolean showAspect,boolean showClass){
  StringBuffer buf=new StringBuffer();
  boolean firstToken=true;
  List<Sentence> sentences=getSentences(docname);
  System.out.println(""String_Node_Str"" + docname + ""String_Node_Str""+ sentences.size()+ ""String_Node_Str"");
  for (  Sentence sent : sentences) {
    List<CoreLabel> tokens=sent.tokens();
    Map<Integer,TextEvent> indexToEvents=new HashMap<Integer,TextEvent>();
    for (    TextEvent event : sent.events())     indexToEvents.put(event.getIndex(),event);
    Map<Integer,Timex> indexToTimexes=new HashMap<Integer,Timex>();
    for (    Timex timex : sent.timexes())     indexToTimexes.put(timex.getTokenOffset(),timex);
    Set<Integer> endTimexes=new HashSet<Integer>();
    int ii=1;
    for (    CoreLabel token : tokens) {
      if (firstToken) {
        buf.append(token.getString(CoreAnnotations.BeforeAnnotation.class));
        firstToken=false;
      }
      boolean endevent=false;
      if (indexToEvents.containsKey(ii)) {
        TextEvent event=indexToEvents.get(ii);
        String eventid=event.getId();
        if (numericIDOnly && eventid.startsWith(""String_Node_Str""))         eventid=eventid.substring(1);
        buf.append(""String_Node_Str"" + eventElemName);
        buf.append(""String_Node_Str"" + idAttributeString + ""String_Node_Str""+ eventid+ ""String_Node_Str"");
        if (showTense)         buf.append(""String_Node_Str"" + event.getTense() + ""String_Node_Str"");
        if (showAspect)         buf.append(""String_Node_Str"" + event.getAspect() + ""String_Node_Str"");
        if (showClass)         buf.append(""String_Node_Str"" + event.getTheClass() + ""String_Node_Str"");
        buf.append(""String_Node_Str"");
        endevent=true;
      }
      if (indexToTimexes.containsKey(ii)) {
        Timex timex=indexToTimexes.get(ii);
        buf.append(timex.toXMLString());
        endTimexes.add(ii + timex.getTokenLength() - 1);
      }
      String str=token.getString(CoreAnnotations.OriginalTextAnnotation.class);
      str=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
      buf.append(str);
      if (endevent)       buf.append(""String_Node_Str"" + eventElemName + ""String_Node_Str"");
      if (endTimexes.contains(ii))       buf.append(""String_Node_Str"");
      buf.append(token.getString(CoreAnnotations.AfterAnnotation.class));
      ii++;
    }
  }
  return buf.toString();
}","/** 
 * This function does not output a formal XML document, but instead just the raw text  of a document annotated with XML markup around events and timexes.
 * @param docname The one file in the InfoFile that you want to stringify with XML markup.
 * @param eventElemName You can specify what you want the event's XML element to be (e.g., event or target)
 * @param idAttributeString You can specify what you want the event's XML attribute to be for its ID (e.g., id or eid)
 * @return A String which is the raw text with added XML markup around events and timexes.
 */
public String markupOriginalText(String docname,String eventElemName,String idAttributeString,boolean numericIDOnly,boolean showTense,boolean showAspect,boolean showClass){
  StringBuffer buf=new StringBuffer();
  boolean firstToken=true;
  List<Sentence> sentences=getSentences(docname);
  System.out.println(""String_Node_Str"" + docname + ""String_Node_Str""+ sentences.size()+ ""String_Node_Str"");
  for (  Sentence sent : sentences) {
    List<CoreLabel> tokens=sent.tokens();
    Map<Integer,TextEvent> indexToEvents=new HashMap<Integer,TextEvent>();
    for (    TextEvent event : sent.events())     indexToEvents.put(event.getIndex(),event);
    Map<Integer,Timex> indexToTimexes=new HashMap<Integer,Timex>();
    for (    Timex timex : sent.timexes())     indexToTimexes.put(timex.getTokenOffset(),timex);
    Set<Integer> endTimexes=new HashSet<Integer>();
    int ii=1;
    for (    CoreLabel token : tokens) {
      if (firstToken) {
        buf.append(token.getString(CoreAnnotations.BeforeAnnotation.class));
        firstToken=false;
      }
      boolean endevent=false;
      if (indexToTimexes.containsKey(ii)) {
        Timex timex=indexToTimexes.get(ii);
        buf.append(timex.toXMLString());
        endTimexes.add(ii + timex.getTokenLength() - 1);
      }
      if (indexToEvents.containsKey(ii)) {
        TextEvent event=indexToEvents.get(ii);
        String eventid=event.getId();
        if (numericIDOnly && eventid.startsWith(""String_Node_Str""))         eventid=eventid.substring(1);
        buf.append(""String_Node_Str"" + eventElemName);
        buf.append(""String_Node_Str"" + idAttributeString + ""String_Node_Str""+ eventid+ ""String_Node_Str"");
        if (showTense)         buf.append(""String_Node_Str"" + event.getTense() + ""String_Node_Str"");
        if (showAspect)         buf.append(""String_Node_Str"" + event.getAspect() + ""String_Node_Str"");
        if (showClass)         buf.append(""String_Node_Str"" + event.getTheClass() + ""String_Node_Str"");
        buf.append(""String_Node_Str"");
        endevent=true;
      }
      String str=token.getString(CoreAnnotations.OriginalTextAnnotation.class);
      str=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
      buf.append(str);
      if (endevent)       buf.append(""String_Node_Str"" + eventElemName + ""String_Node_Str"");
      if (endTimexes.contains(ii))       buf.append(""String_Node_Str"");
      buf.append(token.getString(CoreAnnotations.AfterAnnotation.class));
      ii++;
    }
  }
  return buf.toString();
}",0.936910569105691
36066,"/** 
 * @desc Check if the tree is a clause in a prepositional phrase.
 * @returns The string preposition that heads the PP
 */
public static String isPrepClause(Tree root,Tree tree){
  if (tree != null) {
    Tree p=tree.parent(root).parent(root);
    String pos=p.label().value();
    if (!pos.equals(""String_Node_Str"")) {
      while (p.label().toString().equals(pos))       p=p.parent(root);
    }
    if (p.label().value().equals(""String_Node_Str"")) {
      p=p.parent(root);
      if (!p.label().value().equals(""String_Node_Str""))       return null;
    }
    if (p.label().value().equals(""String_Node_Str"")) {
      List<Tree> list=p.getChildrenAsList();
      for (      Tree node : list) {
        if (node.label().value().equals(""String_Node_Str""))         return node.firstChild().toString();
      }
    }
  }
  return null;
}","/** 
 * @desc Check if the tree is a clause in a prepositional phrase.
 * @returns The string preposition that heads the PP
 */
public static String isPrepClause(Tree root,Tree tree){
  if (tree != null) {
    Tree p=tree.parent(root).parent(root);
    String pos=p.label().value();
    if (!pos.equals(""String_Node_Str"")) {
      while (p != null && p.label().toString().equals(pos))       p=p.parent(root);
    }
    if (p != null && p.label().value().equals(""String_Node_Str"")) {
      p=p.parent(root);
      if (p == null || !p.label().value().equals(""String_Node_Str""))       return null;
    }
    if (p.label().value().equals(""String_Node_Str"")) {
      List<Tree> list=p.getChildrenAsList();
      for (      Tree node : list) {
        if (node.label().value().equals(""String_Node_Str""))         return node.firstChild().toString();
      }
    }
  }
  return null;
}",0.9772594752186587
36067,"/** 
 * @desc Check if the tree is a clause in a prepositional phrase.
 * @returns The string preposition that heads the PP
 */
public static String isPrepClause(Tree root,Tree tree){
  if (tree != null) {
    Tree p=tree.parent(root).parent(root);
    String pos=p.label().value();
    if (!pos.equals(""String_Node_Str"")) {
      while (p != null && p.label().toString().equals(pos))       p=p.parent(root);
    }
    if (p != null && p.label().value().equals(""String_Node_Str"")) {
      p=p.parent(root);
      if (p == null || !p.label().value().equals(""String_Node_Str""))       return null;
    }
    if (p.label().value().equals(""String_Node_Str"")) {
      List<Tree> list=p.getChildrenAsList();
      for (      Tree node : list) {
        if (node.label().value().equals(""String_Node_Str""))         return node.firstChild().toString();
      }
    }
  }
  return null;
}","/** 
 * @desc Check if the tree is a clause in a prepositional phrase.
 * @returns The string preposition that heads the PP
 */
public static String isPrepClause(Tree root,Tree tree){
  if (tree != null) {
    Tree p=tree.parent(root).parent(root);
    String pos=p.label().value();
    if (!pos.equals(""String_Node_Str"")) {
      while (p != null && p.label().toString().equals(pos))       p=p.parent(root);
    }
    if (p != null && p.label().value().equals(""String_Node_Str"")) {
      p=p.parent(root);
      if (p == null || !p.label().value().equals(""String_Node_Str""))       return null;
    }
    if (p != null && p.label().value().equals(""String_Node_Str"")) {
      List<Tree> list=p.getChildrenAsList();
      for (      Tree node : list) {
        if (node.label().value().equals(""String_Node_Str""))         return node.firstChild().toString();
      }
    }
  }
  return null;
}",0.9926428975664968
36068,"public List<TLink> computeClosure(List<TLink> relations,boolean debug){
  List<TLink> cloned=new ArrayList<TLink>(relations);
  List<TLink> newRelations=new ArrayList<TLink>();
  computeClosure(cloned,newRelations,debug);
  return newRelations;
}","/** 
 * Computes closure over the given relations, keeps the given List unchanged, and returns a new list of closed relations.
 * @param relations The list of relations from which we compute closure.
 * @param debug
 * @return A list of new relations computed from transitivity rules.
 */
public List<TLink> computeClosure(List<TLink> relations,boolean debug){
  List<TLink> cloned=new ArrayList<TLink>(relations);
  List<TLink> newRelations=new ArrayList<TLink>();
  computeClosure(cloned,newRelations,debug);
  return newRelations;
}",0.6299615877080665
36069,"/** 
 * This function makes sure that the two events in each TLink follow document order. If not, then we invert the order so event 1 is 2 and 2 is 1, and we also invert the ordering relation.
 * @param docs The documents to normalize.
 */
public static void normalizeAllTlinksByTextOrder(SieveDocuments docs){
  for (  SieveDocument doc : docs.getDocuments()) {
    List<TLink> removal=new ArrayList<TLink>();
    List<TLink> addition=new ArrayList<TLink>();
    for (    TLink link : doc.getTlinks()) {
      if (link instanceof EventEventLink) {
        TextEvent first=doc.getEventByEiid(link.getId1());
        TextEvent second=doc.getEventByEiid(link.getId2());
        if (first == null || second == null)         System.out.println(""String_Node_Str"" + doc.getDocname() + ""String_Node_Str""+ link);
 else         if (!first.isBeforeInText(second)) {
          removal.add(link);
          TLink.Type invertedRelation=TLink.invertRelation(link.getRelation());
          TLink newlink=new EventEventLink(link.getId2(),link.getId1(),invertedRelation);
          newlink.setRelationConfidence(link.getRelationConfidence());
          addition.add(newlink);
        }
      }
 else       if (link instanceof TimeTimeLink) {
        Timex first=doc.getTimexByTid(link.getId1());
        Timex second=doc.getTimexByTid(link.getId2());
        boolean flip=false;
        if (first == null || second == null)         System.out.println(""String_Node_Str"" + doc.getDocname() + ""String_Node_Str""+ link);
 else         if (first.getDocumentFunction() == Timex.DocumentFunction.CREATION_TIME && second.getDocumentFunction() != Timex.DocumentFunction.CREATION_TIME) {
          flip=true;
        }
 else         if (first.getDocumentFunction() != Timex.DocumentFunction.CREATION_TIME && second.getDocumentFunction() != Timex.DocumentFunction.CREATION_TIME && !first.isBeforeInText(second)) {
          flip=true;
        }
        if (flip) {
          removal.add(link);
          TLink.Type invertedRelation=TLink.invertRelation(link.getRelation());
          TLink newlink=new TimeTimeLink(link.getId2(),link.getId1(),invertedRelation);
          newlink.setRelationConfidence(link.getRelationConfidence());
          addition.add(newlink);
        }
      }
 else       if (link instanceof EventTimeLink) {
        TextEvent event;
        Timex time;
        boolean flip=false;
        if (link.getId1().startsWith(""String_Node_Str"")) {
          event=doc.getEventByEiid(link.getId1());
          time=doc.getTimexByTid(link.getId2());
          if (event == null || time == null)           System.out.println(""String_Node_Str"" + doc.getDocname() + ""String_Node_Str""+ link);
 else           if (!time.isDCT() && (time.getSid() < event.getSid() || (time.getSid() == event.getSid() && time.getTokenOffset() < event.getIndex())))           flip=true;
        }
 else {
          event=doc.getEventByEiid(link.getId2());
          time=doc.getTimexByTid(link.getId1());
          if (event == null || time == null)           System.out.println(""String_Node_Str"" + doc.getDocname() + ""String_Node_Str""+ link);
 else           if (time.isDCT())           flip=true;
 else           if (event.getSid() < time.getSid() || (event.getSid() == time.getSid() && event.getIndex() < time.getTokenOffset()))           flip=true;
        }
        if (flip) {
          removal.add(link);
          TLink.Type invertedRelation=TLink.invertRelation(link.getRelation());
          TLink newlink=new EventTimeLink(link.getId2(),link.getId1(),invertedRelation);
          newlink.setRelationConfidence(link.getRelationConfidence());
          addition.add(newlink);
        }
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
    for (    TLink link : removal)     doc.removeTlink(link);
    for (    TLink link : addition)     doc.addTlink(link);
  }
}","/** 
 * This function makes sure that the two events in each TLink follow document order. If not, then we invert the order so event 1 is 2 and 2 is 1, and we also invert the ordering relation.
 * @param docs The documents to normalize.
 */
public static void normalizeAllTlinksByTextOrder(SieveDocuments docs){
  for (  SieveDocument doc : docs.getDocuments()) {
    List<TLink> removal=new ArrayList<TLink>();
    List<TLink> addition=new ArrayList<TLink>();
    for (    TLink link : doc.getTlinks()) {
      if (link instanceof EventEventLink) {
        TextEvent first=doc.getEventByEiid(link.getId1());
        TextEvent second=doc.getEventByEiid(link.getId2());
        if (first == null || second == null)         System.out.println(""String_Node_Str"" + doc.getDocname() + ""String_Node_Str""+ link);
 else         if (!first.isBeforeInText(second)) {
          removal.add(link);
          TLink.Type invertedRelation=TLink.invertRelation(link.getRelation());
          TLink newlink=TLink.clone(link);
          newlink.setId1(link.getId2());
          newlink.setId2(link.getId1());
          newlink.setRelation(invertedRelation);
          addition.add(newlink);
        }
      }
 else       if (link instanceof TimeTimeLink) {
        Timex first=doc.getTimexByTid(link.getId1());
        Timex second=doc.getTimexByTid(link.getId2());
        boolean flip=false;
        if (first == null || second == null)         System.out.println(""String_Node_Str"" + doc.getDocname() + ""String_Node_Str""+ link);
 else         if (first.getDocumentFunction() == Timex.DocumentFunction.CREATION_TIME && second.getDocumentFunction() != Timex.DocumentFunction.CREATION_TIME) {
          flip=true;
        }
 else         if (first.getDocumentFunction() != Timex.DocumentFunction.CREATION_TIME && second.getDocumentFunction() != Timex.DocumentFunction.CREATION_TIME && !first.isBeforeInText(second)) {
          flip=true;
        }
        if (flip) {
          removal.add(link);
          TLink.Type invertedRelation=TLink.invertRelation(link.getRelation());
          TLink newlink=TLink.clone(link);
          newlink.setId1(link.getId2());
          newlink.setId2(link.getId1());
          newlink.setRelation(invertedRelation);
          addition.add(newlink);
        }
      }
 else       if (link instanceof EventTimeLink) {
        TextEvent event;
        Timex time;
        boolean flip=false;
        if (link.getId1().startsWith(""String_Node_Str"")) {
          event=doc.getEventByEiid(link.getId1());
          time=doc.getTimexByTid(link.getId2());
          if (event == null || time == null)           System.out.println(""String_Node_Str"" + doc.getDocname() + ""String_Node_Str""+ link);
 else           if (!time.isDCT() && (time.getSid() < event.getSid() || (time.getSid() == event.getSid() && time.getTokenOffset() < event.getIndex())))           flip=true;
        }
 else {
          event=doc.getEventByEiid(link.getId2());
          time=doc.getTimexByTid(link.getId1());
          if (event == null || time == null)           System.out.println(""String_Node_Str"" + doc.getDocname() + ""String_Node_Str""+ link);
 else           if (time.isDCT())           flip=true;
 else           if (event.getSid() < time.getSid() || (event.getSid() == time.getSid() && event.getIndex() < time.getTokenOffset()))           flip=true;
        }
        if (flip) {
          removal.add(link);
          TLink.Type invertedRelation=TLink.invertRelation(link.getRelation());
          TLink newlink=TLink.clone(link);
          newlink.setId1(link.getId2());
          newlink.setId2(link.getId1());
          newlink.setRelation(invertedRelation);
          addition.add(newlink);
        }
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
    for (    TLink link : removal)     doc.removeTlink(link);
    for (    TLink link : addition)     doc.addTlink(link);
  }
}",0.9172893584127804
36070,"/** 
 * Full evaluation of guesses to gold links. This penalizes guesses for not labeling everything. The goldDocs and guessedDocs should cover the same docs.
 * @param goldDocs Gold tlinks in every document.
 * @param guessedDocs The guessed tlinks in every document.
 */
public static void evaluate(SieveDocuments goldDocs,SieveDocuments guessedDocs){
  Counter<String> guessCounts=new ClassicCounter<String>();
  Counter<TLink.Type> goldLabelCounts=new ClassicCounter<TLink.Type>();
  int numCorrect=0;
  int numIncorrect=0;
  int numIncorrectNonVague=0;
  int numMissed=0;
  if (goldDocs == null)   return;
  normalizeAllTlinksByTextOrder(guessedDocs);
  for (  SieveDocument guessedDoc : guessedDocs.getDocuments()) {
    SieveDocument goldDoc=goldDocs.getDocument(guessedDoc.getDocname());
    Set<String> seenGoldLinks=new HashSet<String>();
    List<TLink> goldLinks=goldDoc.getTlinks(true);
    Map<String,TLink> goldPairLookup=new HashMap<String,TLink>();
    for (    TLink tlink : goldLinks)     goldPairLookup.put(tlink.getId1() + ""String_Node_Str"" + tlink.getId2(),tlink);
    List<TLink> proposed=guessedDoc.getTlinks();
    for (    TLink pp : proposed) {
      TLink goldLink=goldPairLookup.get(pp.getId1() + ""String_Node_Str"" + pp.getId2());
      if (goldLink != null) {
        guessCounts.incrementCount(goldLink.getRelation() + ""String_Node_Str"" + pp.getRelation());
        goldLabelCounts.incrementCount(goldLink.getRelation());
        seenGoldLinks.add(pp.getId1() + ""String_Node_Str"" + pp.getId2());
      }
      if (Evaluate.isLinkCorrect(pp,goldLinks)) {
        numCorrect++;
      }
 else       if (goldLink != null) {
        if (!goldLink.getRelation().equals(TLink.Type.VAGUE)) {
          numIncorrectNonVague++;
        }
        numIncorrect++;
      }
 else {
      }
    }
    for (    TLink gold : goldLinks) {
      if (!seenGoldLinks.contains(gold.getId1() + ""String_Node_Str"" + gold.getId2())) {
        numMissed++;
      }
    }
  }
  int totalGuessed=numCorrect + numIncorrect;
  int totalGold=numCorrect + numIncorrect + numMissed;
  double precision=(totalGuessed > 0 ? (double)numCorrect / totalGuessed : 0.0);
  double recall=(totalGold > 0 ? (double)numCorrect / totalGold : 0.0);
  double f1=(precision + recall > 0 ? 2.0 * precision * recall / (precision + recall) : 0.0);
  int totalGuessedNonVague=numCorrect + numIncorrectNonVague;
  double precisionNonVague=(totalGuessedNonVague > 0 ? numCorrect / totalGuessedNonVague : 0.0);
  System.out.printf(""String_Node_Str"",precision,numCorrect,totalGuessed,recall,numCorrect,totalGold,f1);
  System.out.printf(""String_Node_Str"",precisionNonVague,numCorrect,totalGuessedNonVague);
  printBaseline(goldLabelCounts);
  confusionMatrix(guessCounts);
}","/** 
 * Full evaluation of guesses to gold links. This penalizes guesses for not labeling everything. The goldDocs and guessedDocs should cover the same docs.
 * @param goldDocs Gold tlinks in every document.
 * @param guessedDocs The guessed tlinks in every document.
 */
public static void evaluate(SieveDocuments goldDocs,SieveDocuments guessedDocs,Map<String,SieveStats> sieveStats){
  Counter<String> guessCounts=new ClassicCounter<String>();
  Counter<TLink.Type> goldLabelCounts=new ClassicCounter<TLink.Type>();
  int numCorrect=0;
  int numIncorrect=0;
  int numIncorrectNonVague=0;
  int numMissed=0;
  if (goldDocs == null)   return;
  normalizeAllTlinksByTextOrder(guessedDocs);
  for (  SieveDocument guessedDoc : guessedDocs.getDocuments()) {
    SieveDocument goldDoc=goldDocs.getDocument(guessedDoc.getDocname());
    Set<String> seenGoldLinks=new HashSet<String>();
    List<TLink> goldLinks=goldDoc.getTlinksNoClosures();
    Map<String,TLink> goldPairLookup=new HashMap<String,TLink>();
    for (    TLink tlink : goldLinks)     goldPairLookup.put(tlink.getId1() + ""String_Node_Str"" + tlink.getId2(),tlink);
    List<TLink> proposed=guessedDoc.getTlinks();
    for (    TLink pp : proposed) {
      TLink goldLink=goldPairLookup.get(pp.getId1() + ""String_Node_Str"" + pp.getId2());
      if (goldLink != null) {
        guessCounts.incrementCount(goldLink.getRelation() + ""String_Node_Str"" + pp.getRelation());
        goldLabelCounts.incrementCount(goldLink.getRelation());
        seenGoldLinks.add(pp.getId1() + ""String_Node_Str"" + pp.getId2());
      }
      if (Evaluate.isLinkCorrect(pp,goldLinks)) {
        numCorrect++;
        if (pp.getOrigin() != null) {
          sieveStats.get(pp.getOrigin()).addCorrect(pp);
        }
 else         System.out.println(""String_Node_Str"" + pp);
      }
 else       if (goldLink != null) {
        if (!goldLink.getRelation().equals(TLink.Type.VAGUE)) {
          numIncorrectNonVague++;
        }
        numIncorrect++;
        if (pp.getOrigin() != null)         sieveStats.get(pp.getOrigin()).addIncorrect(pp,goldLink);
 else         System.out.println(""String_Node_Str"" + pp);
      }
 else {
        sieveStats.get(pp.getOrigin()).addNoGold(pp);
      }
    }
    for (    TLink gold : goldLinks) {
      if (!seenGoldLinks.contains(gold.getId1() + ""String_Node_Str"" + gold.getId2())) {
        numMissed++;
      }
    }
  }
  int totalGuessed=numCorrect + numIncorrect;
  int totalGold=numCorrect + numIncorrect + numMissed;
  double precision=(totalGuessed > 0 ? (double)numCorrect / totalGuessed : 0.0);
  double recall=(totalGold > 0 ? (double)numCorrect / totalGold : 0.0);
  double f1=(precision + recall > 0 ? 2.0 * precision * recall / (precision + recall) : 0.0);
  int totalGuessedNonVague=numCorrect + numIncorrectNonVague;
  double precisionNonVague=(totalGuessedNonVague > 0 ? (double)numCorrect / (double)totalGuessedNonVague : 0.0);
  for (  SieveStats ss : sieveStats.values())   ss.printStats();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.printf(""String_Node_Str"",precision,numCorrect,totalGuessed,recall,numCorrect,totalGold,f1);
  System.out.printf(""String_Node_Str"",precisionNonVague,numCorrect,totalGuessedNonVague);
  System.out.println();
  printBaseline(goldLabelCounts);
  confusionMatrix(guessCounts);
  System.out.println(""String_Node_Str"");
}",0.8874150760271756
36071,"/** 
 * @return A List of all Event objects in one document (file parameter)
 */
public List<TextEvent> getEvents(){
  List<TextEvent> events=new ArrayList<TextEvent>();
  for (  SieveSentence sent : sentences)   events.addAll(sent.events());
  return events;
}","/** 
 * @return A List of all Event objects in one document (file parameter)
 */
public List<TextEvent> getEvents(){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  List<TextEvent> events=new ArrayList<TextEvent>();
  for (  SieveSentence sent : sentences)   events.addAll(sent.events());
  return events;
}",0.883248730964467
36072,"/** 
 * @return A List of Strings that are parse trees
 */
public List<Tree> getAllParseTrees(){
  List<Tree> trees=new ArrayList<Tree>();
  for (  SieveSentence sent : sentences)   trees.add(sent.getParseTree());
  return trees;
}","/** 
 * @return A List of Strings that are parse trees
 */
public List<Tree> getAllParseTrees(){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  List<Tree> trees=new ArrayList<Tree>();
  for (  SieveSentence sent : sentences)   trees.add(sent.getParseTree());
  return trees;
}",0.8700564971751412
36073,"/** 
 * @return A List of Strings, one string per sentence, representing dependencies.
 */
public List<List<TypedDependency>> getAllDependencies(){
  List<List<TypedDependency>> alldeps=new ArrayList<List<TypedDependency>>();
  for (  SieveSentence sent : sentences)   alldeps.add(sent.getDeps());
  return alldeps;
}","/** 
 * @return A List of Strings, one string per sentence, representing dependencies.
 */
public List<List<TypedDependency>> getAllDependencies(){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  List<List<TypedDependency>> alldeps=new ArrayList<List<TypedDependency>>();
  for (  SieveSentence sent : sentences)   alldeps.add(sent.getDeps());
  return alldeps;
}",0.9018492176386912
36074,"/** 
 * @return A Vector of Sentence objects
 */
public List<SieveSentence> getSentences(){
  return sentences;
}","/** 
 * @return A Vector of Sentence objects
 */
public List<SieveSentence> getSentences(){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  return sentences;
}",0.7661016949152543
36075,"/** 
 * Create a list of strings, each string is one makeinstance: <MAKEINSTANCE eventID=""3"" ... />
 * @param docname The document from which you want to extract all makeinstances.
 * @return A list of makeinstance strings.
 */
public List<String> createMakeInstanceStrings(){
  List<String> strings=new ArrayList<String>();
  for (  SieveSentence sent : sentences) {
    for (    TextEvent event : sent.events()) {
      for (      String eiid : event.getAllEiids()) {
        strings.add(""String_Node_Str"" + event.getId() + ""String_Node_Str""+ eiid+ ""String_Node_Str""+ event.getTense()+ ""String_Node_Str""+ event.getAspect()+ (event.getPolarity() != null ? (""String_Node_Str"" + event.getPolarity()) : ""String_Node_Str"")+ ""String_Node_Str"");
      }
    }
  }
  return strings;
}","/** 
 * Create a list of strings, each string is one makeinstance: <MAKEINSTANCE eventID=""3"" ... />
 * @param docname The document from which you want to extract all makeinstances.
 * @return A list of makeinstance strings.
 */
public List<String> createMakeInstanceStrings(){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  List<String> strings=new ArrayList<String>();
  for (  SieveSentence sent : sentences) {
    for (    TextEvent event : sent.events()) {
      for (      String eiid : event.getAllEiids()) {
        strings.add(""String_Node_Str"" + event.getId() + ""String_Node_Str""+ eiid+ ""String_Node_Str""+ event.getTense()+ ""String_Node_Str""+ event.getAspect()+ (event.getPolarity() != null ? (""String_Node_Str"" + event.getPolarity()) : ""String_Node_Str"")+ ""String_Node_Str"");
      }
    }
  }
  return strings;
}",0.934153846153846
36076,"/** 
 * Add events to a particular sentence.
 */
public void addEvents(int sid,List<TextEvent> events){
  sentences.get(sid).addEvents(events);
  addEventsToEiidMap(events);
}","/** 
 * Add events to a particular sentence.
 */
public void addEvents(int sid,List<TextEvent> events){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  sentences.get(sid).addEvents(events);
  addEventsToEiidMap(events);
}",0.8353221957040573
36077,"/** 
 * @return A List of Lists of all Timex objects. This does not return the document creation time!
 */
public List<List<Timex>> getTimexesBySentence(){
  List<List<Timex>> timexes=new ArrayList<List<Timex>>();
  for (  SieveSentence sent : sentences)   timexes.add(sent.timexes());
  return timexes;
}","/** 
 * @return A List of Lists of all Timex objects. This does not return the document creation time!
 */
public List<List<Timex>> getTimexesBySentence(){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  List<List<Timex>> timexes=new ArrayList<List<Timex>>();
  for (  SieveSentence sent : sentences)   timexes.add(sent.timexes());
  return timexes;
}",0.898379970544919
36078,"/** 
 * Add timexes to a particular sentence.
 */
public void addTimexes(int sid,List<Timex> timexes){
  sentences.get(sid).addTimexes(timexes);
  addTimexesToTidMap(timexes);
}","/** 
 * Add timexes to a particular sentence.
 */
public void addTimexes(int sid,List<Timex> timexes){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  sentences.get(sid).addTimexes(timexes);
  addTimexesToTidMap(timexes);
}",0.8368794326241135
36079,"/** 
 * @return A list of lists. This is a list of sentences, each sentence is a list of CoreLabels with character information.
 */
public List<List<CoreLabel>> getTokensAllSentences(String file){
  List<List<CoreLabel>> tokens=new ArrayList<List<CoreLabel>>();
  for (  SieveSentence sent : sentences)   tokens.add(sent.tokens());
  return tokens;
}","/** 
 * @return A list of lists. This is a list of sentences, each sentence is a list of CoreLabels with character information.
 */
public List<List<CoreLabel>> getTokensAllSentences(String file){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  List<List<CoreLabel>> tokens=new ArrayList<List<CoreLabel>>();
  for (  SieveSentence sent : sentences)   tokens.add(sent.tokens());
  return tokens;
}",0.9102730819245772
36080,"/** 
 * @return A List of all Timex objects, including the document creation time.
 */
public List<Timex> getTimexes(){
  List<Timex> timexes=new ArrayList<Timex>();
  for (  SieveSentence sent : sentences)   timexes.addAll(sent.timexes());
  if (dcts != null)   timexes.addAll(dcts);
  return timexes;
}","/** 
 * @return A List of all Timex objects, including the document creation time.
 */
public List<Timex> getTimexes(){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  List<Timex> timexes=new ArrayList<Timex>();
  for (  SieveSentence sent : sentences)   timexes.addAll(sent.timexes());
  if (dcts != null)   timexes.addAll(dcts);
  return timexes;
}",0.8833087149187593
36081,"/** 
 * @return A List of all Event objects in one document (file parameter)
 */
public List<List<TextEvent>> getEventsBySentence(){
  List<List<TextEvent>> allEvents=new ArrayList<List<TextEvent>>();
  for (  SieveSentence sent : sentences)   allEvents.add(sent.events());
  return allEvents;
}","/** 
 * @return A List of all Event objects in one document (file parameter)
 */
public List<List<TextEvent>> getEventsBySentence(){
  if (sentences == null)   sentences=new ArrayList<SieveSentence>();
  List<List<TextEvent>> allEvents=new ArrayList<List<TextEvent>>();
  for (  SieveSentence sent : sentences)   allEvents.add(sent.events());
  return allEvents;
}",0.8952959028831563
36082,"/** 
 * all pairs of events that are siblings (i.e. their WordNet synsets overlap)  are labeled VAGUE. D&G use SIMULTANEOUS.
 */
private TLink getEELink(TextEvent e1,TextEvent e2,List<Tree> trees){
  boolean e1IsReporting=e1.getTheClass() == TextEvent.Class.REPORTING;
  boolean e2IsReporting=e2.getTheClass() == TextEvent.Class.REPORTING;
  if (ignoreReporting && (e1IsReporting || e2IsReporting) || ignoreIAction && e1.getTheClass() == TextEvent.Class.I_ACTION || ignoreSameSentence && e1.getSid() == e2.getSid()) {
    return null;
  }
  Tree sentParseTree1=trees.get(e1.getSid());
  Tree sentParseTree2=trees.get(e2.getSid());
  String postagStr1=posTagFromTree(sentParseTree1,e1.getIndex());
  String postagStr2=posTagFromTree(sentParseTree2,e2.getIndex());
  String postagSimple1=postagStr1.substring(0,2);
  String postagSimple2=postagStr2.substring(0,2);
  POS pos1=postagSimpleToPOS.get(postagSimple1);
  POS pos2=postagSimpleToPOS.get(postagSimple2);
  String lemma1=Main.wordnet.lemmatizeTaggedWord(e1.getString(),postagStr1);
  String lemma2=Main.wordnet.lemmatizeTaggedWord(e2.getString(),postagStr2);
  if (checkSiblings && pos1 != null && pos2 != null && pos1 == pos2 && Main.wordnet.areSiblings(e1.getString(),e2.getString(),pos1)) {
    return new EventEventLink(e1.getEiid(),e2.getEiid(),TLink.Type.VAGUE);
  }
  if (checkLemmas && lemma1.equals(lemma2)) {
    return new EventEventLink(e1.getEiid(),e2.getEiid(),TLink.Type.VAGUE);
  }
 else {
    return null;
  }
}","/** 
 * all pairs of events that are siblings (i.e. their WordNet synsets overlap)  are labeled VAGUE. D&G use SIMULTANEOUS.
 */
private TLink getEELink(TextEvent e1,TextEvent e2,List<Tree> trees){
  boolean e1IsReporting=e1.getTheClass() == TextEvent.Class.REPORTING;
  boolean e2IsReporting=e2.getTheClass() == TextEvent.Class.REPORTING;
  if (ignoreReporting && (e1IsReporting || e2IsReporting) || ignoreIAction && e1.getTheClass() == TextEvent.Class.I_ACTION || ignoreSameSentence && e1.getSid() == e2.getSid()) {
    return null;
  }
  Tree sentParseTree1=trees.get(e1.getSid());
  Tree sentParseTree2=trees.get(e2.getSid());
  String postagStr1=posTagFromTree(sentParseTree1,e1.getIndex());
  String postagStr2=posTagFromTree(sentParseTree2,e2.getIndex());
  if (postagStr1.length() < 2 || postagStr2.length() < 2) {
    return null;
  }
  String postagSimple1=postagStr1.substring(0,2);
  String postagSimple2=postagStr2.substring(0,2);
  POS pos1=postagSimpleToPOS.get(postagSimple1);
  POS pos2=postagSimpleToPOS.get(postagSimple2);
  String lemma1=Main.wordnet.lemmatizeTaggedWord(e1.getString(),postagStr1);
  String lemma2=Main.wordnet.lemmatizeTaggedWord(e2.getString(),postagStr2);
  if (checkSiblings && pos1 != null && pos2 != null && pos1 == pos2 && Main.wordnet.areSiblings(e1.getString(),e2.getString(),pos1)) {
    return new EventEventLink(e1.getEiid(),e2.getEiid(),TLink.Type.VAGUE);
  }
  if (checkLemmas && lemma1.equals(lemma2)) {
    return new EventEventLink(e1.getEiid(),e2.getEiid(),TLink.Type.VAGUE);
  }
 else {
    return null;
  }
}",0.9734339127582814
36083,"private TLink getTTLink(Timex e1,Timex e2,List<Tree> trees){
  if (ignoreSameSentence && e1.getSid() == e2.getSid())   return null;
  Tree sentParseTree1=trees.get(e1.getSid());
  Tree sentParseTree2=trees.get(e2.getSid());
  String postagStr1=posTagFromTree(sentParseTree1,e1.getTokenOffset());
  String postagStr2=posTagFromTree(sentParseTree2,e2.getTokenOffset());
  String postagSimple1=postagStr1.substring(0,2);
  String postagSimple2=postagStr2.substring(0,2);
  POS pos1=postagSimpleToPOS.get(postagSimple1);
  POS pos2=postagSimpleToPOS.get(postagSimple2);
  String lemma1=Main.wordnet.lemmatizeTaggedWord(e1.getText(),postagStr1);
  String lemma2=Main.wordnet.lemmatizeTaggedWord(e2.getText(),postagStr2);
  if (checkLemmas && lemma1.equals(lemma2)) {
    return new TimeTimeLink(e1.getTid(),e2.getTid(),TLink.Type.SIMULTANEOUS);
  }
 else {
    return null;
  }
}","private TLink getTTLink(Timex e1,Timex e2,List<Tree> trees){
  if (ignoreSameSentence && e1.getSid() == e2.getSid())   return null;
  Tree sentParseTree1=trees.get(e1.getSid());
  Tree sentParseTree2=trees.get(e2.getSid());
  String postagStr1=posTagFromTree(sentParseTree1,e1.getTokenOffset());
  String postagStr2=posTagFromTree(sentParseTree2,e2.getTokenOffset());
  String postagSimple1=postagStr1.substring(0,2);
  String postagSimple2=postagStr2.substring(0,2);
  if (postagStr1.length() < 2 || postagStr2.length() < 2) {
    return null;
  }
  POS pos1=postagSimpleToPOS.get(postagSimple1);
  POS pos2=postagSimpleToPOS.get(postagSimple2);
  String lemma1=Main.wordnet.lemmatizeTaggedWord(e1.getText(),postagStr1);
  String lemma2=Main.wordnet.lemmatizeTaggedWord(e2.getText(),postagStr2);
  if (checkLemmas && lemma1.equals(lemma2)) {
    return new TimeTimeLink(e1.getTid(),e2.getTid(),TLink.Type.SIMULTANEOUS);
  }
 else {
    return null;
  }
}",0.9557135046473484
36084,"private TLink getTTLink(Timex e1,Timex e2,List<Tree> trees){
  if (ignoreSameSentence && e1.getSid() == e2.getSid())   return null;
  Tree sentParseTree1=trees.get(e1.getSid());
  Tree sentParseTree2=trees.get(e2.getSid());
  String postagStr1=posTagFromTree(sentParseTree1,e1.getTokenOffset());
  String postagStr2=posTagFromTree(sentParseTree2,e2.getTokenOffset());
  String postagSimple1=postagStr1.substring(0,2);
  String postagSimple2=postagStr2.substring(0,2);
  if (postagStr1.length() < 2 || postagStr2.length() < 2) {
    return null;
  }
  POS pos1=postagSimpleToPOS.get(postagSimple1);
  POS pos2=postagSimpleToPOS.get(postagSimple2);
  String lemma1=Main.wordnet.lemmatizeTaggedWord(e1.getText(),postagStr1);
  String lemma2=Main.wordnet.lemmatizeTaggedWord(e2.getText(),postagStr2);
  if (checkLemmas && lemma1.equals(lemma2)) {
    return new TimeTimeLink(e1.getTid(),e2.getTid(),TLink.Type.SIMULTANEOUS);
  }
 else {
    return null;
  }
}","private TLink getTTLink(Timex e1,Timex e2,List<Tree> trees){
  if (ignoreSameSentence && e1.getSid() == e2.getSid())   return null;
  Tree sentParseTree1=trees.get(e1.getSid());
  Tree sentParseTree2=trees.get(e2.getSid());
  String postagStr1=posTagFromTree(sentParseTree1,e1.getTokenOffset());
  String postagStr2=posTagFromTree(sentParseTree2,e2.getTokenOffset());
  if (postagStr1.length() < 2 || postagStr2.length() < 2) {
    return null;
  }
  String postagSimple1=postagStr1.substring(0,2);
  String postagSimple2=postagStr2.substring(0,2);
  POS pos1=postagSimpleToPOS.get(postagSimple1);
  POS pos2=postagSimpleToPOS.get(postagSimple2);
  String lemma1=Main.wordnet.lemmatizeTaggedWord(e1.getText(),postagStr1);
  String lemma2=Main.wordnet.lemmatizeTaggedWord(e2.getText(),postagStr2);
  if (checkLemmas && lemma1.equals(lemma2)) {
    return new TimeTimeLink(e1.getTid(),e2.getTid(),TLink.Type.SIMULTANEOUS);
  }
 else {
    return null;
  }
}",0.9151832460732984
36085,"/** 
 * Test each sieve's precision independently. Runs each sieve and evaluates its proposed links against the input -info file. You must have loaded an -info file that has gold TLinks in it.
 */
public void runPrecisionGauntlet(){
  if (thedocs == null) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  thedocs.removeAllTLinks();
  Sieve sieves[]=createAllSieves(sieveClasses);
  SieveDocuments docs=Evaluate.getDevSet(thedocs);
  if (runOnTrain)   docs=Evaluate.getTrainSet(thedocs);
 else   if (runOnAll)   docs=thedocs;
  List<TLink> currentTLinks=new ArrayList<TLink>();
  Counter<String> numCorrect=new ClassicCounter<String>();
  Counter<String> numIncorrect=new ClassicCounter<String>();
  Counter<String> numIncorrectNonVague=new ClassicCounter<String>();
  Map<String,Counter<TLink.Type>> goldLabelCounts=new HashMap<String,Counter<TLink.Type>>();
  for (  String sc : sieveClasses)   goldLabelCounts.put(sc,new ClassicCounter<TLink.Type>());
  Map<String,Counter<String>> guessCounts=new HashMap<String,Counter<String>>();
  for (  String sc : sieveClasses)   guessCounts.put(sc,new ClassicCounter<String>());
  for (  SieveDocument doc : docs.getDocuments()) {
    System.out.println(""String_Node_Str"" + doc.getDocname());
    List<SieveSentence> sents=doc.getSentences();
    List<TLink> goldLinks=doc.getTlinks(true);
    Map<String,TLink> goldOrderedIdPairs=new HashMap<String,TLink>();
    for (    TLink tlink : goldLinks) {
      goldOrderedIdPairs.put(TLink.orderedIdPair(tlink),tlink);
    }
    for (int xx=0; xx < sieveClasses.length; xx++) {
      String sieveName=sieveClasses[xx];
      Sieve sieve=sieves[xx];
      if (sieve != null) {
        List<TLink> proposed=sieve.annotate(doc,currentTLinks);
        for (        TLink pp : proposed) {
          String orderedIdPair=TLink.orderedIdPair(pp);
          TLink goldLink=goldOrderedIdPairs.get(orderedIdPair);
          if (goldLink != null) {
            guessCounts.get(sieveName).incrementCount(goldLink.getOrderedRelation() + ""String_Node_Str"" + pp.getOrderedRelation());
            goldLabelCounts.get(sieveName).incrementCount(goldLink.getRelation());
          }
          if (Evaluate.isLinkCorrect(pp,goldLinks)) {
            numCorrect.incrementCount(sieveClasses[xx]);
          }
 else           if (goldLink != null) {
            if (!goldLink.getRelation().equals(TLink.Type.VAGUE)) {
              numIncorrectNonVague.incrementCount(sieveClasses[xx]);
            }
            numIncorrect.incrementCount(sieveClasses[xx]);
            if (debug) {
              System.out.printf(""String_Node_Str"",sieveClasses[xx],doc.getDocname(),goldOrderedIdPairs.get(orderedIdPair),pp,getLinkDebugInfo(pp,sents,doc));
            }
          }
 else {
            System.out.println(""String_Node_Str"" + sieveName + ""String_Node_Str""+ pp);
          }
        }
      }
    }
  }
  Counter<String> precision=new ClassicCounter<String>();
  Counter<String> precisionNonVague=new ClassicCounter<String>();
  for (  String sieveClass : sieveClasses) {
    double correct=numCorrect.getCount(sieveClass);
    double incorrect=numIncorrect.getCount(sieveClass);
    double incorrectNonVague=numIncorrectNonVague.getCount(sieveClass);
    double total=correct + incorrect;
    precision.incrementCount(sieveClass,total > 0 ? correct / total : 0.0);
    double totalNonVague=correct + incorrectNonVague;
    precisionNonVague.incrementCount(sieveClass,totalNonVague > 0 ? correct / totalNonVague : 0.0);
  }
  List<String> sortedKeys=Util.sortCounterKeys(precision);
  for (  String key : sortedKeys) {
    double correct=numCorrect.getCount(key);
    int numtabs=Math.max(1,4 - key.length() / 8);
    System.out.print(key);
    for (int tt=0; tt < numtabs; tt++)     System.out.print(""String_Node_Str"");
    System.out.printf(""String_Node_Str"",precision.getCount(key),correct,correct + numIncorrect.getCount(key),precisionNonVague.getCount(key),correct,correct + numIncorrectNonVague.getCount(key));
  }
  for (  String key : sortedKeys) {
    System.out.println(""String_Node_Str"" + key + ""String_Node_Str"");
    Evaluate.printBaseline(goldLabelCounts.get(key));
    Evaluate.confusionMatrix(guessCounts.get(key));
  }
}","/** 
 * Test each sieve's precision independently. Runs each sieve and evaluates its proposed links against the input -info file. You must have loaded an -info file that has gold TLinks in it.
 */
public void runPrecisionGauntlet(){
  if (thedocs == null) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  thedocs.removeAllTLinks();
  Sieve sieves[]=createAllSieves(sieveClasses);
  SieveDocuments docs=Evaluate.getDevSet(thedocs);
  if (runOnTrain)   docs=Evaluate.getTrainSet(thedocs);
 else   if (runOnAll)   docs=thedocs;
  List<TLink> currentTLinks=new ArrayList<TLink>();
  Counter<String> numCorrect=new ClassicCounter<String>();
  Counter<String> numIncorrect=new ClassicCounter<String>();
  Counter<String> numIncorrectNonVague=new ClassicCounter<String>();
  Map<String,Counter<TLink.Type>> goldLabelCounts=new HashMap<String,Counter<TLink.Type>>();
  for (  String sc : sieveClasses)   goldLabelCounts.put(sc,new ClassicCounter<TLink.Type>());
  Map<String,Counter<String>> guessCounts=new HashMap<String,Counter<String>>();
  for (  String sc : sieveClasses)   guessCounts.put(sc,new ClassicCounter<String>());
  for (  SieveDocument doc : docs.getDocuments()) {
    System.out.println(""String_Node_Str"" + doc.getDocname());
    List<SieveSentence> sents=doc.getSentences();
    List<TLink> goldLinks=thedocsUnchanged.getDocument(doc.getDocname()).getTlinks(true);
    Map<String,TLink> goldOrderedIdPairs=new HashMap<String,TLink>();
    for (    TLink tlink : goldLinks) {
      goldOrderedIdPairs.put(TLink.orderedIdPair(tlink),tlink);
    }
    for (int xx=0; xx < sieveClasses.length; xx++) {
      String sieveName=sieveClasses[xx];
      Sieve sieve=sieves[xx];
      if (sieve != null) {
        List<TLink> proposed=sieve.annotate(doc,currentTLinks);
        if (proposed != null) {
          for (          TLink pp : proposed) {
            String orderedIdPair=TLink.orderedIdPair(pp);
            TLink goldLink=goldOrderedIdPairs.get(orderedIdPair);
            if (goldLink != null) {
              guessCounts.get(sieveName).incrementCount(goldLink.getOrderedRelation() + ""String_Node_Str"" + pp.getOrderedRelation());
              goldLabelCounts.get(sieveName).incrementCount(goldLink.getRelation());
            }
            if (Evaluate.isLinkCorrect(pp,goldLinks)) {
              numCorrect.incrementCount(sieveClasses[xx]);
            }
 else             if (goldLink != null) {
              if (!goldLink.getRelation().equals(TLink.Type.VAGUE)) {
                numIncorrectNonVague.incrementCount(sieveClasses[xx]);
              }
              numIncorrect.incrementCount(sieveClasses[xx]);
              if (debug) {
                System.out.printf(""String_Node_Str"",sieveClasses[xx],doc.getDocname(),goldOrderedIdPairs.get(orderedIdPair),pp,getLinkDebugInfo(pp,sents,doc));
              }
            }
 else {
              System.out.println(""String_Node_Str"" + sieveName + ""String_Node_Str""+ pp);
            }
          }
        }
      }
    }
  }
  Counter<String> precision=new ClassicCounter<String>();
  Counter<String> precisionNonVague=new ClassicCounter<String>();
  for (  String sieveClass : sieveClasses) {
    double correct=numCorrect.getCount(sieveClass);
    double incorrect=numIncorrect.getCount(sieveClass);
    double incorrectNonVague=numIncorrectNonVague.getCount(sieveClass);
    double total=correct + incorrect;
    precision.incrementCount(sieveClass,total > 0 ? correct / total : 0.0);
    double totalNonVague=correct + incorrectNonVague;
    precisionNonVague.incrementCount(sieveClass,totalNonVague > 0 ? correct / totalNonVague : 0.0);
  }
  List<String> sortedKeys=Util.sortCounterKeys(precision);
  for (  String key : sortedKeys) {
    double correct=numCorrect.getCount(key);
    int numtabs=Math.max(1,4 - key.length() / 8);
    System.out.print(key);
    for (int tt=0; tt < numtabs; tt++)     System.out.print(""String_Node_Str"");
    System.out.printf(""String_Node_Str"",precision.getCount(key),correct,correct + numIncorrect.getCount(key),precisionNonVague.getCount(key),correct,correct + numIncorrectNonVague.getCount(key));
  }
  for (  String key : sortedKeys) {
    System.out.println(""String_Node_Str"" + key + ""String_Node_Str"");
    Evaluate.printBaseline(goldLabelCounts.get(key));
    Evaluate.confusionMatrix(guessCounts.get(key));
  }
}",0.9831061400442735
36086,"public List<String> getAllEiids(){
  List<String> eiids=new ArrayList<String>();
  if (this.eiid != null)   eiids.add(this.eiid);
  if (this.eiids != null)   for (  String eiid : eiids)   eiids.add(eiid);
  return eiids;
}","public List<String> getAllEiids(){
  List<String> eiids=new ArrayList<String>();
  if (this.eiid != null)   eiids.add(this.eiid);
  if (this.eiids != null)   for (  String eiid : this.eiids)   eiids.add(eiid);
  return eiids;
}",0.9888641425389756
36087,"/** 
 * @return A List of all Timex objects, including the document creation time.
 */
public List<Timex> getTimexes(){
  List<Timex> timexes=new ArrayList<Timex>();
  for (  SieveSentence sent : sentences)   timexes.addAll(sent.timexes());
  timexes.addAll(dcts);
  return timexes;
}","/** 
 * @return A List of all Timex objects, including the document creation time.
 */
public List<Timex> getTimexes(){
  List<Timex> timexes=new ArrayList<Timex>();
  for (  SieveSentence sent : sentences)   timexes.addAll(sent.timexes());
  if (dcts != null)   timexes.addAll(dcts);
  return timexes;
}",0.9659863945578232
36088,"public void addTimexes(List<Timex> newTimexes){
  timexes.addAll(newTimexes);
}","public void addTimexes(List<Timex> newTimexes){
  for (  Timex timex : newTimexes)   timex.setSID(this.sid);
  timexes.addAll(newTimexes);
}",0.7214611872146118
36089,"public List<TLink> annotate(SieveDocument doc,List<TLink> currentTLinks){
  List<List<Timex>> allTimexes=this.allTimexesBySentencePair(doc.getTimexesBySentence());
  List<TLink> proposed=new ArrayList<TLink>();
  Timex creationTime=doc.getDocstamp().isEmpty() ? null : doc.getDocstamp().get(0);
  for (  List<Timex> closeTimexes : allTimexes) {
    for (int t1=0; t1 < closeTimexes.size(); t1++) {
      for (int t2=t1 + 1; t2 < closeTimexes.size(); t2++) {
        TLink link=this.orderTimexes(closeTimexes.get(t1),closeTimexes.get(t2),creationTime);
        if (link != null)         proposed.add(link);
      }
    }
  }
  return proposed;
}","public List<TLink> annotate(SieveDocument doc,List<TLink> currentTLinks){
  List<List<Timex>> allTimexes=this.allTimexesBySentencePair(doc.getTimexesBySentence());
  List<TLink> proposed=new ArrayList<TLink>();
  Timex creationTime=(doc.getDocstamp() == null || doc.getDocstamp().isEmpty()) ? null : doc.getDocstamp().get(0);
  for (  List<Timex> closeTimexes : allTimexes) {
    for (int t1=0; t1 < closeTimexes.size(); t1++) {
      for (int t2=t1 + 1; t2 < closeTimexes.size(); t2++) {
        TLink link=this.orderTimexes(closeTimexes.get(t1),closeTimexes.get(t2),creationTime);
        if (link != null)         proposed.add(link);
      }
    }
  }
  return proposed;
}",0.976497346474602
36090,"public Closure(String path){
  loadClosureRules(path);
}","public Closure(String path) throws IOException {
  loadClosureRules(path);
}",0.8484848484848485
36091,"/** 
 * Reads the closure rules from a data file
 */
private void loadClosureRules(String path){
  try {
    int matchCase=0;
    int numAdded=0;
    BufferedReader in=new BufferedReader(new FileReader(path));
    System.out.println(""String_Node_Str"" + path);
    rules=new HashMap[4];
    for (int i=0; i < 4; i++) {
      rules[i]=new HashMap<String,TLink.TYPE>();
    }
    while (in.ready()) {
      String line=in.readLine();
      if (line.matches(""String_Node_Str""))       matchCase=0;
 else       if (line.matches(""String_Node_Str""))       matchCase=1;
 else       if (line.matches(""String_Node_Str""))       matchCase=2;
 else       if (line.matches(""String_Node_Str""))       matchCase=3;
 else       if (line.indexOf('/') > -1) {
      }
 else       if (line.length() > 5) {
        String parts[]=line.split(""String_Node_Str"");
        TLink.TYPE first=TLink.TYPE.valueOf(parts[0]);
        TLink.TYPE second=TLink.TYPE.valueOf(parts[1]);
        TLink.TYPE closed=TLink.TYPE.valueOf(parts[2]);
        rules[matchCase].put(first + ""String_Node_Str"" + second,closed);
        numAdded++;
      }
    }
    if (numAdded == 0) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","/** 
 * Reads the closure rules from a data file
 */
private void loadClosureRules(String path) throws IOException {
  int matchCase=0;
  int numAdded=0;
  BufferedReader in=new BufferedReader(new FileReader(path));
  try {
    System.out.println(""String_Node_Str"" + path);
    rules=new HashMap[4];
    for (int i=0; i < 4; i++) {
      rules[i]=new HashMap<String,TLink.TYPE>();
    }
    while (in.ready()) {
      String line=in.readLine();
      if (line.matches(""String_Node_Str""))       matchCase=0;
 else       if (line.matches(""String_Node_Str""))       matchCase=1;
 else       if (line.matches(""String_Node_Str""))       matchCase=2;
 else       if (line.matches(""String_Node_Str""))       matchCase=3;
 else       if (line.indexOf('/') > -1) {
      }
 else       if (line.length() > 5) {
        String parts[]=line.split(""String_Node_Str"");
        TLink.TYPE first=TLink.TYPE.valueOf(parts[0]);
        TLink.TYPE second=TLink.TYPE.valueOf(parts[1]);
        TLink.TYPE closed=TLink.TYPE.valueOf(parts[2]);
        rules[matchCase].put(first + ""String_Node_Str"" + second,closed);
        numAdded++;
      }
    }
    if (numAdded == 0) {
      System.out.println(""String_Node_Str"");
    }
  }
  finally {
    in.close();
  }
}",0.8882636655948553
36092,"public Annotator(){
  labeledLookup=new HashMap<String,String>();
  labeledRelations=new ArrayList<TLink>();
  closure=new Closure(""String_Node_Str"");
}","public Annotator() throws IOException {
  labeledLookup=new HashMap<String,String>();
  labeledRelations=new ArrayList<TLink>();
  closure=new Closure(""String_Node_Str"");
}",0.9382716049382716
36093,"/** 
 * @param args
 */
public static void main(String[] args){
  Annotator anno=new Annotator();
  if (args.length == 1) {
    anno.readHTML(args[0]);
    anno.prompt();
  }
 else   if (args.length == 2) {
    anno.readHTML(args[0]);
    anno.loadProgressFile(args[1]);
    anno.prompt();
  }
}","/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  Annotator anno=new Annotator();
  if (args.length == 1) {
    anno.readHTML(args[0]);
    anno.prompt();
  }
 else   if (args.length == 2) {
    anno.readHTML(args[0]);
    anno.loadProgressFile(args[1]);
    anno.prompt();
  }
}",0.9703947368421052
36094,"Repository(Log logger,boolean suppressTypesFromJavaRuntime,String... regexIgnoredClasses){
  this.logger=logger;
  this.suppressTypesFromJavaRuntime=suppressTypesFromJavaRuntime;
  if ((regexIgnoredClasses == null) || (regexIgnoredClasses.length == 0)) {
    ignoredClassesPattern=Pattern.compile(JAVA_TYPES_REGEX);
  }
 else {
    final StringBuilder regexBuilder=new StringBuilder(JAVA_TYPES_REGEX);
    for (    String regex : regexIgnoredClasses) {
      regexBuilder.append(""String_Node_Str"").append(regex).append(""String_Node_Str"");
    }
    final String regex=regexBuilder.toString();
    logger.debug(""String_Node_Str"" + regex + ""String_Node_Str"");
    ignoredClassesPattern=Pattern.compile(regex);
  }
}","Repository(Log logger,boolean suppressTypesFromJavaRuntime,String... regexIgnoredClasses){
  this.logger=logger;
  this.suppressTypesFromJavaRuntime=suppressTypesFromJavaRuntime;
  if ((regexIgnoredClasses == null) || (regexIgnoredClasses.length == 0)) {
    ignoredClassesPattern=Pattern.compile(JAVA_TYPES_REGEX);
  }
 else {
    final StringBuilder regexBuilder=new StringBuilder(JAVA_TYPES_REGEX);
    for (    String regex : regexIgnoredClasses) {
      if (StringUtils.isNotEmpty(regex)) {
        regexBuilder.append(""String_Node_Str"").append(regex).append(""String_Node_Str"");
      }
    }
    final String regex=regexBuilder.toString();
    logger.debug(""String_Node_Str"" + regex + ""String_Node_Str"");
    ignoredClassesPattern=Pattern.compile(regex);
  }
}",0.9641649763353616
36095,"private void analyzeJar(Repository repository,File jar){
  final ClassVisitor classVisitor=new ClassDependencyResolvingVisitor(repository,logger);
  try (ZipFile zipFile=new ZipFile(jar.getAbsolutePath())){
    final Enumeration<? extends ZipEntry> entries=zipFile.entries();
    while (entries.hasMoreElements()) {
      final ZipEntry entry=entries.nextElement();
      final String fileName=entry.getName();
      if (fileName.endsWith(CLASS_SUFFIX)) {
        logger.debug(""String_Node_Str"" + fileName + ""String_Node_Str""+ jar+ ""String_Node_Str"");
        final ClassReader classReader=new ClassReader(zipFile.getInputStream(entry));
        if (analyzeDependencies) {
          classReader.accept(classVisitor,ClassReader.SKIP_FRAMES);
        }
 else {
          repository.addType(classReader.getClassName().replace('/','.'));
        }
      }
    }
  }
 catch (  IOException e) {
    final String error=""String_Node_Str"" + jar + ""String_Node_Str"";
    logger.error(error,e);
    throw new IllegalStateException(error,e);
  }
}","private void analyzeJar(Repository repository,File jar){
  final ClassVisitor classVisitor=new ClassDependencyResolvingVisitor(repository,logger);
  try (ZipFile zipFile=new ZipFile(jar.getAbsolutePath())){
    final Enumeration<? extends ZipEntry> entries=zipFile.entries();
    while (entries.hasMoreElements()) {
      final ZipEntry entry=entries.nextElement();
      final String fileName=entry.getName();
      if (fileName.endsWith(CLASS_SUFFIX)) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fileName + ""String_Node_Str""+ jar+ ""String_Node_Str"");
        }
        final ClassReader classReader=new ClassReader(zipFile.getInputStream(entry));
        if (analyzeDependencies) {
          classReader.accept(classVisitor,ClassReader.SKIP_FRAMES);
        }
 else {
          repository.addType(classReader.getClassName().replace('/','.'));
        }
      }
    }
  }
 catch (  IOException e) {
    final String error=""String_Node_Str"" + jar + ""String_Node_Str"";
    logger.error(error,e);
    throw new IllegalStateException(error,e);
  }
}",0.9684111268269684
36096,"private void analyzeClassesDirectory(Repository repository,File directory,ClassVisitor classVisitor){
  if (directory.isDirectory()) {
    final String[] entries=directory.list();
    for (    String entry : entries) {
      analyzeClassesDirectory(repository,new File(directory,entry),classVisitor);
    }
  }
  final String path=directory.getPath();
  if (path.endsWith(CLASS_SUFFIX)) {
    logger.debug(""String_Node_Str"" + path + ""String_Node_Str"");
    try (FileInputStream classFileStream=new FileInputStream(directory)){
      final ClassReader classReader=new ClassReader(classFileStream);
      if (analyzeDependencies) {
        classReader.accept(classVisitor,ClassReader.SKIP_FRAMES);
      }
 else {
        repository.addType(classReader.getClassName().replace('/','.'));
      }
    }
 catch (    IOException e) {
      final String error=""String_Node_Str"" + directory + ""String_Node_Str"";
      logger.error(error,e);
      throw new IllegalStateException(error,e);
    }
  }
}","private void analyzeClassesDirectory(Repository repository,File directory,ClassVisitor classVisitor){
  if (directory.isDirectory()) {
    final String[] entries=directory.list();
    for (    String entry : entries) {
      analyzeClassesDirectory(repository,new File(directory,entry),classVisitor);
    }
  }
  final String path=directory.getPath();
  if (path.endsWith(CLASS_SUFFIX)) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + path + ""String_Node_Str"");
    }
    try (FileInputStream classFileStream=new FileInputStream(directory)){
      final ClassReader classReader=new ClassReader(classFileStream);
      if (analyzeDependencies) {
        classReader.accept(classVisitor,ClassReader.SKIP_FRAMES);
      }
 else {
        repository.addType(classReader.getClassName().replace('/','.'));
      }
    }
 catch (    IOException e) {
      final String error=""String_Node_Str"" + directory + ""String_Node_Str"";
      logger.error(error,e);
      throw new IllegalStateException(error,e);
    }
  }
}",0.9708929452392698
36097,"@Override public void visitOuterClass(String owner,String name,String desc){
  logger.debug(""String_Node_Str"" + desc);
}","@Override public void visitOuterClass(String owner,String name,String desc){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + desc);
  }
}",0.8602150537634409
36098,"private void addDependency(String typeDescription,String typeName){
  final String dependency=ARRAY_BRACKETS.matcher(typeName).replaceAll(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + typeDescription + ""String_Node_Str""+ dependency+ ""String_Node_Str"");
  repository.addDependency(dependency);
}","private void addDependency(String typeDescription,String typeName){
  final String dependency=ARRAY_BRACKETS.matcher(typeName).replaceAll(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + typeDescription + ""String_Node_Str""+ dependency+ ""String_Node_Str"");
  }
  repository.addDependency(dependency);
}",0.9147286821705426
36099,"private boolean typeFromJavaRuntime(String type){
  if (JAVA_RUNTIME_PACKAGES.matcher(type).matches()) {
    final String classResource=type.replace('.','/') + ""String_Node_Str"";
    final URL it=ClassLoader.getSystemClassLoader().getResource(classResource);
    if (it != null) {
      final String sourcePath=it.getFile();
      if (sourcePath.startsWith(JAVA_HOME_PATH)) {
        logger.debug(""String_Node_Str"" + type + ""String_Node_Str""+ JAVA_HOME_PATH+ ""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}","private boolean typeFromJavaRuntime(String type){
  if (JAVA_RUNTIME_PACKAGES.matcher(type).matches()) {
    final Boolean isJdkType=alreadyProcessedJavaTypes.get(type);
    if (isJdkType != null) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + type + ""String_Node_Str"");
      }
      return isJdkType;
    }
    final String classResource=type.replace('.','/') + ""String_Node_Str"";
    final URL it=ClassLoader.getSystemClassLoader().getResource(classResource);
    if (it != null) {
      final String sourcePath=it.getFile();
      if (sourcePath.startsWith(JAVA_HOME_PATH)) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + type + ""String_Node_Str""+ JAVA_HOME_PATH+ ""String_Node_Str"");
        }
        alreadyProcessedJavaTypes.put(type,true);
        return true;
      }
    }
    alreadyProcessedJavaTypes.put(type,false);
    return false;
  }
  return false;
}",0.681602172437203
36100,"private void addFiltered(Collection<String> set,String type){
  if (ignoredClassesPattern.matcher(type).matches()) {
    logger.debug(""String_Node_Str"" + type + ""String_Node_Str"");
    return;
  }
  if (suppressTypesFromJavaRuntime && typeFromJavaRuntime(type)) {
    return;
  }
  set.add(type);
}","private void addFiltered(Collection<String> set,String type){
  if (ignoredClassesPattern.matcher(type).matches()) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + type + ""String_Node_Str"");
    }
    return;
  }
  if (suppressTypesFromJavaRuntime && typeFromJavaRuntime(type)) {
    return;
  }
  set.add(type);
}",0.9327073552425664
36101,"ClassInDirectDependency referenceClassInDirectAndTransitiveDependency(ClassInTransitiveDependency referenceToClassInTransitiveDependency,double d,Float f,X string){
  final ClassInTransitiveDependency localReference=referenceToClassInTransitiveDependency;
  try {
    final Long longValue=someTee(Long.class);
  }
 catch (  SQLException e) {
  }
  final DataSource dataSource=null;
  final Text text=null;
  final DiagnosticCommandMBean dcmb=null;
  final int k=3 + 4;
  final Date date=new Date(System.currentTimeMillis());
  float m=Math.max(1,2);
  final Class<String[]> stringArrayClass=String[].class;
  final Class<Long[][]> longArrayArrayClass=Long[][].class;
  final ClassInDirectDependency directDependency=new ClassInDirectDependency();
  final String s=String.valueOf(directDependency.getOne());
  return directDependency;
}","ClassInDirectDependency referenceClassInDirectAndTransitiveDependency(ClassInTransitiveDependency referenceToClassInTransitiveDependency,double d,Float f,X string){
  final ClassInTransitiveDependency localReference=referenceToClassInTransitiveDependency;
  try {
    final Long longValue=someTee(Long.class);
  }
 catch (  SQLException e) {
  }
  final DataSource dataSource=null;
  final DataSource secondDataSource=null;
  final DataSource thirdDataSource=null;
  final Text text=null;
  final DiagnosticCommandMBean dcmb=null;
  final int k=3 + 4;
  final Date date=new Date(System.currentTimeMillis());
  float m=Math.max(1,2);
  final Class<String[]> stringArrayClass=String[].class;
  final Class<Long[][]> longArrayArrayClass=Long[][].class;
  final ClassInDirectDependency directDependency=new ClassInDirectDependency();
  final String s=String.valueOf(directDependency.getOne());
  return directDependency;
}",0.9526525955504848
36102,"public static <T>WrappedNbtTag<T> read(DataInput dataInput){
  try {
    if (READ == null) {
      Class<?> readLimiter=MinecraftReflection.getNbtReadLimiterClass();
      ClassTemplate template=new Reflection().reflect(readLimiter);
      FieldAccessor<Object> instanceField=template.getSafeFieldByType(readLimiter).getAccessor();
      final Object singletonInstance=instanceField.getStatic();
      List<SafeMethod> candidates=template.getSafeMethods(withArguments(DataInput.class,int.class,readLimiter));
      if (candidates.size() > 0) {
        WRITE=candidates.get(0).getAccessor();
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (LOAD == null) {
        LOAD=new NbtLoad(){
          @Override public Object load(          DataInput dataInput){
            return READ.invokeStatic(dataInput,0,singletonInstance);
          }
        }
;
      }
    }
    return NbtFactory.fromNmsHandle(LOAD.load(dataInput));
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public static <T>WrappedNbtTag<T> read(DataInput dataInput){
  try {
    if (READ == null) {
      Class<?> readLimiter=MinecraftReflection.getNbtReadLimiterClass();
      ClassTemplate limiterTemplate=new Reflection().reflect(readLimiter);
      ClassTemplate tagTemplate=new Reflection().reflect(MinecraftReflection.getNbtBaseClass());
      FieldAccessor<Object> instanceField=limiterTemplate.getSafeFieldByType(readLimiter).getAccessor();
      final Object singletonInstance=instanceField.getStatic();
      List<SafeMethod> candidates=tagTemplate.getSafeMethods(withArguments(DataInput.class,int.class,readLimiter));
      if (candidates.size() > 0) {
        WRITE=candidates.get(0).getAccessor();
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (LOAD == null) {
        LOAD=new NbtLoad(){
          @Override public Object load(          DataInput dataInput){
            return READ.invokeStatic(dataInput,0,singletonInstance);
          }
        }
;
      }
    }
    return NbtFactory.fromNmsHandle(LOAD.load(dataInput));
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9466063348416288
36103,"public static Set<Class<?>> getAllSuperClasses(final Class<?> clazz,Matcher<? super Class<?>> matchers){
  return match(getAllSuperClasses(clazz),matchers);
}","public static Set<Class<?>> getAllSuperClasses(final Class<?> clazz,Matcher<? super Class<?>>... matchers){
  return match(getAllSuperClasses(clazz),matchers);
}",0.9905956112852664
36104,"@Override public int getArgumentCount(){
  return this.constructor.getParameterCount();
}","@Override public int getArgumentCount(){
  return this.constructor.getParameterTypes().length;
}",0.9081081081081082
36105,"@Override public int getArgumentCount(){
  return this.method.getParameterCount();
}","@Override public int getArgumentCount(){
  return this.method.getParameterTypes().length;
}",0.9028571428571428
36106,"public static Matcher<Method> withArgumentCount(final int argumentCount){
  return new AbstractMatcher<Method>(){
    @Override public boolean matches(    Method type){
      return type.getParameterCount() == argumentCount;
    }
  }
;
}","public static Matcher<Method> withArgumentCount(final int argumentCount){
  return new AbstractMatcher<Method>(){
    @Override public boolean matches(    Method type){
      return type.getParameterTypes().length == argumentCount;
    }
  }
;
}",0.9565217391304348
36107,"public ClassFile(final byte[] bytes) throws IOException, ClassFormatException {
  DataInputStream codeStream=new DataInputStream(new ByteArrayInputStream(bytes));
  this.magic=codeStream.readInt();
  if (magic != 0xCAFEBABE) {
    throw new IOException(""String_Node_Str"" + Integer.toHexString(magic) + ""String_Node_Str"");
  }
  this.minor=codeStream.readUnsignedShort();
  this.major=codeStream.readUnsignedShort();
  if (major > JDK_8) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.constantPool=new ConstantPool(codeStream);
  this.accessFlags=codeStream.readUnsignedShort();
  this.thisClass=codeStream.readUnsignedShort();
  this.superClass=codeStream.readUnsignedShort();
  int interfacesCount=codeStream.readUnsignedShort();
  this.interfaces=new int[interfacesCount];
  for (int i=0; i < interfacesCount; i++) {
    this.interfaces[i]=codeStream.readUnsignedShort();
  }
  int fieldCount=codeStream.readUnsignedShort();
  this.fields=new Field[interfacesCount];
  for (int i=0; i < fieldCount; i++) {
    this.fields[i]=new Field(codeStream,this.constantPool);
  }
  int methodCount=codeStream.readUnsignedShort();
  this.methods=new Method[methodCount];
  for (int i=0; i < methodCount; i++) {
    this.methods[i]=new Method(codeStream,this.constantPool);
  }
  int attributeCount=codeStream.readUnsignedShort();
  this.attributes=new Attribute[attributeCount];
  for (int i=0; i < attributeCount; i++) {
    this.attributes[i]=Attribute.readAttribute(codeStream,this.constantPool);
  }
}","public ClassFile(final byte[] bytes) throws IOException, ClassFormatException {
  DataInputStream codeStream=new DataInputStream(new ByteArrayInputStream(bytes));
  this.magic=codeStream.readInt();
  if (magic != 0xCAFEBABE) {
    throw new IOException(""String_Node_Str"" + Integer.toHexString(magic) + ""String_Node_Str"");
  }
  this.minor=codeStream.readUnsignedShort();
  this.major=codeStream.readUnsignedShort();
  if (major > JDK_8) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.constantPool=new ConstantPool(codeStream);
  this.accessFlags=codeStream.readUnsignedShort();
  this.thisClass=codeStream.readUnsignedShort();
  this.superClass=codeStream.readUnsignedShort();
  int interfacesCount=codeStream.readUnsignedShort();
  this.interfaces=new int[interfacesCount];
  for (int i=0; i < interfacesCount; i++) {
    this.interfaces[i]=codeStream.readUnsignedShort();
  }
  int fieldCount=codeStream.readUnsignedShort();
  this.fields=new FieldInfo[fieldCount];
  for (int i=0; i < fieldCount; i++) {
    this.fields[i]=new FieldInfo(codeStream,this.constantPool);
  }
  int methodCount=codeStream.readUnsignedShort();
  this.methods=new MethodInfo[methodCount];
  for (int i=0; i < methodCount; i++) {
    this.methods[i]=new MethodInfo(codeStream,this.constantPool);
  }
  int attributeCount=codeStream.readUnsignedShort();
  this.attributes=new Attribute[attributeCount];
  for (int i=0; i < attributeCount; i++) {
    this.attributes[i]=Attribute.readAttribute(codeStream,this.constantPool);
  }
}",0.9898460530625616
36108,"public Field[] getFields(){
  return this.fields;
}","public FieldInfo[] getFields(){
  return this.fields;
}",0.9622641509433962
36109,"public final void write(DataOutputStream codeStream) throws IOException {
  codeStream.writeInt(0xCAFEBABE);
  codeStream.writeShort(this.minor);
  codeStream.writeShort(this.major);
  this.constantPool.write(codeStream);
  codeStream.writeShort(this.accessFlags);
  codeStream.writeShort(this.thisClass);
  codeStream.writeShort(this.superClass);
  codeStream.writeShort(this.interfaces.length);
  for (  int i : this.interfaces) {
    codeStream.writeShort(i);
  }
  codeStream.writeShort(this.fields.length);
  for (  Field field : this.fields) {
    field.write(codeStream);
  }
  codeStream.writeShort(this.methods.length);
  for (  Method method : this.methods) {
    method.write(codeStream);
  }
  if (this.attributes != null) {
    codeStream.writeShort(this.attributes.length);
    for (    Attribute attribute : this.attributes) {
      attribute.write(codeStream);
    }
  }
 else {
    codeStream.writeShort(0);
  }
  codeStream.flush();
}","public final void write(DataOutputStream codeStream) throws IOException {
  codeStream.writeInt(0xCAFEBABE);
  codeStream.writeShort(this.minor);
  codeStream.writeShort(this.major);
  this.constantPool.write(codeStream);
  codeStream.writeShort(this.accessFlags);
  codeStream.writeShort(this.thisClass);
  codeStream.writeShort(this.superClass);
  codeStream.writeShort(this.interfaces.length);
  for (  int i : this.interfaces) {
    codeStream.writeShort(i);
  }
  codeStream.writeShort(this.fields.length);
  for (  FieldInfo fieldInfo : this.fields) {
    fieldInfo.write(codeStream);
  }
  codeStream.writeShort(this.methods.length);
  for (  MethodInfo methodInfo : this.methods) {
    methodInfo.write(codeStream);
  }
  if (this.attributes != null) {
    codeStream.writeShort(this.attributes.length);
    for (    Attribute attribute : this.attributes) {
      attribute.write(codeStream);
    }
  }
 else {
    codeStream.writeShort(0);
  }
  codeStream.flush();
}",0.9740663900414938
36110,"public Method[] getMethods(){
  return this.methods;
}","public MethodInfo[] getMethods(){
  return this.methods;
}",0.9642857142857144
36111,"@Test public void testBytecode() throws IOException, ClassFormatException {
  ClassFile classFile=new ClassFile(ClassUtils.classToBytes(ClassFileTest.class.getCanonicalName()));
  log(""String_Node_Str"" + classFile.getClassName());
  log(""String_Node_Str"" + classFile.getSuperClassName());
  log(""String_Node_Str"" + Integer.toHexString(classFile.getAccessFlags()));
  log(""String_Node_Str"" + classFile.getSourceFile());
}","@Test public void testBytecode() throws IOException, ClassFormatException {
  ClassFile classFile=new ClassFile(ClassUtils.classToBytes(ClassFileTest.class.getCanonicalName()));
  log(""String_Node_Str"" + classFile.getClassName());
  log(""String_Node_Str"" + classFile.getSuperClassName());
  log(""String_Node_Str"" + Integer.toHexString(classFile.getAccessFlags()));
  log(""String_Node_Str"");
  for (  MethodInfo info : classFile.getMethods()) {
    log(info.getSignature());
  }
}",0.8698553948832035
36112,"public Class defineClass(byte[] bytes){
  return super.defineClass(ClassReader.this.getClassName(),bytes,0,bytes.length);
}","public Class defineClass(byte[] bytes){
  return super.defineClass(ClassReader.this.getClassName().replace('/','.'),bytes,0,bytes.length);
}",0.935361216730038
36113,"public final void write(DataOutputStream codeStream) throws IOException {
  codeStream.writeShort(this.size);
  for (int i=0; i < this.constantPool.length; i++) {
    if (this.constantPool[i] == null)     continue;
    this.constantPool[i].write(codeStream);
  }
}","public final void write(DataOutputStream codeStream) throws IOException {
  codeStream.writeShort(this.size);
  for (int i=1; i < this.size; i++) {
    if (this.constantPool[i] != null) {
      this.constantPool[i].write(codeStream);
    }
  }
}",0.8722986247544204
36114,"protected void read(DataInputStream inputStream) throws IOException, ClassFormatException {
  byte tag;
  size=inputStream.readUnsignedShort();
  constantPool=new Constant[size];
  for (int i=1; i < size; i++) {
    constantPool[i]=Constant.readConstant(inputStream);
    tag=constantPool[i].getTag();
    if ((tag == CONSTANT_Double) || (tag == CONSTANT_Long)) {
      i++;
    }
  }
}","protected void read(DataInputStream inputStream) throws IOException, ClassFormatException {
  byte tag;
  this.size=inputStream.readUnsignedShort();
  this.constantPool=new Constant[this.size];
  for (int i=1; i < this.size; i++) {
    this.constantPool[i]=Constant.readConstant(inputStream);
    tag=constantPool[i].getTag();
    if ((tag == CONSTANT_Double) || (tag == CONSTANT_Long)) {
      i++;
    }
  }
}",0.9686323713927228
36115,"public String getName() throws ClassFormatException {
  Utf8Constant constant=(Utf8Constant)this.constantPool.getConstant(this.nameIndex,CONSTANT_Utf8);
  return constant.getString();
}","public String getName() throws ClassFormatException {
  Utf8Constant constant=this.constantPool.getUtf8(this.nameIndex);
  return constant.getString();
}",0.8875739644970414
36116,"public static Attribute readAttribute(DataInputStream codeStream,ConstantPool constantPool) throws IOException, ClassFormatException {
  int index=codeStream.readUnsignedShort();
  String tag=constantPool.getUtf8(index).getString();
  int length=codeStream.readInt();
switch (tag) {
case ATTR_SOURCE_FILE:
    return new SourceFile(index,length,codeStream,constantPool);
case ATTR_SOURCE_DEBUG_EXTENSION:
  return new SourceDebugExtension(index,length,codeStream,constantPool);
case ATTR_CONSTANT_VALUE:
return new ConstantValue(index,length,codeStream,constantPool);
case ATTR_CODE:
return new Code(index,length,codeStream,constantPool);
case ATTR_EXCEPTIONS:
return new Exceptions(index,length,codeStream,constantPool);
case ATTR_LINE_NUMBER_TABLE:
return new LineNumberTable(index,length,codeStream,constantPool);
case ATTR_LOCAL_VARIABLE_TABLE:
return new LocalVariableTable(index,length,codeStream,constantPool);
case ATTR_INNER_CLASSES:
return new InnerClasses(index,length,codeStream,constantPool);
case ATTR_SYNTHETIC:
return new Synthetic(index,length,codeStream,constantPool);
case ATTR_DEPRECATED:
return new Deprecated(index,length,codeStream,constantPool);
case ATTR_SIGNATURE:
return new Signature(index,length,codeStream,constantPool);
case ATTR_STACK_MAP:
return new StackMap(index,length,codeStream,constantPool);
case ATTR_RUNTIME_VISIBLE_ANNOTATIONS:
return new RuntimeVisibleAnnotations(index,length,codeStream,constantPool,true);
case ATTR_RUNTIME_INVISIBLE_ANNOTATIONS:
return new RuntimeInvisibleAnnotations(index,length,codeStream,constantPool,true);
case ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS:
return new RuntimeInvisibleParameterAnnotations(index,length,codeStream,constantPool);
case ATTR_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS:
return new RuntimeInvisibleParameterAnnotations(index,length,codeStream,constantPool);
case ATTR_ANNOTATION_DEFAULT:
return new AnnotationDefault(index,length,codeStream,constantPool);
case ATTR_LOCAL_VARIABLE_TYPE_TABLE:
return new LocalVariableTypeTable(index,length,codeStream,constantPool);
case ATTR_ENCLOSING_METHOD:
return new EnclosingMethod(index,length,codeStream,constantPool);
case ATTR_BOOTSTRAP_METHODS:
return new BootstrapMethods(index,length,codeStream,constantPool);
case ATTR_STACK_MAP_TABLE:
return new StackMapTable(index,length,codeStream,constantPool);
case ATTR_METHOD_PARAMETERS:
return new MethodParameters(index,length,codeStream,constantPool);
}
return null;
}","public static Attribute readAttribute(DataInputStream codeStream,ConstantPool constantPool) throws IOException, ClassFormatException {
  int index=codeStream.readUnsignedShort();
  String tag=constantPool.getUtf8(index).getString();
  int length=codeStream.readInt();
switch (tag) {
case ATTR_SOURCE_FILE:
    return new SourceFile(index,length,codeStream,constantPool);
case ATTR_SOURCE_DEBUG_EXTENSION:
  return new SourceDebugExtension(index,length,codeStream,constantPool);
case ATTR_CONSTANT_VALUE:
return new ConstantValue(index,length,codeStream,constantPool);
case ATTR_CODE:
return new Code(index,length,codeStream,constantPool);
case ATTR_EXCEPTIONS:
return new Exceptions(index,length,codeStream,constantPool);
case ATTR_LINE_NUMBER_TABLE:
return new LineNumberTable(index,length,codeStream,constantPool);
case ATTR_LOCAL_VARIABLE_TABLE:
return new LocalVariableTable(index,length,codeStream,constantPool);
case ATTR_INNER_CLASSES:
return new InnerClasses(index,length,codeStream,constantPool);
case ATTR_SYNTHETIC:
return new Synthetic(index,length,codeStream,constantPool);
case ATTR_DEPRECATED:
return new Deprecated(index,length,codeStream,constantPool);
case ATTR_SIGNATURE:
return new Signature(index,length,codeStream,constantPool);
case ATTR_STACK_MAP:
return new StackMap(index,length,codeStream,constantPool);
case ATTR_RUNTIME_VISIBLE_ANNOTATIONS:
return new RuntimeVisibleAnnotations(index,length,codeStream,constantPool,true);
case ATTR_RUNTIME_INVISIBLE_ANNOTATIONS:
return new RuntimeInvisibleAnnotations(index,length,codeStream,constantPool,true);
case ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS:
return new RuntimeInvisibleParameterAnnotations(index,length,codeStream,constantPool);
case ATTR_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS:
return new RuntimeInvisibleParameterAnnotations(index,length,codeStream,constantPool);
case ATTR_ANNOTATION_DEFAULT:
return new AnnotationDefault(index,length,codeStream,constantPool);
case ATTR_LOCAL_VARIABLE_TYPE_TABLE:
return new LocalVariableTypeTable(index,length,codeStream,constantPool);
case ATTR_ENCLOSING_METHOD:
return new EnclosingMethod(index,length,codeStream,constantPool);
case ATTR_BOOTSTRAP_METHODS:
return new BootstrapMethods(index,length,codeStream,constantPool);
case ATTR_STACK_MAP_TABLE:
return new StackMapTable(index,length,codeStream,constantPool);
case ATTR_METHOD_PARAMETERS:
return new MethodParameters(index,length,codeStream,constantPool);
default :
throw new ClassFormatException(""String_Node_Str"" + tag);
}
}",0.9838514331853048
36117,"@Override public void write(DataOutputStream codeStream) throws IOException {
  super.write(codeStream);
  codeStream.writeShort(this.maxStack);
  codeStream.writeShort(this.maxLocals);
  codeStream.writeInt(this.codeLength);
  codeStream.write(this.code,0,this.codeLength);
  codeStream.write(this.exceptionTableLength);
  for (int i=0; i < this.exceptionTableLength; i++) {
    this.exceptionTable[i].write(codeStream);
  }
  codeStream.writeShort(this.attributeCount);
  for (int i=0; i < this.attributeCount; i++) {
    this.attributes[i].write(codeStream);
  }
}","@Override public void write(DataOutputStream codeStream) throws IOException {
  super.write(codeStream);
  codeStream.writeShort(this.maxStack);
  codeStream.writeShort(this.maxLocals);
  codeStream.writeInt(this.codeLength);
  codeStream.write(this.code,0,this.codeLength);
  codeStream.writeShort(this.exceptionTableLength);
  for (int i=0; i < this.exceptionTableLength; i++) {
    this.exceptionTable[i].write(codeStream);
  }
  codeStream.writeShort(this.attributeCount);
  for (int i=0; i < this.attributeCount; i++) {
    this.attributes[i].write(codeStream);
  }
}",0.9956101843722563
36118,"@Override public void write(DataOutputStream codeStream) throws IOException {
  codeStream.writeByte(this.tag);
  codeStream.write(this.name);
}","@Override public void write(DataOutputStream codeStream) throws IOException {
  codeStream.writeByte(this.tag);
  codeStream.writeShort(this.name);
}",0.9829351535836176
36119,"@Test public void test() throws IOException, ClassFormatException {
  ClassReader reader=new ClassReader(ClassReaderTest.class.getCanonicalName());
  log(""String_Node_Str"" + reader.getMagic());
  log(""String_Node_Str"" + reader.getMinor());
  log(""String_Node_Str"" + reader.getMajor());
  log(""String_Node_Str"" + reader.getAccessFlags());
  log(""String_Node_Str"" + reader.getClassName());
  log(""String_Node_Str"" + reader.getSuperClassName());
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  for (  Interface iface : reader.getInterfaces()) {
    log(""String_Node_Str"" + iface.getName());
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  for (  FieldInfo field : reader.getFields()) {
    log(""String_Node_Str"" + field.getName());
    log(""String_Node_Str"" + field.getAccessFlags());
    log(""String_Node_Str"" + field.getSignature());
    log(""String_Node_Str"");
    for (    Attribute attribute : field.getAttributes()) {
      log(""String_Node_Str"" + attribute.getName());
    }
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  for (  MethodInfo method : reader.getMethods()) {
    log(""String_Node_Str"" + method.getName());
    log(""String_Node_Str"" + method.getAccessFlags());
    log(""String_Node_Str"" + method.getSignature());
    log(""String_Node_Str"");
    for (    Attribute attribute : method.getAttributes()) {
      log(""String_Node_Str"" + attribute.getName());
    }
  }
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  for (  Attribute attribute : reader.getAttributes()) {
    log(""String_Node_Str"" + attribute.getName());
  }
}","@Test public void test() throws IOException, ClassFormatException {
  ClassReader reader=new ClassReader(HelloWorld.class.getCanonicalName());
  log(""String_Node_Str"");
  print(reader);
  Class<?> testClass=reader.defineClass();
  reader=new ClassReader(reader.getByteCode());
  print(reader);
  log(""String_Node_Str"" + testClass.getCanonicalName());
}",0.2028081123244929
36120,"public <F>JsonRpcClientLocal(JsonRpcHandler<? extends Object> handler){
  this.remoteHandler=handler;
  this.remoteHandlerManager.setJsonRpcHandler(remoteHandler);
  session=new ClientSession(""String_Node_Str"",null,this);
  rsHelper=new JsonRpcRequestSenderHelper(){
    @Override public <P,R>Response<R> internalSendRequest(    Request<P> request,    Class<R> resultClass) throws IOException {
      return localSendRequest(request,resultClass);
    }
    @Override protected void internalSendRequest(    Request<? extends Object> request,    Class<JsonElement> resultClass,    Continuation<Response<JsonElement>> continuation){
      Response<JsonElement> result=localSendRequest(request,resultClass);
      if (result == null) {
        continuation.onSuccess(result);
      }
    }
  }
;
}","public <F>JsonRpcClientLocal(JsonRpcHandler<? extends Object> handler){
  this.remoteHandler=handler;
  this.remoteHandlerManager.setJsonRpcHandler(remoteHandler);
  session=new ClientSession(""String_Node_Str"",null,this);
  rsHelper=new JsonRpcRequestSenderHelper(){
    @Override public <P,R>Response<R> internalSendRequest(    Request<P> request,    Class<R> resultClass) throws IOException {
      return localSendRequest(request,resultClass);
    }
    @Override protected void internalSendRequest(    Request<? extends Object> request,    Class<JsonElement> resultClass,    Continuation<Response<JsonElement>> continuation){
      Response<JsonElement> result=localSendRequest(request,resultClass);
      if (result != null) {
        continuation.onSuccess(result);
      }
    }
  }
;
}",0.9987389659520808
36121,"@Test public void objectRefTestAsync() throws InterruptedException {
  SampleClass obj=factory.getFactory(SampleClass.Factory.class).create(""String_Node_Str"",false).withAtt3(0.5f).withAtt4(22).build();
  final SampleClass obj2=factory.getFactory(SampleClass.Factory.class).create(""String_Node_Str"",false).withAtt3(0.5f).withAtt4(22).build();
  final BlockingQueue<SampleClass> queue=new ArrayBlockingQueue<>(1);
  obj.echoObjectRef(obj2,new Continuation<SampleClass>(){
    @Override public void onSuccess(    SampleClass obj3){
      queue.add(obj3);
    }
    @Override public void onError(    Throwable cause){
    }
  }
);
  SampleClass obj3=queue.poll(2000,MILLISECONDS);
  Assert.assertNotNull(obj3);
  assertEquals(obj3.getAtt1(),obj2.getAtt1());
  assertEquals(obj3.getAtt2(),obj2.getAtt2());
}","@Test public void objectRefTestAsync() throws InterruptedException {
  SampleClass obj=factory.getFactory(SampleClass.Factory.class).create(""String_Node_Str"",false).withAtt3(0.5f).withAtt4(22).build();
  final SampleClass obj2=factory.getFactory(SampleClass.Factory.class).create(""String_Node_Str"",false).withAtt3(0.5f).withAtt4(22).build();
  final BlockingQueue<SampleClass> queue=new ArrayBlockingQueue<>(1);
  obj.echoObjectRef(obj2,new Continuation<SampleClass>(){
    @Override public void onSuccess(    SampleClass obj3){
      queue.add(obj3);
    }
    @Override public void onError(    Throwable cause){
    }
  }
);
  SampleClass obj3=queue.poll(10000,MILLISECONDS);
  Assert.assertNotNull(obj3);
  assertEquals(obj3.getAtt1(),obj2.getAtt1());
  assertEquals(obj3.getAtt2(),obj2.getAtt2());
}",0.9981308411214952
36122,"@Test public void test() throws TException, IOException, InterruptedException {
  System.setProperty(KeepAliveManager.KEEP_ALIVE_INTERVAL_TIME_PROPERTY,""String_Node_Str"");
  log.info(""String_Node_Str"");
  JsonRpcServerThrift server=new JsonRpcServerThrift(new EchoJsonRpcHandler(),""String_Node_Str"",19292);
  server.start();
  log.info(""String_Node_Str"");
  long initTime=System.nanoTime();
  log.info(""String_Node_Str"");
  JsonRpcClient client=new JsonRpcClientThrift(""String_Node_Str"",19292,""String_Node_Str"",7979);
  if (!latch.await(15,TimeUnit.SECONDS)) {
    Assert.fail(""String_Node_Str"");
  }
 else {
    long duration=((System.nanoTime() - initTime) / 1000000);
    Assert.assertTrue(""String_Node_Str"" + duration + ""String_Node_Str""+ (NUM_KEEP_ALIVES * 1000)+ ""String_Node_Str"",duration > NUM_KEEP_ALIVES * 1000);
    Assert.assertTrue(""String_Node_Str"" + duration + ""String_Node_Str""+ ((NUM_KEEP_ALIVES + 1) * 1000)+ ""String_Node_Str"",duration < (NUM_KEEP_ALIVES + 1) * 1000);
  }
  client.close();
  log.info(""String_Node_Str"");
  server.destroy();
  log.info(""String_Node_Str"");
}","@Test public void test() throws TException, IOException, InterruptedException {
  System.setProperty(KeepAliveManager.KEEP_ALIVE_INTERVAL_TIME_PROPERTY,""String_Node_Str"");
  log.info(""String_Node_Str"");
  JsonRpcServerThrift server=new JsonRpcServerThrift(new EchoJsonRpcHandler(),""String_Node_Str"",19292);
  server.start();
  log.info(""String_Node_Str"");
  long initTime=System.nanoTime();
  log.info(""String_Node_Str"");
  JsonRpcClient client=new JsonRpcClientThrift(""String_Node_Str"",19292,""String_Node_Str"",7979);
  if (!latch.await(15,TimeUnit.SECONDS)) {
    Assert.fail(""String_Node_Str"");
  }
 else {
    long duration=((System.nanoTime() - initTime) / 1000000);
    Assert.assertTrue(""String_Node_Str"" + duration + ""String_Node_Str""+ (NUM_KEEP_ALIVES * 1000)+ ""String_Node_Str"",duration > NUM_KEEP_ALIVES * 1000);
    Assert.assertTrue(""String_Node_Str"" + NUM_KEEP_ALIVES + ""String_Node_Str""+ duration+ ""String_Node_Str""+ ((NUM_KEEP_ALIVES + 3) * 1000)+ ""String_Node_Str"",duration < (NUM_KEEP_ALIVES + 3) * 1000);
  }
  client.close();
  log.info(""String_Node_Str"");
  server.destroy();
  log.info(""String_Node_Str"");
}",0.927027027027027
36123,"protected void internalSendRequestThrift(Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation){
  log.debug(""String_Node_Str"",request);
  if (request.getMethod().equals(""String_Node_Str"")) {
    JsonObject params=(JsonObject)request.getParams();
    params.addProperty(""String_Node_Str"",localHandlerAddress.getHostString());
    params.addProperty(""String_Node_Str"",Integer.valueOf(localHandlerAddress.getPort()));
  }
  sendRequest(request,resultClass,continuation,true);
}","protected void internalSendRequestThrift(Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation){
  log.debug(""String_Node_Str"",request);
  processRequest(request);
  sendRequest(request,resultClass,continuation,true);
}",0.5158924205378973
36124,"@Override public void onComplete(invokeJsonRpc_call thriftResponse){
  clientPool.release(client);
  try {
    String response=thriftResponse.getResult();
    log.debug(""String_Node_Str"",response.trim());
    continuation.onSuccess(JsonUtils.fromJsonResponse(response,resultClass));
  }
 catch (  TException e) {
    continuation.onError(e);
  }
}","@Override public void onComplete(invokeJsonRpc_call thriftResponse){
  clientPool.release(client);
  try {
    String responseStr=thriftResponse.getResult();
    log.debug(""String_Node_Str"",responseStr.trim());
    Response<JsonElement> response=JsonUtils.fromJsonResponse(responseStr,resultClass);
    processResponse(response);
    continuation.onSuccess(response);
  }
 catch (  TException e) {
    continuation.onError(e);
  }
}",0.8318356867779204
36125,"@Override public void run(){
  while (true) {
    try {
      Thread.sleep(KEEP_ALIVE_TIME);
    }
 catch (    InterruptedException e) {
      return;
    }
synchronized (keepAliveThread) {
      if (stopKeepAlive) {
        return;
      }
    }
    Set<String> copiedSessions;
synchronized (sessions) {
      copiedSessions=new HashSet<>(sessions);
    }
    for (    String copiedSession : copiedSessions) {
      int id=new Random().nextInt();
      Request<Void> request=new Request<>(copiedSession,Integer.valueOf(id),""String_Node_Str"",null);
      log.info(""String_Node_Str"",copiedSession);
      try {
        Response<Void> response=internalSendRequestThrift(request,Void.class);
        if (response.isError()) {
          log.error(""String_Node_Str"",copiedSession);
synchronized (sessions) {
            sessions.remove(copiedSession);
          }
        }
      }
 catch (      TransportException e) {
        log.warn(""String_Node_Str"",copiedSession,e);
      }
    }
  }
}","@Override public void run(){
  log.debug(""String_Node_Str"");
  while (true) {
    try {
      Thread.sleep(KEEP_ALIVE_TIME);
    }
 catch (    InterruptedException e) {
      return;
    }
    log.debug(""String_Node_Str"");
synchronized (keepAliveThread) {
      if (stopKeepAlive) {
        return;
      }
    }
    Set<String> copiedSessions;
synchronized (sessions) {
      copiedSessions=new HashSet<>(sessions);
    }
    for (    String copiedSession : copiedSessions) {
      int id=new Random().nextInt();
      Request<Void> request=new Request<>(copiedSession,Integer.valueOf(id),""String_Node_Str"",null);
      log.info(""String_Node_Str"",copiedSession);
      try {
        Response<Void> response=internalSendRequestThrift(request,Void.class);
        if (response.isError()) {
          log.error(""String_Node_Str"",copiedSession);
synchronized (sessions) {
            sessions.remove(copiedSession);
          }
        }
      }
 catch (      TransportException e) {
        log.warn(""String_Node_Str"",copiedSession,e);
      }
    }
  }
}",0.9676470588235294
36126,"private void sendRequest(final Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation,final boolean retry){
  final AsyncClient client=clientPool.acquireAsync();
  try {
    client.invokeJsonRpc(request.toString(),new AsyncMethodCallback<AsyncClient.invokeJsonRpc_call>(){
      @Override public void onError(      Exception exception){
        clientPool.release(client);
        log.error(""String_Node_Str"",exception);
        if (retry && exception instanceof ConnectException) {
          sendRequest(request,resultClass,continuation,false);
        }
 else {
          continuation.onError(exception);
        }
      }
      @Override public void onComplete(      invokeJsonRpc_call thriftResponse){
        clientPool.release(client);
        try {
          String response=thriftResponse.getResult();
          log.debug(""String_Node_Str"",response.trim());
          continuation.onSuccess(JsonUtils.fromJsonResponse(response,resultClass));
        }
 catch (        TException e) {
          continuation.onError(e);
        }
      }
    }
);
  }
 catch (  TException e) {
    log.error(""String_Node_Str"",e);
    continuation.onError(e);
  }
}","private void sendRequest(final Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation,final boolean retry){
  final AsyncClient client=clientPool.acquireAsync();
  try {
    client.invokeJsonRpc(request.toString(),new AsyncMethodCallback<AsyncClient.invokeJsonRpc_call>(){
      @Override public void onError(      Exception exception){
        clientPool.release(client);
        log.error(""String_Node_Str"",exception);
        if (retry && exception instanceof ConnectException) {
          sendRequest(request,resultClass,continuation,false);
        }
 else {
          continuation.onError(exception);
        }
      }
      @Override public void onComplete(      invokeJsonRpc_call thriftResponse){
        clientPool.release(client);
        try {
          String responseStr=thriftResponse.getResult();
          log.debug(""String_Node_Str"",responseStr.trim());
          Response<JsonElement> response=JsonUtils.fromJsonResponse(responseStr,resultClass);
          processResponse(response);
          continuation.onSuccess(response);
        }
 catch (        TException e) {
          continuation.onError(e);
        }
      }
    }
);
  }
 catch (  TException e) {
    log.error(""String_Node_Str"",e);
    continuation.onError(e);
  }
}",0.9434111594776414
36127,"public KwsBowerTest(){
  kwsUrl=getProperty(""String_Node_Str"",""String_Node_Str"");
}","public KwsBowerTest(){
  kwsUrl=""String_Node_Str"";
}",0.7703703703703704
36128,"private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  String jsonMessage=request.toString();
synchronized (wsSession) {
    wsSession.sendMessage(new TextMessage(jsonMessage));
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str"",e);
  }
}","private <P,R>Response<R> internalSendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  connectIfNecessary();
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  String jsonMessage=request.toString();
  log.debug(""String_Node_Str"",jsonMessage.trim());
synchronized (wsSession) {
    wsSession.sendMessage(new TextMessage(jsonMessage));
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJson;
  try {
    responseJson=responseFuture.get(TIMEOUT,TimeUnit.MILLISECONDS);
    log.debug(""String_Node_Str"",responseJson.toString());
    Response<R> response=MessageUtils.convertResponse(responseJson,resultClass);
    if (response.getSessionId() != null) {
      session.setSessionId(response.getSessionId());
    }
    return response;
  }
 catch (  InterruptedException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new KurentoException(""String_Node_Str"",e);
  }
catch (  TimeoutException e) {
    throw new TransportException(""String_Node_Str"" + TIMEOUT + ""String_Node_Str"",e);
  }
}",0.9530779164873008
36129,"@Override public void run(){
  try {
    Response<JsonElement> result=internalSendRequestWebSocket(request,resultClass);
    try {
      continuation.onSuccess(result);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    continuation.onError(e);
  }
}","@Override public void run(){
  try {
    handlerManager.handleRequest(session,fromJsonRequest(message,JsonElement.class),rs);
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"" + message,e);
  }
}",0.4767441860465116
36130,"private void handleRequestFromServer(JsonObject message) throws IOException {
  handlerManager.handleRequest(session,fromJsonRequest(message,JsonElement.class),rs);
}","private void handleRequestFromServer(final JsonObject message) throws IOException {
  execService.submit(new Runnable(){
    @Override public void run(){
      try {
        handlerManager.handleRequest(session,fromJsonRequest(message,JsonElement.class),rs);
      }
 catch (      IOException e) {
        log.warn(""String_Node_Str"" + message,e);
      }
    }
  }
);
}",0.616822429906542
36131,"@Bean public ThriftConnectorJsonRpcHandler thriftConnectorJsonRpcHandler(){
  return new ThriftConnectorJsonRpcHandler();
}","@Bean public MediaConnectorJsonRpcHandler thriftConnectorJsonRpcHandler(){
  return new MediaConnectorJsonRpcHandler();
}",0.9262295081967212
36132,"@Before public void setupMediaElements() throws InterruptedException {
  pipeline.newWebRtcEndpoint().buildAsync(cont);
  pipeline.newWebRtcEndpoint().buildAsync(cont);
  sdp=creationResults.poll(1,SECONDS);
  sdp2=creationResults.poll(1,SECONDS);
  Assert.assertNotNull(sdp);
  Assert.assertNotNull(sdp2);
}","@Before public void setupMediaElements() throws InterruptedException {
  pipeline.newWebRtcEndpoint().buildAsync(cont);
  pipeline.newWebRtcEndpoint().buildAsync(cont);
  sdp=creationResults.poll(2,SECONDS);
  sdp2=creationResults.poll(2,SECONDS);
  Assert.assertNotNull(sdp);
  Assert.assertNotNull(sdp2);
}",0.9935064935064936
36133,"@Bean public ThriftConnectorJsonRpcHandler2 thriftConnectorJsonRpcHandler(){
  return new ThriftConnectorJsonRpcHandler2();
}","@Bean public ThriftConnectorJsonRpcHandler thriftConnectorJsonRpcHandler(){
  return new ThriftConnectorJsonRpcHandler();
}",0.9919354838709676
36134,"private void createKurentoConf(){
  Configuration cfg=new Configuration();
  Map<String,Object> data=new HashMap<String,Object>();
  if (rabbitMqAddress != null) {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",rabbitMqAddress.getHost());
    data.put(""String_Node_Str"",rabbitMqAddress.getPort());
  }
 else {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",thriftAddress.getHost());
    data.put(""String_Node_Str"",thriftAddress.getPort());
  }
  data.put(""String_Node_Str"",gstPlugins);
  data.put(""String_Node_Str"",debugOptions);
  data.put(""String_Node_Str"",serverCommand);
  data.put(""String_Node_Str"",workspace);
  data.put(""String_Node_Str"",httpPort);
  cfg.setClassForTemplateLoading(KurentoMediaServerManager.class,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  Shell.run(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"");
}","private void createKurentoConf(){
  Configuration cfg=new Configuration();
  Map<String,Object> data=new HashMap<String,Object>();
  if (rabbitMqAddress != null) {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",rabbitMqAddress.getHost());
    data.put(""String_Node_Str"",String.valueOf(rabbitMqAddress.getPort()));
  }
 else {
    data.put(""String_Node_Str"",""String_Node_Str"");
    data.put(""String_Node_Str"",thriftAddress.getHost());
    data.put(""String_Node_Str"",String.valueOf(thriftAddress.getPort()));
  }
  data.put(""String_Node_Str"",gstPlugins);
  data.put(""String_Node_Str"",debugOptions);
  data.put(""String_Node_Str"",serverCommand);
  data.put(""String_Node_Str"",workspace);
  data.put(""String_Node_Str"",String.valueOf(httpPort));
  cfg.setClassForTemplateLoading(KurentoMediaServerManager.class,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  createFileFromTemplate(cfg,data,""String_Node_Str"");
  Shell.run(""String_Node_Str"",""String_Node_Str"",workspace + ""String_Node_Str"");
}",0.9777365491651204
36135,"/** 
 * Test for   {@link MediaSessionStartedEvent}
 * @throws InterruptedException
 */
@Test public void testEventMediaSessionStarted() throws InterruptedException {
  final PlayerEndpoint player=pipeline.newPlayerEndpoint(URL_SMALL).build();
  player.connect(httpEp);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  player.addEndOfStreamListener(new MediaEventListener<EndOfStreamEvent>(){
    @Override public void onEvent(    EndOfStreamEvent event){
      eosLatch.countDown();
    }
  }
);
  final BlockingQueue<ListenerRegistration> events=new ArrayBlockingQueue<>(1);
  httpEp.addMediaSessionStartedListener(new MediaEventListener<MediaSessionStartedEvent>(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      player.play();
    }
  }
,new Continuation<ListenerRegistration>(){
    @Override public void onSuccess(    ListenerRegistration result){
      events.add(result);
    }
    @Override public void onError(    Throwable cause){
      throw new KurentoMediaFrameworkException(cause);
    }
  }
);
  ListenerRegistration reg=events.poll(500,MILLISECONDS);
  Assert.assertNotNull(reg);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEp.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  try {
    eosLatch.await(500,MILLISECONDS);
  }
 catch (  InterruptedException e) {
    player.release();
    throw new KurentoMediaFrameworkException(e);
  }
}","/** 
 * Test for   {@link MediaSessionStartedEvent}
 * @throws InterruptedException
 */
@Test public void testEventMediaSessionStarted() throws InterruptedException {
  final PlayerEndpoint player=pipeline.newPlayerEndpoint(URL_SMALL).build();
  player.connect(httpEp);
  final CountDownLatch eosLatch=new CountDownLatch(1);
  player.addEndOfStreamListener(new MediaEventListener<EndOfStreamEvent>(){
    @Override public void onEvent(    EndOfStreamEvent event){
      eosLatch.countDown();
    }
  }
);
  final BlockingQueue<ListenerRegistration> events=new ArrayBlockingQueue<>(1);
  httpEp.addMediaSessionStartedListener(new MediaEventListener<MediaSessionStartedEvent>(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      player.play();
    }
  }
,new Continuation<ListenerRegistration>(){
    @Override public void onSuccess(    ListenerRegistration result){
      events.add(result);
    }
    @Override public void onError(    Throwable cause){
      throw new KurentoMediaFrameworkException(cause);
    }
  }
);
  ListenerRegistration reg=events.poll(500,MILLISECONDS);
  Assert.assertNotNull(reg);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEp.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  try {
    eosLatch.await(500,MILLISECONDS);
  }
  finally {
    player.release();
  }
}",0.97152
36136,"@Override public void onEvent(MediaSessionStartedEvent event){
  player.play();
}","@Override public void onEvent(MediaSessionTerminatedEvent event){
  latch.countDown();
}",0.8284023668639053
36137,"/** 
 * Test for   {@link MediaSessionTerminatedEvent}
 */
@Ignore @Test public void testEventMediaSessionTerminated(){
}","/** 
 * Test for   {@link MediaSessionTerminatedEvent}
 * @throws InterruptedException
 */
@Ignore @Test public void testEventMediaSessionTerminated() throws InterruptedException {
  final PlayerEndpoint player=pipeline.newPlayerEndpoint(URL_SMALL).build();
  player.connect(httpEp);
  httpEp.addMediaSessionStartedListener(new MediaEventListener<MediaSessionStartedEvent>(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      player.play();
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(1);
  final BlockingQueue<ListenerRegistration> events=new ArrayBlockingQueue<>(1);
  httpEp.addMediaSessionTerminatedListener(new MediaEventListener<MediaSessionTerminatedEvent>(){
    @Override public void onEvent(    MediaSessionTerminatedEvent event){
      latch.countDown();
    }
  }
,new Continuation<ListenerRegistration>(){
    @Override public void onSuccess(    ListenerRegistration result){
      events.add(result);
    }
    @Override public void onError(    Throwable cause){
      throw new KurentoMediaFrameworkException(cause);
    }
  }
);
  ListenerRegistration reg=events.poll(500,MILLISECONDS);
  Assert.assertNotNull(reg);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEp.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  try {
    latch.await(500,MILLISECONDS);
  }
  finally {
    player.release();
  }
}",0.143620178041543
36138,"@Override public void onEvent(MediaSessionTerminatedEvent event){
  sem.release();
}","@Override public void onEvent(MediaSessionTerminatedEvent event){
  events.add(event);
}",0.872093023255814
36139,"/** 
 * Test for   {@link MediaSessionTerminatedEvent}
 * @throws InterruptedException
 */
@Ignore @Test public void testEventMediaSessionTerminated() throws InterruptedException {
  HttpGetEndpoint httpEP=pipeline.newHttpGetEndpoint().build();
  final Semaphore sem=new Semaphore(0);
  httpEP.addMediaSessionTerminatedListener(new MediaEventListener<MediaSessionTerminatedEvent>(){
    @Override public void onEvent(    MediaSessionTerminatedEvent event){
      sem.release();
    }
  }
);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEP.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  Assert.assertTrue(sem.tryAcquire(50,SECONDS));
  httpEP.release();
}","/** 
 * Test for   {@link MediaSessionTerminatedEvent}
 * @throws InterruptedException
 */
@Test public void testEventMediaSessionTerminated() throws InterruptedException {
  final PlayerEndpoint player=pipeline.newPlayerEndpoint(URL_SMALL).build();
  HttpGetEndpoint httpEP=pipeline.newHttpGetEndpoint().terminateOnEOS().build();
  player.connect(httpEP);
  httpEP.addMediaSessionStartedListener(new MediaEventListener<MediaSessionStartedEvent>(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      player.play();
    }
  }
);
  final BlockingQueue<MediaSessionTerminatedEvent> events=new ArrayBlockingQueue<>(1);
  httpEP.addMediaSessionTerminatedListener(new MediaEventListener<MediaSessionTerminatedEvent>(){
    @Override public void onEvent(    MediaSessionTerminatedEvent event){
      events.add(event);
    }
  }
);
  try (CloseableHttpClient httpclient=HttpClientBuilder.create().build()){
    httpclient.execute(new HttpGet(httpEP.getUrl()));
  }
 catch (  ClientProtocolException e) {
    throw new KurentoMediaFrameworkException();
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException();
  }
  Assert.assertNotNull(events.poll(20,SECONDS));
  httpEP.release();
  player.release();
}",0.6334283000949668
36140,"@Override public void onEvent(MediaSessionTerminatedEvent event){
  sem.release();
}","@Override public void onEvent(MediaSessionStartedEvent event){
  player.play();
}",0.8606060606060606
36141,"@Override protected void failed(Throwable e,Description description){
  if (KurentoServicesTestHelper.printKmsLog()) {
    String testDir=KurentoServicesTestHelper.getTestDir();
    String testCaseName=KurentoServicesTestHelper.getTestCaseName();
    String testName=KurentoServicesTestHelper.getTestName();
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"",description.getClassName(),testName);
    log.info(""String_Node_Str"",e.getClass().getCanonicalName(),e.getMessage());
    log.info(""String_Node_Str"");
    try {
      BufferedReader br=new BufferedReader(new FileReader(testDir + ""String_Node_Str"" + testCaseName+ ""String_Node_Str""+ testName+ ""String_Node_Str""));
      String line;
      while ((line=br.readLine()) != null) {
        log.info(line);
      }
      br.close();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
    log.info(""String_Node_Str"");
  }
}","@Override protected void failed(Throwable e,Description description){
  if (KurentoServicesTestHelper.printKmsLog()) {
    String testDir=KurentoServicesTestHelper.getTestDir();
    String testCaseName=KurentoServicesTestHelper.getTestCaseName();
    String testName=KurentoServicesTestHelper.getTestName();
    File file=new File(testDir + ""String_Node_Str"" + testCaseName+ ""String_Node_Str""+ testName+ ""String_Node_Str"");
    if (file.exists()) {
      log.info(""String_Node_Str"");
      log.info(""String_Node_Str"",description.getClassName(),testName);
      log.info(""String_Node_Str"",e.getClass().getCanonicalName(),e.getMessage());
      log.info(""String_Node_Str"");
      try {
        for (        String line : FileUtils.readLines(file)) {
          log.info(line);
        }
      }
 catch (      IOException e1) {
        log.warn(""String_Node_Str"",e1);
      }
      log.info(""String_Node_Str"");
    }
  }
}",0.5779967159277504
36142,"public int countKmsProcesses(){
  int result=0;
  try {
    String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + workspace + ""String_Node_Str""};
    Process countKms=Runtime.getRuntime().exec(command);
    BufferedReader br=new BufferedReader(new InputStreamReader(countKms.getInputStream()));
    StringBuilder builder=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      builder.append(line);
    }
    result=Integer.parseInt(builder.toString());
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return result;
}","public int countKmsProcesses(){
  int result=0;
  try {
    String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + workspace + ""String_Node_Str""};
    Process countKms=Runtime.getRuntime().exec(command);
    String stringFromStream=CharStreams.toString(new InputStreamReader(countKms.getInputStream(),""String_Node_Str""));
    result=Integer.parseInt(stringFromStream.trim());
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return result;
}",0.6777469990766389
36143,"/** 
 * Sender method for error messages in JSON throw a request.
 * @param asyncCtx Asynchronous context
 * @param message JSON error message (as a Java class)
 * @throws IOException Exception while parsing operating with asynchronous context
 */
public void sendJsonError(AsyncContext asyncCtx,JsonRpcResponse message){
  try {
    internalSendJsonAnswer(asyncCtx,message);
  }
 catch (  Throwable e) {
    log.info(""String_Node_Str"",e);
  }
 finally {
    if (asyncCtx != null) {
      asyncCtx.complete();
    }
  }
}","/** 
 * Sender method for error messages in JSON throw a request.
 * @param asyncCtx Asynchronous context
 * @param message JSON error message (as a Java class)
 * @throws IOException Exception while parsing operating with asynchronous context
 */
public void sendJsonError(AsyncContext asyncCtx,JsonRpcResponse message){
  try {
    internalSendJsonAnswer(asyncCtx,message);
  }
 catch (  Throwable e) {
    log.info(""String_Node_Str"",e);
  }
 finally {
    if (asyncCtx != null) {
      try {
        asyncCtx.complete();
      }
 catch (      IllegalStateException e) {
        log.warn(""String_Node_Str"",e.getClass().getName());
      }
    }
  }
}",0.8883205456095482
36144,"protected synchronized void destroy(){
  registered=false;
  if (initialAsyncCtx != null) {
    initialAsyncCtx.complete();
    initialAsyncCtx=null;
  }
  if (manager != null) {
    manager.remove(this.sessionId);
  }
  if (eventQueue.isEmpty() && currentPollingThread != null) {
    currentPollingThread.interrupt();
  }
  try {
    releaseOwnMediaServerResources();
  }
 catch (  Throwable e) {
    getLogger().error(e.getMessage(),e);
  }
}","protected synchronized void destroy(){
  registered=false;
  if (initialAsyncCtx != null) {
    try {
      initialAsyncCtx.complete();
    }
 catch (    IllegalStateException e) {
      log.warn(""String_Node_Str"",e.getClass().getName());
    }
    initialAsyncCtx=null;
  }
  if (manager != null) {
    manager.remove(this.sessionId);
  }
  if (eventQueue.isEmpty() && currentPollingThread != null) {
    currentPollingThread.interrupt();
  }
  try {
    releaseOwnMediaServerResources();
  }
 catch (  Throwable e) {
    getLogger().error(e.getMessage(),e);
  }
}",0.8800792864222002
36145,"public void callOnUncaughtExceptionThrown(Throwable t){
  try {
    internalRawCallToOnUncaughtExceptionThrown(t);
  }
 catch (  Throwable tw) {
    callOnUncaughtExceptionThrown(tw);
  }
}","public void callOnUncaughtExceptionThrown(Throwable t){
  try {
    internalRawCallToOnUncaughtExceptionThrown(t);
  }
 catch (  Throwable tw) {
    log.error(""String_Node_Str"",t);
    log.error(""String_Node_Str"",tw);
  }
}",0.7621359223300971
36146,"public static <P>Request<P> convertRequest(Request<? extends Object> request,Class<P> paramsClass){
  P paramsP;
  if (paramsClass.isAssignableFrom(request.getParams().getClass())) {
    paramsP=(P)request.getParams();
  }
 else   if (request.getParams() instanceof JsonElement) {
    paramsP=convertJsonTo((JsonElement)request.getParams(),paramsClass);
  }
 else {
    throw new ClassCastException();
  }
  @SuppressWarnings(""String_Node_Str"") Request<P> requestP=(Request<P>)request;
  requestP.setParams(paramsP);
  return requestP;
}","@SuppressWarnings(""String_Node_Str"") public static <P>Request<P> convertRequest(Request<? extends Object> request,Class<P> paramsClass){
  P paramsP=null;
  Object params=request.getParams();
  if (params != null) {
    if (paramsClass.isAssignableFrom(params.getClass())) {
      paramsP=(P)params;
    }
 else     if (params instanceof JsonElement) {
      paramsP=convertJsonTo((JsonElement)request.getParams(),paramsClass);
    }
 else {
      throw new ClassCastException();
    }
  }
  @SuppressWarnings(""String_Node_Str"") Request<P> requestP=(Request<P>)request;
  requestP.setParams(paramsP);
  return requestP;
}",0.5820379965457686
36147,"@Bean public ThriftInterfaceConfiguration thriftInterfaceConfiguration(){
  ThriftInterfaceConfigurationOverload config=new ThriftInterfaceConfigurationOverload();
  return config;
}","@Bean public ThriftInterfaceConfiguration thriftInterfaceConfiguration(){
  ThriftInterfaceConfiguration config=new ThriftInterfaceConfiguration();
  config.setServerAddress(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  config.setServerPort(Integer.parseInt(PropertiesManager.getSystemProperty(""String_Node_Str"",""String_Node_Str"")));
  log.info(""String_Node_Str"" + config.getServerAddress() + ""String_Node_Str"");
  log.info(""String_Node_Str"" + config.getServerPort() + ""String_Node_Str"");
  return config;
}",0.4836415362731152
36148,"@Bean public MediaApiConfiguration mediaApiConfiguration(){
  MediaApiConfigurationOverload config=new MediaApiConfigurationOverload();
  return config;
}","@Bean public MediaApiConfiguration mediaApiConfiguration(){
  MediaApiConfiguration config=new MediaApiConfiguration();
  config.setHandlerAddress(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  config.setHandlerPort(Integer.parseInt(PropertiesManager.getSystemProperty(""String_Node_Str"",""String_Node_Str"")));
  log.info(""String_Node_Str"" + config.getHandlerAddress() + ""String_Node_Str"");
  log.info(""String_Node_Str"" + config.getHandlerPort() + ""String_Node_Str"");
  return config;
}",0.4208909370199692
36149,"protected void internalSendRequestThrift(Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation){
  LOG.info(""String_Node_Str"",request);
  if (request.getMethod().equals(""String_Node_Str"")) {
    JsonObject params=(JsonObject)request.getParams();
    params.addProperty(""String_Node_Str"",localHandlerAddress.getHostName());
    params.addProperty(""String_Node_Str"",localHandlerAddress.getPort());
  }
  sendRequest(request,resultClass,continuation,true);
}","protected void internalSendRequestThrift(Request<Object> request,final Class<JsonElement> resultClass,final Continuation<Response<JsonElement>> continuation){
  LOG.info(""String_Node_Str"",request);
  if (request.getMethod().equals(""String_Node_Str"")) {
    JsonObject params=(JsonObject)request.getParams();
    params.addProperty(""String_Node_Str"",localHandlerAddress.getHostString());
    params.addProperty(""String_Node_Str"",localHandlerAddress.getPort());
  }
  sendRequest(request,resultClass,continuation,true);
}",0.749034749034749
36150,"private void internalEventJsonRpc(String request){
  try {
    LOG.debug(""String_Node_Str"",request.trim());
    Request<JsonObject> requestObj=JsonUtils.fromJsonRequest(request,JsonObject.class);
    JsonElement subsJsonElem=requestObj.getParams().get(""String_Node_Str"");
    if (subsJsonElem == null) {
      LOG.error(""String_Node_Str"",request);
      return;
    }
    String subscription=subsJsonElem.getAsString().trim();
    Session session=subscriptions.get(subscription);
    if (session == null) {
      LOG.error(""String_Node_Str"",subscriptions);
      LOG.info(""String_Node_Str"");
      return;
    }
    try {
      session.sendNotification(""String_Node_Str"",requestObj.getParams());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","private void internalEventJsonRpc(String request){
  try {
    LOG.debug(""String_Node_Str"",request.trim());
    Request<JsonObject> requestObj=JsonUtils.fromJsonRequest(request,JsonObject.class);
    JsonElement subsJsonElem=requestObj.getParams().get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"");
    if (subsJsonElem == null) {
      LOG.error(""String_Node_Str"",request);
      return;
    }
    String subscription=subsJsonElem.getAsString().trim();
    Session session=subscriptions.get(subscription);
    if (session == null) {
      LOG.error(""String_Node_Str"",subscriptions);
      LOG.info(""String_Node_Str"");
      return;
    }
    try {
      session.sendNotification(""String_Node_Str"",requestObj.getParams());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.9762594093804284
36151,"protected void requestOnComplete(invokeJsonRpc_call mediaServerResponse,Transaction transaction,boolean subscribeResponse){
  try {
    String result=mediaServerResponse.getResult();
    Response<JsonElement> response=JsonUtils.fromJsonResponse(result,JsonElement.class);
    if (response.isError()) {
      ResponseError error=response.getError();
      transaction.sendError(error.getCode(),error.getMessage(),error.getData());
    }
 else {
      if (subscribeResponse) {
        String subscription=response.getResult().getAsString().trim();
        subscriptions.put(subscription,transaction.getSession());
      }
      transaction.sendResponse(response.getResult());
    }
  }
 catch (  TException e) {
    try {
      transaction.sendError(e);
    }
 catch (    IOException e1) {
      throw new KurentoMediaFrameworkException(""String_Node_Str"");
    }
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"");
  }
}","protected void requestOnComplete(invokeJsonRpc_call mediaServerResponse,Transaction transaction,boolean subscribeResponse){
  try {
    String result=mediaServerResponse.getResult();
    Response<JsonElement> response=JsonUtils.fromJsonResponse(result,JsonElement.class);
    if (response.isError()) {
      ResponseError error=response.getError();
      transaction.sendError(error.getCode(),error.getMessage(),error.getData());
    }
 else {
      if (subscribeResponse) {
        try {
          String subscription=((JsonObject)response.getResult()).get(""String_Node_Str"").getAsString().trim();
          subscriptions.put(subscription,transaction.getSession());
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"" + response + ""String_Node_Str"",e);
        }
      }
      transaction.sendResponse(response.getResult());
    }
  }
 catch (  TException e) {
    try {
      transaction.sendError(e);
    }
 catch (    IOException e1) {
      throw new KurentoMediaFrameworkException(""String_Node_Str"");
    }
  }
catch (  IOException e) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"");
  }
}",0.914802475011899
36152,"private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
    wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",JsonUtils.toJson(request),wsSession.getId(),e);
    return null;
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}","private <P,R>Response<R> sendRequestWebSocket(Request<P> request,Class<R> resultClass) throws IOException {
  Future<Response<JsonElement>> responseFuture=null;
  if (request.getId() != null) {
    responseFuture=pendingRequests.prepareResponse(request.getId());
  }
  try {
synchronized (wsSession) {
      wsSession.sendMessage(new TextMessage(JsonUtils.toJson(request)));
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",JsonUtils.toJson(request),wsSession.getId(),e);
    return null;
  }
  if (responseFuture == null) {
    return null;
  }
  Response<JsonElement> responseJsonObject;
  try {
    responseJsonObject=responseFuture.get();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  return MessageUtils.convertResponse(responseJsonObject,resultClass);
}",0.9761772853185596
36153,"@PostConstruct private void init(){
  ctx.getBean(""String_Node_Str"",this.processor,new InetSocketAddress(config.getHandlerAddress(),config.getHandlerPort()));
}","@PostConstruct private void init(){
  LOG.info(""String_Node_Str"" + config.getHandlerAddress());
  LOG.info(""String_Node_Str"" + config.getHandlerPort());
  ThriftServer server=(ThriftServer)ctx.getBean(""String_Node_Str"",this.processor,new InetSocketAddress(config.getHandlerAddress(),config.getHandlerPort()));
  server.start();
}",0.65439672801636
36154,"@PostConstruct private void init(){
  LOG.info(""String_Node_Str"" + config.getHandlerAddress());
  LOG.info(""String_Node_Str"" + config.getHandlerPort());
  ThriftServer server=(ThriftServer)ctx.getBean(""String_Node_Str"",this.processor,new InetSocketAddress(config.getHandlerAddress(),config.getHandlerPort()));
  server.start();
}","@PostConstruct private void init(){
  LOG.info(""String_Node_Str"",config.getHandlerAddress());
  LOG.info(""String_Node_Str"",config.getHandlerPort());
  server=(ThriftServer)ctx.getBean(""String_Node_Str"",this.processor,new InetSocketAddress(config.getHandlerAddress(),config.getHandlerPort()));
  server.start();
}",0.8424336973478939
36155,"@Override public void eventJsonRpc(String request) throws TException {
  try {
    Request<JsonObject> requestObj=JsonUtils.fromJsonRequest(request,JsonObject.class);
    try {
      session.sendNotification(""String_Node_Str"",requestObj.getParams());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"",e);
  }
}","@Override public void eventJsonRpc(String request) throws TException {
  try {
    LOG.debug(""String_Node_Str"",request.trim());
    Request<JsonObject> requestObj=JsonUtils.fromJsonRequest(request,JsonObject.class);
    try {
      session.sendNotification(""String_Node_Str"",requestObj.getParams());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"",e);
  }
}",0.9459757442116868
36156,"@Override public void handleRequest(final Transaction transaction,final Request<JsonObject> request) throws Exception {
  final AsyncClient client=clientPool.acquireAsync();
  transaction.startAsync();
  if (request.getMethod().equals(""String_Node_Str"")) {
    request.getParams().addProperty(""String_Node_Str"",config.getHandlerAddress());
    request.getParams().addProperty(""String_Node_Str"",config.getHandlerPort());
  }
  client.invokeJsonRpc(request.toString(),new AsyncMethodCallback<invokeJsonRpc_call>(){
    @Override public void onComplete(    invokeJsonRpc_call response){
      clientPool.release(client);
      if (request.getId() != null)       requestOnComplete(response,transaction);
    }
    @Override public void onError(    Exception exception){
      clientPool.release(client);
      requestOnError(exception,transaction);
    }
  }
);
}","@Override public void handleRequest(final Transaction transaction,final Request<JsonObject> request) throws Exception {
  final AsyncClient client=clientPool.acquireAsync();
  transaction.startAsync();
  if (request.getMethod().equals(""String_Node_Str"")) {
    request.getParams().addProperty(""String_Node_Str"",config.getHandlerAddress());
    request.getParams().addProperty(""String_Node_Str"",config.getHandlerPort());
  }
  try {
    client.invokeJsonRpc(request.toString(),new AsyncMethodCallback<invokeJsonRpc_call>(){
      @Override public void onComplete(      invokeJsonRpc_call response){
        clientPool.release(client);
        if (request.getId() != null)         requestOnComplete(response,transaction);
      }
      @Override public void onError(      Exception exception){
        clientPool.release(client);
        requestOnError(exception,transaction);
      }
    }
);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + ""String_Node_Str"",e);
  }
}",0.933188484519283
36157,"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  String fullUrl=request.getRequestURL().append('?').append(request.getQueryString()).toString();
  log.info(""String_Node_Str"",fullUrl);
  if (!Strings.isNullOrEmpty(props.getKeystoneHost())) {
    String accessToken=parseAccessToken(request);
    if (Strings.isNullOrEmpty(accessToken)) {
      log.warn(""String_Node_Str"",request.getRemoteAddr());
      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
 else     if (isTokenValid(accessToken)) {
      log.info(""String_Node_Str"",request.getRemoteAddr());
      filterChain.doFilter(request,response);
    }
 else {
      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
  }
}","@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  String fullUrl=request.getRequestURL().append('?').append(request.getQueryString()).toString();
  log.info(""String_Node_Str"",fullUrl);
  if (!Strings.isNullOrEmpty(props.getKeystoneHost())) {
    String accessToken=parseAccessToken(request);
    if (Strings.isNullOrEmpty(accessToken)) {
      log.warn(""String_Node_Str"",request.getRemoteAddr());
      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
 else     if (isTokenValid(accessToken)) {
      log.info(""String_Node_Str"",request.getRemoteAddr());
      filterChain.doFilter(request,response);
    }
 else {
      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"",request.getRemoteAddr());
    filterChain.doFilter(request,response);
  }
}",0.9275993467610234
36158,"@Override public synchronized void onSessionTerminated(WebRtcContentSession session,int code,String reason) throws Exception {
  DispatcherParticipant participant=(DispatcherParticipant)session.getAttribute(""String_Node_Str"");
  participants.remove(participant.getId());
  participant.endpoint.release();
  participant.port.release();
  notifyUnjoined(participant);
  if (participants.isEmpty()) {
    getLogger().info(""String_Node_Str"");
    mp.release();
    mp=null;
    participants.clear();
  }
  super.onSessionTerminated(session,code,reason);
}","@Override public synchronized void onSessionTerminated(WebRtcContentSession session,int code,String reason) throws Exception {
  DispatcherParticipant participant=(DispatcherParticipant)session.getAttribute(""String_Node_Str"");
  participants.remove(participant.getId());
  notifyUnjoined(participant);
  if (participants.isEmpty()) {
    getLogger().info(""String_Node_Str"");
    mp.release();
    mp=null;
    participants.clear();
  }
  super.onSessionTerminated(session,code,reason);
}",0.9383429672447012
36159,"private boolean selectParticipant(WebRtcContentSession session,String partId){
  DispatcherParticipant partSelected=participants.get(partId);
  if (partSelected == null) {
    getLogger().error(""String_Node_Str"",partId);
    return false;
  }
  partSelected.endpoint.connect(((DispatcherParticipant)session.getAttribute(""String_Node_Str"")).endpoint);
  return true;
}","private boolean selectParticipant(WebRtcContentSession session,String partId){
  DispatcherParticipant partSelected=participants.get(partId);
  if (partSelected == null) {
    getLogger().error(""String_Node_Str"",partId);
    return false;
  }
  dispatcher.connect(partSelected.port,((DispatcherParticipant)session.getAttribute(""String_Node_Str"")).port);
  return true;
}",0.8955223880597015
36160,"public static Object[] extractEventParams(Annotation[][] parameterAnnotations,Props data){
  List<String> names=getParamNames(parameterAnnotations);
  Object[] params=new Object[names.size()];
  for (int i=0; i < names.size(); i++) {
    String name=names.get(i);
    if (name.equals(""String_Node_Str"")) {
      params[i]=data.getProp(name);
    }
  }
  return params;
}","public static Object[] extractEventParams(Annotation[][] parameterAnnotations,Props data){
  List<String> names=getParamNames(parameterAnnotations);
  Object[] params=new Object[names.size()];
  for (int i=0; i < names.size(); i++) {
    String name=names.get(i);
    params[i]=data.getProp(name);
  }
  return params;
}",0.7855072463768116
36161,"@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  MediaPipelineFactory mpf=session.getMediaPipelineFactory();
  MediaPipeline mp=mpf.create();
  session.releaseOnTerminate(mp);
  PlayerEndpoint playerEndpoint=mp.newPlayerEndpoint(""String_Node_Str"").build();
  session.setAttribute(""String_Node_Str"",playerEndpoint);
  HttpEndpoint httpEndpoint=session.getMediaPipelineFactory().create().newHttpGetEndpoint().terminateOnEOS().build();
  playerEndpoint.connect(httpEndpoint);
  session.start(httpEndpoint);
}","@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  MediaPipelineFactory mpf=session.getMediaPipelineFactory();
  MediaPipeline mp=mpf.create();
  session.releaseOnTerminate(mp);
  PlayerEndpoint playerEndpoint=mp.newPlayerEndpoint(""String_Node_Str"").build();
  session.setAttribute(""String_Node_Str"",playerEndpoint);
  HttpEndpoint httpEndpoint=mp.newHttpGetEndpoint().terminateOnEOS().build();
  playerEndpoint.connect(httpEndpoint);
  session.start(httpEndpoint);
}",0.9579349904397706
36162,"@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  MediaPipelineFactory mpf=session.getMediaPipelineFactory();
  MediaPipeline mp=mpf.create();
  session.releaseOnTerminate(mp);
  PlayerEndpoint playerEndPoint=mp.newPlayerEndpoint(""String_Node_Str"").build();
  JackVaderFilter filter=mp.newJackVaderFilter().build();
  playerEndPoint.connect(filter);
  session.setAttribute(""String_Node_Str"",playerEndPoint);
  HttpEndpoint httpEndpoint=session.getMediaPipelineFactory().create().newHttpGetEndpoint().terminateOnEOS().build();
  filter.connect(httpEndpoint);
  session.start(httpEndpoint);
}","@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  MediaPipelineFactory mpf=session.getMediaPipelineFactory();
  MediaPipeline mp=mpf.create();
  session.releaseOnTerminate(mp);
  PlayerEndpoint playerEndPoint=mp.newPlayerEndpoint(""String_Node_Str"").build();
  JackVaderFilter filter=mp.newJackVaderFilter().build();
  playerEndPoint.connect(filter);
  session.setAttribute(""String_Node_Str"",playerEndPoint);
  HttpEndpoint httpEndpoint=mp.newHttpGetEndpoint().terminateOnEOS().build();
  filter.connect(httpEndpoint);
  session.start(httpEndpoint);
}",0.9637561779242174
36163,"@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  if (CpRtcRtpJackHandler.sharedFilterReference == null) {
    session.terminate(500,""String_Node_Str"");
  }
 else {
    HttpEndpoint httpEndpoint=session.getMediaPipelineFactory().create().newHttpGetEndpoint().terminateOnEOS().build();
    CpRtcRtpJackHandler.sharedFilterReference.connect(httpEndpoint);
    session.start(httpEndpoint);
  }
}","@Override public void onContentRequest(HttpPlayerSession session) throws Exception {
  if (CpRtcRtpJackHandler.sharedFilterReference == null) {
    session.terminate(500,""String_Node_Str"");
  }
 else {
    HttpEndpoint httpEndpoint=CpRtcRtpJackHandler.sharedFilterReference.getMediaPipeline().newHttpGetEndpoint().terminateOnEOS().build();
    CpRtcRtpJackHandler.sharedFilterReference.connect(httpEndpoint);
    session.start(httpEndpoint);
  }
}",0.9269406392694064
36164,"@Override public void onContentRequest(final HttpPlayerSession session) throws Exception {
  if (CpRtcRtpZbarHandler.sharedFilterReference == null) {
    session.terminate(500,""String_Node_Str"");
    return;
  }
  CpRtcRtpZbarHandler.sharedFilterReference.addCodeFoundListener(new MediaEventListener<CodeFoundEvent>(){
    @Override public void onEvent(    CodeFoundEvent event){
      session.publishEvent(new ContentEvent(event.getType(),event.getValue()));
    }
  }
);
  HttpEndpoint httpEndpoint=session.getMediaPipelineFactory().create().newHttpGetEndpoint().terminateOnEOS().build();
  CpRtcRtpZbarHandler.sharedFilterReference.connect(httpEndpoint);
  session.start(httpEndpoint);
}","@Override public void onContentRequest(final HttpPlayerSession session) throws Exception {
  if (CpRtcRtpZbarHandler.sharedFilterReference == null) {
    session.terminate(500,""String_Node_Str"");
    return;
  }
  CpRtcRtpZbarHandler.sharedFilterReference.addCodeFoundListener(new MediaEventListener<CodeFoundEvent>(){
    @Override public void onEvent(    CodeFoundEvent event){
      session.publishEvent(new ContentEvent(event.getType(),event.getValue()));
    }
  }
);
  HttpEndpoint httpEndpoint=CpRtcRtpZbarHandler.sharedFilterReference.getMediaPipeline().newHttpGetEndpoint().terminateOnEOS().build();
  CpRtcRtpZbarHandler.sharedFilterReference.connect(httpEndpoint);
  session.start(httpEndpoint);
}",0.9542203147353362
36165,"@Bean public ServletRegistrationBean repositoryServletRegistrationBean(){
  return new ServletRegistrationBean(new RepositoryHttpServlet(),""String_Node_Str"");
}","@Bean public ServletRegistrationBean repositoryServletRegistrationBean(){
  ServletRegistrationBean servletRegistrationBean=new ServletRegistrationBean(new RepositoryHttpServlet(),""String_Node_Str"");
  servletRegistrationBean.setLoadOnStartup(1);
  return servletRegistrationBean;
}",0.6923076923076923
36166,"public static ResponseError newFromException(Exception e){
  StringWriter writer=new StringWriter();
  e.printStackTrace(new PrintWriter(writer));
  return new ResponseError(1,e.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),writer.toString());
}","public static ResponseError newFromException(Exception e){
  StringWriter writer=new StringWriter();
  e.printStackTrace(new PrintWriter(writer));
  return new ResponseError(-1,e.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),writer.toString());
}",0.9981024667931688
36167,"@Test public void test() throws IOException, InterruptedException {
  JsonRpcClient client=createJsonRpcClient(""String_Node_Str"");
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
    Assert.assertEquals(""String_Node_Str"",e.getData());
    Assert.assertEquals(-1,e.getCode());
  }
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    Assert.assertEquals(""String_Node_Str"",e.getMessage());
    Assert.assertEquals(""String_Node_Str"",e.getData());
    Assert.assertEquals(-1,e.getCode());
  }
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  RuntimeException e) {
    String expected=""String_Node_Str"";
    Assert.assertEquals(expected,e.getMessage().substring(0,expected.length()));
  }
  client.close();
}","@Test public void test() throws IOException, InterruptedException {
  JsonRpcClient client=createJsonRpcClient(""String_Node_Str"");
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    checkException(e,""String_Node_Str"",""String_Node_Str"");
  }
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    checkException(e,""String_Node_Str"",""String_Node_Str"");
  }
  try {
    client.sendRequest(""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  JsonRpcErrorException e) {
    checkException(e,""String_Node_Str"",""String_Node_Str"");
  }
  client.close();
}",0.6745283018867925
36168,"@Override public void addWindow(PointerDetectorWindowMediaParam window,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  PointerDetectorWindowMediaParam param=new PointerDetectorWindowMediaParamBuilder(window.getId(),window.getHeight(),window.getWidth(),window.getUpperRightX(),window.getUpperRightY()).build();
  params.put(ADD_NEW_WINDOW_PARAM_WINDOW,param);
  invoke(ADD_NEW_WINDOW,params,new VoidContinuationWrapper(cont));
}","@Override public void addWindow(PointerDetectorWindowMediaParam window,Continuation<Void> cont){
  Map<String,MediaParam> params=newHashMapWithExpectedSize(1);
  params.put(ADD_NEW_WINDOW_PARAM_WINDOW,window);
  invoke(ADD_NEW_WINDOW,params,new VoidContinuationWrapper(cont));
}",0.4574468085106383
36169,"@Override public void removeWindow(String windowId,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(windowId);
  params.put(REMOVE_WINDOW_PARAM_WINDOW_ID,param);
  invoke(REMOVE_WINDOW,params,new VoidContinuationWrapper(cont));
}","@Override public void removeWindow(String windowId,Continuation<Void> cont){
  Map<String,MediaParam> params=newHashMapWithExpectedSize(1);
  StringMediaParam param=new StringMediaParam();
  param.setString(windowId);
  params.put(REMOVE_WINDOW_PARAM_WINDOW_ID,param);
  invoke(REMOVE_WINDOW,params,new VoidContinuationWrapper(cont));
}",0.940828402366864
36170,"/** 
 * Adds a new detector window, represented by a simple square or rectangle in the image.
 * @param id
 * @param height
 * @param width
 * @param upperRightX
 * @param upperRightY
 * @return an adder object to add created windows to the set of windows
 */
public void addDetectorWindow(PointerDetectorWindowMediaParam window){
  KmsMediaPointerDetectorWindow kmsWindow=new KmsMediaPointerDetectorWindow(window.getUpperRightX(),window.getUpperRightY(),window.getWidth(),window.getHeight(),window.getId());
  windows.add(kmsWindow);
}","/** 
 * Adds a new detector window, represented by a simple square or rectangle in the image.
 * @param id
 * @param height
 * @param width
 * @param upperRightX
 * @param upperRightY
 * @return an adder object to add created windows to the set of windows
 */
public void addDetectorWindow(PointerDetectorWindowMediaParam window){
  KmsMediaPointerDetectorWindow kmsWindow=new KmsMediaPointerDetectorWindow(window.getUpperRightX(),window.getUpperRightY(),window.getWidth(),window.getHeight(),window.getId());
  kmsWindow.setActiveOverlayImageUri(window.getActiveImageUri().toString());
  kmsWindow.setInactiveOverlayImageUri(window.getInactiveImageUri().toString());
  kmsWindow.setOverlayTransparency(window.getImageTransparency());
  windows.add(kmsWindow);
}",0.8080185042405551
36171,"/** 
 * Constructor for the builder, with the minimum set of attributes to build a window. If no further configuration is don, the window will appear outlined as a box.
 * @param id id of the window
 * @param height of the window
 * @param width of the window
 * @param upperRightX x coordinate of the upper right corner
 * @param upperRightY y coordinate of the upper right corner
 */
public PointerDetectorWindowMediaParamBuilder(final String id,final int height,final int width,final int upperRightX,final int upperRightY){
  window=new KmsMediaPointerDetectorWindow(height,height,width,height,id);
}","/** 
 * Constructor for the builder, with the minimum set of attributes to build a window. If no further configuration is don, the window will appear outlined as a box.
 * @param id id of the window
 * @param height of the window
 * @param width of the window
 * @param upperRightX x coordinate of the upper right corner
 * @param upperRightY y coordinate of the upper right corner
 */
public PointerDetectorWindowMediaParamBuilder(final String id,final int height,final int width,final int upperRightX,final int upperRightY){
  window=new KmsMediaPointerDetectorWindow(upperRightX,upperRightY,width,height,id);
}",0.9703947368421052
36172,"protected Map<String,KmsMediaParam> transformMediaParamsMap(Map<String,MediaParam> params){
  int mapSize=1 + (int)(params.size() / 0.75);
  Map<String,KmsMediaParam> kmsParams=new HashMap<String,KmsMediaParam>(mapSize);
  for (  Entry<String,MediaParam> entry : params.entrySet()) {
    kmsParams.put(entry.getKey(),((AbstractMediaParam)entry.getValue()).getThriftParams());
  }
  return kmsParams;
}","protected Map<String,KmsMediaParam> transformMediaParamsMap(Map<String,MediaParam> params){
  Map<String,KmsMediaParam> kmsParams=newHashMapWithExpectedSize(params.size());
  for (  Entry<String,MediaParam> entry : params.entrySet()) {
    kmsParams.put(entry.getKey(),((AbstractMediaParam)entry.getValue()).getThriftParams());
  }
  return kmsParams;
}",0.7824933687002652
36173,"@Override public T withWindow(PointerDetectorWindowMediaParam window){
  param.addDetectorWindow(window);
  return self();
}","@Override public T withWindow(PointerDetectorWindowMediaParam window){
  initialiseMediaParam();
  param.addDetectorWindow(window);
  return self();
}",0.9051094890510948
36174,"@Override public void addWindow(PointerDetectorWindowMediaParam window,Continuation<Void> cont){
}","@Override public void addWindow(PointerDetectorWindowMediaParam window,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  PointerDetectorWindowMediaParam param=new PointerDetectorWindowMediaParamBuilder(window.getId(),window.getHeight(),window.getWidth(),window.getUpperRightX(),window.getUpperRightY()).build();
  params.put(ADD_NEW_WINDOW_PARAM_WINDOW,param);
  invoke(ADD_NEW_WINDOW,params,new VoidContinuationWrapper(cont));
}",0.3426573426573426
36175,"@Override public void removeWindow(String windowId,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(windowId);
  params.put(REMOVE_WINDOW_PARAM_WINDOW_ID,param);
  invoke(REMOVE_WINDOW,params);
}","@Override public void removeWindow(String windowId,Continuation<Void> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(windowId);
  params.put(REMOVE_WINDOW_PARAM_WINDOW_ID,param);
  invoke(REMOVE_WINDOW,params,new VoidContinuationWrapper(cont));
}",0.9473684210526316
36176,"/** 
 * Adds a new detector window, represented by a simple square or rectangle in the image.
 * @param id
 * @param height
 * @param width
 * @param upperRightX
 * @param upperRightY
 * @return an adder object to add created windows to the set of windows
 */
public void addDetectorWindow(PointerDetectorWindowMediaParam window){
}","/** 
 * Adds a new detector window, represented by a simple square or rectangle in the image.
 * @param id
 * @param height
 * @param width
 * @param upperRightX
 * @param upperRightY
 * @return an adder object to add created windows to the set of windows
 */
public void addDetectorWindow(PointerDetectorWindowMediaParam window){
  KmsMediaPointerDetectorWindow kmsWindow=new KmsMediaPointerDetectorWindow(window.getUpperRightX(),window.getUpperRightY(),window.getWidth(),window.getHeight(),window.getId());
  windows.add(kmsWindow);
}",0.7649769585253456
36177,"@Override public List<RepositoryItem> findRepositoryItemsByAttValue(String attributeName,String value){
  return createItemsForIds(metadata.findRepositoryItemsByAttValue(attributeName,value));
}","@Override public List<RepositoryItem> findRepositoryItemsByAttValue(String attributeName,String value){
  return createItemsForIds(metadata.findByAttValue(attributeName,value));
}",0.9597855227882036
36178,"@Override public List<RepositoryItem> findRepositoryItemsByAttRegex(String attributeName,String regex){
  return createItemsForIds(metadata.findRepositoryItemsByAttRegex(attributeName,regex));
}","@Override public List<RepositoryItem> findRepositoryItemsByAttRegex(String attributeName,String regex){
  return createItemsForIds(metadata.findByAttRegex(attributeName,regex));
}",0.9597855227882036
36179,"private String loadFileAsString() throws IOException {
  StringBuilder sb=new StringBuilder();
  BufferedReader br=new BufferedReader(new FileReader(itemsMetadataFile));
  String line;
  while ((line=br.readLine()) != null) {
    sb.append(line).append(""String_Node_Str"");
  }
  br.close();
  return sb.toString();
}","private String loadFileAsString() throws IOException {
  if (!itemsMetadataFile.exists()) {
    return ""String_Node_Str"";
  }
  StringBuilder sb=new StringBuilder();
  FileReader metadataFile=new FileReader(itemsMetadataFile);
  BufferedReader br=new BufferedReader(metadataFile);
  String line;
  while ((line=br.readLine()) != null) {
    sb.append(line).append(""String_Node_Str"");
  }
  br.close();
  return sb.toString();
}",0.7644683714670256
36180,"public void save(){
  try {
    PrintWriter writer=new PrintWriter(itemsMetadataFile);
    String content=JSON.serialize(itemsMetadata);
    writer.print(content);
    writer.close();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}","public void save(){
  try {
    if (!itemsMetadataFile.exists()) {
      itemsMetadataFile.getParentFile().mkdirs();
      itemsMetadataFile.createNewFile();
    }
    PrintWriter writer=new PrintWriter(itemsMetadataFile);
    String content=JSON.serialize(itemsMetadata);
    writer.print(content);
    writer.close();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}",0.7901234567901234
36181,"private void loadItemsMetadata() throws IOException {
  DBObject contents=(DBObject)JSON.parse(loadFileAsString());
  itemsMetadata=new ConcurrentHashMap<String,Map<String,String>>();
  for (  String key : contents.keySet()) {
    try {
      DBObject metadata=(DBObject)contents.get(key);
      Map<String,String> map=new HashMap<String,String>();
      for (      String metadataKey : metadata.keySet()) {
        map.put(key,metadata.get(metadataKey).toString());
      }
    }
 catch (    ClassCastException e) {
      log.warn(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
}","private void loadItemsMetadata() throws IOException {
  itemsMetadata=new ConcurrentHashMap<String,Map<String,String>>();
  DBObject contents=(DBObject)JSON.parse(loadFileAsString());
  if (contents != null) {
    for (    String key : contents.keySet()) {
      try {
        DBObject metadata=(DBObject)contents.get(key);
        Map<String,String> map=new HashMap<String,String>();
        for (        String metadataKey : metadata.keySet()) {
          map.put(metadataKey,metadata.get(metadataKey).toString());
        }
        itemsMetadata.put(key,map);
      }
 catch (      ClassCastException e) {
        log.warn(""String_Node_Str"" + key + ""String_Node_Str"");
      }
    }
  }
}",0.7578125
36182,"private SdpEndPoint buildAndConnectSdpEndPoint(MediaElement sourceElement,MediaElement[] sinkElements){
  getLogger().info(""String_Node_Str"");
  if (sinkElements != null && sinkElements.length > 0) {
    for (    MediaElement e : sinkElements) {
      Assert.notNull(e,""String_Node_Str"",10023);
    }
  }
  MediaElement candidate=null;
  if (sinkElements == null || sinkElements.length == 0) {
    candidate=sourceElement;
  }
 else {
    candidate=sinkElements[0];
  }
  getLogger().info(""String_Node_Str"" + candidate);
  MediaPipeline mediaPipeline=null;
  if (candidate != null) {
    mediaPipeline=candidate.getMediaPipeline();
  }
 else {
    mediaPipeline=mediaPipelineFactory.create();
    releaseOnTerminate(mediaPipeline);
  }
  getLogger().info(""String_Node_Str"");
  SdpEndPoint sdpEndPoint=buildSdpEndPoint(mediaPipeline);
  releaseOnTerminate(sdpEndPoint);
  if (sourceElement == null) {
    sourceElement=sdpEndPoint;
  }
  getLogger().info(""String_Node_Str"");
  if (sinkElements != null) {
    connect(sdpEndPoint,sinkElements);
  }
  if (sourceElement != null) {
    sourceElement.connect(sdpEndPoint);
  }
  return sdpEndPoint;
}","private SdpEndPoint buildAndConnectSdpEndPoint(MediaElement sourceElement,MediaElement[] sinkElements){
  getLogger().info(""String_Node_Str"");
  if (sinkElements != null && sinkElements.length > 0) {
    for (    MediaElement e : sinkElements) {
      Assert.notNull(e,""String_Node_Str"",10023);
    }
  }
  MediaElement candidate=null;
  if (sinkElements == null || sinkElements.length == 0) {
    candidate=sourceElement;
  }
 else {
    candidate=sinkElements[0];
  }
  getLogger().info(""String_Node_Str"" + candidate);
  MediaPipeline mediaPipeline=null;
  if (candidate != null) {
    mediaPipeline=candidate.getMediaPipeline();
  }
 else {
    mediaPipeline=mediaPipelineFactory.create();
    releaseOnTerminate(mediaPipeline);
  }
  getLogger().info(""String_Node_Str"");
  SdpEndPoint sdpEndPoint=buildSdpEndPoint(mediaPipeline);
  releaseOnTerminate(sdpEndPoint);
  if (sourceElement == null) {
    sourceElement=sdpEndPoint;
  }
  getLogger().info(""String_Node_Str"");
  if (sinkElements != null && sinkElements.length > 0) {
    connect(sdpEndPoint,sinkElements);
  }
  if (sourceElement != null) {
    sourceElement.connect(sdpEndPoint);
  }
  return sdpEndPoint;
}",0.9883470004315926
36183,"/** 
 * Serialize Java object to JSON (as String).
 * @param obj Java Object representing a JSON message to be serialized
 * @return Serialized JSON message (as String)
 */
public static String toString(Object obj){
  return gson.toJson(obj);
}","/** 
 * Serialize Java object to JSON (as String).
 * @param obj Java Object representing a JSON message to be serialized
 * @return Serialized JSON message (as String)
 */
public static String toString(Object obj){
  return GsonUtils.getGson().toJson(obj);
}",0.9542743538767396
36184,"@Override public void processOffer(String offer,final Continuation<String> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(offer);
  params.put(PROCESS_SDP_OFFER_PARAM_OFFER_STR,param);
  invoke(PROCESS_SDP_OFFER,new StringContinuationWrapper(cont));
}","@Override public void processOffer(String offer,final Continuation<String> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(offer);
  params.put(PROCESS_SDP_OFFER_PARAM_OFFER_STR,param);
  invoke(PROCESS_SDP_OFFER,params,new StringContinuationWrapper(cont));
}",0.9899569583931134
36185,"@Override public void processAnswer(String answer,final Continuation<String> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(answer);
  params.put(PROCESS_SDP_ANSWER_PARAM_ANSWER_STR,param);
  invoke(PROCESS_SDP_ANSWER,new StringContinuationWrapper(cont));
}","@Override public void processAnswer(String answer,final Continuation<String> cont){
  Map<String,MediaParam> params=new HashMap<String,MediaParam>(4);
  StringMediaParam param=new StringMediaParam();
  param.setString(answer);
  params.put(PROCESS_SDP_ANSWER_PARAM_ANSWER_STR,param);
  invoke(PROCESS_SDP_ANSWER,params,new StringContinuationWrapper(cont));
}",0.9901269393511988
36186,"@Test public void testStream() throws InterruptedException {
  final Semaphore sem=new Semaphore(0);
  mediaPipeline.createRtpEndPoint(new Continuation<RtpEndPoint>(){
    @Override public void onSuccess(    RtpEndPoint result){
      System.out.println(""String_Node_Str"");
      RtpEndPoint stream=result;
      final Semaphore semCont=new Semaphore(0);
      try {
        stream.generateOffer(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.processOffer(""String_Node_Str"",new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.processAnswer(""String_Node_Str"",new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.getLocalSessionDescriptor(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.getRemoteSessionDescriptor(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
    }
    @Override public void onError(    Throwable cause){
      System.out.println(""String_Node_Str"");
    }
  }
);
  Assert.assertTrue(sem.tryAcquire(500,TimeUnit.MILLISECONDS));
}","@Ignore @Test public void testStream() throws InterruptedException {
  final Semaphore sem=new Semaphore(0);
  mediaPipeline.createRtpEndPoint(new Continuation<RtpEndPoint>(){
    @Override public void onSuccess(    RtpEndPoint result){
      System.out.println(""String_Node_Str"");
      RtpEndPoint stream=result;
      final Semaphore semCont=new Semaphore(0);
      try {
        stream.generateOffer(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(5000,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.processOffer(""String_Node_Str"",new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.processAnswer(""String_Node_Str"",new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.getLocalSessionDescriptor(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
      try {
        stream.getRemoteSessionDescriptor(new Continuation<String>(){
          @Override public void onSuccess(          String result){
            System.out.println(""String_Node_Str"" + result);
            semCont.release();
          }
          @Override public void onError(          Throwable cause){
            System.out.println(""String_Node_Str"");
          }
        }
);
        Assert.assertTrue(semCont.tryAcquire(500,TimeUnit.MILLISECONDS));
        releaseMediaObject(stream);
        sem.release();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
catch (      KurentoMediaFrameworkException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
    }
    @Override public void onError(    Throwable cause){
      System.out.println(""String_Node_Str"");
    }
  }
);
  Assert.assertTrue(sem.tryAcquire(50000,TimeUnit.MILLISECONDS));
}",0.8012682595402559
36187,"@Test public void testMixer() throws KurentoMediaFrameworkException {
  MainMixer mixer=(MainMixer)mediaPipeline.createMediaMixer(MainMixerImpl.TYPE);
  mixer.release();
}","@Ignore @Test public void testMixer() throws KurentoMediaFrameworkException {
  MainMixer mixer=(MainMixer)mediaPipeline.createMediaMixer(MainMixerImpl.TYPE);
  mixer.release();
}",0.9771428571428572
36188,"@Test public void testRtpEndPointSimulatingAndroidSdp() throws KurentoMediaFrameworkException, InterruptedException {
  log.info(""String_Node_Str"");
  PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  log.info(""String_Node_Str"");
  RtpEndPoint rtpEndPoint=mediaPipeline.createRtpEndPoint();
  String requestSdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"" + requestSdp);
  String answerSdp=rtpEndPoint.processOffer(requestSdp);
  log.info(""String_Node_Str"" + answerSdp);
  log.info(""String_Node_Str"");
  MediaSink videoSink=rtpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next();
  player.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(videoSink);
  log.info(""String_Node_Str"");
  player.play();
  Thread.sleep(2000);
}","@Test public void testRtpEndPointSimulatingAndroidSdp() throws KurentoMediaFrameworkException, InterruptedException {
  log.info(""String_Node_Str"");
  PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  log.info(""String_Node_Str"");
  RtpEndPoint rtpEndPoint=mediaPipeline.createRtpEndPoint();
  String requestSdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"" + requestSdp);
  String answerSdp=rtpEndPoint.processOffer(requestSdp);
  log.info(""String_Node_Str"" + answerSdp);
  log.info(""String_Node_Str"");
  player.connect(rtpEndPoint,KmsMediaType.VIDEO);
  log.info(""String_Node_Str"");
  Thread.sleep(2000);
}",0.89520624303233
36189,"@Test public void testHttpEndPoint() throws KurentoMediaFrameworkException, InterruptedException {
  final PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  HttpEndPoint httpEndPoint=mediaPipeline.createHttpEndPoint(0,0);
  MediaSink videoSink=httpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next();
  MediaSource videoSrc=player.getMediaSrcs(KmsMediaType.VIDEO).iterator().next();
  videoSrc.connect(videoSink);
  final Semaphore sem=new Semaphore(0);
  player.addEndOfStreamListener(new AbstractEndOfStreamEventListener(){
    @Override public void onEvent(    EndOfStreamEvent event){
      sem.release();
    }
  }
);
  httpEndPoint.addMediaSessionStartListener(new AbstractMediaSessionStartedEventListener(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      log.info(""String_Node_Str"" + event);
      player.play();
    }
  }
);
  log.info(""String_Node_Str"" + httpEndPoint.getUrl());
  DefaultHttpClient httpclient=new DefaultHttpClient();
  try {
    httpclient.execute(new HttpGet(httpEndPoint.getUrl()));
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  sem.acquire();
  player.release();
  httpEndPoint.release();
}","@Test public void testHttpEndPoint() throws KurentoMediaFrameworkException, InterruptedException {
  final PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  HttpEndPoint httpEndPoint=mediaPipeline.createHttpEndPoint(0,0);
  player.connect(httpEndPoint,KmsMediaType.VIDEO);
  final Semaphore sem=new Semaphore(0);
  player.addEndOfStreamListener(new AbstractEndOfStreamEventListener(){
    @Override public void onEvent(    EndOfStreamEvent event){
      sem.release();
    }
  }
);
  httpEndPoint.addMediaSessionStartListener(new AbstractMediaSessionStartedEventListener(){
    @Override public void onEvent(    MediaSessionStartedEvent event){
      log.info(""String_Node_Str"" + event);
      player.play();
    }
  }
);
  log.info(""String_Node_Str"" + httpEndPoint.getUrl());
  DefaultHttpClient httpclient=new DefaultHttpClient();
  try {
    httpclient.execute(new HttpGet(httpEndPoint.getUrl()));
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  sem.acquire();
  player.release();
  httpEndPoint.release();
}",0.9138795986622074
36190,"@Test public void testZBar() throws KurentoMediaFrameworkException, InterruptedException {
  PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  ZBarFilter zbar=mediaPipeline.createZBarFilter();
  MediaSink videoSink=zbar.getMediaSinks(KmsMediaType.VIDEO).iterator().next();
  MediaSource videoSrc=player.getMediaSrcs(KmsMediaType.VIDEO).iterator().next();
  videoSrc.connect(videoSink);
  final Semaphore sem=new Semaphore(0);
  zbar.addCodeFoundDataListener(new AbstractCodeFoundEventListener(){
    @Override public void onEvent(    CodeFoundEvent event){
      log.info(""String_Node_Str"" + event);
      sem.release();
    }
  }
);
  player.play();
  Assert.assertTrue(sem.tryAcquire(10,TimeUnit.SECONDS));
  player.stop();
  zbar.release();
  player.release();
}","@Test public void testZBar() throws KurentoMediaFrameworkException, InterruptedException {
  PlayerEndPoint player=mediaPipeline.createPlayerEndPoint(""String_Node_Str"");
  ZBarFilter zbar=mediaPipeline.createZBarFilter();
  player.connect(zbar,KmsMediaType.VIDEO);
  final Semaphore sem=new Semaphore(0);
  zbar.addCodeFoundDataListener(new AbstractCodeFoundEventListener(){
    @Override public void onEvent(    CodeFoundEvent event){
      log.info(""String_Node_Str"" + event);
      sem.release();
    }
  }
);
  player.play();
  Assert.assertTrue(sem.tryAcquire(10,TimeUnit.SECONDS));
  player.stop();
  zbar.release();
  player.release();
}",0.8734353268428373
36191,"public void testCampusPartySimulatedPipeline() throws InterruptedException, KurentoMediaFrameworkException {
  log.info(""String_Node_Str"");
  RtpEndPoint rtpEndPoint=mediaPipeline.createRtpEndPoint();
  String requestSdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"" + requestSdp);
  String answerSdp=rtpEndPoint.processOffer(requestSdp);
  log.info(""String_Node_Str"");
  rtpEndPoint.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(rtpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next());
  Thread.sleep(1000);
  log.info(""String_Node_Str"");
  HttpEndPoint httpEndPoint=mediaPipeline.createHttpEndPoint(0,0);
  log.info(""String_Node_Str"");
  rtpEndPoint.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(httpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next());
  log.info(""String_Node_Str"" + httpEndPoint.getUrl());
}","public void testCampusPartySimulatedPipeline() throws InterruptedException, KurentoMediaFrameworkException {
  log.info(""String_Node_Str"");
  RtpEndPoint rtpEndPoint=mediaPipeline.createRtpEndPoint();
  String requestSdp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  log.info(""String_Node_Str"" + requestSdp);
  String answerSdp=rtpEndPoint.processOffer(requestSdp);
  log.info(""String_Node_Str"" + answerSdp);
  log.info(""String_Node_Str"");
  rtpEndPoint.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(rtpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next());
  Thread.sleep(1000);
  log.info(""String_Node_Str"");
  HttpEndPoint httpEndPoint=mediaPipeline.createHttpEndPoint(0,0);
  log.info(""String_Node_Str"");
  rtpEndPoint.getMediaSrcs(KmsMediaType.VIDEO).iterator().next().connect(httpEndPoint.getMediaSinks(KmsMediaType.VIDEO).iterator().next());
  log.info(""String_Node_Str"" + httpEndPoint.getUrl());
}",0.9791969037252056
36192,"protected void activateMedia(String contentPath,MediaElement... mediaElements){
synchronized (this) {
    Assert.isTrue(state == STATE.HANDLING,""String_Node_Str"" + state + ""String_Node_Str"",10001);
    state=STATE.STARTING;
  }
  boolean mediaElementProvided=mediaElements != null & mediaElements.length > 0;
  Assert.isTrue(mediaElementProvided || contentPath == null,""String_Node_Str"",10002);
  Assert.isTrue(mediaElementProvided || contentPath != null,""String_Node_Str"",10003);
  getLogger().info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ contentPath);
  if (contentPath != null) {
    mediaElements=new MediaElement[1];
    mediaElements[0]=buildRepositoryBasedMediaElement(contentPath);
  }
  HttpEndPoint httpEndPoint=buildAndConnectHttpEndPointMediaElement(mediaElements);
  boolean terminate=false;
synchronized (this) {
    if (state == STATE.TERMINATED) {
      terminate=true;
    }
 else     if (state == STATE.STARTING) {
      state=STATE.ACTIVE;
    }
  }
  if (terminate) {
    getLogger().info(""String_Node_Str"");
    return;
  }
  String answerUrl=null;
  try {
    answerUrl=httpEndPoint.getUrl();
    getLogger().info(""String_Node_Str"" + answerUrl);
  }
 catch (  IOException ioe) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"" + ioe.getMessage(),ioe,20006);
  }
  Assert.notNull(answerUrl,""String_Node_Str"",20012);
  Assert.isTrue(answerUrl.length() > 0,""String_Node_Str"",20012);
  getLogger().info(""String_Node_Str"" + answerUrl);
  httpEndPoint.addListener(new MediaEventListener<HttpEndPointEvent>(){
    @Override public void onEvent(    HttpEndPointEvent event){
    }
  }
);
  if (useControlProtocol) {
    answerActivateMediaRequest4JsonControlProtocolConfiguration(answerUrl);
  }
 else {
    answerActivateMediaRequest4SimpleHttpConfiguration(answerUrl);
  }
}","protected void activateMedia(String contentPath,MediaElement... mediaElements){
synchronized (this) {
    Assert.isTrue(state == STATE.HANDLING,""String_Node_Str"" + state + ""String_Node_Str"",10001);
    state=STATE.STARTING;
  }
  final boolean mediaElementProvided=mediaElements != null && mediaElements.length > 0;
  final boolean contentPathProvided=contentPath != null;
  Assert.isTrue(mediaElementProvided || contentPathProvided,""String_Node_Str"",10002);
  Assert.isTrue(!(mediaElementProvided && contentPathProvided),""String_Node_Str"",10003);
  getLogger().info(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ contentPath);
  if (contentPath != null) {
    mediaElements=new MediaElement[1];
    mediaElements[0]=buildRepositoryBasedMediaElement(contentPath);
  }
  HttpEndPoint httpEndPoint=buildAndConnectHttpEndPointMediaElement(mediaElements);
  boolean terminate=false;
synchronized (this) {
    if (state == STATE.TERMINATED) {
      terminate=true;
    }
 else     if (state == STATE.STARTING) {
      state=STATE.ACTIVE;
    }
  }
  if (terminate) {
    getLogger().info(""String_Node_Str"");
    return;
  }
  String answerUrl=null;
  try {
    answerUrl=httpEndPoint.getUrl();
    getLogger().info(""String_Node_Str"" + answerUrl);
  }
 catch (  IOException ioe) {
    throw new KurentoMediaFrameworkException(""String_Node_Str"" + ioe.getMessage(),ioe,20006);
  }
  Assert.notNull(answerUrl,""String_Node_Str"",20012);
  Assert.isTrue(answerUrl.length() > 0,""String_Node_Str"",20012);
  getLogger().info(""String_Node_Str"" + answerUrl);
  httpEndPoint.addListener(new MediaEventListener<HttpEndPointEvent>(){
    @Override public void onEvent(    HttpEndPointEvent event){
    }
  }
);
  if (useControlProtocol) {
    answerActivateMediaRequest4JsonControlProtocolConfiguration(answerUrl);
  }
 else {
    answerActivateMediaRequest4SimpleHttpConfiguration(answerUrl);
  }
}",0.9724819663371628
36193,"public static void registerKurentoServletContextListener(ServletContext ctx){
  if (ctx.getAttribute(KURENTO_SERVLET_CONTEXT_LISTENER_ATTRIBUTE_NAME) == null) {
    return;
  }
  ctx.setAttribute(KURENTO_SERVLET_CONTEXT_LISTENER_ATTRIBUTE_NAME,""String_Node_Str"");
  ctx.addListener(KurentoServletContextListener.class);
}","public static void registerKurentoServletContextListener(ServletContext ctx){
  if (ctx.getAttribute(KURENTO_SERVLET_CONTEXT_LISTENER_ATTRIBUTE_NAME) != null) {
    log.info(""String_Node_Str"");
    return;
  }
  log.info(""String_Node_Str"");
  ctx.setAttribute(KURENTO_SERVLET_CONTEXT_LISTENER_ATTRIBUTE_NAME,""String_Node_Str"");
  ctx.addListener(KurentoServletContextListener.class);
}",0.906515580736544
36194,"public static void closeAllKurentoApplicationContexts(ServletContext ctx){
  Assert.notNull(ctx,""String_Node_Str"");
  if (childContexts != null) {
    for (    AnnotationConfigApplicationContext childContext : childContexts.values()) {
      childContext.close();
    }
  }
  childContexts=null;
  if (kurentoApplicationContextInternalReference != null) {
    kurentoApplicationContextInternalReference.close();
  }
  kurentoApplicationContextInternalReference=null;
}","public static void closeAllKurentoApplicationContexts(ServletContext ctx){
  Assert.notNull(ctx,""String_Node_Str"");
  if (childContexts != null) {
    for (    AnnotationConfigApplicationContext childContext : childContexts.values()) {
      log.info(""String_Node_Str"" + childContext);
      childContext.close();
    }
  }
  childContexts=null;
  if (kurentoApplicationContextInternalReference != null) {
    log.info(""String_Node_Str"" + kurentoApplicationContextInternalReference);
    kurentoApplicationContextInternalReference.close();
  }
  kurentoApplicationContextInternalReference=null;
}",0.8796992481203008
36195,"/** 
 * Terminates this object, completing initialAsyncCtx if necessary and sending an answer to the initial request if necessary.
 * @param code
 * @param description
 */
protected void terminate(int code,String description){
  STATE localState;
synchronized (this) {
    if (state == STATE.TERMINATED)     return;
    localState=state;
    state=STATE.TERMINATED;
  }
  try {
    if (localState == STATE.IDLE || state == STATE.HANDLING || state == STATE.STARTING) {
      sendOnTerminateErrorMessageInInitialContext(code,description);
    }
 else     if (localState == STATE.ACTIVE) {
      cancelMediaTransmission();
    }
  }
 catch (  Throwable t) {
    getLogger().error(t.getMessage(),t);
  }
 finally {
    destroy();
  }
}","/** 
 * Terminates this object, completing initialAsyncCtx if necessary and sending an answer to the initial request if necessary.
 * @param code
 * @param description
 */
protected void terminate(int code,String description){
  STATE localState;
synchronized (this) {
    if (state == STATE.TERMINATED)     return;
    localState=state;
    state=STATE.TERMINATED;
  }
  try {
    if (localState == STATE.IDLE || localState == STATE.HANDLING || localState == STATE.STARTING) {
      sendOnTerminateErrorMessageInInitialContext(code,description);
    }
 else     if (localState == STATE.ACTIVE) {
      cancelMediaTransmission();
    }
  }
 catch (  Throwable t) {
    getLogger().error(t.getMessage(),t);
  }
 finally {
    destroy();
  }
}",0.9904891304347826
36196,"void startMedia(MediaElement upStream,MediaElement downStream) throws ContentException ;","void startMedia(MediaElement sinkElement,MediaElement sourceElement) throws ContentException ;",0.8131868131868132
36197,"void startMedia(MediaElement upStream,MediaElement downStream) throws ContentException ;","void startMedia(MediaElement sinkElement,MediaElement sourceElement) throws ContentException ;",0.8131868131868132
36198,"public JsonRpcRequest receiveJsonRequest(AsyncContext asyncCtx) throws IOException {
  HttpServletRequest request=(HttpServletRequest)asyncCtx.getRequest();
  InputStream inputStream=request.getInputStream();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  byte[] buffer=new byte[BUFF];
  int len;
  while ((len=inputStream.read(buffer)) > -1) {
    baos.write(buffer,0,len);
  }
  baos.flush();
  String encoding=detectJsonEncoding(new ByteArrayInputStream(baos.toByteArray()));
  log.debug(""String_Node_Str"" + encoding);
  if (encoding == null || !encoding.equalsIgnoreCase(UTF8)) {
    throw new IOException(""String_Node_Str"");
  }
  InputStreamReader isr=new InputStreamReader(new ByteArrayInputStream(baos.toByteArray()),UTF8);
  JsonRpcRequest jsonRequest=gson.fromJson(isr,JsonRpcRequest.class);
  Assert.notNull(jsonRequest.getMethod());
  return jsonRequest;
}","public JsonRpcRequest receiveJsonRequest(AsyncContext asyncCtx) throws IOException {
  HttpServletRequest request=(HttpServletRequest)asyncCtx.getRequest();
  InputStream inputStream=request.getInputStream();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  byte[] buffer=new byte[BUFF];
  int len;
  while ((len=inputStream.read(buffer)) > -1) {
    baos.write(buffer,0,len);
  }
  baos.flush();
  String encoding=detectJsonEncoding(new ByteArrayInputStream(baos.toByteArray()));
  log.debug(""String_Node_Str"" + encoding);
  if (encoding == null || !encoding.equalsIgnoreCase(UTF8)) {
    throw new IOException(""String_Node_Str"");
  }
  InputStreamReader isr=new InputStreamReader(new ByteArrayInputStream(baos.toByteArray()),UTF8);
  JsonRpcRequest jsonRequest=gson.fromJson(isr,JsonRpcRequest.class);
  Assert.notNull(jsonRequest.getMethod());
  log.info(""String_Node_Str"" + jsonRequest.toString());
  return jsonRequest;
}",0.9625962596259626
36199,"private void internalSendJsonAnswer(AsyncContext asyncCtx,JsonRpcResponse message) throws IOException {
  if (asyncCtx == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (!asyncCtx.getRequest().isAsyncStarted()) {
    return;
  }
synchronized (asyncCtx) {
    HttpServletResponse response=(HttpServletResponse)asyncCtx.getResponse();
    response.setContentType(""String_Node_Str"");
    OutputStreamWriter osw=new OutputStreamWriter(response.getOutputStream(),UTF8);
    osw.write(gson.toJson(message));
    osw.flush();
    asyncCtx.complete();
  }
}","private void internalSendJsonAnswer(AsyncContext asyncCtx,JsonRpcResponse message) throws IOException {
  if (asyncCtx == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (!asyncCtx.getRequest().isAsyncStarted()) {
    return;
  }
synchronized (asyncCtx) {
    HttpServletResponse response=(HttpServletResponse)asyncCtx.getResponse();
    response.setContentType(""String_Node_Str"");
    OutputStreamWriter osw=new OutputStreamWriter(response.getOutputStream(),UTF8);
    osw.write(gson.toJson(message));
    osw.flush();
    log.info(""String_Node_Str"" + message);
    asyncCtx.complete();
  }
}",0.9445865302642796
36200,"@Override protected final void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (!useControlProtocol) {
    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  getLogger().debug(""String_Node_Str"" + req.getRequestURI());
  if (!req.isAsyncSupported()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return;
  }
  if (isHandlerNull()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,getHandlerSimpleClassName() + ""String_Node_Str"" + ""String_Node_Str""+ getHandlerSimpleClassName());
    return;
  }
  String contentId=req.getPathInfo();
  if (contentId != null) {
    contentId=contentId.substring(1);
  }
  AsyncContext asyncCtx=req.startAsync();
  asyncCtx.addListener(new ContentAsyncListener());
  JsonRpcRequest message=null;
  try {
    message=protocolManager.receiveJsonRequest(asyncCtx);
  }
 catch (  JsonSyntaxException jse) {
    protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_PARSE_ERROR,""String_Node_Str"" + jse.getMessage(),0));
    return;
  }
catch (  JsonIOException jie) {
    protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_INTERNAL_ERROR,""String_Node_Str"" + jie.getMessage(),0));
    return;
  }
  if (message == null) {
    protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_INTERNAL_ERROR,""String_Node_Str"",0));
    return;
  }
  AbstractContentRequest contentRequest=null;
  if (message.getMethod().equals(METHOD_START)) {
    contentRequest=createContentRequest(asyncCtx,contentId);
    contentRequestManager.put(contentRequest);
  }
 else   if (message.getSessionId() != null) {
    contentRequest=contentRequestManager.get(message.getSessionId());
    if (contentRequest == null) {
      protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_INVALID_REQUEST,""String_Node_Str"" + message.getSessionId(),message.getId()));
      return;
    }
  }
 else {
    protocolManager.sendJsonError(asyncCtx,JsonRpcResponse.newError(ERROR_INVALID_REQUEST,""String_Node_Str"",message.getId()));
    return;
  }
  Future<?> future=executor.getExecutor().submit(createAsyncRequestProcessor(contentRequest,message,asyncCtx));
  req.setAttribute(ContentAsyncListener.FUTURE_REQUEST_PROCESSOR_ATT_NAME,future);
  req.setAttribute(ContentAsyncListener.CONTENT_REQUEST_ATT_NAME,contentRequest);
  req.setAttribute(ContentAsyncListener.CONTROL_PROTOCOL_REQUEST_MESSAGE_ATT_NAME,message);
}","@Override protected final void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  getLogger().debug(""String_Node_Str"" + req.getRequestURI());
  if (!req.isAsyncSupported()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return;
  }
  if (isHandlerNull()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,getHandlerSimpleClassName() + ""String_Node_Str"" + ""String_Node_Str""+ getHandlerSimpleClassName());
    return;
  }
  String contentId=req.getPathInfo();
  if (contentId != null) {
    contentId=contentId.substring(1);
  }
  AsyncContext asyncCtx=req.startAsync();
  asyncCtx.addListener(new ContentAsyncListener());
  if (useControlProtocol) {
    doRequest4JsonControlProtocol(asyncCtx,contentId,resp);
  }
 else {
    doRequest4SimpleHttpProtocol(asyncCtx,contentId,resp);
  }
}",0.3766307430516166
36201,"@Override protected final void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (useControlProtocol) {
    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  getLogger().debug(""String_Node_Str"" + req.getRequestURI());
  if (!req.isAsyncSupported()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return;
  }
  if (isHandlerNull()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,getHandlerSimpleClassName() + ""String_Node_Str"" + ""String_Node_Str""+ getHandlerSimpleClassName());
    return;
  }
  String contentId=req.getPathInfo();
  if (contentId != null) {
    contentId=contentId.substring(1);
  }
  AsyncContext asyncCtx=req.startAsync();
  asyncCtx.addListener(new ContentAsyncListener());
  AbstractContentRequest contentRequest=createContentRequest(asyncCtx,contentId);
  Future<?> future=executor.getExecutor().submit(createAsyncRequestProcessor(contentRequest,null,asyncCtx));
  req.setAttribute(ContentAsyncListener.FUTURE_REQUEST_PROCESSOR_ATT_NAME,future);
  req.setAttribute(ContentAsyncListener.CONTENT_REQUEST_ATT_NAME,contentRequest);
}","@Override protected final void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (useControlProtocol) {
    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  getLogger().debug(""String_Node_Str"" + req.getRequestURI());
  if (!req.isAsyncSupported()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return;
  }
  if (isHandlerNull()) {
    resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,getHandlerSimpleClassName() + ""String_Node_Str"" + ""String_Node_Str""+ getHandlerSimpleClassName());
    return;
  }
  String contentId=req.getPathInfo();
  if (contentId != null) {
    contentId=contentId.substring(1);
  }
  AsyncContext asyncCtx=req.startAsync();
  asyncCtx.addListener(new ContentAsyncListener());
}",0.8372943327239488
36202,"@Override protected void sendOnTerminateErrorMessageInInitialContext(int code,String description) throws IOException {
  if (useControlProtocol) {
    protocolManager.sendJsonError(initialAsyncCtx,JsonRpcResponse.newError(code,description,initialJsonRequest.getId()));
  }
 else {
    ((HttpServletResponse)initialAsyncCtx.getResponse()).sendError(code,description);
  }
}","@Override protected void sendOnTerminateErrorMessageInInitialContext(int code,String description) throws IOException {
  if (useControlProtocol) {
    protocolManager.sendJsonError(initialAsyncCtx,JsonRpcResponse.newError(code,description,initialJsonRequest.getId()));
  }
 else {
    ((HttpServletResponse)initialAsyncCtx.getResponse()).sendError(500,description);
  }
}",0.990578734858681
36203,"/** 
 * This class returns the Spring KurentoApplicationContext, which is the parent context for all specific Kurento Servlet contexts. In case a pre-exiting Spring root WebApplicationContext if found, the returned KurentoApplicationContext will be made child of this root context. When necessary, this method creates the KurentoApplicationContext, so it should never return null. This method MUST NOT be called in ServletContextListeners, given that at that stage there might not be information about the presence of a root Spring root WebApplicationConext.
 * @param ctx
 * @return
 */
public static AnnotationConfigApplicationContext createKurentoApplicationContext(ServletContext ctx){
  Assert.notNull(ctx,""String_Node_Str"");
  Assert.isNull(kurentoApplicationContextInternalReference,""String_Node_Str"");
  kurentoApplicationContextInternalReference=new AnnotationConfigApplicationContext();
  kurentoApplicationContextInternalReference.scan(""String_Node_Str"");
  WebApplicationContext rootContext=WebApplicationContextUtils.getWebApplicationContext(ctx);
  if (rootContext != null) {
    kurentoApplicationContextInternalReference.setParent(rootContext);
  }
  kurentoApplicationContextInternalReference.refresh();
  return kurentoApplicationContextInternalReference;
}","/** 
 * This class returns the Spring KurentoApplicationContext, which is the parent context for all specific Kurento Servlet contexts. In case a pre-exiting Spring root WebApplicationContext if found, the returned KurentoApplicationContext will be made child of this root context. When necessary, this method creates the KurentoApplicationContext, so it should never return null. This method MUST NOT be called in ServletContextListeners, given that at that stage there might not be information about the presence of a root Spring root WebApplicationConext.
 * @param ctx
 * @return
 */
public static AnnotationConfigApplicationContext createKurentoApplicationContext(ServletContext ctx){
  Assert.notNull(ctx,""String_Node_Str"");
  Assert.isNull(kurentoApplicationContextInternalReference,""String_Node_Str"");
  kurentoApplicationContextInternalReference=new AnnotationConfigApplicationContext();
  kurentoApplicationContextInternalReference.scan(""String_Node_Str"");
  WebApplicationContext rootContext=WebApplicationContextUtils.getWebApplicationContext(ctx);
  if (rootContext != null) {
    kurentoApplicationContextInternalReference.setParent(rootContext);
  }
  ServletContextResource servletContextResource=new ServletContextResource(ctx,""String_Node_Str"");
  if (servletContextResource.exists()) {
    log.info(""String_Node_Str"");
    Properties properties=new Properties();
    try {
      properties.load(servletContextResource.getInputStream());
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"",e);
      throw new RuntimeException(e);
    }
    PropertyOverrideConfigurer propertyOverrideConfigurer=new PropertyOverrideConfigurer();
    propertyOverrideConfigurer.setProperties(properties);
    kurentoApplicationContextInternalReference.addBeanFactoryPostProcessor(propertyOverrideConfigurer);
  }
  kurentoApplicationContextInternalReference.refresh();
  return kurentoApplicationContextInternalReference;
}",0.784447900466563
36204,"@Override public boolean equals(Object obj){
  if (obj.getClass().equals(this.getClass())) {
    return false;
  }
 else {
    MediaObject mo=(MediaObject)obj;
    return mo.mediaObjectId.getId() == this.mediaObjectId.getId();
  }
}","@Override public boolean equals(Object obj){
  if (!obj.getClass().equals(this.getClass())) {
    return false;
  }
 else {
    MediaObject mo=(MediaObject)obj;
    return mo.mediaObjectId.getId() == this.mediaObjectId.getId();
  }
}",0.9978494623655914
36205,"void onEvent(KmsEvent event){
  if (event.getSource() instanceof MediaPipeline) {
    fireEvent(mediaPipelineMap.get(event.getSource()),event);
  }
 else   if (event.getSource() instanceof MediaElement) {
    fireEvent(mediaPipelineMap.get(event.getSource()),event);
  }
 else {
    IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + event.getSource().getClass());
    log.error(iae.getMessage());
    throw iae;
  }
}","void onEvent(KmsEvent event){
  if (event.getSource() instanceof MediaPipeline) {
    fireEvent(mediaPipelineMap.get(event.getSource()),event);
  }
 else   if (event.getSource() instanceof MediaElement) {
    fireEvent(mediaElementMap.get(event.getSource()),event);
  }
 else {
    IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"" + event.getSource().getClass());
    log.error(iae.getMessage());
    throw iae;
  }
}",0.983127109111361
36206,"public static void processInjectionBasedOnApplicationContext(Object bean,AnnotationConfigApplicationContext appContext){
  AutowiredAnnotationBeanPostProcessor bpp=new AutowiredAnnotationBeanPostProcessor();
  bpp.setBeanFactory(appContext.getAutowireCapableBeanFactory());
  bpp.processInjection(bean);
}","public static void processInjectionBasedOnApplicationContext(Object bean,AnnotationConfigApplicationContext appContext){
  Assert.notNull(appContext,""String_Node_Str"");
  Assert.notNull(bean,""String_Node_Str"");
  AutowiredAnnotationBeanPostProcessor bpp=new AutowiredAnnotationBeanPostProcessor();
  bpp.setBeanFactory(appContext.getAutowireCapableBeanFactory());
  bpp.processInjection(bean);
}",0.8714285714285714
36207,"public static void processInjectionBasedOnKurentoApplicationContext(Object bean){
  AutowiredAnnotationBeanPostProcessor bpp=new AutowiredAnnotationBeanPostProcessor();
  bpp.setBeanFactory(kurentoApplicationContextInternalReference.getAutowireCapableBeanFactory());
  bpp.processInjection(bean);
}","public static void processInjectionBasedOnKurentoApplicationContext(Object bean){
  Assert.notNull(kurentoApplicationContextInternalReference,""String_Node_Str"");
  Assert.notNull(bean,""String_Node_Str"");
  AutowiredAnnotationBeanPostProcessor bpp=new AutowiredAnnotationBeanPostProcessor();
  bpp.setBeanFactory(kurentoApplicationContextInternalReference.getAutowireCapableBeanFactory());
  bpp.processInjection(bean);
}",0.83008356545961
36208,"/** 
 * Returns true if d is finite--not infinite and not NaN. (Equivalent to Double.isFinite() available from Java 8.)
 * @param d a float value
 * @return whether this value is finite.
 * @deprecated use {@link Double#isFinite(double)} instead. This method was providedfor use in Java7, where  {@link Double#isFinite(double)} did not exist yet.
 */
@Deprecated public static boolean isFinite(double d){
  return Double.isFinite(d);
}","/** 
 * Returns true if d is finite--not infinite and not NaN. (Equivalent to Double.isFinite() available from Java 8.)
 * @param d a double value
 * @return whether this value is finite.
 * @deprecated use {@link Double#isFinite(double)} instead. This method was providedfor use in Java7, where  {@link Double#isFinite(double)} did not exist yet.
 */
@Deprecated public static boolean isFinite(double d){
  return Double.isFinite(d);
}",0.9873708381171068
36209,"/** 
 * Returns the integer and fraction parts of this fraction. The return array is guaranteed to have exactly two elements. The first is guaranteed to be a BigInteger, and the second is guaranteed to be a BigFraction. The first element is the result of integer division of numerator by denominator, using the supplied division mode. The second element is the fraction given by numerator mod denominator, using the given division mode. Note that the division mode only matters if this fraction is negative. Because the sign of a BigFraction is always carried by the numerator, the FLOOR and EUCLIDEAN division modes will always produce the same result. Some examples: <table> <tr><th>Fraction</th><th>TRUNCATE</th><th>FLOOR</th><th>EUCLIDEAN</th></tr> <tr><td> 4/1</td><td>[ 4,  0/1]</td><td>[ 4, 0/1]</td><td>[ 4, 0/1]</td></tr> <tr><td> 4/3</td><td>[ 1,  1/3]</td><td>[ 1, 1/3]</td><td>[ 1, 1/3]</td></tr> <tr><td> 2/7</td><td>[ 0,  2/7]</td><td>[ 0, 2/7]</td><td>[ 0, 2/7]</td></tr> <tr><td>-2/7</td><td>[ 0, -2/7]</td><td>[-1, 5/7]</td><td>[-1, 5/7]</td></tr> <tr><td>-4/3</td><td>[-1, -1/3]</td><td>[-2, 2/3]</td><td>[-2, 2/3]</td></tr> <tr><td>-4/1</td><td>[-4,  0/1]</td><td>[-4, 0/1]</td><td>[-4, 0/1]</td></tr> </table>
 * @see DivisionMode
 */
public Number[] getParts(DivisionMode divisionMode){
  if (denominator.equals(BigInteger.ONE))   return new Number[]{numerator,BigFraction.ZERO};
  final BigInteger[] divmod=numerator.divideAndRemainder(denominator);
  BigInteger iPart=divmod[0];
  BigInteger fPart=divmod[1];
  if (numerator.signum() < 0 && divisionMode != DivisionMode.TRUNCATED) {
    iPart=iPart.subtract(BigInteger.ONE);
    fPart=fPart.add(denominator);
  }
  return new Number[]{iPart,new BigFraction(fPart,denominator,Reduced.YES)};
}","/** 
 * Returns the integer and fraction parts of this fraction. The return array is guaranteed to have exactly two elements. The first is guaranteed to be a BigInteger, and the second is guaranteed to be a BigFraction. The first element is the result of integer division of numerator by denominator, using the supplied division mode. The second element is the fraction given by numerator mod denominator, using the given division mode. Note that the division mode only matters if this fraction is negative. Because the sign of a BigFraction is always carried by the numerator, the FLOOR and EUCLIDEAN division modes will always produce the same result. Some examples: <table summary=""Examples of rounding modes""> <tr><th>Fraction</th><th>TRUNCATE</th><th>FLOOR</th><th>EUCLIDEAN</th></tr> <tr><td> 4/1</td><td>[ 4,  0/1]</td><td>[ 4, 0/1]</td><td>[ 4, 0/1]</td></tr> <tr><td> 4/3</td><td>[ 1,  1/3]</td><td>[ 1, 1/3]</td><td>[ 1, 1/3]</td></tr> <tr><td> 2/7</td><td>[ 0,  2/7]</td><td>[ 0, 2/7]</td><td>[ 0, 2/7]</td></tr> <tr><td>-2/7</td><td>[ 0, -2/7]</td><td>[-1, 5/7]</td><td>[-1, 5/7]</td></tr> <tr><td>-4/3</td><td>[-1, -1/3]</td><td>[-2, 2/3]</td><td>[-2, 2/3]</td></tr> <tr><td>-4/1</td><td>[-4,  0/1]</td><td>[-4, 0/1]</td><td>[-4, 0/1]</td></tr> </table>
 * @see DivisionMode
 */
public Number[] getParts(DivisionMode divisionMode){
  if (denominator.equals(BigInteger.ONE))   return new Number[]{numerator,BigFraction.ZERO};
  final BigInteger[] divmod=numerator.divideAndRemainder(denominator);
  BigInteger iPart=divmod[0];
  BigInteger fPart=divmod[1];
  if (numerator.signum() < 0 && divisionMode != DivisionMode.TRUNCATED) {
    iPart=iPart.subtract(BigInteger.ONE);
    fPart=fPart.add(denominator);
  }
  return new Number[]{iPart,new BigFraction(fPart,denominator,Reduced.YES)};
}",0.9896213183730715
36210,"/** 
 * Returns an array containing the parts of the double. Avoids the overhead of four separate function calls.
 * @returns array with four elements:return[0]: Equivalent to getSign(d) return[1]: Equivalent to (exponentAsBits ? getExponentBits(d) : getExponent(d)) return[2]: Equivalent to getMantissa(d) return[3]: Equivalent to isSubnormal(d) - Uses zero for false, non-zero for true.
 */
public static long[] getAllParts(double d,boolean exponentAsBits){
  long[] segments=new long[4];
  long bits=Double.doubleToRawLongBits(d);
  segments[0]=(bits & SIGN_MASK) >>> SIGN_POS;
  segments[1]=(bits & EXPONENT_MASK) >>> EXPONENT_POS;
  segments[2]=bits & MANTISSA_MASK;
  segments[3]=(segments[1] == 0L && segments[2] != 0L ? 1L : 0L);
  if (!exponentAsBits)   segments[1]-=EXPONENT_OFFSET;
  return segments;
}","/** 
 * Returns an array containing the parts of the double. Avoids the overhead of four separate function calls.
 * @return array with four elements:return[0]: Equivalent to getSign(d) return[1]: Equivalent to (exponentAsBits ? getExponentBits(d) : getExponent(d)) return[2]: Equivalent to getMantissa(d) return[3]: Equivalent to isSubnormal(d) - Uses zero for false, non-zero for true.
 */
public static long[] getAllParts(double d,boolean exponentAsBits){
  long[] segments=new long[4];
  long bits=Double.doubleToRawLongBits(d);
  segments[0]=(bits & SIGN_MASK) >>> SIGN_POS;
  segments[1]=(bits & EXPONENT_MASK) >>> EXPONENT_POS;
  segments[2]=bits & MANTISSA_MASK;
  segments[3]=(segments[1] == 0L && segments[2] != 0L ? 1L : 0L);
  if (!exponentAsBits)   segments[1]-=EXPONENT_OFFSET;
  return segments;
}",0.9993846153846154
36211,"/** 
 * Creates a new double primitive using the provided component bits.
 * @param sign
 * @param exponent
 * @param mantissa
 * @param exponentAsBits  If true, assumes that exponent parameter represents the actual exponent bits. If false,IEEE exponent offset value will be added to the offset to get the bits.
 * @return The double value represented by 
 */
public static double getDouble(int sign,int exponent,long mantissa,boolean exponentAsBits){
  if (sign < 0 || sign > 1)   throw new IllegalArgumentException(""String_Node_Str"" + sign);
  if (0 != (mantissa & ~MANTISSA_MASK))   throw new IllegalArgumentException(""String_Node_Str"" + mantissa);
  int offsetExponent=(exponentAsBits ? exponent : exponent + EXPONENT_OFFSET);
  if (offsetExponent < 0 || offsetExponent > MAX_EXPONENT)   throw new IllegalArgumentException(""String_Node_Str"" + exponent);
  return Double.longBitsToDouble((((long)sign) << SIGN_POS) | (((long)offsetExponent) << EXPONENT_POS) | mantissa);
}","/** 
 * Creates a new double primitive using the provided component bits.
 * @param sign
 * @param exponent
 * @param mantissa
 * @param exponentAsBits  If true, assumes that exponent parameter represents the actual exponent bits. If false,IEEE exponent offset value will be added to the offset to get the bits.
 * @return The double value represented by the provided binary parts.
 */
public static double getDouble(int sign,int exponent,long mantissa,boolean exponentAsBits){
  if (sign < 0 || sign > 1)   throw new IllegalArgumentException(""String_Node_Str"" + sign);
  if (0 != (mantissa & ~MANTISSA_MASK))   throw new IllegalArgumentException(""String_Node_Str"" + mantissa);
  int offsetExponent=(exponentAsBits ? exponent : exponent + EXPONENT_OFFSET);
  if (offsetExponent < 0 || offsetExponent > MAX_EXPONENT)   throw new IllegalArgumentException(""String_Node_Str"" + exponent);
  return Double.longBitsToDouble((((long)sign) << SIGN_POS) | (((long)offsetExponent) << EXPONENT_POS) | mantissa);
}",0.986842105263158
36212,"@Override public void start(){
  final Router router=Router.router(vertx);
  LocalSessionStore vertxSessionStore=LocalSessionStore.create(vertx);
  SessionHandler sessionHandler=SessionHandler.create(vertxSessionStore);
  router.routeWithRegex(SESSION_HANDLER_REGEXP).handler(io.vertx.ext.web.handler.CookieHandler.create());
  router.routeWithRegex(SESSION_HANDLER_REGEXP).handler(sessionHandler);
  router.routeWithRegex(SESSION_HANDLER_REGEXP).handler(UserSessionHandler.create(authProvider));
  router.route().failureHandler(rc -> {
    final int statusCode=rc.statusCode();
    rc.response().setStatusCode(statusCode > 0 ? statusCode : 500);
switch (rc.response().getStatusCode()) {
case HttpConstants.FORBIDDEN:
      rc.response().sendFile(""String_Node_Str"");
    break;
case HttpConstants.UNAUTHORIZED:
  rc.response().sendFile(""String_Node_Str"");
break;
case 500:
LOG.error(""String_Node_Str"",rc.failure());
rc.response().sendFile(""String_Node_Str"");
break;
default :
rc.response().end();
}
}
);
LOG.info(""String_Node_Str"" + config().encodePrettily());
config=new Pac4jConfigurationFactory(config(),vertx,vertxSessionStore).build();
config.setHttpActionAdapter(new DefaultHttpActionAdapter());
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpoint(""String_Node_Str"",""String_Node_Str"",Pac4jConfigurationFactory.AUTHORIZER_ADMIN,router);
addProtectedEndpoint(""String_Node_Str"",""String_Node_Str"",Pac4jConfigurationFactory.AUTHORIZER_CUSTOM,router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
SecurityHandlerOptions options=new SecurityHandlerOptions().setClients(""String_Node_Str"");
final String ajaxProtectedUrl=""String_Node_Str"";
router.get(ajaxProtectedUrl).handler(DemoHandlers.authHandler(vertx,sessionStore,config,authProvider,options));
router.get(ajaxProtectedUrl).handler(setContentTypeHandler(""String_Node_Str""));
router.get(ajaxProtectedUrl).handler(DemoHandlers.formIndexJsonHandler(sessionStore));
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
SecurityHandlerOptions dbaEndpointOptions=new SecurityHandlerOptions().setClients(""String_Node_Str"");
router.post(""String_Node_Str"").handler(DemoHandlers.authHandler(vertx,sessionStore,config,authProvider,dbaEndpointOptions));
router.post(""String_Node_Str"").handler(protectedIndexRenderer);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addAnonymousProtectionTo(""String_Node_Str"",router);
router.get(""String_Node_Str"").handler(setContentTypeHandler(TEXT_HTML));
router.get(""String_Node_Str"").handler(DemoHandlers.indexHandler(sessionStore));
final CallbackHandlerOptions callbackHandlerOptions=new CallbackHandlerOptions().setDefaultUrl(""String_Node_Str"").setMultiProfile(true);
final CallbackHandler callbackHandler=new CallbackHandler(vertx,sessionStore,config,callbackHandlerOptions);
router.get(""String_Node_Str"").handler(callbackHandler);
router.post(""String_Node_Str"").handler(BodyHandler.create().setMergeFormAttributes(true));
router.post(""String_Node_Str"").handler(callbackHandler);
router.get(""String_Node_Str"").handler(forceLogin(config,sessionStore));
router.get(""String_Node_Str"").handler(DemoHandlers.logoutHandler(vertx,config,sessionStore));
router.get(""String_Node_Str"").handler(DemoHandlers.loginFormHandler(config));
router.get(""String_Node_Str"").handler(setContentTypeHandler(TEXT_HTML));
router.get(""String_Node_Str"").handler(DemoHandlers.jwtGenerator(config(),sessionStore));
addAnonymousProtectionTo(""String_Node_Str"",router);
router.get(""String_Node_Str"").handler(setContentTypeHandler(TEXT_HTML));
router.get(""String_Node_Str"").handler(DemoHandlers.indexHandler(sessionStore));
router.get(""String_Node_Str"").handler(setContentTypeHandler(TEXT_HTML));
router.get(""String_Node_Str"").handler(StaticHandler.create(""String_Node_Str""));
vertx.createHttpServer().requestHandler(router::accept).listen(8080);
}","@Override public void start(){
  final Router router=Router.router(vertx);
  LocalSessionStore vertxSessionStore=LocalSessionStore.create(vertx);
  sessionStore=new VertxSessionStore(vertxSessionStore);
  SessionHandler sessionHandler=SessionHandler.create(vertxSessionStore);
  router.routeWithRegex(SESSION_HANDLER_REGEXP).handler(io.vertx.ext.web.handler.CookieHandler.create());
  router.routeWithRegex(SESSION_HANDLER_REGEXP).handler(sessionHandler);
  router.routeWithRegex(SESSION_HANDLER_REGEXP).handler(UserSessionHandler.create(authProvider));
  router.route().failureHandler(rc -> {
    final int statusCode=rc.statusCode();
    rc.response().setStatusCode(statusCode > 0 ? statusCode : 500);
switch (rc.response().getStatusCode()) {
case HttpConstants.FORBIDDEN:
      rc.response().sendFile(""String_Node_Str"");
    break;
case HttpConstants.UNAUTHORIZED:
  rc.response().sendFile(""String_Node_Str"");
break;
case 500:
LOG.error(""String_Node_Str"",rc.failure());
rc.response().sendFile(""String_Node_Str"");
break;
default :
rc.response().end();
}
}
);
LOG.info(""String_Node_Str"" + config().encodePrettily());
config=new Pac4jConfigurationFactory(config(),vertx,vertxSessionStore).build();
config.setHttpActionAdapter(new DefaultHttpActionAdapter());
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpoint(""String_Node_Str"",""String_Node_Str"",Pac4jConfigurationFactory.AUTHORIZER_ADMIN,router);
addProtectedEndpoint(""String_Node_Str"",""String_Node_Str"",Pac4jConfigurationFactory.AUTHORIZER_CUSTOM,router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
SecurityHandlerOptions options=new SecurityHandlerOptions().setClients(""String_Node_Str"");
final String ajaxProtectedUrl=""String_Node_Str"";
router.get(ajaxProtectedUrl).handler(DemoHandlers.authHandler(vertx,sessionStore,config,authProvider,options));
router.get(ajaxProtectedUrl).handler(setContentTypeHandler(""String_Node_Str""));
router.get(ajaxProtectedUrl).handler(DemoHandlers.formIndexJsonHandler(sessionStore));
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
SecurityHandlerOptions dbaEndpointOptions=new SecurityHandlerOptions().setClients(""String_Node_Str"");
router.post(""String_Node_Str"").handler(DemoHandlers.authHandler(vertx,sessionStore,config,authProvider,dbaEndpointOptions));
router.post(""String_Node_Str"").handler(protectedIndexRenderer);
addProtectedEndpointWithoutAuthorizer(""String_Node_Str"",""String_Node_Str"",router);
addAnonymousProtectionTo(""String_Node_Str"",router);
router.get(""String_Node_Str"").handler(setContentTypeHandler(TEXT_HTML));
router.get(""String_Node_Str"").handler(DemoHandlers.indexHandler(sessionStore));
final CallbackHandlerOptions callbackHandlerOptions=new CallbackHandlerOptions().setDefaultUrl(""String_Node_Str"").setMultiProfile(true);
final CallbackHandler callbackHandler=new CallbackHandler(vertx,sessionStore,config,callbackHandlerOptions);
router.get(""String_Node_Str"").handler(callbackHandler);
router.post(""String_Node_Str"").handler(BodyHandler.create().setMergeFormAttributes(true));
router.post(""String_Node_Str"").handler(callbackHandler);
router.get(""String_Node_Str"").handler(forceLogin(config,sessionStore));
router.get(""String_Node_Str"").handler(DemoHandlers.logoutHandler(vertx,config,sessionStore));
router.get(""String_Node_Str"").handler(DemoHandlers.loginFormHandler(config));
router.get(""String_Node_Str"").handler(setContentTypeHandler(TEXT_HTML));
router.get(""String_Node_Str"").handler(DemoHandlers.jwtGenerator(config(),sessionStore));
addAnonymousProtectionTo(""String_Node_Str"",router);
router.get(""String_Node_Str"").handler(setContentTypeHandler(TEXT_HTML));
router.get(""String_Node_Str"").handler(DemoHandlers.indexHandler(sessionStore));
router.get(""String_Node_Str"").handler(setContentTypeHandler(TEXT_HTML));
router.get(""String_Node_Str"").handler(StaticHandler.create(""String_Node_Str""));
vertx.createHttpServer().requestHandler(router::accept).listen(8080);
}",0.9937534246575342
36213,"@Override public void putText(final String fieldName,final String value){
  jsonObject.put(fieldName,new JSONString(value));
}","@Override public void putText(final String fieldName,final String value){
  jsonObject.put(fieldName,value == null ? JSONNull.getInstance() : new JSONString(value));
}",0.8600682593856656
36214,"@SuppressWarnings(""String_Node_Str"") public static OptionGroup addCommonOptions(){
  OptionGroup common=new OptionGroup();
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").isRequired().create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").withArgName(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withArgName(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withArgName(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withArgName(""String_Node_Str"").create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + OUTPUT_DIR + ""String_Node_Str"").hasArgs().withArgName(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired(false).create());
  return common;
}","@SuppressWarnings(""String_Node_Str"") public static OptionGroup addCommonOptions(){
  OptionGroup common=new OptionGroup();
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").isRequired().create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg().withArgName(""String_Node_Str"").create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").withArgName(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withArgName(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withArgName(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withArgName(""String_Node_Str"").create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withArgName(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired(false).create());
  common.addOption(OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired(false).create());
  return common;
}",0.990128626981753
36215,"@Override public void generateReport(List<XmlSuite> xmlSuites,List<ISuite> suites,String outputDirectory){
  try {
    createWriter(LdpTestSuite.OUTPUT_DIR,""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace(System.err);
    System.exit(1);
  }
  createModel();
  createAssertions(suites);
  write();
  try {
    endWriter();
  }
 catch (  IOException e) {
    e.printStackTrace(System.err);
    System.exit(1);
  }
}","@Override public void generateReport(List<XmlSuite> xmlSuites,List<ISuite> suites,String outputDirectory){
  try {
    createWriter(LdpTestSuite.OUTPUT_DIR,""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace(System.err);
    System.exit(1);
  }
  createModel();
  createAssertions(suites);
  write();
  if (missingParms.size() > 0) {
    System.out.print(""String_Node_Str"");
    boolean first=true;
    String o=""String_Node_Str"";
    for (    String p : missingParms) {
      if (first) {
        first=false;
        o=p;
      }
 else {
        o=o + ""String_Node_Str"" + p;
      }
    }
    System.out.println(o);
  }
  try {
    endWriter();
  }
 catch (  IOException e) {
    e.printStackTrace(System.err);
    System.exit(1);
  }
}",0.731829573934837
36216,"private void createAssertions(List<ISuite> suites){
  for (  ISuite suite : suites) {
    homepage=suite.getParameter(""String_Node_Str"");
    assertor=suite.getParameter(""String_Node_Str"");
    softwareTitle=suite.getParameter(""String_Node_Str"");
    subjectDev=suite.getParameter(""String_Node_Str"");
    language=suite.getParameter(""String_Node_Str"");
    mailBox=suite.getParameter(""String_Node_Str"");
    description=suite.getParameter(""String_Node_Str"");
    shortname=suite.getParameter(""String_Node_Str"");
    Resource assertorRes=model.createResource(assertor);
    assertorRes.addProperty(RDF.type,Earl.Assertor);
    if (description != null)     assertorRes.addProperty(DOAP.description,description);
    Resource personResource=model.createResource(null,FOAF.Person);
    if (mailBox != null)     personResource.addProperty(FOAF.mbox,mailBox);
    if (subjectDev != null)     personResource.addProperty(FOAF.name,subjectDev);
    assertorRes.addProperty(DOAP.developer,personResource);
    Resource softResource=model.createResource(assertor,Earl.Software);
    if (softwareTitle != null)     softResource.addProperty(DCTerms.title,softwareTitle);
    if (shortname != null)     softResource.addProperty(DOAP.name,shortname);
    Resource subjectResource=model.createResource(assertor,Earl.TestSubject);
    subjectResource.addProperty(RDF.type,DOAP.Project);
    if (homepage != null)     subjectResource.addProperty(DOAP.homepage,homepage);
    if (language != null)     subjectResource.addProperty(DOAP.programming_language,language);
    model.createResource(null,subjectResource);
    Map<String,ISuiteResult> tests=suite.getResults();
    for (    ISuiteResult results : tests.values()) {
      ITestContext testContext=results.getTestContext();
      passedTests=testContext.getPassedTests();
      failedTests=testContext.getFailedTests();
      skippedTests=testContext.getSkippedTests();
      getResultProperties(failedTests,FAIL);
      getResultProperties(skippedTests,SKIP);
      getResultProperties(passedTests,PASS);
    }
  }
}","private void createAssertions(List<ISuite> suites){
  for (  ISuite suite : suites) {
    homepage=suite.getParameter(""String_Node_Str"");
    if (homepage == null)     missingParms.add(""String_Node_Str"");
    assertor=suite.getParameter(""String_Node_Str"");
    if (assertor == null)     missingParms.add(""String_Node_Str"");
    software=suite.getParameter(""String_Node_Str"");
    if (software == null)     missingParms.add(""String_Node_Str"");
    developer=suite.getParameter(""String_Node_Str"");
    if (developer == null)     missingParms.add(""String_Node_Str"");
    language=suite.getParameter(""String_Node_Str"");
    if (language == null)     missingParms.add(""String_Node_Str"");
    mbox=suite.getParameter(""String_Node_Str"");
    if (mbox == null)     missingParms.add(""String_Node_Str"");
    description=suite.getParameter(""String_Node_Str"");
    if (description == null)     missingParms.add(""String_Node_Str"");
    shortname=suite.getParameter(""String_Node_Str"");
    if (shortname == null)     missingParms.add(""String_Node_Str"");
    Resource assertorRes=model.createResource(assertor);
    assertorRes.addProperty(RDF.type,Earl.Assertor);
    Resource subjectResource=model.createResource(homepage,Earl.TestSubject);
    if (description != null)     subjectResource.addProperty(DOAP.description,description);
    Resource personResource=model.createResource(null,FOAF.Person);
    if (mbox != null)     personResource.addProperty(FOAF.mbox,mbox);
    if (developer != null)     personResource.addProperty(FOAF.name,developer);
    subjectResource.addProperty(DOAP.developer,personResource);
    Resource softResource=model.createResource(homepage,Earl.Software);
    if (software != null)     softResource.addProperty(DCTerms.title,software);
    if (shortname != null)     softResource.addProperty(DOAP.name,shortname);
    subjectResource.addProperty(RDF.type,DOAP.Project);
    if (homepage != null)     subjectResource.addProperty(DOAP.homepage,homepage);
    if (language != null)     subjectResource.addProperty(DOAP.programming_language,language);
    Map<String,ISuiteResult> tests=suite.getResults();
    for (    ISuiteResult results : tests.values()) {
      ITestContext testContext=results.getTestContext();
      passedTests=testContext.getPassedTests();
      failedTests=testContext.getFailedTests();
      skippedTests=testContext.getSkippedTests();
      getResultProperties(failedTests,FAIL);
      getResultProperties(skippedTests,SKIP);
      getResultProperties(passedTests,PASS);
    }
  }
}",0.6458515283842795
36217,"private void makeResultResource(ITestResult result,String status){
  String className=result.getTestClass().getName();
  className=className.substring(className.lastIndexOf(""String_Node_Str"") + 1);
  Resource assertionResource=model.createResource(null,Earl.Assertion);
  Resource resultResource=model.createResource(null,Earl.TestResult);
  Resource subjectResource=model.getResource(assertor);
  assertionResource.addProperty(Earl.testSubject,subjectResource);
  assertionResource.addProperty(Earl.test,model.getResource(createTestCaseURL(className,result.getName())));
  Method method=result.getMethod().getConstructorOrMethod().getMethod();
  if (method.getAnnotation(SpecTest.class) != null) {
    SpecTest specTest=method.getAnnotation(SpecTest.class);
    if (specTest.coveredByGroups().length > 0 && specTest.coveredByGroups().length > 0) {
      ArrayList<String> testResults=new ArrayList<String>();
      for (      Class<?> classVal : specTest.coveredByTests()) {
        Method[] classMethod=classVal.getDeclaredMethods();
        for (        Method methodName : classMethod) {
          if (methodName.getAnnotation(Test.class) != null) {
            String group=Arrays.toString(methodName.getAnnotation(Test.class).groups());
            for (            String groupCover : specTest.coveredByGroups()) {
              if (group.contains(groupCover) && !methodName.getName().contains(""String_Node_Str"")) {
                testResults.add(findTestResult(methodName.getName()));
              }
            }
          }
        }
      }
      if (testResults.size() > 0) {
        if (testResults.contains(FAIL))         status=FAIL;
 else         if (testResults.contains(PASS) && !testResults.contains(FAIL))         status=PASS;
 else         if (testResults.contains(SKIP) && !testResults.contains(FAIL) && !testResults.contains(PASS))         status=SKIP;
      }
    }
  }
switch (status) {
case FAIL:
    resultResource.addProperty(Earl.outcome,Earl.failed);
  break;
case PASS:
resultResource.addProperty(Earl.outcome,Earl.passed);
break;
case SKIP:
resultResource.addProperty(Earl.outcome,Earl.untested);
break;
default :
break;
}
if (result.getThrowable() != null) {
createExceptionProperty(result.getThrowable(),resultResource);
}
if (result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(SpecTest.class) != null) {
SpecTest test=result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(SpecTest.class);
METHOD type=test.testMethod();
switch (type) {
case AUTOMATED:
assertionResource.addProperty(Earl.mode,Earl.automatic);
break;
case MANUAL:
assertionResource.addProperty(Earl.mode,Earl.manual);
break;
case INDIRECT:
assertionResource.addProperty(Earl.mode,Earl.automatic);
break;
default :
assertionResource.addProperty(Earl.mode,Earl.notTested);
break;
}
}
assertionResource.addProperty(Earl.assertedBy,subjectResource);
assertionResource.addLiteral(ranAsClass,result.getTestClass().getRealClass().getSimpleName());
resultResource.addProperty(DCTerms.date,model.createTypedLiteral(GregorianCalendar.getInstance()));
assertionResource.addProperty(Earl.testResult,resultResource);
}","private void makeResultResource(ITestResult result,String status){
  String className=result.getTestClass().getName();
  className=className.substring(className.lastIndexOf(""String_Node_Str"") + 1);
  Resource assertionResource=model.createResource(null,Earl.Assertion);
  Resource resultResource=model.createResource(null,Earl.TestResult);
  Resource subjectResource=model.getResource(homepage);
  Resource assertorResource=model.getResource(assertor);
  assertionResource.addProperty(Earl.testSubject,subjectResource);
  assertionResource.addProperty(Earl.test,model.getResource(createTestCaseURL(className,result.getName())));
  Method method=result.getMethod().getConstructorOrMethod().getMethod();
  if (method.getAnnotation(SpecTest.class) != null) {
    SpecTest specTest=method.getAnnotation(SpecTest.class);
    if (specTest.coveredByGroups().length > 0 && specTest.coveredByGroups().length > 0) {
      ArrayList<String> testResults=new ArrayList<String>();
      for (      Class<?> classVal : specTest.coveredByTests()) {
        Method[] classMethod=classVal.getDeclaredMethods();
        for (        Method methodName : classMethod) {
          if (methodName.getAnnotation(Test.class) != null) {
            String group=Arrays.toString(methodName.getAnnotation(Test.class).groups());
            for (            String groupCover : specTest.coveredByGroups()) {
              if (group.contains(groupCover) && !methodName.getName().contains(""String_Node_Str"")) {
                testResults.add(findTestResult(methodName.getName()));
              }
            }
          }
        }
      }
      if (testResults.size() > 0) {
        if (testResults.contains(FAIL))         status=FAIL;
 else         if (testResults.contains(PASS) && !testResults.contains(FAIL))         status=PASS;
 else         if (testResults.contains(SKIP) && !testResults.contains(FAIL) && !testResults.contains(PASS))         status=SKIP;
      }
    }
  }
switch (status) {
case FAIL:
    resultResource.addProperty(Earl.outcome,Earl.failed);
  break;
case PASS:
resultResource.addProperty(Earl.outcome,Earl.passed);
break;
case SKIP:
resultResource.addProperty(Earl.outcome,Earl.untested);
break;
default :
break;
}
if (result.getThrowable() != null) {
createExceptionProperty(result.getThrowable(),resultResource);
}
if (result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(SpecTest.class) != null) {
SpecTest test=result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(SpecTest.class);
METHOD type=test.testMethod();
switch (type) {
case AUTOMATED:
assertionResource.addProperty(Earl.mode,Earl.automatic);
break;
case MANUAL:
assertionResource.addProperty(Earl.mode,Earl.manual);
break;
case INDIRECT:
assertionResource.addProperty(Earl.mode,Earl.automatic);
break;
default :
assertionResource.addProperty(Earl.mode,Earl.notTested);
break;
}
}
assertionResource.addProperty(Earl.assertedBy,assertorResource);
assertionResource.addLiteral(ranAsClass,result.getTestClass().getRealClass().getSimpleName());
resultResource.addProperty(DCTerms.date,model.createTypedLiteral(GregorianCalendar.getInstance()));
assertionResource.addProperty(Earl.testResult,resultResource);
}",0.988647114474929
36218,"private void makeResultResource(ITestResult result,String status){
  String className=result.getTestClass().getName();
  className=className.substring(className.lastIndexOf(""String_Node_Str"") + 1);
  Resource assertionResource=model.createResource(null,Earl.Assertion);
  Resource resultResource=model.createResource(null,Earl.TestResult);
  Resource subjectResource=model.getResource(refPage);
  assertionResource.addProperty(Earl.testSubject,subjectResource);
  assertionResource.addProperty(Earl.test,model.getResource(createTestCaseURL(className,result.getName())));
switch (status) {
case FAIL:
    resultResource.addProperty(Earl.outcome,Earl.fail);
  break;
case PASS:
resultResource.addProperty(Earl.outcome,Earl.pass);
break;
case SKIP:
resultResource.addProperty(Earl.outcome,Earl.skip);
break;
default :
break;
}
if (result.getThrowable() != null) {
createExceptionProperty(result.getThrowable(),resultResource);
}
if (result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(SpecTest.class) != null) {
SpecTest test=result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(SpecTest.class);
METHOD type=test.testMethod();
switch (type) {
case AUTOMATED:
assertionResource.addProperty(Earl.mode,Earl.automatic);
break;
case MANUAL:
assertionResource.addProperty(Earl.mode,Earl.manual);
break;
case NOT_IMPLEMENTED:
assertionResource.addProperty(Earl.mode,Earl.notTested);
break;
case CLIENT_ONLY:
assertionResource.addProperty(Earl.mode,Earl.notTested);
break;
default :
assertionResource.addProperty(Earl.mode,Earl.notTested);
break;
}
}
assertionResource.addProperty(Earl.assertedBy,subjectResource);
assertionResource.addLiteral(ranAsClass,result.getTestClass().getRealClass().getSimpleName());
resultResource.addProperty(DCTerms.date,model.createTypedLiteral(GregorianCalendar.getInstance()));
assertionResource.addProperty(Earl.testResult,resultResource);
}","private void makeResultResource(ITestResult result,String status){
  String className=result.getTestClass().getName();
  className=className.substring(className.lastIndexOf(""String_Node_Str"") + 1);
  Resource assertionResource=model.createResource(null,Earl.Assertion);
  Resource resultResource=model.createResource(null,Earl.TestResult);
  Resource subjectResource=model.getResource(refPage);
  assertionResource.addProperty(Earl.testSubject,subjectResource);
  assertionResource.addProperty(Earl.test,model.getResource(createTestCaseURL(className,result.getName())));
switch (status) {
case FAIL:
    resultResource.addProperty(Earl.outcome,Earl.failed);
  break;
case PASS:
resultResource.addProperty(Earl.outcome,Earl.passed);
break;
case SKIP:
resultResource.addProperty(Earl.outcome,Earl.untested);
break;
default :
break;
}
if (result.getThrowable() != null) {
createExceptionProperty(result.getThrowable(),resultResource);
}
if (result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(SpecTest.class) != null) {
SpecTest test=result.getMethod().getConstructorOrMethod().getMethod().getAnnotation(SpecTest.class);
METHOD type=test.testMethod();
switch (type) {
case AUTOMATED:
assertionResource.addProperty(Earl.mode,Earl.automatic);
break;
case MANUAL:
assertionResource.addProperty(Earl.mode,Earl.manual);
break;
case NOT_IMPLEMENTED:
assertionResource.addProperty(Earl.mode,Earl.notTested);
break;
case CLIENT_ONLY:
assertionResource.addProperty(Earl.mode,Earl.notTested);
break;
default :
assertionResource.addProperty(Earl.mode,Earl.notTested);
break;
}
}
assertionResource.addProperty(Earl.assertedBy,subjectResource);
assertionResource.addLiteral(ranAsClass,result.getTestClass().getRealClass().getSimpleName());
resultResource.addProperty(DCTerms.date,model.createTypedLiteral(GregorianCalendar.getInstance()));
assertionResource.addProperty(Earl.testResult,resultResource);
}",0.9957939011566772
36219,"private Resource generateInformation(Method method,String className,ArrayList<ArrayList<Resource>> conformanceClasses){
  SpecTest testLdp=null;
  Test test=null;
  if (method.getAnnotation(SpecTest.class) != null && method.getAnnotation(Test.class) != null) {
    testLdp=method.getAnnotation(SpecTest.class);
    test=method.getAnnotation(Test.class);
    String allGroups=groups(test.groups());
    Calendar cal=GregorianCalendar.getInstance();
    Literal date=model.createTypedLiteral(cal);
    String testCaseName=createTestCaseName(className,method.getName());
    String testCaseDeclaringName=createTestCaseName(method.getDeclaringClass().getCanonicalName(),method.getName());
    String testCaseURL=LDP.LDPT_NAMESPACE + testCaseName;
    String testCaseDeclaringURL=LDP.LDPT_NAMESPACE + testCaseDeclaringName;
    Resource testCaseResource=model.createResource(testCaseURL);
    testCaseResource.addProperty(RDF.type,EARL.TestCase);
    testCaseResource.addProperty(RDFS.label,testCaseName);
    testCaseResource.addProperty(TestManifest.name,testCaseName);
    testCaseResource.addProperty(DCTerms.date,date);
    testCaseResource.addProperty(RDFS.comment,test.description());
    if (allGroups != null)     testCaseResource.addProperty(DCTerms.subject,allGroups);
 else     conformanceClasses.get(LdpTestCaseReporter.OTHER).add(testCaseResource);
    for (    String group : test.groups()) {
      group=group.trim();
      testCaseResource.addProperty(conformanceLevel,model.createResource(LDP.LDPT_NAMESPACE + group));
      conformanceClasses.get(LdpTestCaseReporter.getConformanceIndex(group)).add(testCaseResource);
    }
    String[] stepsArr=testLdp.steps();
    if (stepsArr != null && stepsArr.length > 0) {
      ArrayList<Literal> arr=new ArrayList<Literal>();
      for (      String s : stepsArr) {
        arr.add(model.createLiteral(s));
      }
      RDFList l=model.createList(arr.iterator());
      testCaseResource.addProperty(steps,l);
    }
    testCaseResource.addProperty(TestManifest.action,""String_Node_Str"");
switch (testLdp.approval()) {
case WG_APPROVED:
      testCaseResource.addProperty(TestDescription.reviewStatus,TestDescription.approved);
    break;
case WG_PENDING:
  testCaseResource.addProperty(TestDescription.reviewStatus,TestDescription.unreviewed);
break;
default :
testCaseResource.addProperty(TestDescription.reviewStatus,TestDescription.unreviewed);
break;
}
testCaseResource.addProperty(declaredInClass,className);
testCaseResource.addProperty(declaredTestCase,model.createResource(testCaseDeclaringURL));
Resource specRef=null;
if (testLdp.specRefUri() != null) {
specRef=model.createResource(testLdp.specRefUri());
testCaseResource.addProperty(RDFS.seeAlso,specRef);
}
if (test.description() != null && test.description().length() > 0) {
Resource excerpt=model.createResource(TestDescription.Excerpt);
excerpt.addLiteral(TestDescription.includesText,test.description());
if (specRef != null) {
excerpt.addProperty(RDFS.seeAlso,specRef);
}
testCaseResource.addProperty(TestDescription.specificationReference,excerpt);
}
switch (testLdp.testMethod()) {
case AUTOMATED:
testCaseResource.addProperty(testMethod,automated);
break;
case MANUAL:
testCaseResource.addProperty(testMethod,manual);
break;
case NOT_IMPLEMENTED:
testCaseResource.addProperty(testMethod,notImplemented);
break;
case CLIENT_ONLY:
testCaseResource.addProperty(testMethod,clientOnly);
break;
}
return testCaseResource;
}
return null;
}","private Resource generateInformation(Method method,String className,ArrayList<ArrayList<Resource>> conformanceClasses){
  SpecTest testLdp=null;
  Test test=null;
  if (method.getAnnotation(SpecTest.class) != null && method.getAnnotation(Test.class) != null) {
    testLdp=method.getAnnotation(SpecTest.class);
    if (testLdp.testMethod() == METHOD.CLIENT_ONLY) {
      return null;
    }
    test=method.getAnnotation(Test.class);
    String allGroups=groups(test.groups());
    Calendar cal=GregorianCalendar.getInstance();
    Literal date=model.createTypedLiteral(cal);
    String testCaseName=createTestCaseName(className,method.getName());
    String testCaseDeclaringName=createTestCaseName(method.getDeclaringClass().getCanonicalName(),method.getName());
    String testCaseURL=LDP.LDPT_NAMESPACE + testCaseName;
    String testCaseDeclaringURL=LDP.LDPT_NAMESPACE + testCaseDeclaringName;
    Resource testCaseResource=model.createResource(testCaseURL);
    testCaseResource.addProperty(RDF.type,EARL.TestCase);
    testCaseResource.addProperty(RDFS.label,testCaseName);
    testCaseResource.addProperty(TestManifest.name,testCaseName);
    testCaseResource.addProperty(DCTerms.date,date);
    testCaseResource.addProperty(RDFS.comment,test.description());
    if (allGroups != null)     testCaseResource.addProperty(DCTerms.subject,allGroups);
 else     conformanceClasses.get(LdpTestCaseReporter.OTHER).add(testCaseResource);
    for (    String group : test.groups()) {
      group=group.trim();
      testCaseResource.addProperty(conformanceLevel,model.createResource(LDP.LDPT_NAMESPACE + group));
      conformanceClasses.get(LdpTestCaseReporter.getConformanceIndex(group)).add(testCaseResource);
    }
    String[] stepsArr=testLdp.steps();
    if (stepsArr != null && stepsArr.length > 0) {
      ArrayList<Literal> arr=new ArrayList<Literal>();
      for (      String s : stepsArr) {
        arr.add(model.createLiteral(s));
      }
      RDFList l=model.createList(arr.iterator());
      testCaseResource.addProperty(steps,l);
    }
    testCaseResource.addProperty(TestManifest.action,""String_Node_Str"");
switch (testLdp.approval()) {
case WG_APPROVED:
      testCaseResource.addProperty(TestDescription.reviewStatus,TestDescription.approved);
    break;
case WG_PENDING:
  testCaseResource.addProperty(TestDescription.reviewStatus,TestDescription.unreviewed);
break;
default :
testCaseResource.addProperty(TestDescription.reviewStatus,TestDescription.unreviewed);
break;
}
testCaseResource.addProperty(declaredInClass,className);
testCaseResource.addProperty(declaredTestCase,model.createResource(testCaseDeclaringURL));
Resource specRef=null;
if (testLdp.specRefUri() != null) {
specRef=model.createResource(testLdp.specRefUri());
testCaseResource.addProperty(RDFS.seeAlso,specRef);
}
if (test.description() != null && test.description().length() > 0) {
Resource excerpt=model.createResource(TestDescription.Excerpt);
excerpt.addLiteral(TestDescription.includesText,test.description());
if (specRef != null) {
excerpt.addProperty(RDFS.seeAlso,specRef);
}
testCaseResource.addProperty(TestDescription.specificationReference,excerpt);
}
switch (testLdp.testMethod()) {
case AUTOMATED:
testCaseResource.addProperty(testMethod,automated);
break;
case MANUAL:
testCaseResource.addProperty(testMethod,manual);
break;
case NOT_IMPLEMENTED:
testCaseResource.addProperty(testMethod,notImplemented);
break;
case CLIENT_ONLY:
testCaseResource.addProperty(testMethod,clientOnly);
break;
}
return testCaseResource;
}
return null;
}",0.988715897728896
36220,"@Test(groups={SHOULD},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED) public void testClientPostToCreate(){
  throw new SkipClientTestException();
}","@Test(groups={SHOULD},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testClientPostToCreate(){
  throw new SkipClientTestException();
}",0.904320987654321
36221,"/** 
 * This is a client-only test. Server tests are covered by  {@link CommonContainerTest#testPreferContainmentTriples()} and{@link DirectContainerTest#testPreferMembershipTriples()}.
 */
@Test(enabled=false,groups={MAY},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_PENDING) public void testClientMayProvideHints(){
  throw new SkipClientTestException();
}","/** 
 * This is a client-only test. Server tests are covered by  {@link CommonContainerTest#testPreferContainmentTriples()} and{@link DirectContainerTest#testPreferMembershipTriples()}.
 */
@Test(enabled=false,groups={MAY},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_PENDING,steps={""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testClientMayProvideHints(){
  throw new SkipClientTestException();
}",0.8794326241134752
36222,"@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED) public void testAllowMultipleRdfTypes(){
  throw new SkipClientTestException();
}","@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str""}) public void testAllowMultipleRdfTypes(){
  throw new SkipClientTestException();
}",0.8521739130434782
36223,"@Test(groups={SHOULD},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED) public void testServerOpen(){
  throw new SkipClientTestException();
}","@Test(groups={SHOULD},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str""}) public void testServerOpen(){
  throw new SkipClientTestException();
}",0.8762135922330098
36224,"@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.MANUAL,approval=STATUS.WG_APPROVED) public void testGetResourcePreservesTriples() throws URISyntaxException {
  throw new SkipNotTestableException();
}","@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testGetResourcePreservesTriples() throws URISyntaxException {
  throw new SkipNotTestableException();
}",0.8690614136732329
36225,"@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.MANUAL,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testAllowResponsesFromServer(){
  throw new SkipNotTestableException();
}","@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void testAllowResponsesFromServer(){
  throw new SkipNotTestableException();
}",0.9800266311584552
36226,"@Test(groups={SHOULD},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.MANUAL,approval=STATUS.WG_APPROVED) public void testUseStandardVocabularies() throws URISyntaxException {
  throw new SkipNotTestableException();
}","@Test(groups={SHOULD},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.MANUAL,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""}) public void testUseStandardVocabularies() throws URISyntaxException {
  throw new SkipNotTestableException();
}",0.8842975206611571
36227,"@Test(groups={SHOULD},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.MANUAL,approval=STATUS.WG_APPROVED) public void testReUseVocabularies(){
  throw new SkipNotTestableException();
}","@Test(groups={SHOULD},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.MANUAL,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""}) public void testReUseVocabularies(){
  throw new SkipNotTestableException();
}",0.8796561604584527
36228,"@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED) public void testChangeRdfTypeValue(){
  throw new SkipClientTestException();
}","@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.CLIENT_ONLY,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str""}) public void testChangeRdfTypeValue(){
  throw new SkipClientTestException();
}",0.8587257617728532
36229,"@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.MANUAL,approval=STATUS.WG_APPROVED) public void testRestrictClientInference(){
  throw new SkipNotTestableException();
}","@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.MANUAL,approval=STATUS.WG_APPROVED,steps={""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""}) public void testRestrictClientInference(){
  throw new SkipNotTestableException();
}",0.8925831202046036
36230,"private static void createSummaryReport() throws IOException {
  html.h2().content(""String_Node_Str"");
  generateStatusGraph();
  writeStatusLegend();
  generateImplmntGraph();
  writeImplmntLegend();
  html.br();
  writeGraphDescription();
  initialRead=true;
  html.h2().content(""String_Node_Str"");
  html.table(class_(""String_Node_Str""));
  html.tr().th().content(""String_Node_Str"");
  html.th().content(""String_Node_Str"");
  html.th().content(""String_Node_Str"");
  html._tr();
  html.tr();
  html.td().b().write(""String_Node_Str"" + totalTests)._b().write(""String_Node_Str"");
  html.ul().li().b().write(approved + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(pending + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(extended + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(deprecated + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(clarification + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html._ul();
  html.br().b().a(href(""String_Node_Str"")).write(mustPend + shouldPend + mayPend+ ""String_Node_Str"")._a()._b();
  html._td();
  html.td();
  html.b().write(automated + ""String_Node_Str"" + totalTests)._b().write(""String_Node_Str"").br();
  html.b().write(automated + ""String_Node_Str"" + (automated + unimplemented))._b().write(""String_Node_Str"");
  html.ul();
  html.li().b().write(""String_Node_Str"" + coverage)._b().write(""String_Node_Str"")._li();
  html.ul().li().b().write(""String_Node_Str"" + must)._b().write(""String_Node_Str"")._li();
  html.li().b().write(""String_Node_Str"" + should)._b().write(""String_Node_Str"")._li();
  html.li().b().write(""String_Node_Str"" + may)._b().write(""String_Node_Str"")._li()._ul();
  html._ul();
  html.ul();
  html.li().b().write((mustImpl + shouldImpl + mayImpl) + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.ul();
  html.li().b().write(mustImpl + ""String_Node_Str"" + must)._b().write(""String_Node_Str"")._li();
  html.li().b().write(shouldImpl + ""String_Node_Str"" + should)._b().write(""String_Node_Str"")._li();
  html.li().b().write(mayImpl + ""String_Node_Str"" + may)._b().write(""String_Node_Str"")._li();
  html._ul();
  html._ul();
  html._td();
  html.td();
  html.b().write((unimplemented + clientTest + manual) + ""String_Node_Str"")._b().write(""String_Node_Str"");
  html.ul();
  html.li().b().write(unimplemented + ""String_Node_Str"")._b().write(""String_Node_Str"").a(href(""String_Node_Str"")).write(""String_Node_Str"")._a()._li();
  html.li().b().write(clientTest + ""String_Node_Str"")._b().write(""String_Node_Str"").a(href(""String_Node_Str"")).write(""String_Node_Str"")._a()._li();
  html.li().b().write(manual + ""String_Node_Str"")._b().write(""String_Node_Str"").a(href(""String_Node_Str"")).write(""String_Node_Str"")._a()._li();
  html._ul();
  html.write(""String_Node_Str"");
  html.ul();
  html.li().b().write((mustNotImpl + shouldNotImpl + mayNotImpl) + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.ul();
  html.li().b().write(mustNotImpl + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(shouldNotImpl + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(mayNotImpl + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html._ul();
  html._ul()._td();
  html._tr();
  html._table();
  generateListOfTestCases();
}","private static void createSummaryReport() throws IOException {
  html.h2().content(""String_Node_Str"");
  generateStatusGraph();
  writeStatusLegend();
  generateImplmntGraph();
  writeImplmntLegend();
  html.br();
  writeGraphDescription();
  initialRead=true;
  html.h2().content(""String_Node_Str"");
  html.table(class_(""String_Node_Str""));
  html.tr().th().content(""String_Node_Str"");
  html.th().content(""String_Node_Str"");
  html.th().content(""String_Node_Str"");
  html._tr();
  html.tr();
  html.td().b().write(""String_Node_Str"" + totalTests)._b().write(""String_Node_Str"");
  html.ul().li().b().write(approved + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(pending + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(extended + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(deprecated + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(clarification + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html._ul();
  html.br().b().a(href(""String_Node_Str"")).write(readyToBeApproved.size() + ""String_Node_Str"")._a()._b();
  html._td();
  html.td();
  html.b().write(automated + ""String_Node_Str"" + totalTests)._b().write(""String_Node_Str"").br();
  html.b().write(automated + ""String_Node_Str"" + (automated + unimplemented))._b().write(""String_Node_Str"");
  html.ul();
  html.li().b().write(""String_Node_Str"" + coverage)._b().write(""String_Node_Str"")._li();
  html.ul().li().b().write(""String_Node_Str"" + must)._b().write(""String_Node_Str"")._li();
  html.li().b().write(""String_Node_Str"" + should)._b().write(""String_Node_Str"")._li();
  html.li().b().write(""String_Node_Str"" + may)._b().write(""String_Node_Str"")._li()._ul();
  html._ul();
  html.ul();
  html.li().b().write((mustImpl + shouldImpl + mayImpl) + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.ul();
  html.li().b().write(mustImpl + ""String_Node_Str"" + must)._b().write(""String_Node_Str"")._li();
  html.li().b().write(shouldImpl + ""String_Node_Str"" + should)._b().write(""String_Node_Str"")._li();
  html.li().b().write(mayImpl + ""String_Node_Str"" + may)._b().write(""String_Node_Str"")._li();
  html._ul();
  html._ul();
  html._td();
  html.td();
  html.b().write((unimplemented + clientTest + manual) + ""String_Node_Str"")._b().write(""String_Node_Str"");
  html.ul();
  html.li().b().write(unimplemented + ""String_Node_Str"")._b().write(""String_Node_Str"").a(href(""String_Node_Str"")).write(""String_Node_Str"")._a()._li();
  html.li().b().write(clientTest + ""String_Node_Str"")._b().write(""String_Node_Str"").a(href(""String_Node_Str"")).write(""String_Node_Str"")._a()._li();
  html.li().b().write(manual + ""String_Node_Str"")._b().write(""String_Node_Str"").a(href(""String_Node_Str"")).write(""String_Node_Str"")._a()._li();
  html._ul();
  html.write(""String_Node_Str"");
  html.ul();
  html.li().b().write((mustNotImpl + shouldNotImpl + mayNotImpl) + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.ul();
  html.li().b().write(mustNotImpl + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(shouldNotImpl + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html.li().b().write(mayNotImpl + ""String_Node_Str"")._b().write(""String_Node_Str"")._li();
  html._ul();
  html._ul()._td();
  html._tr();
  html._table();
  generateListOfTestCases();
}",0.9920353982300883
36231,"/** 
 * Update a resource then later test if the updates were applied (i.e., on a subsequent GET). These methods could be overwritten by subclasses.
 * @see #updateResource(Resource)
 */
protected void verifyUpdatedResource(Resource r){
  r.hasProperty(DCTerms.title,TITLE_FOR_UPDATE);
}","/** 
 * Update a resource then later test if the updates were applied (i.e., on a subsequent GET). These methods could be overwritten by subclasses.
 * @see #updateResource(Resource)
 */
protected void verifyUpdatedResource(Resource r){
  assertTrue(r.hasProperty(DCTerms.title,TITLE_FOR_UPDATE),""String_Node_Str"" + TITLE_FOR_UPDATE + ""String_Node_Str"");
}",0.8926905132192846
36232,"@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.AUTOMATED,approval=STATUS.WG_APPROVED) public void testRelativeUriResolutionPut(){
  skipIfMethodNotAllowed(HttpMethod.PUT);
  String resourceUri=getResourceUri();
  Response response=RestAssured.given().header(ACCEPT,TEXT_TURTLE).expect().statusCode(isSuccessful()).header(ETAG,isValidEntityTag()).when().get(resourceUri);
  String eTag=response.getHeader(ETAG);
  Model model=response.as(Model.class,new RdfObjectMapper(resourceUri));
  ResourceUtils.renameResource(model.getResource(resourceUri),""String_Node_Str"");
  updateResource(model.getResource(""String_Node_Str""));
  RestAssured.given().contentType(TEXT_TURTLE).header(IF_MATCH,eTag).body(model,new RdfObjectMapper(""String_Node_Str"")).expect().statusCode(isSuccessful()).when().put(resourceUri);
  model=RestAssured.given().header(ACCEPT,TEXT_TURTLE).expect().statusCode(isSuccessful()).when().get(resourceUri).as(Model.class,new RdfObjectMapper(resourceUri));
  verifyUpdatedResource(model.getResource(resourceUri));
}","@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.AUTOMATED,approval=STATUS.WG_APPROVED) public void testRelativeUriResolutionPut(){
  skipIfMethodNotAllowed(HttpMethod.PUT);
  String resourceUri=getResourceUri();
  Response response=RestAssured.given().header(ACCEPT,TEXT_TURTLE).expect().statusCode(isSuccessful()).header(ETAG,isValidEntityTag()).when().get(resourceUri);
  String eTag=response.getHeader(ETAG);
  Model model=response.as(Model.class,new RdfObjectMapper(resourceUri));
  ResourceUtils.renameResource(model.getResource(resourceUri),""String_Node_Str"");
  updateResource(model.getResource(""String_Node_Str""));
  Response put=RestAssured.given().contentType(TEXT_TURTLE).header(IF_MATCH,eTag).body(model,new RdfObjectMapper(""String_Node_Str"")).when().put(resourceUri);
  if (!isSuccessful().matches(put.getStatusCode())) {
    throw new SkipException(""String_Node_Str"");
  }
  model=RestAssured.given().header(ACCEPT,TEXT_TURTLE).expect().statusCode(isSuccessful()).when().get(resourceUri).as(Model.class,new RdfObjectMapper(resourceUri));
  verifyUpdatedResource(model.getResource(resourceUri));
}",0.9370174725721252
36233,"@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.AUTOMATED,approval=STATUS.WG_APPROVED) public void testContainerTypeIsBasicContainer(){
  Model containerModel=getAsModel(basicContainer);
  Resource container=containerModel.getResource(basicContainer);
  assertTrue(container.hasProperty(RDF.type,LDP.BasicContainer.stringValue()),""String_Node_Str"" + basicContainer + ""String_Node_Str"");
}","@Test(groups={MUST},description=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") @SpecTest(specRefUri=LdpTestSuite.SPEC_URI + ""String_Node_Str"",testMethod=METHOD.AUTOMATED,approval=STATUS.WG_APPROVED) public void testContainerTypeIsBasicContainer(){
  Model containerModel=getAsModel(basicContainer);
  Resource container=containerModel.getResource(basicContainer);
  assertTrue(container.hasProperty(RDF.type,containerModel.createResource(LDP.BasicContainer.stringValue())),""String_Node_Str"" + basicContainer + ""String_Node_Str"");
}",0.970616113744076
36234,"public static int getGestureData(int deviceId){
  return mGestureMap.get(deviceId);
}","public static int getGestureData(int deviceId){
  int result=mGestureMap.get(deviceId);
  mGestureMap.put(deviceId,-1);
  return result;
}",0.726457399103139
36235,"@Override public void deviceConnected(BluetoothDevice device){
  Log.d(TAG,""String_Node_Str"" + device.getAddress());
  int deviceId=mNextId++;
  mDeviceIdMap.put(deviceId,device);
  mRotationMap.put(deviceId,new float[3]);
  mGyroMap.put(deviceId,new float[3]);
  mAccelMap.put(deviceId,new float[3]);
  mPointerMap.put(deviceId,new int[2]);
  mButtonMap.put(deviceId,new Integer(0));
  mGestureMap.put(deviceId,new Integer(0));
}","@Override public void deviceConnected(BluetoothDevice device){
  Log.d(TAG,""String_Node_Str"" + device.getAddress());
  int deviceId=mNextId++;
  mDeviceIdMap.put(deviceId,device);
  mRotationMap.put(deviceId,new float[3]);
  mGyroMap.put(deviceId,new float[3]);
  mAccelMap.put(deviceId,new float[3]);
  mPointerMap.put(deviceId,new int[2]);
  mButtonMap.put(deviceId,new Integer(0));
  mGestureMap.put(deviceId,new Integer(-1));
}",0.9965156794425089
36236,"public static boolean registerForButtonEvents(final int deviceId){
  final BluetoothDevice device=mDeviceIdMap.get(deviceId);
  if (device == null) {
    Log.e(TAG,""String_Node_Str"" + deviceId);
    return false;
  }
  try {
    mOpenSpatialService.registerForButtonEvents(device,new OpenSpatialEvent.EventListener(){
      @Override public void onEventReceived(      OpenSpatialEvent event){
        ButtonEvent bEvent=(ButtonEvent)event;
        Log.d(TAG,device.getName() + ""String_Node_Str"" + bEvent.buttonEventType);
        int buttons=mButtonMap.get(deviceId);
switch (bEvent.buttonEventType) {
case TOUCH0_DOWN:
          buttons|=(1 << 0);
        break;
case TOUCH0_UP:
      buttons&=~(1 << 0);
    break;
case TOUCH1_DOWN:
  buttons|=(1 << 1);
break;
case TOUCH1_UP:
buttons&=~(1 << 1);
break;
case TOUCH2_DOWN:
buttons|=(1 << 2);
break;
case TOUCH2_UP:
buttons&=~(1 << 2);
break;
case TACTILE0_DOWN:
buttons|=(1 << 3);
break;
case TACTILE0_UP:
buttons&=~(1 << 4);
break;
case TACTILE1_DOWN:
buttons|=(1 << 5);
break;
case TACTILE1_UP:
buttons&=~(1 << 5);
break;
}
mButtonMap.put(deviceId,buttons);
Log.d(TAG,""String_Node_Str"" + Integer.toHexString(buttons));
}
}
);
}
 catch (OpenSpatialException e) {
Log.e(TAG,""String_Node_Str"" + e.getMessage());
return false;
}
return true;
}","public static boolean registerForButtonEvents(final int deviceId){
  final BluetoothDevice device=mDeviceIdMap.get(deviceId);
  if (device == null) {
    Log.e(TAG,""String_Node_Str"" + deviceId);
    return false;
  }
  try {
    mOpenSpatialService.registerForButtonEvents(device,new OpenSpatialEvent.EventListener(){
      @Override public void onEventReceived(      OpenSpatialEvent event){
        ButtonEvent bEvent=(ButtonEvent)event;
        Log.d(TAG,device.getName() + ""String_Node_Str"" + bEvent.buttonEventType);
        int buttons=mButtonMap.get(deviceId);
switch (bEvent.buttonEventType) {
case TOUCH0_DOWN:
          buttons|=(1 << 0);
        break;
case TOUCH0_UP:
      buttons&=~(1 << 0);
    break;
case TOUCH1_DOWN:
  buttons|=(1 << 1);
break;
case TOUCH1_UP:
buttons&=~(1 << 1);
break;
case TOUCH2_DOWN:
buttons|=(1 << 2);
break;
case TOUCH2_UP:
buttons&=~(1 << 2);
break;
case TACTILE0_DOWN:
buttons|=(1 << 3);
break;
case TACTILE0_UP:
buttons&=~(1 << 3);
break;
case TACTILE1_DOWN:
buttons|=(1 << 4);
break;
case TACTILE1_UP:
buttons&=~(1 << 4);
break;
}
mButtonMap.put(deviceId,buttons);
Log.d(TAG,""String_Node_Str"" + Integer.toHexString(buttons));
}
}
);
}
 catch (OpenSpatialException e) {
Log.e(TAG,""String_Node_Str"" + e.getMessage());
return false;
}
return true;
}",0.9976780185758514
36237,"@Override public List<InputSplit> getSplits(JobContext jobContext) throws IOException, InterruptedException {
  List<InputSplit> inputSplits=new ArrayList<InputSplit>();
  ImportViewArgs importViewArgs;
  try {
    importViewArgs=new ImportViewArgs(jobContext.getConfiguration());
  }
 catch (  ArgsException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String[] viewKeys=importViewArgs.getViewKeys();
  int viewKeysPerMapTask=(int)Math.ceil(viewKeys.length / importViewArgs.getNumMappers());
  CouchbaseViewInputSplit inputSplit=new CouchbaseViewInputSplit();
  int keysInCurrentSplit=0;
  for (  String viewKey : viewKeys) {
    if (keysInCurrentSplit == viewKeysPerMapTask) {
      inputSplits.add(inputSplit);
      inputSplit=new CouchbaseViewInputSplit();
      keysInCurrentSplit=0;
    }
    inputSplit.addKey(viewKey);
    keysInCurrentSplit++;
  }
  if (keysInCurrentSplit > 0) {
    inputSplits.add(inputSplit);
  }
  return inputSplits;
}","@Override public List<InputSplit> getSplits(JobContext jobContext) throws IOException, InterruptedException {
  List<InputSplit> inputSplits=new ArrayList<InputSplit>();
  ImportViewArgs importViewArgs;
  try {
    importViewArgs=new ImportViewArgs(jobContext.getConfiguration());
  }
 catch (  ArgsException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String[] viewKeys=importViewArgs.getViewKeys();
  int viewKeysPerMapTask=(int)Math.ceil((double)viewKeys.length / importViewArgs.getNumMappers());
  LOGGER.info(""String_Node_Str"",viewKeysPerMapTask,viewKeys.length,importViewArgs.getNumMappers());
  CouchbaseViewInputSplit inputSplit=new CouchbaseViewInputSplit();
  int keysInCurrentSplit=0;
  for (  String viewKey : viewKeys) {
    if (keysInCurrentSplit == viewKeysPerMapTask) {
      inputSplits.add(inputSplit);
      inputSplit=new CouchbaseViewInputSplit();
      keysInCurrentSplit=0;
    }
    inputSplit.addKey(viewKey);
    keysInCurrentSplit++;
  }
  if (keysInCurrentSplit > 0) {
    inputSplits.add(inputSplit);
  }
  return inputSplits;
}",0.9471106758080312
36238,"public static void main(String[] args){
  if (args.length < 1) {
    printUsage();
    System.exit(1);
  }
  String tool=args[0];
  String[] tailArgs=Arrays.copyOfRange(args,1,args.length);
  try {
    if (tool.equals(""String_Node_Str"")) {
      CouchbaseViewImporter importer=new CouchbaseViewImporter();
      importer.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      CouchbaseViewSerialImporter importer=new CouchbaseViewSerialImporter();
      importer.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      CouchbaseExporter exporter=new CouchbaseExporter();
      exporter.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      BenchmarkUpdater updater=new BenchmarkUpdater();
      updater.start(tailArgs);
    }
 else {
      printUsage();
    }
  }
 catch (  ArgsException e) {
    printUsage();
  }
}","public static void main(String[] args){
  if (args.length < 1) {
    printUsage();
    System.exit(1);
  }
  String tool=args[0];
  String[] tailArgs=Arrays.copyOfRange(args,1,args.length);
  try {
    if (tool.equals(""String_Node_Str"")) {
      CouchbaseViewImporter importer=new CouchbaseViewImporter();
      importer.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      CouchbaseViewSerialImporter importer=new CouchbaseViewSerialImporter();
      importer.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      CouchbaseExporter exporter=new CouchbaseExporter();
      exporter.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      BenchmarkUpdater updater=new BenchmarkUpdater();
      updater.start(tailArgs);
    }
 else {
      printUsage();
    }
  }
 catch (  ArgsException e) {
    printUsage(e.getMessage());
  }
}",0.9921259842519684
36239,"public static void printUsage(){
  System.err.println(""String_Node_Str"" + APP_NAME + ""String_Node_Str""+ APP_NAME+ ""String_Node_Str""+ APP_NAME+ ""String_Node_Str"");
}","public static void printUsage(String msg){
  if (msg != null) {
    System.err.println(msg);
  }
  System.err.println(""String_Node_Str"" + APP_NAME + ""String_Node_Str""+ APP_NAME+ ""String_Node_Str""+ APP_NAME+ ""String_Node_Str"");
}",0.8367346938775511
36240,"public static void main(String[] args){
  if (args.length < 1) {
    printUsage();
    System.exit(1);
  }
  String tool=args[0];
  String[] tailArgs=Arrays.copyOfRange(args,1,args.length);
  try {
    if (tool.equals(""String_Node_Str"")) {
      CouchbaseViewImporter importer=new CouchbaseViewImporter();
      importer.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      CouchbaseViewSerialImporter importer=new CouchbaseViewSerialImporter();
      importer.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      CouchbaseExporter exporter=new CouchbaseExporter();
      exporter.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      BenchmarkUpdater updater=new BenchmarkUpdater();
      updater.start(tailArgs);
    }
 else {
      printUsage();
    }
  }
 catch (  ArgsException e) {
    printUsage(e.getMessage());
  }
}","public static void main(String[] args){
  if (args.length < 1) {
    printUsage();
    System.exit(1);
  }
  String tool=args[0];
  String[] tailArgs=Arrays.copyOfRange(args,1,args.length);
  try {
    if (tool.equals(""String_Node_Str"")) {
      CouchbaseViewImporter importer=new CouchbaseViewImporter();
      importer.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      CouchbaseViewSerialImporter importer=new CouchbaseViewSerialImporter();
      importer.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      CouchbaseExporter exporter=new CouchbaseExporter();
      exporter.start(tailArgs);
    }
 else     if (tool.equals(""String_Node_Str"")) {
      BenchmarkUpdater updater=new BenchmarkUpdater();
      updater.start(tailArgs);
    }
 else {
      printUsage();
    }
  }
 catch (  ArgsException e) {
    printUsage();
  }
}",0.9921259842519684
36241,"public static void printUsage(String message){
  if (message != null) {
    System.err.println(message);
  }
  System.err.println(""String_Node_Str"" + APP_NAME + ""String_Node_Str""+ APP_NAME+ ""String_Node_Str""+ APP_NAME+ ""String_Node_Str"");
}","public static void printUsage(){
  System.err.println(""String_Node_Str"" + APP_NAME + ""String_Node_Str""+ APP_NAME+ ""String_Node_Str""+ APP_NAME+ ""String_Node_Str"");
}",0.8118811881188119
36242,"public Job configureJob(Configuration conf,String input) throws IOException {
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",20);
  Job job=new Job(conf);
  job.setJarByClass(CouchbaseExporter.class);
  FileInputFormat.setInputPaths(job,input);
  job.setMapperClass(TsvToCouchbaseMapper.class);
  job.setMapOutputKeyClass(String.class);
  job.setMapOutputValueClass(CouchbaseAction.class);
  job.setNumReduceTasks(0);
  job.setOutputFormatClass(CouchbaseOutputFormat.class);
  job.setMapOutputKeyClass(String.class);
  job.setMapOutputValueClass(CouchbaseAction.class);
  return job;
}","public Job configureJob(Configuration conf,String input) throws IOException {
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",20);
  Job job=new Job(conf);
  job.setJarByClass(CouchbaseExporter.class);
  job.setUserClassesTakesPrecedence(true);
  FileInputFormat.setInputPaths(job,input);
  job.setMapperClass(TsvToCouchbaseMapper.class);
  job.setMapOutputKeyClass(String.class);
  job.setMapOutputValueClass(CouchbaseAction.class);
  job.setNumReduceTasks(0);
  job.setOutputFormatClass(CouchbaseOutputFormat.class);
  job.setMapOutputKeyClass(String.class);
  job.setMapOutputValueClass(CouchbaseAction.class);
  return job;
}",0.9675960813865864
36243,"public Job configureJob(Configuration conf,String output) throws IOException {
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",20);
  Job job=new Job(conf);
  job.setJarByClass(CouchbaseViewImporter.class);
  job.setInputFormatClass(CouchbaseViewInputFormat.class);
  job.setMapperClass(CouchbaseViewToFileMapper.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(Text.class);
  job.setNumReduceTasks(0);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  FileOutputFormat.setOutputPath(job,new Path(output));
  return job;
}","public Job configureJob(Configuration conf,String output) throws IOException {
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",20);
  Job job=new Job(conf);
  job.setJarByClass(CouchbaseViewImporter.class);
  job.setUserClassesTakesPrecedence(true);
  job.setInputFormatClass(CouchbaseViewInputFormat.class);
  job.setMapperClass(CouchbaseViewToFileMapper.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(Text.class);
  job.setNumReduceTasks(0);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  FileOutputFormat.setOutputPath(job,new Path(output));
  return job;
}",0.9672006102212052
36244,"public Job configureJob(Configuration conf,String input) throws IOException {
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",20);
  Job job=new Job(conf);
  job.setJarByClass(BenchmarkUpdater.class);
  FileInputFormat.setInputPaths(job,input);
  job.setMapperClass(BenchmarkUpdateMapper.class);
  job.setMapOutputKeyClass(String.class);
  job.setMapOutputValueClass(CouchbaseAction.class);
  job.setNumReduceTasks(0);
  job.setOutputFormatClass(CouchbaseOutputFormat.class);
  job.setMapOutputKeyClass(String.class);
  job.setMapOutputValueClass(CouchbaseAction.class);
  return job;
}","public Job configureJob(Configuration conf,String input) throws IOException {
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",5);
  conf.setInt(""String_Node_Str"",20);
  Job job=new Job(conf);
  job.setJarByClass(BenchmarkUpdater.class);
  job.setUserClassesTakesPrecedence(true);
  FileInputFormat.setInputPaths(job,input);
  job.setMapperClass(BenchmarkUpdateMapper.class);
  job.setMapOutputKeyClass(String.class);
  job.setMapOutputValueClass(CouchbaseAction.class);
  job.setNumReduceTasks(0);
  job.setOutputFormatClass(CouchbaseOutputFormat.class);
  job.setMapOutputKeyClass(String.class);
  job.setMapOutputValueClass(CouchbaseAction.class);
  return job;
}",0.9675960813865864
36245,"@Override public void onClick(View v){
  loadPage();
}","@Override public void onClick(View v){
  webView.reload();
}",0.8771929824561403
36246,"@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  Log.d(""String_Node_Str"",""String_Node_Str"" + url);
  boolean completed=false;
  if (url.contains(PaymentArguments.EXT_AUTH_SUCCESS_URI)) {
    completed=true;
    hideWebView();
    proceed();
  }
 else   if (url.contains(PaymentArguments.EXT_AUTH_FAIL_URI)) {
    completed=true;
    showError(Error.AUTHORIZATION_REJECT,null);
  }
  if (completed) {
    hideProgressBar();
  }
  return completed || super.shouldOverrideUrlLoading(view,url);
}","@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  Log.d(""String_Node_Str"",""String_Node_Str"" + url);
  boolean completed=false;
  if (url.contains(PaymentArguments.EXT_AUTH_SUCCESS_URI)) {
    completed=true;
    webView.setVisibility(View.GONE);
    proceed();
  }
 else   if (url.contains(PaymentArguments.EXT_AUTH_FAIL_URI)) {
    completed=true;
    showError(Error.AUTHORIZATION_REJECT,null);
  }
  if (completed) {
    hideProgressBar();
  }
  return completed || super.shouldOverrideUrlLoading(view,url);
}",0.9707822808671064
36247,"@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  super.onReceivedError(view,errorCode,description,failingUrl);
  hideProgressBar();
  showMessageView();
}","@SuppressWarnings(""String_Node_Str"") @Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  super.onReceivedError(view,errorCode,description,failingUrl);
  hideProgressBar();
  setMessageVisible(true);
}",0.8817204301075269
36248,"private void setUpWebView(){
  webView=(WebView)fragmentLayout.findViewById(R.id.web_view);
  webView.setVisibility(View.VISIBLE);
  webView.setWebViewClient(new Client());
  webView.setWebChromeClient(new Chrome());
  webView.getSettings().setJavaScriptEnabled(true);
}","@SuppressLint(""String_Node_Str"") private void setUpWebView(View layout){
  webView=(WebView)layout.findViewById(R.id.web_view);
  webView.setVisibility(View.VISIBLE);
  webView.setWebViewClient(new Client());
  webView.setWebChromeClient(new Chrome());
  webView.getSettings().setJavaScriptEnabled(true);
}",0.90625
36249,"@SuppressLint(""String_Node_Str"") @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  fragmentLayout=(LinearLayout)inflater.inflate(R.layout.ym_web_fragment,container,false);
  setUpWebView();
  setUpMessageView();
  return fragmentLayout;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View layout=inflater.inflate(R.layout.ym_web_fragment,container,false);
  setUpWebView(layout);
  setUpMessageView(layout);
  return layout;
}",0.4708029197080292
36250,"private void setUpMessageView(){
  messageView=(ScrollView)fragmentLayout.findViewById(R.id.error_message);
  final int titleResId=R.string.ym_error_something_wrong_title;
  final int messageResId=R.string.ym_error_unknown;
  final int actionResId=R.string.ym_error_action_try_again;
  final Button action=(Button)messageView.findViewById(R.id.ym_error_action);
  Views.setText(messageView,R.id.ym_error_title,getString(titleResId));
  Views.setText(messageView,R.id.ym_error_message,getString(messageResId));
  action.setText(getString(actionResId));
  action.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadPage();
    }
  }
);
}","private void setUpMessageView(View layout){
  messageView=layout.findViewById(R.id.error_message);
  final int titleResId=R.string.ym_error_something_wrong_title;
  final int messageResId=R.string.ym_error_unknown;
  final int actionResId=R.string.ym_error_action_try_again;
  final Button action=(Button)messageView.findViewById(R.id.ym_error_action);
  Views.setText(messageView,R.id.ym_error_title,getString(titleResId));
  Views.setText(messageView,R.id.ym_error_message,getString(messageResId));
  action.setText(getString(actionResId));
  action.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      webView.reload();
    }
  }
);
}",0.9598832968636032
36251,"public void showCsc(ExternalCard moneySource){
  replaceFragmentAddingToBackStack(CscFragment.newInstance(moneySource));
}","public void showCsc(ExternalCard externalCard){
  selectedCard=externalCard;
  replaceFragment(CscFragment.newInstance(externalCard),false);
}",0.6515151515151515
36252,"private void performOperation(Callable<Call> operation){
  showProgressBar();
  try {
    operation.call();
  }
 catch (  Exception e) {
    onOperationFailed();
  }
}","private Call performOperation(Callable<Call> operation){
  showProgressBar();
  try {
    return operation.call();
  }
 catch (  Exception e) {
    onOperationFailed();
    return null;
  }
}",0.9106145251396648
36253,"public void showUnknownError(){
  replaceFragmentClearBackStack(ErrorFragment.newInstance());
}","public void showUnknownError(){
  replaceFragment(ErrorFragment.newInstance(),true);
}",0.8950276243093923
36254,"@Override public MoneySource getMoneySource(){
  Fragment fragment=getCurrentFragment();
  return fragment instanceof CscFragment ? ((CscFragment)fragment).getMoneySource() : null;
}","@Override public MoneySource getMoneySource(){
  return selectedCard;
}",0.4743083003952569
36255,"public void showError(Error error,String status){
  replaceFragmentClearBackStack(ErrorFragment.newInstance(error,status));
}","public void showError(Error error,String status){
  replaceFragment(ErrorFragment.newInstance(error,status),true);
}",0.921161825726141
36256,"public void repeat(){
  performOperation(new Callable<Call>(){
    @Override public Call call() throws Exception {
      return process.repeatAsync();
    }
  }
);
}","public void repeat(){
  call=performOperation(new Callable<Call>(){
    @Override public Call call() throws Exception {
      return process.repeatAsync();
    }
  }
);
}",0.9850746268656716
36257,"public void showCards(){
  RequestExternalPayment rep=(RequestExternalPayment)process.getRequestPayment();
  replaceFragmentClearBackStack(CardsFragment.newInstance(rep.title,rep.contractAmount));
}","public void showCards(){
  RequestExternalPayment rep=(RequestExternalPayment)process.getRequestPayment();
  replaceFragment(CardsFragment.newInstance(rep.title,rep.contractAmount),true);
}",0.9509043927648578
36258,"public void showSuccess(ExternalCard moneySource){
  BaseRequestPayment rp=process.getRequestPayment();
  replaceFragmentClearBackStack(SuccessFragment.newInstance(rp.contractAmount,moneySource));
}","public void showSuccess(ExternalCard moneySource){
  replaceFragment(SuccessFragment.newInstance(process.getRequestPayment().contractAmount,moneySource),true);
}",0.724233983286908
36259,"@Override public void onBackPressed(){
  applyResult();
  hideProgressBar();
  super.onBackPressed();
}","@Override public void onBackPressed(){
  super.onBackPressed();
  if (call != null) {
    call.cancel();
  }
  Fragment fragment=getCurrentFragment();
  if (fragment instanceof CscFragment) {
    super.onBackPressed();
    fragment=getCurrentFragment();
  }
  if (fragment instanceof CardsFragment) {
    process.reset();
    proceed();
  }
}",0.2921348314606741
36260,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.ym_payment_activity);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  arguments=new PaymentArguments(getIntent().getBundleExtra(EXTRA_ARGUMENTS));
  cards=new DatabaseStorage(this).selectMoneySources();
  boolean ready=initPaymentProcess();
  if (!ready) {
    return;
  }
  if (savedInstanceState == null) {
    proceed();
  }
 else {
    process.restoreSavedState(savedInstanceState.<ExternalPaymentProcessSavedStateParcelable>getParcelable(KEY_PROCESS_SAVED_STATE).getSavedState());
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.ym_payment_activity);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  arguments=new PaymentArguments(getIntent().getBundleExtra(EXTRA_ARGUMENTS));
  cards=new DatabaseStorage(this).selectMoneySources();
  boolean ready=initPaymentProcess();
  if (!ready) {
    return;
  }
  if (savedInstanceState == null) {
    proceed();
  }
 else {
    process.restoreSavedState(savedInstanceState.<ExternalPaymentProcessSavedStateParcelable>getParcelable(KEY_PROCESS_SAVED_STATE).getSavedState());
    if (savedInstanceState.containsKey(KEY_SELECTED_CARD)) {
      selectedCard=savedInstanceState.<ExternalCardParcelable>getParcelable(KEY_SELECTED_CARD).getExternalCard();
    }
  }
}",0.892325996430696
36261,"public void proceed(){
  performOperation(new Callable<Call>(){
    @Override public Call call() throws Exception {
      return process.proceedAsync();
    }
  }
);
}","public void proceed(){
  call=performOperation(new Callable<Call>(){
    @Override public Call call() throws Exception {
      return process.proceedAsync();
    }
  }
);
}",0.9852507374631267
36262,"private void onExternalPaymentProcessed(ProcessExternalPayment pep){
switch (pep.status) {
case SUCCESS:
    Fragment fragment=getCurrentFragment();
  if (!(fragment instanceof SuccessFragment)) {
    showSuccess(pep.moneySource);
  }
 else   if (pep.moneySource != null) {
    ((SuccessFragment)fragment).saveCard(pep.moneySource);
  }
break;
case EXT_AUTH_REQUIRED:
showWeb(pep.acsUri,pep.acsParams);
break;
default :
showError(pep.error,pep.status.code);
}
}","private void onExternalPaymentProcessed(ProcessExternalPayment pep){
switch (pep.status) {
case SUCCESS:
    Fragment fragment=getCurrentFragment();
  if (!(fragment instanceof SuccessFragment)) {
    showSuccess((ExternalCard)parameterProvider.getMoneySource());
  }
 else   if (pep.moneySource != null) {
    ((SuccessFragment)fragment).saveCard(pep.moneySource);
  }
break;
case EXT_AUTH_REQUIRED:
showWeb(pep.acsUri,pep.acsParams);
break;
default :
showError(pep.error,pep.status.code);
}
}",0.9549738219895288
36263,"public void showWeb(String url,Map<String,String> postData){
  replaceFragmentClearBackStack(WebFragment.newInstance(url,postData));
}","public void showWeb(String url,Map<String,String> postData){
  Fragment fragment=getCurrentFragment();
  boolean clearBackStack=!(fragment instanceof CardsFragment || fragment instanceof CscFragment);
  replaceFragment(WebFragment.newInstance(url,postData),clearBackStack);
}",0.58679706601467
36264,"private boolean initPaymentProcess(){
  String clientId=arguments.getClientId();
  OAuth2Session session=new OAuth2Session(new DefaultApiClient(clientId));
  process=new ExternalPaymentProcess(session,new ExternalPaymentProcess.ParameterProvider(){
    @Override public String getPatternId(){
      return arguments.getPatternId();
    }
    @Override public Map<String,String> getPaymentParameters(){
      return arguments.getParams();
    }
    @Override public MoneySource getMoneySource(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof CscFragment ? ((CscFragment)fragment).getMoneySource() : null;
    }
    @Override public String getCsc(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof CscFragment ? ((CscFragment)fragment).getCsc() : null;
    }
    @Override public String getExtAuthSuccessUri(){
      return PaymentArguments.EXT_AUTH_SUCCESS_URI;
    }
    @Override public String getExtAuthFailUri(){
      return PaymentArguments.EXT_AUTH_FAIL_URI;
    }
    @Override public boolean isRequestToken(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof SuccessFragment;
    }
  }
);
  final Prefs prefs=new Prefs(this);
  String instanceId=prefs.restoreInstanceId();
  if (TextUtils.isEmpty(instanceId)) {
    showProgressBar();
    try {
      session.enqueue(new InstanceId.Request(clientId),new OnResponseReady<InstanceId>(){
        @Override public void failure(        Exception exception){
          exception.printStackTrace();
          onOperationFailed();
        }
        @Override public void response(        InstanceId response){
          if (response.isSuccess()) {
            prefs.storeInstanceId(response.instanceId);
            process.setInstanceId(response.instanceId);
            proceed();
          }
 else {
            showError(response.error,response.status.code);
          }
          hideProgressBar();
        }
      }
);
    }
 catch (    IOException e) {
      onOperationFailed();
    }
    return false;
  }
  process.setInstanceId(instanceId);
  process.setCallbacks(new Callbacks());
  return true;
}","private boolean initPaymentProcess(){
  String clientId=arguments.getClientId();
  OAuth2Session session=new OAuth2Session(new DefaultApiClient(clientId));
  parameterProvider=new ExternalPaymentProcess.ParameterProvider(){
    @Override public String getPatternId(){
      return arguments.getPatternId();
    }
    @Override public Map<String,String> getPaymentParameters(){
      return arguments.getParams();
    }
    @Override public MoneySource getMoneySource(){
      return selectedCard;
    }
    @Override public String getCsc(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof CscFragment ? ((CscFragment)fragment).getCsc() : null;
    }
    @Override public String getExtAuthSuccessUri(){
      return PaymentArguments.EXT_AUTH_SUCCESS_URI;
    }
    @Override public String getExtAuthFailUri(){
      return PaymentArguments.EXT_AUTH_FAIL_URI;
    }
    @Override public boolean isRequestToken(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof SuccessFragment;
    }
  }
;
  process=new ExternalPaymentProcess(session,parameterProvider);
  final Prefs prefs=new Prefs(this);
  String instanceId=prefs.restoreInstanceId();
  if (TextUtils.isEmpty(instanceId)) {
    showProgressBar();
    try {
      session.enqueue(new InstanceId.Request(clientId),new OnResponseReady<InstanceId>(){
        @Override public void failure(        Exception exception){
          exception.printStackTrace();
          onOperationFailed();
        }
        @Override public void response(        InstanceId response){
          if (response.isSuccess()) {
            prefs.storeInstanceId(response.instanceId);
            process.setInstanceId(response.instanceId);
            proceed();
          }
 else {
            showError(response.error,response.status.code);
          }
          hideProgressBar();
        }
      }
);
    }
 catch (    IOException e) {
      onOperationFailed();
    }
    return false;
  }
  process.setInstanceId(instanceId);
  process.setCallbacks(new Callbacks());
  return true;
}",0.9356973995271868
36265,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putParcelable(KEY_PROCESS_SAVED_STATE,new ExternalPaymentProcessSavedStateParcelable(process.getSavedState()));
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putParcelable(KEY_PROCESS_SAVED_STATE,new ExternalPaymentProcessSavedStateParcelable(process.getSavedState()));
  if (selectedCard != null) {
    outState.putParcelable(KEY_SELECTED_CARD,new ExternalCardParcelable(selectedCard));
  }
}",0.7874564459930313
36266,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.ym_success_fragment,container,false);
  Views.setText(view,R.id.ym_comment,getString(R.string.ym_success_comment,new BigDecimal(getArguments().getString(KEY_CONTRACT_AMOUNT))));
  card=view.findViewById(R.id.ym_card);
  description=(TextView)view.findViewById(R.id.ym_description);
  successMarker=view.findViewById(R.id.ym_success_marker);
  saveCard=(Button)view.findViewById(R.id.ym_save_card);
  saveCard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onSaveCardClicked();
    }
  }
);
  return view;
}",0.2660098522167488
36267,"@Override public MoneySource getMoneySource(){
  return getCscFragment().getMoneySource();
}","@Override public MoneySource getMoneySource(){
  Fragment fragment=getCurrentFragment();
  return fragment instanceof CscFragment ? ((CscFragment)fragment).getMoneySource() : null;
}",0.6715328467153284
36268,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.ym_payment_activity);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  arguments=new PaymentArguments(getIntent().getBundleExtra(EXTRA_ARGUMENTS));
  cards=new DatabaseStorage(this).selectMoneySources();
  boolean ready=initPaymentProcess();
  if (!ready) {
    return;
  }
  if (savedInstanceState == null) {
    proceed();
  }
 else {
    process.restoreSavedState(savedInstanceState.<ExternalPaymentProcessSavedStateParcelable>getParcelable(KEY_PROCESS_SAVED_STATE).getSavedState());
    repeat();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.ym_payment_activity);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  arguments=new PaymentArguments(getIntent().getBundleExtra(EXTRA_ARGUMENTS));
  cards=new DatabaseStorage(this).selectMoneySources();
  boolean ready=initPaymentProcess();
  if (!ready) {
    return;
  }
  if (savedInstanceState == null) {
    proceed();
  }
 else {
    process.restoreSavedState(savedInstanceState.<ExternalPaymentProcessSavedStateParcelable>getParcelable(KEY_PROCESS_SAVED_STATE).getSavedState());
  }
}",0.9907529722589168
36269,"private void onExternalPaymentProcessed(ProcessExternalPayment pep){
switch (pep.status) {
case SUCCESS:
    Fragment fragment=getCurrentFragment();
  if (fragment instanceof SuccessFragment) {
    ((SuccessFragment)fragment).saveCard(pep.moneySource);
  }
 else {
    showSuccess(pep.moneySource);
  }
break;
case EXT_AUTH_REQUIRED:
showWeb(pep.acsUri,pep.acsParams);
break;
default :
showError(pep.error,pep.status.code);
}
}","private void onExternalPaymentProcessed(ProcessExternalPayment pep){
switch (pep.status) {
case SUCCESS:
    Fragment fragment=getCurrentFragment();
  if (!(fragment instanceof SuccessFragment)) {
    showSuccess(pep.moneySource);
  }
 else   if (pep.moneySource != null) {
    ((SuccessFragment)fragment).saveCard(pep.moneySource);
  }
break;
case EXT_AUTH_REQUIRED:
showWeb(pep.acsUri,pep.acsParams);
break;
default :
showError(pep.error,pep.status.code);
}
}",0.8581081081081081
36270,"public void showWeb(String url,Map<String,String> postData){
  replaceFragmentAddingToBackStack(WebFragment.newInstance(url,postData));
}","public void showWeb(String url,Map<String,String> postData){
  replaceFragmentClearBackStack(WebFragment.newInstance(url,postData));
}",0.9520295202952028
36271,"@Override public String getCsc(){
  return getCscFragment().getCsc();
}","@Override public String getCsc(){
  Fragment fragment=getCurrentFragment();
  return fragment instanceof CscFragment ? ((CscFragment)fragment).getCsc() : null;
}",0.6120689655172413
36272,"private boolean initPaymentProcess(){
  String clientId=arguments.getClientId();
  OAuth2Session session=new OAuth2Session(new DefaultApiClient(clientId));
  process=new ExternalPaymentProcess(session,new ExternalPaymentProcess.ParameterProvider(){
    @Override public String getPatternId(){
      return arguments.getPatternId();
    }
    @Override public Map<String,String> getPaymentParameters(){
      return arguments.getParams();
    }
    @Override public MoneySource getMoneySource(){
      return getCscFragment().getMoneySource();
    }
    @Override public String getCsc(){
      return getCscFragment().getCsc();
    }
    @Override public String getExtAuthSuccessUri(){
      return PaymentArguments.EXT_AUTH_SUCCESS_URI;
    }
    @Override public String getExtAuthFailUri(){
      return PaymentArguments.EXT_AUTH_FAIL_URI;
    }
    @Override public boolean isRequestToken(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof SuccessFragment;
    }
  }
);
  final Prefs prefs=new Prefs(this);
  String instanceId=prefs.restoreInstanceId();
  if (TextUtils.isEmpty(instanceId)) {
    showProgressBar();
    try {
      session.enqueue(new InstanceId.Request(clientId),new OnResponseReady<InstanceId>(){
        @Override public void failure(        Exception exception){
          exception.printStackTrace();
          onOperationFailed();
        }
        @Override public void response(        InstanceId response){
          if (response.isSuccess()) {
            prefs.storeInstanceId(response.instanceId);
            process.setInstanceId(response.instanceId);
            proceed();
          }
 else {
            showError(response.error,response.status.code);
          }
          hideProgressBar();
        }
      }
);
    }
 catch (    IOException e) {
      onOperationFailed();
    }
    return false;
  }
  process.setInstanceId(instanceId);
  process.setCallbacks(new Callbacks());
  return true;
}","private boolean initPaymentProcess(){
  String clientId=arguments.getClientId();
  OAuth2Session session=new OAuth2Session(new DefaultApiClient(clientId));
  process=new ExternalPaymentProcess(session,new ExternalPaymentProcess.ParameterProvider(){
    @Override public String getPatternId(){
      return arguments.getPatternId();
    }
    @Override public Map<String,String> getPaymentParameters(){
      return arguments.getParams();
    }
    @Override public MoneySource getMoneySource(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof CscFragment ? ((CscFragment)fragment).getMoneySource() : null;
    }
    @Override public String getCsc(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof CscFragment ? ((CscFragment)fragment).getCsc() : null;
    }
    @Override public String getExtAuthSuccessUri(){
      return PaymentArguments.EXT_AUTH_SUCCESS_URI;
    }
    @Override public String getExtAuthFailUri(){
      return PaymentArguments.EXT_AUTH_FAIL_URI;
    }
    @Override public boolean isRequestToken(){
      Fragment fragment=getCurrentFragment();
      return fragment instanceof SuccessFragment;
    }
  }
);
  final Prefs prefs=new Prefs(this);
  String instanceId=prefs.restoreInstanceId();
  if (TextUtils.isEmpty(instanceId)) {
    showProgressBar();
    try {
      session.enqueue(new InstanceId.Request(clientId),new OnResponseReady<InstanceId>(){
        @Override public void failure(        Exception exception){
          exception.printStackTrace();
          onOperationFailed();
        }
        @Override public void response(        InstanceId response){
          if (response.isSuccess()) {
            prefs.storeInstanceId(response.instanceId);
            process.setInstanceId(response.instanceId);
            proceed();
          }
 else {
            showError(response.error,response.status.code);
          }
          hideProgressBar();
        }
      }
);
    }
 catch (    IOException e) {
      onOperationFailed();
    }
    return false;
  }
  process.setInstanceId(instanceId);
  process.setCallbacks(new Callbacks());
  return true;
}",0.9426906265177272
36273,"public void saveCard(ExternalCard moneySource){
  this.moneySource=moneySource;
  new DatabaseStorage(getPaymentActivity()).insertMoneySource(moneySource);
  onCardSaved();
}","public void saveCard(ExternalCard moneySource){
  if (moneySource == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.moneySource=moneySource;
  new DatabaseStorage(getPaymentActivity()).insertMoneySource(moneySource);
  onCardSaved();
}",0.7981651376146789
36274,"private void onSaveCardClicked(){
  card.setBackgroundResource(R.drawable.ym_card_process);
  saveCard.setEnabled(false);
  saveCard.setText(R.string.ym_success_saving_card);
  saveCard.setOnClickListener(null);
  description.setText(R.string.ym_success_saving_card_description);
  proceed();
}","private void onSaveCardClicked(){
  card.setBackgroundResource(R.drawable.ym_card_process);
  saveCard.setEnabled(false);
  saveCard.setText(R.string.ym_success_saving_card);
  saveCard.setOnClickListener(null);
  description.setText(R.string.ym_success_saving_card_description);
  repeat();
}",0.9778534923339012
36275,"@Override public void onProgressChanged(WebView view,int newProgress){
  Log.d(""String_Node_Str"",""String_Node_Str"" + newProgress);
  showProgressBar();
  if (newProgress == 100) {
    hideProgressBar();
  }
}","@Override public void onProgressChanged(WebView view,int newProgress){
  Log.d(""String_Node_Str"",""String_Node_Str"" + newProgress);
  if (newProgress == 100) {
    hideProgressBar();
  }
 else {
    showProgressBar();
  }
}",0.8697674418604651
36276,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == REQUEST_CODE && resultCode == RESULT_OK) {
switch (payment) {
case P2P:
      helper.saveAccountNumber(getPaymentTo());
    break;
case PHONE:
  helper.savePhoneNumber(getPaymentTo());
break;
}
updatePrevious();
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == REQUEST_CODE && resultCode == RESULT_OK && !loadValues().contains(getPaymentTo())) {
switch (payment) {
case P2P:
      helper.saveAccountNumber(getPaymentTo());
    break;
case PHONE:
  helper.savePhoneNumber(getPaymentTo());
break;
}
updatePrevious();
}
}",0.9473684210526316
36277,"private void replaceFragmentClearBackStack(Fragment fragment){
  if (fragment == null) {
    return;
  }
  hideProgressBar();
  getFragmentManager().popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);
  getFragmentManager().beginTransaction().replace(R.id.ym_container,fragment).commit();
}","private void replaceFragmentClearBackStack(Fragment fragment){
  if (fragment == null) {
    return;
  }
  hideProgressBar();
  getFragmentManager().popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);
  getFragmentManager().beginTransaction().replace(R.id.ym_container,fragment).commit();
  hideKeyboard();
}",0.9707792207792209
36278,"private void replaceFragmentAddingToBackStack(Fragment fragment){
  if (fragment == null) {
    return;
  }
  hideProgressBar();
  getFragmentManager().beginTransaction().replace(R.id.ym_container,fragment).addToBackStack(fragment.getTag()).commit();
}","private void replaceFragmentAddingToBackStack(Fragment fragment){
  if (fragment == null) {
    return;
  }
  hideProgressBar();
  getFragmentManager().beginTransaction().replace(R.id.ym_container,fragment).addToBackStack(fragment.getTag()).commit();
  hideKeyboard();
}",0.9655172413793104
36279,"public AppResourceProvider(String appPath,String projectName) throws Exception {
  final Properties appProps=new Properties();
  final File baseDir=new File(appPath,projectName);
  appProps.load(new BufferedInputStream(new FileInputStream(new File(baseDir,APP_PROPERTIES))));
  appDescriptor=new AppDescriptorDto();
  appDescriptor.setRoot(APPS_BASE_PATH + '/' + projectName);
  appDescriptor.setMain(appProps.getProperty(""String_Node_Str""));
  appDescriptor.setSplash(appProps.getProperty(""String_Node_Str""));
  appDescriptor.setSplashCloseOn(appProps.getProperty(""String_Node_Str""));
  appDescriptor.setFxml(appProps.getProperty(""String_Node_Str""));
  appDescriptor.setIncludePackages(appProps.getProperty(""String_Node_Str""));
  final String[] classPath=PATH_SEP.split(appProps.getProperty(""String_Node_Str""));
  final List<URL> urls=new ArrayList<>(classPath.length);
  for (  final String path : classPath) {
    final String classPathElement=path.trim();
    if (!classPathElement.isEmpty()) {
      urls.add(new File(baseDir,classPathElement).toURI().toURL());
    }
  }
  loader=new URLClassLoader(urls.toArray(new URL[urls.size()]));
}","public AppResourceProvider(String appPath,String projectName) throws Exception {
  final Properties appProps=new Properties();
  final File baseDir=new File(appPath,projectName);
  appProps.load(new BufferedInputStream(new FileInputStream(new File(baseDir,APP_PROPERTIES))));
  appDescriptor=new AppDescriptorDto();
  appDescriptor.setRoot(contextPath + APPS_BASE_PATH + '/'+ projectName);
  appDescriptor.setMain(appProps.getProperty(""String_Node_Str""));
  appDescriptor.setSplash(appProps.getProperty(""String_Node_Str""));
  appDescriptor.setSplashCloseOn(appProps.getProperty(""String_Node_Str""));
  appDescriptor.setFxml(appProps.getProperty(""String_Node_Str""));
  appDescriptor.setIncludePackages(appProps.getProperty(""String_Node_Str""));
  final String[] classPath=PATH_SEP.split(appProps.getProperty(""String_Node_Str""));
  final List<URL> urls=new ArrayList<>(classPath.length);
  for (  final String path : classPath) {
    final String classPathElement=path.trim();
    if (!classPathElement.isEmpty()) {
      urls.add(new File(baseDir,classPathElement).toURI().toURL());
    }
  }
  loader=new URLClassLoader(urls.toArray(new URL[urls.size()]));
}",0.9934754240974336
36280,"private AppResourceProvider getOrRegisterApp(String applicationName){
  AppResourceProvider resourceProvider=apps.get(applicationName);
  if (resourceProvider == null) {
    try {
      initRootDir();
      resourceProvider=new AppResourceProvider(rootDir,applicationName);
      apps.put(applicationName,resourceProvider);
    }
 catch (    Exception e) {
      logger.warning(e.toString());
    }
  }
  return resourceProvider;
}","private AppResourceProvider getOrRegisterApp(String applicationName){
  AppResourceProvider resourceProvider=apps.get(applicationName);
  if (resourceProvider == null) {
    try {
      initRootDirAndContext();
      resourceProvider=new AppResourceProvider(rootDir,applicationName);
      apps.put(applicationName,resourceProvider);
    }
 catch (    Exception e) {
      logger.warning(e.toString());
    }
  }
  return resourceProvider;
}",0.9885321100917432
36281,"@Override public void doFilter(final ServletRequest request,final ServletResponse response,final FilterChain chain) throws IOException, ServletException {
  final String pathTranslated=((HttpServletRequest)request).getPathInfo();
  assert(pathTranslated.charAt(0) == '/');
  int resourceIdx=pathTranslated.indexOf('/',1) + 1;
  if ((resourceIdx > 0) && (pathTranslated.length() != resourceIdx)) {
    String rewritten=APPS_BASE_PATH + pathTranslated.substring(0,resourceIdx);
    if (!""String_Node_Str"".equals(((HttpServletRequest)request).getQueryString())) {
      rewritten+=""String_Node_Str"" + pathTranslated.substring(resourceIdx);
    }
    ((HttpServletResponse)response).sendRedirect(rewritten);
    return;
  }
  chain.doFilter(request,response);
}","@Override public void doFilter(final ServletRequest request,final ServletResponse response,final FilterChain chain) throws IOException, ServletException {
  final String pathTranslated=((HttpServletRequest)request).getPathInfo();
  assert(pathTranslated.charAt(0) == '/');
  int resourceIdx=pathTranslated.indexOf('/',1) + 1;
  if ((resourceIdx > 0) && (pathTranslated.length() != resourceIdx)) {
    String rewritten=((HttpServletRequest)request).getContextPath() + APPS_BASE_PATH + pathTranslated.substring(0,resourceIdx);
    if (!""String_Node_Str"".equals(((HttpServletRequest)request).getQueryString())) {
      rewritten+=""String_Node_Str"" + pathTranslated.substring(resourceIdx);
    }
    ((HttpServletResponse)response).sendRedirect(rewritten);
    return;
  }
  chain.doFilter(request,response);
}",0.9686500319897632
36282,"@Override public InputStream getInputStream() throws IOException {
  if (inMem) {
    return classLoader.getPreLoadedResourceAsStream(getURL());
  }
 else {
    redirectConnection.setConnectTimeout(CONNECTION_TIMEOUT);
    for (int i=0; i < CONNECT_ATTEMPTS; i++) {
      try {
        return redirectConnection.getInputStream();
      }
 catch (      SocketTimeoutException e) {
      }
      redirectConnection=convertToHTTP(url).openConnection();
      redirectConnection.setConnectTimeout(CONNECTION_TIMEOUT);
      redirectConnection.connect();
    }
    throw new SocketTimeoutException(""String_Node_Str"" + url + ""String_Node_Str""+ CONNECT_ATTEMPTS+ ""String_Node_Str"");
  }
}","@Override public InputStream getInputStream() throws IOException {
  if (inMem) {
    return classLoader.getPreLoadedResourceAsStream(getURL());
  }
 else {
    redirectConnection.setConnectTimeout(CONNECTION_TIMEOUT);
    for (int i=0; i < CONNECT_ATTEMPTS; i++) {
      try {
        return redirectConnection.getInputStream();
      }
 catch (      SocketTimeoutException|ConnectException e) {
      }
      redirectConnection=convertToHTTP(url).openConnection();
      redirectConnection.setConnectTimeout(CONNECTION_TIMEOUT);
      redirectConnection.connect();
    }
    throw new SocketTimeoutException(""String_Node_Str"" + url + ""String_Node_Str""+ CONNECT_ATTEMPTS+ ""String_Node_Str"");
  }
}",0.9876722262509064
36283,"/** 
 * Return a response after real processing of the CSS.
 * @param css The CSS stylesheet to check
 * @return The response
 * @throws IOException if fails
 */
private ValidationResponse processed(final String css) throws IOException {
  final Request req=this.request(this.uri,this.entity(""String_Node_Str"",DefaultCssValidator.filter(css),""String_Node_Str""));
  final Response response=req.fetch();
  this.assertThatDoesNotHasBadHttpStatusAt(response);
  return this.build(response.as(XmlResponse.class).registerNs(""String_Node_Str"",""String_Node_Str"").registerNs(""String_Node_Str"",""String_Node_Str"").assertXPath(""String_Node_Str"").assertXPath(""String_Node_Str"").xml());
}","/** 
 * Return a response after real processing of the CSS.
 * @param css The CSS stylesheet to check
 * @return The response
 * @throws IOException if fails
 */
private ValidationResponse processed(final String css) throws IOException {
  final Request req=this.request(this.uri,this.entity(""String_Node_Str"",DefaultCssValidator.filter(css),""String_Node_Str""));
  final Response response=this.withoutBadResponseStatus(req.fetch());
  return this.build(response.as(XmlResponse.class).registerNs(""String_Node_Str"",""String_Node_Str"").registerNs(""String_Node_Str"",""String_Node_Str"").assertXPath(""String_Node_Str"").assertXPath(""String_Node_Str"").xml());
}",0.9373584905660376
36284,"protected void handleREPLModeCommand(String command,JTextArea component){
  boolean isDone=true;
  boolean refresh=false;
  String firstCommandWord=command.split(""String_Node_Str"")[0];
  if (command.equals(CommandList.CLEAR_COMMAND)) {
    openLeftCurlies=0;
    isContinuing=false;
    component.setText(prompt);
    rowStartPosition=0;
  }
 else   if (firstCommandWord.equals(CommandList.INIT_COMMAND)) {
    isDone=handleInit(command,false);
    component.setText(prompt + command + '\n'+ prompt);
    try {
      int cp=consoleArea.getCaretPosition();
      rowStartPosition=Utilities.getRowStart(consoleArea,cp);
      refresh=true;
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
 else   if (firstCommandWord.equals(CommandList.RESIZE_COMMAND)) {
    if (isContinuing) {
      printStatusMessage(""String_Node_Str"");
      isDone=false;
      component.replaceSelection(promptContinuation);
    }
 else {
      isDone=handleInit(command,true);
      component.replaceSelection(prompt);
      refresh=true;
    }
    try {
      rowStartPosition=Math.max(rowStartPosition,Utilities.getRowStart(consoleArea,consoleArea.getCaretPosition()));
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
 else   if (firstCommandWord.equals(CommandList.UNDO_COMMAND)) {
    if (isContinuing) {
      printStatusMessage(""String_Node_Str"");
      isDone=false;
      component.replaceSelection(promptContinuation);
    }
 else {
      isDone=handleUndo(command,false);
      component.replaceSelection(prompt);
      refresh=true;
    }
    try {
      rowStartPosition=Math.max(rowStartPosition,Utilities.getRowStart(consoleArea,consoleArea.getCaretPosition()));
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
 else   if (firstCommandWord.equals(CommandList.REDO_COMMAND)) {
    if (isContinuing) {
      printStatusMessage(""String_Node_Str"");
      isDone=false;
      component.replaceSelection(promptContinuation);
    }
 else {
      isDone=handleUndo(command,true);
      component.replaceSelection(prompt);
    }
    try {
      rowStartPosition=Math.max(rowStartPosition,Utilities.getRowStart(consoleArea,consoleArea.getCaretPosition()));
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
 else   if (firstCommandWord.equals(CommandList.PRINT_COMMAND)) {
    isDone=false;
    if (isContinuing) {
      printStatusMessage(""String_Node_Str"");
      component.replaceSelection(promptContinuation);
    }
 else {
      handlePrintCode(command);
      component.replaceSelection(prompt);
    }
    try {
      rowStartPosition=Math.max(rowStartPosition,Utilities.getRowStart(consoleArea,consoleArea.getCaretPosition()));
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
 else   if (firstCommandWord.equals(CommandList.HELP_COMMAND)) {
    isDone=false;
    handleHelp(command);
    if (isContinuing) {
      component.replaceSelection(promptContinuation);
    }
 else {
      component.replaceSelection(prompt);
    }
    try {
      rowStartPosition=Math.max(rowStartPosition,Utilities.getRowStart(consoleArea,consoleArea.getCaretPosition()));
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
 else   if (command.equals(CommandList.MAN_COMMAND)) {
    printStatusMessage(""String_Node_Str"" + ""String_Node_Str"");
    if (isContinuing) {
      component.replaceSelection(promptContinuation);
    }
 else {
      component.replaceSelection(prompt);
    }
    try {
      rowStartPosition=Math.max(rowStartPosition,Utilities.getRowStart(consoleArea,consoleArea.getCaretPosition()));
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
  prefixLength=prompt.length();
  runTempSketch(!isDone,refresh);
}","protected void handleREPLModeCommand(String command,JTextArea component){
  boolean isDone=true;
  boolean refresh=false;
  String firstCommandWord=command.split(""String_Node_Str"")[0];
  if (command.equals(CommandList.CLEAR_COMMAND)) {
    openLeftCurlies=0;
    isContinuing=false;
    component.setText(prompt);
  }
 else   if (firstCommandWord.equals(CommandList.INIT_COMMAND)) {
    isDone=handleInit(command,false);
    if (isDone) {
      component.setText(prompt + command + '\n'+ prompt);
      openLeftCurlies=0;
      isContinuing=false;
    }
 else     if (isContinuing) {
      component.replaceSelection(promptContinuation);
    }
 else {
      component.replaceSelection(prompt);
    }
  }
 else   if (firstCommandWord.equals(CommandList.RESIZE_COMMAND)) {
    if (isContinuing) {
      printStatusMessage(""String_Node_Str"");
      isDone=false;
      component.replaceSelection(promptContinuation);
    }
 else {
      isDone=handleInit(command,true);
      component.replaceSelection(prompt);
      refresh=true;
    }
  }
 else   if (firstCommandWord.equals(CommandList.UNDO_COMMAND)) {
    if (isContinuing) {
      printStatusMessage(""String_Node_Str"");
      isDone=false;
      component.replaceSelection(promptContinuation);
    }
 else {
      isDone=handleUndo(command,false);
      component.replaceSelection(prompt);
      refresh=true;
    }
  }
 else   if (firstCommandWord.equals(CommandList.REDO_COMMAND)) {
    if (isContinuing) {
      printStatusMessage(""String_Node_Str"");
      isDone=false;
      component.replaceSelection(promptContinuation);
    }
 else {
      isDone=handleUndo(command,true);
      component.replaceSelection(prompt);
    }
  }
 else   if (firstCommandWord.equals(CommandList.PRINT_COMMAND)) {
    isDone=false;
    if (isContinuing) {
      printStatusMessage(""String_Node_Str"");
      component.replaceSelection(promptContinuation);
    }
 else {
      handlePrintCode(command);
      component.replaceSelection(prompt);
    }
  }
 else   if (firstCommandWord.equals(CommandList.HELP_COMMAND)) {
    isDone=false;
    handleHelp(command);
    if (isContinuing) {
      component.replaceSelection(promptContinuation);
    }
 else {
      component.replaceSelection(prompt);
    }
  }
 else   if (command.equals(CommandList.MAN_COMMAND)) {
    printStatusMessage(""String_Node_Str"" + ""String_Node_Str"");
    if (isContinuing) {
      component.replaceSelection(promptContinuation);
    }
 else {
      component.replaceSelection(prompt);
    }
  }
  if (isContinuing) {
    prefixLength=promptContinuation.length();
  }
 else {
    prefixLength=prompt.length();
  }
  if (command.equals(CommandList.CLEAR_COMMAND)) {
    rowStartPosition=0;
  }
 else   if (firstCommandWord.equals(CommandList.INIT_COMMAND) && isDone) {
    try {
      int cp=consoleArea.getCaretPosition();
      rowStartPosition=Utilities.getRowStart(consoleArea,cp);
      refresh=true;
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
 else {
    try {
      rowStartPosition=Math.max(rowStartPosition,Utilities.getRowStart(consoleArea,consoleArea.getCaretPosition()));
    }
 catch (    BadLocationException e1) {
      e1.printStackTrace();
    }
  }
  runTempSketch(!isDone,refresh);
}",0.7168904593639576
36285,"private String getSizeStatement(){
  StringBuilder s=new StringBuilder();
  s.append(""String_Node_Str"");
  s.append(w);
  s.append(""String_Node_Str"");
  s.append(h);
  if (renderer != null && !renderer.isEmpty()) {
    s.append(""String_Node_Str"");
    s.append(renderer);
    s.append(""String_Node_Str"");
  }
  s.append(""String_Node_Str"");
  return s.toString();
}","private String getSizeStatement(){
  StringBuilder s=new StringBuilder();
  s.append(""String_Node_Str"");
  s.append(w);
  s.append(""String_Node_Str"");
  s.append(h);
  if (renderer != null && !renderer.isEmpty()) {
    s.append(""String_Node_Str"");
    s.append(renderer);
  }
  s.append(""String_Node_Str"");
  return s.toString();
}",0.8863309352517985
36286,"public String getPreviousCommand(String currCommand){
  currentCycleCommand--;
  if (currentCycleCommand < 0) {
    if (commandList.size() == 0) {
      currentCycleCommand=UNDEFINED_COMMAND_STEP;
      return ""String_Node_Str"";
    }
 else     if (currentCycleCommand == UNDEFINED_COMMAND_STEP - 1) {
      currentCycleCommand=commandList.size() - 1;
      this.currentCommand=currCommand;
      return commandList.get(currentCycleCommand);
    }
 else {
      currentCycleCommand=0;
      return commandList.get(0);
    }
  }
 else {
    return commandList.get(currentCycleCommand);
  }
}","public String getPreviousCommand(String currCommand){
  currentCycleCommand--;
  if (currentCycleCommand < 0) {
    if (commandList.size() == 0) {
      currentCycleCommand=UNDEFINED_COMMAND_STEP;
      return ""String_Node_Str"";
    }
 else     if (currentCycleCommand == UNDEFINED_COMMAND_STEP - 1) {
      currentCycleCommand=commandList.size() - 1;
      this.currentCommand=currCommand;
      return commandList.get(currentCycleCommand);
    }
 else {
      currentCycleCommand=0;
      return commandList.get(0);
    }
  }
 else {
    if (currentCycleCommand == commandList.size() - 1) {
      this.currentCommand=currCommand;
    }
    return commandList.get(currentCycleCommand);
  }
}",0.9110764430577224
36287,"public void insertCommand(String cmd){
  resetCommandCycle();
  commandList.add(cmd);
  if (cmd.equals(CLEAR_COMMAND)) {
    previousClearLine=commandList.size();
  }
}","public void insertCommand(String cmd){
  resetCommandCycle();
  if (cmd != null && !cmd.isEmpty()) {
    commandList.add(cmd);
  }
  if (cmd.equals(CLEAR_COMMAND)) {
    previousClearLine=commandList.size();
  }
}",0.8818897637795275
36288,"public String getNextCommand(String currCommand){
  currentCycleCommand++;
  if (currentCycleCommand >= commandList.size()) {
    if (commandList.size() == 0) {
      currentCycleCommand=UNDEFINED_COMMAND_STEP;
      return ""String_Node_Str"";
    }
 else {
      currentCycleCommand=commandList.size();
      return currentCommand;
    }
  }
 else   if (currentCycleCommand == 0) {
    this.currentCommand=currCommand;
    currentCycleCommand=commandList.size();
    return currCommand;
  }
 else {
    return commandList.get(currentCycleCommand);
  }
}","public String getNextCommand(String currCommand){
  currentCycleCommand++;
  if (currentCycleCommand >= commandList.size()) {
    if (commandList.size() == 0) {
      currentCycleCommand=UNDEFINED_COMMAND_STEP;
      return ""String_Node_Str"";
    }
 else {
      if (currentCycleCommand > commandList.size()) {
        this.currentCommand=currCommand;
      }
      currentCycleCommand=commandList.size();
      return currentCommand;
    }
  }
 else   if (currentCycleCommand == 0) {
    this.currentCommand=currCommand;
    currentCycleCommand=commandList.size();
    return currCommand;
  }
 else {
    return commandList.get(currentCycleCommand);
  }
}",0.8304383788254756
36289,"public void actionPerformed(ActionEvent e){
  String cycledCommand=""String_Node_Str"";
  if (key.equals(""String_Node_Str"")) {
    cycledCommand=commandManager.getPreviousCommand(getLastLine());
  }
 else   if (key.equals(""String_Node_Str"")) {
    cycledCommand=commandManager.getNextCommand(getLastLine());
  }
  JTextArea component=(JTextArea)e.getSource();
  component.select(component.getText().lastIndexOf(prompt) + prompt.length(),component.getText().length());
  component.replaceSelection(cycledCommand);
}","public void actionPerformed(ActionEvent e){
  String cycledCommand=""String_Node_Str"";
  JTextArea component=(JTextArea)e.getSource();
  String prevCommand=getLastLine();
  if (key.equals(""String_Node_Str"")) {
    cycledCommand=commandManager.getPreviousCommand(prevCommand);
  }
 else   if (key.equals(""String_Node_Str"")) {
    cycledCommand=commandManager.getNextCommand(prevCommand);
  }
  component.select(component.getText().lastIndexOf(prompt) + prompt.length(),component.getText().length());
  component.replaceSelection(cycledCommand);
}",0.8295454545454546
36290,"protected REPLEditor(Base base,String path,EditorState state,Mode mode){
  super(base,path,state,mode);
  replMode=(REPLMode)mode;
  try {
    untitledFolderLocation=Base.createTempFolder(""String_Node_Str"",""String_Node_Str"",null);
    (new File(untitledFolderLocation,sketch.getFolder().getName())).mkdirs();
    File subdir=new File(untitledFolderLocation,sketch.getFolder().getName());
    final File tempFile=new File(subdir,subdir.getName() + ""String_Node_Str"");
    tempFile.createNewFile();
    replTempSketch=new Sketch(tempFile.getAbsolutePath(),this);
    for (    final SketchCode sc : REPLEditor.this.getSketch().getCode()) {
      setCode(sc);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","protected REPLEditor(Base base,String path,EditorState state,Mode mode){
  super(base,path,state,mode);
  replMode=(REPLMode)mode;
  try {
    untitledFolderLocation=Base.createTempFolder(""String_Node_Str"",""String_Node_Str"",null);
    (new File(untitledFolderLocation,sketch.getFolder().getName())).mkdirs();
    File subdir=new File(untitledFolderLocation,sketch.getFolder().getName());
    final File tempFile=new File(subdir,subdir.getName() + ""String_Node_Str"");
    tempFile.createNewFile();
    replTempSketch=new Sketch(tempFile.getAbsolutePath(),this);
    this.sketch.reload();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9219547775346464
36291,"public GetLang(){
  super(""String_Node_Str"");
}","public GetLang(){
  super(""String_Node_Str"",true);
}",0.9494949494949496
36292,"public GetSession(){
  super(""String_Node_Str"");
}","public GetSession(){
  super(""String_Node_Str"",true);
}",0.9523809523809524
36293,"public static void log(Plugin plugin,final ProxiedPlayer player,final int type,final String content){
  plugin.getProxy().getScheduler().runAsync(plugin,new Runnable(){
    @Override public void run(){
      try {
        PreparedStatement st=getDatabase().prepareStatement(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
        st.setLong(1,System.currentTimeMillis() / 1000);
        st.setInt(2,type);
        st.setString(3,getUUID(player));
        st.setString(4,player.getName());
        st.setString(5,content);
        st.executeUpdate();
        st.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
);
}","public static void log(Plugin plugin,final ProxiedPlayer player,final int type,final String content){
  plugin.getProxy().getScheduler().runAsync(plugin,new Runnable(){
    @Override public void run(){
      try {
        PreparedStatement st=getDatabase().prepareStatement(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
        st.setLong(1,System.currentTimeMillis() / 1000);
        st.setInt(2,type);
        st.setString(3,getUUID(player));
        st.setString(4,player.getName());
        st.setString(5,content.length() > 100 ? content.substring(0,99) : content);
        st.executeUpdate();
        st.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
);
}",0.9646569646569648
36294,"@Override public void run(){
  try {
    PreparedStatement st=getDatabase().prepareStatement(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    st.setLong(1,System.currentTimeMillis() / 1000);
    st.setInt(2,type);
    st.setString(3,getUUID(player));
    st.setString(4,player.getName());
    st.setString(5,content);
    st.executeUpdate();
    st.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  try {
    PreparedStatement st=getDatabase().prepareStatement(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    st.setLong(1,System.currentTimeMillis() / 1000);
    st.setInt(2,type);
    st.setString(3,getUUID(player));
    st.setString(4,player.getName());
    st.setString(5,content.length() > 100 ? content.substring(0,99) : content);
    st.executeUpdate();
    st.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.9472595656670114
36295,"@EventHandler public void onServerKick(ServerKickEvent event){
  BungeeWeb.log(plugin,event.getPlayer(),5,event.getPlayer().getServer().getInfo().getName() + ""String_Node_Str"" + BaseComponent.toPlainText(event.getKickReasonComponent()));
}","@EventHandler public void onServerKick(ServerKickEvent event){
  if (event.getPlayer() != null && event.getPlayer().getServer() != null) {
    BungeeWeb.log(plugin,event.getPlayer(),5,event.getPlayer().getServer().getInfo().getName() + ""String_Node_Str"" + BaseComponent.toPlainText(event.getKickReasonComponent()));
  }
}",0.8535714285714285
36296,"@Override public void run(){
  int cur=(int)(System.currentTimeMillis() / 1000);
  Configuration config=BungeeWeb.getConfig();
  ArrayList<String> conditions=new ArrayList<String>();
  ArrayList<Object> params=new ArrayList<Object>();
  int players=0;
  if (config.getBoolean(""String_Node_Str"")) {
    players=plugin.getProxy().getPlayers().size();
    conditions.add(""String_Node_Str"");
    params.add(players);
  }
  try {
    Connection db=BungeeWeb.getDatabase();
    if (config.getBoolean(""String_Node_Str"")) {
      ResultSet activity=db.createStatement().executeQuery(""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str""+ (cur - inc));
      activity.next();
      conditions.add(""String_Node_Str"");
      params.add(activity.getInt(1));
    }
    if (config.getBoolean(""String_Node_Str"") && config.getBoolean(""String_Node_Str"")) {
      ResultSet maxplayers=db.createStatement().executeQuery(""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str"");
      conditions.add(""String_Node_Str"");
      if (maxplayers.next()) {
        int max=maxplayers.getInt(""String_Node_Str"");
        if (players > max) {
          params.add(plugin.getProxy().getConfig().getPlayerLimit());
        }
 else {
          params.add(max);
        }
      }
 else {
        params.add(players);
      }
    }
    if (conditions.size() == 0)     return;
    String keys=""String_Node_Str"";
    String values=cur + ""String_Node_Str"";
    for (    String c : conditions) {
      keys+=""String_Node_Str"" + c + ""String_Node_Str"";
      values+=""String_Node_Str"";
    }
    keys=keys.substring(0,keys.length() - 2);
    values=values.substring(0,values.length() - 2);
    PreparedStatement st=db.prepareStatement(""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str""+ keys+ ""String_Node_Str""+ values+ ""String_Node_Str"");
    int i=0;
    for (    Object p : params) {
      i++;
      st.setObject(i,p);
    }
    st.executeUpdate();
  }
 catch (  SQLException e) {
    plugin.getLogger().warning(""String_Node_Str"");
  }
}","@Override public void run(){
  int cur=(int)(System.currentTimeMillis() / 1000);
  Configuration config=BungeeWeb.getConfig();
  ArrayList<String> conditions=new ArrayList<String>();
  ArrayList<Object> params=new ArrayList<Object>();
  int players=0;
  if (config.getBoolean(""String_Node_Str"")) {
    players=plugin.getProxy().getPlayers().size();
    conditions.add(""String_Node_Str"");
    params.add(players);
  }
  try {
    Connection db=BungeeWeb.getDatabase();
    if (config.getBoolean(""String_Node_Str"")) {
      ResultSet activity=db.createStatement().executeQuery(""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str""+ (cur - inc));
      activity.next();
      conditions.add(""String_Node_Str"");
      params.add(activity.getInt(1));
    }
    if (config.getBoolean(""String_Node_Str"") && config.getBoolean(""String_Node_Str"")) {
      ResultSet maxplayers=db.createStatement().executeQuery(""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str"");
      conditions.add(""String_Node_Str"");
      if (maxplayers.next()) {
        int max=maxplayers.getInt(""String_Node_Str"");
        if (players > max) {
          params.add(players);
        }
 else {
          params.add(max);
        }
      }
 else {
        params.add(players);
      }
    }
    if (conditions.size() == 0)     return;
    String keys=""String_Node_Str"";
    String values=cur + ""String_Node_Str"";
    for (    String c : conditions) {
      keys+=""String_Node_Str"" + c + ""String_Node_Str"";
      values+=""String_Node_Str"";
    }
    keys=keys.substring(0,keys.length() - 2);
    values=values.substring(0,values.length() - 2);
    PreparedStatement st=db.prepareStatement(""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str""+ keys+ ""String_Node_Str""+ values+ ""String_Node_Str"");
    int i=0;
    for (    Object p : params) {
      i++;
      st.setObject(i,p);
    }
    st.executeUpdate();
  }
 catch (  SQLException e) {
    plugin.getLogger().warning(""String_Node_Str"");
  }
}",0.9880400292897242
36297,"public void onEnable(){
  final Plugin plugin=this;
  getProxy().getScheduler().runAsync(this,new Runnable(){
    @Override public void run(){
      try {
        Metrics metrics=new Metrics(plugin);
        metrics.start();
      }
 catch (      IOException e) {
        getLogger().info(""String_Node_Str"");
      }
    }
  }
);
  if (!getDataFolder().exists())   getDataFolder().mkdir();
  File configFile=new File(getDataFolder(),""String_Node_Str"");
  try {
    if (!configFile.exists()) {
      configFile.createNewFile();
      ByteStreams.copy(getResourceAsStream(""String_Node_Str""),new FileOutputStream(configFile));
      getLogger().warning(""String_Node_Str"");
      return;
    }
    config=ConfigurationProvider.getProvider(YamlConfiguration.class).load(configFile);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  setupLocale(""String_Node_Str"");
  manager=new DatabaseManager(this,""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str""+ getConfig().getInt(""String_Node_Str"")+ ""String_Node_Str""+ getConfig().getString(""String_Node_Str"")+ ""String_Node_Str"",getConfig().getString(""String_Node_Str""),getConfig().getString(""String_Node_Str""));
  Connection db=getDatabase();
  if (db == null) {
    getLogger().severe(""String_Node_Str"");
    return;
  }
  try {
    db.createStatement().executeUpdate(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    db.createStatement().executeUpdate(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    db.createStatement().executeUpdate(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    ResultSet rs=db.createStatement().executeQuery(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    while (rs.next())     if (rs.getInt(1) == 0) {
      String salt=salt();
      db.createStatement().executeUpdate(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str""+ encrypt(""String_Node_Str"",salt)+ ""String_Node_Str""+ salt+ ""String_Node_Str"");
      getLogger().warning(""String_Node_Str"");
      getLogger().warning(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    getLogger().severe(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  getProxy().getPluginManager().registerListener(this,new ChatListener());
  getProxy().getPluginManager().registerListener(this,new PlayerDisconnectListener());
  getProxy().getPluginManager().registerListener(this,new PostLoginListener());
  getProxy().getPluginManager().registerListener(this,new ServerConnectedListener());
  getProxy().getPluginManager().registerListener(this,new ServerKickListener());
  int inc=getConfig().getInt(""String_Node_Str"");
  if (inc > 0)   getProxy().getScheduler().schedule(this,new StatusCheck(this,inc),inc,inc,TimeUnit.SECONDS);
  org.eclipse.jetty.util.log.Log.setLog(new JettyLogger());
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  StdErrLog.setProperties(p);
  ContextHandler context=new ContextHandler(""String_Node_Str"");
  SessionHandler sessions=new SessionHandler(new HashSessionManager());
  sessions.setHandler(new WebHandler(this));
  context.setHandler(sessions);
  final Server server=new Server(getConfig().getInt(""String_Node_Str""));
  server.setSessionIdManager(new HashSessionIdManager());
  server.setHandler(sessions);
  server.setStopAtShutdown(true);
  getProxy().getScheduler().runAsync(this,new Runnable(){
    @Override public void run(){
      try {
        server.start();
      }
 catch (      Exception e) {
        getLogger().warning(""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
);
}","public void onEnable(){
  final Plugin plugin=this;
  getProxy().getScheduler().runAsync(this,new Runnable(){
    @Override public void run(){
      try {
        Metrics metrics=new Metrics(plugin);
        metrics.start();
      }
 catch (      IOException e) {
        getLogger().info(""String_Node_Str"");
      }
    }
  }
);
  if (!getDataFolder().exists())   getDataFolder().mkdir();
  File configFile=new File(getDataFolder(),""String_Node_Str"");
  try {
    if (!configFile.exists()) {
      configFile.createNewFile();
      ByteStreams.copy(getResourceAsStream(""String_Node_Str""),new FileOutputStream(configFile));
      getLogger().warning(""String_Node_Str"");
      return;
    }
    config=ConfigurationProvider.getProvider(YamlConfiguration.class).load(configFile);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  setupLocale(""String_Node_Str"");
  manager=new DatabaseManager(this,""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str""+ getConfig().getInt(""String_Node_Str"")+ ""String_Node_Str""+ getConfig().getString(""String_Node_Str"")+ ""String_Node_Str"",getConfig().getString(""String_Node_Str""),getConfig().getString(""String_Node_Str""));
  Connection db=getDatabase();
  if (db == null) {
    getLogger().severe(""String_Node_Str"");
    return;
  }
  try {
    db.createStatement().executeUpdate(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    db.createStatement().executeUpdate(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    db.createStatement().executeUpdate(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    ResultSet rs=db.createStatement().executeQuery(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    while (rs.next())     if (rs.getInt(1) == 0) {
      String salt=salt();
      db.createStatement().executeUpdate(""String_Node_Str"" + getConfig().getString(""String_Node_Str"") + ""String_Node_Str""+ encrypt(""String_Node_Str"",salt)+ ""String_Node_Str""+ salt+ ""String_Node_Str"");
      getLogger().warning(""String_Node_Str"");
      getLogger().warning(""String_Node_Str"");
    }
  }
 catch (  SQLException e) {
    getLogger().severe(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  getProxy().getScheduler().schedule(this,new PurgeScheduler(""String_Node_Str"",30),10,10,TimeUnit.MINUTES);
  getProxy().getPluginManager().registerListener(this,new ChatListener());
  getProxy().getPluginManager().registerListener(this,new PlayerDisconnectListener());
  getProxy().getPluginManager().registerListener(this,new PostLoginListener());
  getProxy().getPluginManager().registerListener(this,new ServerConnectedListener());
  getProxy().getPluginManager().registerListener(this,new ServerKickListener());
  int inc=getConfig().getInt(""String_Node_Str"");
  if (inc > 0)   getProxy().getScheduler().schedule(this,new StatusCheck(this,inc),inc,inc,TimeUnit.SECONDS);
  org.eclipse.jetty.util.log.Log.setLog(new JettyLogger());
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  StdErrLog.setProperties(p);
  ContextHandler context=new ContextHandler(""String_Node_Str"");
  SessionHandler sessions=new SessionHandler(new HashSessionManager());
  sessions.setHandler(new WebHandler(this));
  context.setHandler(sessions);
  final Server server=new Server(getConfig().getInt(""String_Node_Str""));
  server.setSessionIdManager(new HashSessionIdManager());
  server.setHandler(sessions);
  server.setStopAtShutdown(true);
  getProxy().getScheduler().runAsync(this,new Runnable(){
    @Override public void run(){
      try {
        server.start();
      }
 catch (      Exception e) {
        getLogger().warning(""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
);
}",0.9856839872746552
36298,"public PurgeScheduler(String table,int days){
  this.table=BungeeWeb.getConfig().getString(""String_Node_Str"") + table;
  time=days * 86400;
  try {
    min=BungeeWeb.getDatabase().createStatement().executeQuery(""String_Node_Str"" + table + ""String_Node_Str"").getInt(1);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public PurgeScheduler(String table,int days){
  this.table=BungeeWeb.getConfig().getString(""String_Node_Str"") + table;
  time=days * 86400;
  try {
    ResultSet rs=BungeeWeb.getDatabase().createStatement().executeQuery(""String_Node_Str"" + this.table + ""String_Node_Str"");
    if (rs.next())     min=rs.getInt(1);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.9278642149929278
36299,"@Override public void run(){
  try {
    ResultSet maxquery=BungeeWeb.getDatabase().createStatement().executeQuery(""String_Node_Str"" + table + ""String_Node_Str""+ min+ ""String_Node_Str"");
    while (maxquery.next()) {
      int max=maxquery.getInt(""String_Node_Str"");
      BungeeWeb.getDatabase().createStatement().executeUpdate(""String_Node_Str"" + table + ""String_Node_Str""+ min+ ""String_Node_Str""+ max+ ""String_Node_Str""+ ((System.currentTimeMillis() / 1000) - time));
      min=max;
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  try {
    ResultSet maxquery=BungeeWeb.getDatabase().createStatement().executeQuery(""String_Node_Str"" + table + ""String_Node_Str""+ min+ ""String_Node_Str"");
    if (maxquery.next()) {
      int max=maxquery.getInt(""String_Node_Str"");
      BungeeWeb.getDatabase().createStatement().executeUpdate(""String_Node_Str"" + table + ""String_Node_Str""+ min+ ""String_Node_Str""+ max+ ""String_Node_Str""+ ((System.currentTimeMillis() / 1000) - time));
      min=max;
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.9936651583710407
36300,"public synchronized Connection getConnection(){
  for (  Connection c : connections) {
    try {
      if (c.isValid(2) && !c.isClosed()) {
        return c;
      }
 else {
        connections.remove(c);
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
      connections.remove(c);
    }
  }
  Connection c=runConnection();
  if (c != null)   connections.add(c);
  return c;
}","public synchronized Connection getConnection(){
  for (int i=0; i < connections.size(); i++) {
    Connection c=connections.get(i);
    try {
      if (c.isValid(2) && !c.isClosed()) {
        return c;
      }
 else {
        connections.remove(c);
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
      connections.remove(c);
    }
  }
  Connection c=runConnection();
  if (c != null)   connections.add(c);
  return c;
}",0.8730723606168446
36301,"public void turnOnScreen(Context context){
}","public void turnOnScreen(Context context){
  Log.i(TAG,""String_Node_Str"");
  PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wl=pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,""String_Node_Str"");
  wl.acquire(5000);
}",0.2273901808785529
36302,"public int run(String[] args) throws Exception {
  long startTime=System.currentTimeMillis() / 1000L;
  for (int i=0; i < args.length; i++) {
    System.out.println(i + ""String_Node_Str"" + args[i]);
  }
  if (args.length < 2) {
    System.err.printf(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",+""String_Node_Str"",+""String_Node_Str"",+""String_Node_Str"",+""String_Node_Str"",+""String_Node_Str"",+""String_Node_Str"",+""String_Node_Str"",getClass().getSimpleName());
    ToolRunner.printGenericCommandUsage(System.err);
    return -1;
  }
  int d=Integer.parseInt(args[0]);
  boolean is2D=(Integer.parseInt(args[1]) < 3);
  int iter=d;
  if (!is2D) {
    iter=d * d;
  }
  boolean isPaired=(Integer.parseInt(args[2]) == 2);
  iter=1;
  for (int i=0; i < iter; i++) {
    System.out.println(""String_Node_Str"" + i);
    JobConf conf=getJobInstance(i,isPaired);
    FileSystem fs=FileSystem.get(conf);
    conf.setInt(""String_Node_Str"",d);
    conf.setInt(""String_Node_Str"",i);
    int outputIndex=4;
    if (isPaired) {
      MultipleInputs.addInputPath(conf,new Path(args[4]),KeyValueTextInputFormat.class,FFMapper.class);
      MultipleInputs.addInputPath(conf,new Path(args[5]),KeyValueTextInputFormat.class,FFMapperPaired.class);
      outputIndex=6;
    }
 else {
      FileInputFormat.addInputPath(conf,new Path(args[4]));
      outputIndex=5;
    }
    conf.setStrings(""String_Node_Str"",args[outputIndex]);
    if (args.length > outputIndex + 1) {
      conf.setStrings(""String_Node_Str"",args[outputIndex + 1]);
    }
 else {
      conf.setStrings(""String_Node_Str"",""String_Node_Str"");
    }
    RunningJob job=JobClient.runJob(conf);
  }
  long endTime=System.currentTimeMillis() / 1000L;
  BufferedWriter timeResults=new BufferedWriter(new FileWriter(""String_Node_Str"" + ""String_Node_Str"" + args[3] + ""String_Node_Str"",true));
  ;
  timeResults.write(startTime + ""String_Node_Str"" + endTime+ ""String_Node_Str""+ (endTime - startTime)+ ""String_Node_Str"");
  timeResults.close();
  return 0;
}","public int run(String[] args) throws Exception {
  long startTime=System.currentTimeMillis() / 1000L;
  for (int i=0; i < args.length; i++) {
    System.out.println(i + ""String_Node_Str"" + args[i]);
  }
  if (args.length < 2) {
    System.err.printf(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",getClass().getSimpleName());
    ToolRunner.printGenericCommandUsage(System.err);
    return -1;
  }
  int d=Integer.parseInt(args[0]);
  boolean is2D=(Integer.parseInt(args[1]) < 3);
  int iter=d;
  if (!is2D) {
    iter=d * d;
  }
  boolean isPaired=(Integer.parseInt(args[2]) == 2);
  iter=1;
  for (int i=0; i < iter; i++) {
    System.out.println(""String_Node_Str"" + i);
    JobConf conf=getJobInstance(i,isPaired);
    FileSystem fs=FileSystem.get(conf);
    conf.setInt(""String_Node_Str"",d);
    conf.setInt(""String_Node_Str"",i);
    int outputIndex=4;
    if (isPaired) {
      MultipleInputs.addInputPath(conf,new Path(args[4]),KeyValueTextInputFormat.class,FFMapper.class);
      MultipleInputs.addInputPath(conf,new Path(args[5]),KeyValueTextInputFormat.class,FFMapperPaired.class);
      outputIndex=6;
    }
 else {
      FileInputFormat.addInputPath(conf,new Path(args[4]));
      outputIndex=5;
    }
    conf.setStrings(""String_Node_Str"",args[outputIndex]);
    if (args.length > outputIndex + 1) {
      conf.setStrings(""String_Node_Str"",args[outputIndex + 1]);
    }
 else {
      conf.setStrings(""String_Node_Str"",""String_Node_Str"");
    }
    RunningJob job=JobClient.runJob(conf);
  }
  long endTime=System.currentTimeMillis() / 1000L;
  BufferedWriter timeResults=new BufferedWriter(new FileWriter(""String_Node_Str"" + ""String_Node_Str"" + args[3] + ""String_Node_Str"",true));
  ;
  timeResults.write(startTime + ""String_Node_Str"" + endTime+ ""String_Node_Str""+ (endTime - startTime)+ ""String_Node_Str"");
  timeResults.close();
  return 0;
}",0.946568401658222
36303,"@Override public void unregisterDataSetObserver(final DataSetObserver observer){
  unregisterDataSetObserver(observer);
}","@Override public void unregisterDataSetObserver(final DataSetObserver observer){
  linkedAdapter.unregisterDataSetObserver(observer);
}",0.9453125
36304,"private static void makeTimetableTrips(ExtendedFeature exft,List<ProtoRoute> protoRoutes,Route route,Map<ProtoRouteStop,Stop> prsStops,boolean reverse,boolean usePeriods){
  for (  ServiceWindow window : config.getServiceWindows()) {
    Double headway=getHeadway(exft,window.propName,usePeriods);
    if (headway == null) {
      continue;
    }
    for (int t=window.startSecs(); t < window.endSecs(); t+=headway) {
      Trip trip=makeNewTrip(route,reverse);
      queue.trips.add(trip);
      int segStart=t;
      int firstStopTimeSeq=0;
      List<StopTime> stopTimes=new ArrayList<StopTime>();
      for (int i=0; i < protoRoutes.size(); i++) {
        int index=i;
        if (reverse)         index=protoRoutes.size() - 1 - i;
        ProtoRoute protoRoute=protoRoutes.get(index);
        List<StopTime> segStopTimes=createStopTimes(protoRoute.ret,prsStops,reverse,protoRoute.speed,trip,segStart,firstStopTimeSeq);
        stopTimes.addAll(segStopTimes);
        segStart+=protoRoute.getDuration();
        firstStopTimeSeq+=segStopTimes.size();
      }
      queue.stoptimes.addAll(stopTimes);
    }
  }
}","private static void makeTimetableTrips(ExtendedFeature exft,List<ProtoRoute> protoRoutes,Route route,Map<ProtoRouteStop,Stop> prsStops,boolean reverse,boolean usePeriods){
  for (  ServiceWindow window : config.getServiceWindows()) {
    Double headway=getHeadway(exft,window.propName,usePeriods);
    if (headway == null) {
      continue;
    }
    for (int t=window.startSecs(); t < window.endSecs(); t+=headway) {
      Trip trip=makeNewTrip(route,reverse);
      queue.trips.add(trip);
      int segStart=t;
      int firstStopTimeSeq=0;
      List<StopTime> stopTimes=new ArrayList<StopTime>();
      for (int i=0; i < protoRoutes.size(); i++) {
        int index=i;
        if (reverse)         index=protoRoutes.size() - 1 - i;
        ProtoRoute protoRoute=protoRoutes.get(index);
        List<StopTime> segStopTimes=createStopTimes(protoRoute.ret,prsStops,reverse,protoRoute.speed,trip,segStart,firstStopTimeSeq,protoRoute.length);
        stopTimes.addAll(segStopTimes);
        segStart+=protoRoute.getDuration();
        firstStopTimeSeq+=segStopTimes.size();
      }
      queue.stoptimes.addAll(stopTimes);
    }
  }
}",0.9919928825622776
36305,"private static void makeFrequencyTrip(ExtendedFeature exft,List<ProtoRoute> protoRoutes,Route route,Map<ProtoRouteStop,Stop> prsStops,boolean reverse,boolean usePeriods){
  Trip trip=makeNewTrip(route,reverse);
  queue.trips.add(trip);
  for (  ServiceWindow window : config.getServiceWindows()) {
    Double headway=getHeadway(exft,window.propName,usePeriods);
    if (headway == null) {
      continue;
    }
    headway/=config.waitFactor();
    Frequency freq=makeFreq(headway,window.startSecs(),window.endSecs(),trip);
    queue.frequencies.add(freq);
  }
  int segStart=0;
  int firstStopTimeSeq=0;
  List<StopTime> newStopTimes=new ArrayList<StopTime>();
  for (  ProtoRoute protoRoute : protoRoutes) {
    List<StopTime> segStopTimes=createStopTimes(protoRoute.ret,prsStops,reverse,protoRoute.speed,trip,segStart,firstStopTimeSeq);
    newStopTimes.addAll(segStopTimes);
    segStart+=protoRoute.getDuration();
    firstStopTimeSeq+=segStopTimes.size();
  }
  queue.stoptimes.addAll(newStopTimes);
}","private static void makeFrequencyTrip(ExtendedFeature exft,List<ProtoRoute> protoRoutes,Route route,Map<ProtoRouteStop,Stop> prsStops,boolean reverse,boolean usePeriods){
  Trip trip=makeNewTrip(route,reverse);
  queue.trips.add(trip);
  for (  ServiceWindow window : config.getServiceWindows()) {
    Double headway=getHeadway(exft,window.propName,usePeriods);
    if (headway == null) {
      continue;
    }
    headway/=config.waitFactor();
    Frequency freq=makeFreq(headway,window.startSecs(),window.endSecs(),trip);
    queue.frequencies.add(freq);
  }
  int segStart=0;
  int firstStopTimeSeq=0;
  List<StopTime> newStopTimes=new ArrayList<StopTime>();
  for (  ProtoRoute protoRoute : protoRoutes) {
    List<StopTime> segStopTimes=createStopTimes(protoRoute.ret,prsStops,reverse,protoRoute.speed,trip,segStart,firstStopTimeSeq,protoRoute.length);
    newStopTimes.addAll(segStopTimes);
    segStart+=protoRoute.getDuration();
    firstStopTimeSeq+=segStopTimes.size();
  }
  queue.stoptimes.addAll(newStopTimes);
}",0.9911417322834646
36306,"private static List<StopTime> createStopTimes(List<ProtoRouteStop> prss,Map<ProtoRouteStop,Stop> prsStops,boolean reverse,double speed,Trip trip,int tripStart,int firstStopTimeSequence){
  List<StopTime> newStopTimes=new ArrayList<StopTime>();
  double firstStopDist=0;
  for (int i=0; i < prss.size(); i++) {
    int ix=i;
    if (reverse) {
      ix=prss.size() - 1 - i;
    }
    ProtoRouteStop prs=prss.get(ix);
    if (i == 0) {
      firstStopDist=prs.dist;
    }
    Stop stop=prsStops.get(prs);
    StopTime stoptime=new StopTime();
    stoptime.setStop(stop);
    stoptime.setTrip(trip);
    stoptime.setStopSequence(i + firstStopTimeSequence);
    double dist=Math.abs(prs.dist - firstStopDist);
    int time=(int)(dist / speed) + tripStart;
    stoptime.setArrivalTime(time);
    stoptime.setDepartureTime(time);
    newStopTimes.add(stoptime);
  }
  return newStopTimes;
}","private static List<StopTime> createStopTimes(List<ProtoRouteStop> prss,Map<ProtoRouteStop,Stop> prsStops,boolean reverse,double speed,Trip trip,int tripStart,int firstStopTimeSequence,double segLen){
  List<StopTime> newStopTimes=new ArrayList<StopTime>();
  for (int i=0; i < prss.size(); i++) {
    int ix=i;
    if (reverse) {
      ix=prss.size() - 1 - i;
    }
    ProtoRouteStop prs=prss.get(ix);
    Stop stop=prsStops.get(prs);
    StopTime stoptime=new StopTime();
    stoptime.setStop(stop);
    stoptime.setTrip(trip);
    stoptime.setStopSequence(i + firstStopTimeSequence);
    double dist;
    if (reverse) {
      dist=segLen - prs.dist;
    }
 else {
      dist=prs.dist;
    }
    int time=(int)(dist / speed) + tripStart;
    stoptime.setArrivalTime(time);
    stoptime.setDepartureTime(time);
    newStopTimes.add(stoptime);
  }
  return newStopTimes;
}",0.2982356289129197
36307,"@Override public IChunkProvider createChunkGenerator(){
  return new GCVenusChunkProvider(this.worldObj,this.worldObj.getSeed(),this.worldObj.getWorldInfo().isMapFeaturesEnabled());
}","@Override public IChunkProvider createChunkGenerator(){
  return new GCMercuryChunkProvider(this.worldObj,this.worldObj.getSeed(),this.worldObj.getWorldInfo().isMapFeaturesEnabled());
}",0.9782608695652174
36308,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  new ConfigManager(new File(event.getModConfigurationDirectory(),""String_Node_Str""));
  MinecraftForge.EVENT_BUS.register(new GCVenusEvents());
  GCVenusItems.initItems();
  GCVenus.proxy.preInit(event);
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new GCVenusEvents());
  GCVenusItems.initItems();
  GCVenus.proxy.preInit(event);
}",0.8112798264642083
36309,"public void installUI(JComponent c){
  super.installUI(c);
  c.addAncestorListener(ancestorListener);
}","public void installUI(JComponent c){
  super.installUI(c);
  DockView v=(DockView)c;
  Container parent=c.getParent();
  if (parent instanceof TabbedDockableContainer) {
    installTabbedDockableBorder(v);
  }
 else   if (parent instanceof SplitContainer) {
    installSingleDockableBorder(v);
  }
 else {
    installMaximizedDockableBorder(v);
  }
  c.addAncestorListener(ancestorListener);
}",0.4153225806451613
36310,"/** 
 * Installs a border when the DockView target is a SingleDockableContainer  (not nested in a tabbed container ) <p> default is a shadowed border.
 */
protected void installSingleDockableBorder(DockView v){
  Border b=UIManager.getBorder(""String_Node_Str"");
  v.setBorder(b);
}","/** 
 * Installs a border when the DockView target is a SingleDockableContainer (not nested in a tabbed container ) <p> default is a shadowed border.
 */
protected void installSingleDockableBorder(DockView v){
  Border b=UIManager.getBorder(""String_Node_Str"");
  v.setBorder(b);
}",0.998217468805704
36311,"@Override @AfterWrite public void afterWrite(List items){
  currentItemCount.addAndGet(items.size());
  int percentageComplete=currentItemCount.intValue() * 100 / totalItemCount;
  sentUpdateIfNeeded(percentageComplete);
}","@AfterWrite public void afterWrite(List items){
  currentItemCount.addAndGet(items.size());
  int percentageComplete=currentItemCount.intValue() * 100 / totalItemCount;
  sentUpdateIfNeeded(percentageComplete);
}",0.976958525345622
36312,"@Override @AfterWrite public void afterWrite(List items){
  int itemsDone=items.size();
  JobProgressEvent jobProgressEvent=new JobProgressEvent(jobStartParams,stepName,itemsDone);
  clusterConfig.jobProgressEventsTopic().publish(jobProgressEvent);
}","@AfterWrite public void afterWrite(List items){
  int itemsDone=items.size();
  JobProgressEvent jobProgressEvent=new JobProgressEvent(jobStartParams,stepName,itemsDone);
  clusterConfig.jobProgressEventsTopic().publish(jobProgressEvent);
}",0.979591836734694
36313,"protected void startJobs(long year,long month){
  try {
    JobParameters jobParameters=new JobParametersBuilder().addLong(""String_Node_Str"",month).addLong(""String_Node_Str"",year).toJobParameters();
    System.out.println(""String_Node_Str"");
    jobLauncher.run(employeeJob,jobParameters);
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","protected void startJobs(long year,long month){
  try {
    JobParameters jobParameters=new JobParametersBuilder().addLong(""String_Node_Str"",month).addLong(""String_Node_Str"",year).toJobParameters();
    LOG.info(""String_Node_Str"");
    jobLauncher.run(employeeJob,jobParameters);
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.5010706638115632
36314,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody public void runJob(@PathVariable(""String_Node_Str"") Long year,@PathVariable(""String_Node_Str"") Long month){
  LOG.debug(""String_Node_Str"");
  Stopwatch stopwatch=Stopwatch.createStarted();
  jobService.runTaxCalculatorJob(new JobStartParams(year,month));
  stopwatch.stop();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + stopwatch.elapsed(TimeUnit.SECONDS));
  System.out.println(""String_Node_Str"");
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) @ResponseBody public void runJob(@PathVariable(""String_Node_Str"") Long year,@PathVariable(""String_Node_Str"") Long month){
  if (lock.tryLock()) {
    try {
      LOG.debug(""String_Node_Str"");
      Stopwatch stopwatch=Stopwatch.createStarted();
      jobService.runTaxCalculatorJob(new JobStartParams(year,month));
      stopwatch.stop();
      LOG.info(""String_Node_Str"");
      LOG.info(""String_Node_Str"" + stopwatch.elapsed(TimeUnit.SECONDS));
      LOG.info(""String_Node_Str"");
    }
  finally {
      lock.unlock();
    }
  }
 else {
    LOG.info(""String_Node_Str"");
  }
}",0.7246127366609294
36315,"public byte[] generatePdfAsByteArray(Resource resource,Map<String,Object> contextMap) throws IOException, XDocReportException {
  final IXDocReport report=XDocReportRegistry.getRegistry().loadReport(resource.getInputStream(),TemplateEngineKind.Freemarker);
  final IContext context=report.createContext();
  context.putMap(contextMap);
  final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  final Options options=Options.getTo(PDF).via(XWPF);
  report.convert(context,options,byteArrayOutputStream);
  return byteArrayOutputStream.toByteArray();
}","public synchronized byte[] generatePdfAsByteArray(Resource resource,Map<String,Object> contextMap) throws IOException, XDocReportException {
  final IXDocReport report=xDocReportRegistry.loadReport(resource.getInputStream(),TemplateEngineKind.Freemarker);
  final IContext context=report.createContext();
  context.putMap(contextMap);
  final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  final Options options=Options.getTo(PDF).via(XWPF);
  report.convert(context,options,byteArrayOutputStream);
  return byteArrayOutputStream.toByteArray();
}",0.9747606614447344
36316,"@Test @Ignore public void pdfGeneratorServiceIsThreadSafe() throws InterruptedException, ExecutionException {
  PDFGeneratorService pdfGeneratorService=new PDFGeneratorService();
  Set<Future<byte[]>> results=doPdfGenerationInMultipleThreads(5,pdfGeneratorService);
  getTheResultsWhichThrowsAnExceptionInMultipleThreads(results);
  assertThat(""String_Node_Str"").isNotEmpty();
}","@Test public void pdfGeneratorServiceIsThreadSafe() throws InterruptedException, ExecutionException {
  Set<Future<byte[]>> results=doPdfGenerationInMultipleThreads(10,pdfGeneratorService);
  getTheResultsWhichThrowsAnExceptionInMultipleThreads(results);
  assertThat(""String_Node_Str"").isNotEmpty();
}",0.8823529411764706
36317,"@Test public void given_aWordTemplate_whenConvertingToPdf_thenTheSamePdfIsGenerated() throws IOException, XDocReportException {
  PDFGeneratorService pdfGeneratorService=new PDFGeneratorService();
  Map<String,Object> context=new HashMap<>();
  context.put(""String_Node_Str"",""String_Node_Str"");
  byte[] actual=pdfGeneratorService.generatePdfAsByteArray(new ClassPathResource(""String_Node_Str""),context);
  assertThat(PDDocument.load(new ByteArrayInputStream(actual))).containsText(""String_Node_Str"");
}","@Test public void given_aWordTemplate_whenConvertingToPdf_thenTheSamePdfIsGenerated() throws IOException, XDocReportException {
  Map<String,Object> context=new HashMap<>();
  context.put(""String_Node_Str"",""String_Node_Str"");
  byte[] actual=pdfGeneratorService.generatePdfAsByteArray(new ClassPathResource(""String_Node_Str""),context);
  assertThat(PDDocument.load(new ByteArrayInputStream(actual))).containsText(""String_Node_Str"");
}",0.9263607257203842
36318,"@Before public void setUp() throws Exception {
  PDFGeneratorService pdfGeneratorService=new PDFGeneratorService();
  monthlyTaxReportService.setPdfGeneratorService(pdfGeneratorService);
  when(sumOfTaxes.getFailedSum(TEST_YEAR,TEST_MONTH)).thenReturn(FAILED_AMOUNT);
  when(sumOfTaxes.getSuccessSum(TEST_YEAR,TEST_MONTH)).thenReturn(SUCCESS_AMOUNT);
}","@Before public void setUp() throws Exception {
  PDFGeneratorService pdfGeneratorService=new PDFGeneratorService();
  pdfGeneratorService.initialize();
  monthlyTaxReportService.setPdfGeneratorService(pdfGeneratorService);
  when(sumOfTaxes.getFailedSum(TEST_YEAR,TEST_MONTH)).thenReturn(FAILED_AMOUNT);
  when(sumOfTaxes.getSuccessSum(TEST_YEAR,TEST_MONTH)).thenReturn(SUCCESS_AMOUNT);
}",0.9513513513513514
36319,"@Override public RepeatStatus execute(StepContribution stepContribution,ChunkContext chunkContext) throws IOException, XDocReportException {
  monthlyTaxReportService.generateReport(year,month,jobExecutionId);
  return FINISHED;
}","@Override public RepeatStatus execute(StepContribution stepContribution,ChunkContext chunkContext) throws IOException, XDocReportException {
  long jobExecutionId=chunkContext.getStepContext().getStepExecution().getJobExecutionId();
  monthlyTaxReportService.generateReport(year,month,jobExecutionId);
  return FINISHED;
}",0.8333333333333334
36320,"@Before public void setUp(){
  mockServer=MockRestServiceServer.createServer(restTemplate);
  SmtpServerStub.start();
  Map<String,JobParameter> jobParamsMap=new HashMap<>();
  jobParamsMap.put(""String_Node_Str"",new JobParameter(MONTH,false));
  jobParamsMap.put(""String_Node_Str"",new JobParameter(YEAR,false));
  jobParamsMap.put(""String_Node_Str"",new JobParameter(JOB_EXECUTION_ID,false));
  jobParams=new JobParameters(jobParamsMap);
  setInternalState(emailSender,""String_Node_Str"",0);
}","@Before public void setUp(){
  mockServer=MockRestServiceServer.createServer(restTemplate);
  SmtpServerStub.start();
  Map<String,JobParameter> jobParamsMap=new HashMap<>();
  jobParamsMap.put(""String_Node_Str"",new JobParameter(MONTH,false));
  jobParamsMap.put(""String_Node_Str"",new JobParameter(YEAR,false));
  jobParams=new JobParameters(jobParamsMap);
  setInternalState(emailSender,""String_Node_Str"",0);
}",0.7671840354767184
36321,"@Test public void testExecuteCallsService() throws Exception {
  Whitebox.setInternalState(jobResultsTasklet,""String_Node_Str"",2);
  Whitebox.setInternalState(jobResultsTasklet,""String_Node_Str"",2015);
  Whitebox.setInternalState(jobResultsTasklet,""String_Node_Str"",12345l);
  jobResultsTasklet.execute(stepContributionMock,chunkContextMock);
  verify(monthlyTaxReportServiceMock).generateReport(2015,2,12345l);
}","@Test public void testExecuteCallsService() throws Exception {
  Whitebox.setInternalState(jobResultsTasklet,""String_Node_Str"",2);
  Whitebox.setInternalState(jobResultsTasklet,""String_Node_Str"",2015);
  jobResultsTasklet.execute(stepContributionMock,chunkContextMock);
  verify(monthlyTaxReportServiceMock).generateReport(2015,2,JOB_EXECUTION_ID);
}",0.8754914809960681
36322,"private String getWebserviceResult(Employee employee){
  ResponseEntity<TaxServiceResponse> stringResponseEntity=restTemplate.postForEntity(getUri(),createWebserviceInput(employee),TaxServiceResponse.class);
  return stringResponseEntity.getBody().status;
}","private String getWebserviceResult(Employee employee){
  ResponseEntity<TaxServiceResponse> stringResponseEntity=restTemplate.postForEntity(getUri(),createWebserviceInput(employee),TaxServiceResponse.class);
  return stringResponseEntity.getBody().getStatus();
}",0.9672447013487476
36323,"@Test public void givenBlacklistEmployee_whenSubmitTaxForm_thenResponseFails() throws JsonProcessingException {
  when(specialEmployeesServiceMock.isEmployeeBlacklisted(employeeId)).thenReturn(true);
  ResponseEntity<TaxServiceResponse> response=taxController.submitTaxForm(taxTo);
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
  assertThat(response.getBody().status).isEqualTo(TaxController.RESPONSE_BODY_FAIL);
}","@Test public void givenBlacklistEmployee_whenSubmitTaxForm_thenResponseFails() throws JsonProcessingException {
  when(specialEmployeesServiceMock.isEmployeeBlacklisted(employeeId)).thenReturn(true);
  ResponseEntity<TaxServiceResponse> response=taxController.submitTaxForm(taxTo);
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
  assertThat(response.getBody().getStatus()).isEqualTo(TaxController.RESPONSE_BODY_FAIL);
}",0.9812981298129811
36324,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof TaxServiceResponse))   return false;
  TaxServiceResponse that=(TaxServiceResponse)o;
  if (status != null ? !status.equals(that.status) : that.status != null)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof TaxServiceResponse)) {
    return false;
  }
  TaxServiceResponse that=(TaxServiceResponse)o;
  if (status != null ? !status.equals(that.status) : that.status != null) {
    return false;
  }
  return true;
}",0.76
36325,"public Email mapFromEmailTO(EmailTO emailTO) throws EmailException, AddressException, IOException {
  HtmlEmail email=new HtmlEmail();
  email.setFrom(emailTO.getFrom());
  email.setTo(convertToInternetAddress(emailTO.getTos()));
  email.setSubject(emailTO.getSubject());
  email.setMsg(emailTO.getBody());
  email.setHtmlMsg(emailTO.getBody());
  attachEmailAttachmentTOs(email,emailTO.getAttachments());
  return email;
}","public Email mapFromEmailTO(EmailTO emailTO) throws EmailException, AddressException, IOException {
  HtmlEmail email=new HtmlEmail();
  email.setFrom(emailTO.getFrom());
  email.setTo(convertToInternetAddress(emailTO.getTos()));
  email.setSubject(emailTO.getSubject());
  email.setHtmlMsg(emailTO.getBody());
  attachEmailAttachmentTOs(email,emailTO.getAttachments());
  return email;
}",0.9469790382244144
36326,"public String getEmailBodyForEmployee(Employee employee){
  String ENDL=System.getProperty(""String_Node_Str"");
  StringBuilder sb=new StringBuilder().append(""String_Node_Str"").append(ENDL).append(""String_Node_Str"" + getLongMonthName(employee.getCalculationDate()) + ""String_Node_Str""+ employee.getCalculationDate().getYear()+ ""String_Node_Str"").append(ENDL).append(""String_Node_Str"").append(ENDL).append(""String_Node_Str"");
  return sb.toString();
}","public String getEmailBodyForEmployee(Employee employee){
  String ENDL=""String_Node_Str"";
  StringBuilder sb=new StringBuilder().append(""String_Node_Str"").append(ENDL).append(""String_Node_Str"" + getLongMonthName(employee.getCalculationDate()) + ""String_Node_Str""+ employee.getCalculationDate().getYear()+ ""String_Node_Str"").append(ENDL).append(""String_Node_Str"").append(ENDL).append(""String_Node_Str"");
  return sb.toString();
}",0.938496583143508
36327,"public void send(EmailTO emailTO){
  try {
    if (isNotBlank(smtpServer)) {
      Email email=new EmailMapper().mapFromEmailTO(emailTO);
      email.setSSLOnConnect(smtpUseSsl);
      email.setSmtpPort(smtpPort);
      email.setHostName(smtpServer);
      if (isNoneBlank(smtpUserName,smtpPassword)) {
        email.setAuthenticator(new DefaultAuthenticator(smtpUserName,smtpPassword));
      }
      email.send();
    }
  }
 catch (  IllegalArgumentException e) {
    logger.error(""String_Node_Str"",e);
    throw e;
  }
catch (  EmailException|AddressException|IOException e) {
    logger.error(""String_Node_Str"",e);
    throw new IllegalStateException(e);
  }
}","public void send(EmailTO emailTO){
  try {
    if (isNotBlank(smtpServer)) {
      Email email=new EmailMapper().mapFromEmailTO(emailTO);
      email.setSSLOnConnect(smtpUseSsl);
      email.setSmtpPort(smtpPort);
      email.setHostName(smtpServer);
      if (isNoneBlank(smtpUserName,smtpPassword)) {
        email.setAuthenticator(new DefaultAuthenticator(smtpUserName,smtpPassword));
      }
      email.send();
    }
  }
 catch (  IllegalArgumentException e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
catch (  EmailException|AddressException|IOException e) {
    LOG.error(""String_Node_Str"",e);
    throw new IllegalStateException(e);
  }
}",0.9863842662632376
36328,"@Override public Employee process(Employee item){
  System.out.println(""String_Node_Str"" + item);
  taxCalculatorService.calculateTax(item);
  return item;
}","@Override public Employee process(Employee item){
  LOG.info(""String_Node_Str"" + item);
  taxCalculatorService.calculateTax(item);
  return item;
}",0.9342105263157896
36329,"@Override public Employee process(Employee employee) throws Exception {
  System.out.println(""String_Node_Str"" + employee);
  return createRetryTemplate().execute(retryContext -> taxPaymentWebService.doWebserviceCallToTaxService(employee));
}","@Override public Employee process(Employee employee) throws Exception {
  LOG.info(""String_Node_Str"" + employee);
  return createRetryTemplate().execute(retryContext -> taxPaymentWebService.doWebserviceCallToTaxService(employee));
}",0.9493670886075948
36330,"protected void startJobs(){
  try {
    JobParameters jobParameters=getNewJobParameters();
    System.out.println(""String_Node_Str"");
    jobLauncher.run(employeeJob,jobParameters);
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    e.printStackTrace();
  }
}","protected void startJobs(){
  try {
    JobParameters jobParameters=getNewJobParameters();
    System.out.println(""String_Node_Str"");
    jobLauncher.run(employeeJob,jobParameters);
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.9372384937238494
36331,"@RequestMapping(method=RequestMethod.POST) @ResponseBody public void runJob(){
  System.out.println(""String_Node_Str"");
  jobService.runTaxCalculatorJob();
}","@RequestMapping(method=RequestMethod.POST) @ResponseBody public void runJob(){
  LOG.debug(""String_Node_Str"");
  jobService.runTaxCalculatorJob();
}",0.9245901639344264
36332,"@Override public void runTaxCalculatorJob(){
  try {
    JobParameters jobParameters=new JobParameters();
    JobExecution run=jobLauncher.run(employeeJob,jobParameters);
    List<Throwable> allFailureExceptions=run.getAllFailureExceptions();
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    e.printStackTrace();
  }
 finally {
  }
}","@Override public void runTaxCalculatorJob(){
  try {
    JobParameters jobParameters=new JobParameters();
    jobLauncher.run(employeeJob,jobParameters);
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    e.printStackTrace();
  }
 finally {
  }
}",0.8842652795838751
36333,"@Override public void runTaxCalculatorJob(){
  try {
    JobParameters jobParameters=new JobParameters();
    JobExecution run=jobLauncher.run(employeeJob,jobParameters);
    List<Throwable> allFailureExceptions=run.getAllFailureExceptions();
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    e.printStackTrace();
  }
 finally {
  }
}","@Override public void runTaxCalculatorJob(){
  try {
    JobParameters jobParameters=new JobParameters();
    jobLauncher.run(employeeJob,jobParameters);
  }
 catch (  JobExecutionAlreadyRunningException|JobRestartException|JobInstanceAlreadyCompleteException|JobParametersInvalidException e) {
    e.printStackTrace();
  }
 finally {
  }
}",0.8842652795838751
36334,"public void setAttendance(int attendance,CourseViewHolder courseViewHolder){
  ObjectAnimator animation=ObjectAnimator.ofInt(courseViewHolder.numberProgressBar,""String_Node_Str"",attendance);
  animation.setDuration(1500);
  animation.setInterpolator(new DecelerateInterpolator());
  animation.start();
  if (attendance >= 80) {
    courseViewHolder.numberProgressBar.setReachedBarColor(ContextCompat.getColor(this.context,R.color.text_secondary));
    courseViewHolder.numberProgressBar.setProgressTextColor(ContextCompat.getColor(this.context,R.color.text_secondary));
  }
 else   if (attendance < 75) {
    courseViewHolder.numberProgressBar.setReachedBarColor(ContextCompat.getColor(this.context,android.R.color.holo_red_light));
    courseViewHolder.numberProgressBar.setProgressTextColor(ContextCompat.getColor(this.context,android.R.color.holo_red_light));
  }
 else {
    courseViewHolder.numberProgressBar.setReachedBarColor(ContextCompat.getColor(this.context,R.color.midAttend));
    courseViewHolder.numberProgressBar.setProgressTextColor(ContextCompat.getColor(this.context,R.color.midAttend));
  }
}","public void setAttendance(CourseViewHolder courseViewHolder,int attendance){
  ObjectAnimator animation=ObjectAnimator.ofInt(courseViewHolder.numberProgressBar,""String_Node_Str"",attendance);
  animation.setDuration(1500);
  animation.setInterpolator(new DecelerateInterpolator());
  animation.start();
  if (attendance >= 80) {
    courseViewHolder.numberProgressBar.setReachedBarColor(ContextCompat.getColor(this.context,R.color.text_secondary));
    courseViewHolder.numberProgressBar.setProgressTextColor(ContextCompat.getColor(this.context,R.color.text_secondary));
  }
 else   if (attendance < 75) {
    courseViewHolder.numberProgressBar.setReachedBarColor(ContextCompat.getColor(this.context,android.R.color.holo_red_light));
    courseViewHolder.numberProgressBar.setProgressTextColor(ContextCompat.getColor(this.context,android.R.color.holo_red_light));
  }
 else {
    courseViewHolder.numberProgressBar.setReachedBarColor(ContextCompat.getColor(this.context,R.color.midAttend));
    courseViewHolder.numberProgressBar.setProgressTextColor(ContextCompat.getColor(this.context,R.color.midAttend));
  }
}",0.9865107913669064
36335,"@Override public void onBindViewHolder(CourseViewHolder courseViewHolder,int position){
  courseViewHolder.courseCode.setText(courses.get(position).getCourseCode());
  courseViewHolder.courseName.setText(courses.get(position).getCourseTitle());
  courseViewHolder.faculty.setText(courses.get(position).getFaculty());
  int attendance=courses.get(position).getAttendance().getAttendancePercentage();
  courseViewHolder.numberProgressBar.setProgressTextColor(ContextCompat.getColor(this.context,R.color.text_secondary));
  courseViewHolder.numberProgressBar.setReachedBarColor(ContextCompat.getColor(this.context,R.color.text_secondary));
  courseViewHolder.numberProgressBar.setMax(100);
  courseViewHolder.numberProgressBar.setProgress(0);
  setAttendance(attendance,courseViewHolder);
}","@Override public void onBindViewHolder(CourseViewHolder courseViewHolder,int position){
  courseViewHolder.courseCode.setText(courses.get(position).getCourseCode());
  courseViewHolder.courseName.setText(courses.get(position).getCourseTitle());
  courseViewHolder.faculty.setText(courses.get(position).getFaculty());
  int attendance;
  if (courses.get(position) != null) {
    attendance=courses.get(position).getAttendance().getAttendancePercentage();
    setAttendance(courseViewHolder,attendance);
  }
  courseViewHolder.numberProgressBar.setProgressTextColor(ContextCompat.getColor(this.context,R.color.text_secondary));
  courseViewHolder.numberProgressBar.setReachedBarColor(ContextCompat.getColor(this.context,R.color.text_secondary));
  courseViewHolder.numberProgressBar.setMax(100);
  courseViewHolder.numberProgressBar.setProgress(0);
}",0.906422018348624
36336,"/** 
 * Animates the view by scaling it from MATCH_PARENT to WRAP_CONTENT.
 * @param view - View to be collapsed
 */
private void collapseView(final View view){
  Rect rect=new Rect();
  view.getGlobalVisibleRect(rect);
  final int initialHeight=rect.bottom - rect.top;
  view.measure(View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);
  final int targetHeight=view.getMeasuredHeight();
  Animation animation=new Animation(){
    @Override protected void applyTransformation(    float interpolatedTime,    Transformation t){
      if (interpolatedTime == 1) {
        view.getLayoutParams().height=targetHeight;
      }
 else {
        view.getLayoutParams().height=targetHeight + (int)((initialHeight - targetHeight) * (1 - interpolatedTime));
        view.requestLayout();
      }
    }
    @Override public boolean willChangeBounds(){
      return true;
    }
  }
;
  animation.setDuration((int)((initialHeight - targetHeight) / view.getContext().getResources().getDisplayMetrics().density));
  view.startAnimation(animation);
}","/** 
 * Animates the view by scaling it from MATCH_PARENT to WRAP_CONTENT.
 * @param view - View to be collapsed
 */
private void collapseView(final View view){
  Rect rect=new Rect();
  view.getGlobalVisibleRect(rect);
  final int initialHeight=rect.bottom - rect.top;
  view.measure(View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);
  final int targetHeight=view.getMeasuredHeight();
  Animation animation=new Animation(){
    @Override protected void applyTransformation(    float interpolatedTime,    Transformation t){
      if (interpolatedTime == 1) {
        view.getLayoutParams().height=targetHeight;
      }
 else {
        view.getLayoutParams().height=targetHeight + (int)((initialHeight - targetHeight) * (1 - interpolatedTime));
        view.requestLayout();
      }
    }
    @Override public boolean willChangeBounds(){
      return true;
    }
  }
;
  int difference=initialHeight - targetHeight;
  if (difference < 0) {
    difference=0;
  }
  animation.setDuration((int)(difference / view.getContext().getResources().getDisplayMetrics().density));
  view.startAnimation(animation);
}",0.9382257315373896
36337,"private void initializeView(){
  navigationTabs=Arrays.asList(getResources().getStringArray(R.array.navigation_tab));
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mainContent=(LinearLayout)findViewById(R.id.llMainContent);
  headerRegistrationNumber=(TextView)drawerLayout.findViewById(R.id.header_registration_number);
  headerUsername=(TextView)drawerLayout.findViewById(R.id.header_username);
  final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
    drawerLayout.setDrawerListener(mDrawerToggle);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
    mDrawerToggle.syncState();
  }
  NavigationView view=(NavigationView)findViewById(R.id.navigation_view);
  view.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    final MenuItem menuItem){
      menuItem.setChecked(true);
      drawerLayout.closeDrawers();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          switchFragment(menuItem.getItemId());
        }
      }
,Constants.DRAWER_CLOSE_TIME_OUT);
      return true;
    }
  }
);
  getSupportFragmentManager().beginTransaction().add(R.id.flContent,new ScheduleFragment(),ScheduleFragment.class.getSimpleName()).commitAllowingStateLoss();
}","private void initializeView(){
  navigationTabs=Arrays.asList(getResources().getStringArray(R.array.navigation_tab));
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mainContent=(LinearLayout)findViewById(R.id.llMainContent);
  final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
    drawerLayout.setDrawerListener(mDrawerToggle);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
    mDrawerToggle.syncState();
  }
  NavigationView navigationView=(NavigationView)findViewById(R.id.navigation_view);
  navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    final MenuItem menuItem){
      menuItem.setChecked(true);
      drawerLayout.closeDrawers();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          switchFragment(menuItem.getItemId());
        }
      }
,Constants.DRAWER_CLOSE_TIME_OUT);
      return true;
    }
  }
);
  View headerLayout=navigationView.getHeaderView(0);
  headerRegistrationNumber=(TextView)headerLayout.findViewById(R.id.header_registration_number);
  headerUsername=(TextView)headerLayout.findViewById(R.id.header_username);
  if (StringUtils.checkString(registerNumber)) {
    headerRegistrationNumber.setText(registerNumber);
  }
  if (StringUtils.checkString(name)) {
    headerUsername.setText(StringUtils.toTitleCase(name));
  }
  getSupportFragmentManager().beginTransaction().add(R.id.flContent,new ScheduleFragment(),ScheduleFragment.class.getSimpleName()).commitAllowingStateLoss();
}",0.8216922203293583
36338,"private void initializeView(){
  navigationTabs=Arrays.asList(getResources().getStringArray(R.array.navigation_tab));
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mainContent=(LinearLayout)findViewById(R.id.llMainContent);
  headerCampus=(TextView)drawerLayout.findViewById(R.id.header_campus);
  headerUsername=(TextView)drawerLayout.findViewById(R.id.header_username);
  final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
    drawerLayout.setDrawerListener(mDrawerToggle);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
    mDrawerToggle.syncState();
  }
  headerUsername.setText(registerNumber);
  headerCampus.setText(Data.toTitleCase(campus));
  NavigationView view=(NavigationView)findViewById(R.id.navigation_view);
  view.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    final MenuItem menuItem){
      menuItem.setChecked(true);
      drawerLayout.closeDrawers();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          switchFragment(menuItem.getItemId());
        }
      }
,Constants.DRAWER_CLOSE_TIME_OUT);
      return true;
    }
  }
);
  getSupportFragmentManager().beginTransaction().add(R.id.flContent,new ScheduleFragment(),ScheduleFragment.class.getSimpleName()).commitAllowingStateLoss();
}","private void initializeView(){
  navigationTabs=Arrays.asList(getResources().getStringArray(R.array.navigation_tab));
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mainContent=(LinearLayout)findViewById(R.id.llMainContent);
  headerCampus=(CustomTextView)drawerLayout.findViewById(R.id.header_campus);
  headerUsername=(CustomTextView)drawerLayout.findViewById(R.id.header_username);
  final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
    drawerLayout.setDrawerListener(mDrawerToggle);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
    mDrawerToggle.syncState();
  }
  if (registerNumber != null) {
    headerUsername.setText(registerNumber);
  }
  if (campus != null && !campus.isEmpty()) {
    headerCampus.setText(Data.toTitleCase(campus));
  }
  NavigationView view=(NavigationView)findViewById(R.id.navigation_view);
  view.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    final MenuItem menuItem){
      menuItem.setChecked(true);
      drawerLayout.closeDrawers();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          switchFragment(menuItem.getItemId());
        }
      }
,Constants.DRAWER_CLOSE_TIME_OUT);
      return true;
    }
  }
);
  getSupportFragmentManager().beginTransaction().add(R.id.flContent,new ScheduleFragment(),ScheduleFragment.class.getSimpleName()).commitAllowingStateLoss();
}",0.9709352517985612
36339,"private void initializeView(){
  navigationTabs=Arrays.asList(getResources().getStringArray(R.array.navigation_tab));
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mainContent=(LinearLayout)findViewById(R.id.llMainContent);
  headerCampus=(TextView)drawerLayout.findViewById(R.id.header_campus);
  headerUsername=(TextView)drawerLayout.findViewById(R.id.header_username);
  final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
    drawerLayout.setDrawerListener(mDrawerToggle);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
    mDrawerToggle.syncState();
  }
  headerUsername.setText(registerNumber);
  headerCampus.setText(toTitleCase(campus));
  NavigationView view=(NavigationView)findViewById(R.id.navigation_view);
  view.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    final MenuItem menuItem){
      menuItem.setChecked(true);
      drawerLayout.closeDrawers();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          switchFragment(menuItem.getItemId());
        }
      }
,Constants.DRAWER_CLOSE_TIME_OUT);
      return true;
    }
  }
);
  getSupportFragmentManager().beginTransaction().add(R.id.flContent,new TodayFragment(),TodayFragment.class.getSimpleName()).commitAllowingStateLoss();
}","private void initializeView(){
  navigationTabs=Arrays.asList(getResources().getStringArray(R.array.navigation_tab));
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mainContent=(LinearLayout)findViewById(R.id.llMainContent);
  headerCampus=(TextView)drawerLayout.findViewById(R.id.header_campus);
  headerUsername=(TextView)drawerLayout.findViewById(R.id.header_username);
  final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
    drawerLayout.setDrawerListener(mDrawerToggle);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
    mDrawerToggle.syncState();
  }
  headerUsername.setText(registerNumber);
  headerCampus.setText(toTitleCase(campus));
  NavigationView view=(NavigationView)findViewById(R.id.navigation_view);
  view.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    final MenuItem menuItem){
      menuItem.setChecked(true);
      drawerLayout.closeDrawers();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          switchFragment(menuItem.getItemId());
        }
      }
,Constants.DRAWER_CLOSE_TIME_OUT);
      return true;
    }
  }
);
  fragmentPreference=""String_Node_Str"";
  try {
    Class pref=Class.forName(fragmentPreference);
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  getSupportFragmentManager().beginTransaction().add(R.id.flContent,new TodayFragment(),TodayFragment.class.getSimpleName()).commitAllowingStateLoss();
}",0.952002272081795
36340,"@Override protected List<Pair<Course,Timing>> doInBackground(Void... params){
  List<Pair<Course,Timing>> finalArray=new ArrayList<>();
  for (  Course course : courses) {
    Timing lastTiming=new Timing();
    if (course.getTimings() != null) {
      for (      Timing timing : course.getTimings()) {
        if (timing.getDay() == dayOfWeek && !(timing.equals(lastTiming))) {
          finalArray.add(new Pair<>(course,timing));
          lastTiming=timing;
        }
      }
    }
  }
  Collections.sort(finalArray,new Comparator<Pair<Course,Timing>>(){
    @Override public int compare(    Pair<Course,Timing> lhs,    Pair<Course,Timing> rhs){
      String lhsStartTime=""String_Node_Str"";
      String rhsStartTime=""String_Node_Str"";
      for (      Timing timing : lhs.first.getTimings()) {
        if (timing.getDay() == dayOfWeek) {
          lhsStartTime=timing.getStartTime();
        }
      }
      for (      Timing timing : rhs.first.getTimings()) {
        if (timing.getDay() == dayOfWeek) {
          rhsStartTime=timing.getStartTime();
        }
      }
      try {
        return DateTimeCalender.compareTimes(lhsStartTime,rhsStartTime);
      }
 catch (      ParseException ex) {
        ex.printStackTrace();
        return 0;
      }
    }
  }
);
  return finalArray;
}","@Override protected List<Pair<Course,Timing>> doInBackground(Void... params){
  List<Pair<Course,Timing>> finalArray=new ArrayList<>();
  if (courses == null || courses.size() == 0) {
    courses=((MainApplication)getActivity().getApplication()).getDataHolderInstanceInitialized().getCourses();
  }
 else {
    for (    Course course : courses) {
      Timing lastTiming=new Timing();
      if (course.getTimings() != null) {
        for (        Timing timing : course.getTimings()) {
          if (timing.getDay() == dayOfWeek && !(timing.equals(lastTiming))) {
            finalArray.add(new Pair<>(course,timing));
            lastTiming=timing;
          }
        }
      }
    }
    Collections.sort(finalArray,new Comparator<Pair<Course,Timing>>(){
      @Override public int compare(      Pair<Course,Timing> lhs,      Pair<Course,Timing> rhs){
        String lhsStartTime=""String_Node_Str"";
        String rhsStartTime=""String_Node_Str"";
        for (        Timing timing : lhs.first.getTimings()) {
          if (timing.getDay() == dayOfWeek) {
            lhsStartTime=timing.getStartTime();
          }
        }
        for (        Timing timing : rhs.first.getTimings()) {
          if (timing.getDay() == dayOfWeek) {
            rhsStartTime=timing.getStartTime();
          }
        }
        try {
          return DateTimeCalender.compareTimes(lhsStartTime,rhsStartTime);
        }
 catch (        ParseException ex) {
          ex.printStackTrace();
          return 0;
        }
      }
    }
);
  }
  return finalArray;
}",0.8946812257837267
36341,"public void saveCourses(final RefreshResponse refreshResponse,final ResultListener resultListener){
  new AsyncTask<Boolean,Void,Boolean>(){
    @Override protected Boolean doInBackground(    Boolean... params){
      try {
        RushCore.getInstance().deleteAll(Course.class);
        RushCore.getInstance().deleteAll(WithdrawnCourse.class);
        for (        Course course : refreshResponse.getCourses()) {
          course.save();
        }
        for (        WithdrawnCourse withdrawnCourse : refreshResponse.getWithdrawnCourses()) {
          withdrawnCourse.save();
        }
        return true;
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
    }
    @Override protected void onPostExecute(    Boolean result){
      if (result) {
        Editor editor=sharedPreferences.edit();
        editor.putString(Constants.KEY_SEMESTER,refreshResponse.getSemester());
        editor.putString(Constants.KEY_COURSES_REFRESHED,refreshResponse.getRefreshed());
        editor.apply();
        resultListener.onSuccess();
      }
 else {
        resultListener.onFailure(new com.karthikb351.vitinfo2.model.Status(StatusCodes.UNKNOWN,context.getResources().getString(R.string.api_unknown_error)));
      }
    }
  }
.execute(true);
}","public void saveCourses(final RefreshResponse refreshResponse,final ResultListener resultListener){
  new AsyncTask<Boolean,Void,Boolean>(){
    @Override protected Boolean doInBackground(    Boolean... params){
      try {
        RushCore.getInstance().deleteAll(Course.class);
        RushCore.getInstance().deleteAll(WithdrawnCourse.class);
        for (        Course course : refreshResponse.getCourses()) {
          course.save();
        }
        for (        WithdrawnCourse withdrawnCourse : refreshResponse.getWithdrawnCourses()) {
          withdrawnCourse.save();
        }
        return true;
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
    }
    @Override protected void onPostExecute(    Boolean result){
      if (result) {
        Editor editor=sharedPreferences.edit();
        editor.putString(Constants.KEY_CAMPUS,refreshResponse.getCampus());
        editor.putString(Constants.KEY_REGISTERNUMBER,refreshResponse.getRegisterNumber());
        editor.putString(Constants.KEY_DATEOFBIRTH,refreshResponse.getDateOfBirth());
        editor.putString(Constants.KEY_MOBILE,refreshResponse.getMobileNumber());
        editor.apply();
        editor.putString(Constants.KEY_SEMESTER,refreshResponse.getSemester());
        editor.putString(Constants.KEY_COURSES_REFRESHED,refreshResponse.getRefreshed());
        editor.apply();
        resultListener.onSuccess();
      }
 else {
        resultListener.onFailure(new com.karthikb351.vitinfo2.model.Status(StatusCodes.UNKNOWN,context.getResources().getString(R.string.api_unknown_error)));
      }
    }
  }
.execute(true);
}",0.8770491803278688
36342,"public void initialize(){
  courses=((MainApplication)getApplication()).getDataHolderInstance().getCourses();
  campus=((MainApplication)getApplication()).getDataHolderInstance().getCampus();
  registerNumber=((MainApplication)getApplication()).getDataHolderInstance().getRegisterNumber();
  navigationTabs=Arrays.asList(getResources().getStringArray(R.array.navigation_tab));
  headerCampus=(TextView)drawerLayout.findViewById(R.id.header_campus);
  headerUsername=(TextView)drawerLayout.findViewById(R.id.header_username);
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mainContent=(LinearLayout)findViewById(R.id.llMainContent);
  final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
    drawerLayout.setDrawerListener(mDrawerToggle);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
    mDrawerToggle.syncState();
  }
  headerUsername.setText(registerNumber);
  headerCampus.setText(toTitleCase(campus));
  NavigationView view=(NavigationView)findViewById(R.id.navigation_view);
  view.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    MenuItem menuItem){
      Fragment fragment=null;
      int position=0;
      String navString=(String)menuItem.getTitle();
      menuItem.setChecked(true);
      FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
switch (navString) {
case ""String_Node_Str"":
        fragment=TodayFragment.newInstance();
      position=0;
    break;
case ""String_Node_Str"":
  fragment=CoursesFragment.newInstance();
position=1;
break;
case ""String_Node_Str"":
fragment=TimetableFragment.newInstance();
position=2;
break;
case ""String_Node_Str"":
fragment=GradesFragment.newInstance();
position=3;
break;
case ""String_Node_Str"":
fragment=SettingsFragment.newInstance();
position=4;
break;
case ""String_Node_Str"":
fragment=MessagesFragment.newInstance();
position=5;
break;
case ""String_Node_Str"":
fragment=AboutFragment.newInstance();
position=6;
break;
}
fragmentTransaction.replace(R.id.flContent,fragment,navigationTabs.get(position)).addToBackStack(null).commit();
drawerLayout.closeDrawers();
return true;
}
}
);
getSupportFragmentManager().beginTransaction().add(R.id.flContent,new TodayFragment(),TodayFragment.class.getSimpleName()).commit();
}","public void initialize(){
  courses=((MainApplication)getApplication()).getDataHolderInstance().getCourses();
  campus=((MainApplication)getApplication()).getDataHolderInstance().getCampus();
  registerNumber=((MainApplication)getApplication()).getDataHolderInstance().getRegisterNumber();
  navigationTabs=Arrays.asList(getResources().getStringArray(R.array.navigation_tab));
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mainContent=(LinearLayout)findViewById(R.id.llMainContent);
  headerCampus=(TextView)drawerLayout.findViewById(R.id.header_campus);
  headerUsername=(TextView)drawerLayout.findViewById(R.id.header_username);
  final Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
    drawerLayout.setDrawerListener(mDrawerToggle);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
    mDrawerToggle.syncState();
  }
  headerUsername.setText(registerNumber);
  headerCampus.setText(toTitleCase(campus));
  NavigationView view=(NavigationView)findViewById(R.id.navigation_view);
  view.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    MenuItem menuItem){
      Fragment fragment=null;
      int position=0;
      String navString=(String)menuItem.getTitle();
      menuItem.setChecked(true);
      FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
switch (navString) {
case ""String_Node_Str"":
        fragment=TodayFragment.newInstance();
      position=0;
    break;
case ""String_Node_Str"":
  fragment=CoursesFragment.newInstance();
position=1;
break;
case ""String_Node_Str"":
fragment=TimetableFragment.newInstance();
position=2;
break;
case ""String_Node_Str"":
fragment=GradesFragment.newInstance();
position=3;
break;
case ""String_Node_Str"":
fragment=SettingsFragment.newInstance();
position=4;
break;
case ""String_Node_Str"":
fragment=MessagesFragment.newInstance();
position=5;
break;
case ""String_Node_Str"":
fragment=AboutFragment.newInstance();
position=6;
break;
}
fragmentTransaction.replace(R.id.flContent,fragment,navigationTabs.get(position)).addToBackStack(null).commit();
drawerLayout.closeDrawers();
return true;
}
}
);
getSupportFragmentManager().beginTransaction().add(R.id.flContent,new TodayFragment(),TodayFragment.class.getSimpleName()).commit();
}",0.943560606060606
36343,"@Override public int getItemViewType(int position){
  if (position == 0)   layoutId=R.layout.card_marks;
 else   layoutId=R.layout.card_assessment;
  return layoutId;
}","@Override public int getItemViewType(int position){
  if (position == 0)   layoutId=R.layout.card_total_internals;
 else   layoutId=R.layout.card_assessment;
  return layoutId;
}",0.9595375722543352
36344,"public ContributorViewHolder(View view){
  super(view);
}","public ContributorViewHolder(View view){
  super(view);
  contributorName=(TextView)view.findViewById(R.id.contributor_name);
  contributorRole=(TextView)view.findViewById(R.id.contributor_role);
  contributorGit=(TextView)view.findViewById(R.id.contributor_github_profile);
  contributorMail=(TextView)view.findViewById(R.id.contributor_email);
}",0.2821782178217821
36345,"@Override public void onBindViewHolder(ContributorViewHolder holder,int position){
}","@Override public void onBindViewHolder(ContributorViewHolder holder,int position){
  holder.contributorMail.setText(contributors.get(position).getEmail());
  holder.contributorGit.setText(contributors.get(position).getGithubProfile());
  holder.contributorRole.setText(contributors.get(position).getRole());
  holder.contributorName.setText(contributors.get(position).getName());
  holder.contributorId.setText(contributors.get(position).getContributorId());
}",0.3088235294117647
36346,"void initializeLayouts(){
  dl=(DrawerLayout)findViewById(R.id.drawer_layout);
  lv=(ListView)findViewById(R.id.lvDrawer);
  topics=getResources().getStringArray(R.array.title_section);
  ArrayList<String> stringList=new ArrayList<String>(Arrays.asList(topics));
  lv.setAdapter(new NavigationDrawerAdapter(this,R.layout.drawer_menu_item,stringList));
  lv.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      android.support.v4.app.FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
      android.support.v4.app.Fragment frag=null;
switch (position) {
case 0:
        frag=TimeTableFragment.newInstance();
      break;
case 1:
    frag=CoursesFragment.newInstance();
  break;
case 2:
frag=FriendsFragment.newInstance();
break;
case 3:
frag=SettingsFragment.newInstance();
break;
}
ft.replace(R.id.flContent,frag,topics[position]).addToBackStack(null).commit();
}
}
);
getSupportFragmentManager().beginTransaction().add(R.id.flContent,new MainFragment(),""String_Node_Str"").commit();
}","void initializeLayouts(){
  dl=(DrawerLayout)findViewById(R.id.drawer_layout);
  lv=(ListView)findViewById(R.id.lvDrawer);
  topics=getResources().getStringArray(R.array.topic);
  ArrayList<String> stringList=new ArrayList<String>(Arrays.asList(topics));
  lv.setAdapter(new NavigationDrawerAdapter(this,R.layout.drawer_menu_item,stringList));
  lv.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      android.support.v4.app.FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
      android.support.v4.app.Fragment frag=null;
switch (position) {
case 0:
        frag=MainFragment.newInstance();
      break;
case 1:
    frag=CoursesFragment.newInstance();
  break;
case 2:
frag=TimeTableFragment.newInstance();
break;
case 3:
frag=FriendsFragment.newInstance();
break;
case 4:
frag=SettingsFragment.newInstance();
break;
}
ft.replace(R.id.flContent,frag,topics[position]).addToBackStack(null).commit();
}
}
);
getSupportFragmentManager().beginTransaction().add(R.id.flContent,new MainFragment(),""String_Node_Str"").commit();
}",0.9590592334494772
36347,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  android.support.v4.app.FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  android.support.v4.app.Fragment frag=null;
switch (position) {
case 0:
    frag=TimeTableFragment.newInstance();
  break;
case 1:
frag=CoursesFragment.newInstance();
break;
case 2:
frag=FriendsFragment.newInstance();
break;
case 3:
frag=SettingsFragment.newInstance();
break;
}
ft.replace(R.id.flContent,frag,topics[position]).addToBackStack(null).commit();
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  android.support.v4.app.FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  android.support.v4.app.Fragment frag=null;
switch (position) {
case 0:
    frag=MainFragment.newInstance();
  break;
case 1:
frag=CoursesFragment.newInstance();
break;
case 2:
frag=TimeTableFragment.newInstance();
break;
case 3:
frag=FriendsFragment.newInstance();
break;
case 4:
frag=SettingsFragment.newInstance();
break;
}
ft.replace(R.id.flContent,frag,topics[position]).addToBackStack(null).commit();
}",0.9298245614035088
36348,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  TextView textView=new TextView(getActivity());
  textView.setText(R.string.hello_blank_fragment);
  return textView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  TextView textView=new TextView(getActivity());
  textView.setText(""String_Node_Str"");
  return textView;
}",0.9276018099547512
36349,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.friends_fragment,container,false);
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  TextView textView=new TextView(getActivity());
  textView.setText(""String_Node_Str"");
  return textView;
}",0.5903307888040712
36350,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_main,container,false);
  String planet=getResources().getStringArray(R.array.planets_array)[0];
  int imageId=getResources().getIdentifier(planet.toLowerCase(Locale.getDefault()),""String_Node_Str"",getActivity().getPackageName());
  getActivity().setTitle(planet);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  String topics=getResources().getStringArray(R.array.topic)[0];
  getActivity().setTitle(topics);
  TextView textView=new TextView(getActivity());
  textView.setText(""String_Node_Str"");
  return textView;
}",0.3862433862433862
36351,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.settings_fragment,container,false);
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  TextView textView=new TextView(getActivity());
  textView.setText(""String_Node_Str"");
  return textView;
}",0.6192893401015228
36352,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.timetable_fragment,container,false);
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  TextView textView=new TextView(getActivity());
  textView.setText(""String_Node_Str"");
  return textView;
}",0.5822784810126582
36353,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  CourseViewHolder cvHolder=(CourseViewHolder)holder;
  cvHolder.courseCode.setText(courses.get(position).courseCode);
  cvHolder.courseName.setText(courses.get(position).courseName);
  cvHolder.photo.setImageResource(courses.get(position).photoResourceId);
}","@Override public void onBindViewHolder(CourseViewHolder holder,int position){
  CourseViewHolder cvHolder=(CourseViewHolder)holder;
  cvHolder.courseCode.setText(courses.get(position).courseCode);
  cvHolder.courseName.setText(courses.get(position).courseName);
  cvHolder.photo.setImageResource(courses.get(position).photoResourceId);
}",0.972099853157122
36354,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.bLogin:
    Intent i=new Intent(LoginActivity.class,this);
  break;
case R.id.bRefresh:
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.bLogin:
    Intent i=new Intent(MainActivity.this,LoginActivity.class);
  startActivity(i);
break;
case R.id.bRefresh:
}
}",0.8838526912181303
36355,"public void firstUser(final onTaskCompleted listener){
  refreshCredentials();
class bgTask extends AsyncTask<Void,Void,Object> {
    Exception e;
    @Override protected Object doInBackground(    Void... params){
      try {
        if (!isConnected())         throw new Exception(""String_Node_Str"");
        Response temp=HomeCall.sendRequest(regno,dob,campus,""String_Node_Str"");
        if (temp.getStatus().getCode() == 0) {
          DataHandler.getInstance(context).saveFirstJSON(HomeCall.json_response);
          return temp;
        }
 else         throw new Exception(temp.getStatus().getMessage());
      }
 catch (      Exception e) {
        this.e=e;
      }
      return null;
    }
    @Override protected void onPostExecute(    Object o){
      super.onPostExecute(o);
      listener.onCompleted(o,e);
    }
  }
  loginUser(new onTaskCompleted(){
    @Override public void onCompleted(    Object result,    Exception e){
      if (e == null)       new bgTask().execute();
 else       listener.onCompleted(null,e);
    }
  }
);
}","public void firstUser(final onTaskCompleted listener){
  refreshCredentials();
class bgTask extends AsyncTask<Void,Void,Object> {
    Exception e;
    @Override protected Object doInBackground(    Void... params){
      try {
        if (!isConnected())         throw new Exception(""String_Node_Str"");
        Response temp=HomeCall.sendRequest(regno,dob,campus,""String_Node_Str"");
        if (temp.getStatus().getCode() == 0) {
          DataHandler.getInstance(context).saveFirstJSON(HomeCall.json_response);
          DataHandler.getInstance(context).saveRefreshJSON(HomeCall.json_response);
          return temp;
        }
 else         throw new Exception(temp.getStatus().getMessage());
      }
 catch (      Exception e) {
        this.e=e;
      }
      return null;
    }
    @Override protected void onPostExecute(    Object o){
      super.onPostExecute(o);
      listener.onCompleted(o,e);
    }
  }
  loginUser(new onTaskCompleted(){
    @Override public void onCompleted(    Object result,    Exception e){
      if (e == null)       new bgTask().execute();
 else       listener.onCompleted(null,e);
    }
  }
);
}",0.9613615455381784
36356,"public ViewHolder(View itemView){
  super(itemView);
  itemView.setOnClickListener(FriendsAdapter.this);
  itemView.setOnLongClickListener(FriendsAdapter.this);
  image=(ImageView)itemView.findViewById(R.id.img_profile);
  name=(TextView)itemView.findViewById(R.id.lbl_title);
  status=(TextView)itemView.findViewById(R.id.lbl_status);
  endsin=(TextView)itemView.findViewById(R.id.lbl_endsin);
  venue=(TextView)itemView.findViewById(R.id.lbl_venue);
}","public ViewHolder(View itemView){
  super(itemView);
  image=(ImageView)itemView.findViewById(R.id.img_profile);
  name=(TextView)itemView.findViewById(R.id.lbl_title);
  status=(TextView)itemView.findViewById(R.id.lbl_status);
  endsin=(TextView)itemView.findViewById(R.id.lbl_endsin);
  venue=(TextView)itemView.findViewById(R.id.lbl_venue);
}",0.8646616541353384
36357,"@Override public ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  View v=LayoutInflater.from(parent.getContext()).inflate(itemLayout,parent,false);
  return new ViewHolder(v);
}","@Override public FriendsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  View v=LayoutInflater.from(parent.getContext()).inflate(itemLayout,parent,false);
  v.setOnClickListener(FriendsAdapter.this);
  v.setOnLongClickListener(FriendsAdapter.this);
  return new ViewHolder(v);
}",0.7789046653144016
36358,"@Override public void onBindViewHolder(ViewHolder holder,int position){
  Friend f=friends.get(position);
  if (f.isFb && f.img_profile != null)   holder.image.setImageBitmap(f.img_profile);
  holder.name.setText(f.title);
  TimeTable t=new TimeTable(context);
  if (t.getFriendStatus(f.timetable)) {
    holder.status.setText(""String_Node_Str"");
    holder.status.setTextColor(Color.parseColor(""String_Node_Str""));
    holder.venue.setText(""String_Node_Str"" + t.FreindEndsIn);
  }
 else {
    holder.status.setText(""String_Node_Str"");
    holder.status.setTextColor(Color.parseColor(""String_Node_Str""));
    holder.endsin.setText(""String_Node_Str"");
  }
  holder.venue.setText(t.FriendVenue);
  holder.itemView.setTag(f);
}","@Override public void onBindViewHolder(ViewHolder holder,int position){
  Friend f=friends.get(position);
  if (f.isFb && f.img_profile != null)   holder.image.setImageBitmap(f.img_profile);
 else   holder.image.setImageBitmap(BitmapFactory.decodeResource(context.getResources(),R.drawable.ic_action_person));
  holder.name.setText(f.title);
  TimeTable t=new TimeTable(context);
  if (t.getFriendStatus(f.timetable)) {
    holder.status.setText(""String_Node_Str"");
    holder.status.setTextColor(Color.parseColor(""String_Node_Str""));
    holder.venue.setText(""String_Node_Str"" + t.FreindEndsIn);
  }
 else {
    holder.status.setText(""String_Node_Str"");
    holder.status.setTextColor(Color.parseColor(""String_Node_Str""));
    holder.endsin.setText(""String_Node_Str"");
  }
  holder.venue.setText(t.FriendVenue);
  holder.itemView.setTag(f);
}",0.8755583918315252
36359,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_friends,container,false);
  Tracker t=((Application)getActivity().getApplication()).getTracker(Application.TrackerName.GLOBAL_TRACKER);
  t.setScreenName(""String_Node_Str"");
  t.send(new HitBuilders.AppViewBuilder().build());
  mPullToRefreshLayout=(SwipeRefreshLayout)v.findViewById(R.id.friends_pull);
  mPullToRefreshLayout.setEnabled(false);
  mPullToRefreshLayout.setColorSchemeColors(getResources().getColor(R.color.HoloBright),getResources().getColor(R.color.HoloOrange),getResources().getColor(R.color.HoloGreen),getResources().getColor(R.color.HoloRed));
  listView=(RecyclerView)v.findViewById(R.id.enhanced_list);
  listView.setLayoutManager(new LinearLayoutManager(getActivity()));
  setHasOptionsMenu(true);
  dat=new DataHandler(getActivity());
  zxingLibConfig=new ZXingLibConfig();
  zxingLibConfig.useFrontLight=true;
  new Load_Data().execute();
  refresh_data=new Refresh_Data();
  refresh_data.execute();
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_friends,container,false);
  Tracker t=((Application)getActivity().getApplication()).getTracker(Application.TrackerName.GLOBAL_TRACKER);
  t.setScreenName(""String_Node_Str"");
  t.send(new HitBuilders.AppViewBuilder().build());
  mPullToRefreshLayout=(SwipeRefreshLayout)v.findViewById(R.id.friends_pull);
  mPullToRefreshLayout.setEnabled(false);
  mPullToRefreshLayout.setColorSchemeColors(getResources().getColor(R.color.HoloBright),getResources().getColor(R.color.HoloOrange),getResources().getColor(R.color.HoloGreen),getResources().getColor(R.color.HoloRed));
  listView=(RecyclerView)v.findViewById(R.id.enhanced_list);
  listView.setLayoutManager(new LinearLayoutManager(getActivity()));
  listView.setHasFixedSize(false);
  setHasOptionsMenu(true);
  dat=new DataHandler(getActivity());
  zxingLibConfig=new ZXingLibConfig();
  zxingLibConfig.useFrontLight=true;
  new Load_Data().execute();
  refresh_data=new Refresh_Data();
  refresh_data.execute();
  return v;
}",0.9841843651152282
36360,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  DataHandler dat=new DataHandler(this);
  new ParseAPI(this).parseInit();
  if (dat.isNewUser()) {
    isActive=false;
    startActivity(new Intent(this,NewUser.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK));
    overridePendingTransition(R.anim.enter,R.anim.exit);
  }
  setContentView(R.layout.activity_home);
  mTitle=mDrawerTitle=getTitle();
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  final Activity a=this;
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      getSupportActionBar().setTitle(mTitle);
      ActivityCompat.invalidateOptionsMenu(a);
    }
    /** 
 * Called when a drawer has settled in a completely open state. 
 */
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      getSupportActionBar().setTitle(mDrawerTitle);
      ActivityCompat.invalidateOptionsMenu(a);
    }
  }
;
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setHomeButtonEnabled(true);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerList.setAdapter(new DrawerListAdapter(this,titles,subtitle,imgs));
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  selectItem(dat.getDefUi());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
    mNfcAdapter=NfcAdapter.getDefaultAdapter(this);
    if (mNfcAdapter != null) {
      hasNFC=true;
      mNfcPendingIntent=PendingIntent.getActivity(this,0,new Intent(this,getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP),0);
      IntentFilter ndefDetected=new IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED);
      try {
        ndefDetected.addDataType(""String_Node_Str"");
      }
 catch (      IntentFilter.MalformedMimeTypeException e) {
      }
      mNdefExchangeFilters=new IntentFilter[]{ndefDetected};
    }
  }
  if (getIntent().getExtras() != null) {
    try {
      JSONObject data=new JSONObject(getIntent().getExtras().getString(""String_Node_Str""));
      Log.i(""String_Node_Str"",data.toString());
      selectItem(9);
    }
 catch (    Exception ignore) {
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  DataHandler dat=new DataHandler(this);
  new ParseAPI(this).parseInit();
  if (dat.isNewUser()) {
    isActive=false;
    startActivity(new Intent(this,NewUser.class).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK));
    overridePendingTransition(R.anim.enter,R.anim.exit);
  }
  if (BuildConfig.DEBUG) {
    GoogleAnalytics googleAnalytics=GoogleAnalytics.getInstance(getApplicationContext());
    googleAnalytics.setAppOptOut(true);
  }
  setContentView(R.layout.activity_home);
  mTitle=mDrawerTitle=getTitle();
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  final Activity a=this;
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      getSupportActionBar().setTitle(mTitle);
      ActivityCompat.invalidateOptionsMenu(a);
    }
    /** 
 * Called when a drawer has settled in a completely open state. 
 */
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      getSupportActionBar().setTitle(mDrawerTitle);
      ActivityCompat.invalidateOptionsMenu(a);
    }
  }
;
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setHomeButtonEnabled(true);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerList.setAdapter(new DrawerListAdapter(this,titles,subtitle,imgs));
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  selectItem(dat.getDefUi());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
    mNfcAdapter=NfcAdapter.getDefaultAdapter(this);
    if (mNfcAdapter != null) {
      hasNFC=true;
      mNfcPendingIntent=PendingIntent.getActivity(this,0,new Intent(this,getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP),0);
      IntentFilter ndefDetected=new IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED);
      try {
        ndefDetected.addDataType(""String_Node_Str"");
      }
 catch (      IntentFilter.MalformedMimeTypeException e) {
      }
      mNdefExchangeFilters=new IntentFilter[]{ndefDetected};
    }
  }
  if (getIntent().getExtras() != null) {
    try {
      JSONObject data=new JSONObject(getIntent().getExtras().getString(""String_Node_Str""));
      Log.i(""String_Node_Str"",data.toString());
      selectItem(9);
    }
 catch (    Exception ignore) {
    }
  }
}",0.9687074829931972
36361,"@Override protected Void doInBackground(Void... voids){
  try {
    HttpResponse res=getResponse(FRIEND_TIMETABLE_URL);
    if (res.getStatusLine().getStatusCode() == 403 || res.getStatusLine().getStatusCode() == 503) {
      e=new Exception(""String_Node_Str"");
      return null;
    }
    String result=EntityUtils.toString(res.getEntity());
    Friend f=new Friend();
    f.regno=Friend_regno;
    f.dob=Friend_dob;
    f.title=Friend_regno;
    ParseQuery<ParseUser> query=ParseUser.getQuery();
    ParseUser u=(query.whereEqualTo(""String_Node_Str"",f.regno)).getFirst();
    String isIt=u.getString(""String_Node_Str"");
    if (isIt != null && isIt.equals(""String_Node_Str"")) {
      f.isFb=true;
      f.fbId=u.getString(""String_Node_Str"");
      f.title=u.getString(""String_Node_Str"");
      Ion.with(dat.context).load(""String_Node_Str"" + f.fbId + ""String_Node_Str"").write(new File(dat.context.getCacheDir().getPath() + ""String_Node_Str"" + f.fbId+ ""String_Node_Str"")).get();
    }
    f.timetable=result;
    dat.addFriend(f);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    e=new Exception(""String_Node_Str"");
  }
  return null;
}","@Override protected Void doInBackground(Void... voids){
  try {
    HttpResponse res=getResponse(FRIEND_TIMETABLE_URL);
    if (res.getStatusLine().getStatusCode() == 403 || res.getStatusLine().getStatusCode() == 503) {
      e=new Exception(""String_Node_Str"");
      return null;
    }
    String result=EntityUtils.toString(res.getEntity());
    Friend f=new Friend();
    f.regno=Friend_regno;
    f.dob=Friend_dob;
    f.title=Friend_regno;
    ParseQuery<ParseUser> query=ParseUser.getQuery();
    ParseUser u=(query.whereEqualTo(""String_Node_Str"",f.regno)).getFirst();
    String isIt=u.getString(""String_Node_Str"");
    if (isIt != null && isIt.equals(""String_Node_Str"")) {
      f.isFb=true;
      f.fbId=u.getString(""String_Node_Str"");
      f.title=u.getString(""String_Node_Str"");
      Ion.with(dat.context).load(""String_Node_Str"" + f.fbId + ""String_Node_Str"").write(new File(dat.context.getCacheDir().getPath() + ""String_Node_Str"" + f.fbId+ ""String_Node_Str"")).get();
    }
    f.timetable=result;
    try {
      new JSONObject(f.timetable);
    }
 catch (    JSONException e1) {
      e=new Exception(""String_Node_Str"");
      return null;
    }
    dat.addFriend(f);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    e=new Exception(""String_Node_Str"");
  }
  return null;
}",0.9239574816026164
36362,"@Override protected Void doInBackground(Void... voids){
  try {
    friends=new DataHandler(getActivity()).getFreinds();
    for (int i=0; i < friends.size(); i++) {
      if (!friends.get(i).isFb) {
        ParseQuery<ParseUser> query=ParseUser.getQuery();
        ParseUser u=(query.whereEqualTo(""String_Node_Str"",friends.get(i).regno)).getFirst();
        String isIt=u.getString(""String_Node_Str"");
        if (isIt != null && isIt.equals(""String_Node_Str"")) {
          friends.get(i).isFb=true;
          friends.get(i).fbId=u.get(""String_Node_Str"").toString();
          friends.get(i).title=u.get(""String_Node_Str"").toString();
          needSaving=true;
        }
      }
    }
    if (needSaving)     dat.saveFriends(friends);
    downloadProfileImage(friends);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","@Override protected Void doInBackground(Void... voids){
  if (!haveNetworkConnection())   return null;
  try {
    friends=new DataHandler(getActivity()).getFreinds();
    for (int i=0; i < friends.size(); i++) {
      if (!friends.get(i).isFb) {
        ParseQuery<ParseUser> query=ParseUser.getQuery();
        ParseUser u=(query.whereEqualTo(""String_Node_Str"",friends.get(i).regno)).getFirst();
        String isIt=u.getString(""String_Node_Str"");
        if (isIt != null && isIt.equals(""String_Node_Str"")) {
          friends.get(i).isFb=true;
          friends.get(i).fbId=u.get(""String_Node_Str"").toString();
          friends.get(i).title=u.get(""String_Node_Str"").toString();
          needSaving=true;
        }
      }
    }
    if (needSaving)     dat.saveFriends(friends);
    downloadProfileImage(friends);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.972972972972973
36363,"public static void DELETE_ALL_DATA(Context context){
  PreferenceManager.getDefaultSharedPreferences(context).edit().clear().commit();
}","public static void DELETE_ALL_DATA(Context context){
  PreferenceManager.getDefaultSharedPreferences(context).edit().clear().commit();
  context.deleteDatabase(""String_Node_Str"");
}",0.8580441640378549
36364,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_attendance_details,container,false);
  tv_title=(TextView)v.findViewById(R.id.title_detailed);
  tv_slot=(TextView)v.findViewById(R.id.slot_detailed);
  tv_code=(TextView)v.findViewById(R.id.code_detailed);
  tv_type=(TextView)v.findViewById(R.id.type_detailed);
  tv_atten=(TextView)v.findViewById(R.id.atten_detailed);
  tv_net_per=(TextView)v.findViewById(R.id.net_per);
  atten_updated_date=(TextView)v.findViewById(R.id.atten_lastUpdatedDate);
  atten_updated_status=(TextView)v.findViewById(R.id.atten_lastUpdatedStatus);
  bunk_val=(TextView)v.findViewById(R.id.bunk_val);
  makeup_val=(TextView)v.findViewById(R.id.makeup_val);
  progBar=(ProgressBar)v.findViewById(R.id.progressBar_detailed);
  bunk_add=(Button)v.findViewById(R.id.bunk_add);
  bunk_sub=(Button)v.findViewById(R.id.bunk_sub);
  makeup_add=(Button)v.findViewById(R.id.makeup_add);
  makeup_sub=(Button)v.findViewById(R.id.makeup_sub);
  bunk_add.setOnClickListener(ocl);
  bunk_sub.setOnClickListener(ocl);
  makeup_add.setOnClickListener(ocl);
  makeup_sub.setOnClickListener(ocl);
  load();
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_attendance_details,container,false);
  tv_title=(TextView)v.findViewById(R.id.title_detailed);
  tv_slot=(TextView)v.findViewById(R.id.slot_detailed);
  tv_code=(TextView)v.findViewById(R.id.code_detailed);
  tv_type=(TextView)v.findViewById(R.id.type_detailed);
  tv_atten=(TextView)v.findViewById(R.id.atten_detailed);
  tv_net_per=(TextView)v.findViewById(R.id.net_per);
  bunk_val=(TextView)v.findViewById(R.id.bunk_val);
  makeup_val=(TextView)v.findViewById(R.id.makeup_val);
  progBar=(ProgressBar)v.findViewById(R.id.progressBar_detailed);
  bunk_add=(Button)v.findViewById(R.id.bunk_add);
  bunk_sub=(Button)v.findViewById(R.id.bunk_sub);
  makeup_add=(Button)v.findViewById(R.id.makeup_add);
  makeup_sub=(Button)v.findViewById(R.id.makeup_sub);
  bunk_add.setOnClickListener(ocl);
  bunk_sub.setOnClickListener(ocl);
  makeup_add.setOnClickListener(ocl);
  makeup_sub.setOnClickListener(ocl);
  load();
  return v;
}",0.6268398268398269
36365,"public void saveRegNo(String regno){
  saveString(""String_Node_Str"",regno);
}","public void saveRegNo(String regno){
  saveString(""String_Node_Str"",regno.trim());
}",0.9565217391304348
36366,"public ArrayList<TTSlot> getTT(int Day){
  ArrayList<TTSlot> today=new ArrayList<TTSlot>();
  if (Day == Calendar.SUNDAY || Day == Calendar.SATURDAY)   Day=Calendar.MONDAY;
  set_day(Day);
  try {
    Calendar calendar=Calendar.getInstance();
    calendar.set(Calendar.DAY_OF_WEEK,Day);
    SimpleDateFormat dayFormat=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
    JSONObject root=new JSONObject(dat.getTimeTable());
    JSONArray subs=root.getJSONArray(""String_Node_Str"");
    root=root.getJSONObject(""String_Node_Str"");
    JSONArray json_slts=root.getJSONArray(dayFormat.format(calendar.getTime()));
    TTSlot temp;
    String clsnbr, slt=""String_Node_Str"";
    for (int i=0; i < json_slts.length(); i++) {
      if (json_slts.getInt(i) != 0) {
        clsnbr=Integer.toString(json_slts.getInt(i));
        Subject sub=dat.getSubject(clsnbr);
        if (sub.slot.contains(""String_Node_Str"")) {
          String[] parts=sub.slot.split(""String_Node_Str"");
          for (int j=0; j < parts.length; j++) {
            if (slts_today[i].toUpperCase().equals(parts[j])) {
              slt=parts[j];
              break;
            }
          }
        }
 else         slt=sub.slot;
        temp=new TTSlot(slt,clsnbr);
        temp.venue=getVenue(subs,clsnbr);
        temp.setTime(i);
        today.add(temp);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return today;
}","public ArrayList<TTSlot> getTT(int Day){
  ArrayList<TTSlot> today=new ArrayList<TTSlot>();
  if (Day == Calendar.SUNDAY || Day == Calendar.SATURDAY)   Day=Calendar.MONDAY;
  set_day(Day);
  try {
    Calendar calendar=Calendar.getInstance();
    calendar.set(Calendar.DAY_OF_WEEK,Day);
    SimpleDateFormat dayFormat=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
    JSONObject root=new JSONObject(dat.getTimeTable());
    JSONArray subs=root.getJSONArray(""String_Node_Str"");
    root=root.getJSONObject(""String_Node_Str"");
    JSONArray json_slts=root.getJSONArray(dayFormat.format(calendar.getTime()));
    TTSlot temp;
    String clsnbr, slt=""String_Node_Str"";
    for (int i=0; i < json_slts.length(); i++) {
      if (json_slts.getInt(i) != 0) {
        clsnbr=Integer.toString(json_slts.getInt(i));
        Subject sub=dat.getSubject(clsnbr);
        if (sub.slot.contains(""String_Node_Str"")) {
          int tmp;
          String[] parts=sub.slot.split(""String_Node_Str"");
          for (int j=0; j < parts.length; j++) {
            if (parts[j].charAt(0) == 'L')             tmp=i + 10;
 else             tmp=i;
            if (slts_today[tmp].toUpperCase().equals(parts[j])) {
              slt=parts[j];
              break;
            }
          }
        }
 else         slt=sub.slot;
        temp=new TTSlot(slt,clsnbr);
        temp.venue=getVenue(subs,clsnbr);
        temp.setTime(i);
        today.add(temp);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return today;
}",0.9225042301184432
36367,"@Override protected Void doInBackground(Void... voids){
  subs.add(new NowListHeader(""String_Node_Str""));
  TimeTable tt=new TimeTable(cntx);
  int today=Calendar.getInstance().get(Calendar.DAY_OF_WEEK);
  if (today == Calendar.SUNDAY || today == Calendar.SATURDAY) {
    subs.add(new NowListNoClass());
    subs.add(new NowListHeader(""String_Node_Str""));
    today=Calendar.MONDAY;
    ttSlots=tt.getTT(today);
  }
 else {
    ttSlots=tt.getTT(today);
    boolean noClass=true;
    Calendar temp=Calendar.getInstance();
    for (int i=0; i < ttSlots.size(); i++) {
      if (temp.compareTo(ttSlots.get(i).frm_time) >= 0 && temp.compareTo(ttSlots.get(i).to_time) < 0) {
        noClass=false;
        subs.add(new NowListItem(cntx,ttSlots.get(i)));
        subs.remove(i);
        break;
      }
    }
    if (noClass)     subs.add(new NowListNoClass());
    subs.add(new NowListHeader(""String_Node_Str""));
  }
  for (int i=0; i < ttSlots.size(); i++) {
    subs.add(new NowListItem(cntx,ttSlots.get(i)));
  }
  return null;
}","@Override protected Void doInBackground(Void... voids){
  subs.add(new NowListHeader(""String_Node_Str""));
  TimeTable tt=new TimeTable(cntx);
  int today=Calendar.getInstance().get(Calendar.DAY_OF_WEEK);
  if (today == Calendar.SUNDAY || today == Calendar.SATURDAY) {
    subs.add(new NowListNoClass());
    subs.add(new NowListHeader(""String_Node_Str""));
    today=Calendar.MONDAY;
    ttSlots=tt.getTT(today);
  }
 else {
    ttSlots=tt.getTT(today);
    boolean noClass=true;
    Calendar temp=Calendar.getInstance();
    for (int i=0; i < ttSlots.size(); i++) {
      if (temp.compareTo(ttSlots.get(i).frm_time) >= 0 && temp.compareTo(ttSlots.get(i).to_time) < 0) {
        noClass=false;
        subs.add(new NowListItem(cntx,ttSlots.get(i)));
        ttSlots.remove(i);
        break;
      }
    }
    if (noClass)     subs.add(new NowListNoClass());
    subs.add(new NowListHeader(""String_Node_Str""));
  }
  for (int i=0; i < ttSlots.size(); i++) {
    subs.add(new NowListItem(cntx,ttSlots.get(i)));
  }
  return null;
}",0.8360097323600973
36368,"/** 
 * 增加参数
 * @param name
 * @param value
 * @param urlEncoding
 * @return
 */
public HttpBuilder param(String name,String value,boolean urlEncoding){
  String encodedValue=null;
  if (urlEncoding) {
    try {
      encodedValue=URLEncoder.encode(value,charset.name());
    }
 catch (    UnsupportedEncodingException e) {
      Logger.error(e);
    }
  }
  if (encodedValue == null) {
    encodedValue=value;
  }
  NameValuePair nameValuePair=new BasicNameValuePair(name,encodedValue);
  this.nameValuePairs.add(nameValuePair);
  return this;
}","/** 
 * 增加参数
 * @param name
 * @param value
 * @param urlEncoding
 * @return
 */
public HttpBuilder param(String name,String value,boolean urlEncoding){
  String encodedValue=null;
  if (urlEncoding && value != null) {
    try {
      encodedValue=URLEncoder.encode(value,charset.name());
    }
 catch (    UnsupportedEncodingException e) {
      Logger.error(e);
    }
  }
  if (encodedValue == null) {
    encodedValue=value;
  }
  NameValuePair nameValuePair=new BasicNameValuePair(name,encodedValue);
  this.nameValuePairs.add(nameValuePair);
  return this;
}",0.9846708746618577
36369,"@Nullable @Override public String getTemplateString(@NotNull PsiElement element){
  return getStaticMethodPrefix(PRECONDITIONS.getClassName(),""String_Node_Str"",element) + ""String_Node_Str"";
}","@Nullable @Override public String getTemplateString(@NotNull PsiElement element){
  return getStaticMethodPrefix(PRECONDITIONS,""String_Node_Str"",element) + ""String_Node_Str"";
}",0.9591280653950952
36370,"@NotNull protected String getStringTemplate(@NotNull PsiExpression expr){
  return getStaticMethodPrefix(PRECONDITIONS.getClassName(),""String_Node_Str"",expr) + ""String_Node_Str"";
}","@NotNull protected String getStringTemplate(@NotNull PsiElement context){
  return getStaticMethodPrefix(PRECONDITIONS,""String_Node_Str"",context) + ""String_Node_Str"";
}",0.8850574712643678
36371,"@Nullable @Override public String getTemplateString(@NotNull PsiElement element){
  return getStaticMethodPrefix(PRECONDITIONS.getClassName(),""String_Node_Str"",element) + ""String_Node_Str"";
}","@Override public String getTemplateString(@NotNull PsiElement element){
  return getStaticMethodPrefix(PRECONDITIONS,""String_Node_Str"",element) + (isTopmostExpression(element) ? ""String_Node_Str"" : ""String_Node_Str"");
}",0.7268292682926829
36372,"public CheckNotNullPostfixTemplate(){
  super(""String_Node_Str"",""String_Node_Str"",JAVA_PSI_INFO,IS_NON_VOID);
}","public CheckNotNullPostfixTemplate(){
  super(""String_Node_Str"",""String_Node_Str"",JAVA_PSI_INFO,IS_NOT_PRIMITIVE);
}",0.9427312775330396
36373,"@NotNull private String getStringTemplate(@NotNull PsiExpression expr){
  return getStaticMethodPrefix(PRECONDITIONS.getClassName(),""String_Node_Str"",expr) + ""String_Node_Str"";
}","@NotNull private String getStringTemplate(@NotNull PsiExpression expr){
  return getStaticMethodPrefix(PRECONDITIONS,""String_Node_Str"",expr) + ""String_Node_Str"";
}",0.9560117302052786
36374,"@NotNull private String getStringTemplate(@NotNull PsiExpression expr){
  return getStaticMethodPrefix(PRECONDITIONS.getClassName(),""String_Node_Str"",expr) + ""String_Node_Str"";
}","@NotNull private String getStringTemplate(@NotNull PsiElement element){
  return getStaticMethodPrefix(PRECONDITIONS,""String_Node_Str"",element) + ""String_Node_Str"";
}",0.872093023255814
36375,"@Nullable @Override public String getTemplateString(@NotNull PsiElement element){
  return getStaticMethodPrefix(PRECONDITIONS.getClassName(),""String_Node_Str"",element) + ""String_Node_Str"";
}","@Override public String getTemplateString(@NotNull PsiElement element){
  return getStaticMethodPrefix(PRECONDITIONS,""String_Node_Str"",element) + ""String_Node_Str"";
}",0.9299719887955182
36376,"protected ImmutableBasePostfixTemplate(@NotNull String key,@NotNull String example,@NotNull GuavaClassName className,@NotNull String methodName){
  super(key,example,JAVA_PSI_INFO);
  this.className=className;
  this.methodName=methodName;
}","protected ImmutableBasePostfixTemplate(@NotNull String key,@NotNull String example,@NotNull GuavaClassName className,@NotNull String methodName){
  super(key,example,JAVA_PSI_INFO,IS_NON_PRIMITIVE_ARRAY_OR_ITERABLE_OR_ITERATOR);
  this.className=className;
  this.methodName=methodName;
}",0.9111531190926276
36377,"@Override public final String getTemplateString(@NotNull PsiElement element){
  return FQ_METHOD_ON + ""String_Node_Str"";
}","@Override public final String getTemplateString(@NotNull PsiElement element){
  return getStaticMethodPrefix(JOINER,""String_Node_Str"",element) + ""String_Node_Str"" + (isTopmostExpression(element) ? ""String_Node_Str"" : ""String_Node_Str"");
}",0.5166666666666667
36378,"public static void callbackRegister(IWailaRegistrar registrar){
  WailaHandler instance=new WailaHandler();
  registrar.addConfig(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  registrar.addConfig(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  registrar.addConfig(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  registrar.addConfig(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  registrar.addConfig(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  registrar.addConfig(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  registrar.addConfig(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  registrar.addConfig(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  registrar.registerBodyProvider(instance,Block.class);
}","public static void callbackRegister(IWailaRegistrar registrar){
  WailaHandler instance=new WailaHandler();
  for (  Map.Entry<String,Boolean> entry : configOptions.entrySet()) {
    ConfigHandler.instance().getConfig(entry.getKey(),entry.getValue());
    registrar.addConfig(""String_Node_Str"",entry.getKey(),""String_Node_Str"" + entry.getKey());
  }
  registrar.registerBodyProvider(instance,Block.class);
}",0.3812709030100334
36379,"@Override public List<String> getWailaBody(ItemStack itemStack,List<String> toolTip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  if (config.getConfig(""String_Node_Str"",false) && !accessor.getPlayer().isSneaking())   return toolTip;
  if (config.getConfig(""String_Node_Str"") && accessor.getBlock().blockMaterial.isToolNotRequired())   return toolTip;
  boolean showHarvestLevel=config.getConfig(""String_Node_Str"");
  boolean showEffectiveTool=config.getConfig(""String_Node_Str"");
  boolean showCurrentlyHarvestable=config.getConfig(""String_Node_Str"");
  boolean showOresOnly=config.getConfig(""String_Node_Str"",false);
  boolean minimalLayout=config.getConfig(""String_Node_Str"",false);
  boolean hideWhileHarvestable=config.getConfig(""String_Node_Str"",false);
  if (showHarvestLevel || showEffectiveTool || showCurrentlyHarvestable) {
    int oreID=-1;
    if (showOresOnly && ((oreID=OreDictionary.getOreID(itemStack)) == -1 || !OreDictionary.getOreName(oreID).startsWith(""String_Node_Str""))) {
      return toolTip;
    }
    String toolClasses[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int harvestLevels[]=new int[toolClasses.length];
    boolean blockHasEffectiveTools=BlockHelper.getHarvestLevelsOf(accessor.getBlock(),accessor.getMetadata(),toolClasses,harvestLevels);
    if (!blockHasEffectiveTools)     return toolTip;
    int harvestLevel=-1;
    String effectiveTool=""String_Node_Str"";
    int i=0;
    for (    String toolClass : toolClasses) {
      if (harvestLevels[i] >= 0) {
        harvestLevel=harvestLevels[i];
        effectiveTool=toolClass;
        break;
      }
      i++;
    }
    boolean canHarvest=false;
    boolean isEffective=false;
    boolean isAboveMinHarvestLevel=false;
    ItemStack itemHeld=accessor.getPlayer().getHeldItem();
    if (itemHeld != null) {
      canHarvest=ToolHelper.canToolHarvestBlock(itemHeld,accessor.getBlock(),accessor.getMetadata());
      isAboveMinHarvestLevel=(showCurrentlyHarvestable || showHarvestLevel) && ToolHelper.canToolHarvestLevel(itemHeld,accessor.getBlock(),accessor.getMetadata(),harvestLevel);
      isEffective=showEffectiveTool && ToolHelper.isToolEffectiveAgainst(itemHeld,accessor.getBlock(),accessor.getMetadata(),effectiveTool);
    }
    boolean isCurrentlyHarvestable=canHarvest && isAboveMinHarvestLevel;
    if (hideWhileHarvestable && isCurrentlyHarvestable)     return toolTip;
    if (!minimalLayout) {
      if (showCurrentlyHarvestable)       toolTip.add(ColorHelper.getBooleanColor(isCurrentlyHarvestable) + (isCurrentlyHarvestable ? ""String_Node_Str"" : ""String_Node_Str"") + EnumChatFormatting.RESET+ ""String_Node_Str"");
      if (harvestLevel != -1 && showEffectiveTool)       toolTip.add(""String_Node_Str"" + ColorHelper.getBooleanColor(isEffective && canHarvest,isEffective && !canHarvest) + StatCollector.translateToLocal(""String_Node_Str"" + effectiveTool));
      if (harvestLevel >= 1 && showHarvestLevel)       toolTip.add(""String_Node_Str"" + ColorHelper.getBooleanColor(isAboveMinHarvestLevel && canHarvest) + StringHelper.getHarvestLevelName(harvestLevel));
    }
 else {
      List<String> stringParts=new ArrayList<String>();
      if (showCurrentlyHarvestable)       stringParts.add(ColorHelper.getBooleanColor(isCurrentlyHarvestable) + (isCurrentlyHarvestable ? ""String_Node_Str"" : ""String_Node_Str""));
      if (harvestLevel != -1 && showEffectiveTool)       stringParts.add(ColorHelper.getBooleanColor(isEffective && canHarvest,isEffective && !canHarvest) + StatCollector.translateToLocal(""String_Node_Str"" + effectiveTool));
      if (harvestLevel >= 1 && showHarvestLevel)       stringParts.add(ColorHelper.getBooleanColor(isAboveMinHarvestLevel && canHarvest) + StringHelper.getHarvestLevelName(harvestLevel));
      if (!stringParts.isEmpty()) {
        toolTip.add(StringHelper.concatenateStringList(stringParts,EnumChatFormatting.RESET + ""String_Node_Str""));
      }
    }
  }
  return toolTip;
}","@Override public List<String> getWailaBody(ItemStack itemStack,List<String> toolTip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  if (config.getConfig(""String_Node_Str"") && accessor.getBlock().blockMaterial.isToolNotRequired())   return toolTip;
  boolean isSneaking=accessor.getPlayer().isSneaking();
  boolean showHarvestLevel=config.getConfig(""String_Node_Str"") && (!config.getConfig(""String_Node_Str"") || isSneaking);
  boolean showEffectiveTool=config.getConfig(""String_Node_Str"") && (!config.getConfig(""String_Node_Str"") || isSneaking);
  boolean showCurrentlyHarvestable=config.getConfig(""String_Node_Str"") && (!config.getConfig(""String_Node_Str"") || isSneaking);
  boolean showOresOnly=config.getConfig(""String_Node_Str"",false);
  boolean minimalLayout=config.getConfig(""String_Node_Str"",false);
  boolean hideWhileHarvestable=config.getConfig(""String_Node_Str"",false);
  if (showHarvestLevel || showEffectiveTool || showCurrentlyHarvestable) {
    int oreID=-1;
    if (showOresOnly && ((oreID=OreDictionary.getOreID(itemStack)) == -1 || !OreDictionary.getOreName(oreID).startsWith(""String_Node_Str""))) {
      return toolTip;
    }
    String toolClasses[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int harvestLevels[]=new int[toolClasses.length];
    boolean blockHasEffectiveTools=BlockHelper.getHarvestLevelsOf(accessor.getBlock(),accessor.getMetadata(),toolClasses,harvestLevels);
    if (!blockHasEffectiveTools)     return toolTip;
    int harvestLevel=-1;
    String effectiveTool=""String_Node_Str"";
    int i=0;
    for (    String toolClass : toolClasses) {
      if (harvestLevels[i] >= 0) {
        harvestLevel=harvestLevels[i];
        effectiveTool=toolClass;
        break;
      }
      i++;
    }
    boolean canHarvest=false;
    boolean isEffective=false;
    boolean isAboveMinHarvestLevel=false;
    boolean isHoldingTinkersTool=false;
    ItemStack itemHeld=accessor.getPlayer().getHeldItem();
    if (itemHeld != null) {
      isHoldingTinkersTool=ToolHelper.hasToolTag(itemHeld);
      canHarvest=ToolHelper.canToolHarvestBlock(itemHeld,accessor.getBlock(),accessor.getMetadata());
      isAboveMinHarvestLevel=(showCurrentlyHarvestable || showHarvestLevel) && ToolHelper.canToolHarvestLevel(itemHeld,accessor.getBlock(),accessor.getMetadata(),harvestLevel);
      isEffective=showEffectiveTool && ToolHelper.isToolEffectiveAgainst(itemHeld,accessor.getBlock(),accessor.getMetadata(),effectiveTool);
    }
    boolean isCurrentlyHarvestable=(canHarvest && isAboveMinHarvestLevel) || (!isHoldingTinkersTool && ForgeHooks.canHarvestBlock(accessor.getBlock(),accessor.getPlayer(),accessor.getMetadata()));
    if (hideWhileHarvestable && isCurrentlyHarvestable)     return toolTip;
    if (!minimalLayout) {
      if (showCurrentlyHarvestable)       toolTip.add(ColorHelper.getBooleanColor(isCurrentlyHarvestable) + (isCurrentlyHarvestable ? ""String_Node_Str"" : ""String_Node_Str"") + EnumChatFormatting.RESET+ ""String_Node_Str"");
      if (harvestLevel != -1 && showEffectiveTool)       toolTip.add(""String_Node_Str"" + ColorHelper.getBooleanColor(isEffective && canHarvest,isEffective && !canHarvest) + StatCollector.translateToLocal(""String_Node_Str"" + effectiveTool));
      if (harvestLevel >= 1 && showHarvestLevel)       toolTip.add(""String_Node_Str"" + ColorHelper.getBooleanColor(isAboveMinHarvestLevel && canHarvest) + StringHelper.getHarvestLevelName(harvestLevel));
    }
 else {
      List<String> stringParts=new ArrayList<String>();
      if (showCurrentlyHarvestable)       stringParts.add(ColorHelper.getBooleanColor(isCurrentlyHarvestable) + (isCurrentlyHarvestable ? ""String_Node_Str"" : ""String_Node_Str""));
      if (harvestLevel != -1 && showEffectiveTool)       stringParts.add(ColorHelper.getBooleanColor(isEffective && canHarvest,isEffective && !canHarvest) + StatCollector.translateToLocal(""String_Node_Str"" + effectiveTool));
      if (harvestLevel >= 1 && showHarvestLevel)       stringParts.add(ColorHelper.getBooleanColor(isAboveMinHarvestLevel && canHarvest) + StringHelper.getHarvestLevelName(harvestLevel));
      if (!stringParts.isEmpty()) {
        toolTip.add(StringHelper.concatenateStringList(stringParts,EnumChatFormatting.RESET + Config.MINIMAL_SEPARATOR_STRING));
      }
    }
  }
  return toolTip;
}",0.9084532591607208
36380,"@Override public void run(){
  final ConsumerIterator<byte[],EventMessage> it=stream.iterator();
  LOGGER.debug(""String_Node_Str"",cluster.getName());
  while (it.hasNext()) {
    final EventMessage message=it.next().message();
    final String topic=topicStrategy.getTopic(message);
    try {
      cluster.publish(message);
      LOGGER.info(""String_Node_Str"",message.getIdentifier(),topic,message.getPayload());
      metricHelper.markReceivedMessage(topic);
    }
 catch (    Throwable t) {
      LOGGER.error(""String_Node_Str"",message.getIdentifier(),topic,t);
      metricHelper.markErroredWhileReceivingMessage(topic);
    }
  }
}","@Override public void run(){
  final ConsumerIterator<byte[],EventMessage> it=stream.iterator();
  LOGGER.debug(""String_Node_Str"",cluster.getName());
  while (it.hasNext()) {
    final EventMessage message=it.next().message();
    final String event=message.getPayloadType().getSimpleName();
    try {
      cluster.publish(message);
      LOGGER.info(""String_Node_Str"",event,message.getIdentifier());
      metricHelper.markReceivedMessage(event);
    }
 catch (    Throwable t) {
      LOGGER.error(""String_Node_Str"",event,message.getIdentifier(),t);
      metricHelper.markErroredWhileReceivingMessage(event);
    }
  }
}",0.8873015873015873
36381,"public KafkaStreamListener(final Cluster cluster,final KafkaStream<byte[],EventMessage> stream,final KafkaMetricHelper metricHelper,final TopicStrategy topicStrategy){
  this.cluster=checkNotNull(cluster);
  this.stream=checkNotNull(stream);
  this.metricHelper=checkNotNull(metricHelper);
  this.topicStrategy=checkNotNull(topicStrategy);
}","public KafkaStreamListener(final Cluster cluster,final KafkaStream<byte[],EventMessage> stream,final KafkaMetricHelper metricHelper){
  this.cluster=checkNotNull(cluster);
  this.stream=checkNotNull(stream);
  this.metricHelper=checkNotNull(metricHelper);
}",0.5451505016722408
36382,"public KafkaClusterListener(final ConsumerFactory consumerFactory,final KafkaMetricHelper metricHelper,final TopicStrategy topicStrategy,final Cluster cluster,final int numberOfStreamListener){
  checkNotNull(consumerFactory);
  checkNotNull(metricHelper);
  checkNotNull(topicStrategy);
  checkNotNull(cluster);
  checkArgument(numberOfStreamListener > 0,""String_Node_Str"");
  final ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"").build();
  this.executor=Executors.newFixedThreadPool(numberOfStreamListener,threadFactory);
  this.consumer=consumerFactory.createConnector(cluster.getName());
  final List<KafkaStream<byte[],EventMessage>> streams=consumerFactory.createStreams(numberOfStreamListener,consumer);
  for (  final KafkaStream<byte[],EventMessage> stream : streams) {
    executor.submit(new KafkaStreamListener(cluster,stream,metricHelper,topicStrategy));
  }
  LOGGER.debug(""String_Node_Str"",cluster.getName());
}","public KafkaClusterListener(final ConsumerFactory consumerFactory,final KafkaMetricHelper metricHelper,final TopicStrategy topicStrategy,final Cluster cluster,final int numberOfStreamListener){
  checkNotNull(consumerFactory);
  checkNotNull(metricHelper);
  checkNotNull(topicStrategy);
  checkNotNull(cluster);
  checkArgument(numberOfStreamListener > 0,""String_Node_Str"");
  final ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"").build();
  this.executor=Executors.newFixedThreadPool(numberOfStreamListener,threadFactory);
  this.consumer=consumerFactory.createConnector(cluster.getName());
  final List<KafkaStream<byte[],EventMessage>> streams=consumerFactory.createStreams(numberOfStreamListener,consumer);
  for (  final KafkaStream<byte[],EventMessage> stream : streams) {
    executor.submit(new KafkaStreamListener(cluster,stream,metricHelper));
  }
  LOGGER.debug(""String_Node_Str"",cluster.getName());
}",0.993
36383,"public void markReceivedMessage(final String topic){
  metricRegistry.meter(prefix + ""String_Node_Str"" + topic+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"").mark();
}","public void markReceivedMessage(final String event){
  metricRegistry.meter(prefix + ""String_Node_Str"" + event+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"").mark();
}",0.9597989949748744
36384,"public void markSentMessage(final String topic){
  metricRegistry.meter(prefix + ""String_Node_Str"" + topic+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"").mark();
}","public void markSentMessage(final String topic,final String event){
  metricRegistry.meter(prefix + ""String_Node_Str"" + topic+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"" + event+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"").mark();
}",0.7878787878787878
36385,"public void markErroredWhileReceivingMessage(final String topic){
  metricRegistry.meter(prefix + ""String_Node_Str"" + topic+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"").mark();
}","public void markErroredWhileReceivingMessage(final String event){
  metricRegistry.meter(prefix + ""String_Node_Str"" + event+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"").mark();
}",0.9528301886792452
36386,"public void markErroredWhileSendingMessage(final String topic){
  metricRegistry.meter(prefix + ""String_Node_Str"" + topic+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"").mark();
}","public void markErroredWhileSendingMessage(final String topic,final String event){
  metricRegistry.meter(prefix + ""String_Node_Str"" + topic+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"" + event+ ""String_Node_Str"").mark();
  metricRegistry.meter(prefix + ""String_Node_Str"").mark();
}",0.8
36387,"public KafkaMetricHelper(final MetricRegistry metricRegistry,final String prefix){
  this.metricRegistry=metricRegistry;
  this.prefix=prefix;
}","public KafkaMetricHelper(final MetricRegistry metricRegistry,final String prefix){
  this.metricRegistry=checkNotNull(metricRegistry);
  this.prefix=checkNotNull(prefix);
}",0.9113924050632912
36388,"protected void publish(final KeyedMessage<String,EventMessage> message){
  final String topic=message.topic();
  try {
    producer.send(message);
    LOGGER.debug(""String_Node_Str"",message.key(),topic);
    metricHelper.markSentMessage(topic);
  }
 catch (  Throwable t) {
    LOGGER.error(""String_Node_Str"",message.key(),topic,t);
    metricHelper.markErroredWhileSendingMessage(topic);
  }
}","protected void publish(final KeyedMessage<String,EventMessage> message){
  final String event=message.message().getPayloadType().getSimpleName();
  final String topic=message.topic();
  try {
    producer.send(message);
    LOGGER.debug(""String_Node_Str"",event,message.key(),topic);
    metricHelper.markSentMessage(topic,event);
  }
 catch (  Throwable t) {
    LOGGER.error(""String_Node_Str"",event,message.key(),topic,t);
    metricHelper.markErroredWhileSendingMessage(topic,event);
  }
}",0.8903954802259887
36389,"@Test public void markErroredWhileSendingMessage_markTwoMeters(){
  final String prefix=""String_Node_Str"";
  final KafkaMetricHelper kafkaMetricHelper=new KafkaMetricHelper(metricRegistry,prefix);
  kafkaMetricHelper.markErroredWhileSendingMessage(""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(meter,times(2)).mark();
}","@Test public void markErroredWhileSendingMessage_markTwoMeters(){
  final String prefix=""String_Node_Str"";
  final KafkaMetricHelper kafkaMetricHelper=new KafkaMetricHelper(metricRegistry,prefix);
  kafkaMetricHelper.markErroredWhileSendingMessage(""String_Node_Str"",""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(meter,times(3)).mark();
}",0.919042189281642
36390,"@Test public void markSentMessage_markTwoMeters(){
  final String prefix=""String_Node_Str"";
  final KafkaMetricHelper kafkaMetricHelper=new KafkaMetricHelper(metricRegistry,prefix);
  kafkaMetricHelper.markSentMessage(""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(meter,times(2)).mark();
}","@Test public void markSentMessage_markTwoMeters(){
  final String prefix=""String_Node_Str"";
  final KafkaMetricHelper kafkaMetricHelper=new KafkaMetricHelper(metricRegistry,prefix);
  kafkaMetricHelper.markSentMessage(""String_Node_Str"",""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(metricRegistry).meter(""String_Node_Str"");
  verify(meter,times(3)).mark();
}",0.9130966952264382
36391,"/** 
 * Bind to the LDAP server for authentication. 
 * @param username
 * @param credential
 * @return true if the bind for authentication succeeded
 * @throws NamingException
 */
private boolean createLdapInitContext(String username,Object credential) throws Exception {
  bindDN=(String)options.get(BIND_DN);
  bindCredential=(String)options.get(BIND_CREDENTIAL);
  if ((bindCredential != null) && Util.isPasswordCommand(bindCredential))   bindCredential=new String(Util.loadPassword(bindCredential));
  String securityDomain=(String)options.get(SECURITY_DOMAIN_OPT);
  if (securityDomain != null) {
    ObjectName serviceName=new ObjectName(securityDomain);
    char[] tmp=DecodeAction.decode(bindCredential,serviceName);
    bindCredential=new String(tmp);
  }
  if (bindCredential != null && SecurityVaultUtil.isVaultFormat(bindCredential)) {
    bindCredential=SecurityVaultUtil.getValueAsString(bindCredential);
  }
  baseDN=(String)options.get(BASE_CTX_DN);
  baseFilter=(String)options.get(BASE_FILTER_OPT);
  roleFilter=(String)options.get(ROLE_FILTER_OPT);
  roleAttributeID=(String)options.get(ROLE_ATTRIBUTE_ID_OPT);
  if (roleAttributeID == null)   roleAttributeID=""String_Node_Str"";
  String roleAttributeIsDNOption=(String)options.get(ROLE_ATTRIBUTE_IS_DN_OPT);
  roleAttributeIsDN=Boolean.valueOf(roleAttributeIsDNOption).booleanValue();
  roleNameAttributeID=(String)options.get(ROLE_NAME_ATTRIBUTE_ID_OPT);
  if (roleNameAttributeID == null)   roleNameAttributeID=""String_Node_Str"";
  referralUserAttributeIDToCheck=(String)options.get(REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK);
  String parseRoleNameFromDNOption=(String)options.get(PARSE_ROLE_NAME_FROM_DN_OPT);
  parseRoleNameFromDN=Boolean.valueOf(parseRoleNameFromDNOption).booleanValue();
  rolesCtxDN=(String)options.get(ROLES_CTX_DN_OPT);
  String strRecursion=(String)options.get(ROLE_RECURSION);
  try {
    recursion=Integer.parseInt(strRecursion);
  }
 catch (  NumberFormatException e) {
    PicketBoxLogger.LOGGER.debugFailureToParseNumberProperty(ROLE_RECURSION,0);
    recursion=0;
  }
  String timeLimit=(String)options.get(SEARCH_TIME_LIMIT_OPT);
  if (timeLimit != null) {
    try {
      searchTimeLimit=Integer.parseInt(timeLimit);
    }
 catch (    NumberFormatException e) {
      PicketBoxLogger.LOGGER.debugFailureToParseNumberProperty(SEARCH_TIME_LIMIT_OPT,this.searchTimeLimit);
    }
  }
  String scope=(String)options.get(SEARCH_SCOPE_OPT);
  if (""String_Node_Str"".equalsIgnoreCase(scope))   searchScope=SearchControls.OBJECT_SCOPE;
 else   if (""String_Node_Str"".equalsIgnoreCase(scope))   searchScope=SearchControls.ONELEVEL_SCOPE;
  if (""String_Node_Str"".equalsIgnoreCase(scope))   searchScope=SearchControls.SUBTREE_SCOPE;
  distinguishedNameAttribute=(String)options.get(DISTINGUISHED_NAME_ATTRIBUTE_OPT);
  if (distinguishedNameAttribute == null)   distinguishedNameAttribute=""String_Node_Str"";
  InitialLdapContext ctx=null;
  ClassLoader currentTCCL=SecurityActions.getContextClassLoader();
  try {
    if (currentTCCL != null)     SecurityActions.setContextClassLoader(null);
    ctx=constructInitialLdapContext(bindDN,bindCredential);
    String userDN=bindDNAuthentication(ctx,username,credential,baseDN,baseFilter);
    SearchControls constraints=new SearchControls();
    constraints.setSearchScope(searchScope);
    constraints.setTimeLimit(searchTimeLimit);
    rolesSearch(ctx,constraints,username,userDN,recursion,0);
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (ctx != null)     ctx.close();
    if (currentTCCL != null)     SecurityActions.setContextClassLoader(currentTCCL);
  }
  return true;
}","/** 
 * Bind to the LDAP server for authentication. 
 * @param username
 * @param credential
 * @return true if the bind for authentication succeeded
 * @throws NamingException
 */
private boolean createLdapInitContext(String username,Object credential) throws Exception {
  bindDN=(String)options.get(BIND_DN);
  bindCredential=(String)options.get(BIND_CREDENTIAL);
  if ((bindCredential != null) && Util.isPasswordCommand(bindCredential))   bindCredential=new String(Util.loadPassword(bindCredential));
  String securityDomain=(String)options.get(SECURITY_DOMAIN_OPT);
  if (securityDomain != null) {
    ObjectName serviceName=new ObjectName(securityDomain);
    char[] tmp=DecodeAction.decode(bindCredential,serviceName);
    bindCredential=new String(tmp);
  }
  if (bindCredential != null && SecurityVaultUtil.isVaultFormat(bindCredential)) {
    bindCredential=SecurityVaultUtil.getValueAsString(bindCredential);
  }
  baseDN=(String)options.get(BASE_CTX_DN);
  baseFilter=(String)options.get(BASE_FILTER_OPT);
  roleFilter=(String)options.get(ROLE_FILTER_OPT);
  roleAttributeID=(String)options.get(ROLE_ATTRIBUTE_ID_OPT);
  if (roleAttributeID == null)   roleAttributeID=""String_Node_Str"";
  String roleAttributeIsDNOption=(String)options.get(ROLE_ATTRIBUTE_IS_DN_OPT);
  roleAttributeIsDN=Boolean.valueOf(roleAttributeIsDNOption).booleanValue();
  roleNameAttributeID=(String)options.get(ROLE_NAME_ATTRIBUTE_ID_OPT);
  if (roleNameAttributeID == null)   roleNameAttributeID=""String_Node_Str"";
  referralUserAttributeIDToCheck=(String)options.get(REFERRAL_USER_ATTRIBUTE_ID_TO_CHECK);
  String parseRoleNameFromDNOption=(String)options.get(PARSE_ROLE_NAME_FROM_DN_OPT);
  parseRoleNameFromDN=Boolean.valueOf(parseRoleNameFromDNOption).booleanValue();
  rolesCtxDN=(String)options.get(ROLES_CTX_DN_OPT);
  String strRecursion=(String)options.get(ROLE_RECURSION);
  try {
    recursion=Integer.parseInt(strRecursion);
  }
 catch (  NumberFormatException e) {
    PicketBoxLogger.LOGGER.debugFailureToParseNumberProperty(ROLE_RECURSION,0);
    recursion=0;
  }
  String timeLimit=(String)options.get(SEARCH_TIME_LIMIT_OPT);
  if (timeLimit != null) {
    try {
      searchTimeLimit=Integer.parseInt(timeLimit);
    }
 catch (    NumberFormatException e) {
      PicketBoxLogger.LOGGER.debugFailureToParseNumberProperty(SEARCH_TIME_LIMIT_OPT,this.searchTimeLimit);
    }
  }
  String scope=(String)options.get(SEARCH_SCOPE_OPT);
  if (""String_Node_Str"".equalsIgnoreCase(scope))   searchScope=SearchControls.OBJECT_SCOPE;
 else   if (""String_Node_Str"".equalsIgnoreCase(scope))   searchScope=SearchControls.ONELEVEL_SCOPE;
  if (""String_Node_Str"".equalsIgnoreCase(scope))   searchScope=SearchControls.SUBTREE_SCOPE;
  distinguishedNameAttribute=(String)options.get(DISTINGUISHED_NAME_ATTRIBUTE_OPT);
  if (distinguishedNameAttribute == null)   distinguishedNameAttribute=""String_Node_Str"";
  InitialLdapContext ctx=null;
  ClassLoader currentTCCL=SecurityActions.getContextClassLoader();
  try {
    if (currentTCCL != null)     SecurityActions.setContextClassLoader(null);
    ctx=constructInitialLdapContext(bindDN,bindCredential);
    String userDN=bindDNAuthentication(ctx,username,credential,baseDN,baseFilter);
    SearchControls constraints=new SearchControls();
    constraints.setSearchScope(searchScope);
    constraints.setTimeLimit(searchTimeLimit);
    constraints.setReturningAttributes(new String[0]);
    rolesSearch(ctx,constraints,username,userDN,recursion,0);
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (ctx != null)     ctx.close();
    if (currentTCCL != null)     SecurityActions.setContextClassLoader(currentTCCL);
  }
  return true;
}",0.9924770893174668
36392,"/** 
 * @param ctx - the context to search from
 * @param user - the input username
 * @param credential - the bind credential
 * @param baseDN - base DN to search the ctx from
 * @param filter - the search filter string
 * @return the userDN string for the successful authentication 
 * @throws NamingException
 */
protected String bindDNAuthentication(InitialLdapContext ctx,String user,Object credential,String baseDN,String filter) throws NamingException {
  SearchControls constraints=new SearchControls();
  constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
  constraints.setTimeLimit(searchTimeLimit);
  String attrList[]={distinguishedNameAttribute};
  constraints.setReturningAttributes(attrList);
  NamingEnumeration results=null;
  Object[] filterArgs={user};
  LdapContext ldapCtx=ctx;
  boolean referralsLeft=true;
  SearchResult sr=null;
  while (referralsLeft) {
    try {
      results=ldapCtx.search(baseDN,filter,filterArgs,constraints);
      while (results.hasMore()) {
        sr=(SearchResult)results.next();
        break;
      }
      referralsLeft=false;
    }
 catch (    ReferralException e) {
      ldapCtx=(LdapContext)e.getReferralContext();
      if (results != null) {
        results.close();
      }
    }
  }
  if (sr == null) {
    results.close();
    throw PicketBoxMessages.MESSAGES.failedToFindBaseContextDN(baseDN);
  }
  String name=sr.getName();
  String userDN=null;
  Attributes attrs=sr.getAttributes();
  if (attrs != null) {
    Attribute dn=attrs.get(distinguishedNameAttribute);
    if (dn != null) {
      userDN=(String)dn.get();
    }
  }
  if (userDN == null) {
    if (sr.isRelative() == true) {
      userDN=name + (""String_Node_Str"".equals(baseDN) ? ""String_Node_Str"" : ""String_Node_Str"" + baseDN);
    }
 else {
      throw PicketBoxMessages.MESSAGES.unableToFollowReferralForAuth(name);
    }
  }
  results.close();
  results=null;
  if (isPasswordValidated) {
    InitialLdapContext userCtx=constructInitialLdapContext(userDN,credential);
    userCtx.close();
  }
  return userDN;
}","/** 
 * @param ctx - the context to search from
 * @param user - the input username
 * @param credential - the bind credential
 * @param baseDN - base DN to search the ctx from
 * @param filter - the search filter string
 * @return the userDN string for the successful authentication 
 * @throws NamingException
 */
protected String bindDNAuthentication(InitialLdapContext ctx,String user,Object credential,String baseDN,String filter) throws NamingException {
  SearchControls constraints=new SearchControls();
  constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
  constraints.setTimeLimit(searchTimeLimit);
  String attrList[]={distinguishedNameAttribute};
  constraints.setReturningAttributes(attrList);
  NamingEnumeration results=null;
  Object[] filterArgs={user};
  LdapContext ldapCtx=ctx;
  boolean referralsLeft=true;
  SearchResult sr=null;
  while (referralsLeft) {
    try {
      results=ldapCtx.search(baseDN,filter,filterArgs,constraints);
      while (results.hasMore()) {
        sr=(SearchResult)results.next();
        break;
      }
      referralsLeft=false;
    }
 catch (    ReferralException e) {
      ldapCtx=(LdapContext)e.getReferralContext();
      if (results != null) {
        results.close();
      }
    }
  }
  if (sr == null) {
    results.close();
    throw PicketBoxMessages.MESSAGES.failedToFindBaseContextDN(baseDN);
  }
  String name=sr.getName();
  String userDN=null;
  Attributes attrs=sr.getAttributes();
  if (attrs != null) {
    Attribute dn=attrs.get(distinguishedNameAttribute);
    if (dn != null) {
      userDN=(String)dn.get();
    }
  }
  if (userDN == null) {
    if (sr.isRelative() == true) {
      userDN=new CompositeName(name).get(0) + (""String_Node_Str"".equals(baseDN) ? ""String_Node_Str"" : ""String_Node_Str"" + baseDN);
    }
 else {
      throw PicketBoxMessages.MESSAGES.unableToFollowReferralForAuth(name);
    }
  }
  results.close();
  results=null;
  if (isPasswordValidated) {
    InitialLdapContext userCtx=constructInitialLdapContext(userDN,credential);
    userCtx.close();
  }
  return userDN;
}",0.992248062015504
36393,"/** 
 * Create the set of roles the user belongs to by querying a database
 * @param username - name of the user
 * @param roleGroup - group containing the user's roles
 * @param dsJndiName - JNDI name of the datasource
 * @param rolesQuery - prepared statement to query
 * @param suspendResume - flag to indicate if transactions should be suspended/resumed
 * @param tm - transaction manager
 */
static void addRolesToGroup(String username,RoleGroup roleGroup,String dsJndiName,String rolesQuery,boolean suspendResume,TransactionManager tm){
  Connection conn=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  if (suspendResume) {
    if (tm == null)     throw PicketBoxMessages.MESSAGES.invalidNullTransactionManager();
  }
  Transaction tx=null;
  if (suspendResume) {
    try {
      tx=tm.suspend();
    }
 catch (    SystemException e) {
      throw new RuntimeException(e);
    }
  }
  try {
    InitialContext ctx=new InitialContext();
    DataSource ds=(DataSource)ctx.lookup(dsJndiName);
    conn=ds.getConnection();
    PicketBoxLogger.LOGGER.traceExecuteQuery(rolesQuery,username);
    ps=conn.prepareStatement(rolesQuery);
    try {
      ps.setString(1,username);
    }
 catch (    ArrayIndexOutOfBoundsException ignore) {
    }
    rs=ps.executeQuery();
    if (!rs.next()) {
      PicketBoxLogger.LOGGER.traceQueryWithEmptyResult();
    }
    do {
      String name=rs.getString(1);
      roleGroup.addRole(new SimpleRole(name));
    }
 while (rs.next());
  }
 catch (  NamingException ex) {
    throw new IllegalArgumentException(PicketBoxMessages.MESSAGES.failedToLookupDataSourceMessage(dsJndiName),ex);
  }
catch (  SQLException ex) {
    throw new IllegalArgumentException(PicketBoxMessages.MESSAGES.failedToProcessQueryMessage(),ex);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (ps != null) {
      try {
        ps.close();
      }
 catch (      SQLException e) {
      }
    }
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      Exception ex) {
      }
    }
    if (suspendResume) {
      try {
        tm.resume(tx);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
}","/** 
 * Create the set of roles the user belongs to by querying a database
 * @param username - name of the user
 * @param roleGroup - group containing the user's roles
 * @param dsJndiName - JNDI name of the datasource
 * @param rolesQuery - prepared statement to query
 * @param suspendResume - flag to indicate if transactions should be suspended/resumed
 * @param tm - transaction manager
 */
static void addRolesToGroup(String username,RoleGroup roleGroup,String dsJndiName,String rolesQuery,boolean suspendResume,TransactionManager tm){
  Connection conn=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  if (suspendResume) {
    if (tm == null)     throw PicketBoxMessages.MESSAGES.invalidNullTransactionManager();
  }
  Transaction tx=null;
  if (suspendResume) {
    try {
      tx=tm.suspend();
    }
 catch (    SystemException e) {
      throw new RuntimeException(e);
    }
  }
  try {
    InitialContext ctx=new InitialContext();
    DataSource ds=(DataSource)ctx.lookup(dsJndiName);
    conn=ds.getConnection();
    PicketBoxLogger.LOGGER.traceExecuteQuery(rolesQuery,username);
    ps=conn.prepareStatement(rolesQuery);
    try {
      ps.setString(1,username);
    }
 catch (    ArrayIndexOutOfBoundsException ignore) {
    }
    rs=ps.executeQuery();
    if (!rs.next()) {
      PicketBoxLogger.LOGGER.traceQueryWithEmptyResult();
    }
 else {
      do {
        String name=rs.getString(1);
        roleGroup.addRole(new SimpleRole(name));
      }
 while (rs.next());
    }
  }
 catch (  NamingException ex) {
    throw new IllegalArgumentException(PicketBoxMessages.MESSAGES.failedToLookupDataSourceMessage(dsJndiName),ex);
  }
catch (  SQLException ex) {
    throw new IllegalArgumentException(PicketBoxMessages.MESSAGES.failedToProcessQueryMessage(),ex);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (ps != null) {
      try {
        ps.close();
      }
 catch (      SQLException e) {
      }
    }
    if (conn != null) {
      try {
        conn.close();
      }
 catch (      Exception ex) {
      }
    }
    if (suspendResume) {
      try {
        tm.resume(tx);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
}",0.9916336415675914
36394,"@Override public boolean isValid(Principal principal,Object credential,Subject activeSubject){
  DomainInfo cachedEntry=getCacheInfo(principal);
  PicketBoxLogger.LOGGER.traceBeginIsValid(principal,cachedEntry != null ? cachedEntry.toString() : null);
  boolean isValid=false;
  if (cachedEntry != null) {
    isValid=validateCache(cachedEntry,credential,activeSubject);
  }
  if (!isValid)   isValid=authenticate(principal,credential,activeSubject);
  PicketBoxLogger.LOGGER.traceEndIsValid(isValid);
  return isValid;
}","@Override public boolean isValid(Principal principal,Object credential,Subject activeSubject){
  DomainInfo cachedEntry=getCacheInfo(principal != null ? principal : new org.jboss.security.SimplePrincipal(""String_Node_Str""));
  PicketBoxLogger.LOGGER.traceBeginIsValid(principal,cachedEntry != null ? cachedEntry.toString() : null);
  boolean isValid=false;
  if (cachedEntry != null) {
    isValid=validateCache(cachedEntry,credential,activeSubject);
  }
  if (!isValid)   isValid=authenticate(principal,credential,activeSubject);
  PicketBoxLogger.LOGGER.traceEndIsValid(isValid);
  return isValid;
}",0.928698752228164
36395,"/** 
 * Updates the cache either by inserting a new entry or by replacing an invalid (expired) entry.
 * @param loginContext {@link LoginContext} of the authentication
 * @param subject {@link Subject} resulted from JAAS login
 * @param principal {@link Principal} representing the user's identity
 * @param credential user's proof of identity
 * @return authenticated {@link Subject}
 */
private Subject updateCache(LoginContext loginContext,Subject subject,Principal principal,Object credential){
  if (domainCache == null || principal == null)   return subject;
  DomainInfo info=new DomainInfo();
  info.loginContext=loginContext;
  info.subject=new Subject();
  SubjectActions.copySubject(subject,info.subject,true,this.deepCopySubjectOption);
  info.credential=credential;
  PicketBoxLogger.LOGGER.traceUpdateCache(SubjectActions.toString(subject),SubjectActions.toString(info.subject));
  Set<Group> subjectGroups=subject.getPrincipals(Group.class);
  Iterator<Group> iter=subjectGroups.iterator();
  while (iter.hasNext()) {
    Group grp=iter.next();
    String name=grp.getName();
    if (name.equals(""String_Node_Str"")) {
      Enumeration<? extends Principal> members=grp.members();
      if (members.hasMoreElements())       info.callerPrincipal=members.nextElement();
    }
  }
  if (info.callerPrincipal == null) {
    Set<Principal> subjectPrincipals=subject.getPrincipals(Principal.class);
    Iterator<? extends Principal> iterPrincipals=subjectPrincipals.iterator();
    while (iterPrincipals.hasNext()) {
      Principal p=iterPrincipals.next();
      if (!(p instanceof Group)) {
        info.callerPrincipal=p;
        break;
      }
    }
  }
  domainCache.put(principal,info);
  PicketBoxLogger.LOGGER.traceInsertedCacheInfo(info.toString());
  return info.subject;
}","/** 
 * Updates the cache either by inserting a new entry or by replacing an invalid (expired) entry.
 * @param loginContext {@link LoginContext} of the authentication
 * @param subject {@link Subject} resulted from JAAS login
 * @param principal {@link Principal} representing the user's identity
 * @param credential user's proof of identity
 * @return authenticated {@link Subject}
 */
private Subject updateCache(LoginContext loginContext,Subject subject,Principal principal,Object credential){
  if (domainCache == null)   return subject;
  DomainInfo info=new DomainInfo();
  info.loginContext=loginContext;
  info.subject=new Subject();
  SubjectActions.copySubject(subject,info.subject,true,this.deepCopySubjectOption);
  info.credential=credential;
  PicketBoxLogger.LOGGER.traceUpdateCache(SubjectActions.toString(subject),SubjectActions.toString(info.subject));
  Set<Group> subjectGroups=subject.getPrincipals(Group.class);
  Iterator<Group> iter=subjectGroups.iterator();
  while (iter.hasNext()) {
    Group grp=iter.next();
    String name=grp.getName();
    if (name.equals(""String_Node_Str"")) {
      Enumeration<? extends Principal> members=grp.members();
      if (members.hasMoreElements())       info.callerPrincipal=members.nextElement();
    }
  }
  if (info.callerPrincipal == null) {
    Set<Principal> subjectPrincipals=subject.getPrincipals(Principal.class);
    Iterator<? extends Principal> iterPrincipals=subjectPrincipals.iterator();
    while (iterPrincipals.hasNext()) {
      Principal p=iterPrincipals.next();
      if (!(p instanceof Group)) {
        info.callerPrincipal=p;
        break;
      }
    }
  }
  domainCache.put(principal != null ? principal : new org.jboss.security.SimplePrincipal(""String_Node_Str""),info);
  PicketBoxLogger.LOGGER.traceInsertedCacheInfo(info.toString());
  return info.subject;
}",0.9722603680307608
36396,"/** 
 * Test {CLASS}org.jboss.security.plugins.FilePassword
 * @throws Exception
 */
public void testFilePassword() throws Exception {
  String passwordCmd=""String_Node_Str"";
  passwordCmd=StringPropertyReplacer.replaceProperties(passwordCmd);
  char[] password=Util.loadPassword(passwordCmd);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
}","/** 
 * Test {CLASS}org.jboss.security.plugins.FilePassword
 * @throws Exception
 */
public void testFilePassword() throws Exception {
  String passwordCmd=""String_Node_Str"";
  passwordCmd=StringPropertyReplacer.replaceProperties(passwordCmd);
  if (!Util.isPasswordCommand(passwordCmd)) {
    fail(passwordCmd + ""String_Node_Str"");
  }
  char[] password=Util.loadPassword(passwordCmd);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
}",0.89198606271777
36397,"/** 
 * Test {EXT}org.jboss.test.security.helpers.ExecPasswordCmd
 * @throws Exception
 */
public void testExtPassword() throws Exception {
  String passwordCmd=buildExtCommand(""String_Node_Str"");
  log.info(""String_Node_Str"" + passwordCmd);
  char[] password=Util.loadPassword(passwordCmd);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
}","/** 
 * Test {EXT}org.jboss.test.security.helpers.ExecPasswordCmd
 * @throws Exception
 */
public void testExtPassword() throws Exception {
  String passwordCmd=buildExtCommand(""String_Node_Str"");
  log.info(""String_Node_Str"" + passwordCmd);
  if (!Util.isPasswordCommand(passwordCmd)) {
    fail(passwordCmd + ""String_Node_Str"");
  }
  char[] password=Util.loadPassword(passwordCmd);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
}",0.8914819136522754
36398,"/** 
 * Test {CMD}org.jboss.test.security.helpers.ExecPasswordCmd
 * @throws Exception
 */
public void testCmdPassword() throws Exception {
  String passwordCmd=buildExtCommand(""String_Node_Str"",',');
  log.info(""String_Node_Str"" + passwordCmd);
  char[] password=Util.loadPassword(passwordCmd);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  String passwordCmdWithParam=passwordCmd + ""String_Node_Str"";
  log.info(""String_Node_Str"" + passwordCmdWithParam);
  password=Util.loadPassword(passwordCmdWithParam);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  passwordCmdWithParam=passwordCmd + ""String_Node_Str"";
  log.info(""String_Node_Str"" + passwordCmdWithParam);
  password=Util.loadPassword(passwordCmdWithParam);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  String passwordCmdWithTwoParams=passwordCmd + ""String_Node_Str"";
  log.info(""String_Node_Str"" + passwordCmdWithTwoParams);
  password=Util.loadPassword(passwordCmdWithTwoParams);
  assertTrue(""String_Node_Str"",Arrays.equals(new String(password).substring(0,""String_Node_Str"".length()).toCharArray(),""String_Node_Str"".toCharArray()));
  assertTrue(""String_Node_Str"",new String(password).substring(""String_Node_Str"".length()).matches(""String_Node_Str""));
}","/** 
 * Test {CMD}org.jboss.test.security.helpers.ExecPasswordCmd
 * @throws Exception
 */
public void testCmdPassword() throws Exception {
  String passwordCmd=buildExtCommand(""String_Node_Str"",',');
  if (!Util.isPasswordCommand(passwordCmd)) {
    fail(passwordCmd + ""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + passwordCmd);
  char[] password=Util.loadPassword(passwordCmd);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  String passwordCmdWithParam=passwordCmd + ""String_Node_Str"";
  log.info(""String_Node_Str"" + passwordCmdWithParam);
  password=Util.loadPassword(passwordCmdWithParam);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  passwordCmdWithParam=passwordCmd + ""String_Node_Str"";
  log.info(""String_Node_Str"" + passwordCmdWithParam);
  password=Util.loadPassword(passwordCmdWithParam);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  String passwordCmdWithTwoParams=passwordCmd + ""String_Node_Str"";
  log.info(""String_Node_Str"" + passwordCmdWithTwoParams);
  password=Util.loadPassword(passwordCmdWithTwoParams);
  assertTrue(""String_Node_Str"",Arrays.equals(new String(password).substring(0,""String_Node_Str"".length()).toCharArray(),""String_Node_Str"".toCharArray()));
  assertTrue(""String_Node_Str"",new String(password).substring(""String_Node_Str"".length()).matches(""String_Node_Str""));
}",0.966702470461869
36399,"/** 
 * Test {CLASS}org.jboss.security.plugins.TmpFilePassword
 * @throws Exception
 */
public void testTmpFilePassword() throws Exception {
  String passwordCmd=""String_Node_Str"";
  passwordCmd=StringPropertyReplacer.replaceProperties(passwordCmd);
  char[] password=Util.loadPassword(passwordCmd);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
}","/** 
 * Test {CLASS}org.jboss.security.plugins.TmpFilePassword
 * @throws Exception
 */
public void testTmpFilePassword() throws Exception {
  String passwordCmd=""String_Node_Str"";
  passwordCmd=StringPropertyReplacer.replaceProperties(passwordCmd);
  if (!Util.isPasswordCommand(passwordCmd)) {
    fail(passwordCmd + ""String_Node_Str"");
  }
  char[] password=Util.loadPassword(passwordCmd);
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
}",0.8934707903780069
36400,"public void testExtPasswordCache() throws Exception {
  ExternalPasswordCache.getExternalPasswordCacheInstance().reset();
  String passwordCmd=buildExtCommand(""String_Node_Str"");
  char[] password=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  char[] cachedPassword=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 1);
  cachedPassword=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(cachedPassword,""String_Node_Str"".toCharArray()));
  cachedPassword=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(cachedPassword,""String_Node_Str"".toCharArray()));
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 2);
  cachedPassword=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(cachedPassword,""String_Node_Str"".toCharArray()));
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 2);
}","public void testExtPasswordCache() throws Exception {
  ExternalPasswordCache.getExternalPasswordCacheInstance().reset();
  String passwordCmd=buildExtCommand(""String_Node_Str"");
  char[] password=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  if (!Util.isPasswordCommand(passwordCmd)) {
    fail(passwordCmd + ""String_Node_Str"");
  }
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  char[] cachedPassword=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(password,""String_Node_Str"".toCharArray()));
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 1);
  cachedPassword=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(cachedPassword,""String_Node_Str"".toCharArray()));
  cachedPassword=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(cachedPassword,""String_Node_Str"".toCharArray()));
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 2);
  cachedPassword=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(cachedPassword,""String_Node_Str"".toCharArray()));
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 2);
}",0.9669156883671292
36401,"public void testExtPasswordCacheTimeOut() throws Exception {
  ExternalPasswordCache.getExternalPasswordCacheInstance().reset();
  final String TO=""String_Node_Str"";
  String passwordCmd=buildExtCommand(""String_Node_Str"" + TO);
  char[] password4=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"" + TO,Arrays.equals(new String(password4).substring(0,9).toCharArray(),""String_Node_Str"".toCharArray()));
  char[] cachedPassword4_2=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"" + TO + ""String_Node_Str"",Arrays.equals(password4,cachedPassword4_2));
  long WAIT=800;
  Thread.sleep(WAIT);
  char[] cachedPassword4_3=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertFalse(""String_Node_Str"" + TO + ""String_Node_Str""+ WAIT,Arrays.equals(password4,cachedPassword4_3));
  char[] cachedPassword5=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(new String(cachedPassword5).substring(0,9).toCharArray(),""String_Node_Str"".toCharArray()));
  cachedPassword5=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 2);
  cachedPassword5=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 2);
}","public void testExtPasswordCacheTimeOut() throws Exception {
  ExternalPasswordCache.getExternalPasswordCacheInstance().reset();
  final String TO=""String_Node_Str"";
  String passwordCmd=buildExtCommand(""String_Node_Str"" + TO);
  if (!Util.isPasswordCommand(passwordCmd)) {
    fail(passwordCmd + ""String_Node_Str"");
  }
  char[] password4=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"" + TO,Arrays.equals(new String(password4).substring(0,9).toCharArray(),""String_Node_Str"".toCharArray()));
  char[] cachedPassword4_2=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"" + TO + ""String_Node_Str"",Arrays.equals(password4,cachedPassword4_2));
  long WAIT=800;
  Thread.sleep(WAIT);
  char[] cachedPassword4_3=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertFalse(""String_Node_Str"" + TO + ""String_Node_Str""+ WAIT,Arrays.equals(password4,cachedPassword4_3));
  char[] cachedPassword5=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",Arrays.equals(new String(cachedPassword5).substring(0,9).toCharArray(),""String_Node_Str"".toCharArray()));
  cachedPassword5=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 2);
  cachedPassword5=Util.loadPassword(passwordCmd + ""String_Node_Str"");
  assertTrue(""String_Node_Str"",ExternalPasswordCache.getExternalPasswordCacheInstance().getCachedPasswordsCount() == 2);
}",0.9686763219939374
36402,"/** 
 * @see SubjectFactory#createSubject(String)
 */
public Subject createSubject(String securityDomainName){
  if (securityManagement == null) {
    log.warn(""String_Node_Str"");
    securityManagement=new DefaultSecurityManagement(new JBossCallbackHandler());
  }
  Subject subject=new Subject();
  Principal principal=SubjectActions.getPrincipal();
  AuthenticationManager authenticationManager=securityManagement.getAuthenticationManager(securityDomainName);
  if (authenticationManager == null) {
    String defaultSecurityDomain=SecurityConstants.DEFAULT_APPLICATION_POLICY;
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"" + securityDomainName + ""String_Node_Str""+ defaultSecurityDomain);
    }
    authenticationManager=securityManagement.getAuthenticationManager(defaultSecurityDomain);
  }
  if (authenticationManager.isValid(principal,SubjectActions.getCredential(),subject) == false)   throw new SecurityException(""String_Node_Str"" + principal);
  return subject;
}","/** 
 * @see SubjectFactory#createSubject(String)
 */
public Subject createSubject(String securityDomainName){
  if (securityManagement == null) {
    log.warn(""String_Node_Str"");
    securityManagement=new DefaultSecurityManagement(new JBossCallbackHandler());
  }
  Subject subject=new Subject();
  Principal principal=SubjectActions.getPrincipal();
  AuthenticationManager authenticationManager=securityManagement.getAuthenticationManager(securityDomainName);
  if (authenticationManager == null) {
    String defaultSecurityDomain=SecurityConstants.DEFAULT_APPLICATION_POLICY;
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"" + securityDomainName + ""String_Node_Str""+ defaultSecurityDomain);
    }
    authenticationManager=securityManagement.getAuthenticationManager(defaultSecurityDomain);
  }
  ClassLoader tccl=SubjectActions.getContextClassLoader();
  try {
    SubjectActions.setContextClassLoader(this.getClass().getClassLoader());
    if (!authenticationManager.isValid(principal,SubjectActions.getCredential(),subject))     throw new SecurityException(""String_Node_Str"" + principal);
  }
  finally {
    SubjectActions.setContextClassLoader(tccl);
  }
  return subject;
}",0.8838268792710706
36403,"public RiftApp(){
  super();
  Hmd.initialize();
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException e) {
    throw new IllegalStateException(e);
  }
  hmd=openFirstHmd();
  if (null == hmd) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  hmdDesc=hmd.getDesc();
  if (0 == hmd.startSensor(ovrSensorCap_Orientation,0)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  for (int eye=0; eye < 2; ++eye) {
    fovPorts[eye]=hmdDesc.DefaultEyeFov[eye];
    projections[eye]=RiftUtils.toMatrix4f(Hmd.getPerspectiveProjection(fovPorts[eye],0.1f,1000000f,true));
    Texture texture=eyeTextures[eye]=new Texture();
    TextureHeader header=texture.Header;
    header.TextureSize=hmd.getFovTextureSize(eye,fovPorts[eye],1.0f);
    header.RenderViewport.Size=header.TextureSize;
    header.RenderViewport.Pos=new OvrVector2i(0,0);
  }
}","public RiftApp(){
  super();
  Hmd.initialize();
  try {
    Thread.sleep(400);
  }
 catch (  InterruptedException e) {
    throw new IllegalStateException(e);
  }
  hmd=openFirstHmd();
  if (null == hmd) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  hmdDesc=hmd.getDesc();
  if (0 == hmd.startSensor(ovrSensorCap_Orientation,0)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  for (int eye=0; eye < 2; ++eye) {
    fovPorts[eye]=hmdDesc.DefaultEyeFov[eye];
    projections[eye]=RiftUtils.toMatrix4f(Hmd.getPerspectiveProjection(fovPorts[eye],0.1f,1000000f,true));
    Texture texture=eyeTextures[eye]=new Texture();
    TextureHeader header=texture.Header;
    header.TextureSize=hmd.getFovTextureSize(eye,fovPorts[eye],1.0f);
    header.RenderViewport.Size=header.TextureSize;
    header.RenderViewport.Pos=new OvrVector2i(0,0);
  }
}",0.9988505747126436
36404,"@Override public void prepare(Map stormConf,TopologyContext context){
}","@Override public void prepare(Map stormConf,TopologyContext context){
  pattern=Pattern.compile(ptnString);
}",0.7888888888888889
36405,"@Override public IBenchmark parseOptions(Map options){
  options.put(PATTERN_STRING,ptnString);
  super.parseOptions(options);
  spoutNum=BenchmarkUtils.getInt(options,SPOUT_NUM,spoutNum);
  matBoltNum=BenchmarkUtils.getInt(options,FM_NUM,matBoltNum);
  cntBoltNum=BenchmarkUtils.getInt(options,CM_NUM,cntBoltNum);
  spout=new KafkaSpout(KafkaUtils.getSpoutConfig(options,new SchemeAsMultiScheme(new StringScheme())));
  return this;
}","@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  spoutNum=BenchmarkUtils.getInt(options,SPOUT_NUM,spoutNum);
  matBoltNum=BenchmarkUtils.getInt(options,FM_NUM,matBoltNum);
  cntBoltNum=BenchmarkUtils.getInt(options,CM_NUM,cntBoltNum);
  ptnString=(String)Utils.get(options,PATTERN_STRING,ptnString);
  spout=new KafkaSpout(KafkaUtils.getSpoutConfig(options,new SchemeAsMultiScheme(new StringScheme())));
  return this;
}",0.2953020134228188
36406,"@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  String server=(String)options.get(SERVER);
  if (null == server) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer port=(Integer)options.get(PORT);
  if (null == port) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  kafkaConfig=KafkaUtils.getTridentKafkaConfig(options,new SchemeAsMultiScheme(new StringScheme()));
  metrics=new DRPCMetrics(FUNCTION,ARGS,server,port);
  return this;
}","@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  String server=(String)options.get(SERVER);
  if (null == server) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer port=(Integer)options.get(PORT);
  if (null == port) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  spout=new TransactionalTridentKafkaSpout(KafkaUtils.getTridentKafkaConfig(options,new SchemeAsMultiScheme(new StringScheme())));
  metrics=new DRPCMetrics(FUNCTION,ARGS,server,port);
  return this;
}",0.956766917293233
36407,"@Override public IBenchmark buildTopology(){
  TridentTopology trident=new TridentTopology();
  TransactionalTridentKafkaSpout kafkaSpout=new TransactionalTridentKafkaSpout(kafkaConfig);
  TridentState state=trident.newStream(kafkaConfig.clientId,kafkaSpout).shuffle().each(new Fields(""String_Node_Str""),new Extract(Arrays.asList(Item.URL)),new Fields(""String_Node_Str"")).groupBy(new Fields(""String_Node_Str"")).persistentAggregate(new MemoryMapState.Factory(),new Count(),new Fields(""String_Node_Str""));
  trident.newDRPCStream(FUNCTION,null).stateQuery(state,new Fields(""String_Node_Str""),new MapGet(),new Fields(""String_Node_Str""));
  topology=trident.build();
  return this;
}","@Override public IBenchmark buildTopology(){
  TridentTopology trident=new TridentTopology();
  TridentState state=trident.newStream(""String_Node_Str"",spout).shuffle().each(new Fields(StringScheme.STRING_SCHEME_KEY),new Extract(Arrays.asList(Item.URL)),new Fields(""String_Node_Str"")).groupBy(new Fields(""String_Node_Str"")).persistentAggregate(new MemoryMapState.Factory(),new Count(),new Fields(""String_Node_Str""));
  trident.newDRPCStream(FUNCTION,null).stateQuery(state,new Fields(""String_Node_Str""),new MapGet(),new Fields(""String_Node_Str""));
  topology=trident.build();
  return this;
}",0.8283464566929134
36408,"void writeHeader(PrintWriter writer){
  writer.println(Utils.join(header,""String_Node_Str""));
  writer.flush();
}","void writeHeader(PrintWriter writer){
  LOG.info(""String_Node_Str"");
  writer.println(Utils.join(header,""String_Node_Str""));
  writer.flush();
}",0.8793774319066148
36409,"void updateExecutorStats(TopologyInfo info,MetricsState state,long now,boolean firstTime){
  long overallTransferred=0;
  long spoutTransferred=0;
  long spoutAcked=0;
  int executorsWithMetircs=0;
  int spoutExecutors=0;
  Map<String,List<Double>> comLat=new HashMap<String,List<Double>>();
  for (  ExecutorSummary es : info.get_executors()) {
    String id=es.get_component_id();
    if (Utils.isSystemId(id)) {
      continue;
    }
    ExecutorStats exeStats=es.get_stats();
    if (exeStats != null) {
      ExecutorSpecificStats specs=exeStats.get_specific();
      ComponentCommon common=Utils.getComponentCommon(topology,id);
      for (      String stream : common.get_streams().keySet()) {
        executorsWithMetircs++;
        long transferred=MetricsUtils.getTransferred(exeStats,ALL_TIME,stream);
        overallTransferred+=transferred;
        if (isSpout(specs)) {
          if (isDefaultStream(id) || isBatchStream(id)) {
            spoutExecutors++;
            spoutTransferred+=transferred;
            SpoutStats spStats=specs.get_spout();
            spoutAcked+=MetricsUtils.getSpoutAcked(spStats,ALL_TIME,stream);
            if (firstTime) {
              header.add(MetricsUtils.getSpoutAvgCompleteLatencyTitle(id));
            }
            double lat=MetricsUtils.getSpoutCompleteLatency(spStats,ALL_TIME,stream);
            MetricsUtils.addLatency(comLat,id,lat);
          }
        }
      }
    }
  }
  for (  String id : comLat.keySet()) {
    List<Double> latList=comLat.get(id);
    double avg=null == latList ? 0.0 : BenchmarkUtils.avg(latList);
    double max=null == latList ? 0.0 : BenchmarkUtils.max(latList);
    metrics.put(MetricsUtils.getSpoutAvgCompleteLatencyTitle(id),String.format(SPOUT_AVG_LATENCY_FORMAT,avg));
    metrics.put(MetricsUtils.getSpoutMaxCompleteLatencyTitle(id),String.format(SPOUT_MAX_LATENCY_FORMAT,max));
  }
  metrics.put(EXECUTORS_METRICS,Integer.toString(executorsWithMetircs));
  metrics.put(SPOUT_EXECUTORS,Integer.toString(spoutExecutors));
  long timeDiff=now - state.lastTime;
  long overallDiff=overallTransferred - state.overallTransferred;
  long spoutDiff=spoutTransferred - state.spoutTransferred;
  long throughput=(long)MetricsUtils.getThroughput(overallDiff,timeDiff);
  double throughputMB=(long)MetricsUtils.getThroughputMB(overallDiff,timeDiff,msgSize);
  long spoutThroughput=(long)MetricsUtils.getThroughput(spoutDiff,timeDiff);
  double spoutThroughputMB=(long)MetricsUtils.getThroughputMB(spoutDiff,timeDiff,msgSize);
  metrics.put(TRANSFERRED,Long.toString(overallDiff));
  metrics.put(THROUGHPUT,Long.toString(throughput));
  metrics.put(THROUGHPUT_MB,String.format(THROUGHPUT_MB_FORMAT,throughputMB));
  metrics.put(SPOUT_TRANSFERRED,Long.toString(spoutDiff));
  metrics.put(SPOUT_ACKED,Long.toString(spoutAcked));
  metrics.put(SPOUT_THROUGHPUT,Long.toString(spoutThroughput));
  metrics.put(SPOUT_THROUGHPUT_MB,String.format(SPOUT_THROUGHPUT_MB_FORMAT,spoutThroughputMB));
  state.overallTransferred=overallTransferred;
  state.spoutTransferred=spoutTransferred;
}","void updateExecutorStats(TopologyInfo info,MetricsState state,long now,boolean firstTime){
  long overallTransferred=0;
  long spoutTransferred=0;
  long spoutAcked=0;
  int executorsWithMetircs=0;
  int spoutExecutors=0;
  Map<String,List<Double>> comLat=new HashMap<String,List<Double>>();
  for (  ExecutorSummary es : info.get_executors()) {
    String id=es.get_component_id();
    LOG.debug(""String_Node_Str"" + id);
    if (Utils.isSystemId(id)) {
      LOG.debug(""String_Node_Str"" + id);
      continue;
    }
    ExecutorStats exeStats=es.get_stats();
    if (exeStats != null) {
      ExecutorSpecificStats specs=exeStats.get_specific();
      ComponentCommon common=Utils.getComponentCommon(topology,id);
      for (      String stream : common.get_streams().keySet()) {
        LOG.debug(""String_Node_Str"" + stream + ""String_Node_Str""+ id);
        executorsWithMetircs++;
        long transferred=MetricsUtils.getTransferred(exeStats,ALL_TIME,stream);
        overallTransferred+=transferred;
        if (isSpout(specs)) {
          if (isDefaultStream(stream) || isBatchStream(stream)) {
            spoutExecutors++;
            spoutTransferred+=transferred;
            SpoutStats spStats=specs.get_spout();
            spoutAcked+=MetricsUtils.getSpoutAcked(spStats,ALL_TIME,stream);
            if (firstTime) {
              header.add(MetricsUtils.getSpoutAvgCompleteLatencyTitle(id));
            }
            double lat=MetricsUtils.getSpoutCompleteLatency(spStats,ALL_TIME,stream);
            MetricsUtils.addLatency(comLat,id,lat);
          }
        }
      }
    }
 else {
      LOG.error(""String_Node_Str"" + id);
    }
  }
  for (  String id : comLat.keySet()) {
    List<Double> latList=comLat.get(id);
    double avg=null == latList ? 0.0 : BenchmarkUtils.avg(latList);
    double max=null == latList ? 0.0 : BenchmarkUtils.max(latList);
    metrics.put(MetricsUtils.getSpoutAvgCompleteLatencyTitle(id),String.format(SPOUT_AVG_LATENCY_FORMAT,avg));
    metrics.put(MetricsUtils.getSpoutMaxCompleteLatencyTitle(id),String.format(SPOUT_MAX_LATENCY_FORMAT,max));
  }
  metrics.put(EXECUTORS_METRICS,Integer.toString(executorsWithMetircs));
  metrics.put(SPOUT_EXECUTORS,Integer.toString(spoutExecutors));
  long timeDiff=now - state.lastTime;
  long overallDiff=overallTransferred - state.overallTransferred;
  long spoutDiff=spoutTransferred - state.spoutTransferred;
  long throughput=(long)MetricsUtils.getThroughput(overallDiff,timeDiff);
  double throughputMB=(long)MetricsUtils.getThroughputMB(overallDiff,timeDiff,msgSize);
  long spoutThroughput=(long)MetricsUtils.getThroughput(spoutDiff,timeDiff);
  double spoutThroughputMB=(long)MetricsUtils.getThroughputMB(spoutDiff,timeDiff,msgSize);
  metrics.put(TRANSFERRED,Long.toString(overallDiff));
  metrics.put(THROUGHPUT,Long.toString(throughput));
  metrics.put(THROUGHPUT_MB,String.format(THROUGHPUT_MB_FORMAT,throughputMB));
  metrics.put(SPOUT_TRANSFERRED,Long.toString(spoutDiff));
  metrics.put(SPOUT_ACKED,Long.toString(spoutAcked));
  metrics.put(SPOUT_THROUGHPUT,Long.toString(spoutThroughput));
  metrics.put(SPOUT_THROUGHPUT_MB,String.format(SPOUT_THROUGHPUT_MB_FORMAT,spoutThroughputMB));
  state.overallTransferred=overallTransferred;
  state.spoutTransferred=spoutTransferred;
}",0.9650063051702396
36410,"@Override public IMetrics setConfig(BenchmarkConfig benchConfig){
  config=benchConfig.getStormConfig();
  topoName=benchConfig.getTopologyName();
  pollInterval=BenchmarkUtils.getInt(config,METRICS_POLL_FREQ,DEFAULT_POLL_INTERVAL);
  totalTime=BenchmarkUtils.getInt(config,METRICS_TOTAL_TIME,DEFAULT_TOTAL_TIME);
  msgSize=BenchmarkUtils.getInt(config,BenchmarkConfig.MESSAGE_SIZE,DEFAULT_MESSAGE_SIZE);
  path=(String)Utils.get(config,METRICS_PATH,DEFAULT_PATH);
  return this;
}","@Override public IMetrics setConfig(BenchmarkConfig benchConfig){
  config=Utils.readStormConfig();
  topoName=(String)Utils.get(config,Config.TOPOLOGY_NAME,BenchmarkConfig.DEFAULT_TOPOLOGY_NAME);
  pollInterval=BenchmarkUtils.getInt(config,METRICS_POLL_FREQ,DEFAULT_POLL_INTERVAL);
  totalTime=BenchmarkUtils.getInt(config,METRICS_TOTAL_TIME,DEFAULT_TOTAL_TIME);
  msgSize=BenchmarkUtils.getInt(config,BenchmarkConfig.MESSAGE_SIZE,DEFAULT_MESSAGE_SIZE);
  path=(String)Utils.get(config,METRICS_PATH,DEFAULT_PATH);
  return this;
}",0.8675889328063241
36411,"boolean pollNimbus(Nimbus.Client client,long now,MetricsState state,PrintWriter writer) throws Exception {
  ClusterSummary cs=client.getClusterInfo();
  if (null == cs) {
    return false;
  }
  updateSupervisorStats(cs);
  TopologySummary ts=MetricsUtils.getTopologySummary(cs,topoName);
  if (null == ts) {
    throw new RuntimeException(""String_Node_Str"" + topoName);
  }
  updateTopologyStats(ts,state,now);
  TopologyInfo info=client.getTopologyInfo(ts.get_id());
  boolean firstTime=now == state.startTime;
  updateExecutorStats(info,state,now,firstTime);
  if (firstTime) {
    writeHeader(writer);
  }
  writeLine(writer);
  state.lastTime=now;
  return true;
}","boolean pollNimbus(Nimbus.Client client,long now,MetricsState state,PrintWriter writer) throws Exception {
  ClusterSummary cs=client.getClusterInfo();
  if (null == cs) {
    LOG.error(""String_Node_Str"");
    return false;
  }
  updateSupervisorStats(cs);
  TopologySummary ts=MetricsUtils.getTopologySummary(cs,topoName);
  if (null == ts) {
    LOG.error(""String_Node_Str"" + topoName);
    return false;
  }
  updateTopologyStats(ts,state,now);
  TopologyInfo info=client.getTopologyInfo(ts.get_id());
  boolean firstTime=(now == state.startTime);
  updateExecutorStats(info,state,now,firstTime);
  if (firstTime) {
    writeHeader(writer);
  }
  writeLine(writer);
  state.lastTime=now;
  return true;
}",0.4778503994190268
36412,"public Nimbus.Client getNimbusClient(){
  Map clusterConf=Utils.readStormConfig();
  clusterConf.putAll(config);
  return NimbusClient.getConfiguredClient(clusterConf).getClient();
}","public Nimbus.Client getNimbusClient(){
  return NimbusClient.getConfiguredClient(config).getClient();
}",0.7132867132867133
36413,"public void writeStormConfig(PrintWriter writer){
  if (writer != null) {
    for (    Object key : config.keySet()) {
      writer.println(key + ""String_Node_Str"" + config.get(key));
    }
    writer.flush();
  }
}","public void writeStormConfig(PrintWriter writer){
  LOG.info(""String_Node_Str"");
  if (writer != null) {
    Map sorted=new TreeMap();
    sorted.putAll(config);
    for (    Object key : sorted.keySet()) {
      writer.println(key + ""String_Node_Str"" + config.get(key));
    }
    writer.flush();
  }
}",0.806949806949807
36414,"void writeLine(PrintWriter writer){
  List<String> line=new LinkedList<String>();
  for (  String h : header) {
    line.add(metrics.get(h));
  }
  writer.println(Utils.join(line,""String_Node_Str""));
  writer.flush();
}","void writeLine(PrintWriter writer){
  LOG.info(""String_Node_Str"");
  List<String> line=new LinkedList<String>();
  for (  String h : header) {
    line.add(metrics.get(h));
  }
  writer.println(Utils.join(line,""String_Node_Str""));
  writer.flush();
}",0.9339019189765458
36415,"boolean isBatchStream(String id){
  return id.equals(""String_Node_Str"");
}","boolean isBatchStream(String stream){
  return stream.equals(""String_Node_Str"");
}",0.8974358974358975
36416,"boolean isDefaultStream(String id){
  return id.equals(Utils.DEFAULT_STREAM_ID);
}","boolean isDefaultStream(String stream){
  return stream.equals(Utils.DEFAULT_STREAM_ID);
}",0.9069767441860463
36417,"void writeHeader(PrintWriter writer){
  LOG.info(""String_Node_Str"");
  writer.println(Utils.join(header,""String_Node_Str""));
  writer.flush();
}","void writeHeader(PrintWriter writer){
  header.add(TIME);
  header.add(TOTAl_SLOTS);
  header.add(USED_SLOTS);
  header.add(WORKERS);
  header.add(TASKS);
  header.add(EXECUTORS);
  header.add(EXECUTORS_METRICS);
  header.add(TRANSFERRED);
  header.add(THROUGHPUT);
  header.add(THROUGHPUT_MB);
  header.add(SPOUT_EXECUTORS);
  header.add(SPOUT_TRANSFERRED);
  header.add(SPOUT_ACKED);
  header.add(SPOUT_THROUGHPUT);
  header.add(SPOUT_THROUGHPUT_MB);
  header.add(String.format(SPOUT_AVG_LATENCY_FORMAT,""String_Node_Str""));
  header.add(String.format(SPOUT_MAX_LATENCY_FORMAT,""String_Node_Str""));
  LOG.info(""String_Node_Str"");
  writer.println(Utils.join(header,""String_Node_Str""));
  writer.flush();
}",0.3392226148409894
36418,"@Override public IMetrics start(){
  long now=System.currentTimeMillis();
  long endTime=now + totalTime;
  MetricsState state=new MetricsState();
  state.startTime=now;
  state.lastTime=now;
  final String confFile=String.format(METRICS_CONF_FORMAT,path,topoName,now);
  final String dataFile=String.format(METRICS_FILE_FORMAT,path,topoName,now);
  PrintWriter confWriter=FileUtils.createFileWriter(path,confFile);
  PrintWriter dataWriter=FileUtils.createFileWriter(path,dataFile);
  writeStormConfig(confWriter);
  addHeaders();
  Nimbus.Client client=getNimbusClient();
  try {
    boolean live=true;
    while (live && now < endTime) {
      live=pollNimbus(client,now,state,dataWriter);
      Utils.sleep(pollInterval);
      now=System.currentTimeMillis();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    dataWriter.close();
    confWriter.close();
  }
  return this;
}","@Override public IMetrics start(){
  long now=System.currentTimeMillis();
  long endTime=now + totalTime;
  MetricsState state=new MetricsState();
  state.startTime=now;
  state.lastTime=now;
  final String confFile=String.format(METRICS_CONF_FORMAT,path,topoName,now);
  final String dataFile=String.format(METRICS_FILE_FORMAT,path,topoName,now);
  PrintWriter confWriter=FileUtils.createFileWriter(path,confFile);
  PrintWriter dataWriter=FileUtils.createFileWriter(path,dataFile);
  writeStormConfig(confWriter);
  writeHeader(dataWriter);
  try {
    boolean live=true;
    while (live && now < endTime) {
      live=pollNimbus(getNimbusClient(),now,state,dataWriter);
      Utils.sleep(pollInterval);
      now=System.currentTimeMillis();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    dataWriter.close();
    confWriter.close();
  }
  return this;
}",0.8766519823788547
36419,"void updateExecutorStats(TopologyInfo info,MetricsState state,long now,boolean firstTime){
  long overallTransferred=0;
  long spoutTransferred=0;
  long spoutAcked=0;
  int executorsWithMetircs=0;
  int spoutExecutors=0;
  Map<String,List<Double>> comLat=new HashMap<String,List<Double>>();
  for (  ExecutorSummary es : info.get_executors()) {
    String id=es.get_component_id();
    LOG.debug(""String_Node_Str"" + id);
    if (Utils.isSystemId(id)) {
      LOG.debug(""String_Node_Str"" + id);
      continue;
    }
    ExecutorStats exeStats=es.get_stats();
    if (exeStats != null) {
      ExecutorSpecificStats specs=exeStats.get_specific();
      ComponentCommon common=Utils.getComponentCommon(topology,id);
      for (      String stream : common.get_streams().keySet()) {
        LOG.debug(""String_Node_Str"" + stream + ""String_Node_Str""+ id);
        executorsWithMetircs++;
        long transferred=MetricsUtils.getTransferred(exeStats,ALL_TIME,stream);
        overallTransferred+=transferred;
        if (isSpout(specs)) {
          if (isDefaultStream(stream) || isBatchStream(stream)) {
            spoutExecutors++;
            spoutTransferred+=transferred;
            SpoutStats spStats=specs.get_spout();
            spoutAcked+=MetricsUtils.getSpoutAcked(spStats,ALL_TIME,stream);
            if (firstTime) {
              header.add(MetricsUtils.getSpoutAvgCompleteLatencyTitle(id));
            }
            double lat=MetricsUtils.getSpoutCompleteLatency(spStats,ALL_TIME,stream);
            MetricsUtils.addLatency(comLat,id,lat);
          }
        }
      }
    }
 else {
      LOG.error(""String_Node_Str"" + id);
    }
  }
  for (  String id : comLat.keySet()) {
    List<Double> latList=comLat.get(id);
    double avg=null == latList ? 0.0 : BenchmarkUtils.avg(latList);
    double max=null == latList ? 0.0 : BenchmarkUtils.max(latList);
    metrics.put(MetricsUtils.getSpoutAvgCompleteLatencyTitle(id),String.format(SPOUT_AVG_LATENCY_FORMAT,avg));
    metrics.put(MetricsUtils.getSpoutMaxCompleteLatencyTitle(id),String.format(SPOUT_MAX_LATENCY_FORMAT,max));
  }
  metrics.put(EXECUTORS_METRICS,Integer.toString(executorsWithMetircs));
  metrics.put(SPOUT_EXECUTORS,Integer.toString(spoutExecutors));
  long timeDiff=now - state.lastTime;
  long overallDiff=overallTransferred - state.overallTransferred;
  long spoutDiff=spoutTransferred - state.spoutTransferred;
  long throughput=(long)MetricsUtils.getThroughput(overallDiff,timeDiff);
  double throughputMB=(long)MetricsUtils.getThroughputMB(overallDiff,timeDiff,msgSize);
  long spoutThroughput=(long)MetricsUtils.getThroughput(spoutDiff,timeDiff);
  double spoutThroughputMB=(long)MetricsUtils.getThroughputMB(spoutDiff,timeDiff,msgSize);
  metrics.put(TRANSFERRED,Long.toString(overallDiff));
  metrics.put(THROUGHPUT,Long.toString(throughput));
  metrics.put(THROUGHPUT_MB,String.format(THROUGHPUT_MB_FORMAT,throughputMB));
  metrics.put(SPOUT_TRANSFERRED,Long.toString(spoutDiff));
  metrics.put(SPOUT_ACKED,Long.toString(spoutAcked));
  metrics.put(SPOUT_THROUGHPUT,Long.toString(spoutThroughput));
  metrics.put(SPOUT_THROUGHPUT_MB,String.format(SPOUT_THROUGHPUT_MB_FORMAT,spoutThroughputMB));
  state.overallTransferred=overallTransferred;
  state.spoutTransferred=spoutTransferred;
}","void updateExecutorStats(TopologyInfo info,MetricsState state,long now){
  long overallTransferred=0;
  long spoutTransferred=0;
  long spoutAcked=0;
  int executorsWithMetircs=0;
  int spoutExecutors=0;
  Map<String,List<Double>> comLat=new HashMap<String,List<Double>>();
  for (  ExecutorSummary es : info.get_executors()) {
    String id=es.get_component_id();
    LOG.debug(""String_Node_Str"" + id);
    if (Utils.isSystemId(id)) {
      LOG.debug(""String_Node_Str"" + id);
      continue;
    }
    ExecutorStats exeStats=es.get_stats();
    if (exeStats != null) {
      executorsWithMetircs++;
      ExecutorSpecificStats specs=exeStats.get_specific();
      ComponentCommon common=Utils.getComponentCommon(topology,id);
      boolean isSpout=isSpout(specs);
      if (isSpout) {
        spoutExecutors++;
      }
      for (      String stream : common.get_streams().keySet()) {
        LOG.debug(""String_Node_Str"" + stream + ""String_Node_Str""+ id);
        long transferred=MetricsUtils.getTransferred(exeStats,ALL_TIME,stream);
        overallTransferred+=transferred;
        if (isSpout) {
          if (isDefaultStream(stream) || isBatchStream(stream)) {
            spoutTransferred+=transferred;
            SpoutStats spStats=specs.get_spout();
            spoutAcked+=MetricsUtils.getSpoutAcked(spStats,ALL_TIME,stream);
            double lat=MetricsUtils.getSpoutCompleteLatency(spStats,ALL_TIME,stream);
            MetricsUtils.addLatency(comLat,id,lat);
          }
 else {
            LOG.debug(""String_Node_Str"" + stream + ""String_Node_Str""+ id);
          }
        }
      }
    }
 else {
      LOG.warn(""String_Node_Str"" + id);
    }
  }
  for (  String id : comLat.keySet()) {
    List<Double> latList=comLat.get(id);
    double avg=null == latList ? 0.0 : BenchmarkUtils.avg(latList);
    double max=null == latList ? 0.0 : BenchmarkUtils.max(latList);
    metrics.put(MetricsUtils.getSpoutAvgCompleteLatencyTitle(id),String.format(SPOUT_AVG_LATENCY_FORMAT,avg));
    metrics.put(MetricsUtils.getSpoutMaxCompleteLatencyTitle(id),String.format(SPOUT_MAX_LATENCY_FORMAT,max));
  }
  metrics.put(EXECUTORS_METRICS,Integer.toString(executorsWithMetircs));
  metrics.put(SPOUT_EXECUTORS,Integer.toString(spoutExecutors));
  long timeDiff=now - state.lastTime;
  long overallDiff=overallTransferred - state.overallTransferred;
  long spoutDiff=spoutTransferred - state.spoutTransferred;
  long throughput=(long)MetricsUtils.getThroughput(overallDiff,timeDiff);
  double throughputMB=(long)MetricsUtils.getThroughputMB(overallDiff,timeDiff,msgSize);
  long spoutThroughput=(long)MetricsUtils.getThroughput(spoutDiff,timeDiff);
  double spoutThroughputMB=(long)MetricsUtils.getThroughputMB(spoutDiff,timeDiff,msgSize);
  metrics.put(TRANSFERRED,Long.toString(overallDiff));
  metrics.put(THROUGHPUT,Long.toString(throughput));
  metrics.put(THROUGHPUT_MB,String.format(THROUGHPUT_MB_FORMAT,throughputMB));
  metrics.put(SPOUT_TRANSFERRED,Long.toString(spoutDiff));
  metrics.put(SPOUT_ACKED,Long.toString(spoutAcked));
  metrics.put(SPOUT_THROUGHPUT,Long.toString(spoutThroughput));
  metrics.put(SPOUT_THROUGHPUT_MB,String.format(SPOUT_THROUGHPUT_MB_FORMAT,spoutThroughputMB));
  state.overallTransferred=overallTransferred;
  state.spoutTransferred=spoutTransferred;
}",0.8052976099862993
36420,"boolean pollNimbus(Nimbus.Client client,long now,MetricsState state,PrintWriter writer) throws Exception {
  ClusterSummary cs=client.getClusterInfo();
  if (null == cs) {
    LOG.error(""String_Node_Str"");
    return false;
  }
  updateSupervisorStats(cs);
  TopologySummary ts=MetricsUtils.getTopologySummary(cs,topoName);
  if (null == ts) {
    LOG.error(""String_Node_Str"" + topoName);
    return false;
  }
  updateTopologyStats(ts,state,now);
  TopologyInfo info=client.getTopologyInfo(ts.get_id());
  boolean firstTime=(now == state.startTime);
  updateExecutorStats(info,state,now,firstTime);
  if (firstTime) {
    writeHeader(writer);
  }
  writeLine(writer);
  state.lastTime=now;
  return true;
}","boolean pollNimbus(Nimbus.Client client,long now,MetricsState state,PrintWriter writer) throws Exception {
  ClusterSummary cs=client.getClusterInfo();
  if (null == cs) {
    LOG.error(""String_Node_Str"");
    return false;
  }
  updateSupervisorStats(cs);
  TopologySummary ts=MetricsUtils.getTopologySummary(cs,topoName);
  if (null == ts) {
    LOG.error(""String_Node_Str"" + topoName);
    return false;
  }
  updateTopologyStats(ts,state,now);
  TopologyInfo info=client.getTopologyInfo(ts.get_id());
  updateExecutorStats(info,state,now);
  writeLine(writer);
  state.lastTime=now;
  return true;
}",0.8366412213740458
36421,"@Override public StormMetrics start(){
  long now=System.currentTimeMillis();
  final long endTime=now + totalTime;
  long totalLat=0L;
  int count=0;
  try {
    final String confFile=String.format(METRICS_CONF_FORMAT,path,topoName,now);
    final String dataFile=String.format(METRICS_FILE_FORMAT,path,topoName,now);
    PrintWriter confWriter=FileUtils.createFileWriter(path,confFile);
    PrintWriter dataWriter=FileUtils.createFileWriter(path,dataFile);
    writeConf(confWriter);
    while (now < endTime) {
      Thread.sleep(pollInterval);
      long lat=execute(nextArg());
      dataWriter.println(String.format(""String_Node_Str"",lat));
      dataWriter.flush();
      totalLat+=lat;
      count++;
      now=System.currentTimeMillis();
    }
    long avgLat=0 == count ? 0L : totalLat / count;
    dataWriter.println(String.format(""String_Node_Str"",avgLat));
    dataWriter.close();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return this;
}","@Override public StormMetrics start(){
  long now=System.currentTimeMillis();
  final long endTime=now + totalTime;
  long totalLat=0L;
  int count=0;
  try {
    final String confFile=String.format(METRICS_CONF_FORMAT,path,topoName,now);
    final String dataFile=String.format(METRICS_FILE_FORMAT,path,topoName,now);
    PrintWriter confWriter=FileUtils.createFileWriter(path,confFile);
    PrintWriter dataWriter=FileUtils.createFileWriter(path,dataFile);
    writeStormConfig(confWriter);
    while (now < endTime) {
      Thread.sleep(pollInterval);
      long lat=execute(nextArg(),dataWriter);
      totalLat+=lat;
      count++;
      now=System.currentTimeMillis();
    }
    double avgLat=0 == count ? 0.0 : (double)totalLat / count;
    dataWriter.println(String.format(""String_Node_Str"",avgLat));
    dataWriter.close();
  }
 catch (  DRPCExecutionException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  TException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return this;
}",0.784390243902439
36422,"private long execute(String arg) throws Exception {
  DRPCClient client=new DRPCClient(server,port);
  long start=System.currentTimeMillis();
  String result=client.execute(function,arg);
  long end=System.currentTimeMillis();
  LOG.info(String.format(""String_Node_Str"",function,arg,result));
  return end - start;
}","private long execute(String arg,PrintWriter writer) throws TException, DRPCExecutionException {
  LOG.debug(String.format(""String_Node_Str"",function,arg));
  DRPCClient client=new DRPCClient(server,port);
  long start=System.currentTimeMillis();
  String result=client.execute(function,arg);
  long end=System.currentTimeMillis();
  long latency=end - start;
  writer.println(String.format(""String_Node_Str"",function,arg,result,latency));
  writer.flush();
  return latency;
}",0.7171717171717171
36423,"public static PageView fromString(String s){
  LOG.debug(""String_Node_Str"" + s + ""String_Node_Str"");
  String[] parts=s.split(""String_Node_Str"");
  if (parts.length < 4) {
    return null;
  }
  return new PageView(parts[0],Integer.parseInt(parts[1]),Integer.parseInt(parts[2]),Integer.parseInt(parts[3]));
}","public static PageView fromString(String pv){
  LOG.debug(""String_Node_Str"" + pv + ""String_Node_Str"");
  String[] parts=pv.split(""String_Node_Str"");
  if (parts.length < 4) {
    return null;
  }
  for (int i=0; i < parts.length; i++) {
    parts[i]=parts[i].trim();
  }
  return new PageView(parts[0],Integer.parseInt(parts[1]),Integer.parseInt(parts[2]),Integer.parseInt(parts[3]));
}",0.8789625360230547
36424,"@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  String server=(String)options.get(SERVER);
  if (null == server) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer port=(Integer)options.get(PORT);
  if (null == port) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  spout=new TransactionalTridentKafkaSpout(KafkaUtils.getTridentKafkaConfig(options,new SchemeAsMultiScheme(new StringScheme())));
  metrics=new DRPCMetrics(FUNCTION,ARGS,server,port);
  return this;
}","@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  String server=(String)options.get(SERVER);
  if (null == server) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer port=(Integer)options.get(PORT);
  if (null == port) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  spoutNum=BenchmarkUtils.getInt(options,SPOUT_NUM,spoutNum);
  pageNum=BenchmarkUtils.getInt(options,PAGE_NUM,pageNum);
  viewNum=BenchmarkUtils.getInt(options,VIEW_NUM,viewNum);
  spout=new TransactionalTridentKafkaSpout(KafkaUtils.getTridentKafkaConfig(options,new SchemeAsMultiScheme(new StringScheme())));
  metrics=new DRPCMetrics(FUNCTION,ARGS,server,port);
  return this;
}",0.858712715855573
36425,"@Override public IBenchmark buildTopology(){
  TridentTopology trident=new TridentTopology();
  TridentState state=trident.newStream(""String_Node_Str"",spout).shuffle().each(new Fields(StringScheme.STRING_SCHEME_KEY),new Extract(Arrays.asList(Item.URL)),new Fields(""String_Node_Str"")).groupBy(new Fields(""String_Node_Str"")).persistentAggregate(new MemoryMapState.Factory(),new Count(),new Fields(""String_Node_Str""));
  trident.newDRPCStream(FUNCTION,null).stateQuery(state,new Fields(""String_Node_Str""),new MapGet(),new Fields(""String_Node_Str""));
  topology=trident.build();
  return this;
}","@Override public IBenchmark buildTopology(){
  TridentTopology trident=new TridentTopology();
  TridentState state=trident.newStream(""String_Node_Str"",spout).parallelismHint(spoutNum).shuffle().each(new Fields(StringScheme.STRING_SCHEME_KEY),new Extract(Arrays.asList(Item.URL)),new Fields(""String_Node_Str"")).parallelismHint(pageNum).groupBy(new Fields(""String_Node_Str"")).persistentAggregate(new MemoryMapState.Factory(),new Count(),new Fields(""String_Node_Str"")).parallelismHint(viewNum);
  trident.newDRPCStream(FUNCTION,null).stateQuery(state,new Fields(""String_Node_Str""),new MapGet(),new Fields(""String_Node_Str""));
  topology=trident.build();
  return this;
}",0.9395866454689984
36426,"@Test public void testFromString(){
  String pvString=""String_Node_Str"";
  PageView pageView=PageView.fromString(pvString);
  assertThat(pageView.url).isEqualTo(""String_Node_Str"");
  assertThat(pageView.status).isEqualTo(200);
  assertThat(pageView.zipCode).isEqualTo(100000);
  assertThat(pageView.userID).isEqualTo(1);
}","@Test public void testFromString(){
  String pvString=""String_Node_Str"";
  PageView pageView=PageView.fromString(pvString);
  assertThat(pageView.url).isEqualTo(""String_Node_Str"");
  assertThat(pageView.status).isEqualTo(200);
  assertThat(pageView.zipCode).isEqualTo(100000);
  assertThat(pageView.userID).isEqualTo(1);
  assertThat(pageView.toString()).isEqualTo(pvString);
}",0.9213161659513592
36427,"@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  spout=new KafkaFileReadSpout(FILE,partitions);
  return this;
}","@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  spout=new KafkaFileReadSpout(FILE);
  return this;
}",0.9621993127147768
36428,"public KafkaFileReadSpout(String file,int partitions){
  super(partitions);
  this.reader=new FileReader(file);
}","public KafkaFileReadSpout(String file){
  this.reader=new FileReader(file);
}",0.8105263157894737
36429,"@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  spout=new KafkaPageViewSpout(partitions);
  return this;
}","@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  spout=new KafkaPageViewSpout();
  return this;
}",0.9645390070921984
36430,"public KafkaPageViewSpout(int partitions){
  super(partitions);
  this.generator=new PageViewGenerator();
}","public KafkaPageViewSpout(){
  super();
  this.generator=new PageViewGenerator();
}",0.8736842105263158
36431,"@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  Map stormConfig=config.getStormConfig();
  stormConfig.putAll(getKafkaConfig(options));
  spoutNum=Util.retIfPositive(spoutNum,(Integer)options.get(SPOUT));
  boltNum=Util.retIfPositive(boltNum,(Integer)options.get(BOLT));
  partitions=Util.retIfPositive(partitions,(Integer)options.get(PARTITIONS));
  metrics=new BasicMetrics();
  return this;
}","@Override public IBenchmark parseOptions(Map options){
  super.parseOptions(options);
  Map stormConfig=config.getStormConfig();
  stormConfig.putAll(getKafkaConfig(options));
  spoutNum=Util.retIfPositive(spoutNum,(Integer)options.get(SPOUT));
  boltNum=Util.retIfPositive(boltNum,(Integer)options.get(BOLT));
  metrics=new BasicMetrics();
  return this;
}",0.8863636363636364
36432,"public KafkaProducerSpout(int partitions){
  this.partitions=Util.retIfPositive(1,partitions);
}","public KafkaProducerSpout(){
  random=new Random();
}",0.5503355704697986
36433,"protected void nextMessage(String message){
  if (index >= partitions) {
    index=0;
  }
  collector.emit(new Values(index + ""String_Node_Str"",message));
  index++;
}","protected void nextMessage(String message){
  collector.emit(new Values(random.nextInt() + ""String_Node_Str"",message));
}",0.7569444444444444
36434,"@Override protected void processResponse(AngularResponse angularResponse){
}","@Override protected void processResponse(AngularResponse angularResponse){
  angularResponse.alert(""String_Node_Str"");
  TestObject ble=getModelObject();
  ble.getTest1();
}",0.6104417670682731
36435,"static Stage createFMNTStage(Screen screen,boolean show){
  Stage owner=new Stage(UTILITY);
  owner.setOpacity(0);
  owner.setWidth(5);
  owner.setHeight(5);
  owner.show();
  owner.setX(screen.getBounds().getMinX() + 1);
  owner.setY(screen.getBounds().getMinY() + 1);
  Stage s=new Stage(UNDECORATED);
  s.initOwner(owner);
  s.initModality(APPLICATION_MODAL);
  s.setAlwaysOnTop(true);
  if (show)   s.show();
  s.setX(screen.getBounds().getMinX());
  s.setY(screen.getBounds().getMinY());
  s.setWidth(screen.getBounds().getWidth());
  s.setHeight(screen.getBounds().getHeight());
  return s;
}","/** 
 * Create fullscreen modal no taskbar stage on given screen. The stage will have its owner, style and modality initialized and be prepared to be shown. <p/> Use: just set your scene on it and call show(). <p/> Easy way to get popup like behavior that: <ul> <li> is always fullscreen <li> is modal - does not lose focus and is always on top of other application windows <li> has no taskbar icon (for your information, javafx normally disallows this, but it is doable using owner stage with UTILITY style). </ul>
 */
static Stage createFMNTStage(Screen screen,boolean show){
  Stage owner=new Stage(UTILITY);
  owner.setOpacity(0);
  owner.setWidth(10);
  owner.setHeight(10);
  owner.show();
  owner.setAlwaysOnTop(true);
  owner.setX(screen.getBounds().getMinX() + 1);
  owner.setY(screen.getBounds().getMinY() + 1);
  Stage s=new Stage(UNDECORATED){
    @Override public void hide(){
      if (owner.isShowing()) {
        owner.hide();
      }
 else {
        super.hide();
      }
    }
  }
;
  s.initOwner(owner);
  s.setAlwaysOnTop(true);
  if (show)   s.show();
  s.setX(screen.getBounds().getMinX());
  s.setY(screen.getBounds().getMinY());
  s.setWidth(screen.getBounds().getWidth());
  s.setHeight(screen.getBounds().getHeight());
  return s;
}",0.3006465517241379
36436,"public ConfigurableField(Class<T> type,T value){
  this.type=type;
  this.value=value;
  p.onChange=() -> chain.onItemChange.accept(null);
  p.configure(lc.toConfigurable.apply(this.value));
}","@SuppressWarnings(""String_Node_Str"") public ConfigurableField(Class<T> type,T value){
  this.type=type;
  this.value=value;
  p.onChange=() -> chain.onItemChange.accept(null);
  p.configure((Configurable)lc.toConfigurable.apply(this.value));
}",0.8827586206896552
36437,"@Override public T getValue(){
  Class<T> oType=p.getConfigFields().get(0).config.getType();
  T o=p.getConfigFields().get(0).getValue();
  if (type == oType)   return o;
 else   return value;
}","@Override public T getValue(){
  Class<? extends T> oType=p.getConfigFields().get(0).config.getType();
  T o=p.getConfigFields().get(0).getValue();
  if (type == oType)   return o;
 else   return value;
}",0.9748743718592964
36438,"private void buildChildren(){
  all_children=new HashSet<>();
  children=new HashSet<>();
  List<Item> files=new ArrayList<>();
  children_files().forEach(f -> {
    all_children.add(f.getPath().toLowerCase());
    FileType type=FileType.of(f);
    if (type == DIRECTORY) {
      children.add(createItem(this,f,type));
    }
 else {
      if (filterChildFile(f))       files.add(createItem(this,f,type));
    }
  }
);
  children.addAll(files);
}","private void buildChildren(){
  if (disposed)   return;
  Set<String> all=new HashSet<>();
  List<Item> dirs=new ArrayList<>();
  List<Item> files=new ArrayList<>();
  children_files().forEach(f -> {
    if (!disposed) {
      all.add(f.getPath().toLowerCase());
      FileType type=FileType.of(f);
      if (type == DIRECTORY) {
        dirs.add(createItem(this,f,type));
      }
 else {
        if (filterChildFile(f))         files.add(createItem(this,f,type));
      }
    }
  }
);
  if (!disposed) {
    children=new HashSet<>(dirs.size() + files.size());
    children.addAll(dirs);
    children.addAll(files);
    all_children=all;
  }
}",0.6875
36439,"private static boolean file_exists(Item c,File f){
  return c != null && f != null && c.all_children.contains(f.getPath().toLowerCase());
}","private static boolean file_exists(Item c,File f){
  return c != null && f != null && !c.disposed && c.all_children.contains(f.getPath().toLowerCase());
}",0.9488054607508531
36440,"public Try<LoadResult,Void> loadCover(boolean full,ImageSize size){
  throwIfFxThread();
  boolean wasCoverFile_loaded=coverFile_loaded;
  File file=getCoverFile();
  if (file == null) {
    if (!wasCoverFile_loaded && cover_file == null && (val.getPath().endsWith(""String_Node_Str"") || val.getPath().endsWith(""String_Node_Str""))) {
      cover=IconExtractor.getFileIcon(val);
      cover_loadedFull.set(true);
      cover_loadedThumb.set(true);
      return Try.ok(new LoadResult(false,null,cover));
    }
  }
 else {
    if (full) {
      boolean wasLoaded=cover_loadedThumb.get() || cover_loadedFull.get();
      if (!cover_loadedFull.get()) {
        Image img=Image2PassLoader.INSTANCE.getHq().invoke(file,size);
        if (img != null) {
          cover=img;
          return Try.ok(new LoadResult(wasLoaded,file,cover));
        }
        cover_loadedFull.set(true);
      }
    }
 else {
      boolean wasLoaded=cover_loadedThumb.get();
      if (!wasLoaded) {
        Image imgCached=Thumbnail.getCached(file,size);
        cover=imgCached != null ? imgCached : Image2PassLoader.INSTANCE.getLq().invoke(file,size);
        cover_loadedThumb.set(true);
      }
      return Try.ok(new LoadResult(wasLoaded,file,cover));
    }
  }
  return Try.error();
}","public Try<LoadResult,Void> loadCover(boolean full,ImageSize size){
  throwIfFxThread();
  if (disposed)   return Try.error();
  boolean wasCoverFile_loaded=coverFile_loaded;
  File file=getCoverFile();
  if (file == null) {
    if (!wasCoverFile_loaded && cover_file == null && (val.getPath().endsWith(""String_Node_Str"") || val.getPath().endsWith(""String_Node_Str""))) {
      cover=IconExtractor.getFileIcon(val);
      cover_loadedFull.set(true);
      cover_loadedThumb.set(true);
      return Try.ok(new LoadResult(false,null,cover));
    }
  }
 else {
    if (full) {
      boolean wasLoaded=cover_loadedThumb.get() || cover_loadedFull.get();
      if (!cover_loadedFull.get()) {
        Image img=Image2PassLoader.INSTANCE.getHq().invoke(file,size);
        if (img != null) {
          cover=img;
          return Try.ok(new LoadResult(wasLoaded,file,cover));
        }
        cover_loadedFull.set(true);
      }
    }
 else {
      boolean wasLoaded=cover_loadedThumb.get();
      if (!wasLoaded) {
        Image imgCached=Thumbnail.getCached(file,size);
        cover=imgCached != null ? imgCached : Image2PassLoader.INSTANCE.getLq().invoke(file,size);
        cover_loadedThumb.set(true);
      }
      return Try.ok(new LoadResult(wasLoaded,file,cover));
    }
  }
  return Try.error();
}",0.985167837626854
36441,"public void dispose(){
  if (children != null)   children.forEach(Item::dispose);
  if (children != null)   children.clear();
  if (all_children != null)   all_children.clear();
  children=null;
  all_children=null;
  cover=null;
}","public void dispose(){
  if (children != null)   children.forEach(Item::dispose);
  if (children != null)   children.clear();
  if (all_children != null)   all_children.clear();
  children=null;
  all_children=null;
  cover=null;
  disposed=true;
}",0.964509394572025
36442,"protected File getCoverFile(){
  if (coverFile_loaded)   return cover_file;
  coverFile_loaded=true;
  if (valType == DIRECTORY) {
    if (all_children == null)     buildChildren();
    cover_file=getImageT(val,""String_Node_Str"");
  }
 else {
    if (ImageFileFormat.isSupported(val)) {
      cover_file=val;
    }
 else {
      File i=getImage(val.getParentFile(),getNameWithoutExtensionOrRoot(val));
      if (i == null && parent != null)       cover_file=parent.getCoverFile();
 else       cover_file=i;
    }
  }
  return cover_file;
}","protected File getCoverFile(){
  if (disposed)   return null;
  if (coverFile_loaded)   return cover_file;
  coverFile_loaded=true;
  if (valType == DIRECTORY) {
    if (all_children == null)     buildChildren();
    cover_file=getImageT(val,""String_Node_Str"");
  }
 else {
    if (ImageFileFormat.isSupported(val)) {
      cover_file=val;
    }
 else {
      File i=getImage(val.getParentFile(),getNameWithoutExtensionOrRoot(val));
      if (i == null && parent != null)       cover_file=parent.getCoverFile();
 else       cover_file=i;
    }
  }
  return cover_file;
}",0.9720468890892696
36443,"private File getImage(File dir,String name){
  if (dir == null)   return null;
  for (  ImageFileFormat format : ImageFileFormat.values()) {
    if (format.isSupported()) {
      File f=new File(dir,name + ""String_Node_Str"" + format.toString());
      if (dir == val) {
        return file_exists(this,f) ? f : null;
      }
 else {
        if (parent != null && parent.val != null && parent.val.equals(f.getParentFile())) {
          if (file_exists(parent,f))           return f;
        }
 else {
          if (f.exists())           return f;
        }
      }
    }
  }
  return null;
}","private File getImage(File dir,String name){
  if (disposed)   return null;
  if (dir == null)   return null;
  for (  ImageFileFormat format : ImageFileFormat.values()) {
    if (format.isSupported()) {
      File f=new File(dir,name + ""String_Node_Str"" + format.toString());
      if (dir == val) {
        return file_exists(this,f) ? f : null;
      }
 else {
        if (parent != null && parent.val != null && parent.val.equals(f.getParentFile())) {
          if (file_exists(parent,f))           return f;
        }
 else {
          if (f.exists())           return f;
        }
      }
    }
  }
  return null;
}",0.9744013212221304
36444,"private File getImageT(File dir,String name){
  if (dir == null)   return null;
  for (  ImageFileFormat format : ImageFileFormat.values()) {
    if (format.isSupported()) {
      File f=new File(dir,name + ""String_Node_Str"" + format.toString());
      if (file_exists(this,f))       return f;
    }
  }
  return null;
}","private File getImageT(File dir,String name){
  if (disposed)   return null;
  if (dir == null)   return null;
  for (  ImageFileFormat format : ImageFileFormat.values()) {
    if (format.isSupported()) {
      File f=new File(dir,name + ""String_Node_Str"" + format.toString());
      if (file_exists(this,f))       return f;
    }
  }
  return null;
}",0.9538002980625933
36445,"private static void refreshItemsWithNow(List<Metadata> ms){
  noØ(ms);
  if (ms.isEmpty())   return;
  IO_THREAD.execute(() -> {
    MapSet<URI,Metadata> mm=new MapSet<>(Metadata::getUri,ms);
    APP.db.updatePer(ms);
    APP.db.updateInMemoryDbFromPersisted();
    Async.runFX(() -> {
      PlaylistManager.playlists.stream().flatMap(Playlist::stream).forEach((      PlaylistItem p) -> mm.ifHasK(p.getUri(),p::update));
      mm.ifHasE(playingItem.get(),playingItem::update);
      if (playing.i.getValue() != null)       mm.ifHasE(playing.i.getValue(),playing.i::setValue);
      if (playlistSelected.i.getValue() != null)       mm.ifHasK(playlistSelected.i.getValue().getUri(),m -> playlistSelected.i.setValue(m.toPlaylist()));
      if (librarySelected.i.getValue() != null)       mm.ifHasE(librarySelected.i.getValue(),librarySelected.i::setValue);
      refreshHandlers.forEach(h -> h.accept(mm));
    }
);
  }
);
}","private static void refreshItemsWithNow(List<Metadata> ms){
  noØ(ms);
  if (ms.isEmpty())   return;
  IO_THREAD.execute(() -> {
    MapSet<URI,Metadata> mm=new MapSet<>(Metadata::getUri,ms);
    APP.db.updatePer(ms);
    APP.db.updateInMemoryDbFromPersisted();
    runFX(() -> {
      PlaylistManager.playlists.stream().flatMap(Playlist::stream).forEach((      PlaylistItem p) -> mm.ifHasK(p.getUri(),p::update));
      mm.ifHasE(playingItem.get(),playingItem::update);
      if (playing.i.getValue() != null)       mm.ifHasE(playing.i.getValue(),playing.i::setValue);
      if (playlistSelected.i.getValue() != null)       mm.ifHasK(playlistSelected.i.getValue().getUri(),m -> playlistSelected.i.setValue(m.toPlaylist()));
      if (librarySelected.i.getValue() != null)       mm.ifHasE(librarySelected.i.getValue(),librarySelected.i::setValue);
      refreshHandlers.forEach(h -> h.accept(mm));
    }
);
  }
);
}",0.9967320261437908
36446,"/** 
 * Updates application (playlist, library, etc.) with latest metadata. Refreshes the given data for the whole application. <p/> Safe to call from any thread.
 * @param ms metadata to refresh
 * @param allowDelay flag for using delayed refresh to reduce refresh successions to single refresh. Normally falseis used. <p/> Use false to refresh immediatelly and true to queue the refresh for future execution (will wait few seconds for next refresh request and if it comes, will wait again and so on until none will come, which is when all queued refreshes execute all at once).
 */
public static void refreshItemsWith(List<Metadata> ms,boolean allowDelay){
  noØ(ms);
  if (allowDelay)   Async.runFX(() -> red.push(ms));
 else   refreshItemsWithNow(ms);
}","/** 
 * Updates application (playlist, library, etc.) with latest metadata. Refreshes the given data for the whole application. <p/> Safe to call from any thread.
 * @param ms metadata to refresh
 * @param allowDelay flag for using delayed refresh to reduce refresh successions to single refresh. Normally falseis used. <p/> Use false to refresh immediatelly and true to queue the refresh for future execution (will wait few seconds for next refresh request and if it comes, will wait again and so on until none will come, which is when all queued refreshes execute all at once).
 */
public static void refreshItemsWith(List<Metadata> ms,boolean allowDelay){
  noØ(ms);
  if (allowDelay)   runFX(() -> red.push(ms));
 else   refreshItemsWithNow(ms);
}",0.9960212201591512
36447,"public static void activate(){
  LOGGER.info(""String_Node_Str"");
  post_activating=true;
  Status s=state.status.get();
  if (s == PAUSED || s == PLAYING)   startTime=state.currentTime.get();
  if (s == PAUSED) {
    player.play(PlaylistManager.use(Playlist::getPlaying,null));
    util.async.Async.runFX(1000,player::pause);
  }
  if (s == PLAYING) {
    player.play(PlaylistManager.use(Playlist::getPlaying,null));
    runFX(200,() -> suspension_flag=false);
  }
 else {
    suspension_flag=false;
  }
}","public static void activate(){
  LOGGER.info(""String_Node_Str"");
  post_activating=true;
  Status s=state.status.get();
  if (s == PAUSED || s == PLAYING)   startTime=state.currentTime.get();
  if (s == PAUSED) {
    player.play(PlaylistManager.use(Playlist::getPlaying,null));
    runFX(1000,player::pause);
  }
  if (s == PLAYING) {
    player.play(PlaylistManager.use(Playlist::getPlaying,null));
    runFX(200,() -> suspension_flag=false);
  }
 else {
    suspension_flag=false;
  }
}",0.9828801611278952
36448,"@Override public void createPlayback(Item item,PlaybackState state,Runnable onOk,Runnable onFail){
  Player.IO_THREAD.execute(() -> {
    Media media;
    try {
      media=new Media(item.getUri().toString());
    }
 catch (    MediaException e) {
      log(JavaFxPlayer.class).error(""String_Node_Str"",item.getUri());
      onFail.run();
      return;
    }
    runFX(() -> {
      player=new MediaPlayer(media);
      player.setStartTime(Duration.ZERO);
      player.setAudioSpectrumInterval(0.01);
      player.setAudioSpectrumNumBands(128);
      player.setAudioSpectrumListener(PLAYBACK.spectrumListenerDistributor);
      d1=maintain(state.volume,player.volumeProperty());
      d2=maintain(state.mute,player.muteProperty());
      d3=maintain(state.balance,player.balanceProperty());
      d4=maintain(state.rate,player.rateProperty());
      player.setOnEndOfMedia(PLAYBACK.onPlaybackEnd);
      player.statusProperty().addListener(new ChangeListener<>(){
        @Override public void changed(        ObservableValue<? extends Status> o,        Status ov,        Status nv){
          if (nv == PLAYING || nv == PAUSED || nv == STOPPED) {
            d5=maintain(player.currentTimeProperty(),state.currentTime);
            d7=maintain(player.statusProperty(),state.status);
            player.statusProperty().removeListener(this);
          }
        }
      }
);
      player.statusProperty().addListener((o,ov,nv) -> {
        if (nv == PLAYING || nv == PAUSED) {
          if (PLAYBACK.startTime != null) {
            seek(PLAYBACK.startTime);
            PLAYBACK.startTime=null;
          }
        }
      }
);
      Status s=state.status.get();
      if (PLAYBACK.startTime != null) {
        if (s == PLAYING)         play();
 else         if (s == PAUSED)         pause();
      }
      onOk.run();
    }
);
  }
);
}","@Override public void createPlayback(Item item,PlaybackState state,Runnable onOk,Runnable onFail){
  Player.IO_THREAD.execute(() -> {
    Media media;
    try {
      media=new Media(item.getUri().toString());
    }
 catch (    MediaException e) {
      log(JavaFxPlayer.class).error(""String_Node_Str"",item.getUri());
      onFail.run();
      return;
    }
    runFX(() -> {
      player=new MediaPlayer(media);
      player.setStartTime(Duration.ZERO);
      player.setAudioSpectrumInterval(0.01);
      player.setAudioSpectrumNumBands(128);
      player.setAudioSpectrumListener(PLAYBACK.spectrumListenerDistributor);
      d1=maintain(state.volume,v -> linToLog(v.doubleValue()),player.volumeProperty());
      d2=maintain(state.mute,player.muteProperty());
      d3=maintain(state.balance,player.balanceProperty());
      d4=maintain(state.rate,player.rateProperty());
      player.setOnEndOfMedia(PLAYBACK.onPlaybackEnd);
      player.statusProperty().addListener(new ChangeListener<>(){
        @Override public void changed(        ObservableValue<? extends Status> o,        Status ov,        Status nv){
          if (nv == PLAYING || nv == PAUSED || nv == STOPPED) {
            d5=maintain(player.currentTimeProperty(),state.currentTime);
            d7=maintain(player.statusProperty(),state.status);
            player.statusProperty().removeListener(this);
          }
        }
      }
);
      player.statusProperty().addListener((o,ov,nv) -> {
        if (nv == PLAYING || nv == PAUSED) {
          if (PLAYBACK.startTime != null) {
            seek(PLAYBACK.startTime);
            PLAYBACK.startTime=null;
          }
        }
      }
);
      Status s=state.status.get();
      if (PLAYBACK.startTime != null) {
        if (s == PLAYING)         play();
 else         if (s == PAUSED)         pause();
      }
      onOk.run();
    }
);
  }
);
}",0.9916284093977856
36449,"@Override public void createPlayback(Item item,PlaybackState state,Runnable onOk,Runnable onFail){
  Player.IO_THREAD.execute(() -> {
    try {
      p.open(item.getFile());
      p.setVolume(state.volume.get());
      p.setMute(state.mute.get());
      p.setBalance(state.balance.get());
      runFX(() -> {
        state.volume.addListener((o,ov,nv) -> p.setVolume(nv.doubleValue()));
        state.mute.addListener((o,ov,nv) -> p.setMute(nv));
        state.balance.addListener((o,ov,nv) -> p.setBalance(nv.doubleValue()));
        Status s=state.status.get();
        if (PLAYBACK.startTime != null) {
          if (s == PLAYING)           play();
 else           if (s == PAUSED)           pause();
        }
        onOk.run();
      }
);
    }
 catch (    PlayerException ex) {
      Logger.getLogger(JavaSoundPlayer.class.getName()).log(Level.SEVERE,null,ex);
      onFail.run();
    }
  }
);
}","@Override public void createPlayback(Item item,PlaybackState state,Runnable onOk,Runnable onFail){
  Player.IO_THREAD.execute(() -> {
    try {
      p.open(item.getFile());
      p.setVolume(state.volume.get());
      p.setMute(state.mute.get());
      p.setBalance(state.balance.get());
      runFX(() -> {
        state.volume.addListener((o,ov,nv) -> p.setVolume(linToLog(nv.doubleValue())));
        state.mute.addListener((o,ov,nv) -> p.setMute(nv));
        state.balance.addListener((o,ov,nv) -> p.setBalance(nv.doubleValue()));
        Status s=state.status.get();
        if (PLAYBACK.startTime != null) {
          if (s == PLAYING)           play();
 else           if (s == PAUSED)           pause();
        }
        onOk.run();
      }
);
    }
 catch (    PlayerException ex) {
      Logger.getLogger(JavaSoundPlayer.class.getName()).log(Level.SEVERE,null,ex);
      onFail.run();
    }
  }
);
}",0.9944873208379272
36450,"public JavaSoundPlayer(){
  p.addPlaybackListener(new PlaybackListener(){
    long updateId=0;
    @Override public void playbackBuffering(    PlaybackEvent pe){
    }
    @Override public void playbackOpened(    PlaybackEvent pe){
      Duration d=millis(p.getDuration() / 1000);
      runLater(() -> state.duration.set(d));
    }
    @Override public void playbackEndOfMedia(    PlaybackEvent pe){
      runLater(PLAYBACK.onPlaybackEnd);
    }
    @Override public void playbackProgress(    PlaybackEvent pe){
      updateId++;
      if (updateId % 2 == 0) {
        Duration d=millis(seekOffsetMs + pe.getPosition() / 1000);
        runLater(() -> state.currentTime.set(d));
      }
    }
    @Override public void playbackPlaying(    PlaybackEvent pe){
      if (PLAYBACK.startTime != null) {
        seek(PLAYBACK.startTime);
        PLAYBACK.startTime=null;
      }
    }
    @Override public void playbackPaused(    PlaybackEvent pe){
      if (supposedToPause.getAndSet(true)) {
        if (PLAYBACK.startTime != null) {
          seek(PLAYBACK.startTime);
          PLAYBACK.startTime=null;
        }
        runLater(() -> PLAYBACK.state.status.set(PAUSED));
      }
    }
    @Override public void playbackStopped(    PlaybackEvent pe){
      if (supposedToStop.getAndSet(true)) {
        supposedToStop.set(false);
        runLater(() -> PLAYBACK.state.status.set(STOPPED));
      }
    }
  }
);
}","public JavaSoundPlayer(){
  p.addPlaybackListener(new PlaybackListener(){
    long updateId=0;
    @Override public void playbackBuffering(    PlaybackEvent pe){
    }
    @Override public void playbackOpened(    PlaybackEvent pe){
      Duration d=millis(p.getDuration() / 1000);
      runLater(() -> state.duration.set(d));
    }
    @Override public void playbackEndOfMedia(    PlaybackEvent pe){
      runLater((Runnable)PLAYBACK.onPlaybackEnd);
    }
    @Override public void playbackProgress(    PlaybackEvent pe){
      updateId++;
      if (updateId % 2 == 0) {
        Duration d=millis(seekOffsetMs + pe.getPosition() / 1000);
        runLater(() -> state.currentTime.set(d));
      }
    }
    @Override public void playbackPlaying(    PlaybackEvent pe){
      if (PLAYBACK.startTime != null) {
        seek(PLAYBACK.startTime);
        PLAYBACK.startTime=null;
      }
    }
    @Override public void playbackPaused(    PlaybackEvent pe){
      if (supposedToPause.getAndSet(true)) {
        if (PLAYBACK.startTime != null) {
          seek(PLAYBACK.startTime);
          PLAYBACK.startTime=null;
        }
        runLater(() -> PLAYBACK.state.status.set(PAUSED));
      }
    }
    @Override public void playbackStopped(    PlaybackEvent pe){
      if (supposedToStop.getAndSet(true)) {
        supposedToStop.set(false);
        runLater(() -> PLAYBACK.state.status.set(STOPPED));
      }
    }
  }
);
}",0.9964639321074964
36451,"@Override public void playbackEndOfMedia(PlaybackEvent pe){
  runLater(PLAYBACK.onPlaybackEnd);
}","@Override public void playbackEndOfMedia(PlaybackEvent pe){
  runLater((Runnable)PLAYBACK.onPlaybackEnd);
}",0.9509803921568628
36452,"@Override public HitInfo getIndex(double x,double y){
  final double leftWidth=leftPane == null ? 0.0 : snapSize(leftPane.prefWidth(getSkinnable().getHeight()));
  return super.getIndex(x - leftWidth,y);
}","@Override public HitInfo getIndex(double x,double y){
  final double leftWidth=leftPane == null ? 0.0 : snapSizeX(leftPane.prefWidth(getSkinnable().getHeight()));
  return super.getIndex(x - leftWidth,y);
}",0.9975669099756692
36453,"@Override protected void layoutChildren(double x,double y,double w,double h){
  final double fullHeight=h + snappedTopInset() + snappedBottomInset();
  final double leftWidth=leftPane == null ? 0.0 : snapSize(leftPane.prefWidth(fullHeight));
  final double rightWidth=rightPane == null ? 0.0 : snapSize(rightPane.prefWidth(fullHeight));
  final double textFieldStartX=snapPosition(x) + snapSize(leftWidth);
  final double textFieldWidth=w - snapSize(leftWidth) - snapSize(rightWidth);
  super.layoutChildren(textFieldStartX,0,textFieldWidth,fullHeight);
  if (leftPane != null) {
    final double leftStartX=0;
    leftPane.resizeRelocate(leftStartX,0,leftWidth,fullHeight);
  }
  if (rightPane != null) {
    final double rightStartX=rightPane == null ? 0.0 : w - rightWidth + snappedLeftInset();
    rightPane.resizeRelocate(rightStartX,0,rightWidth,fullHeight);
  }
}","@Override protected void layoutChildren(double x,double y,double w,double h){
  final double fullHeight=h + snappedTopInset() + snappedBottomInset();
  final double leftWidth=leftPane == null ? 0.0 : snapSizeX(leftPane.prefWidth(fullHeight));
  final double rightWidth=rightPane == null ? 0.0 : snapSizeX(rightPane.prefWidth(fullHeight));
  final double textFieldStartX=snapPositionX(x) + snapSizeX(leftWidth);
  final double textFieldWidth=w - snapSizeX(leftWidth) - snapSizeX(rightWidth);
  super.layoutChildren(textFieldStartX,0,textFieldWidth,fullHeight);
  if (leftPane != null) {
    final double leftStartX=0;
    leftPane.resizeRelocate(leftStartX,0,leftWidth,fullHeight);
  }
  if (rightPane != null) {
    final double rightStartX=rightPane == null ? 0.0 : w - rightWidth + snappedLeftInset();
    rightPane.resizeRelocate(rightStartX,0,rightWidth,fullHeight);
  }
}",0.9965635738831616
36454,"@Override protected double computePrefWidth(double h,double topInset,double rightInset,double bottomInset,double leftInset){
  final double pw=super.computePrefWidth(h,topInset,rightInset,bottomInset,leftInset);
  final double leftWidth=leftPane == null ? 0.0 : snapSize(leftPane.prefWidth(h));
  final double rightWidth=rightPane == null ? 0.0 : snapSize(rightPane.prefWidth(h));
  return pw + leftWidth + rightWidth+ leftInset+ rightInset;
}","@Override protected double computePrefWidth(double h,double topInset,double rightInset,double bottomInset,double leftInset){
  final double pw=super.computePrefWidth(h,topInset,rightInset,bottomInset,leftInset);
  final double leftWidth=leftPane == null ? 0.0 : snapSizeX(leftPane.prefWidth(h));
  final double rightWidth=rightPane == null ? 0.0 : snapSizeX(rightPane.prefWidth(h));
  return pw + leftWidth + rightWidth+ leftInset+ rightInset;
}",0.9977477477477478
36455,"@Override protected double computePrefHeight(double w,double topInset,double rightInset,double bottomInset,double leftInset){
  final double ph=super.computePrefHeight(w,topInset,rightInset,bottomInset,leftInset);
  final double leftHeight=leftPane == null ? 0.0 : snapSize(leftPane.prefHeight(-1));
  final double rightHeight=rightPane == null ? 0.0 : snapSize(rightPane.prefHeight(-1));
  return Math.max(ph,Math.max(leftHeight,rightHeight));
}","@Override protected double computePrefHeight(double w,double topInset,double rightInset,double bottomInset,double leftInset){
  final double ph=super.computePrefHeight(w,topInset,rightInset,bottomInset,leftInset);
  final double leftHeight=leftPane == null ? 0.0 : snapSizeY(leftPane.prefHeight(-1));
  final double rightHeight=rightPane == null ? 0.0 : snapSizeY(rightPane.prefHeight(-1));
  return Math.max(ph,Math.max(leftHeight,rightHeight));
}",0.9977628635346756
36456,"void set(boolean change,Metadata new_metadata){
  Metadata ov=val;
  Metadata nv=new_metadata;
  val=nv;
  if (PLAYBACK.suspension_flag)   return;
  if (change)   changes.forEach(h -> h.accept(ov,nv));
  updates.forEach(h -> h.accept(ov,nv));
}","private void set(boolean change,Metadata new_metadata){
  Metadata ov=val;
  Metadata nv=new_metadata;
  val=nv;
  if (PLAYBACK.suspension_flag)   return;
  if (change)   changes.forEach(h -> h.accept(ov,nv));
  updates.forEach(h -> h.accept(ov,nv));
}",0.9838709677419356
36457,"/** 
 * Execute when song starts playing. 
 */
public void itemChanged(Item item){
  if (item == null) {
    set(true,EMPTY);
    log(Player.class).info(""String_Node_Str"");
  }
 else   if (val.same(item)) {
    set(true,val);
    log(Player.class).info(""String_Node_Str"");
  }
 else   if (nextMetadataCache.same(item)) {
    set(true,nextMetadataCache);
    log(Player.class).info(""String_Node_Str"");
  }
 else {
    log(Player.class).info(""String_Node_Str"");
    load(true,item);
  }
  nextCachePreloader.start();
}","/** 
 * Execute when song starts playing. 
 */
public void itemChanged(Item item){
  if (item == null) {
    set(true,EMPTY);
    log(Player.class).info(""String_Node_Str"");
  }
 else   if (val.same(item)) {
    set(true,val);
    log(Player.class).info(""String_Node_Str"");
  }
 else   if (valNext.same(item)) {
    set(true,valNext);
    log(Player.class).info(""String_Node_Str"");
  }
 else {
    log(Player.class).info(""String_Node_Str"");
    load(true,item);
  }
  valNextLoader.start();
}",0.9493545183714002
36458,"private void preloadNext(){
  log(Player.class).info(""String_Node_Str"");
  PlaylistItem next=PlaylistManager.use(Playlist::getNextPlaying,null);
  if (next != null) {
    Fut.fut(next).map(MetadataReader::readMetadata).use(FX,m -> nextMetadataCache=m);
  }
}","private void preloadNext(){
  log(Player.class).info(""String_Node_Str"");
  PlaylistItem next=PlaylistManager.use(Playlist::getNextPlaying,null);
  if (next != null) {
    Fut.fut(next).map(MetadataReader::readMetadata).use(FX,m -> valNext=m);
  }
}",0.9525691699604744
36459,"private void openChooser(MouseEvent me){
  Picker<EffectType> w=new Picker<>();
  w.itemSupply=limitedToType == null ? EFFECT_TYPES::stream : () -> stream(new EffectType(limitedToType),new EffectType(null));
  w.textCoverter=EffectType::name;
  w.getNode().setPrefSize(300,500);
  PopOver<?> p=new PopOver<>(w.getNode());
  p.title.set(""String_Node_Str"");
  p.setArrowSize(0);
  p.setAutoFix(true);
  p.setAutoHide(true);
  p.show(propB);
  w.onCancel=p::hide;
  w.onSelect=ec -> {
    setValue(ec.instantiate());
    openProperties(me);
    p.hide();
  }
;
}","private void openChooser(MouseEvent me){
  Picker<EffectType> w=new Picker<>();
  w.itemSupply=limitedToType == null ? EFFECT_TYPES::stream : () -> stream(new EffectType(limitedToType),new EffectType(null));
  w.textConverter=EffectType::name;
  w.getNode().setPrefSize(300,500);
  PopOver<?> p=new PopOver<>(w.getNode());
  p.title.set(""String_Node_Str"");
  p.setArrowSize(0);
  p.setAutoFix(true);
  p.setAutoHide(true);
  p.show(propB);
  w.onCancel=p::hide;
  w.onSelect=ec -> {
    setValue(ec.instantiate());
    openProperties(me);
    p.hide();
  }
;
}",0.9991063449508488
36460,"private double distributeFrom(double size,List<Content> available){
  if (available.isEmpty()) {
    return size;
  }
  size=snapSize(size);
  int portion=(int)(size) / available.size();
  int remainder;
  while (size > 0 && !available.isEmpty()) {
    Iterator<Content> i=available.iterator();
    while (i.hasNext()) {
      Content c=i.next();
      if (portion >= c.getAvailable()) {
        c.setArea(c.getArea() - c.getAvailable());
        size-=c.getAvailable();
        c.setAvailable(0);
        i.remove();
      }
 else {
        c.setArea(c.getArea() - portion);
        c.setAvailable(c.getAvailable() - portion);
        size-=portion;
      }
      if ((int)size == 0) {
        return size;
      }
    }
    if (available.isEmpty()) {
      return size;
    }
    portion=(int)(size) / available.size();
    remainder=(int)(size) % available.size();
    if (portion == 0 && remainder != 0) {
      portion=remainder;
      remainder=0;
    }
  }
  return size;
}","private double distributeFrom(double size,List<Content> available){
  if (available.isEmpty()) {
    return size;
  }
  size=horizontal ? snapSizeX(size) : snapSizeY(size);
  int portion=(int)(size) / available.size();
  int remainder;
  while (size > 0 && !available.isEmpty()) {
    Iterator<Content> i=available.iterator();
    while (i.hasNext()) {
      Content c=i.next();
      if (portion >= c.getAvailable()) {
        c.setArea(c.getArea() - c.getAvailable());
        size-=c.getAvailable();
        c.setAvailable(0);
        i.remove();
      }
 else {
        c.setArea(c.getArea() - portion);
        c.setAvailable(c.getAvailable() - portion);
        size-=portion;
      }
      if ((int)size == 0) {
        return size;
      }
    }
    if (available.isEmpty()) {
      return size;
    }
    portion=(int)(size) / available.size();
    remainder=(int)(size) % available.size();
    if (portion == 0 && remainder != 0) {
      portion=remainder;
      remainder=0;
    }
  }
  return size;
}",0.9839357429718876
36461,"@Override protected double computeMaxWidth(double height){
  return snapSize(content.maxWidth(height));
}","@Override protected double computeMaxWidth(double height){
  return snapSizeX(content.maxWidth(height));
}",0.995260663507109
36462,"private void initializeDivderEventHandlers(final ContentDivider divider){
  divider.setOnMousePressed(e -> {
    if (horizontal) {
      divider.setInitialPos(divider.getDividerPos());
      divider.setPressPos(e.getSceneX());
      divider.setPressPos(getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT ? getSkinnable().getWidth() - e.getSceneX() : e.getSceneX());
    }
 else {
      divider.setInitialPos(divider.getDividerPos());
      divider.setPressPos(e.getSceneY());
    }
    e.consume();
  }
);
  divider.setOnMouseDragged(e -> {
    double delta=0;
    if (horizontal) {
      delta=getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT ? getSkinnable().getWidth() - e.getSceneX() : e.getSceneX();
    }
 else {
      delta=e.getSceneY();
    }
    delta-=divider.getPressPos();
    setAndCheckAbsoluteDividerPos(divider,Math.ceil(divider.getInitialPos() + delta));
    e.consume();
  }
);
}","private void initializeDivderEventHandlers(final ContentDivider divider){
  divider.addEventHandler(MouseEvent.ANY,event -> {
  }
);
  divider.setOnMousePressed(e -> {
    if (horizontal) {
      divider.setInitialPos(divider.getDividerPos());
      divider.setPressPos(e.getSceneX());
      divider.setPressPos(getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT ? getSkinnable().getWidth() - e.getSceneX() : e.getSceneX());
    }
 else {
      divider.setInitialPos(divider.getDividerPos());
      divider.setPressPos(e.getSceneY());
    }
    e.consume();
  }
);
  divider.setOnMouseDragged(e -> {
    double delta=0;
    if (horizontal) {
      delta=getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT ? getSkinnable().getWidth() - e.getSceneX() : e.getSceneX();
    }
 else {
      delta=e.getSceneY();
    }
    delta-=divider.getPressPos();
    setAndCheckAbsoluteDividerPos(divider,Math.ceil(divider.getInitialPos() + delta));
    e.consume();
  }
);
}",0.9700050838840876
36463,"private void removeContent(Node n){
  for (  Content c : contentRegions) {
    if (c.getContent().equals(n)) {
      getChildren().remove(c);
      contentRegions.remove(c);
      break;
    }
  }
}","private void removeContent(Node n){
  for (  Content c : contentRegions) {
    if (c.getContent().equals(n)) {
      c.dispose();
      getChildren().remove(c);
      contentRegions.remove(c);
      break;
    }
  }
}",0.9542168674698795
36464,"@Override protected double computeMaxHeight(double width){
  return snapSize(content.maxHeight(width));
}","@Override protected double computeMaxHeight(double width){
  return snapSizeY(content.maxHeight(width));
}",0.995260663507109
36465,"/** 
 * Creates a new SplitPaneSkin instance, installing the necessary child nodes into the Control   {@link Control#getChildren() children} list, aswell as the necessary  {@link Node#getInputMap() input mappings} forhandling key, mouse, etc events.
 * @param control The control that this skin should be installed onto.
 */
public ImprovedSplitPaneSkin(final SplitPane control){
  super(control);
  horizontal=getSkinnable().getOrientation() == Orientation.HORIZONTAL;
  contentRegions=FXCollections.observableArrayList();
  contentDividers=FXCollections.observableArrayList();
  int index=0;
  for (  Node n : getSkinnable().getItems()) {
    addContent(index++,n);
  }
  initializeContentListener();
  for (  SplitPane.Divider d : getSkinnable().getDividers()) {
    addDivider(d);
  }
  registerChangeListener(control.orientationProperty(),e -> {
    this.horizontal=getSkinnable().getOrientation() == Orientation.HORIZONTAL;
    this.previousSize=-1;
    for (    ContentDivider c : contentDividers) {
      c.setGrabberStyle(horizontal);
    }
    getSkinnable().requestLayout();
  }
);
  registerChangeListener(control.widthProperty(),e -> getSkinnable().requestLayout());
  registerChangeListener(control.heightProperty(),e -> getSkinnable().requestLayout());
}","/** 
 * Creates a new SplitPaneSkin instance, installing the necessary child nodes into the Control   {@link Control#getChildren() children} list, aswell as the necessary input mappings for handling key, mouse, etc events.
 * @param control The control that this skin should be installed onto.
 */
public ImprovedSplitPaneSkin(final SplitPane control){
  super(control);
  horizontal=getSkinnable().getOrientation() == Orientation.HORIZONTAL;
  contentRegions=FXCollections.<Content>observableArrayList();
  contentDividers=FXCollections.<ContentDivider>observableArrayList();
  int index=0;
  for (  Node n : getSkinnable().getItems()) {
    addContent(index++,n);
  }
  initializeContentListener();
  for (  SplitPane.Divider d : getSkinnable().getDividers()) {
    addDivider(d);
  }
  registerChangeListener(control.orientationProperty(),e -> {
    this.horizontal=getSkinnable().getOrientation() == Orientation.HORIZONTAL;
    this.previousSize=-1;
    for (    ContentDivider c : contentDividers) {
      c.setGrabberStyle(horizontal);
    }
    getSkinnable().requestLayout();
  }
);
  registerChangeListener(control.widthProperty(),e -> getSkinnable().requestLayout());
  registerChangeListener(control.heightProperty(),e -> getSkinnable().requestLayout());
}",0.9779179810725552
36466,"private double distributeTo(List<Content> available,double size){
  if (available.isEmpty()) {
    return size;
  }
  size=snapSize(size);
  int portion=(int)(size) / available.size();
  int remainder;
  while (size > 0 && !available.isEmpty()) {
    Iterator<Content> i=available.iterator();
    while (i.hasNext()) {
      Content c=i.next();
      double max=Math.min((horizontal ? c.maxWidth(-1) : c.maxHeight(-1)),Double.MAX_VALUE);
      double min=horizontal ? c.minWidth(-1) : c.minHeight(-1);
      if (c.getArea() >= max) {
        c.setAvailable(c.getArea() - min);
        i.remove();
        continue;
      }
      if (portion >= (max - c.getArea())) {
        size-=(max - c.getArea());
        c.setArea(max);
        c.setAvailable(max - min);
        i.remove();
      }
 else {
        c.setArea(c.getArea() + portion);
        c.setAvailable(c.getArea() - min);
        size-=portion;
      }
      if ((int)size == 0) {
        return size;
      }
    }
    if (available.isEmpty()) {
      return size;
    }
    portion=(int)(size) / available.size();
    remainder=(int)(size) % available.size();
    if (portion == 0 && remainder != 0) {
      portion=remainder;
      remainder=0;
    }
  }
  return size;
}","private double distributeTo(List<Content> available,double size){
  if (available.isEmpty()) {
    return size;
  }
  size=horizontal ? snapSizeX(size) : snapSizeY(size);
  int portion=(int)(size) / available.size();
  int remainder;
  while (size > 0 && !available.isEmpty()) {
    Iterator<Content> i=available.iterator();
    while (i.hasNext()) {
      Content c=i.next();
      double max=Math.min((horizontal ? c.maxWidth(-1) : c.maxHeight(-1)),Double.MAX_VALUE);
      double min=horizontal ? c.minWidth(-1) : c.minHeight(-1);
      if (c.getArea() >= max) {
        c.setAvailable(c.getArea() - min);
        i.remove();
        continue;
      }
      if (portion >= (max - c.getArea())) {
        size-=(max - c.getArea());
        c.setArea(max);
        c.setAvailable(max - min);
        i.remove();
      }
 else {
        c.setArea(c.getArea() + portion);
        c.setAvailable(c.getArea() - min);
        size-=portion;
      }
      if ((int)size == 0) {
        return size;
      }
    }
    if (available.isEmpty()) {
      return size;
    }
    portion=(int)(size) / available.size();
    remainder=(int)(size) % available.size();
    if (portion == 0 && remainder != 0) {
      portion=remainder;
      remainder=0;
    }
  }
  return size;
}",0.9872
36467,"public void buildContent(){
  tiles.getChildren().clear();
  itemSupply.get().sorted(byNC(textCoverter::toS)).forEach(item -> {
    Node cell=cellFactory.apply(item);
    cell.setOnMouseClicked(e -> {
      if (e.getButton() == PRIMARY) {
        onSelect.accept(item);
        e.consume();
      }
    }
);
    tiles.getChildren().add(cell);
  }
);
  int s=getCells().size();
  Anim.par(getCells(),(i,n) -> seq(new Anim(n::setOpacity).dur(i * (750 / s)).intpl(0),new Anim(n::setOpacity).dur(500).intpl(x -> sqrt(x)))).play();
}","public void buildContent(){
  tiles.getChildren().clear();
  itemSupply.get().sorted(byNC(textConverter::toS)).forEach(item -> {
    Node cell=cellFactory.apply(item);
    cell.setOnMouseClicked(e -> {
      if (e.getButton() == PRIMARY) {
        onSelect.accept(item);
        e.consume();
      }
    }
);
    tiles.getChildren().add(cell);
  }
);
  int s=getCells().size();
  Anim.par(getCells(),(i,n) -> seq(new Anim(n::setOpacity).dur(i * (750 / s)).intpl(0),new Anim(n::setOpacity).dur(500).intpl(x -> sqrt(x)))).play();
}",0.999053926206244
36468,"public WidgetPicker(){
  super();
  itemSupply=APP.widgetManager::getFactories;
  textCoverter=WidgetFactory::nameGui;
  infoCoverter=WidgetInfo::toStr;
}","public WidgetPicker(){
  super();
  itemSupply=APP.widgetManager::getFactories;
  textConverter=WidgetFactory::nameGui;
  infoConverter=WidgetInfo::toStr;
}",0.9935483870967742
36469,"public Layouter(Container<?> c,int index){
  noØ(c);
  this.index=index;
  this.container=c;
  cp.itemSupply=() -> stream(tuple(""String_Node_Str"",this::showSplitV,""String_Node_Str""),tuple(""String_Node_Str"",this::showSplitH,""String_Node_Str""),tuple(""String_Node_Str"",this::showWidgetArea,""String_Node_Str""),tuple(""String_Node_Str"",this::showFreeform,""String_Node_Str"" + ""String_Node_Str""));
  cp.textCoverter=layout_action -> layout_action._1;
  cp.infoCoverter=layout_action -> layout_action._3;
  cp.onSelect=layout_action -> closeAndDo(cp.root,layout_action._2);
  cp.onCancel=() -> {
    isCancelPlaying=true;
    hide();
  }
;
  cp.consumeCancelClick=false;
  cp.buildContent();
  setAnchor(root,cp.root,0d);
  a1=new FadeTransition(ANIM_DUR,cp.root);
  a1.setInterpolator(LINEAR);
  a2=new ScaleTransition(ANIM_DUR,cp.root);
  a2.setInterpolator(new CircularInterpolator(EASE_OUT));
  cp.root.setOpacity(0);
  cp.root.setScaleX(0);
  cp.root.setScaleY(0);
  installDrag(root,EXCHANGE,""String_Node_Str"",DragUtil::hasComponent,e -> container == DragUtil.getComponent(e),e -> DragUtil.getComponent(e).swapWith(container,index));
  clickShowHider=e -> {
    if (e.getButton() == PRIMARY) {
      if (cp.root.getOpacity() != 0)       return;
      if (container.lockedUnder.get())       return;
      show();
      e.consume();
    }
  }
;
  exitHider=e -> {
    if (!isCancelPlaying) {
      cp.onCancel.run();
      e.consume();
    }
  }
;
  setWeakMode(true);
}","public Layouter(Container<?> c,int index){
  noØ(c);
  this.index=index;
  this.container=c;
  cp.itemSupply=() -> stream(tuple(""String_Node_Str"",this::showSplitV,""String_Node_Str""),tuple(""String_Node_Str"",this::showSplitH,""String_Node_Str""),tuple(""String_Node_Str"",this::showWidgetArea,""String_Node_Str""),tuple(""String_Node_Str"",this::showFreeform,""String_Node_Str"" + ""String_Node_Str""));
  cp.textConverter=layout_action -> layout_action._1;
  cp.infoConverter=layout_action -> layout_action._3;
  cp.onSelect=layout_action -> closeAndDo(cp.root,layout_action._2);
  cp.onCancel=() -> {
    isCancelPlaying=true;
    hide();
  }
;
  cp.consumeCancelClick=false;
  cp.buildContent();
  setAnchor(root,cp.root,0d);
  a1=new FadeTransition(ANIM_DUR,cp.root);
  a1.setInterpolator(LINEAR);
  a2=new ScaleTransition(ANIM_DUR,cp.root);
  a2.setInterpolator(new CircularInterpolator(EASE_OUT));
  cp.root.setOpacity(0);
  cp.root.setScaleX(0);
  cp.root.setScaleY(0);
  installDrag(root,EXCHANGE,""String_Node_Str"",DragUtil::hasComponent,e -> container == DragUtil.getComponent(e),e -> DragUtil.getComponent(e).swapWith(container,index));
  clickShowHider=e -> {
    if (e.getButton() == PRIMARY) {
      if (cp.root.getOpacity() != 0)       return;
      if (container.lockedUnder.get())       return;
      show();
      e.consume();
    }
  }
;
  exitHider=e -> {
    if (!isCancelPlaying) {
      cp.onCancel.run();
      e.consume();
    }
  }
;
  setWeakMode(true);
}",0.9993178717598908
36470,"/** 
 * Sets visibility of the background. The bgr is visible only when the image size ratio and thumbnail size ratio does not match. Default value is true. Invisible background becomes transparent. Stylizable with css.
 */
public void setBackgroundVisible(boolean val){
  if (val) {
    if (!root.getStyleClass().contains(bgr_styleclass))     root.getStyleClass().add(bgr_styleclass);
  }
 else   root.getStyleClass().remove(bgr_styleclass);
}","/** 
 * Sets visibility of the background. The bgr is visible only when the image size ratio and thumbnail size ratio does not match. Default value is true. Invisible background becomes transparent. Styleable with css.
 */
public void setBackgroundVisible(boolean val){
  if (val) {
    if (!root.getStyleClass().contains(bgr_styleclass))     root.getStyleClass().add(bgr_styleclass);
  }
 else   root.getStyleClass().remove(bgr_styleclass);
}",0.9966178128523112
36471,"@Override public void handleEvent(Object event){
  super.handleEvent(event);
  if (event == Events.PLANETOID_DESTROYED && !isMissionStartPlanetoidSplitting) {
    game.mission.spawnPlanetoid();
  }
}","@Override public void handleEvent(Object event){
  super.handleEvent(event);
  if (event == Events.PLANETOID_DESTROYED && !isMissionStartPlanetoidSplitting) {
    game.runNext.add(game.mission::spawnPlanetoid);
  }
}",0.9204819277108434
36472,"private void drawUfoRadar(double x,double y){
  double r=game.settings.UFO_RADAR_RADIUS;
  gc.setGlobalAlpha(0.3);
  gc.setFill(new RadialGradient(0,0,0.5,0.5,1,true,NO_CYCLE,new Stop(0.3,Color.TRANSPARENT),new Stop(1,rgb(114,208,74))));
  gc.fillOval(x - r,y - r,2 * r,2 * r);
  gc.setGlobalAlpha(1);
}","private void drawUfoRadar(double x,double y){
  double r=game.settings.UFO_RADAR_RADIUS;
  gc.setFill(new RadialGradient(0,0,0.5,0.5,1,true,NO_CYCLE,new Stop(0.3,Color.TRANSPARENT),new Stop(1,rgb(114,208,74,0.3))));
  gc.fillOval(x - r,y - r,2 * r,2 * r);
}",0.9035714285714286
36473,"public WindowBase(Stage owner,StageStyle style){
  if (s != null)   s.initOwner(owner);
  if (style != null)   s.initStyle(style);
  s.setFullScreenExitHint(""String_Node_Str"");
}","public WindowBase(Stage owner,StageStyle style){
  if (owner != null)   s.initOwner(owner);
  if (style != null)   s.initStyle(style);
  s.setFullScreenExitHint(""String_Node_Str"");
}",0.9833333333333332
36474,"public void serialize(){
  File dir=new File(APP.DIR_LAYOUTS,""String_Node_Str"");
  if (!Util.isValidatedDirectory(dir)) {
    LOGGER.error(""String_Node_Str"",dir);
    return;
  }
  Set<File> filesOld=listFiles(dir).collect(toSet());
  List<Window> windows=stream(Window.WINDOWS).without(miniWindow).toList();
  LOGGER.info(""String_Node_Str"" + windows.size() + ""String_Node_Str"");
  String sessionUniqueName=LocalDateTime.now().toString();
  boolean isError=false;
  Set<File> filesNew=new HashSet<>();
  for (int i=0; i < windows.size(); i++) {
    Window w=windows.get(i);
    File f=new File(dir,""String_Node_Str"" + sessionUniqueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
    filesNew.add(f);
    isError|=App.APP.serializators.toXML(new WindowState(w),f).ifError(e -> LOGGER.error(""String_Node_Str"",e)).isError();
    if (isError)     break;
  }
  (isError ? filesNew : filesOld).forEach(File::delete);
}","public void serialize(){
  File dir=new File(APP.DIR_LAYOUTS,""String_Node_Str"");
  if (!Util.isValidatedDirectory(dir)) {
    LOGGER.error(""String_Node_Str"",dir);
    return;
  }
  Set<File> filesOld=listFiles(dir).collect(toSet());
  List<Window> windows=stream(Window.WINDOWS).without(miniWindow).toList();
  LOGGER.info(""String_Node_Str"" + windows.size() + ""String_Node_Str"");
  String sessionUniqueName=System.currentTimeMillis() + ""String_Node_Str"";
  boolean isError=false;
  Set<File> filesNew=new HashSet<>();
  for (int i=0; i < windows.size(); i++) {
    Window w=windows.get(i);
    File f=new File(dir,""String_Node_Str"" + sessionUniqueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
    filesNew.add(f);
    isError|=App.APP.serializators.toXML(new WindowState(w),f).ifError(e -> LOGGER.error(""String_Node_Str"",e)).isError();
    if (isError)     break;
  }
  (isError ? filesNew : filesOld).forEach(File::delete);
}",0.9641693811074918
36475,"static String addText(String text,String added,StringDirection from){
  return from == FROM_START ? added + s : s + added;
}","static String addText(String text,String added,StringDirection from){
  return from == FROM_START ? added + text : text + added;
}",0.9606299212598424
36476,"public GridViewSkin(GridView<T,F> control){
  skin=new SkinDelegate(control);
  skin.flow.setId(""String_Node_Str"");
  skin.flow.setPannable(false);
  skin.flow.setVertical(true);
  skin.flow.setFocusTraversable(getSkinnable().isFocusTraversable());
  skin.flow.setCellFactory(f -> GridViewSkin.this.createCell());
  root=layHeaderTop(10,Pos.TOP_RIGHT,filterPane,skin.flow);
  filter=new Filter(control.type,control.itemsFiltered);
  updateGridViewItems();
  updateRowCount();
  skin.flow.addEventHandler(KEY_PRESSED,e -> {
    KeyCode c=e.getCode();
    if (c.isNavigationKey()) {
      if (control.selectOn.contains(SelectionOn.KEY_PRESSED)) {
        if (c == KeyCode.UP || c == KeyCode.KP_UP)         selectIfNoneOr(this::selectFirst,this::selectUp);
        if (c == KeyCode.DOWN || c == KeyCode.KP_DOWN)         selectIfNoneOr(this::selectFirst,this::selectDown);
        if (c == KeyCode.LEFT || c == KeyCode.KP_LEFT)         selectIfNoneOr(this::selectFirst,this::selectLeft);
        if (c == KeyCode.RIGHT || c == KeyCode.KP_RIGHT)         selectIfNoneOr(this::selectFirst,this::selectRight);
        if (c == KeyCode.PAGE_UP)         selectIfNoneOr(this::selectFirst,this::selectPageUp);
        if (c == KeyCode.PAGE_DOWN)         selectIfNoneOr(this::selectFirst,this::selectPageDown);
        if (c == KeyCode.HOME)         selectFirst();
        if (c == KeyCode.END)         selectLast();
      }
      e.consume();
    }
 else     if (c == ESCAPE && !e.isConsumed()) {
      if (selectedCI >= 0) {
        selectNone();
        e.consume();
      }
    }
  }
);
}","public GridViewSkin(GridView<T,F> control){
  skin=new SkinDelegate(control);
  skin.flow.setId(""String_Node_Str"");
  skin.flow.setPannable(false);
  skin.flow.setVertical(true);
  skin.flow.setFocusTraversable(getSkinnable().isFocusTraversable());
  skin.flow.setCellFactory(f -> GridViewSkin.this.createCell());
  control.focusedProperty().addListener((o,ov,nv) -> {
    if (nv)     getFlow().requestFocus();
  }
);
  root=layHeaderTop(10,Pos.TOP_RIGHT,filterPane,skin.flow);
  filter=new Filter(control.type,control.itemsFiltered);
  updateGridViewItems();
  updateRowCount();
  skin.flow.addEventHandler(KEY_PRESSED,e -> {
    KeyCode c=e.getCode();
    if (c.isNavigationKey()) {
      if (control.selectOn.contains(SelectionOn.KEY_PRESSED)) {
        if (c == KeyCode.UP || c == KeyCode.KP_UP)         selectIfNoneOr(this::selectFirst,this::selectUp);
        if (c == KeyCode.DOWN || c == KeyCode.KP_DOWN)         selectIfNoneOr(this::selectFirst,this::selectDown);
        if (c == KeyCode.LEFT || c == KeyCode.KP_LEFT)         selectIfNoneOr(this::selectFirst,this::selectLeft);
        if (c == KeyCode.RIGHT || c == KeyCode.KP_RIGHT)         selectIfNoneOr(this::selectFirst,this::selectRight);
        if (c == KeyCode.PAGE_UP)         selectIfNoneOr(this::selectFirst,this::selectPageUp);
        if (c == KeyCode.PAGE_DOWN)         selectIfNoneOr(this::selectFirst,this::selectPageDown);
        if (c == KeyCode.HOME)         selectFirst();
        if (c == KeyCode.END)         selectLast();
      }
      e.consume();
    }
 else     if (c == ESCAPE && !e.isConsumed()) {
      if (selectedCI >= 0) {
        selectNone();
        e.consume();
      }
    }
  }
);
}",0.9681177191906806
36477,"@IsAction(name=""String_Node_Str"",desc=""String_Node_Str"",keys=""String_Node_Str"") public static void openLauncher(){
  File f=new File(APP.DIR_LAYOUTS,""String_Node_Str"");
  Component c=UiContext.instantiateComponent(f);
  if (c != null) {
    OverlayPane op=new OverlayPane(){
      @Override public void show(){
        OverlayPane root=this;
        getChildren().add(c.load());
        if (c instanceof Widget) {
          ((Widget<?>)c).getController().getFieldOrThrow(""String_Node_Str"").setValue(true);
          ((Widget<?>)c).getController().getFieldOrThrow(""String_Node_Str"").setValue(true);
          ((Widget<?>)c).areaTemp=new ContainerNode(){
            @Override public Pane getRoot(){
              return root;
            }
            @Override public void show(){
            }
            @Override public void hide(){
            }
            @Override public void close(){
              root.hide();
            }
          }
;
        }
        super.show();
      }
    }
;
    op.display.set(SCREEN_OF_MOUSE);
    op.show();
    c.load().prefWidth(900);
    c.load().prefHeight(700);
  }
}","@IsAction(name=""String_Node_Str"",desc=""String_Node_Str"",keys=""String_Node_Str"") public static void openLauncher(){
  File f=new File(APP.DIR_LAYOUTS,""String_Node_Str"");
  Component c=UiContext.instantiateComponent(f);
  if (c != null) {
    OverlayPane op=new OverlayPane(){
      @Override public void show(){
        OverlayPane root=this;
        getChildren().add(c.load());
        run(millis(500),() -> {
          stream(((Pane)((Widget<?>)c).load()).getChildren()).findAny(GridView.class::isInstance).ifPresent(n -> ((GridView)n).implGetSkin().getFlow().requestFocus());
        }
);
        if (c instanceof Widget) {
          ((Widget<?>)c).getController().getFieldOrThrow(""String_Node_Str"").setValue(true);
          ((Widget<?>)c).getController().getFieldOrThrow(""String_Node_Str"").setValue(true);
          ((Widget<?>)c).areaTemp=new ContainerNode(){
            @Override public Pane getRoot(){
              return root;
            }
            @Override public void show(){
            }
            @Override public void hide(){
            }
            @Override public void close(){
              root.hide();
            }
          }
;
        }
        super.show();
      }
    }
;
    op.display.set(SCREEN_OF_MOUSE);
    op.show();
    c.load().prefWidth(900);
    c.load().prefHeight(700);
  }
}",0.9126691266912668
36478,"private void visit(){
  if (!initialized)   return;
  Item item=new TopItem();
  visitId.incrementAndGet();
  Fut.fut(item).map(Item::children,executorIO).use(cells -> cells.sort(buildSortComparator()),executorIO).use(cells -> {
    grid.getItemsRaw().setAll(cells);
    if (item.last_gridposition >= 0)     grid.implGetSkin().getFlow().setPosition(item.last_gridposition);
    grid.implGetSkin().getFlow().requestFocus();
    run(400,grid::requestFocus);
  }
,FX).run();
}","private void visit(){
  if (!initialized)   return;
  Item item=new TopItem();
  visitId.incrementAndGet();
  Fut.fut(item).map(Item::children,executorIO).use(cells -> cells.sort(buildSortComparator()),executorIO).use(cells -> {
    grid.getItemsRaw().setAll(cells);
    if (item.last_gridposition >= 0)     grid.implGetSkin().getFlow().setPosition(item.last_gridposition);
    grid.implGetSkin().getFlow().requestFocus();
  }
,FX).run();
}",0.963855421686747
36479,"private void visit(Item dir,Item scrollTo){
  if (!initialized)   return;
  if (item != null)   item.last_gridposition=grid.implGetSkin().getFlow().getPosition();
  if (item == dir)   return;
  if (item != null && item.isHChildOf(dir))   item.disposeChildren();
  visitId++;
  item=dir;
  lastVisited=dir.val;
  Fut.fut(item).map(Item::children,executorIO).use(cells -> cells.sort(buildSortComparator()),executorIO).use(cells -> {
    grid.getItemsRaw().setAll(cells);
    if (item.last_gridposition >= 0)     grid.implGetSkin().getFlow().setPosition(item.last_gridposition);
    grid.requestFocus();
  }
,FX).showProgress(getWidget().getWindow().taskAdd()).run();
}","private void visit(Item dir,Item scrollTo){
  if (!initialized)   return;
  if (item != null)   item.last_gridposition=grid.implGetSkin().getFlow().getPosition();
  if (item == dir)   return;
  if (item != null && item.isHChildOf(dir))   item.disposeChildren();
  visitId++;
  item=dir;
  lastVisited=dir.val;
  Fut.fut(item).map(Item::children,executorIO).use(cells -> cells.sort(buildSortComparator()),executorIO).use(cells -> {
    grid.getItemsRaw().setAll(cells);
    if (item.last_gridposition >= 0)     grid.implGetSkin().getFlow().setPosition(item.last_gridposition);
    grid.requestFocus();
    run(millis(500),() -> grid.requestFocus());
  }
,FX).showProgress(getWidget().getWindow().taskAdd()).run();
}",0.9652173913043478
36480,"private SliderField(Config<Number> c){
  super(c);
  double v=c.getValue().doubleValue();
  min=new Label(String.valueOf(c.getMin()));
  max=new Label(String.valueOf(c.getMax()));
  slider=new Slider(c.getMin(),c.getMax(),v);
  cur=new Label(get().toString());
  cur.setPadding(new Insets(0,5,0,0));
  slider.valueProperty().addListener((o,ov,nv) -> {
    cur.setText(get().toString());
    if (!slider.isValueChanging())     apply(false);
  }
);
  slider.setOnMouseReleased(e -> {
    if (applyOnChange)     apply(false);
  }
);
  slider.setBlockIncrement((c.getMax() - c.getMin()) / 20);
  slider.setMinWidth(-1);
  slider.setPrefWidth(-1);
  slider.setMaxWidth(-1);
  box=new HBox(min,slider,max);
  box.setAlignment(CENTER_LEFT);
  box.setSpacing(5);
  Class type=unPrimitivize(config.getType());
  if (isIn(type,Integer.class,Short.class,Long.class)) {
    box.getChildren().add(0,cur);
    slider.setMajorTickUnit(1);
    slider.setSnapToTicks(true);
  }
}","private SliderField(Config<Number> c){
  super(c);
  double v=c.getValue().doubleValue();
  min=new Label(String.valueOf(c.getMin()));
  max=new Label(String.valueOf(c.getMax()));
  slider=new Slider(c.getMin(),c.getMax(),v);
  cur=new Label(get().toString());
  cur.setPadding(new Insets(0,5,0,0));
  slider.valueProperty().addListener((o,ov,nv) -> {
    cur.setText(get().toString());
    if (!slider.isValueChanging())     apply(false);
  }
);
  slider.setOnMouseReleased(e -> {
    if (applyOnChange)     apply(false);
  }
);
  slider.setBlockIncrement((c.getMax() - c.getMin()) / 20);
  slider.setMinWidth(-1);
  slider.setPrefWidth(-1);
  slider.setMaxWidth(-1);
  box=new HBox(min,slider,max);
  box.setAlignment(CENTER_LEFT);
  box.setSpacing(5);
  Class type=config.getType();
  if (isIn(type,Integer.class,Short.class,Long.class)) {
    box.getChildren().add(0,cur);
    slider.setMajorTickUnit(1);
    slider.setSnapToTicks(true);
  }
}",0.9921424829753798
36481,"public static Window createWindowOwner(){
  Window w=new Window();
  w.getStage().initStyle(UTILITY);
  w.s.setOpacity(0);
  w.s.setScene(new Scene(new Region()));
  ((Region)w.s.getScene().getRoot()).setBackground(null);
  w.s.getScene().setFill(null);
  w.s.setTitle(APP.name);
  w.s.getIcons().add(APP.getIcon());
  w.setSize(20,20);
  return w;
}","public Window createWindowOwner(){
  Window w=new Window();
  w.getStage().initStyle(UTILITY);
  w.s.setOpacity(0);
  w.s.setScene(new Scene(new Region()));
  ((Region)w.s.getScene().getRoot()).setBackground(null);
  w.s.getScene().setFill(null);
  w.s.setTitle(APP.name);
  w.s.getIcons().add(APP.getIcon());
  w.setSize(20,20);
  return w;
}",0.98989898989899
36482,"/** 
 * The main entry point for applications. The start method is called after the init method has returned, and after the system is ready for the application to begin running. <p> NOTE: This method is called on the JavaFX Application Thread.
 * @param primaryStage the primary stage for this application, onto whichthe application scene can be set. The primary stage will be embedded in the browser if the application was launched as an applet. Applications may create other stages, if needed, but they will not be primary stages and will not be embedded in the browser.
 */
@Override public void start(Stage primaryStage){
  if (close_prematurely) {
    LOGGER.info(""String_Node_Str"");
    close();
    return;
  }
  try {
    taskbarIcon.setTitle(name);
    taskbarIcon.setIcon(getIcon());
    taskbarIcon.setOnClose(this::close);
    taskbarIcon.setOnMinimize(v -> windowManager.windows.forEach(w -> w.setMinimized(v)));
    taskbarIcon.setOnAltTab(() -> {
      boolean apphasfocus=windowManager.getFocused() != null;
      if (!apphasfocus) {
        boolean allminimized=windowManager.windows.stream().allMatch(Window::isMinimized);
        if (allminimized)         windowManager.windows.stream().forEach(w -> w.setMinimized(false));
 else         windowManager.windows.stream().filter(w -> w.isShowing()).forEach(Window::focus);
      }
    }
);
    windowOwner=windowManager.createWindowOwner();
    windowOwner.show();
    ClassIndex.getAnnotated(IsPluginType.class).forEach(plugins::registerPluginType);
    ClassIndex.getAnnotated(IsPlugin.class).forEach(plugins::registerPlugin);
    widgetManager.initialize();
    services.addService(new TrayService());
    services.addService(new Notifier());
    services.addService(new PlaycountIncrementer());
    services.addService(new ClickEffect());
    configuration.collectStatic();
    services.forEach(configuration::collect);
    configuration.collect(this,windowManager,guide,actionPane);
    configuration.collectComplete();
    configuration.load(FILE_SETTINGS);
    Player.initialize();
    List<String> ps=fetchParameters();
    normalLoad=ps.stream().noneMatch(s -> s.endsWith(""String_Node_Str"") || widgetManager.factories.get(s) != null);
    configuration.getFields(f -> f.getGroup().equals(""String_Node_Str"") && f.getGuiName().equals(""String_Node_Str"")).get(0).applyValue();
    windowManager.deserialize(normalLoad);
    Db.start();
    initialized=true;
  }
 catch (  Exception e) {
    LOGGER.info(""String_Node_Str"",e);
    LOGGER.error(""String_Node_Str"",e);
  }
  configuration.getFields().forEach(Config::applyValue);
  if (normalLoad)   Player.loadLast();
  if (guide.first_time.get())   run(3000,guide::start);
  Image image=new Image(new File(""String_Node_Str"").getAbsoluteFile().toURI().toString());
  ImageCursor c=new ImageCursor(image,3,3);
  window.getStage().getScene().setCursor(c);
  parameterProcessor.process(fetchParameters());
}","/** 
 * The main entry point for applications. The start method is called after the init method has returned, and after the system is ready for the application to begin running. <p> NOTE: This method is called on the JavaFX Application Thread.
 * @param primaryStage the primary stage for this application, onto whichthe application scene can be set. The primary stage will be embedded in the browser if the application was launched as an applet. Applications may create other stages, if needed, but they will not be primary stages and will not be embedded in the browser.
 */
@Override public void start(Stage primaryStage){
  if (close_prematurely) {
    LOGGER.info(""String_Node_Str"");
    close();
    return;
  }
  try {
    taskbarIcon.setTitle(name);
    taskbarIcon.setIcon(getIcon());
    taskbarIcon.setOnClose(this::close);
    taskbarIcon.setOnMinimize(v -> windowManager.windows.forEach(w -> w.setMinimized(v)));
    taskbarIcon.setOnAltTab(() -> {
      boolean apphasfocus=windowManager.getFocused() != null;
      if (!apphasfocus) {
        boolean allminimized=windowManager.windows.stream().allMatch(Window::isMinimized);
        if (allminimized)         windowManager.windows.stream().forEach(w -> w.setMinimized(false));
 else         windowManager.windows.stream().filter(WindowBase::isShowing).forEach(Window::focus);
      }
    }
);
    windowOwner=windowManager.createWindowOwner();
    windowOwner.show();
    ClassIndex.getAnnotated(IsPluginType.class).forEach(plugins::registerPluginType);
    ClassIndex.getAnnotated(IsPlugin.class).forEach(plugins::registerPlugin);
    widgetManager.initialize();
    services.addService(new TrayService());
    services.addService(new Notifier());
    services.addService(new PlaycountIncrementer());
    services.addService(new ClickEffect());
    configuration.collectStatic();
    services.forEach(configuration::collect);
    configuration.collect(this,windowManager,guide,actionPane);
    configuration.collectComplete();
    configuration.load(FILE_SETTINGS);
    Player.initialize();
    List<String> ps=fetchParameters();
    normalLoad=ps.stream().noneMatch(s -> s.endsWith(""String_Node_Str"") || widgetManager.factories.get(s) != null);
    configuration.getFields(f -> f.getGroup().equals(""String_Node_Str"") && f.getGuiName().equals(""String_Node_Str"")).get(0).applyValue();
    windowManager.deserialize(normalLoad);
    Db.start();
    initialized=true;
  }
 catch (  Exception e) {
    LOGGER.info(""String_Node_Str"",e);
    LOGGER.error(""String_Node_Str"",e);
  }
  configuration.getFields().forEach(Config::applyValue);
  if (normalLoad)   Player.loadLast();
  if (guide.first_time.get())   run(3000,guide::start);
  Image image=new Image(new File(""String_Node_Str"").getAbsoluteFile().toURI().toString());
  ImageCursor c=new ImageCursor(image,3,3);
  window.getStage().getScene().setCursor(c);
  parameterProcessor.process(fetchParameters());
}",0.9964071856287424
36483,"/** 
 * Converts primitive to wrappers, otherwise does nothing.
 * @param c
 * @return Object class of given class or class itself if not primitive.
 */
public static Class unPrimitivize(Class<?> c){
  if (c.isPrimitive()) {
    if (c.equals(boolean.class))     return Boolean.class;
    if (c.equals(int.class))     return Integer.class;
    if (c.equals(float.class))     return Float.class;
    if (c.equals(double.class))     return Double.class;
    if (c.equals(long.class))     return Long.class;
    if (c.equals(byte.class))     return Byte.class;
    if (c.equals(short.class))     return Short.class;
    if (c.equals(char.class))     return Character.class;
  }
  return c;
}","/** 
 * Converts primitive class to wrapper class.
 * @param c any class
 * @return respective primitive wrapper class of given class or the class itself if it is not primitive.
 */
@SuppressWarnings(""String_Node_Str"") public static <T>Class<T> unPrimitivize(Class<T> c){
  if (c.isPrimitive()) {
    if (c.equals(boolean.class))     return (Class)Boolean.class;
    if (c.equals(int.class))     return (Class)Integer.class;
    if (c.equals(float.class))     return (Class)Float.class;
    if (c.equals(double.class))     return (Class)Double.class;
    if (c.equals(long.class))     return (Class)Long.class;
    if (c.equals(byte.class))     return (Class)Byte.class;
    if (c.equals(short.class))     return (Class)Short.class;
    if (c.equals(char.class))     return (Class)Character.class;
  }
  return c;
}",0.7829560585885486
36484,"/** 
 * @param name
 * @param c
 * @param category
 * @param instance owner of the field or null if static
 */
FieldConfig(String name,IsConfig c,Object instance,String category,MethodHandle getter,MethodHandle setter){
  super((Class)getter.type().returnType(),name,c,getValueFromFieldMethodHandle(getter,instance),category);
  this.getter=getter;
  this.setter=setter;
  this.instance=instance;
}","/** 
 * @param name
 * @param c
 * @param category
 * @param instance owner of the field or null if static
 */
@SuppressWarnings(""String_Node_Str"") FieldConfig(String name,IsConfig c,Object instance,String category,MethodHandle getter,MethodHandle setter){
  super((Class)getter.type().returnType(),name,c,getValueFromFieldMethodHandle(getter,instance),category);
  this.getter=getter;
  this.setter=setter;
  this.instance=instance;
}",0.9555822328931572
36485,"@Override public boolean isMinMax(){
  return !(Double.compare(min,Double.NaN) == 0 || Double.compare(max,Double.NaN) == 0) && Number.class.isAssignableFrom(unPrimitivize(getType()));
}","@Override public boolean isMinMax(){
  return !(Double.compare(min,Double.NaN) == 0 || Double.compare(max,Double.NaN) == 0) && Number.class.isAssignableFrom(getType());
}",0.9577464788732394
36486,"@Override public ObservableList<T> fromS(String str){
  ObservableList<T> l=observableArrayList();
  split(str,""String_Node_Str"",x -> x).stream().map(s -> {
    T t=a.factory.get();
    List<Config<Object>> configs=(List)list(a.toConfigurable.apply(t).getFields());
    List<String> vals=split(s,""String_Node_Str"",x -> x);
    if (configs.size() == vals.size())     forEachBoth(configs,vals,(c,v) -> c.setNapplyValue(c.fromS(v)));
    if (t.getClass().equals(configs.get(0).getType()))     return (T)configs.get(0).getValue();
 else     return t;
  }
).forEach(l::add);
  return l;
}","@Override public ObservableList<T> fromS(String str){
  ObservableList<T> l=observableArrayList();
  split(str,""String_Node_Str"",x -> x).stream().map(s -> {
    T t=a.factory.get();
    List<Config<Object>> configs=(List)list(a.toConfigurable.apply(t).getFields());
    List<String> vals=split(s,""String_Node_Str"");
    if (configs.size() == vals.size())     forEachBoth(configs,vals,(c,v) -> c.setNapplyValue(c.fromS(v)));
    if (t.getClass().equals(configs.get(0).getType()))     return (T)configs.get(0).getValue();
 else     return t;
  }
).forEach(l::add);
  return l;
}",0.993960310612597
36487,"/** 
 * Equivalent to   {@link #apply()}. Exists for compatibility with   {@link Runnable}. 
 */
@Deprecated default void run(){
  apply();
}","/** 
 * Equivalent to   {@link #apply()}. Exists for compatibility with   {@link Runnable}. 
 */
default void run(){
  apply();
}",0.9555555555555556
36488,"/** 
 * Equivalent to   {@link #apply(Object)}}. Exists for compatibility with   {@link Predicate}. 
 */
@Deprecated @Override default boolean test(I i){
  return apply(i);
}","/** 
 * Equivalent to   {@link #apply(Object)}}. Exists for compatibility with   {@link Predicate}. 
 */
@Override default boolean test(I i){
  return apply(i);
}",0.9642857142857144
36489,"/** 
 * Equivalent to   {@link #apply()}. Exists for compatibility with   {@link Supplier}. 
 */
@Deprecated default O get(){
  return apply();
}","/** 
 * Equivalent to   {@link #apply()}. Exists for compatibility with   {@link Supplier}. 
 */
default O get(){
  return apply();
}",0.9568345323741008
36490,"/** 
 * Equivalent to   {@link #apply(Object)}}. Exists for compatibility with   {@link Callback}. 
 */
@Deprecated @Override default O call(I i){
  return apply(i);
}","/** 
 * Equivalent to   {@link #apply(Object)}. Exists for compatibility with   {@link Callback}. 
 */
@Override default O call(I i){
  return apply(i);
}",0.9595015576323987
36491,"@SuppressWarnings(""String_Node_Str"") default Ƒ1<I,O> nonNull(O or){
  return andThen(o -> o == null ? or : (O)o);
}","default Ƒ1<I,O> nonNull(O or){
  return andThen(o -> o == null ? or : o);
}",0.7894736842105263
36492,"private void setCoverPost(Item item,boolean imgAlreadyLoaded,File imgFile,Image img){
  runFX(() -> {
    if (item == getItem()) {
      System.out.println(""String_Node_Str"" + img + ""String_Node_Str""+ imgFile);
      boolean animate=animateThumbOn.get().needsAnimation(this,imgAlreadyLoaded,imgFile,img);
      thumb.loadImage(img,imgFile);
      if (animate)       new Anim(thumb.getView()::setOpacity).dur(400).intpl(x -> x * x * x* x).play();
    }
  }
);
}","private void setCoverPost(Item item,boolean imgAlreadyLoaded,File imgFile,Image img){
  runFX(() -> {
    if (item == getItem()) {
      boolean animate=animateThumbOn.get().needsAnimation(this,imgAlreadyLoaded,imgFile,img);
      thumb.loadImage(img,imgFile);
      if (animate)       new Anim(thumb.getView()::setOpacity).dur(400).intpl(x -> x * x * x* x).play();
    }
  }
);
}",0.9047619047619048
36493,"@IsAction(name=""String_Node_Str"",desc=""String_Node_Str"",keys=""String_Node_Str"") public static void openLauncher(){
  File f=new File(APP.DIR_LAYOUTS,""String_Node_Str"");
  ;
  Component c=UiContext.instantiateComponent(f);
  if (c != null) {
    OverlayPane op=new OverlayPane(){
      @Override public void show(){
        OverlayPane root=this;
        getChildren().add(c.load());
        if (c instanceof Widget) {
          ((Widget<?>)c).getController().getFieldOrThrow(""String_Node_Str"").setValue(true);
          ((Widget<?>)c).getController().getFieldOrThrow(""String_Node_Str"").setValue(true);
          ((Widget<?>)c).areaTemp=new ContainerNode(){
            @Override public Pane getRoot(){
              return root;
            }
            @Override public void show(){
            }
            @Override public void hide(){
            }
            @Override public void close(){
              root.hide();
            }
          }
;
        }
        super.show();
      }
    }
;
    op.display.set(SCREEN_OF_MOUSE);
    op.show();
    c.load().prefWidth(900);
    c.load().prefHeight(700);
  }
}","@IsAction(name=""String_Node_Str"",desc=""String_Node_Str"",keys=""String_Node_Str"") public static void openLauncher(){
  File f=new File(APP.DIR_LAYOUTS,""String_Node_Str"");
  Component c=UiContext.instantiateComponent(f);
  if (c != null) {
    OverlayPane op=new OverlayPane(){
      @Override public void show(){
        OverlayPane root=this;
        getChildren().add(c.load());
        if (c instanceof Widget) {
          ((Widget<?>)c).getController().getFieldOrThrow(""String_Node_Str"").setValue(true);
          ((Widget<?>)c).getController().getFieldOrThrow(""String_Node_Str"").setValue(true);
          ((Widget<?>)c).areaTemp=new ContainerNode(){
            @Override public Pane getRoot(){
              return root;
            }
            @Override public void show(){
            }
            @Override public void hide(){
            }
            @Override public void close(){
              root.hide();
            }
          }
;
        }
        super.show();
      }
    }
;
    op.display.set(SCREEN_OF_MOUSE);
    op.show();
    c.load().prefWidth(900);
    c.load().prefHeight(700);
  }
}",0.998206278026906
36494,"/** 
 * Create a new instance not initialized with any mime types definitions.
 * @return New blank instance
 */
public static MimeTypes blank(){
  return new MimeTypes(new Path[0]);
}","/** 
 * Create empty mime type repository. 
 */
public static MimeTypes blank(){
  return new MimeTypes(false);
}",0.6734006734006734
36495,"/** 
 * Initialize the mime types definitions with given one or more mime types definition files in standard /etc/mime.types format.
 * @param mimeTypesDefinitions Paths to mime types definition files
 */
public MimeTypes(Path... mimeTypesDefinitions){
  for (  Path f : mimeTypesDefinitions) {
    load(f);
  }
}","private MimeTypes(boolean addStandardTypes){
  if (addStandardTypes) {
    try (InputStream file=MimeTypes.class.getResourceAsStream(""String_Node_Str"");InputStreamReader ir=new InputStreamReader(file,""String_Node_Str"");BufferedReader br=new BufferedReader(ir)){
      String line;
      while ((line=br.readLine()) != null) {
        loadOne(line);
      }
    }
 catch (    Exception e) {
      log(MimeTypes.class).error(""String_Node_Str"",e);
    }
  }
}",0.0390117035110533
36496,"/** 
 * Load and register a single line that starts with the mime type proceeded by any number of whitespaces, then a whitespace separated list of valid extensions for that mime type.
 * @param def Single mime type definition to load and register
 * @return this
 */
public MimeTypes loadOne(String def){
  if (def.startsWith(COMMENT_PREFIX))   return this;
  String[] halves=def.toLowerCase().split(""String_Node_Str"",2);
  MimeType mimeType=new MimeType(halves[0],halves[1].trim().split(""String_Node_Str""));
  return register(mimeType);
}","/** 
 * Load and register a single line that starts with the mime type proceeded by any number of whitespaces, then a whitespace separated list of valid extensions for that mime type.
 * @param def Single mime type definition to load and register
 * @return this
 */
public MimeTypes loadOne(String def){
  if (def.startsWith(""String_Node_Str""))   return this;
  String[] halves=def.toLowerCase().split(""String_Node_Str"",2);
  MimeType mimeType=new MimeType(halves[0],halves[1].trim().split(""String_Node_Str""));
  return register(mimeType);
}",0.9750231267345052
36497,"/** 
 * Intended use case: discovering the generic type of a javafx property in the runtime using reflection on parent object's   {@link java.lang.reflect.Field} or {@link java.lang.reflect.Method} return type (javafx property specification).<p/> This works around java's type erasure and makes it possible to determine exact property type even when property value is null or when the value is subtype of the property's generic type. <p/> Returns generic type of a  {@link javafx.beans.property.Property} or formally the 1st genericparameter type of the first generic superclass or interface the provided type inherits from or implements. <p/> The method inspects the class hierarchy and interfaces (if previous yields no result) and looks for generic types. If any class or interface found is generic and its 1st generic parameter type is available it is returned. Otherwise the inspection continues. In case of no success, null is returned
 * @return class of the 1st generic parameter of the specified type of some of its supertype ornull if none.
 */
static Class getGenericPropertyType(Type t){
  String typename=t.getTypeName();
  if (typename.contains(""String_Node_Str""))   return Double.class;
  if (typename.contains(""String_Node_Str""))   return Integer.class;
  if (typename.contains(""String_Node_Str""))   return Float.class;
  if (typename.contains(""String_Node_Str""))   return Double.class;
  if (t instanceof ParameterizedType) {
    Type[] generictypes=((ParameterizedType)t).getActualTypeArguments();
    if (generictypes.length > 0 && generictypes[0] instanceof Class)     return (Class)generictypes[0];
 else     return null;
  }
  if (t instanceof Class) {
    Type supertype=((Class)t).getGenericSuperclass();
    Class output=null;
    if (supertype != null && supertype != Object.class)     output=getGenericPropertyType(supertype);
    if (output != null)     return output;
    Type[] superinterfaces=((Class)t).getGenericInterfaces();
    for (    Type superinterface : superinterfaces) {
      if (superinterface instanceof ParameterizedType) {
        output=getGenericPropertyType(superinterface);
        if (output != null)         return output;
      }
    }
  }
  return null;
}","/** 
 * Intended use case: discovering the generic type of a javafx property in the runtime using reflection on parent object's   {@link java.lang.reflect.Field} or {@link java.lang.reflect.Method} returntype (javafx property specification). <p/> This works around java's type erasure and makes it possible to determine exact property type even when property value is null or when the value is subtype of the property's generic type. <p/> Returns generic type of a  {@link javafx.beans.property.Property} or formally the 1st genericparameter type of the first generic superclass or interface the provided type inherits from or implements. <p/> The method inspects the class hierarchy and interfaces (if previous yields no result) and looks for generic types. If any class or interface found is generic and its 1st generic parameter type is available it is returned. Otherwise the inspection continues. In case of no success, null is returned
 * @return class of the 1st generic parameter of the specified type or of some of its supertype ornull if none found.
 */
static Class getGenericPropertyType(Type t){
  String typename=t.getTypeName();
  if (typename.contains(""String_Node_Str""))   return Double.class;
  if (typename.contains(""String_Node_Str""))   return Integer.class;
  if (typename.contains(""String_Node_Str""))   return Float.class;
  if (typename.contains(""String_Node_Str""))   return Double.class;
  if (t instanceof ParameterizedType) {
    Type[] generictypes=((ParameterizedType)t).getActualTypeArguments();
    if (generictypes.length > 0 && generictypes[0] instanceof Class)     return (Class)generictypes[0];
 else     return null;
  }
  if (t instanceof Class) {
    Type supertype=((Class)t).getGenericSuperclass();
    Class output=null;
    if (supertype != null && supertype != Object.class)     output=getGenericPropertyType(supertype);
    if (output != null)     return output;
    Type[] superinterfaces=((Class)t).getGenericInterfaces();
    for (    Type superinterface : superinterfaces) {
      if (superinterface instanceof ParameterizedType) {
        output=getGenericPropertyType(superinterface);
        if (output != null)         return output;
      }
    }
  }
  return null;
}",0.997516369383608
36498,"/** 
 * Execute action for each observable value representing a javafx property of an object o. Additional provided arguments are name of the property and its non-erased generic type. Javafx properties are obtained from public propertynameProperty() methods using reflection.
 */
static void forEachJavaFXProperty(Object o,TriConsumer<ObservableValue,String,Class> action){
  for (  Method method : getAllMethods(o.getClass())) {
    String methodname=method.getName();
    if (methodname.endsWith(""String_Node_Str"") && !methodname.startsWith(""String_Node_Str"") && Modifier.isPublic(method.getModifiers())) {
      try {
        Class<?> returnType=method.getReturnType();
        if (ObservableValue.class.isAssignableFrom(returnType)) {
          String propertyName=methodname.substring(0,methodname.lastIndexOf(""String_Node_Str""));
          method.setAccessible(true);
          ObservableValue<?> property=(ObservableValue)method.invoke(o);
          Class<?> propertyType=getGenericPropertyType(method.getGenericReturnType());
          action.accept(property,propertyName,propertyType);
        }
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        util.dev.Util.log(Util.class).error(""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * Execute action for each observable value representing a javafx property of an object o. Additional provided arguments are name of the property and its non-erased generic type. Javafx properties are obtained from public propertynameProperty() methods using reflection.
 */
static void forEachJavaFXProperty(Object o,TriConsumer<ObservableValue,String,Class> action){
  for (  Method method : getAllMethods(o.getClass())) {
    String methodname=method.getName();
    if (methodname.endsWith(""String_Node_Str"") && Modifier.isPublic(method.getModifiers()) && !methodname.startsWith(""String_Node_Str"")) {
      try {
        Class<?> returnType=method.getReturnType();
        if (ObservableValue.class.isAssignableFrom(returnType)) {
          String propertyName=methodname.substring(0,methodname.lastIndexOf(""String_Node_Str""));
          method.setAccessible(true);
          ObservableValue<?> property=(ObservableValue)method.invoke(o);
          Class<?> propertyType=getGenericPropertyType(method.getGenericReturnType());
          if (isNonØ(property,propertyName,propertyType))           action.accept(property,propertyName,propertyType);
        }
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        log(Util.class).error(""String_Node_Str"",e);
      }
    }
  }
}",0.937888198757764
36499,"@IsAction(name=""String_Node_Str"",desc=""String_Node_Str"",keys=""String_Node_Str"") public static void showSearch(){
  DecoratedTextField tf=new DecoratedTextField();
  Region clearButton=new Region();
  clearButton.getStyleClass().addAll(""String_Node_Str"");
  StackPane clearB=new StackPane(clearButton);
  clearB.getStyleClass().addAll(""String_Node_Str"");
  clearB.setOpacity(0.0);
  clearB.setCursor(Cursor.DEFAULT);
  clearB.setOnMouseReleased(e -> tf.clear());
  clearB.managedProperty().bind(tf.editableProperty());
  clearB.visibleProperty().bind(tf.editableProperty());
  tf.right.set(clearB);
  FadeTransition fade=new FadeTransition(millis(250),clearB);
  tf.textProperty().addListener(new InvalidationListener(){
    @Override public void invalidated(    Observable arg0){
      String text=tf.getText();
      boolean isTextEmpty=text == null || text.isEmpty();
      boolean isButtonVisible=fade.getNode().getOpacity() > 0;
      if (isTextEmpty && isButtonVisible) {
        setButtonVisible(false);
      }
 else       if (!isTextEmpty && !isButtonVisible) {
        setButtonVisible(true);
      }
    }
    private void setButtonVisible(    boolean visible){
      fade.setFromValue(visible ? 0.0 : 1.0);
      fade.setToValue(visible ? 1.0 : 0.0);
      fade.play();
    }
  }
);
  tf.left.set(new Icon(FontAwesomeIcon.SEARCH));
  tf.left.get().setMouseTransparent(true);
  StringProperty text=tf.textProperty();
  new ConfigSearch(tf,APP.configSearchHistory,p -> APP.configuration.getFields(f -> containsIgnoreCase(f.getGuiName(),p.getUserText())));
  PopOver<TextField> p=new PopOver<>(tf);
  p.title.set(""String_Node_Str"");
  p.setAutoHide(true);
  p.show(PopOver.ScreenPos.App_Center);
}","@IsAction(name=""String_Node_Str"",desc=""String_Node_Str"",keys=""String_Node_Str"") public static void showSearch(){
  DecoratedTextField tf=new DecoratedTextField();
  Region clearButton=new Region();
  clearButton.getStyleClass().addAll(""String_Node_Str"");
  StackPane clearB=new StackPane(clearButton);
  clearB.getStyleClass().addAll(""String_Node_Str"");
  clearB.setOpacity(0.0);
  clearB.setCursor(Cursor.DEFAULT);
  clearB.setOnMouseReleased(e -> tf.clear());
  clearB.managedProperty().bind(tf.editableProperty());
  clearB.visibleProperty().bind(tf.editableProperty());
  tf.right.set(clearB);
  FadeTransition fade=new FadeTransition(millis(250),clearB);
  tf.textProperty().addListener(new InvalidationListener(){
    @Override public void invalidated(    Observable arg0){
      String text=tf.getText();
      boolean isTextEmpty=text == null || text.isEmpty();
      boolean isButtonVisible=fade.getNode().getOpacity() > 0;
      if (isTextEmpty && isButtonVisible) {
        setButtonVisible(false);
      }
 else       if (!isTextEmpty && !isButtonVisible) {
        setButtonVisible(true);
      }
    }
    private void setButtonVisible(    boolean visible){
      fade.setFromValue(visible ? 0.0 : 1.0);
      fade.setToValue(visible ? 1.0 : 0.0);
      fade.play();
    }
  }
);
  tf.left.set(new Icon(FontAwesomeIcon.SEARCH));
  tf.left.get().setMouseTransparent(true);
  StringProperty text=tf.textProperty();
  new ConfigSearch(tf,APP.configSearchHistory,p -> APP.configuration.getFields(f -> containsNoCase(f.getGuiName(),p.getUserText())));
  PopOver<TextField> p=new PopOver<>(tf);
  p.title.set(""String_Node_Str"");
  p.setAutoHide(true);
  p.show(PopOver.ScreenPos.App_Center);
}",0.997651203758074
36500,"@Override public V get(){
  if (isSet) {
    set(builder.get());
    builder=null;
  }
  return t;
}","public V get(Supplier<V> or){
  if (!isSet)   set(or.get());
  return v;
}",0.6551724137931034
36501,"public R(T value){
  set(value);
}","public R(V value){
  set(value);
}",0.9705882352941176
36502,"public void set(T val){
  isSet=true;
  t=val;
}","public void set(V val){
  v=val;
}",0.7804878048780488
36503,"public <M>T get(M m,Ƒ1<M,T> or){
  if (t == null)   set(or.apply(m));
  return t;
}","public <M>V get(M m,Ƒ1<M,V> or){
  if (v == null)   set(or.apply(m));
  return v;
}",0.9518072289156626
36504,"public void setOf(T v2,BinaryOperator<T> op){
  set(op.apply(get(),v2));
}","public void setOf(V v2,BinaryOperator<V> op){
  set(op.apply(get(),v2));
}",0.972972972972973
36505,"public boolean isØ(){
  return t == null;
}","public boolean isØ(){
  return v == null;
}",0.9767441860465116
36506,"/** 
 * Same as   {@link #get()}, but mutates the value.
 * @param mutation_source, use null when type Void
 * @return the instance after applying mutation, ever null
 */
public V getM(M mutation_source){
  if (isSet) {
    set(builder.get());
    builder=null;
    isSet=true;
  }
  if (mutator != null)   mutator.accept(t,mutation_source);
  return t;
}","/** 
 * Same as   {@link #get()}, but mutates the value.
 * @param mutation_source, use null when type Void
 * @return the instance after applying mutation, ever null
 */
public V getM(M mutation_source){
  V v=get();
  if (mutator != null)   mutator.accept(v,mutation_source);
  return v;
}",0.8699690402476781
36507,"/** 
 * Convenience method to clean String objects. Assigns string empty value if it should be empty according to shouldBeEmpty() method. Use as a convenient filter for suspicious String objects. More formally returns: (shouldBeEmpty(str)) ? """" : str;
 * @see shouldBeEmpty(String str)
 * @param str String to emptify.
 * @return """" if String should be empty, otherwise does nothing..
 */
public static String emptifyString(String str){
  return shouldBeEmpty(str) ? ""String_Node_Str"" : str;
}","/** 
 * Convenience method to clean String objects. Assigns string empty value if it should be empty according to shouldBeEmpty() method. Use as a convenient filter for suspicious String objects. More formally returns: (shouldBeEmpty(str)) ? """" : str;
 * @param str String to emptify
 * @return """" if String should be empty, otherwise does nothing
 */
public static String emptifyString(String str){
  return shouldBeEmpty(str) ? ""String_Node_Str"" : str;
}",0.9041095890410958
36508,"/** 
 * Creates column that indexes rows from 1 and is right aligned. The column is of type Void - table data type agnostic.
 * @param name name of the column. For example ""#""
 * @return the column
 */
public static <T>TableColumn<T,Void> createIndexColumn(String name){
  TableColumn<T,Void> c=new TableColumn(name);
  c.setSortable(false);
  c.setCellFactory(column -> new TableCell<T,Void>(){
{
      setAlignment(CENTER_RIGHT);
    }
    @Override protected void updateItem(    Void item,    boolean empty){
      super.updateItem(item,empty);
      if (empty)       setText(null);
 else       setText(String.valueOf(getIndex() + 1) + ""String_Node_Str"");
    }
  }
);
  return c;
}","/** 
 * Creates column that indexes rows from 1 and is right aligned. The column is of type Void - table data type agnostic.
 * @param name name of the column. For example ""#""
 * @return the column
 */
public static <T>TableColumn<T,Void> createIndexColumn(String name){
  TableColumn<T,Void> c=new TableColumn<>(name);
  c.setSortable(false);
  c.setCellFactory(column -> new TableCell<>(){
{
      setAlignment(CENTER_RIGHT);
    }
    @Override protected void updateItem(    Void item,    boolean empty){
      super.updateItem(item,empty);
      if (empty)       setText(null);
 else       setText(String.valueOf(getIndex() + 1) + ""String_Node_Str"");
    }
  }
);
  return c;
}",0.9941434846266471
36509,"/** 
 * Prints out the value of Duration - string representation of the duration in the format h:m:s - 00:00:00. If any of the h,m,s values is single digit, decade digit '0' is written to retain the correct format only IF include_zeros = true. If hours = 0, they are left out. Example: 1:00:06 4:45 34
 * @param duration
 * @param include_zeros
 * @return
 */
public static String formatDuration(Duration duration,boolean include_zeros){
  if (include_zeros)   return formatDuration(duration);
  double sec_total=duration.toMillis() / 1000;
  int seconds=(int)sec_total % 60;
  int minutes=(int)((sec_total - seconds) / 60) % 60;
  int hours=(int)(sec_total - seconds - 60 * minutes) / 3600;
  if (hours > 99)   return String.format(""String_Node_Str"",hours,minutes,seconds);
 else   if (hours > 0)   return String.format(""String_Node_Str"",hours,minutes,seconds);
 else   if (minutes > 0)   return String.format(""String_Node_Str"",minutes,seconds);
 else   return String.format(""String_Node_Str"",seconds);
}","/** 
 * Prints out the value of Duration - string representation of the duration in the format h:m:s - 00:00:00. If any of the h,m,s values is single digit, decade digit '0' is written to retain the correct format only IF include_zeros = true. If hours = 0, they are left out. Example: 1:00:06 4:45 34
 */
public static String formatDuration(Duration duration,boolean include_zeros){
  if (include_zeros)   return formatDuration(duration);
  double sec_total=duration.toMillis() / 1000;
  int seconds=(int)sec_total % 60;
  int minutes=(int)((sec_total - seconds) / 60) % 60;
  int hours=(int)(sec_total - seconds - 60 * minutes) / 3600;
  if (hours > 99)   return String.format(""String_Node_Str"",hours,minutes,seconds);
 else   if (hours > 0)   return String.format(""String_Node_Str"",hours,minutes,seconds);
 else   if (minutes > 0)   return String.format(""String_Node_Str"",minutes,seconds);
 else   return String.format(""String_Node_Str"",seconds);
}",0.97239263803681
36510,"/** 
 * Checks and formats String so it can be safely used for naming a File. Replaces all forbidden characters with ""_"".
 * @param str
 * @return
 */
public static String filenamizeString(String str){
  String out=str;
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  return out;
}","/** 
 * Checks and formats String so it can be safely used for naming a File. Replaces all forbidden characters with ""_"".
 */
public static String filenamizeString(String str){
  String out=str;
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  out=out.replace(""String_Node_Str"",""String_Node_Str"");
  return out;
}",0.9395973154362416
36511,"/** 
 * Creates zeropadded string - string of a number with '0' added in to maintain consistency in number of length.
 * @param n number to turn onto zeropadded string
 * @param max number to zeropad to
 * @param ch character to use. Notable characters are: ' ' or '0'
 * @return
 */
public static String zeroPad(int n,int max,char ch){
  int diff=digits(max) - digits(n);
  String out=""String_Node_Str"";
  for (int i=1; i <= diff; i++)   out+=ch;
  return out + String.valueOf(n);
}","/** 
 * Creates zeropadded string - string of a number with '0' added in to maintain consistency in number of length.
 * @param n number to turn onto zeropadded string
 * @param max number to zeropad to
 * @param ch character to use. Notable characters are: ' ' or '0'
 */
public static String zeroPad(int n,int max,char ch){
  int diff=digits(max) - digits(n);
  String out=""String_Node_Str"";
  for (int i=1; i <= diff; i++)   out+=ch;
  return out + String.valueOf(n);
}",0.9884816753926702
36512,"public static boolean containsNoCase(String text,String phrase,boolean ignore){
  return ignore ? text.contains(phrase) : containsIgnoreCase(text,phrase);
}","public static boolean containsNoCase(String text,String phrase,boolean ignore){
  return ignore ? text.contains(phrase) : containsNoCase(text,phrase);
}",0.9805194805194806
36513,"/** 
 * Compares two Artwork objects. Artwork's equals() method doesnt return true properly. Use this method instead. <p> Method is deprecated as Artwork should not be used anyway. The method works well though.
 * @param art1
 * @param art2
 * @return
 */
@Deprecated public static boolean equals(Artwork art1,Artwork art2){
  if (art1 == null && art2 == null) {
    return true;
  }
  if (art1 == null || art2 == null) {
    return false;
  }
  return Arrays.equals(art1.getBinaryData(),art2.getBinaryData());
}","/** 
 * Compares two Artwork objects. Artwork's equals() method doesnt return true properly. Use this method instead. <p> Method is deprecated as Artwork should not be used anyway. The method works well though.
 */
@Deprecated public static boolean equals(Artwork art1,Artwork art2){
  if (art1 == null && art2 == null)   return true;
  if (art1 == null || art2 == null)   return false;
  return Arrays.equals(art1.getBinaryData(),art2.getBinaryData());
}",0.8066184074457083
36514,"/** 
 * @param number
 * @return number of digits of a number
 */
public static int digits(int number){
  int x=number;
  int cifres=0;
  while (x > 0) {
    x/=10;
    cifres++;
  }
  return cifres;
}","/** 
 * Return number of digits of the number.
 */
public static int digits(int number){
  int x=number;
  int cifres=0;
  while (x > 0) {
    x/=10;
    cifres++;
  }
  return cifres;
}",0.9354005167958656
36515,"private BooleanField(Config<Boolean> c){
  super(c);
  ObservableValue<Boolean> v=c instanceof PropertyConfig && ((PropertyConfig)c).getProperty() instanceof ObservableValue ? (ObservableValue)((PropertyConfig)c).getProperty() : c instanceof ReadOnlyPropertyConfig ? ((ReadOnlyPropertyConfig)c).getProperty() : null;
  observable=v != null;
  cBox=new CheckIcon();
  cBox.styleclass(""String_Node_Str"");
  cBox.selected.setValue(config.getValue());
  if (observable)   v.addListener((o,ov,nv) -> cBox.selected.setValue(nv));
  cBox.selected.addListener((o,ov,nv) -> config.setNapplyValue(nv));
}","private BooleanField(Config<Boolean> c){
  super(c);
  ObservableValue<Boolean> v=getObservableValue(c);
  observable=v != null;
  cBox=new CheckIcon();
  cBox.styleclass(""String_Node_Str"");
  cBox.selected.setValue(config.getValue());
  if (observable)   v.addListener((o,ov,nv) -> cBox.selected.setValue(nv));
  cBox.selected.addListener((o,ov,nv) -> config.setNapplyValue(nv));
}",0.7704918032786885
36516,"public FileField(Config<File> c){
  super(c);
  refreshItem();
  editor.setOnItemChange((ov,nv) -> apply(false));
}","public FileField(Config<File> c){
  super(c);
  ObservableValue<File> v=getObservableValue(c);
  observable=v != null;
  editor.setValue(config.getValue());
  if (observable)   v.addListener((o,ov,nv) -> editor.setValue(nv));
  editor.setOnItemChange((ov,nv) -> apply(false));
}",0.5241730279898219
36517,"/** 
 * Creates new progress indicator in this window's header, and returns it. Bind or set its progress value to show ongoing task's progress. <ul> <li> Set the the indicator's progress to -1, to indicate the task has started. This will display the indicator. <li> Stop the indicator by setting progress to 1, when your task finishes. </ul> Always do both on FX application thread. <p> Multiple indicators are supported. Never use the same one for more than one task/work. <p> Indicator is disposed of automatically when progress is set to 1. Be sure that the task finishes at some point!
 * @return indicator
 */
public ProgressIndicator taskAdd(){
  Spinner p=new Spinner();
  Anim a=new Anim(at -> setScaleXY(p,at * at)).dur(500).intpl(new ElasticInterpolator());
  p.progressProperty().addListener((o,ov,nv) -> {
    if (nv.doubleValue() == -1) {
      leftHeaderBox.getChildren().add(p);
      a.then(null).play();
    }
    if (nv.doubleValue() == 1) {
      a.then(() -> leftHeaderBox.getChildren().remove(p)).playClose();
    }
  }
);
  return p;
}","/** 
 * Creates new progress indicator in this window's header, and returns it. Bind or set its progress value to show ongoing task's progress. <ul> <li> Set the the indicator's progress to -1, to indicate the task has started. This will display the indicator. <li> Stop the indicator by setting progress to 1, when your task finishes. </ul> Always do both on FX application thread. <p> Multiple indicators are supported. Never use the same one for more than one task/work. <p> Indicator is disposed of automatically when progress is set to 1. Be sure that the task finishes at some point!
 * @return indicator
 */
public ProgressIndicator taskAdd(){
  return App.Build.appProgressIndicator(pi -> leftHeaderBox.getChildren().add(pi),pi -> leftHeaderBox.getChildren().remove(pi));
}",0.7268770402611534
36518,"/** 
 * {@inheritDoc} 
 */
@Override public String getName(){
  return name;
}","@Override public String getName(){
  return name;
}",0.7906976744186046
36519,"/** 
 * {@inheritDoc} 
 */
@Override public Action getDefaultValue(){
  return new Action(name,action,info,group,defaultKeys,defaultGlobal,continuous);
}","@Override public Action getDefaultValue(){
  return new Action(name,action,info,group,defaultKeys,defaultGlobal,continuous);
}",0.9032258064516128
36520,"/** 
 * Activates listening process for global hotkeys. Not running this method will cause registered global hotkeys to not get invoked. Use once when application initializes. Does nothing if not supported.
 */
public static void startGlobalListening(){
  if (isGlobalShortcutsSupported()) {
    JIntellitype.getInstance().addHotKeyListener(global_listener);
    JIntellitype.getInstance().addIntellitypeListener(media_listener);
  }
}","/** 
 * Activates listening process for global hotkeys. Not running this method will cause registered global hotkeys to not get invoked. Use once when application initializes. Does nothing if not supported.
 */
private static void startGlobalListening(){
  if (isGlobalShortcutsSupported) {
    JIntellitype.getInstance().addHotKeyListener(global_listener);
    JIntellitype.getInstance().addIntellitypeListener(media_listener);
  }
}",0.9850402761795168
36521,"/** 
 * {@inheritDoc} 
 */
@Override public boolean isEditable(){
  return true;
}","@Override public boolean isEditable(){
  return true;
}",0.8029197080291971
36522,"/** 
 * {@inheritDoc} 
 */
@Override public double getMin(){
  return Double.NaN;
}","@Override public double getMin(){
  return Double.NaN;
}",0.8057553956834532
36523,"public static Action from(Action a,String str){
  Action tmp=fromString(str);
  if (tmp != null) {
    a.global=tmp.global;
    a.keys=tmp.keys;
  }
  return a;
}","@Deprecated public static Action from(Action a,String str){
  Action tmp=fromString(str);
  if (tmp != null) {
    a.global=tmp.global;
    a.keys=tmp.keys;
  }
  return a;
}",0.9642857142857144
36524,"/** 
 * {@inheritDoc} 
 */
@Override public String getInfo(){
  return info;
}","@Override public String getInfo(){
  return info;
}",0.7906976744186046
36525,"/** 
 * {@inheritDoc} 
 */
@Override public double getMax(){
  return Double.NaN;
}","@Override public double getMax(){
  return Double.NaN;
}",0.8057553956834532
36526,"/** 
 * registering helper methods 
 */
private void changeKeys(String keys){
  if (keys.isEmpty()) {
    this.keys=NO_MATCH;
  }
 else {
    try {
      this.keys=KeyCombination.keyCombination(keys);
    }
 catch (    Exception e) {
      log(this).warn(""String_Node_Str"",name,keys,e);
      this.keys=NO_MATCH;
    }
  }
}","/** 
 * helper methods 
 */
private void changeKeys(String keys){
  if (keys.isEmpty()) {
    this.keys=NO_MATCH;
  }
 else {
    try {
      this.keys=KeyCombination.keyCombination(keys);
    }
 catch (    Exception e) {
      log(this).warn(""String_Node_Str"",name,keys,e);
      this.keys=NO_MATCH;
    }
  }
}",0.981132075471698
36527,"/** 
 * {@inheritDoc} 
 */
@Override public String getGuiName(){
  return name;
}","@Override public String getGuiName(){
  return name;
}",0.8
36528,"/** 
 * {@inheritDoc} 
 */
@Override public Class<Action> getType(){
  return Action.class;
}","@Override public Class<Action> getType(){
  return Action.class;
}",0.8301886792452831
36529,"/** 
 * {@inheritDoc} 
 */
@Override public String getGroup(){
  return group;
}","@Override public String getGroup(){
  return group;
}",0.7969924812030075
36530,"/** 
 * Deactivates listening process for local hotkeys.
 */
public static void stopLocalListening(){
  if (!isLocalShortcutsSupported())   return;
  JIntellitype.getInstance().cleanUp();
}","/** 
 * Deactivates listening process for local hotkeys.
 */
private static void stopLocalListening(){
  Stage.getWindows().removeListener(local_listener_registrator);
  Stage.getWindows().forEach(window -> {
    Scene scene=window.getScene();
    if (scene != null)     Action.getActions().forEach(a -> a.unregisterInScene(scene));
  }
);
}",0.4188679245283019
36531,"/** 
 * Activates listening process for local hotkeys.
 */
public static void startLocalListening(){
  if (!isLocalShortcutsSupported())   return;
  Stage.getWindows().forEach(window -> executeWhenNonNull(window.sceneProperty(),scene -> getActions().forEach(a -> a.registerInScene(scene))));
  Stage.getWindows().addListener(local_listener_registrator);
}","/** 
 * Activates listening process for local hotkeys. 
 */
private static void startLocalListening(){
  Stage.getWindows().addListener(local_listener_registrator);
}",0.6142034548944337
36532,"/** 
 * Deactivates listening process for global hotkeys. Frees resources. This method should should always be ran at the end of application's life cycle if   {@link #stopGlobalListening()} was invoked at least once.Not doing so might prevent from the application to close successfully, because bgr listening thread will not close.
 */
public static void stopGlobalListening(){
  if (isGlobalShortcutsSupported()) {
    JIntellitype.getInstance().cleanUp();
  }
}","/** 
 * Deactivates listening process for global hotkeys. Frees resources. This method should should always be ran at the end of application's life cycle if   {@link #stopGlobalListening()} was invoked at least once.Not doing so might prevent from the application to close successfully, because bgr listening thread will not close.
 */
private static void stopGlobalListening(){
  if (isGlobalShortcutsSupported) {
    JIntellitype.getInstance().cleanUp();
  }
}",0.985945945945946
36533,"private void registerGlobal(){
  JIntellitype.getInstance().registerHotKey(getID(),getKeys());
}","private void registerGlobal(){
  if (!isActionListening())   return;
  JIntellitype.getInstance().registerHotKey(getID(),getKeys());
}",0.8347826086956521
36534,"private Action(boolean isGlobal,KeyCombination keys){
  this.name=null;
  this.action=null;
  this.info=null;
  this.group=null;
  this.continuous=false;
  this.global=isGlobal;
  this.keys=keys;
  this.defaultGlobal=isGlobal;
  this.defaultKeys=getKeys();
}","@Deprecated private Action(boolean isGlobal,KeyCombination keys){
  this.name=null;
  this.action=null;
  this.info=null;
  this.group=null;
  this.continuous=false;
  this.global=isGlobal;
  this.keys=keys;
  this.defaultGlobal=isGlobal;
  this.defaultKeys=getKeys();
}",0.9772727272727272
36535,"/** 
 * {@inheritDoc} 
 */
@Override public boolean isMinMax(){
  return false;
}","@Override public boolean isMinMax(){
  return false;
}",0.8
36536,"public void unregister(){
  if (isGlobalShortcutsSupported())   unregisterGlobal();
  unregisterInApp();
}","public void unregister(){
  if (isGlobalShortcutsSupported())   unregisterGlobal();
  unregisterLocal();
}",0.9528301886792452
36537,"public void registerInScene(Scene s){
  if (!APP.initialized || s == null)   return;
  s.getAccelerators().put(getKeysForLocalRegistering(),this);
}","private void registerInScene(Scene s){
  if (!isActionListening())   return;
  s.getAccelerators().put(getKeysForLocalRegistering(),this);
}",0.8263888888888888
36538,"/** 
 * {@inheritDoc} 
 */
@Override public void applyValue(Action val){
  register();
}","@Override public void applyValue(Action val){
  register();
}",0.8187919463087249
36539,"/** 
 * {@inheritDoc} 
 */
@Override public Action getValue(){
  return this;
}","/** 
 * AS CONFIG 
 */
@Override public Action getValue(){
  return this;
}",0.8571428571428571
36540,"public void unregisterInScene(Scene s){
  if (s == null)   return;
  s.getAccelerators().remove(getKeysForLocalRegistering());
}","private void unregisterInScene(Scene s){
  if (s == null)   return;
  s.getAccelerators().remove(getKeysForLocalRegistering());
}",0.9649805447470816
36541,"/** 
 * {@inheritDoc} 
 */
@Override public void setValue(Action val){
  set(val.isGlobal(),val.getKeys());
}","@Override public void setValue(Action val){
  set(val.isGlobal(),val.getKeys());
}",0.8586387434554974
36542,"public static Action fromString(String str){
  int i=str.lastIndexOf(""String_Node_Str"");
  if (i == -1)   return null;
  String s1=str.substring(0,i);
  String s2=str.substring(i + 1,str.length());
  boolean g=Boolean.parseBoolean(s1);
  KeyCombination k=s2.isEmpty() ? KeyCombination.NO_MATCH : KeyCodeCombination.valueOf(s2);
  return new Action(g,k);
}","@Deprecated public static Action fromString(String str){
  int i=str.lastIndexOf(""String_Node_Str"");
  if (i == -1)   return null;
  String s1=str.substring(0,i);
  String s2=str.substring(i + 1,str.length());
  boolean g=Boolean.parseBoolean(s1);
  KeyCombination k=s2.isEmpty() ? KeyCombination.NO_MATCH : KeyCodeCombination.valueOf(s2);
  return new Action(g,k);
}",0.9833795013850416
36543,"/** 
 * Activates shortcut. Only registered shortcuts can be invoked. <p> If the   {@link #hasKeysAssigned()} returns false, registration will nottake place. <p> For local action this method will succeed only after  {@link Scene} isalready initialized. For global, platform support is required. If it isnt, shortcut will be registered locally, although the action will remain global. <p> Note that shortcut can be registered globally multiple times even with the same keys and locally with different keys. Make sure the action is unregistered before registering it.
 */
public void register(){
  if (!hasKeysAssigned())   return;
  if (global && global_shortcuts.getValue() && isGlobalShortcutsSupported())   registerGlobal();
 else   runLater(this::registerInApp);
}","/** 
 * Activates shortcut. Only registered shortcuts can be invoked. <p> If the   {@link #hasKeysAssigned()} returns false, registration will nottake place. <p> For local action this method will succeed only after  {@link Scene} isalready initialized. For global, platform support is required. If it isnt, shortcut will be registered locally, although the action will remain global. <p> Note that shortcut can be registered globally multiple times even with the same keys and locally with different keys. Make sure the action is unregistered before registering it.
 */
public void register(){
  if (!hasKeysAssigned())   return;
  boolean can_be_global=global && global_shortcuts.getValue() && isGlobalShortcutsSupported();
  if (can_be_global)   registerGlobal();
 else   registerLocal();
}",0.9095574085952534
36544,"/** 
 * Returns to last remembered state. Needed during window initialization. Doesnt affect content of the window.
 */
public void update(){
  s.setWidth(WProp.get());
  s.setHeight(HProp.get());
  List<Screen> scrs=Screen.getScreens();
  Rectangle2D psb=Screen.getPrimary().getBounds();
  double sxmin=scrs.stream().mapToDouble(s -> s.getBounds().getMinX()).min().orElse(psb.getMinX());
  double symin=scrs.stream().mapToDouble(s -> s.getBounds().getMinY()).min().orElse(psb.getMinY());
  double sxmax=scrs.stream().mapToDouble(s -> s.getBounds().getMaxX()).min().orElse(psb.getMaxX());
  double symax=scrs.stream().mapToDouble(s -> s.getBounds().getMaxY()).min().orElse(psb.getMaxY());
  if (YProp.get() < symin)   YProp.setValue(symin);
  if (YProp.get() > symax)   YProp.setValue(symax);
  if (XProp.get() < sxmin)   XProp.setValue(sxmin);
  if (XProp.get() > sxmax)   XProp.setValue(sxmax);
  s.setX(XProp.get());
  s.setY(YProp.get());
  Maximized m=MaxProp.get();
  setMaximized(Maximized.NONE);
  setMaximized(m);
  if (FullProp.get())   run(322,() -> setFullscreen(true));
}","/** 
 * Returns to last remembered state. Needed during window initialization. Doesnt affect content of the window.
 */
public void update(){
  s.setWidth(WProp.get());
  s.setHeight(HProp.get());
  List<Screen> scrs=Screen.getScreens();
  Rectangle2D psb=Screen.getPrimary().getBounds();
  double sxmin=scrs.stream().mapToDouble(s -> s.getBounds().getMinX()).min().orElse(psb.getMinX());
  double symin=scrs.stream().mapToDouble(s -> s.getBounds().getMinY()).min().orElse(psb.getMinY());
  double sxmax=scrs.stream().mapToDouble(s -> s.getBounds().getMaxX()).min().orElse(psb.getMaxX());
  double symax=scrs.stream().mapToDouble(s -> s.getBounds().getMaxY()).min().orElse(psb.getMaxY());
  if (YProp.get() < symin)   YProp.setValue(symin);
  if (YProp.get() > symax)   YProp.setValue(symax);
  if (XProp.get() < sxmin)   XProp.setValue(sxmin);
  if (XProp.get() > sxmax)   XProp.setValue(sxmax);
  s.setX(XProp.get());
  s.setY(YProp.get());
  screen=getScreen(getCenterXY());
  Maximized m=MaxProp.get();
  setMaximized(Maximized.NONE);
  setMaximized(m);
  if (FullProp.get())   run(322,() -> setFullscreen(true));
}",0.9841125737630504
36545,"@Override public void init(){
  data_out=outputs.create(widget.id,""String_Node_Str"",Metadata.class,EMPTY);
  d(Player.onItemRefresh(refreshed -> refreshed.ifHasE(data,this::read)));
  cover.getPane().setDisable(true);
  cover.setBackgroundVisible(false);
  cover.setBorderToImage(false);
  cover.onFileDropped=fut_file -> App.actionPane.show(File.class,fut_file,new SlowAction<>(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ data.getLocation().getPath(),FontAwesomeIcon.PASTE,f -> setAsCover(f,true)),new SlowAction<>(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + data.getLocation().getPath(),FontAwesomeIcon.COPY,f -> setAsCover(f,false)),new SlowAction<>(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",FontAwesomeIcon.TAG,f -> tagAsCover(f,false)),new SlowAction<>(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",FontAwesomeIcon.TAGS,f -> tagAsCover(f,true)));
  layAnchor(root,layout,0d);
  layout.setMinContentSize(200,120);
  layout.setGap(5);
  tiles.setPadding(new Insets(5));
  tiles.setAlignment(TOP_LEFT);
  tiles.setTileAlignment(CENTER_LEFT);
  rating.setGraphic(rater);
  rating.setContentDisplay(ContentDisplay.RIGHT);
  rater.icons.bind(App.maxRating);
  rater.partialRating.bind(App.partialRating);
  rater.updateOnHover.bind(App.hoverRating);
  rater.editable.bind(App.allowRatingChange);
  rater.setOnRatingChanged(r -> MetadataWriter.useToRate(data,r));
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      DragUtil.getSongs(e).use(items -> items.findFirst().ifPresent(this::read),FX).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  installDragSignalPane(root,DETAILS,""String_Node_Str"");
}","@Override public void init(){
  data_out=outputs.create(widget.id,""String_Node_Str"",Metadata.class,EMPTY);
  d(Player.onItemRefresh(refreshed -> refreshed.ifHasE(data,this::read)));
  cover.getPane().setDisable(true);
  cover.setBackgroundVisible(false);
  cover.setBorderToImage(false);
  cover.onFileDropped=fut_file -> App.actionPane.show(File.class,fut_file,new SlowAction<>(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ data.getLocation().getPath(),FontAwesomeIcon.PASTE,f -> setAsCover(f,true)),new SlowAction<>(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + data.getLocation().getPath(),FontAwesomeIcon.COPY,f -> setAsCover(f,false)),new SlowAction<>(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",FontAwesomeIcon.TAG,f -> tagAsCover(f,false)),new SlowAction<>(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",FontAwesomeIcon.TAGS,f -> tagAsCover(f,true)));
  layAnchor(root,layout,0d);
  layout.setMinContentSize(200,120);
  layout.setGap(5);
  tiles.setPadding(new Insets(5));
  tiles.setAlignment(TOP_LEFT);
  tiles.setTileAlignment(CENTER_LEFT);
  rating.setGraphic(rater);
  rating.setContentDisplay(ContentDisplay.RIGHT);
  rater.icons.bind(App.maxRating);
  rater.partialRating.bind(App.partialRating);
  rater.updateOnHover.bind(App.hoverRating);
  rater.editable.bind(App.allowRatingChange);
  rater.setOnRatingChanged(r -> MetadataWriter.useToRate(data,r));
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      DragUtil.getSongs(e).use(items -> items.findFirst().ifPresent(this::read),FX).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  installDragSignalPane(root,DETAILS,""String_Node_Str"",DragUtil::hasAudio);
}",0.9948016415868672
36546,"/** 
 * {@inheritDoc} 
 */
@Override public void init(){
  inputs.getInput(""String_Node_Str"").bind(Player.playing.o);
  loadSkin(""String_Node_Str"",root);
  mainImage.setBorderVisible(true);
  mainImage.setBorderToImage(true);
  layAnchor(root,mainImage.getPane(),0d);
  Icon nextB=new Icon(ARROW_RIGHT,18,""String_Node_Str"",this::nextImage);
  nextB.setMouseTransparent(true);
  Pane nextP=new StackPane(nextB);
  nextP.setOnMouseClicked(nextB.getOnMouseClicked());
  nextP.getStyleClass().setAll(""String_Node_Str"");
  nextP.prefWidthProperty().bind(root.widthProperty().divide(10));
  nextP.setMinWidth(20);
  nextP.visibleProperty().bind(nextP.opacityProperty().isNotEqualTo(0));
  nextP.setBackground(bgr(Color.color(0,0,0,0.2)));
  Icon prevB=new Icon(ARROW_LEFT,18,""String_Node_Str"",this::prevImage);
  prevB.setMouseTransparent(true);
  Pane prevP=new StackPane(prevB);
  prevP.setOnMouseClicked(prevB.getOnMouseClicked());
  prevP.getStyleClass().setAll(""String_Node_Str"");
  prevP.prefWidthProperty().bind(root.widthProperty().divide(10));
  prevP.setMinWidth(20);
  prevP.visibleProperty().bind(prevP.opacityProperty().isNotEqualTo(0));
  prevP.setBackground(bgr(Color.color(0,0,0,0.2)));
  layAnchor(root,prevP,0d,null,0d,0d);
  layAnchor(root,nextP,0d,0d,0d,null);
  navigAnim=new Anim(millis(300),p -> {
    prevP.setOpacity(p);
    nextP.setOpacity(p);
    prevB.setTranslateX(+40 * (p - 1));
    nextB.setTranslateX(-40 * (p - 1));
  }
);
  navigAnim.affector.accept(0d);
  EventReducer inactive=toLast(1000,() -> {
    if (!nextP.isHover() && !prevP.isHover())     navigAnim.playClose();
  }
);
  EventReducer active=toFirstDelayed(400,navigAnim::playOpen);
  root.addEventFilter(MOUSE_MOVED,e -> {
    if (thumb_root.getOpacity() == 0) {
      if (prevP.getOpacity() != 1)       active.push(e);
 else       inactive.push(e);
    }
  }
);
  thumbAnim=new Anim(millis(500),thumb_root::setOpacity);
  thumb_root.visibleProperty().bind(thumb_root.opacityProperty().isNotEqualTo(0));
  thumb_root.toFront();
  setAnchors(thumb_root,0d);
  root.heightProperty().addListener((o,ov,nv) -> setBottomAnchor(thumb_root,nv.doubleValue() * 0.3));
  root.setOnMouseClicked(e -> {
    if (e.getButton() == SECONDARY && showThumbnails.getValue()) {
      showThumbnails.setCycledNapplyValue();
      e.consume();
    }
    if (e.getButton() == PRIMARY) {
      if (e.getY() > 0.8 * root.getHeight() && e.getX() > 0.7 * root.getWidth()) {
        theater_mode.setCycledNapplyValue();
      }
 else {
        showThumbnails.setCycledNapplyValue();
      }
      e.consume();
    }
  }
);
  thumb_root.setOnMouseClicked(e -> {
    showThumbnails.setCycledNapplyValue();
    e.consume();
  }
);
  root.addEventFilter(MOUSE_ENTERED,e -> {
    if (slideshow_on.getValue())     slideshow.pause();
  }
);
  root.addEventFilter(MOUSE_EXITED,e -> {
    if (slideshow_on.getValue())     slideshow.unpause();
  }
);
  ChangeListener<File> locationChange=(o,ov,nv) -> readThumbnails();
  folder.addListener(locationChange);
  d(() -> folder.removeListener(locationChange));
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragOver(DragUtil.imgFileDragAccepthandler);
  root.setOnDragOver(DragUtil.fileDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (e.getDragboard().hasFiles()) {
      dataChanged(e.getDragboard().getFiles().get(0));
      e.setDropCompleted(true);
      e.consume();
      return;
    }
    if (e.getGestureSource().equals(mainImage.getPane()))     return;
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       dataChanged(items.get(0));
      e.setDropCompleted(true);
      e.consume();
    }
 else     if (DragUtil.hasImage(e.getDragboard())) {
      DragUtil.getImages(e).use(this::showImages,FX).showProgress(App.getWindow().taskAdd()).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  thumb_root.setOnScroll(Event::consume);
}","/** 
 * {@inheritDoc} 
 */
@Override public void init(){
  inputs.getInput(""String_Node_Str"").bind(Player.playing.o);
  loadSkin(""String_Node_Str"",root);
  mainImage.setBorderVisible(true);
  mainImage.setBorderToImage(true);
  layAnchor(root,mainImage.getPane(),0d);
  Icon nextB=new Icon(ARROW_RIGHT,18,""String_Node_Str"",this::nextImage);
  nextB.setMouseTransparent(true);
  Pane nextP=new StackPane(nextB);
  nextP.setOnMouseClicked(nextB.getOnMouseClicked());
  nextP.getStyleClass().setAll(""String_Node_Str"");
  nextP.prefWidthProperty().bind(root.widthProperty().divide(10));
  nextP.setMinWidth(20);
  nextP.visibleProperty().bind(nextP.opacityProperty().isNotEqualTo(0));
  nextP.setBackground(bgr(Color.color(0,0,0,0.2)));
  Icon prevB=new Icon(ARROW_LEFT,18,""String_Node_Str"",this::prevImage);
  prevB.setMouseTransparent(true);
  Pane prevP=new StackPane(prevB);
  prevP.setOnMouseClicked(prevB.getOnMouseClicked());
  prevP.getStyleClass().setAll(""String_Node_Str"");
  prevP.prefWidthProperty().bind(root.widthProperty().divide(10));
  prevP.setMinWidth(20);
  prevP.visibleProperty().bind(prevP.opacityProperty().isNotEqualTo(0));
  prevP.setBackground(bgr(Color.color(0,0,0,0.2)));
  layAnchor(root,prevP,0d,null,0d,0d);
  layAnchor(root,nextP,0d,0d,0d,null);
  navigAnim=new Anim(millis(300),p -> {
    prevP.setOpacity(p);
    nextP.setOpacity(p);
    prevB.setTranslateX(+40 * (p - 1));
    nextB.setTranslateX(-40 * (p - 1));
  }
);
  navigAnim.affector.accept(0d);
  EventReducer inactive=toLast(1000,() -> {
    if (!nextP.isHover() && !prevP.isHover())     navigAnim.playClose();
  }
);
  EventReducer active=toFirstDelayed(400,navigAnim::playOpen);
  root.addEventFilter(MOUSE_MOVED,e -> {
    if (thumb_root.getOpacity() == 0) {
      if (prevP.getOpacity() != 1)       active.push(e);
 else       inactive.push(e);
    }
  }
);
  thumbAnim=new Anim(millis(500),thumb_root::setOpacity);
  thumb_root.visibleProperty().bind(thumb_root.opacityProperty().isNotEqualTo(0));
  thumb_root.toFront();
  setAnchors(thumb_root,0d);
  root.heightProperty().addListener((o,ov,nv) -> setBottomAnchor(thumb_root,nv.doubleValue() * 0.3));
  root.setOnMouseClicked(e -> {
    if (e.getButton() == SECONDARY && showThumbnails.getValue()) {
      showThumbnails.setCycledNapplyValue();
      e.consume();
    }
    if (e.getButton() == PRIMARY) {
      if (e.getY() > 0.8 * root.getHeight() && e.getX() > 0.7 * root.getWidth()) {
        theater_mode.setCycledNapplyValue();
      }
 else {
        showThumbnails.setCycledNapplyValue();
      }
      e.consume();
    }
  }
);
  thumb_root.setOnMouseClicked(e -> {
    showThumbnails.setCycledNapplyValue();
    e.consume();
  }
);
  root.addEventFilter(MOUSE_ENTERED,e -> {
    if (slideshow_on.getValue())     slideshow.pause();
  }
);
  root.addEventFilter(MOUSE_EXITED,e -> {
    if (slideshow_on.getValue())     slideshow.unpause();
  }
);
  ChangeListener<File> locationChange=(o,ov,nv) -> readThumbnails();
  folder.addListener(locationChange);
  d(() -> folder.removeListener(locationChange));
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragOver(DragUtil.imgFileDragAccepthandler);
  root.setOnDragOver(DragUtil.fileDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (e.getDragboard().hasFiles()) {
      dataChanged(e.getDragboard().getFiles().get(0));
      e.setDropCompleted(true);
      e.consume();
      return;
    }
    if (e.getGestureSource().equals(mainImage.getPane()))     return;
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       dataChanged(items.get(0));
      e.setDropCompleted(true);
      e.consume();
    }
 else     if (DragUtil.hasImage(e.getDragboard())) {
      DragUtil.getImages(e).use(this::showImages,FX).showProgress(App.getWindow().taskAdd()).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  installDragSignalPane(root,DETAILS,""String_Node_Str"",DragUtil::hasImage);
  thumb_root.setOnScroll(Event::consume);
}",0.9905118601747817
36547,"@Override public void init(){
  thumb.setBackgroundVisible(false);
  thumb.setBorderVisible(false);
  thumb.setDragEnabled(true);
  layAnchor(root,thumb.getPane(),0d);
  root.setOnDragOver(DragUtil.imageFileDragAccepthandlerNo(() -> img));
  root.setOnDragDropped(e -> {
    if (DragUtil.hasImage(e.getDragboard())) {
      Fut<File> future=DragUtil.getImage(e);
      future.use(img -> showImage(img),FX).showProgress(!future.isDone(),App.getWindow()::taskAdd).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
}","@Override public void init(){
  thumb.setBackgroundVisible(false);
  thumb.setBorderVisible(false);
  thumb.setDragEnabled(true);
  layAnchor(root,thumb.getPane(),0d);
  root.setOnDragOver(DragUtil.imgFileDragAccepthandlerNo(() -> img));
  root.setOnDragDropped(e -> {
    if (DragUtil.hasImage(e.getDragboard())) {
      Fut<File> future=DragUtil.getImage(e);
      future.use(img -> showImage(img),FX).showProgress(!future.isDone(),App.getWindow()::taskAdd).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
}",0.9962476547842402
36548,"/** 
 * {@inheritDoc} 
 */
@Override public void init(){
  inputs.getInput(""String_Node_Str"").bind(Player.playing.o);
  loadSkin(""String_Node_Str"",root);
  mainImage.setBorderVisible(true);
  mainImage.setBorderToImage(true);
  layAnchor(root,mainImage.getPane(),0d);
  thumbAnim=new Anim(millis(500),thumb_root::setOpacity);
  thumb_root.visibleProperty().bind(thumb_root.opacityProperty().isNotEqualTo(0));
  thumb_root.toFront();
  Icon nextB=new Icon(ARROW_RIGHT,18,""String_Node_Str"",this::nextImage);
  nextB.setMouseTransparent(true);
  Pane nextP=new StackPane(nextB);
  nextP.setOnMouseClicked(nextB.getOnMouseClicked());
  nextP.getStyleClass().setAll(""String_Node_Str"");
  nextP.prefWidthProperty().bind(root.widthProperty().divide(10));
  nextP.setMinWidth(20);
  nextP.visibleProperty().bind(nextP.opacityProperty().isNotEqualTo(0));
  nextP.setBackground(bgr(Color.color(0,0,0,0.2)));
  Icon prevB=new Icon(ARROW_LEFT,18,""String_Node_Str"",this::prevImage);
  prevB.setMouseTransparent(true);
  Pane prevP=new StackPane(prevB);
  prevP.setOnMouseClicked(prevB.getOnMouseClicked());
  prevP.getStyleClass().setAll(""String_Node_Str"");
  prevP.prefWidthProperty().bind(root.widthProperty().divide(10));
  prevP.setMinWidth(20);
  prevP.visibleProperty().bind(prevP.opacityProperty().isNotEqualTo(0));
  prevP.setBackground(bgr(Color.color(0,0,0,0.2)));
  layAnchor(root,prevP,0d,null,0d,0d);
  layAnchor(root,nextP,0d,0d,0d,null);
  Anim navanim=new Anim(millis(500),p -> {
    prevP.setOpacity(p);
    nextP.setOpacity(p);
    prevB.setTranslateX(+40 * (p - 1));
    nextB.setTranslateX(-40 * (p - 1));
  }
);
  navanim.affector.accept(0d);
  EventReducer inactive=toLast(1500,navanim::playClose);
  EventReducer active=toFirstDelayed(500,navanim::playOpen);
  root.addEventFilter(MOUSE_MOVED,e -> {
    if (thumb_root.getOpacity() == 0) {
      if (prevP.getOpacity() != 1)       active.push(e);
 else       inactive.push(e);
    }
  }
);
  setAnchors(thumb_root,0d);
  root.heightProperty().addListener((o,ov,nv) -> setBottomAnchor(thumb_root,nv.doubleValue() * 0.3));
  root.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      if (e.getY() > 0.8 * root.getHeight() && e.getX() > 0.7 * root.getWidth()) {
        theater_mode.setCycledNapplyValue();
      }
 else {
        showThumbnails.setCycledNapplyValue();
      }
      e.consume();
    }
  }
);
  thumb_root.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      showThumbnails.setCycledNapplyValue();
      e.consume();
    }
  }
);
  ChangeListener<File> locationChange=(o,ov,nv) -> readThumbnails();
  folder.addListener(locationChange);
  d(() -> folder.removeListener(locationChange));
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  root.setOnDragOver(DragUtil.fileDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (e.getDragboard().hasFiles()) {
      dataChanged(e.getDragboard().getFiles().get(0));
      e.setDropCompleted(true);
      e.consume();
      return;
    }
    if (e.getGestureSource().equals(mainImage.getPane()))     return;
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       dataChanged(items.get(0));
      e.setDropCompleted(true);
      e.consume();
    }
 else     if (DragUtil.hasImage(e.getDragboard())) {
      DragUtil.getImages(e).use(this::showImages,FX).showProgress(App.getWindow().taskAdd()).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  thumb_root.setOnScroll(Event::consume);
}","/** 
 * {@inheritDoc} 
 */
@Override public void init(){
  inputs.getInput(""String_Node_Str"").bind(Player.playing.o);
  loadSkin(""String_Node_Str"",root);
  mainImage.setBorderVisible(true);
  mainImage.setBorderToImage(true);
  layAnchor(root,mainImage.getPane(),0d);
  Icon nextB=new Icon(ARROW_RIGHT,18,""String_Node_Str"",this::nextImage);
  nextB.setMouseTransparent(true);
  Pane nextP=new StackPane(nextB);
  nextP.setOnMouseClicked(nextB.getOnMouseClicked());
  nextP.getStyleClass().setAll(""String_Node_Str"");
  nextP.prefWidthProperty().bind(root.widthProperty().divide(10));
  nextP.setMinWidth(20);
  nextP.visibleProperty().bind(nextP.opacityProperty().isNotEqualTo(0));
  nextP.setBackground(bgr(Color.color(0,0,0,0.2)));
  Icon prevB=new Icon(ARROW_LEFT,18,""String_Node_Str"",this::prevImage);
  prevB.setMouseTransparent(true);
  Pane prevP=new StackPane(prevB);
  prevP.setOnMouseClicked(prevB.getOnMouseClicked());
  prevP.getStyleClass().setAll(""String_Node_Str"");
  prevP.prefWidthProperty().bind(root.widthProperty().divide(10));
  prevP.setMinWidth(20);
  prevP.visibleProperty().bind(prevP.opacityProperty().isNotEqualTo(0));
  prevP.setBackground(bgr(Color.color(0,0,0,0.2)));
  layAnchor(root,prevP,0d,null,0d,0d);
  layAnchor(root,nextP,0d,0d,0d,null);
  navigAnim=new Anim(millis(500),p -> {
    prevP.setOpacity(p);
    nextP.setOpacity(p);
    prevB.setTranslateX(+40 * (p - 1));
    nextB.setTranslateX(-40 * (p - 1));
  }
);
  navigAnim.affector.accept(0d);
  EventReducer inactive=toLast(1500,navigAnim::playClose);
  EventReducer active=toFirstDelayed(500,navigAnim::playOpen);
  root.addEventFilter(MOUSE_MOVED,e -> {
    if (thumb_root.getOpacity() == 0) {
      if (prevP.getOpacity() != 1)       active.push(e);
 else       inactive.push(e);
    }
  }
);
  thumbAnim=new Anim(millis(500),thumb_root::setOpacity);
  thumb_root.visibleProperty().bind(thumb_root.opacityProperty().isNotEqualTo(0));
  thumb_root.toFront();
  setAnchors(thumb_root,0d);
  root.heightProperty().addListener((o,ov,nv) -> setBottomAnchor(thumb_root,nv.doubleValue() * 0.3));
  root.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      if (e.getY() > 0.8 * root.getHeight() && e.getX() > 0.7 * root.getWidth()) {
        theater_mode.setCycledNapplyValue();
      }
 else {
        showThumbnails.setCycledNapplyValue();
      }
      e.consume();
    }
  }
);
  thumb_root.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      showThumbnails.setCycledNapplyValue();
      e.consume();
    }
  }
);
  ChangeListener<File> locationChange=(o,ov,nv) -> readThumbnails();
  folder.addListener(locationChange);
  d(() -> folder.removeListener(locationChange));
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragOver(DragUtil.imgFileDragAccepthandler);
  root.setOnDragOver(DragUtil.fileDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (e.getDragboard().hasFiles()) {
      dataChanged(e.getDragboard().getFiles().get(0));
      e.setDropCompleted(true);
      e.consume();
      return;
    }
    if (e.getGestureSource().equals(mainImage.getPane()))     return;
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       dataChanged(items.get(0));
      e.setDropCompleted(true);
      e.consume();
    }
 else     if (DragUtil.hasImage(e.getDragboard())) {
      DragUtil.getImages(e).use(this::showImages,FX).showProgress(App.getWindow().taskAdd()).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  thumb_root.setOnScroll(Event::consume);
}",0.9501042390548992
36549,"@Override public void init(){
  out_sel=outputs.create(widget.id,""String_Node_Str"",MetadataGroup.class,null);
  out_sel_met=outputs.create(widget.id,""String_Node_Str"",List.class,EMPTY_LIST);
  in_items=inputs.create(""String_Node_Str"",List.class,EMPTY_LIST,this::setItems);
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(VALUE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(f.toString(mf));
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType(mf).equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == AVG_RATING ? (Callback)App.ratingCell.getValue() : f == W_RATING ? (Callback)new NumberRatingCellFactory() : (Callback)col -> {
      TableCell cel=table.buildDefaultCell(f);
      cel.setAlignment(a);
      return cel;
    }
);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<MetadataGroup>().styleRuleAdd(""String_Node_Str"",mg -> Player.playingtem.get().getField(fieldFilter.getValue()).equals(mg.getValue())).onLeftDoubleClick((row,e) -> playSelected()).onRightSingleClick((row,e) -> {
    if (!row.isSelected())     tbl.getSelectionModel().clearAndSelect(row.getIndex());
    contxt_menu.show(this,(TableView)table,e);
  }
));
  d(Player.playingtem.onChange(o -> table.updateStyleRules()));
  Menu m=(Menu)table.columnVisibleMenu.getItems().stream().filter(i -> i.getText().equals(""String_Node_Str"")).findFirst().get();
  Stream.of(Field.values()).map(f -> new SelectionMenuItem(f.toStringEnum(),false){
{
      this.setOnMouseClicked(() -> {
        if (!selected.get()) {
          m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(false));
          selected.set(true);
          fieldFilter.setNapplyValue(f);
        }
      }
);
    }
  }
).forEach(m.getItems()::add);
  table.columnVisibleMenu.addEventHandler(WINDOW_SHOWN,e -> m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(fieldFilter.getValue().toStringEnum().equals(mi.getText()))));
  table.setOnKeyPressed(e -> {
    if (e.getCode() == ENTER)     playSelected();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(filerListToSelectedNsort(),db,true);
    }
    e.consume();
  }
);
  table.setColumnResizePolicy(resize -> {
    FilteredTable<MetadataGroup,MetadataGroup.Field> t=(FilteredTable)resize.getTable();
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    t.getColumn(ColumnField.INDEX).ifPresent(i -> i.setPrefWidth(t.calculateIndexColumnWidth()));
    t.getColumn(VALUE).ifPresent(c -> {
      double Σw=t.getColumns().stream().filter(TableColumn::isVisible).mapToDouble(TableColumn::getWidth).sum();
      double itemsHeight=(t.getItems().size() + 1) * t.getFixedCellSize();
      double scrollbar=itemsHeight < t.getHeight() ? 0 : 15;
      c.setPrefWidth(t.getWidth() - (scrollbar + Σw - c.getWidth()));
    }
);
    return b;
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> out_sel.setValue(nv));
  EventStreams.changesOf(table.getSelectedItems()).reduceSuccessions((a,b) -> b,ofMillis(60)).subscribe(c -> {
    if (!sel_lock)     out_sel_met.setValue(filerList(in_items.getValue(),true,false));
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> {
    if (!sel_lock)     sel_last=nv == null ? ""String_Node_Str"" : nv.getField().toS(nv.getValue(),""String_Node_Str"");
  }
);
  table.setOnScroll(Event::consume);
}","@Override public void init(){
  out_sel=outputs.create(widget.id,""String_Node_Str"",MetadataGroup.class,null);
  out_sel_met=outputs.create(widget.id,""String_Node_Str"",List.class,EMPTY_LIST);
  in_items=inputs.create(""String_Node_Str"",List.class,EMPTY_LIST,this::setItems);
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(VALUE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(f.toString(mf));
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType(mf).equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == AVG_RATING ? (Callback)App.ratingCell.getValue() : f == W_RATING ? (Callback)new NumberRatingCellFactory() : (Callback)col -> {
      TableCell cel=table.buildDefaultCell(f);
      cel.setAlignment(a);
      return cel;
    }
);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<MetadataGroup>().styleRuleAdd(""String_Node_Str"",mg -> Player.playingtem.get().getField(fieldFilter.getValue()).equals(mg.getValue())).onLeftDoubleClick((row,e) -> playSelected()).onRightSingleClick((row,e) -> {
    if (!row.isSelected())     tbl.getSelectionModel().clearAndSelect(row.getIndex());
    contxt_menu.show(this,(TableView)table,e);
  }
));
  d(Player.playingtem.onChange(o -> table.updateStyleRules()));
  Menu m=(Menu)table.columnVisibleMenu.getItems().stream().filter(i -> i.getText().equals(""String_Node_Str"")).findFirst().get();
  Stream.of(Field.values()).sorted(by(f -> f.name())).map(f -> new SelectionMenuItem(f.toStringEnum(),false){
{
      this.setOnMouseClicked(() -> {
        if (!selected.get()) {
          m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(false));
          selected.set(true);
          fieldFilter.setNapplyValue(f);
        }
      }
);
    }
  }
).forEach(m.getItems()::add);
  table.columnVisibleMenu.addEventHandler(WINDOW_SHOWN,e -> m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(fieldFilter.getValue().toStringEnum().equals(mi.getText()))));
  table.setOnKeyPressed(e -> {
    if (e.getCode() == ENTER)     playSelected();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(filerListToSelectedNsort(),db,true);
    }
    e.consume();
  }
);
  table.setColumnResizePolicy(resize -> {
    FilteredTable<MetadataGroup,MetadataGroup.Field> t=(FilteredTable)resize.getTable();
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    t.getColumn(ColumnField.INDEX).ifPresent(i -> i.setPrefWidth(t.calculateIndexColumnWidth()));
    t.getColumn(VALUE).ifPresent(c -> {
      double Σw=t.getColumns().stream().filter(TableColumn::isVisible).mapToDouble(TableColumn::getWidth).sum();
      double itemsHeight=(t.getItems().size() + 1) * t.getFixedCellSize();
      double scrollbar=itemsHeight < t.getHeight() ? 0 : 15;
      c.setPrefWidth(t.getWidth() - (scrollbar + Σw - c.getWidth()));
    }
);
    return b;
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> out_sel.setValue(nv));
  EventStreams.changesOf(table.getSelectedItems()).reduceSuccessions((a,b) -> b,ofMillis(60)).subscribe(c -> {
    if (!sel_lock)     out_sel_met.setValue(filerList(in_items.getValue(),true,false));
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> {
    if (!sel_lock)     sel_last=nv == null ? ""String_Node_Str"" : nv.getField().toS(nv.getValue(),""String_Node_Str"");
  }
);
  table.setOnScroll(Event::consume);
}",0.9972012917115176
36550,"private static Playlist getUnusedPlaylist(UUID id){
  List<Playlist> pall=list(PlaylistManager.playlists);
  WidgetManager.findAll(OPEN).filter(w -> w.getInfo().hasFeature(PlaylistFeature.class)).map(w -> ((PlaylistFeature)w.getController()).getPlaylist()).filter(isNotNULL).forEach(p -> pall.removeIf(pl -> pl.id.equals(p.id)));
  Playlist leaf=pall.isEmpty() ? null : pall.get(0);
  for (  Playlist p : pall)   if (p.id.equals(PlaylistManager.active))   leaf=p;
  if (leaf != null)   PlaylistManager.playlists.remove(leaf);
  if (leaf != null) {
    if (leaf.id.equals(PlaylistManager.active))     PlaylistManager.active=id;
    util.Util.setField(Playlist.class,leaf,""String_Node_Str"",id);
  }
  return leaf == null ? new Playlist(id) : leaf;
}","private static Playlist getUnusedPlaylist(UUID id){
  List<Playlist> pall=list(PlaylistManager.playlists);
  WidgetManager.findAll(OPEN).filter(w -> w.getInfo().hasFeature(PlaylistFeature.class)).map(w -> ((PlaylistFeature)w.getController()).getPlaylist()).filter(ISNTØ).forEach(p -> pall.removeIf(pl -> pl.id.equals(p.id)));
  Playlist leaf=pall.isEmpty() ? null : pall.get(0);
  for (  Playlist p : pall)   if (p.id.equals(PlaylistManager.active))   leaf=p;
  if (leaf != null)   PlaylistManager.playlists.remove(leaf);
  if (leaf != null) {
    if (leaf.id.equals(PlaylistManager.active))     PlaylistManager.active=id;
    util.Util.setField(Playlist.class,leaf,""String_Node_Str"",id);
  }
  return leaf == null ? new Playlist(id) : leaf;
}",0.9919463087248322
36551,"@Override protected void generateValue(){
  if (inconsistent_state || converter == null)   return;
  conjuction=chain.stream().filter(g -> g.on.get()).map(g -> g.chained.getValue()).filter(isNotNULL).map(g -> converter.apply(g._2,g._1)).reduce(Predicate::and).orElse(isTRUE);
  if (onFilterChange != null)   onFilterChange.accept(conjuction);
}","@Override protected void generateValue(){
  if (inconsistent_state || converter == null)   return;
  conjuction=chain.stream().filter(g -> g.on.get()).map(g -> g.chained.getValue()).filter(ISNTØ).map(g -> converter.apply(g._2,g._1)).reduce(Predicate::and).orElse(isTRUE);
  if (onFilterChange != null)   onFilterChange.accept(conjuction);
}",0.9824561403508772
36552,"private void timeUpdateDo(long frame){
  if (!user_drag && PLAYBACK.state.status.get() == PLAYING) {
    long Δt=posLastFrame == 0 ? 0 : (frame - posLastFrame) / 1000000;
    double Δp=Δt / timeTot.get().toMillis();
    double p=posLast + Δp;
    posLast=p;
    long now=System.currentTimeMillis();
    if (now - polastUpdate > posUpdateInterval) {
      polastUpdate=now;
      seeker.setValue(p);
    }
  }
  posLastFrame=frame;
}","private void timeUpdateDo(long frame){
  if (!user_drag && PLAYBACK.state.status.get() == PLAYING) {
    long Δt=posLastFrame == 0 ? 0 : (frame - posLastFrame) / 1000000;
    double Δp=Δt / timeTot.get().toMillis();
    posLast+=Δp;
    long now=System.currentTimeMillis();
    if (now - polastUpdate > posUpdateInterval) {
      polastUpdate=now;
      seeker.setValue(posLast);
    }
  }
  posLastFrame=frame;
}",0.944378698224852
36553,"public static void launchComponent(File launcher){
  WidgetFactory wf=null;
  Component w=null;
  String wn=FileUtil.readFileLines(launcher).limit(1).findAny().orElse(""String_Node_Str"");
  wf=WidgetManager.getFactory(wn);
  if (wf != null)   w=wf.create();
  if (w == null) {
    try {
      w=(Component)App.INSTANCE.serialization.x.fromXML(launcher);
    }
 catch (    ClassCastException|StreamException ignored) {
    }
  }
  if (w == null) {
    wf=WidgetManager.getFactory(getName(launcher));
    if (wf != null)     w=wf.create();
  }
  if (w != null) {
    if (launching1st) {
      App.getWindow().setContent(w);
      launching1st=false;
    }
 else {
      showWindow(w);
    }
  }
}","public static void launchComponent(File launcher){
  try {
    WidgetFactory wf=null;
    Component w=null;
    String wn=FileUtil.readFileLines(launcher).limit(1).findAny().orElse(""String_Node_Str"");
    wf=WidgetManager.getFactory(wn);
    if (wf != null)     w=wf.create();
    if (w == null) {
      try {
        w=(Component)App.INSTANCE.serialization.x.fromXML(launcher);
      }
 catch (      ClassCastException|StreamException ignored) {
        LOGGER.error(""String_Node_Str"",launcher);
      }
    }
    if (w == null) {
      wf=WidgetManager.getFactory(getName(launcher));
      if (wf != null)       w=wf.create();
    }
    if (w != null) {
      if (launching1st) {
        App.getWindow().setContent(w);
        launching1st=false;
      }
 else {
        showWindow(w);
      }
    }
  }
 catch (  Exception x) {
    LOGGER.error(""String_Node_Str"",x);
  }
}",0.75
36554,"public static void showSettings(String name,Configurable c,Node n){
  Configurator sc=new Configurator(true);
  sc.configure(c);
  PopOver p=new PopOver(sc);
  p.title.set((name == null ? ""String_Node_Str"" : name + ""String_Node_Str"") + ""String_Node_Str"");
  p.setArrowSize(0);
  p.setAutoFix(true);
  p.setAutoHide(true);
  p.show(n);
}","public static void showSettings(Configurable c,Node n){
  String name=c instanceof Widget ? ((Widget)c).getName() : ""String_Node_Str"";
  Configurator sc=new Configurator(true);
  sc.configure(c);
  PopOver p=new PopOver(sc);
  p.title.set((name == null ? ""String_Node_Str"" : name + ""String_Node_Str"") + ""String_Node_Str"");
  p.setArrowSize(0);
  p.setAutoFix(true);
  p.setAutoHide(true);
  p.show(n);
}",0.8768606224627875
36555,"/** 
 * @param widget widget to open, does nothing when null.
 */
public static Window showWindow(Component widget){
  Window w=Window.create();
  w.initLayout();
  w.setContent(widget);
  w.show();
  w.setScreen(Window.getActive().getScreen());
  w.setXyCenter();
  return w;
}","/** 
 * @param widget widget to open, does nothing when null.
 */
public static Window showWindow(Component widget){
  Window w=Window.create();
  w.initLayout();
  w.setContent(widget);
  w.show();
  w.setScreen(Window.getActive().getScreen());
  w.centerOnScreen();
  return w;
}",0.9552772808586762
36556,"public void setAsMain(){
  if (App.getWindow() != null)   throw new RuntimeException(""String_Node_Str"");
  main=true;
  setIcon(App.getIcon());
  setTitlePosition(Pos.CENTER_LEFT);
  App.window=this;
}","private void setAsMain(){
  no(App.getWindow() != null,""String_Node_Str"");
  App.window=this;
  main=true;
  App.getWindowOwner().setX(getCenterX());
  moving.addListener((o,ov,nv) -> {
    if (ov && !nv)     App.getWindowOwner().setX(getCenterX());
  }
);
  setIcon(App.getIcon());
  setTitle(null);
}",0.4691848906560636
36557,"/** 
 * Set title alignment.
 */
public void setTitlePosition(Pos align){
  BorderPane.setAlignment(titleL,align);
}","/** 
 * Set title alignment. 
 */
public void setTitlePosition(Pos align){
  BorderPane.setAlignment(titleL,align);
}",0.9957081545064378
36558,"/** 
 * Initializes the controller class.
 */
private void initialize(){
  getStage().setScene(new Scene(root));
  getStage().getScene().setFill(Color.rgb(0,0,0,0.01));
  getStage().setOpacity(windowOpacity.getValue());
  Rectangle mask=new Rectangle(1,1,BLACK);
  mask.widthProperty().bind(content.widthProperty());
  mask.heightProperty().bind(content.heightProperty());
  content.setClip(mask);
  s.setOnCloseRequest(e -> close());
  s.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH);
  s.addEventHandler(KEY_PRESSED,e -> {
    if (e.getCode() == ESCAPE && isFullscreen()) {
      setFullscreen(false);
      e.consume();
    }
  }
);
  focused.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcFocused,nv));
  resizing.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcResized,nv != NONE));
  moving.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcMoved,nv));
  fullscreen.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcFullscreen,nv));
  Action.getActions().stream().filter(a -> !a.isGlobal() && a.hasKeysAssigned()).forEach(a -> a.registerInScene(s.getScene()));
  root.addEventFilter(MOUSE_PRESSED,e -> UiContext.setPressedXY(e.getSceneX(),e.getSceneY()));
  root.addEventFilter(MOUSE_CLICKED,e -> UiContext.fireAppMouseClickEvent(this,e));
  header.addEventHandler(DRAG_DETECTED,this::moveStart);
  header.addEventHandler(MOUSE_DRAGGED,this::moveDo);
  header.addEventHandler(MOUSE_RELEASED,this::moveEnd);
  header.setMouseTransparent(false);
  header.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY)     if (e.getClickCount() == 2)     toggleMaximize();
    if (e.getButton() == SECONDARY)     if (e.getClickCount() == 2)     setHeaderVisible(!headerVisible);
  }
);
  header_activator.addEventFilter(MOUSE_ENTERED,e -> {
    if (!headerVisible)     applyHeaderVisible(true);
  }
);
  header.addEventFilter(MOUSE_EXITED_TARGET,e -> {
    if (!headerVisible && !moving.get() && resizing.get() == NONE && e.getSceneY() > 20)     applyHeaderVisible(false);
  }
);
  root.setOnScroll(e -> {
    if (e.getDeltaY() > 0)     PLAYBACK.volumeInc();
 else     if (e.getDeltaY() < 0)     PLAYBACK.volumeDec();
  }
);
  root.addEventFilter(KeyEvent.ANY,e -> {
    if (e.getCode().equals(Action.Shortcut_ALTERNATE)) {
      GUI.setLayoutMode(e.getEventType().equals(KEY_PRESSED));
      if (e.getEventType().equals(KEY_PRESSED))       IOPane.drawWidgetIO();
    }
  }
);
  Icon gitB=new Icon(GITHUB,13,Action.get(""String_Node_Str""));
  Icon cssB=new Icon(CSS3,13,Action.get(""String_Node_Str""));
  Icon iconsB=new Icon(IMAGE,13,Action.get(""String_Node_Str""));
  Icon dirB=new Icon(FOLDER,13,Action.get(""String_Node_Str""));
  Icon propB=new Icon(GEARS,13,Action.get(""String_Node_Str""));
  Icon runB=new Icon(GAVEL,13,Action.get(""String_Node_Str""));
  Icon layB=new Icon(COLUMNS,13,Action.get(""String_Node_Str""));
  Icon lastFMB=new Icon<>(null,13,""String_Node_Str"" + ""String_Node_Str"",e -> {
    Node b=(Node)e.getSource();
    if (e.getButton() == PRIMARY)     if (LastFM.getScrobblingEnabled())     LastFM.toggleScrobbling();
 else     if (LastFM.isLoginSuccess())     LastFM.toggleScrobbling();
 else     new PopOver(""String_Node_Str"",LastFM.getLastFMconfig()).show(b);
 else     if (e.getButton() == SECONDARY)     new PopOver(""String_Node_Str"",LastFM.getLastFMconfig()).show(b);
  }
);
  maintain(LastFM.scrobblingEnabledProperty(),mapB(LASTFM_SQUARE,LASTFM),lastFMB::icon);
  lastFMB.setDisable(true);
  Icon lockB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",GUI::toggleLayoutLocked);
  maintain(GUI.layoutLockedProperty(),mapB(LOCK,UNLOCK),lockB::icon);
  Icon lmB=new Icon(null,13,Action.get(""String_Node_Str""));
  Icon ltB=new Icon(CARET_LEFT,13,""String_Node_Str"",() -> ((SwitchPane)getSwitchPane()).alignLeftTab());
  Icon rtB=new Icon(CARET_RIGHT,13,""String_Node_Str"",() -> ((SwitchPane)getSwitchPane()).alignRightTab());
  maintain(GUI.layout_mode,mapB(TH,TH_LARGE),lmB::icon);
  Icon guideB=new Icon(GRADUATION_CAP,13,""String_Node_Str"",e -> {
    App.guide.resume();
    App.actionStream.push(""String_Node_Str"");
  }
);
  Icon helpB=new Icon(INFO,13,""String_Node_Str"",e -> {
    PopOver<Text> helpP=PopOver.createHelpPopOver(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    helpP.show((Node)e.getSource());
    helpP.getContentNode().setWrappingWidth(400);
    App.actionStream.push(""String_Node_Str"");
  }
);
  leftHeaderBox.getChildren().addAll(gitB,cssB,dirB,iconsB,new Label(""String_Node_Str""),layB,propB,runB,lastFMB,new Label(""String_Node_Str""),ltB,lockB,lmB,rtB,new Label(""String_Node_Str""),guideB,helpB);
  Icon miniB=new Icon(null,13,Action.get(""String_Node_Str""));
  maintain(miniB.hoverProperty(),mapB(ANGLE_DOUBLE_UP,ANGLE_UP),miniB::icon);
  Icon ontopB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"",this::toggleAlwaysOnTOp);
  maintain(alwaysOnTop,mapB(SQUARE,SQUARE_ALT),ontopB::icon);
  Icon fullscrB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"",this::toggleFullscreen);
  maintain(fullscreen,mapB(COMPRESS,EXPAND),fullscrB::icon);
  Icon minimB=new Icon(MINUS_SQUARE_ALT,13,""String_Node_Str"",this::toggleMinimize);
  maintain(minimB.hoverProperty(),mapB(MINUS_SQUARE,MINUS_SQUARE_ALT),minimB::icon);
  Icon maximB=new Icon(PLUS_SQUARE_ALT,13,""String_Node_Str"",this::toggleMaximize);
  maintain(maximB.hoverProperty(),mapB(PLUS_SQUARE,PLUS_SQUARE_ALT),maximB::icon);
  Icon closeB=new Icon(CLOSE,13,""String_Node_Str"" + ""String_Node_Str"",this::close);
  maintain(maximB.hoverProperty(),mapB(PLUS_SQUARE,PLUS_SQUARE_ALT),maximB::icon);
  rightHeaderBox.getChildren().addAll(miniB,ontopB,fullscrB,minimB,maximB,closeB);
}","/** 
 * Initializes the controller class.
 */
private void initialize(){
  getStage().setScene(new Scene(root));
  getStage().getScene().setFill(Color.rgb(0,0,0,0.01));
  getStage().setOpacity(windowOpacity.getValue());
  Rectangle mask=new Rectangle(1,1,BLACK);
  mask.widthProperty().bind(content.widthProperty());
  mask.heightProperty().bind(content.heightProperty());
  content.setClip(mask);
  s.setOnCloseRequest(e -> close());
  s.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH);
  s.addEventHandler(KEY_PRESSED,e -> {
    if (e.getCode() == ESCAPE && isFullscreen()) {
      setFullscreen(false);
      e.consume();
    }
  }
);
  focused.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcFocused,nv));
  resizing.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcResized,nv != NONE));
  moving.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcMoved,nv));
  fullscreen.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcFullscreen,nv));
  Action.getActions().stream().filter(a -> !a.isGlobal() && a.hasKeysAssigned()).forEach(a -> a.registerInScene(s.getScene()));
  root.addEventFilter(MOUSE_PRESSED,e -> UiContext.setPressedXY(e.getSceneX(),e.getSceneY()));
  root.addEventFilter(MOUSE_CLICKED,e -> UiContext.fireAppMouseClickEvent(this,e));
  header.addEventHandler(DRAG_DETECTED,this::moveStart);
  header.addEventHandler(MOUSE_DRAGGED,this::moveDo);
  header.addEventHandler(MOUSE_RELEASED,this::moveEnd);
  header.setMouseTransparent(false);
  header.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY)     if (e.getClickCount() == 2)     toggleMaximize();
    if (e.getButton() == SECONDARY)     if (e.getClickCount() == 2)     setHeaderVisible(!headerVisible);
  }
);
  header_activator.addEventFilter(MOUSE_ENTERED,e -> {
    if (!headerVisible)     applyHeaderVisible(true);
  }
);
  header.addEventFilter(MOUSE_EXITED_TARGET,e -> {
    if (!headerVisible && !moving.get() && resizing.get() == NONE && e.getSceneY() > 20)     applyHeaderVisible(false);
  }
);
  titleL.setMinWidth(0);
  root.setOnScroll(e -> {
    if (e.getDeltaY() > 0)     PLAYBACK.volumeInc();
 else     if (e.getDeltaY() < 0)     PLAYBACK.volumeDec();
  }
);
  root.addEventFilter(KeyEvent.ANY,e -> {
    if (e.getCode().equals(Action.Shortcut_ALTERNATE)) {
      GUI.setLayoutMode(e.getEventType().equals(KEY_PRESSED));
      if (e.getEventType().equals(KEY_PRESSED))       IOPane.drawWidgetIO();
    }
  }
);
  Icon gitB=new Icon(GITHUB,13,Action.get(""String_Node_Str""));
  Icon cssB=new Icon(CSS3,13,Action.get(""String_Node_Str""));
  Icon iconsB=new Icon(IMAGE,13,Action.get(""String_Node_Str""));
  Icon dirB=new Icon(FOLDER,13,Action.get(""String_Node_Str""));
  Icon propB=new Icon(GEARS,13,Action.get(""String_Node_Str""));
  Icon runB=new Icon(GAVEL,13,Action.get(""String_Node_Str""));
  Icon layB=new Icon(COLUMNS,13,Action.get(""String_Node_Str""));
  Icon lastFMB=new Icon<>(null,13,""String_Node_Str"" + ""String_Node_Str"",e -> {
    Node b=(Node)e.getSource();
    if (e.getButton() == PRIMARY)     if (LastFM.getScrobblingEnabled())     LastFM.toggleScrobbling();
 else     if (LastFM.isLoginSuccess())     LastFM.toggleScrobbling();
 else     new PopOver(""String_Node_Str"",LastFM.getLastFMconfig()).show(b);
 else     if (e.getButton() == SECONDARY)     new PopOver(""String_Node_Str"",LastFM.getLastFMconfig()).show(b);
  }
);
  maintain(LastFM.scrobblingEnabledProperty(),mapB(LASTFM_SQUARE,LASTFM),lastFMB::icon);
  lastFMB.setDisable(true);
  Icon lockB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",GUI::toggleLayoutLocked);
  maintain(GUI.layoutLockedProperty(),mapB(LOCK,UNLOCK),lockB::icon);
  Icon lmB=new Icon(null,13,Action.get(""String_Node_Str""));
  Icon ltB=new Icon(CARET_LEFT,13,""String_Node_Str"",() -> ((SwitchPane)getSwitchPane()).alignLeftTab());
  Icon rtB=new Icon(CARET_RIGHT,13,""String_Node_Str"",() -> ((SwitchPane)getSwitchPane()).alignRightTab());
  maintain(GUI.layout_mode,mapB(TH,TH_LARGE),lmB::icon);
  Icon guideB=new Icon(GRADUATION_CAP,13,""String_Node_Str"",e -> {
    App.guide.resume();
    App.actionStream.push(""String_Node_Str"");
  }
);
  Icon helpB=new Icon(INFO,13,""String_Node_Str"",e -> {
    PopOver<Text> helpP=PopOver.createHelpPopOver(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    helpP.show((Node)e.getSource());
    helpP.getContentNode().setWrappingWidth(400);
    App.actionStream.push(""String_Node_Str"");
  }
);
  leftHeaderBox.getChildren().addAll(gitB,cssB,dirB,iconsB,new Label(""String_Node_Str""),layB,propB,runB,lastFMB,new Label(""String_Node_Str""),ltB,lockB,lmB,rtB,new Label(""String_Node_Str""),guideB,helpB);
  Icon miniB=new Icon(null,13,Action.get(""String_Node_Str""));
  maintain(miniB.hoverProperty(),mapB(ANGLE_DOUBLE_UP,ANGLE_UP),miniB::icon);
  Icon ontopB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"",this::toggleAlwaysOnTOp);
  maintain(alwaysOnTop,mapB(SQUARE,SQUARE_ALT),ontopB::icon);
  Icon fullscrB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"",this::toggleFullscreen);
  maintain(fullscreen,mapB(COMPRESS,EXPAND),fullscrB::icon);
  Icon minimB=new Icon(MINUS_SQUARE_ALT,13,""String_Node_Str"",this::toggleMinimize);
  maintain(minimB.hoverProperty(),mapB(MINUS_SQUARE,MINUS_SQUARE_ALT),minimB::icon);
  Icon maximB=new Icon(PLUS_SQUARE_ALT,13,""String_Node_Str"",this::toggleMaximize);
  maintain(maximB.hoverProperty(),mapB(PLUS_SQUARE,PLUS_SQUARE_ALT),maximB::icon);
  Icon closeB=new Icon(CLOSE,13,""String_Node_Str"" + ""String_Node_Str"",this::close);
  maintain(maximB.hoverProperty(),mapB(PLUS_SQUARE,PLUS_SQUARE_ALT),maximB::icon);
  rightHeaderBox.getChildren().addAll(miniB,ontopB,fullscrB,minimB,maximB,closeB);
}",0.9978520491451156
36559,"/** 
 * {@inheritDoc} 
 */
@Override public void init(){
  inputs.getInput(""String_Node_Str"").bind(Player.playing.o);
  loadSkin(""String_Node_Str"",root);
  mainImage.setBorderVisible(true);
  mainImage.setBorderToImage(true);
  layAnchor(root,mainImage.getPane(),0d);
  Icon nextB=new Icon(ARROW_RIGHT,18,""String_Node_Str"",this::nextImage);
  nextB.setMouseTransparent(true);
  Pane nextP=new StackPane(nextB);
  nextP.setOnMouseClicked(nextB.getOnMouseClicked());
  nextP.getStyleClass().setAll(""String_Node_Str"");
  nextP.prefWidthProperty().bind(root.widthProperty().divide(10));
  nextP.setMinWidth(20);
  nextP.visibleProperty().bind(nextP.opacityProperty().isNotEqualTo(0));
  nextP.setBackground(bgr(Color.color(0,0,0,0.2)));
  Icon prevB=new Icon(ARROW_LEFT,18,""String_Node_Str"",this::prevImage);
  prevB.setMouseTransparent(true);
  Pane prevP=new StackPane(prevB);
  prevP.setOnMouseClicked(prevB.getOnMouseClicked());
  prevP.getStyleClass().setAll(""String_Node_Str"");
  prevP.prefWidthProperty().bind(root.widthProperty().divide(10));
  prevP.setMinWidth(20);
  prevP.visibleProperty().bind(prevP.opacityProperty().isNotEqualTo(0));
  prevP.setBackground(bgr(Color.color(0,0,0,0.2)));
  layAnchor(root,prevP,0d,null,0d,0d);
  layAnchor(root,nextP,0d,0d,0d,null);
  navigAnim=new Anim(millis(500),p -> {
    prevP.setOpacity(p);
    nextP.setOpacity(p);
    prevB.setTranslateX(+40 * (p - 1));
    nextB.setTranslateX(-40 * (p - 1));
  }
);
  navigAnim.affector.accept(0d);
  EventReducer inactive=toLast(1500,navigAnim::playClose);
  EventReducer active=toFirstDelayed(500,navigAnim::playOpen);
  root.addEventFilter(MOUSE_MOVED,e -> {
    if (thumb_root.getOpacity() == 0) {
      if (prevP.getOpacity() != 1)       active.push(e);
 else       inactive.push(e);
    }
  }
);
  thumbAnim=new Anim(millis(500),thumb_root::setOpacity);
  thumb_root.visibleProperty().bind(thumb_root.opacityProperty().isNotEqualTo(0));
  thumb_root.toFront();
  setAnchors(thumb_root,0d);
  root.heightProperty().addListener((o,ov,nv) -> setBottomAnchor(thumb_root,nv.doubleValue() * 0.3));
  root.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      if (e.getY() > 0.8 * root.getHeight() && e.getX() > 0.7 * root.getWidth()) {
        theater_mode.setCycledNapplyValue();
      }
 else {
        showThumbnails.setCycledNapplyValue();
      }
      e.consume();
    }
  }
);
  thumb_root.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      showThumbnails.setCycledNapplyValue();
      e.consume();
    }
  }
);
  ChangeListener<File> locationChange=(o,ov,nv) -> readThumbnails();
  folder.addListener(locationChange);
  d(() -> folder.removeListener(locationChange));
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragOver(DragUtil.imgFileDragAccepthandler);
  root.setOnDragOver(DragUtil.fileDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (e.getDragboard().hasFiles()) {
      dataChanged(e.getDragboard().getFiles().get(0));
      e.setDropCompleted(true);
      e.consume();
      return;
    }
    if (e.getGestureSource().equals(mainImage.getPane()))     return;
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       dataChanged(items.get(0));
      e.setDropCompleted(true);
      e.consume();
    }
 else     if (DragUtil.hasImage(e.getDragboard())) {
      DragUtil.getImages(e).use(this::showImages,FX).showProgress(App.getWindow().taskAdd()).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  thumb_root.setOnScroll(Event::consume);
}","/** 
 * {@inheritDoc} 
 */
@Override public void init(){
  inputs.getInput(""String_Node_Str"").bind(Player.playing.o);
  loadSkin(""String_Node_Str"",root);
  mainImage.setBorderVisible(true);
  mainImage.setBorderToImage(true);
  layAnchor(root,mainImage.getPane(),0d);
  Icon nextB=new Icon(ARROW_RIGHT,18,""String_Node_Str"",this::nextImage);
  nextB.setMouseTransparent(true);
  Pane nextP=new StackPane(nextB);
  nextP.setOnMouseClicked(nextB.getOnMouseClicked());
  nextP.getStyleClass().setAll(""String_Node_Str"");
  nextP.prefWidthProperty().bind(root.widthProperty().divide(10));
  nextP.setMinWidth(20);
  nextP.visibleProperty().bind(nextP.opacityProperty().isNotEqualTo(0));
  nextP.setBackground(bgr(Color.color(0,0,0,0.2)));
  Icon prevB=new Icon(ARROW_LEFT,18,""String_Node_Str"",this::prevImage);
  prevB.setMouseTransparent(true);
  Pane prevP=new StackPane(prevB);
  prevP.setOnMouseClicked(prevB.getOnMouseClicked());
  prevP.getStyleClass().setAll(""String_Node_Str"");
  prevP.prefWidthProperty().bind(root.widthProperty().divide(10));
  prevP.setMinWidth(20);
  prevP.visibleProperty().bind(prevP.opacityProperty().isNotEqualTo(0));
  prevP.setBackground(bgr(Color.color(0,0,0,0.2)));
  layAnchor(root,prevP,0d,null,0d,0d);
  layAnchor(root,nextP,0d,0d,0d,null);
  navigAnim=new Anim(millis(300),p -> {
    prevP.setOpacity(p);
    nextP.setOpacity(p);
    prevB.setTranslateX(+40 * (p - 1));
    nextB.setTranslateX(-40 * (p - 1));
  }
);
  navigAnim.affector.accept(0d);
  EventReducer inactive=toLast(1000,() -> {
    if (!nextP.isHover() && !prevP.isHover())     navigAnim.playClose();
  }
);
  EventReducer active=toFirstDelayed(400,navigAnim::playOpen);
  root.addEventFilter(MOUSE_MOVED,e -> {
    if (thumb_root.getOpacity() == 0) {
      if (prevP.getOpacity() != 1)       active.push(e);
 else       inactive.push(e);
    }
  }
);
  thumbAnim=new Anim(millis(500),thumb_root::setOpacity);
  thumb_root.visibleProperty().bind(thumb_root.opacityProperty().isNotEqualTo(0));
  thumb_root.toFront();
  setAnchors(thumb_root,0d);
  root.heightProperty().addListener((o,ov,nv) -> setBottomAnchor(thumb_root,nv.doubleValue() * 0.3));
  root.setOnMouseClicked(e -> {
    if (e.getButton() == SECONDARY && showThumbnails.getValue()) {
      showThumbnails.setCycledNapplyValue();
      e.consume();
    }
    if (e.getButton() == PRIMARY) {
      if (e.getY() > 0.8 * root.getHeight() && e.getX() > 0.7 * root.getWidth()) {
        theater_mode.setCycledNapplyValue();
      }
 else {
        showThumbnails.setCycledNapplyValue();
      }
      e.consume();
    }
  }
);
  thumb_root.setOnMouseClicked(e -> {
    showThumbnails.setCycledNapplyValue();
    e.consume();
  }
);
  root.addEventFilter(MOUSE_ENTERED,e -> {
    if (slideshow_on.getValue())     slideshow.pause();
  }
);
  root.addEventFilter(MOUSE_EXITED,e -> {
    if (slideshow_on.getValue())     slideshow.unpause();
  }
);
  ChangeListener<File> locationChange=(o,ov,nv) -> readThumbnails();
  folder.addListener(locationChange);
  d(() -> folder.removeListener(locationChange));
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragOver(DragUtil.imgFileDragAccepthandler);
  root.setOnDragOver(DragUtil.fileDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (e.getDragboard().hasFiles()) {
      dataChanged(e.getDragboard().getFiles().get(0));
      e.setDropCompleted(true);
      e.consume();
      return;
    }
    if (e.getGestureSource().equals(mainImage.getPane()))     return;
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       dataChanged(items.get(0));
      e.setDropCompleted(true);
      e.consume();
    }
 else     if (DragUtil.hasImage(e.getDragboard())) {
      DragUtil.getImages(e).use(this::showImages,FX).showProgress(App.getWindow().taskAdd()).run();
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  thumb_root.setOnScroll(Event::consume);
}",0.9353602115003304
36560,"@Override public void init(){
  out_sel=outputs.create(widget.id,""String_Node_Str"",Metadata.class,null);
  d(Player.librarySelected.i.bind(out_sel));
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(TITLE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.footerPane.setRight(new HBox(7,taskInfo.message,taskInfo.progressIndicator));
  taskInfo.setVisible(false);
  table.items_info.textFactory=(all,list) -> {
    double Σms=list.stream().mapToDouble(Metadata::getLengthInMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(Σms);
  }
;
  table.menuAdd.getItems().addAll(menuItem(""String_Node_Str"",this::addFiles),menuItem(""String_Node_Str"",this::addDirectory),editOnAdd_menuItem);
  table.menuRemove.getItems().addAll(menuItem(""String_Node_Str"",this::removeInvalid),menuItem(""String_Node_Str"",DB::removeAllItems));
  table.setColumnStateFacory(f -> {
    double w=f == PATH || f == TITLE ? 150 : 50;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    TableColumn<Metadata,?> c=new TableColumn(f.toString());
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    c.setCellFactory(f == RATING ? (Callback)App.ratingCell.getValue() : (Callback)col -> table.buildDefaultCell(f));
    return c;
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    table.getColumn(ColumnField.INDEX).ifPresent(i -> i.setPrefWidth(table.calculateIndexColumnWidth()));
    return b;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<Metadata>().onLeftDoubleClick((r,e) -> PlaylistManager.use(pl -> pl.setNplayFrom(table.getItems(),r.getIndex()))).onRightSingleClick((r,e) -> {
    if (!r.isSelected())     tbl.getSelectionModel().clearAndSelect(r.getIndex());
    contxt_menu.show(table,e);
  }
).styleRuleAdd(""String_Node_Str"",m -> Player.playingtem.get().same(m)));
  d(Player.playingtem.onChange(o -> table.updateStyleRules()));
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> out_sel.setValue(nv));
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER) {
      if (!table.getSelectionModel().isEmpty()) {
        PlaylistManager.use(pl -> pl.setNplayFrom(table.getItems(),table.getSelectionModel().getSelectedIndex()));
      }
    }
 else     if (e.getCode() == DELETE)     DB.removeItems(table.getSelectedItems());
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragOver_NoSelf(e -> {
    e.acceptTransferModes(COPY);
    e.consume();
  }
);
  table.setOnDragDropped(e -> {
    addNeditDo(DragUtil.getSongs(e),editOnAdd.get());
    e.setDropCompleted(true);
    e.consume();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(table.getSelectedItemsCopy(),db,true);
    }
    e.consume();
  }
);
  table.setOnScroll(Event::consume);
  maintain(table.itemsComparator,DB.library_sorter);
}","@Override public void init(){
  out_sel=outputs.create(widget.id,""String_Node_Str"",Metadata.class,null);
  d(Player.librarySelected.i.bind(out_sel));
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(TITLE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.footerPane.setRight(new HBox(7,taskInfo.message,taskInfo.progressIndicator));
  taskInfo.setVisible(false);
  table.items_info.textFactory=(all,list) -> {
    double Σms=list.stream().mapToDouble(Metadata::getLengthInMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(Σms);
  }
;
  table.menuAdd.getItems().addAll(menuItem(""String_Node_Str"",this::addFiles),menuItem(""String_Node_Str"",this::addDirectory),editOnAdd_menuItem);
  table.menuRemove.getItems().addAll(menuItem(""String_Node_Str"",this::removeInvalid),menuItem(""String_Node_Str"",DB::removeAllItems));
  table.setColumnStateFacory(f -> {
    double w=f == PATH || f == TITLE ? 150 : 50;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    TableColumn<Metadata,?> c=new TableColumn(f.toString());
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    c.setCellFactory(f == RATING ? (Callback)App.ratingCell.getValue() : (Callback)col -> table.buildDefaultCell(f));
    return c;
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    table.getColumn(ColumnField.INDEX).ifPresent(i -> i.setPrefWidth(table.calculateIndexColumnWidth()));
    return b;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<Metadata>().onLeftDoubleClick((r,e) -> PlaylistManager.use(pl -> pl.setNplayFrom(table.getItems(),r.getIndex()))).onRightSingleClick((r,e) -> {
    if (!r.isSelected())     tbl.getSelectionModel().clearAndSelect(r.getIndex());
    contxt_menu.show(table,e);
  }
).styleRuleAdd(""String_Node_Str"",Player.playingtem.get()::same));
  d(Player.playingtem.onUpdate(o -> table.updateStyleRules()));
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> out_sel.setValue(nv));
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER) {
      if (!table.getSelectionModel().isEmpty()) {
        PlaylistManager.use(pl -> pl.setNplayFrom(table.getItems(),table.getSelectionModel().getSelectedIndex()));
      }
    }
 else     if (e.getCode() == DELETE)     DB.removeItems(table.getSelectedItems());
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragOver_NoSelf(e -> {
    e.acceptTransferModes(COPY);
    e.consume();
  }
);
  table.setOnDragDropped(e -> {
    addNeditDo(DragUtil.getSongs(e),editOnAdd.get());
    e.setDropCompleted(true);
    e.consume();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(table.getSelectedItemsCopy(),db,true);
    }
    e.consume();
  }
);
  table.setOnScroll(Event::consume);
  maintain(table.itemsComparator,DB.library_sorter);
}",0.9960900633679384
36561,"@Override public void init(){
  out_sel=outputs.create(widget.id,""String_Node_Str"",MetadataGroup.class,null);
  out_sel_met=outputs.create(widget.id,""String_Node_Str"",List.class,EMPTY_LIST);
  in_items=inputs.create(""String_Node_Str"",List.class,EMPTY_LIST,this::setItems);
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(VALUE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(f.toString(mf));
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType(mf).equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == AVG_RATING ? (Callback)App.ratingCell.getValue() : f == W_RATING ? (Callback)new NumberRatingCellFactory() : (Callback)col -> {
      TableCell cel=table.buildDefaultCell(f);
      cel.setAlignment(a);
      return cel;
    }
);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<MetadataGroup>().styleRuleAdd(""String_Node_Str"",mg -> Player.playingtem.get().getField(fieldFilter.getValue()).equals(mg.getValue())).onLeftDoubleClick((row,e) -> playSelected()).onRightSingleClick((row,e) -> {
    if (!row.isSelected())     tbl.getSelectionModel().clearAndSelect(row.getIndex());
    contxt_menu.show(this,(TableView)table,e);
  }
));
  d(Player.playingtem.onChange(o -> table.updateStyleRules()));
  Menu m=(Menu)table.columnVisibleMenu.getItems().stream().filter(i -> i.getText().equals(""String_Node_Str"")).findFirst().get();
  Stream.of(Field.values()).sorted(by(f -> f.name())).map(f -> new SelectionMenuItem(f.toStringEnum(),false){
{
      this.setOnMouseClicked(() -> {
        if (!selected.get()) {
          m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(false));
          selected.set(true);
          fieldFilter.setNapplyValue(f);
        }
      }
);
    }
  }
).forEach(m.getItems()::add);
  table.columnVisibleMenu.addEventHandler(WINDOW_SHOWN,e -> m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(fieldFilter.getValue().toStringEnum().equals(mi.getText()))));
  table.setOnKeyPressed(e -> {
    if (e.getCode() == ENTER)     playSelected();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(filerListToSelectedNsort(),db,true);
    }
    e.consume();
  }
);
  table.setColumnResizePolicy(resize -> {
    FilteredTable<MetadataGroup,MetadataGroup.Field> t=(FilteredTable)resize.getTable();
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    t.getColumn(ColumnField.INDEX).ifPresent(i -> i.setPrefWidth(t.calculateIndexColumnWidth()));
    t.getColumn(VALUE).ifPresent(c -> {
      double Σw=t.getColumns().stream().filter(TableColumn::isVisible).mapToDouble(TableColumn::getWidth).sum();
      double itemsHeight=(t.getItems().size() + 1) * t.getFixedCellSize();
      double scrollbar=itemsHeight < t.getHeight() ? 0 : 15;
      c.setPrefWidth(t.getWidth() - (scrollbar + Σw - c.getWidth()));
    }
);
    return b;
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> out_sel.setValue(nv));
  EventStreams.changesOf(table.getSelectedItems()).reduceSuccessions((a,b) -> b,ofMillis(60)).subscribe(c -> {
    if (!sel_lock)     out_sel_met.setValue(filerList(in_items.getValue(),true,false));
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> {
    if (!sel_lock)     sel_last=nv == null ? ""String_Node_Str"" : nv.getField().toS(nv.getValue(),""String_Node_Str"");
  }
);
  table.setOnScroll(Event::consume);
}","@Override public void init(){
  out_sel=outputs.create(widget.id,""String_Node_Str"",MetadataGroup.class,null);
  out_sel_met=outputs.create(widget.id,""String_Node_Str"",List.class,EMPTY_LIST);
  in_items=inputs.create(""String_Node_Str"",List.class,EMPTY_LIST,this::setItems);
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(VALUE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(f.toString(mf));
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType(mf).equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == AVG_RATING ? (Callback)App.ratingCell.getValue() : f == W_RATING ? (Callback)new NumberRatingCellFactory() : (Callback)col -> {
      TableCell cel=table.buildDefaultCell(f);
      cel.setAlignment(a);
      return cel;
    }
);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<MetadataGroup>().styleRuleAdd(""String_Node_Str"",mg -> Player.playingtem.get().getField(fieldFilter.getValue()).equals(mg.getValue())).onLeftDoubleClick((row,e) -> playSelected()).onRightSingleClick((row,e) -> {
    if (!row.isSelected())     tbl.getSelectionModel().clearAndSelect(row.getIndex());
    contxt_menu.show(this,(TableView)table,e);
  }
));
  d(Player.playingtem.onUpdate(m -> table.updateStyleRules()));
  Menu m=(Menu)table.columnVisibleMenu.getItems().stream().filter(i -> i.getText().equals(""String_Node_Str"")).findFirst().get();
  Stream.of(Field.values()).sorted(by(f -> f.name())).map(f -> new SelectionMenuItem(f.toStringEnum(),false){
{
      this.setOnMouseClicked(() -> {
        if (!selected.get()) {
          m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(false));
          selected.set(true);
          fieldFilter.setNapplyValue(f);
        }
      }
);
    }
  }
).forEach(m.getItems()::add);
  table.columnVisibleMenu.addEventHandler(WINDOW_SHOWN,e -> m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(fieldFilter.getValue().toStringEnum().equals(mi.getText()))));
  table.setOnKeyPressed(e -> {
    if (e.getCode() == ENTER)     playSelected();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(filerListToSelectedNsort(),db,true);
    }
    e.consume();
  }
);
  table.setColumnResizePolicy(resize -> {
    FilteredTable<MetadataGroup,MetadataGroup.Field> t=(FilteredTable)resize.getTable();
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    t.getColumn(ColumnField.INDEX).ifPresent(i -> i.setPrefWidth(t.calculateIndexColumnWidth()));
    t.getColumn(VALUE).ifPresent(c -> {
      double Σw=t.getColumns().stream().filter(TableColumn::isVisible).mapToDouble(TableColumn::getWidth).sum();
      double itemsHeight=(t.getItems().size() + 1) * t.getFixedCellSize();
      double scrollbar=itemsHeight < t.getHeight() ? 0 : 15;
      c.setPrefWidth(t.getWidth() - (scrollbar + Σw - c.getWidth()));
    }
);
    return b;
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> out_sel.setValue(nv));
  EventStreams.changesOf(table.getSelectedItems()).reduceSuccessions((a,b) -> b,ofMillis(60)).subscribe(c -> {
    if (!sel_lock)     out_sel_met.setValue(filerList(in_items.getValue(),true,false));
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> {
    if (!sel_lock)     sel_last=nv == null ? ""String_Node_Str"" : nv.getField().toS(nv.getValue(),""String_Node_Str"");
  }
);
  table.setOnScroll(Event::consume);
}",0.9982825246887076
36562,"void set(boolean change,Metadata m){
  if (change)   itemPlayedES.forEach(h -> h.accept(val,m));
  itemUpdatedES.forEach(h -> h.accept(val,m));
  val=m;
}","void set(boolean change,Metadata m){
  Metadata ov=val;
  Metadata nv=m;
  val=nv;
  if (change)   itemPlayedES.forEach(h -> h.accept(ov,nv));
  itemUpdatedES.forEach(h -> h.accept(ov,nv));
}",0.8057971014492754
36563,"public final boolean isUnderLock(){
  return container.isUnderLock();
}","public final boolean isUnderLock(){
  return container.lockedUnder.get();
}",0.8904109589041096
36564,"private PaneWindowControls buidWindow(int i){
  PaneWindowControls w=new PaneWindowControls(rt);
  w.root.getStyleClass().add(""String_Node_Str"");
  w.setHeaderVisible(false);
  w.offscreenFixOn.set(false);
  w.open();
  w.resizeHalf();
  w.alignCenter();
  w.snappable.set(false);
  if (container.properties.containsKey(i + ""String_Node_Str""))   w.x.set(container.properties.getD(i + ""String_Node_Str"") * rt.getWidth());
  if (container.properties.containsKey(i + ""String_Node_Str""))   w.y.set(container.properties.getD(i + ""String_Node_Str"") * rt.getHeight());
  if (container.properties.containsKey(i + ""String_Node_Str""))   w.w.set(container.properties.getD(i + ""String_Node_Str"") * rt.getWidth() - container.properties.getD(i + ""String_Node_Str"") * rt.getWidth());
  if (container.properties.containsKey(i + ""String_Node_Str""))   w.h.set(container.properties.getD(i + ""String_Node_Str"") * rt.getHeight() - container.properties.getD(i + ""String_Node_Str"") * rt.getHeight());
  runLater(() -> {
    maintain(w.x,v -> {
      if (!resizing)       container.properties.put(i + ""String_Node_Str"",v.doubleValue() / rt.getWidth());
    }
);
    maintain(w.y,v -> {
      if (!resizing)       container.properties.put(i + ""String_Node_Str"",v.doubleValue() / rt.getHeight());
    }
);
    maintain(w.w,v -> {
      if (!resizing)       container.properties.put(i + ""String_Node_Str"",(w.x.get() + v.doubleValue()) / rt.getWidth());
    }
);
    maintain(w.h,v -> {
      if (!resizing)       container.properties.put(i + ""String_Node_Str"",(w.y.get() + v.doubleValue()) / rt.getHeight());
    }
);
    maintain(GUI.snapDistance,d -> d,w.snapDistance);
    maintain(GUI.snapping,w.snappable);
  }
);
  return w;
}","private PaneWindowControls buidWindow(int i){
  PaneWindowControls w=new PaneWindowControls(rt);
  w.root.getStyleClass().add(""String_Node_Str"");
  w.setHeaderVisible(false);
  w.offscreenFixOn.set(false);
  w.open();
  w.resizeHalf();
  w.alignCenter();
  w.snappable.set(false);
  if (container.properties.containsKey(i + ""String_Node_Str""))   w.x.set(container.properties.getD(i + ""String_Node_Str"") * rt.getWidth());
  if (container.properties.containsKey(i + ""String_Node_Str""))   w.y.set(container.properties.getD(i + ""String_Node_Str"") * rt.getHeight());
  if (container.properties.containsKey(i + ""String_Node_Str""))   w.w.set(container.properties.getD(i + ""String_Node_Str"") * rt.getWidth() - container.properties.getD(i + ""String_Node_Str"") * rt.getWidth());
  if (container.properties.containsKey(i + ""String_Node_Str""))   w.h.set(container.properties.getD(i + ""String_Node_Str"") * rt.getHeight() - container.properties.getD(i + ""String_Node_Str"") * rt.getHeight());
  runLater(() -> {
    maintain(w.x,v -> {
      if (!resizing)       container.properties.put(i + ""String_Node_Str"",v.doubleValue() / rt.getWidth());
    }
);
    maintain(w.y,v -> {
      if (!resizing)       container.properties.put(i + ""String_Node_Str"",v.doubleValue() / rt.getHeight());
    }
);
    maintain(w.w,v -> {
      if (!resizing)       container.properties.put(i + ""String_Node_Str"",(w.x.get() + v.doubleValue()) / rt.getWidth());
    }
);
    maintain(w.h,v -> {
      if (!resizing)       container.properties.put(i + ""String_Node_Str"",(w.y.get() + v.doubleValue()) / rt.getHeight());
    }
);
    maintain(GUI.snapDistance,d -> d,w.snapDistance);
    maintain(GUI.snapping,w.snappable);
  }
);
  maintain(container.lockedUnder,l -> !l,w.resizable);
  maintain(container.lockedUnder,l -> !l,w.movable);
  return w;
}",0.969300739056282
36565,"public FreeFormArea(FreeFormContainer con){
  super(con);
  root.getChildren().add(rt);
  setAnchors(rt,0d);
  BooleanProperty isHere=new SimpleBooleanProperty(false);
  rt.setOnMousePressed(e -> isHere.set(isHere(e)));
  rt.setOnMouseClicked(e -> {
    if (!isAltCon && (GUI.isLayoutMode() || !container.isUnderLock())) {
      isHere.set(isHere.get() && isHere(e));
      if (e.getButton() == PRIMARY && isHere.get()) {
        addEmptyWindowAt(e.getX(),e.getY());
        e.consume();
      }
      if (e.getButton() == SECONDARY && container.getChildren().isEmpty()) {
        container.close();
        e.consume();
      }
    }
  }
);
  rt.setOnDragDetected(null);
  rt.setOnDragDone(e -> rt.pseudoClassStateChanged(DRAGGED_PSEUDOCLASS,false));
  rt.setOnDragOver(DragUtil.componentDragAcceptHandler);
  rt.setOnDragDropped(e -> {
    if (DragUtil.hasComponent()) {
      int i=addEmptyWindowAt(e.getX(),e.getY());
      container.swapChildren(i,DragUtil.getComponent());
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  rt.widthProperty().addListener((o,ov,nv) -> {
    resizing=true;
    windows.forEach((i,w) -> {
      boolean s=w.snappable.get();
      w.snappable.unbind();
      w.snappable.set(false);
      double wx=container.properties.getD(i + ""String_Node_Str"");
      double ww=container.properties.getD(i + ""String_Node_Str"");
      if (container.properties.containsKey(i + ""String_Node_Str""))       w.x.set(wx * nv.doubleValue());
      if (container.properties.containsKey(i + ""String_Node_Str""))       w.w.set((ww - wx) * nv.doubleValue());
      maintain(GUI.snapping,w.snappable);
    }
);
    resizing=false;
  }
);
  rt.heightProperty().addListener((o,ov,nv) -> {
    resizing=true;
    windows.forEach((i,w) -> {
      boolean s=w.snappable.get();
      w.snappable.unbind();
      w.snappable.set(false);
      double wy=container.properties.getD(i + ""String_Node_Str"");
      double wh=container.properties.getD(i + ""String_Node_Str"");
      if (container.properties.containsKey(i + ""String_Node_Str""))       w.y.set(wy * nv.doubleValue());
      if (container.properties.containsKey(i + ""String_Node_Str""))       w.h.set((wh - wy) * nv.doubleValue());
      maintain(GUI.snapping,w.snappable);
    }
);
    resizing=false;
  }
);
}","public FreeFormArea(FreeFormContainer con){
  super(con);
  root.getChildren().add(rt);
  setAnchors(rt,0d);
  BooleanProperty isHere=new SimpleBooleanProperty(false);
  rt.setOnMousePressed(e -> isHere.set(isHere(e)));
  rt.setOnMouseClicked(e -> {
    if (!isAltCon && (GUI.isLayoutMode() || !container.lockedUnder.get())) {
      isHere.set(isHere.get() && isHere(e));
      if (e.getButton() == PRIMARY && isHere.get()) {
        addEmptyWindowAt(e.getX(),e.getY());
        e.consume();
      }
      if (e.getButton() == SECONDARY && container.getChildren().isEmpty()) {
        container.close();
        e.consume();
      }
    }
  }
);
  rt.setOnDragDetected(null);
  rt.setOnDragDone(e -> rt.pseudoClassStateChanged(DRAGGED_PSEUDOCLASS,false));
  rt.setOnDragOver(DragUtil.componentDragAcceptHandler);
  rt.setOnDragDropped(e -> {
    if (DragUtil.hasComponent()) {
      int i=addEmptyWindowAt(e.getX(),e.getY());
      container.swapChildren(i,DragUtil.getComponent());
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  rt.widthProperty().addListener((o,ov,nv) -> {
    resizing=true;
    windows.forEach((i,w) -> {
      boolean s=w.snappable.get();
      w.snappable.unbind();
      w.snappable.set(false);
      double wx=container.properties.getD(i + ""String_Node_Str"");
      double ww=container.properties.getD(i + ""String_Node_Str"");
      if (container.properties.containsKey(i + ""String_Node_Str""))       w.x.set(wx * nv.doubleValue());
      if (container.properties.containsKey(i + ""String_Node_Str""))       w.w.set((ww - wx) * nv.doubleValue());
      maintain(GUI.snapping,w.snappable);
    }
);
    resizing=false;
  }
);
  rt.heightProperty().addListener((o,ov,nv) -> {
    resizing=true;
    windows.forEach((i,w) -> {
      boolean s=w.snappable.get();
      w.snappable.unbind();
      w.snappable.set(false);
      double wy=container.properties.getD(i + ""String_Node_Str"");
      double wh=container.properties.getD(i + ""String_Node_Str"");
      if (container.properties.containsKey(i + ""String_Node_Str""))       w.y.set(wy * nv.doubleValue());
      if (container.properties.containsKey(i + ""String_Node_Str""))       w.h.set((wh - wy) * nv.doubleValue());
      maintain(GUI.snapping,w.snappable);
    }
);
    resizing=false;
  }
);
}",0.9964958388085852
36566,"public Layouter(Container con,int index){
  Objects.requireNonNull(con);
  this.index=index;
  this.container=con;
  cp.onSelect=layout -> {
switch (layout) {
case ""String_Node_Str"":
      closeAndDo(cp.root,this::showSplitV);
    break;
case ""String_Node_Str"":
  closeAndDo(cp.root,this::showSplitH);
break;
case ""String_Node_Str"":
closeAndDo(cp.root,this::showWidgetArea);
break;
case ""String_Node_Str"":
closeAndDo(cp.root,this::showTabs);
break;
case ""String_Node_Str"":
closeAndDo(cp.root,this::showFreeform);
break;
}
}
;
cp.onCancel=this::hide;
cp.textCoverter=text -> text;
cp.itemSupply=() -> stream(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
cp.buildContent();
setAnchors(cp.root,0d);
Interpolator i=new CircularInterpolator(EASE_OUT);
a1=new FadeTransition(ANIM_DUR,cp.root);
a1.setInterpolator(LINEAR);
a2=new ScaleTransition(ANIM_DUR,cp.root);
a2.setInterpolator(i);
cp.root.setOpacity(0);
cp.root.setScaleX(0);
cp.root.setScaleY(0);
root.setOnDragOver(DragUtil.componentDragAcceptHandler);
root.setOnDragDropped(e -> {
if (DragUtil.hasComponent()) {
container.swapChildren(index,DragUtil.getComponent());
e.setDropCompleted(true);
e.consume();
}
}
);
clickShowHider=e -> {
if (e.getButton() == PRIMARY) {
if (cp.root.getOpacity() != 0) return;
if (container.isUnderLock()) return;
show();
e.consume();
}
}
;
exitHider=e -> cp.onCancel.run();
setWeakMode(true);
setShow(GUI.isLayoutMode());
}","public Layouter(Container con,int index){
  Objects.requireNonNull(con);
  this.index=index;
  this.container=con;
  cp.onSelect=layout -> {
switch (layout) {
case ""String_Node_Str"":
      closeAndDo(cp.root,this::showSplitV);
    break;
case ""String_Node_Str"":
  closeAndDo(cp.root,this::showSplitH);
break;
case ""String_Node_Str"":
closeAndDo(cp.root,this::showWidgetArea);
break;
case ""String_Node_Str"":
closeAndDo(cp.root,this::showTabs);
break;
case ""String_Node_Str"":
closeAndDo(cp.root,this::showFreeform);
break;
}
}
;
cp.onCancel=this::hide;
cp.textCoverter=text -> text;
cp.itemSupply=() -> stream(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
cp.buildContent();
setAnchors(cp.root,0d);
Interpolator i=new CircularInterpolator(EASE_OUT);
a1=new FadeTransition(ANIM_DUR,cp.root);
a1.setInterpolator(LINEAR);
a2=new ScaleTransition(ANIM_DUR,cp.root);
a2.setInterpolator(i);
cp.root.setOpacity(0);
cp.root.setScaleX(0);
cp.root.setScaleY(0);
root.setOnDragOver(DragUtil.componentDragAcceptHandler);
root.setOnDragDropped(e -> {
if (DragUtil.hasComponent()) {
container.swapChildren(index,DragUtil.getComponent());
e.setDropCompleted(true);
e.consume();
}
}
);
clickShowHider=e -> {
if (e.getButton() == PRIMARY) {
if (cp.root.getOpacity() != 0) return;
if (container.lockedUnder.get()) return;
show();
e.consume();
}
}
;
exitHider=e -> cp.onCancel.run();
setWeakMode(true);
setShow(GUI.isLayoutMode());
}",0.9944289693593314
36567,"/** 
 * @param c container to make contract with
 * @param i index of the child within the container
 */
public WidgetArea(Container c,int i){
  super(c,i);
  try {
    FXMLLoader loader=new FXMLLoader(this.getClass().getResource(""String_Node_Str""));
    loader.setRoot(content_root);
    loader.setController(this);
    loader.load();
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex.getMessage());
  }
  controls=new AreaControls(this);
  content_padding.getChildren().addAll(controls.root);
  Util.setAnchors(controls.root,0d);
  root.setOnDragOver(DragUtil.componentDragAcceptHandler);
  root.setOnDragDropped(e -> {
    if (DragUtil.hasComponent()) {
      container.swapChildren(index,DragUtil.getComponent());
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  if (GUI.isLayoutMode())   show();
 else   hide();
}","/** 
 * @param c container to make contract with
 * @param i index of the child within the container
 */
public WidgetArea(Container c,int i){
  super(c,i);
  try {
    FXMLLoader loader=new FXMLLoader(this.getClass().getResource(""String_Node_Str""));
    loader.setRoot(content_root);
    loader.setController(this);
    loader.load();
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex.getMessage());
  }
  controls=new AreaControls(this);
  content_padding.getChildren().addAll(controls.root);
  root.setOnDragOver(DragUtil.componentDragAcceptHandler);
  root.setOnDragDropped(e -> {
    if (DragUtil.hasComponent()) {
      container.swapChildren(index,DragUtil.getComponent());
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  if (GUI.isLayoutMode())   show();
 else   hide();
}",0.9777777777777776
36568,"/** 
 * { @inheritDoc } Index can only take on value 1 or 2. Other values will do nothing.
 * @throws UnsupportedOperationException if component not Container type.
 */
@Override public void addChild(Integer index,Component c){
  if (index == null)   return;
  if (index < 1 || index > 2)   throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str"");
  if (c instanceof Container)   Container.class.cast(c).parent=this;
  children.put(index,c);
  load();
  initialize();
}","/** 
 * { @inheritDoc } Index can only take on value 1 or 2. Other values will do nothing.
 * @throws UnsupportedOperationException if component not Container type.
 */
@Override public void addChild(Integer index,Component c){
  if (index == null)   return;
  if (index < 1 || index > 2)   throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str"");
  if (c instanceof Container)   Container.class.cast(c).setParent(this);
  children.put(index,c);
  load();
  setParentRec();
}",0.9519038076152304
36569,"/** 
 * Adds the widget as child. Since there is only one child, the index parameter is ignored.
 * @param c widget or container. Null value will clear all children.
 * @param index is can only take 1 or 2 value. other values will donothing.
 */
@Override public void addChild(Integer index,Component c){
  if (index == null)   return;
  if (index < 1 || index > 2)   throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str"");
  if (!(c instanceof Container))   getChildren().put(index,null);
 else   getChildren().put(index,c);
  load();
  initialize();
}","/** 
 * Adds the widget as child. Since there is only one child, the index parameter is ignored.
 * @param c widget or container. Null value will clear all children.
 * @param index is can only take 1 or 2 value. other values will donothing.
 */
@Override public void addChild(Integer index,Component c){
  if (index == null)   return;
  if (index < 1 || index > 2)   throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str"");
  if (!(c instanceof Container))   getChildren().put(index,null);
 else   getChildren().put(index,c);
  load();
  setParentRec();
}",0.9810996563573884
36570,"@IsInput(""String_Node_Str"") public void setItems(List<? extends Metadata> items){
  table.setItemsRaw(items);
}","@IsInput(""String_Node_Str"") public void setItems(List<? extends Metadata> items){
  if (items == null)   return;
  table.setItemsRaw(items);
}",0.8774703557312253
36571,"/** 
 * HELPER METHODS 
 */
void savePlaylist(){
  List<PlaylistItem> l=table.getItems();
  if (l.isEmpty())   return;
  String initialName=""String_Node_Str"" + new Date(System.currentTimeMillis());
  MapConfigurable mc=new MapConfigurable(new ValueConfig(""String_Node_Str"",initialName));
  SimpleConfigurator sc=new SimpleConfigurator<String>(mc,c -> {
    String n=c.getField(""String_Node_Str"").getValue();
    Playlist p=new Playlist(UUID.randomUUID());
    p.setAll(l);
    p.serializeToFile(new File(App.PLAYLIST_FOLDER(),n + ""String_Node_Str""));
  }
);
  PopOver p=new PopOver(sc);
  p.title.set(""String_Node_Str"");
  p.show(PopOver.ScreenCentricPos.App_Center);
}","/** 
 * HELPER METHODS 
 */
void savePlaylist(){
  List<PlaylistItem> l=table.getItems();
  if (l.isEmpty())   return;
  String initialName=""String_Node_Str"" + new Date(System.currentTimeMillis());
  MapConfigurable mc=new MapConfigurable(new ValueConfig(""String_Node_Str"",initialName));
  SimpleConfigurator sc=new SimpleConfigurator<String>(mc,c -> {
    String n=c.getField(""String_Node_Str"").getValue();
    Playlist p=new Playlist(UUID.randomUUID());
    p.setAll(l);
    p.serializeToFile(new File(App.PLAYLIST_FOLDER(),n + ""String_Node_Str""));
  }
);
  PopOver p=new PopOver(sc);
  p.title.set(""String_Node_Str"");
  p.show(PopOver.ScreenPos.App_Center);
}",0.9827197595792636
36572,"void saveSelectedAsPlaylist(){
  List<PlaylistItem> l=table.getSelectedItems();
  if (l.isEmpty())   return;
  MapConfigurable mc=new MapConfigurable(new ValueConfig(""String_Node_Str"",""String_Node_Str""));
  SimpleConfigurator sc=new SimpleConfigurator<String>(mc,c -> {
    String n=c.getField(""String_Node_Str"").getValue();
    Playlist p=new Playlist(UUID.randomUUID());
    p.setAll(l);
    p.serializeToFile(new File(App.PLAYLIST_FOLDER(),n + ""String_Node_Str""));
  }
);
  PopOver p=new PopOver(sc);
  p.title.set(""String_Node_Str"");
  p.show(PopOver.ScreenCentricPos.App_Center);
}","void saveSelectedAsPlaylist(){
  List<PlaylistItem> l=table.getSelectedItems();
  if (l.isEmpty())   return;
  MapConfigurable mc=new MapConfigurable(new ValueConfig(""String_Node_Str"",""String_Node_Str""));
  SimpleConfigurator sc=new SimpleConfigurator<String>(mc,c -> {
    String n=c.getField(""String_Node_Str"").getValue();
    Playlist p=new Playlist(UUID.randomUUID());
    p.setAll(l);
    p.serializeToFile(new File(App.PLAYLIST_FOLDER(),n + ""String_Node_Str""));
  }
);
  PopOver p=new PopOver(sc);
  p.title.set(""String_Node_Str"");
  p.show(PopOver.ScreenPos.App_Center);
}",0.9802575107296138
36573,"/** 
 * Writes edited data to tag and reloads the data and refreshes gui. The result is new data from tag shown, allowing to confirm the changes really happened. If no items are loaded then this method is a no-op.
 */
@FXML public void write(){
  Validation v=validators.stream().filter(Validation::isInValid).findFirst().orElse(null);
  if (v != null) {
    PopOver p=new PopOver(new Text(v.text));
    p.show(PopOver.ScreenCentricPos.App_Center);
    return;
  }
  writing=true;
  showProgressWriting();
  MetadataWriter.use(metas,w -> {
    if ((boolean)TitleF.getUserData())     w.setTitle(TitleF.getText());
    if ((boolean)AlbumF.getUserData())     w.setAlbum(AlbumF.getText());
    if ((boolean)ArtistF.getUserData())     w.setArtist(ArtistF.getText());
    if ((boolean)AlbumArtistF.getUserData())     w.setAlbum_artist(AlbumArtistF.getText());
    if ((boolean)ComposerF.getUserData())     w.setComposer(ComposerF.getText());
    if ((boolean)PublisherF.getUserData())     w.setPublisher(PublisherF.getText());
    if ((boolean)TrackF.getUserData())     w.setTrack(TrackF.getText());
    if ((boolean)TracksTotalF.getUserData())     w.setTracks_total(TracksTotalF.getText());
    if ((boolean)DiscF.getUserData())     w.setDisc(DiscF.getText());
    if ((boolean)DiscsTotalF.getUserData())     w.setDiscs_total(DiscF.getText());
    if ((boolean)GenreF.getUserData())     w.setGenre(GenreF.getText());
    if ((boolean)CategoryF.getUserData())     w.setCategory(CategoryF.getText());
    if ((boolean)YearF.getUserData())     w.setYear(YearF.getText());
    if ((boolean)RatingF.getUserData())     w.setRatingPercent(RatingPF.getText());
    if ((boolean)PlaycountF.getUserData())     w.setPlaycount(PlaycountF.getText());
    if ((boolean)CommentF.getUserData())     w.setComment(CommentF.getText());
    if ((boolean)MoodF.getUserData())     w.setMood(MoodF.getText());
    ColorFPicker.setUserData(true);
    if ((boolean)ColorFPicker.getUserData() && ColorFPicker.getValue() != EMPTY_COLOR)     w.setColor(ColorFPicker.getValue());
    if ((boolean)ColorF.getUserData())     w.setCustom1(ColorF.getText());
    if ((boolean)LyricsA.getUserData())     w.setLyrics(LyricsA.getText());
    if ((boolean)CoverL.getUserData())     w.setCover(new_cover_file);
    if ((boolean)Custom4F.getUserData())     w.setCustom4(Custom4F.getText());
    if ((boolean)Custom5F.getUserData())     w.setCustom5(Custom5F.getText());
  }
,items -> {
    runLater(() -> {
      writing=false;
      populate(items);
      App.use(Notifier.class,s -> s.showTextNotification(""String_Node_Str"",""String_Node_Str""));
    }
);
  }
);
}","/** 
 * Writes edited data to tag and reloads the data and refreshes gui. The result is new data from tag shown, allowing to confirm the changes really happened. If no items are loaded then this method is a no-op.
 */
@FXML public void write(){
  Validation v=validators.stream().filter(Validation::isInValid).findFirst().orElse(null);
  if (v != null) {
    PopOver p=new PopOver(new Text(v.text));
    p.show(PopOver.ScreenPos.App_Center);
    return;
  }
  writing=true;
  showProgressWriting();
  MetadataWriter.use(metas,w -> {
    if ((boolean)TitleF.getUserData())     w.setTitle(TitleF.getText());
    if ((boolean)AlbumF.getUserData())     w.setAlbum(AlbumF.getText());
    if ((boolean)ArtistF.getUserData())     w.setArtist(ArtistF.getText());
    if ((boolean)AlbumArtistF.getUserData())     w.setAlbum_artist(AlbumArtistF.getText());
    if ((boolean)ComposerF.getUserData())     w.setComposer(ComposerF.getText());
    if ((boolean)PublisherF.getUserData())     w.setPublisher(PublisherF.getText());
    if ((boolean)TrackF.getUserData())     w.setTrack(TrackF.getText());
    if ((boolean)TracksTotalF.getUserData())     w.setTracks_total(TracksTotalF.getText());
    if ((boolean)DiscF.getUserData())     w.setDisc(DiscF.getText());
    if ((boolean)DiscsTotalF.getUserData())     w.setDiscs_total(DiscF.getText());
    if ((boolean)GenreF.getUserData())     w.setGenre(GenreF.getText());
    if ((boolean)CategoryF.getUserData())     w.setCategory(CategoryF.getText());
    if ((boolean)YearF.getUserData())     w.setYear(YearF.getText());
    if ((boolean)RatingF.getUserData())     w.setRatingPercent(RatingPF.getText());
    if ((boolean)PlaycountF.getUserData())     w.setPlaycount(PlaycountF.getText());
    if ((boolean)CommentF.getUserData())     w.setComment(CommentF.getText());
    if ((boolean)MoodF.getUserData())     w.setMood(MoodF.getText());
    ColorFPicker.setUserData(true);
    if ((boolean)ColorFPicker.getUserData() && ColorFPicker.getValue() != EMPTY_COLOR)     w.setColor(ColorFPicker.getValue());
    if ((boolean)ColorF.getUserData())     w.setCustom1(ColorF.getText());
    if ((boolean)LyricsA.getUserData())     w.setLyrics(LyricsA.getText());
    if ((boolean)CoverL.getUserData())     w.setCover(new_cover_file);
    if ((boolean)Custom4F.getUserData())     w.setCustom4(Custom4F.getText());
    if ((boolean)Custom5F.getUserData())     w.setCustom5(Custom5F.getText());
  }
,items -> {
    runLater(() -> {
      writing=false;
      populate(items);
      App.use(Notifier.class,s -> s.showTextNotification(""String_Node_Str"",""String_Node_Str""));
    }
);
  }
);
}",0.9986623351805848
36574,"public static void suspend(){
  logger.info(""String_Node_Str"");
  state.realTime.set(getRealTime());
  Player.state.serialize();
  player.dispose();
}","public static void suspend(){
  LOGGER.info(""String_Node_Str"");
  state.realTime.set(getRealTime());
  Player.state.serialize();
  player.dispose();
}",0.96
36575,"public static void activate(){
  logger.info(""String_Node_Str"");
  post_activating=true;
  Status s=state.status.get();
  if (s == PAUSED || s == PLAYING)   startTime=state.currentTime.get();
  if (s == PAUSED) {
    player.play(PlaylistManager.use(p -> p.getPlaying(),null));
    util.async.Async.runFX(1000,player::pause);
  }
  if (s == PLAYING) {
    player.play(PlaylistManager.use(p -> p.getPlaying(),null));
  }
}","public static void activate(){
  LOGGER.info(""String_Node_Str"");
  post_activating=true;
  Status s=state.status.get();
  if (s == PAUSED || s == PLAYING)   startTime=state.currentTime.get();
  if (s == PAUSED) {
    player.play(PlaylistManager.use(p -> p.getPlaying(),null));
    util.async.Async.runFX(1000,player::pause);
  }
  if (s == PLAYING) {
    player.play(PlaylistManager.use(p -> p.getPlaying(),null));
  }
}",0.9857142857142858
36576,"/** 
 * Open chooser and add or play new items.
 * @param add true to add items, false to clear playlist and play items
 */
public void addOrEnqueueUrl(boolean add){
  String title=add ? ""String_Node_Str"" : ""String_Node_Str"";
  SimpleConfigurator content=new SimpleConfigurator<URI>(new ValueConfig<URI>(""String_Node_Str"",URI.create(""String_Node_Str""),title),c -> {
    URI uri=c.getField(""String_Node_Str"").getValue();
    if (add) {
      addUri(uri);
    }
 else {
      PLAYBACK.stop();
      clear();
      addUri(uri);
      playFirstItem();
    }
  }
);
  String uri=""String_Node_Str"";
  Text t1=new Text(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  Text t2=new Text(uri);
  t2.getStyleClass().add(""String_Node_Str"");
  VBox cnt=new VBox(t1,t2);
  cnt.setSpacing(8);
  VBox.setMargin(t2,new Insets(0,0,0,20));
  Icon infoB=new Icon(INFO,11,""String_Node_Str"");
  infoB.setOnMouseClicked(e -> {
    PopOver helpP=PopOver.createHelpPopOver(""String_Node_Str"");
    helpP.setContentNode(cnt);
    helpP.getContentNode().setOnMouseClicked(pe -> {
      Environment.browse(URI.create(uri));
      pe.consume();
    }
);
    helpP.show(infoB);
  }
);
  PopOver p=new PopOver(title,content);
  p.getHeaderIcons().add(infoB);
  p.show(PopOver.ScreenCentricPos.App_Center);
  p.detached.set(true);
}","/** 
 * Open chooser and add or play new items.
 * @param add true to add items, false to clear playlist and play items
 */
public void addOrEnqueueUrl(boolean add){
  String title=add ? ""String_Node_Str"" : ""String_Node_Str"";
  SimpleConfigurator content=new SimpleConfigurator<URI>(new ValueConfig<URI>(""String_Node_Str"",URI.create(""String_Node_Str""),title),c -> {
    URI uri=c.getField(""String_Node_Str"").getValue();
    if (add) {
      addUri(uri);
    }
 else {
      PLAYBACK.stop();
      clear();
      addUri(uri);
      playFirstItem();
    }
  }
);
  String uri=""String_Node_Str"";
  Text t1=new Text(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  Text t2=new Text(uri);
  t2.getStyleClass().add(""String_Node_Str"");
  VBox cnt=new VBox(t1,t2);
  cnt.setSpacing(8);
  VBox.setMargin(t2,new Insets(0,0,0,20));
  Icon infoB=new Icon(INFO,11,""String_Node_Str"");
  infoB.setOnMouseClicked(e -> {
    PopOver helpP=PopOver.createHelpPopOver(""String_Node_Str"");
    helpP.setContentNode(cnt);
    helpP.getContentNode().setOnMouseClicked(pe -> {
      Environment.browse(URI.create(uri));
      pe.consume();
    }
);
    helpP.show(infoB);
  }
);
  PopOver p=new PopOver(title,content);
  p.getHeaderIcons().add(infoB);
  p.show(PopOver.ScreenPos.App_Center);
  p.detached.set(true);
}",0.9914593390271074
36577,"private static Config createConfig(Field f,Object instance,String name,IsConfig anotation,String group){
  Class c=f.getType();
  if (Config.class.isAssignableFrom(c)) {
    return newFromConfig(f,instance);
  }
 else   if (WritableValue.class.isAssignableFrom(c) || ReadOnlyProperty.class.isAssignableFrom(c))   return newFromProperty(f,instance,name,anotation,group);
 else {
    try {
      noFinal(f);
      f.setAccessible(true);
      MethodHandle getter=methodLookup.unreflectGetter(f);
      MethodHandle setter=methodLookup.unreflectSetter(f);
      return new FieldConfig(name,anotation,instance,group,getter,setter);
    }
 catch (    IllegalAccessException e) {
      throw new RuntimeException(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage());
    }
  }
}","private static Config createConfig(Field f,Object instance,String name,IsConfig anotation,String group){
  Class c=f.getType();
  if (Config.class.isAssignableFrom(c)) {
    return newFromConfig(f,instance);
  }
 else   if (WritableValue.class.isAssignableFrom(c) || ReadOnlyProperty.class.isAssignableFrom(c)) {
    return newFromProperty(f,instance,name,anotation,group);
  }
 else {
    try {
      noFinal(f);
      f.setAccessible(true);
      MethodHandle getter=methodLookup.unreflectGetter(f);
      MethodHandle setter=methodLookup.unreflectSetter(f);
      return new FieldConfig(name,anotation,instance,group,getter,setter);
    }
 catch (    IllegalAccessException e) {
      throw new RuntimeException(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ e.getMessage());
    }
  }
}",0.9949494949494948
36578,"/** 
 */
private static <T>T getValueFromMethodHelper(MethodHandle mh,Object instance){
  try {
    if (instance == null)     return (T)mh.invoke();
 else     return (T)mh.invokeWithArguments(instance);
  }
 catch (  Throwable ex) {
    throw new RuntimeException(""String_Node_Str"" + ex);
  }
}","/** 
 */
private static <T>T getValueFromMethodHelper(MethodHandle mh,Object instance){
  try {
    if (instance == null)     return (T)mh.invoke();
 else     return (T)mh.invokeWithArguments(instance);
  }
 catch (  Throwable e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9863013698630136
36579,"/** 
 * @param pos the position for the picker to show on 
 */
public void setPos(PopOver.NodeCentricPos pos){
  this.pos=pos;
}","/** 
 * @param pos the position for the picker to show on 
 */
public void setPos(PopOver.NodePos pos){
  this.pos=pos;
}",0.9718875502008032
36580,"/** 
 * @return the position for the picker to show on 
 */
public PopOver.NodeCentricPos getPos(){
  return pos;
}","/** 
 * @return the position for the picker to show on 
 */
public PopOver.NodePos getPos(){
  return pos;
}",0.968609865470852
36581,"@Override public void show(ScreenCentricPos pos){
  super.show(pos);
  closer.start();
}","@Override public void show(ScreenPos pos){
  super.show(pos);
  closer.start();
}",0.9585798816568049
36582,"/** 
 * Returns rectangular screen area 
 */
public Rectangle2D getScreenArea(Window w,ScreenCentricPos pos){
  Screen ps=Screen.getPrimary();
  if (this == MAIN)   return ps.getBounds();
  if (this == APP_WINDOW)   return getScreenForPoint(w.getX() + w.getWidth() / 2,w.getY() + w.getHeight() / 2).getBounds();
 else {
    List<Screen> ss=Screen.getScreens();
    Screen l=min(ss,ps,by(a -> a.getBounds().getMinX()));
    Screen r=max(ss,ps,by(a -> a.getBounds().getMaxX()));
switch (pos) {
case Screen_Bottom_Left:
case Screen_Top_Left:
      return l.getBounds();
case Screen_Bottom_Right:
case Screen_Top_Right:
    return r.getBounds();
case Screen_Center:
{
    Screen t=min(ss,ps,by(a -> a.getBounds().getMinY()));
    Screen b=max(ss,ps,by(a -> a.getBounds().getMaxY()));
    return new Rectangle2D(l.getBounds().getMinX(),t.getBounds().getMinY(),r.getBounds().getMaxX() - l.getBounds().getMinX(),b.getBounds().getMaxY() - t.getBounds().getMinY());
  }
default :
return null;
}
}
}","/** 
 * Returns rectangular screen area 
 */
public Rectangle2D getScreenArea(Window w,ScreenPos pos){
  Screen ps=Screen.getPrimary();
  if (this == MAIN)   return ps.getBounds();
  if (this == APP_WINDOW)   return getScreenForPoint(w.getX() + w.getWidth() / 2,w.getY() + w.getHeight() / 2).getBounds();
 else {
    List<Screen> ss=Screen.getScreens();
    Screen l=min(ss,ps,by(a -> a.getBounds().getMinX()));
    Screen r=max(ss,ps,by(a -> a.getBounds().getMaxX()));
switch (pos) {
case Screen_Bottom_Left:
case Screen_Top_Left:
      return l.getBounds();
case Screen_Bottom_Right:
case Screen_Top_Right:
    return r.getBounds();
case Screen_Center:
{
    Screen t=min(ss,ps,by(a -> a.getBounds().getMinY()));
    Screen b=max(ss,ps,by(a -> a.getBounds().getMaxY()));
    return new Rectangle2D(l.getBounds().getMinX(),t.getBounds().getMinY(),r.getBounds().getMaxX() - l.getBounds().getMinX(),b.getBounds().getMaxY() - t.getBounds().getMinY());
  }
default :
return null;
}
}
}",0.9964485032978184
36583,"public NodeCentricPos reverse(){
switch (this) {
case Center:
    return Center;
case UpLeft:
  return DownRight;
case UpCenter:
return DownCenter;
case UpRight:
return DownLeft;
case DownLeft:
return UpRight;
case DownCenter:
return UpCenter;
case DownRight:
return UpLeft;
case RightUp:
return LeftDown;
case RightCenter:
return LeftCenter;
case RightDown:
return LeftUp;
case LeftUp:
return RightDown;
case LeftCenter:
return RightCenter;
case LeftDown:
return RightUp;
default :
throw new AssertionError(this + ""String_Node_Str"");
}
}","public NodePos reverse(){
switch (this) {
case Center:
    return Center;
case UpLeft:
  return DownRight;
case UpCenter:
return DownCenter;
case UpRight:
return DownLeft;
case DownLeft:
return UpRight;
case DownCenter:
return UpCenter;
case DownRight:
return UpLeft;
case RightUp:
return LeftDown;
case RightCenter:
return LeftCenter;
case RightDown:
return LeftUp;
case LeftUp:
return RightDown;
case LeftCenter:
return RightCenter;
case LeftDown:
return RightUp;
default :
throw new AssertionError(this + ""String_Node_Str"");
}
}",0.9934518241347052
36584,"public static void launchComponent(File launcher){
  try {
    WidgetFactory wf=null;
    Component w=null;
    String wn=FileUtil.readFileLines(launcher).limit(1).findAny().orElse(""String_Node_Str"");
    wf=WidgetManager.getFactory(wn);
    if (wf != null)     w=wf.create();
    if (w == null) {
      try {
        w=(Component)App.INSTANCE.serialization.x.fromXML(launcher);
      }
 catch (      ClassCastException|StreamException ignored) {
        LOGGER.error(""String_Node_Str"",launcher);
      }
    }
    if (w == null) {
      wf=WidgetManager.getFactory(getName(launcher));
      if (wf != null)       w=wf.create();
    }
    if (w != null) {
      if (launching1st) {
        App.getWindow().setContent(w);
        launching1st=false;
      }
 else {
        showWindow(w);
      }
    }
  }
 catch (  Exception x) {
    LOGGER.error(""String_Node_Str"",x);
  }
}","public static void launchComponent(File launcher){
  try {
    WidgetFactory wf=null;
    Component w=null;
    String wn=FileUtil.readFileLines(launcher).limit(1).findAny().orElse(""String_Node_Str"");
    wf=WidgetManager.getFactory(wn);
    if (wf != null)     w=wf.create();
    if (w == null) {
      try {
        w=(Component)App.INSTANCE.serialization.x.fromXML(launcher);
      }
 catch (      ClassCastException|StreamException ignored) {
        LOGGER.error(""String_Node_Str"",launcher);
      }
    }
    if (w == null) {
      wf=WidgetManager.getFactory(getName(launcher));
      if (wf != null)       w=wf.create();
    }
    if (w != null) {
      if (launching1st) {
        App.getWindow().setContent(w);
        launching1st=false;
      }
 else {
        showWindow(w);
      }
    }
  }
 catch (  Exception x) {
    LOGGER.error(""String_Node_Str"",launcher,x);
  }
}",0.9948834565093804
36585,"/** 
 * Initializes the controller class.
 */
private void initialize(){
  getStage().setScene(new Scene(root));
  getStage().getScene().setFill(Color.rgb(0,0,0,0.01));
  getStage().setOpacity(windowOpacity.getValue());
  Rectangle mask=new Rectangle(1,1,BLACK);
  mask.widthProperty().bind(content.widthProperty());
  mask.heightProperty().bind(content.heightProperty());
  content.setClip(mask);
  s.setOnCloseRequest(e -> close());
  s.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH);
  s.addEventHandler(KEY_PRESSED,e -> {
    if (e.getCode() == ESCAPE && isFullscreen()) {
      setFullscreen(false);
      e.consume();
    }
  }
);
  focused.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcFocused,nv));
  resizing.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcResized,nv != NONE));
  moving.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcMoved,nv));
  fullscreen.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcFullscreen,nv));
  Action.getActions().stream().filter(a -> !a.isGlobal() && a.hasKeysAssigned()).forEach(a -> a.registerInScene(s.getScene()));
  root.addEventFilter(MOUSE_PRESSED,e -> UiContext.setPressedXY(e.getSceneX(),e.getSceneY()));
  root.addEventFilter(MOUSE_CLICKED,e -> UiContext.fireAppMouseClickEvent(this,e));
  header.addEventHandler(DRAG_DETECTED,this::moveStart);
  header.addEventHandler(MOUSE_DRAGGED,this::moveDo);
  header.addEventHandler(MOUSE_RELEASED,this::moveEnd);
  header.setMouseTransparent(false);
  header.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY)     if (e.getClickCount() == 2)     toggleMaximize();
    if (e.getButton() == SECONDARY)     if (e.getClickCount() == 2)     setHeaderVisible(!headerVisible);
  }
);
  header_activator.addEventFilter(MOUSE_ENTERED,e -> {
    if (!headerVisible)     applyHeaderVisible(true);
  }
);
  header.addEventFilter(MOUSE_EXITED_TARGET,e -> {
    if (!headerVisible && !moving.get() && resizing.get() == NONE && e.getSceneY() > 20)     applyHeaderVisible(false);
  }
);
  titleL.setMinWidth(0);
  root.setOnScroll(e -> {
    if (e.getDeltaY() > 0)     PLAYBACK.volumeInc();
 else     if (e.getDeltaY() < 0)     PLAYBACK.volumeDec();
  }
);
  root.addEventFilter(KeyEvent.ANY,e -> {
    if (e.getCode().equals(Action.Shortcut_ALTERNATE)) {
      GUI.setLayoutMode(e.getEventType().equals(KEY_PRESSED));
      if (e.getEventType().equals(KEY_PRESSED))       IOPane.drawWidgetIO();
    }
  }
);
  Icon gitB=new Icon(GITHUB,13,Action.get(""String_Node_Str""));
  Icon cssB=new Icon(CSS3,13,Action.get(""String_Node_Str""));
  Icon iconsB=new Icon(IMAGE,13,Action.get(""String_Node_Str""));
  Icon dirB=new Icon(FOLDER,13,Action.get(""String_Node_Str""));
  Icon propB=new Icon(GEARS,13,Action.get(""String_Node_Str""));
  Icon runB=new Icon(GAVEL,13,Action.get(""String_Node_Str""));
  Icon layB=new Icon(COLUMNS,13,Action.get(""String_Node_Str""));
  Icon lastFMB=new Icon<>(null,13,""String_Node_Str"" + ""String_Node_Str"",e -> {
    Node b=(Node)e.getSource();
    if (e.getButton() == PRIMARY)     if (LastFM.getScrobblingEnabled())     LastFM.toggleScrobbling();
 else     if (LastFM.isLoginSuccess())     LastFM.toggleScrobbling();
 else     new PopOver(""String_Node_Str"",LastFM.getLastFMconfig()).show(b);
 else     if (e.getButton() == SECONDARY)     new PopOver(""String_Node_Str"",LastFM.getLastFMconfig()).show(b);
  }
);
  maintain(LastFM.scrobblingEnabledProperty(),mapB(LASTFM_SQUARE,LASTFM),lastFMB::icon);
  lastFMB.setDisable(true);
  Icon lockB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",GUI::toggleLayoutLocked);
  maintain(GUI.layoutLockedProperty(),mapB(LOCK,UNLOCK),lockB::icon);
  Icon lmB=new Icon(null,13,Action.get(""String_Node_Str""));
  Icon ltB=new Icon(CARET_LEFT,13,""String_Node_Str"",() -> ((SwitchPane)getSwitchPane()).alignLeftTab());
  Icon rtB=new Icon(CARET_RIGHT,13,""String_Node_Str"",() -> ((SwitchPane)getSwitchPane()).alignRightTab());
  maintain(GUI.layout_mode,mapB(TH,TH_LARGE),lmB::icon);
  Icon guideB=new Icon(GRADUATION_CAP,13,""String_Node_Str"",e -> {
    App.guide.resume();
    App.actionStream.push(""String_Node_Str"");
  }
);
  Icon helpB=createInfoIcon(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  leftHeaderBox.getChildren().addAll(gitB,cssB,dirB,iconsB,new Label(""String_Node_Str""),layB,propB,runB,lastFMB,new Label(""String_Node_Str""),ltB,lockB,lmB,rtB,new Label(""String_Node_Str""),guideB,helpB);
  Icon miniB=new Icon(null,13,Action.get(""String_Node_Str""));
  maintain(miniB.hoverProperty(),mapB(ANGLE_DOUBLE_UP,ANGLE_UP),miniB::icon);
  Icon ontopB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"",this::toggleAlwaysOnTOp);
  maintain(alwaysOnTop,mapB(SQUARE,SQUARE_ALT),ontopB::icon);
  Icon fullscrB=new Icon(null,17,""String_Node_Str"" + ""String_Node_Str"",this::toggleFullscreen);
  maintain(fullscreen,mapB(FULLSCREEN_EXIT,FULLSCREEN),fullscrB::icon);
  Icon minimB=new Icon(WINDOW_MINIMIZE,13,""String_Node_Str"",this::toggleMinimize);
  Icon maximB=new Icon(WINDOW_MAXIMIZE,13,""String_Node_Str"",this::toggleMaximize);
  Icon closeB=new Icon(CLOSE,13,""String_Node_Str"" + ""String_Node_Str"",this::close);
  rightHeaderBox.getChildren().addAll(miniB,ontopB,fullscrB,minimB,maximB,closeB);
}","/** 
 * Initializes the controller class.
 */
private void initialize(){
  getStage().setScene(new Scene(root));
  getStage().getScene().setFill(Color.rgb(0,0,0,0.01));
  getStage().setOpacity(windowOpacity.getValue());
  Rectangle mask=new Rectangle(1,1,BLACK);
  mask.widthProperty().bind(content.widthProperty());
  mask.heightProperty().bind(content.heightProperty());
  content.setClip(mask);
  s.setOnCloseRequest(e -> close());
  s.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH);
  s.addEventHandler(KEY_PRESSED,e -> {
    if (e.getCode() == ESCAPE && isFullscreen()) {
      setFullscreen(false);
      e.consume();
    }
  }
);
  focused.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcFocused,nv));
  resizing.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcResized,nv != NONE));
  moving.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcMoved,nv));
  fullscreen.addListener((o,ov,nv) -> root.pseudoClassStateChanged(pcFullscreen,nv));
  Action.getActions().stream().filter(a -> !a.isGlobal() && a.hasKeysAssigned()).forEach(a -> a.registerInScene(s.getScene()));
  root.addEventFilter(MOUSE_PRESSED,e -> UiContext.setPressedXY(e.getSceneX(),e.getSceneY()));
  root.addEventFilter(MOUSE_CLICKED,e -> UiContext.fireAppMouseClickEvent(this,e));
  header.addEventHandler(DRAG_DETECTED,this::moveStart);
  header.addEventHandler(MOUSE_DRAGGED,this::moveDo);
  header.addEventHandler(MOUSE_RELEASED,this::moveEnd);
  header.setMouseTransparent(false);
  header.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY)     if (e.getClickCount() == 2)     toggleMaximize();
    if (e.getButton() == SECONDARY)     if (e.getClickCount() == 2)     setHeaderVisible(!headerVisible);
  }
);
  header_activator.addEventFilter(MOUSE_ENTERED,e -> {
    if (!headerVisible)     applyHeaderVisible(true);
  }
);
  header.addEventFilter(MOUSE_EXITED_TARGET,e -> {
    if (!headerVisible && !moving.get() && resizing.get() == NONE && e.getSceneY() > 20)     applyHeaderVisible(false);
  }
);
  titleL.setMinWidth(0);
  root.setOnScroll(e -> {
    if (e.getDeltaY() > 0)     PLAYBACK.volumeInc();
 else     if (e.getDeltaY() < 0)     PLAYBACK.volumeDec();
  }
);
  root.addEventFilter(KeyEvent.ANY,e -> {
    if (e.getCode().equals(Action.Shortcut_ALTERNATE)) {
      GUI.setLayoutMode(e.getEventType().equals(KEY_PRESSED));
      if (e.getEventType().equals(KEY_PRESSED))       IOPane.drawWidgetIO();
    }
  }
);
  Icon gitB=new Icon(GITHUB,13,Action.get(""String_Node_Str""));
  Icon cssB=new Icon(CSS3,13,Action.get(""String_Node_Str""));
  Icon iconsB=new Icon(IMAGE,13,Action.get(""String_Node_Str""));
  Icon dirB=new Icon(FOLDER,13,Action.get(""String_Node_Str""));
  Icon propB=new Icon(GEARS,13,Action.get(""String_Node_Str""));
  Icon runB=new Icon(GAVEL,13,Action.get(""String_Node_Str""));
  Icon layB=new Icon(COLUMNS,13,Action.get(""String_Node_Str""));
  Icon lastFMB=new Icon<>(null,13,""String_Node_Str"" + ""String_Node_Str"",e -> {
    Node b=(Node)e.getSource();
    if (e.getButton() == PRIMARY)     if (LastFM.getScrobblingEnabled())     LastFM.toggleScrobbling();
 else     if (LastFM.isLoginSuccess())     LastFM.toggleScrobbling();
 else     new PopOver(""String_Node_Str"",LastFM.getLastFMconfig()).show(b);
 else     if (e.getButton() == SECONDARY)     new PopOver(""String_Node_Str"",LastFM.getLastFMconfig()).show(b);
  }
);
  maintain(LastFM.scrobblingEnabledProperty(),mapB(LASTFM_SQUARE,LASTFM),lastFMB::icon);
  lastFMB.setDisable(true);
  Icon lockB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",GUI::toggleLayoutLocked);
  maintain(GUI.layoutLockedProperty(),mapB(LOCK,UNLOCK),lockB::icon);
  Icon lmB=new Icon(null,13,Action.get(""String_Node_Str""));
  Icon ltB=new Icon(CARET_LEFT,13,""String_Node_Str"",() -> ((SwitchPane)getSwitchPane()).alignLeftTab());
  Icon rtB=new Icon(CARET_RIGHT,13,""String_Node_Str"",() -> ((SwitchPane)getSwitchPane()).alignRightTab());
  maintain(GUI.layout_mode,mapB(TH,TH_LARGE),lmB::icon);
  Icon guideB=new Icon(GRADUATION_CAP,13,""String_Node_Str"",() -> App.guide.open());
  Icon helpB=createInfoIcon(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  leftHeaderBox.getChildren().addAll(gitB,cssB,dirB,iconsB,new Label(""String_Node_Str""),layB,propB,runB,lastFMB,new Label(""String_Node_Str""),ltB,lockB,lmB,rtB,new Label(""String_Node_Str""),guideB,helpB);
  Icon miniB=new Icon(null,13,Action.get(""String_Node_Str""));
  maintain(miniB.hoverProperty(),mapB(ANGLE_DOUBLE_UP,ANGLE_UP),miniB::icon);
  Icon ontopB=new Icon(null,13,""String_Node_Str"" + ""String_Node_Str"",this::toggleAlwaysOnTOp);
  maintain(alwaysOnTop,mapB(SQUARE,SQUARE_ALT),ontopB::icon);
  Icon fullscrB=new Icon(null,17,""String_Node_Str"" + ""String_Node_Str"",this::toggleFullscreen);
  maintain(fullscreen,mapB(FULLSCREEN_EXIT,FULLSCREEN),fullscrB::icon);
  Icon minimB=new Icon(WINDOW_MINIMIZE,13,""String_Node_Str"",this::toggleMinimize);
  Icon maximB=new Icon(WINDOW_MAXIMIZE,13,""String_Node_Str"",this::toggleMaximize);
  Icon closeB=new Icon(CLOSE,13,""String_Node_Str"" + ""String_Node_Str"",this::close);
  rightHeaderBox.getChildren().addAll(miniB,ontopB,fullscrB,minimB,maximB,closeB);
}",0.9931705491626908
36586,"public Subscription monitor(Consumer<? super T> action){
  monitors.add(action);
  if (getValue() != null)   action.accept(getValue());
  return () -> monitors.remove(action);
}","public Subscription monitor(Consumer<? super T> action){
  monitors.add(action);
  action.accept(getValue());
  return () -> monitors.remove(action);
}",0.9207317073170732
36587,"@Override public void init(){
  out_sel=outputs.create(widget.id,""String_Node_Str"",MetadataGroup.class,null);
  out_sel_met=outputs.create(widget.id,""String_Node_Str"",List.class,EMPTY_LIST);
  in_items=inputs.create(""String_Node_Str"",List.class,EMPTY_LIST,this::setItems);
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(VALUE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(f.toString(mf));
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType(mf).equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == AVG_RATING ? (Callback)App.ratingCell.getValue() : f == W_RATING ? (Callback)new NumberRatingCellFactory() : (Callback)col -> {
      TableCell cel=table.buildDefaultCell(f);
      cel.setAlignment(a);
      return cel;
    }
);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<MetadataGroup>().styleRuleAdd(""String_Node_Str"",mg -> Player.playingtem.get().getField(fieldFilter.getValue()).equals(mg.getValue())).onLeftDoubleClick((row,e) -> playSelected()).onRightSingleClick((row,e) -> {
    if (!row.isSelected())     tbl.getSelectionModel().clearAndSelect(row.getIndex());
    contxt_menu.show(this,(TableView)table,e);
  }
));
  d(Player.playingtem.onUpdate(m -> table.updateStyleRules()));
  Menu m=(Menu)table.columnVisibleMenu.getItems().stream().filter(i -> i.getText().equals(""String_Node_Str"")).findFirst().get();
  Stream.of(Field.values()).sorted(by(f -> f.name())).map(f -> new SelectionMenuItem(f.toStringEnum(),false){
{
      this.setOnMouseClicked(() -> {
        if (!selected.get()) {
          m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(false));
          selected.set(true);
          fieldFilter.setNapplyValue(f);
        }
      }
);
    }
  }
).forEach(m.getItems()::add);
  table.columnVisibleMenu.addEventHandler(WINDOW_SHOWN,e -> m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(fieldFilter.getValue().toStringEnum().equals(mi.getText()))));
  table.setOnKeyPressed(e -> {
    if (e.getCode() == ENTER)     playSelected();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(filerListToSelectedNsort(),db,true);
    }
    e.consume();
  }
);
  table.setColumnResizePolicy(resize -> {
    FilteredTable<MetadataGroup,MetadataGroup.Field> t=(FilteredTable)resize.getTable();
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    t.getColumn(ColumnField.INDEX).ifPresent(i -> i.setPrefWidth(t.calculateIndexColumnWidth()));
    t.getColumn(VALUE).ifPresent(c -> {
      double Σw=t.getColumns().stream().filter(TableColumn::isVisible).mapToDouble(TableColumn::getWidth).sum();
      double itemsHeight=(t.getItems().size() + 1) * t.getFixedCellSize();
      double scrollbar=itemsHeight < t.getHeight() ? 0 : 15;
      c.setPrefWidth(t.getWidth() - (scrollbar + Σw - c.getWidth()));
    }
);
    return b;
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> out_sel.setValue(nv));
  EventStreams.changesOf(table.getSelectedItems()).reduceSuccessions((a,b) -> b,ofMillis(60)).subscribe(c -> {
    if (!sel_lock)     out_sel_met.setValue(filerList(in_items.getValue(),true,false));
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> {
    if (!sel_lock)     sel_last=nv == null ? ""String_Node_Str"" : nv.getField().toS(nv.getValue(),""String_Node_Str"");
  }
);
  table.setOnScroll(Event::consume);
}","@Override public void init(){
  out_sel=outputs.create(widget.id,""String_Node_Str"",MetadataGroup.class,null);
  out_sel_met=outputs.create(widget.id,""String_Node_Str"",List.class,EMPTY_LIST);
  in_items=inputs.create(""String_Node_Str"",List.class,EMPTY_LIST,this::setItems);
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(VALUE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(f.toString(mf));
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType(mf).equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == AVG_RATING ? (Callback)App.ratingCell.getValue() : f == W_RATING ? (Callback)new NumberRatingCellFactory() : (Callback)col -> {
      TableCell cel=table.buildDefaultCell(f);
      cel.setAlignment(a);
      return cel;
    }
);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<MetadataGroup>().styleRuleAdd(""String_Node_Str"",mg -> Player.playingtem.get().getField(fieldFilter.getValue()).equals(mg.getValue())).onLeftDoubleClick((row,e) -> playSelected()).onRightSingleClick((row,e) -> {
    if (!row.isSelected())     tbl.getSelectionModel().clearAndSelect(row.getIndex());
    contxt_menu.show(this,(TableView)table,e);
  }
));
  d(Player.playingtem.onUpdate(m -> table.updateStyleRules()));
  Menu m=(Menu)table.columnVisibleMenu.getItems().stream().filter(i -> i.getText().equals(""String_Node_Str"")).findFirst().get();
  Stream.of(Field.values()).sorted(by(f -> f.name())).map(f -> new SelectionMenuItem(f.toStringEnum(),false){
{
      this.setOnMouseClicked(() -> {
        if (!selected.get()) {
          m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(false));
          selected.set(true);
          fieldFilter.setNapplyValue(f);
        }
      }
);
    }
  }
).forEach(m.getItems()::add);
  table.columnVisibleMenu.addEventHandler(WINDOW_SHOWN,e -> m.getItems().forEach(mi -> ((SelectionMenuItem)mi).selected.set(fieldFilter.getValue().toStringEnum().equals(mi.getText()))));
  table.setOnKeyPressed(e -> {
    if (e.getCode() == ENTER)     playSelected();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(filerListToSelectedNsort(),db,true);
    }
    e.consume();
  }
);
  table.setColumnResizePolicy(resize -> {
    FilteredTable<MetadataGroup,?> t=table;
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    t.getColumn(ColumnField.INDEX).ifPresent(i -> i.setPrefWidth(t.calculateIndexColumnWidth()));
    t.getColumn(VALUE).ifPresent(c -> {
      double Σcw=t.getColumns().stream().filter(TableColumn::isVisible).mapToDouble(TableColumn::getWidth).sum();
      double sw=t.getVScrollbarWidth();
      c.setPrefWidth(t.getWidth() - (sw + Σcw - c.getWidth()));
    }
);
    return b;
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> out_sel.setValue(nv));
  EventStreams.changesOf(table.getSelectedItems()).reduceSuccessions((a,b) -> b,ofMillis(60)).subscribe(c -> {
    if (!sel_lock)     out_sel_met.setValue(filerList(in_items.getValue(),true,false));
  }
);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> {
    if (!sel_lock)     sel_last=nv == null ? ""String_Node_Str"" : nv.getField().toS(nv.getValue(),""String_Node_Str"");
  }
);
  table.setOnScroll(Event::consume);
}",0.9681570338058888
36588,"@Override public void init(){
  UUID id=getWidget().id;
  playlist=PlaylistManager.playlists.getOr(id,getUnusedPlaylist(id));
  PlaylistManager.playlists.add(playlist);
  d(() -> PlaylistManager.playlists.remove(playlist));
  outSelected=outputs.create(widget.id,""String_Node_Str"",Item.class,null);
  outPlaying=outputs.create(widget.id,""String_Node_Str"",Item.class,null);
  d(Player.playlistSelected.i.bind(outSelected));
  d(maintain(playlist.playingI,ι -> playlist.getPlaying(),outPlaying));
  d(Player.onItemRefresh(ms -> {
    if (outPlaying.getValue() != null)     ms.ifHasK(outPlaying.getValue().getURI(),m -> outPlaying.setValue(m.toPlaylist()));
    if (outSelected.getValue() != null)     ms.ifHasK(outSelected.getValue().getURI(),m -> outSelected.setValue(m.toPlaylist()));
  }
));
  table=new PlaylistTable(playlist);
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(gui.GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.items_info.textFactory=(all,list) -> {
    double Σms=list.stream().mapToDouble(PlaylistItem::getTimeMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(Σms);
  }
;
  table.menuAdd.getItems().addAll(menuItem(""String_Node_Str"",PlaylistManager::chooseFilestoAdd),menuItem(""String_Node_Str"",PlaylistManager::chooseFoldertoAdd),menuItem(""String_Node_Str"",PlaylistManager::chooseUrltoAdd),menuItem(""String_Node_Str"",PlaylistManager::chooseFilesToPlay),menuItem(""String_Node_Str"",PlaylistManager::chooseFolderToPlay),menuItem(""String_Node_Str"",PlaylistManager::chooseUrlToPlay),menuItem(""String_Node_Str"",() -> playlist.duplicateItemsByOne(table.getSelectedItems())),menuItem(""String_Node_Str"",() -> playlist.duplicateItemsAsGroup(table.getSelectedItems())));
  table.menuRemove.getItems().addAll(menuItem(""String_Node_Str"",() -> playlist.removeAll(table.getSelectedItems())),menuItem(""String_Node_Str"",() -> playlist.retainAll(table.getSelectedItems())),menuItem(""String_Node_Str"",playlist::removeUnplayable),menuItem(""String_Node_Str"",playlist::removeDuplicates),menuItem(""String_Node_Str"",playlist::clear));
  table.menuOrder.getItems().addAll(menuItem(""String_Node_Str"",playlist::reverse),menuItem(""String_Node_Str"",playlist::randomize),menuItem(""String_Node_Str"",() -> WidgetManager.use(SongReader.class,NO_LAYOUT,w -> w.read(table.getSelectedItems()))),menuItem(""String_Node_Str"",this::saveSelectedAsPlaylist),menuItem(""String_Node_Str"",this::savePlaylist));
  Menu sortM=new Menu(""String_Node_Str"");
  for (  Field f : Field.values())   sortM.getItems().add(menuItem(f.toStringEnum(),() -> table.sortBy(f)));
  table.menuOrder.getItems().add(0,sortM);
  root.setOnScroll(Event::consume);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> outSelected.setValue(nv));
  d(table::dispose);
}","@Override public void init(){
  UUID id=getWidget().id;
  playlist=PlaylistManager.playlists.getOr(id,getUnusedPlaylist(id));
  PlaylistManager.playlists.add(playlist);
  d(() -> PlaylistManager.playlists.remove(playlist));
  outSelected=outputs.create(widget.id,""String_Node_Str"",Item.class,null);
  outPlaying=outputs.create(widget.id,""String_Node_Str"",Item.class,null);
  d(Player.playlistSelected.i.bind(outSelected));
  d(maintain(playlist.playingI,ι -> playlist.getPlaying(),outPlaying));
  d(Player.onItemRefresh(ms -> {
    if (outPlaying.getValue() != null)     ms.ifHasK(outPlaying.getValue().getURI(),m -> outPlaying.setValue(m.toPlaylist()));
    if (outSelected.getValue() != null)     ms.ifHasK(outSelected.getValue().getURI(),m -> outSelected.setValue(m.toPlaylist()));
  }
));
  table=new PlaylistTable(playlist);
  root.getChildren().add(table.getRoot());
  setAnchors(table.getRoot(),0d);
  table.setFixedCellSize(gui.GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  d(maintain(orient,table.nodeOrientationProperty()));
  d(maintain(zeropad,table.zeropadIndex));
  d(maintain(orig_index,table.showOriginalIndex));
  d(maintain(show_header,table.headerVisible));
  d(maintain(show_footer,table.footerVisible));
  table.items_info.textFactory=(all,list) -> {
    double Σms=list.stream().mapToDouble(PlaylistItem::getTimeMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(Σms);
  }
;
  table.menuAdd.getItems().addAll(menuItem(""String_Node_Str"",PlaylistManager::chooseFilestoAdd),menuItem(""String_Node_Str"",PlaylistManager::chooseFoldertoAdd),menuItem(""String_Node_Str"",PlaylistManager::chooseUrltoAdd),menuItem(""String_Node_Str"",PlaylistManager::chooseFilesToPlay),menuItem(""String_Node_Str"",PlaylistManager::chooseFolderToPlay),menuItem(""String_Node_Str"",PlaylistManager::chooseUrlToPlay),menuItem(""String_Node_Str"",() -> playlist.duplicateItemsByOne(table.getSelectedItems())),menuItem(""String_Node_Str"",() -> playlist.duplicateItemsAsGroup(table.getSelectedItems())));
  table.menuRemove.getItems().addAll(menuItem(""String_Node_Str"",() -> playlist.removeAll(table.getSelectedItems())),menuItem(""String_Node_Str"",() -> playlist.retainAll(table.getSelectedItems())),menuItem(""String_Node_Str"",playlist::removeUnplayable),menuItem(""String_Node_Str"",playlist::removeDuplicates),menuItem(""String_Node_Str"",playlist::clear));
  table.menuOrder.getItems().addAll(menuItem(""String_Node_Str"",playlist::reverse),menuItem(""String_Node_Str"",playlist::randomize),menuItem(""String_Node_Str"",() -> WidgetManager.use(SongReader.class,NO_LAYOUT,w -> w.read(table.getSelectedItems()))),menuItem(""String_Node_Str"",this::saveSelectedAsPlaylist),menuItem(""String_Node_Str"",this::savePlaylist));
  Menu sortM=new Menu(""String_Node_Str"");
  for (  Field f : Field.values())   sortM.getItems().add(menuItem(f.toStringEnum(),() -> table.sortBy(f)));
  table.menuOrder.getItems().add(0,sortM);
  root.setOnScroll(Event::consume);
  table.getSelectionModel().selectedItemProperty().addListener((o,ov,nv) -> {
    if (!table.movingitems)     outSelected.setValue(nv);
  }
);
  d(table::dispose);
}",0.9936828806064436
36589,"private void showWarnButton(boolean val){
  n.setRight(val ? warnB : null);
  warnB.setVisible(val);
}","private void showWarnButton(boolean val){
  n.setRight(val ? warnB : null);
  warnB.setVisible(val);
  if (val)   warnTooltip.setText(Parser.getError());
}",0.7937743190661478
36590,"@Override protected void generateValue(){
  if (inconsistent_state || converter == null)   return;
  conjuction=chain.stream().filter(g -> g.on.get()).map(g -> g.chained.getValue()).filter(ISNTØ).map(g -> converter.apply(g._2,g._1)).reduce(Predicate::and).orElse(isTRUE);
  if (onFilterChange != null)   onFilterChange.accept(conjuction);
}","@Override protected void generateValue(){
  if (inconsistent_state || converter == null)   return;
  conjuction=chain.stream().filter(g -> g.on.get()).map(g -> g.chained.getValue()).filter(ISNTØ).map(g -> converter.apply(g._2,g._1)).reduce(Predicate::and).orElse(ALL);
  if (onFilterChange != null)   onFilterChange.accept(conjuction);
}",0.9867060561299852
36591,"public PredicateChainItemNode(int i,Supplier<PredicateItemNode<F>> chainedFactory){
  super(i,chainedFactory);
  conjuction=isTRUE;
}","public PredicateChainItemNode(int i,Supplier<PredicateItemNode<F>> chainedFactory){
  super(i,chainedFactory);
  conjuction=ALL;
}",0.9657794676806084
36592,"public void clear(){
  empty=true;
  value=tuple(isTRUE,prefTypeSupplier.get()._3);
}","public void clear(){
  empty=true;
  value=tuple(ALL,prefTypeSupplier.get()._3);
}",0.9461077844311376
36593,"/** 
 * PRIVATE 
 */
private void updateComparator(Object ignored){
  Comparator<T> c=getSortOrder().stream().map(column -> {
    F f=(F)column.getUserData();
    int type=column.getSortType() == ASCENDING ? 1 : -1;
    return (Comparator<T>)(m1,m2) -> type * ((Comparable)m1.getField(f)).compareTo((m2.getField(f)));
  }
).reduce(Comparator::thenComparing).orElse((a,b) -> 0);
  itemsComparator.setValue(c);
}","/** 
 * PRIVATE 
 */
private void updateComparator(Object ignored){
  Comparator<T> c=getSortOrder().stream().map(column -> {
    F f=(F)column.getUserData();
    int type=column.getSortType() == ASCENDING ? 1 : -1;
    return (Comparator<T>)(m1,m2) -> type * ((Comparable)m1.getField(f)).compareTo((m2.getField(f)));
  }
).reduce(Comparator::thenComparing).orElse(SAME);
  itemsComparator.setValue(c);
}",0.9828009828009828
36594,"/** 
 * Sorts items using provided comparator. Any sort order is cleared.
 * @param comparator 
 */
public void sort(Comparator<T> comparator){
  getSortOrder().clear();
  allitems.sorted(comparator);
}","/** 
 * Sorts items using provided comparator. Any sort order is cleared.
 * @param comparator 
 */
public void sort(Comparator<T> comparator){
  getSortOrder().clear();
  allitems.sort(comparator);
}",0.9950248756218906
36595,"/** 
 * @param main_field field that will denote main column. Must not be null.Also initializes  {@link #searchField}.
 * @param main_field be chosen as main and default search field
 * @param backing_list
 */
public FilteredTable(F main_field,ObservableList<T> backing_list){
  super((Class<F>)main_field.getClass());
  searchField=main_field;
  allitems=backing_list;
  filtereditems=new FilteredList<>(allitems);
  sortedItems=new SortedList<>(filtereditems);
  itemsPredicate=filtereditems.predicateProperty();
  setItems(sortedItems);
  sortedItems.comparatorProperty().bind(comparatorProperty());
  VBox.setVgrow(this,ALWAYS);
  items_info.bind(this);
  sizeOf(menuAdd.getItems(),size -> menuAdd.setDisable(size == 0));
  sizeOf(menuRemove.getItems(),size -> menuRemove.setDisable(size == 0));
  sizeOf(menuSelected.getItems(),size -> menuSelected.setDisable(size == 0));
  sizeOf(menuOrder.getItems(),size -> menuOrder.setDisable(size == 0));
  filterPane=new TableFilterGenerator(filtereditems,main_field);
  filterPane.getNode().setVisible(false);
  filterPane.getNode().addEventFilter(KEY_PRESSED,e -> {
    if (e.getCode() == ESCAPE) {
      if (filterPane.isEmpty())       filterVisible.set(false);
 else       filterPane.clear();
      e.consume();
    }
    if (e.getCode() == F && e.isShortcutDown()) {
      filterVisible.set(false);
      requestFocus();
    }
  }
);
  addEventHandler(KEY_PRESSED,e -> {
    if (e.getCode() == F && e.isShortcutDown()) {
      filterVisible.set(!filterVisible.get());
      if (!filterVisible.get())       requestFocus();
      return;
    }
    if (e.isAltDown() || e.isControlDown() || e.isShiftDown())     return;
    KeyCode k=e.getCode();
    if (k == ESCAPE) {
      if (filterPane.isEmpty())       filterVisible.set(false);
 else       filterPane.clear();
      e.consume();
    }
    if (k.isDigitKey() || k.isLetterKey()) {
      String st=e.getText().toLowerCase();
      long now=System.currentTimeMillis();
      boolean append=scrolFTime == -1 || now - scrolFTime < scrolFTimeMax.toMillis();
      scrolFtext=append ? scrolFtext + st : st;
      scrolFTime=now;
      search(scrolFtext);
    }
  }
);
  addEventFilter(KEY_PRESSED,e -> {
    if (e.getCode() == ESCAPE && !scrolFtext.isEmpty()) {
      searchEnd();
      e.consume();
    }
  }
);
  addEventFilter(Event.ANY,e -> updateSearchStyles());
  changesOf(getItems()).subscribe(c -> updateSearchStyles());
  changesOf(filtereditems.predicateProperty()).subscribe(c -> resizeIndexColumn());
  changesOf(allitems).subscribe(c -> resizeIndexColumn());
  footerVisible.set(true);
}","/** 
 * @param main_field field that will denote main column. Must not be null.Also initializes  {@link #searchField}.
 * @param main_field be chosen as main and default search field
 * @param backing_list
 */
public FilteredTable(F main_field,ObservableList<T> backing_list){
  super((Class<F>)main_field.getClass());
  searchField=main_field;
  allitems=backing_list;
  filtereditems=new FilteredList<>(allitems);
  sortedItems=new SortedList<>(filtereditems);
  itemsPredicate=filtereditems.predicateProperty();
  setItems(sortedItems);
  sortedItems.comparatorProperty().bind(comparatorProperty());
  VBox.setVgrow(this,ALWAYS);
  items_info.bind(this);
  sizeOf(menuAdd.getItems(),size -> menuAdd.setDisable(size == 0));
  sizeOf(menuRemove.getItems(),size -> menuRemove.setDisable(size == 0));
  sizeOf(menuSelected.getItems(),size -> menuSelected.setDisable(size == 0));
  sizeOf(menuOrder.getItems(),size -> menuOrder.setDisable(size == 0));
  filterPane=new TableFilterGenerator(filtereditems,main_field);
  filterPane.getNode().setVisible(false);
  filterPane.getNode().addEventFilter(KEY_PRESSED,e -> {
    if (e.getCode() == ESCAPE) {
      if (filterPane.isEmpty())       filterVisible.set(false);
 else       filterPane.clear();
      e.consume();
    }
    if (e.getCode() == F && e.isShortcutDown()) {
      filterVisible.set(false);
      requestFocus();
    }
  }
);
  addEventHandler(KEY_PRESSED,e -> {
    if (e.getCode() == F && e.isShortcutDown()) {
      filterVisible.set(!filterVisible.get());
      if (!filterVisible.get())       requestFocus();
      return;
    }
    if (e.isAltDown() || e.isControlDown() || e.isShiftDown())     return;
    KeyCode k=e.getCode();
    if (k == ESCAPE) {
      if (filterPane.isEmpty())       filterVisible.set(false);
 else       filterPane.clear();
      e.consume();
    }
    if (k.isDigitKey() || k.isLetterKey()) {
      String st=e.getText().toLowerCase();
      long now=System.currentTimeMillis();
      boolean append=scrolFTime == -1 || now - scrolFTime < scrolFTimeMax.toMillis();
      scrolFtext=append ? scrolFtext + st : st;
      scrolFTime=now;
      search(scrolFtext);
    }
  }
);
  addEventFilter(KEY_PRESSED,e -> {
    if (e.getCode() == ESCAPE && !scrolFtext.isEmpty()) {
      searchEnd();
      e.consume();
    }
  }
);
  addEventFilter(Event.ANY,e -> updateSearchStyles());
  changesOf(getItems()).subscribe(c -> updateSearchStyles());
  changesOf(getItems()).subscribe(c -> resizeIndexColumn());
  footerVisible.set(true);
}",0.98083691826359
36596,"public PlaylistTable(Playlist playlist){
  super(NAME,playlist);
  playlist.setTransformation(getItems());
  VBox.setVgrow(this,Priority.ALWAYS);
  setFixedCellSize(GUI.font.getValue().getSize() + 5);
  getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
  setColumnStateFacory(f -> {
    boolean visible=f == NAME || f == LENGTH;
    return new ColumnInfo(f.toString(),f.ordinal(),visible,60);
  }
);
  setColumnFactory(f -> {
    TableColumn<PlaylistItem,?> c=new TableColumn(f.toString());
    c.setCellValueFactory(f == NAME || f == LENGTH ? new PropertyValueFactory(f.name().toLowerCase()) : cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    c.setCellFactory((Callback)col -> buildDefaultCell(f));
    c.setResizable(true);
    return c;
  }
);
  setColumnState(getDefaultColumnInfo());
  columnName=(TableColumn)getColumn(NAME).get();
  columnTime=(TableColumn)getColumn(LENGTH).get();
  setRowFactory(t -> new ImprovedTableRow<PlaylistItem>(){
{
      setOnMousePressed(e -> last=e.getScreenY());
      setOnMouseReleased(e -> {
        if (getItem() == null)         selectNone();
      }
);
      onLeftDoubleClick((r,e) -> getPlaylist().playItem(r.getItem()));
      onRightSingleClick((r,e) -> {
        if (!isSelected())         getSelectionModel().clearAndSelect(getIndex());
        contxt_menu.show(PlaylistTable.this,e);
      }
);
      setOnDragDropped(e -> dropDrag(e,isEmpty() ? getItems().size() : getIndex()));
      styleRuleAdd(""String_Node_Str"",p -> getPlaylist().isItemPlaying(p));
      styleRuleAdd(""String_Node_Str"",PlaylistItem::isCorruptCached);
    }
  }
);
  d1=Player.playingtem.onChange(o -> refreshColumn(columnIndex));
  setColumnResizePolicy(resize -> {
    if (resize != null && resize.getColumn() != null && resize.getColumn() != columnIndex) {
      if (getColumns().contains(columnName))       columnName.setPrefWidth(columnName.getWidth() - resize.getDelta());
      resize.getColumn().setPrefWidth(resize.getColumn().getWidth() + resize.getDelta());
    }
    double W=resize.getTable().getWidth();
    double W1=calculateIndexColumnWidth();
    double mt=getItems().stream().mapToDouble(PlaylistItem::getTimeMs).max().orElse(6000);
    Text t2=new Text(new FormattedDuration(mt).toString());
    t2.setFont(GUI.font.getValue());
    double W3=t2.getLayoutBounds().getWidth() + 5;
    double H=getItems().size() * getFixedCellSize();
    double S=H > getHeight() - getTableHeaderHeight() ? 15 : 0;
    double G=3;
    columnIndex.setPrefWidth(W1);
    columnTime.setPrefWidth(W3);
    List<TableColumn> cs=new ArrayList(resize.getTable().getColumns());
    TableColumn mc=isColumnVisible(NAME) ? columnName : getColumn(TITLE).orElse(null);
    if (mc != null) {
      cs.remove(mc);
      double W4=cs.stream().mapToDouble(c -> c.getWidth()).sum();
      mc.setPrefWidth(W - W4 - S- G);
    }
    return true;
  }
);
  addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  addEventHandler(MOUSE_CLICKED,e -> {
    if (headerVisible.get() && e.getY() < getTableHeaderHeight())     return;
    if (e.getButton() == PRIMARY && e.getClickCount() == 1 && getItems().isEmpty())     getPlaylist().addOrEnqueueFiles(true);
  }
);
  setOnMouseDragged(e -> {
    if (e.getButton() != MouseButton.PRIMARY || !e.isControlDown())     return;
    double h=getFixedCellSize();
    double dist=e.getScreenY() - last;
    int by=(int)(dist / h);
    if (by >= 1 || by <= -1) {
      last=e.getScreenY();
      moveSelectedItems(by);
    }
  }
);
  setOnKeyReleased(e -> {
    if (e.getCode() == KeyCode.ENTER) {
      if (!getSelectedItems().isEmpty())       getPlaylist().playItem(getSelectedItems().get(0));
    }
 else     if (e.getCode() == KeyCode.DELETE) {
      List<PlaylistItem> p=getSelectedItemsCopy();
      getSelectionModel().clearSelection();
      getPlaylist().removeAll(p);
    }
 else     if (e.getCode() == KeyCode.ESCAPE) {
      getSelectionModel().clearSelection();
    }
  }
);
  setOnKeyPressed(e -> {
    if (e.isControlDown()) {
      if (e.getCode() == KeyCode.UP) {
        moveSelectedItems(-1);
      }
 else       if (e.getCode() == KeyCode.DOWN) {
        moveSelectedItems(1);
      }
    }
  }
);
  setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !e.isControlDown() && !getSelectedItems().isEmpty() && isRowFull(getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=startDragAndDrop(TransferMode.COPY);
      DragUtil.setItemList(getSelectedItemsCopy(),db,true);
    }
    e.consume();
  }
);
  setOnDragOver_NoSelf(DragUtil.audioDragAccepthandler);
  setOnDragDropped(e -> dropDrag(e,0));
  getSelectionModel().selectedItemProperty().addListener(selItemListener);
  getSelectionModel().getSelectedItems().addListener(selItemsListener);
  setPlaceholder(new Label(""String_Node_Str""));
}","public PlaylistTable(Playlist playlist){
  super(NAME,playlist);
  playlist.setTransformation(getItems());
  VBox.setVgrow(this,Priority.ALWAYS);
  setFixedCellSize(GUI.font.getValue().getSize() + 5);
  getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
  setColumnStateFacory(f -> {
    boolean visible=f == NAME || f == LENGTH;
    return new ColumnInfo(f.toString(),f.ordinal(),visible,60);
  }
);
  setColumnFactory(f -> {
    TableColumn<PlaylistItem,?> c=new TableColumn(f.toString());
    c.setCellValueFactory(f == NAME || f == LENGTH ? new PropertyValueFactory(f.name().toLowerCase()) : cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    c.setCellFactory((Callback)col -> buildDefaultCell(f));
    c.setResizable(true);
    return c;
  }
);
  setColumnState(getDefaultColumnInfo());
  columnName=(TableColumn)getColumn(NAME).get();
  columnTime=(TableColumn)getColumn(LENGTH).get();
  setRowFactory(t -> new ImprovedTableRow<PlaylistItem>(){
{
      setOnMousePressed(e -> last=e.getScreenY());
      setOnMouseReleased(e -> {
        if (getItem() == null)         selectNone();
      }
);
      onLeftDoubleClick((r,e) -> getPlaylist().playItem(r.getItem()));
      onRightSingleClick((r,e) -> {
        if (!isSelected())         getSelectionModel().clearAndSelect(getIndex());
        contxt_menu.show(PlaylistTable.this,e);
      }
);
      setOnDragDropped(e -> dropDrag(e,isEmpty() ? getItems().size() : getIndex()));
      styleRuleAdd(""String_Node_Str"",p -> getPlaylist().isItemPlaying(p));
      styleRuleAdd(""String_Node_Str"",PlaylistItem::isCorruptCached);
    }
  }
);
  d1=Player.playingtem.onChange(o -> refreshColumn(columnIndex));
  setColumnResizePolicy(resize -> {
    if (resize != null && resize.getColumn() != null && resize.getColumn() != columnIndex) {
      if (getColumns().contains(columnName))       columnName.setPrefWidth(columnName.getWidth() - resize.getDelta());
      resize.getColumn().setPrefWidth(resize.getColumn().getWidth() + resize.getDelta());
    }
    double tw=resize.getTable().getWidth();
    double sw=getVScrollbarWidth();
    double g=3;
    double W1=calculateIndexColumnWidth();
    double mt=getItems().stream().mapToDouble(PlaylistItem::getTimeMs).max().orElse(6000);
    Text t2=new Text(new FormattedDuration(mt).toString());
    t2.setFont(GUI.font.getValue());
    double W3=t2.getLayoutBounds().getWidth() + 5;
    columnIndex.setPrefWidth(W1);
    columnTime.setPrefWidth(W3);
    List<TableColumn> cs=new ArrayList(resize.getTable().getColumns());
    TableColumn mc=isColumnVisible(NAME) ? columnName : getColumn(TITLE).orElse(null);
    if (mc != null) {
      cs.remove(mc);
      double Σcw=cs.stream().mapToDouble(c -> c.getWidth()).sum();
      mc.setPrefWidth(tw - Σcw - sw- g);
    }
    return true;
  }
);
  addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  addEventHandler(MOUSE_CLICKED,e -> {
    if (headerVisible.get() && e.getY() < getTableHeaderHeight())     return;
    if (e.getButton() == PRIMARY && e.getClickCount() == 1 && getItems().isEmpty())     getPlaylist().addOrEnqueueFiles(true);
  }
);
  setOnMouseDragged(e -> {
    if (e.getButton() != MouseButton.PRIMARY || !e.isControlDown())     return;
    if (getItems().size() != getItemsRaw().size())     return;
    if (itemsComparator.get() != SAME || !getSortOrder().isEmpty()) {
      movingitems=true;
      List l=list(getItems());
      List sl=list(getSelectionModel().getSelectedIndices());
      setItemsRaw(EMPTY_LIST);
      getSortOrder().clear();
      setItemsRaw(l);
      selectRows(sl,getSelectionModel());
      movingitems=false;
    }
    double h=getFixedCellSize();
    double dist=e.getScreenY() - last;
    int by=(int)(dist / h);
    if (by >= 1 || by <= -1) {
      last=e.getScreenY();
      moveSelectedItems(by);
    }
  }
);
  setOnKeyReleased(e -> {
    if (e.getCode() == KeyCode.ENTER) {
      if (!getSelectedItems().isEmpty())       getPlaylist().playItem(getSelectedItems().get(0));
    }
 else     if (e.getCode() == KeyCode.DELETE) {
      List<PlaylistItem> p=getSelectedItemsCopy();
      getSelectionModel().clearSelection();
      getPlaylist().removeAll(p);
    }
 else     if (e.getCode() == KeyCode.ESCAPE) {
      getSelectionModel().clearSelection();
    }
  }
);
  setOnKeyPressed(e -> {
    if (e.isControlDown()) {
      if (e.getCode() == KeyCode.UP) {
        moveSelectedItems(-1);
      }
 else       if (e.getCode() == KeyCode.DOWN) {
        moveSelectedItems(1);
      }
    }
  }
);
  setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !e.isControlDown() && !getSelectedItems().isEmpty() && isRowFull(getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=startDragAndDrop(TransferMode.COPY);
      DragUtil.setItemList(getSelectedItemsCopy(),db,true);
    }
    e.consume();
  }
);
  setOnDragOver_NoSelf(DragUtil.audioDragAccepthandler);
  setOnDragDropped(e -> dropDrag(e,0));
  getSelectionModel().selectedItemProperty().addListener(selItemListener);
  getSelectionModel().getSelectedItems().addListener(selItemsListener);
  setPlaceholder(new Label(""String_Node_Str""));
}",0.9349005424954792
36597,"@Override public void init(){
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(TITLE);
  table.setColumnStateFacory(f -> {
    double w=f == PATH || f == TITLE ? 150 : 50;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    TableColumn<Metadata,?> c=new TableColumn(f.toString());
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType().equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == RATING ? (Callback)App.ratingCell.getValue() : (Callback)p -> {
      TableCell<Metadata,Object> cell=new TableCell<Metadata,Object>(){
        @Override protected void updateItem(        Object item,        boolean empty){
          super.updateItem(item,empty);
          setText(empty ? ""String_Node_Str"" : f.toS(item,""String_Node_Str""));
        }
      }
;
      cell.setAlignment(a);
      return cell;
    }
);
    return c;
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    table.getColumn(""String_Node_Str"").ifPresent(i -> i.setPrefWidth(table.calculateIndexColumnWidth()));
    return b;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<Metadata>().onLeftDoubleClick((r,e) -> {
    Playlist p=new Playlist(map(table.getItems(),Metadata::toPlaylist));
    PlaylistManager.playPlaylistFrom(p,r.getIndex());
  }
).onRightSingleClick((r,e) -> {
    if (!r.isSelected())     tbl.getSelectionModel().clearAndSelect(r.getIndex());
    contxt_menu.show(table,e);
  }
).styleRuleAdd(""String_Node_Str"",m -> Player.playingtem.get().same(m)));
  d4=Player.playingtem.subscribeToChanges(o -> table.updateStyleRules());
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER) {
      if (!table.getSelectionModel().isEmpty()) {
        Playlist p=new Playlist(map(table.getItems(),Metadata::toPlaylist));
        PlaylistManager.playPlaylistFrom(p,table.getSelectionModel().getSelectedIndex());
      }
    }
 else     if (e.getCode() == DELETE)     DB.removeItems(table.getSelectedItems());
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragOver_NoSelf(e -> {
    e.acceptTransferModes(COPY);
    e.consume();
  }
);
  table.setOnDragDropped(e -> {
    addNeditDo(DragUtil.getSongs(e),false);
    e.setDropCompleted(true);
    e.consume();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(table.getSelectedItemsCopy(),db);
    }
    e.consume();
  }
);
  table.setOnScroll(Event::consume);
  d2=Player.librarySelectedItemES.feedFrom(nonNullValuesOf(table.getSelectionModel().selectedItemProperty()));
  d3=Player.librarySelectedItemsES.feedFrom(changesOf(table.getSelectionModel().getSelectedItems()).map(i -> table.getSelectedItemsCopy()));
  changesOf(table.getSortOrder()).subscribe(c -> DB.library_sorter=c.getList().stream().map(column -> {
    Metadata.Field f=(Metadata.Field)column.getUserData();
    int type=column.getSortType() == ASCENDING ? 1 : -1;
    return (Comparator<Metadata>)(m1,m2) -> type * ((Comparable)m1.getField(f)).compareTo((m2.getField(f)));
  }
).reduce((m1,m2) -> 0,Comparator::thenComparing));
  taskInfo.setVisible(false);
  InfoTable<Metadata> infoL=new InfoTable(new Label(),table);
  infoL.textFactory=(all,list) -> {
    double d=list.stream().mapToDouble(Metadata::getLengthInMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(d);
  }
;
  Region padding=new Region();
  HBox controls=new HBox(controlsBar,infoL.node,padding,taskInfo.message,taskInfo.progressIndicator);
  controls.setSpacing(7);
  controls.setAlignment(Pos.CENTER_LEFT);
  controls.setPadding(new Insets(0,5,0,0));
  HBox.setHgrow(padding,ALWAYS);
  addMenu.setText(""String_Node_Str"");
  remMenu.setText(""String_Node_Str"");
  Icons.setIcon(addMenu,FontAwesomeIconName.PLUS,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(remMenu,FontAwesomeIconName.MINUS,""String_Node_Str"",""String_Node_Str"");
  content.getChildren().addAll(table.getRoot(),controls);
  VBox.setVgrow(table.getRoot(),ALWAYS);
}","@Override public void init(){
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(TITLE);
  table.setColumnStateFacory(f -> {
    double w=f == PATH || f == TITLE ? 150 : 50;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    TableColumn<Metadata,?> c=new TableColumn(f.toString());
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    c.setCellFactory(f == RATING ? (Callback)App.ratingCell.getValue() : (Callback)col -> table.buildDefaultCell(f));
    return c;
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    table.getColumn(""String_Node_Str"").ifPresent(i -> i.setPrefWidth(table.calculateIndexColumnWidth()));
    return b;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<Metadata>().onLeftDoubleClick((r,e) -> {
    Playlist p=new Playlist(map(table.getItems(),Metadata::toPlaylist));
    PlaylistManager.playPlaylistFrom(p,r.getIndex());
  }
).onRightSingleClick((r,e) -> {
    if (!r.isSelected())     tbl.getSelectionModel().clearAndSelect(r.getIndex());
    contxt_menu.show(table,e);
  }
).styleRuleAdd(""String_Node_Str"",m -> Player.playingtem.get().same(m)));
  d4=Player.playingtem.subscribeToChanges(o -> table.updateStyleRules());
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER) {
      if (!table.getSelectionModel().isEmpty()) {
        Playlist p=new Playlist(map(table.getItems(),Metadata::toPlaylist));
        PlaylistManager.playPlaylistFrom(p,table.getSelectionModel().getSelectedIndex());
      }
    }
 else     if (e.getCode() == DELETE)     DB.removeItems(table.getSelectedItems());
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragOver_NoSelf(e -> {
    e.acceptTransferModes(COPY);
    e.consume();
  }
);
  table.setOnDragDropped(e -> {
    addNeditDo(DragUtil.getSongs(e),editOnAdd.get());
    e.setDropCompleted(true);
    e.consume();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(table.getSelectedItemsCopy(),db);
    }
    e.consume();
  }
);
  table.setOnScroll(Event::consume);
  d2=Player.librarySelectedItemES.feedFrom(nonNullValuesOf(table.getSelectionModel().selectedItemProperty()));
  d3=Player.librarySelectedItemsES.feedFrom(changesOf(table.getSelectionModel().getSelectedItems()).map(i -> table.getSelectedItemsCopy()));
  changesOf(table.getSortOrder()).subscribe(c -> DB.library_sorter=c.getList().stream().map(column -> {
    Metadata.Field f=(Metadata.Field)column.getUserData();
    int type=column.getSortType() == ASCENDING ? 1 : -1;
    return (Comparator<Metadata>)(m1,m2) -> type * ((Comparable)m1.getField(f)).compareTo((m2.getField(f)));
  }
).reduce((m1,m2) -> 0,Comparator::thenComparing));
  taskInfo.setVisible(false);
  InfoTable<Metadata> infoL=new InfoTable(new Label(),table);
  infoL.textFactory=(all,list) -> {
    double d=list.stream().mapToDouble(Metadata::getLengthInMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(d);
  }
;
  Region padding=new Region();
  HBox controls=new HBox(controlsBar,infoL.node,padding,taskInfo.message,taskInfo.progressIndicator);
  controls.setSpacing(7);
  controls.setAlignment(Pos.CENTER_LEFT);
  controls.setPadding(new Insets(0,5,0,0));
  HBox.setHgrow(padding,ALWAYS);
  addMenu.setText(""String_Node_Str"");
  remMenu.setText(""String_Node_Str"");
  Icons.setIcon(addMenu,FontAwesomeIconName.PLUS,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(remMenu,FontAwesomeIconName.MINUS,""String_Node_Str"",""String_Node_Str"");
  gui.objects.ContextMenu.CheckMenuItem editOnAddmi=new gui.objects.ContextMenu.CheckMenuItem(""String_Node_Str"");
  editOnAddmi.selected.bindBidirectional(editOnAdd);
  controlsBar.getMenus().get(0).getItems().add(editOnAddmi);
  content.getChildren().addAll(table.getRoot(),controls);
  VBox.setVgrow(table.getRoot(),ALWAYS);
}",0.921897566937007
36598,"@FXML private void addFiles(){
  addNedit(false,false);
}","@FXML private void addFiles(){
  addNedit(editOnAdd.get(),false);
}",0.8548387096774194
36599,"@FXML private void addDirectory(){
  addNedit(false,true);
}","@FXML private void addDirectory(){
  addNedit(editOnAdd.get(),true);
}",0.8615384615384616
36600,"@Override public void init(){
  content.getChildren().addAll(table.getRoot());
  VBox.setVgrow(table.getRoot(),Priority.ALWAYS);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(VALUE);
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(f.toString(mf));
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType(mf).equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == AVG_RATING ? (Callback)App.ratingCell.getValue() : f == W_RATING ? (Callback)new NumberRatingCellFactory() : (Callback)col -> {
      TableCell<MetadataGroup,Object> cell=new TableCell<MetadataGroup,Object>(){
        @Override protected void updateItem(        Object item,        boolean empty){
          super.updateItem(item,empty);
          setText(empty ? ""String_Node_Str"" : f.toS(item,""String_Node_Str""));
        }
      }
;
      cell.setAlignment(a);
      return cell;
    }
);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<MetadataGroup>().styleRuleAdd(""String_Node_Str"",mg -> Player.playingtem.get().getField(fieldFilter.getValue()).equals(mg.getValue())).onLeftDoubleClick((row,e) -> playSelected()).onRightSingleClick((row,e) -> {
    if (!row.isSelected())     tbl.getSelectionModel().clearAndSelect(row.getIndex());
    contxt_menu.show(this,(TableView)table,e);
  }
));
  d2=Player.playingtem.subscribeToChanges(o -> table.updateStyleRules());
  Menu m=(Menu)table.columnVisibleMenu.getItems().stream().filter(i -> i.getText().equals(""String_Node_Str"")).findFirst().get();
  Stream.of(Field.values()).map(f -> new CheckMenuItem(f.toStringEnum(),false){
{
      this.setOnMouseClicked(() -> {
        if (!selected.get()) {
          m.getItems().forEach(mi -> ((CheckMenuItem)mi).selected.set(false));
          selected.set(true);
          fieldFilter.setNapplyValue(f);
        }
      }
);
    }
  }
).forEach(m.getItems()::add);
  table.columnVisibleMenu.addEventHandler(WINDOW_SHOWN,e -> m.getItems().forEach(mi -> ((CheckMenuItem)mi).selected.set(fieldFilter.getValue().toStringEnum().equals(mi.getText()))));
  table.setOnKeyPressed(e -> {
    if (e.getCode() == ENTER)     playSelected();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(filerListToSelectedNsort(),db);
    }
    e.consume();
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    table.getColumn(""String_Node_Str"").ifPresent(i -> i.setPrefWidth(table.calculateIndexColumnWidth()));
    find(table.getColumns(),c -> VALUE == c.getUserData()).ifPresent(c -> {
      double w=table.getColumns().stream().filter(TableColumn::isVisible).mapToDouble(TableColumn::getWidth).sum();
      double itemsHeight=(table.getItems().size() + 1) * table.getFixedCellSize();
      double scrollbar=itemsHeight < table.getHeight() ? 0 : 15;
      c.setPrefWidth(table.getWidth() - (scrollbar + w - c.getWidth()));
    }
);
    return b;
  }
);
  EventStreams.changesOf(table.getSelectedItems()).reduceSuccessions((a,b) -> b,ofMillis(100)).subscribe(c -> {
    if (!sel_lock)     forwardItems(DB.views.getValue(lvl.getValue()));
  }
);
  table.setOnScroll(Event::consume);
}","@Override public void init(){
  content.getChildren().addAll(table.getRoot());
  VBox.setVgrow(table.getRoot(),Priority.ALWAYS);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.searchSetColumn(VALUE);
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(f.toString(mf));
    c.setCellValueFactory(cf -> cf.getValue() == null ? null : new PojoV(cf.getValue().getField(f)));
    Pos a=f.getType(mf).equals(String.class) ? CENTER_LEFT : CENTER_RIGHT;
    c.setCellFactory(f == AVG_RATING ? (Callback)App.ratingCell.getValue() : f == W_RATING ? (Callback)new NumberRatingCellFactory() : (Callback)col -> {
      TableCell cel=table.buildDefaultCell(f);
      cel.setAlignment(a);
      return cel;
    }
);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.setRowFactory(tbl -> new ImprovedTableRow<MetadataGroup>().styleRuleAdd(""String_Node_Str"",mg -> Player.playingtem.get().getField(fieldFilter.getValue()).equals(mg.getValue())).onLeftDoubleClick((row,e) -> playSelected()).onRightSingleClick((row,e) -> {
    if (!row.isSelected())     tbl.getSelectionModel().clearAndSelect(row.getIndex());
    contxt_menu.show(this,(TableView)table,e);
  }
));
  d2=Player.playingtem.subscribeToChanges(o -> table.updateStyleRules());
  Menu m=(Menu)table.columnVisibleMenu.getItems().stream().filter(i -> i.getText().equals(""String_Node_Str"")).findFirst().get();
  Stream.of(Field.values()).map(f -> new CheckMenuItem(f.toStringEnum(),false){
{
      this.setOnMouseClicked(() -> {
        if (!selected.get()) {
          m.getItems().forEach(mi -> ((CheckMenuItem)mi).selected.set(false));
          selected.set(true);
          fieldFilter.setNapplyValue(f);
        }
      }
);
    }
  }
).forEach(m.getItems()::add);
  table.columnVisibleMenu.addEventHandler(WINDOW_SHOWN,e -> m.getItems().forEach(mi -> ((CheckMenuItem)mi).selected.set(fieldFilter.getValue().toStringEnum().equals(mi.getText()))));
  table.setOnKeyPressed(e -> {
    if (e.getCode() == ENTER)     playSelected();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && !table.getSelectedItems().isEmpty() && table.isRowFull(table.getRowS(e.getSceneX(),e.getSceneY()))) {
      Dragboard db=table.startDragAndDrop(COPY);
      DragUtil.setItemList(filerListToSelectedNsort(),db);
    }
    e.consume();
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    table.getColumn(""String_Node_Str"").ifPresent(i -> i.setPrefWidth(table.calculateIndexColumnWidth()));
    find(table.getColumns(),c -> VALUE == c.getUserData()).ifPresent(c -> {
      double w=table.getColumns().stream().filter(TableColumn::isVisible).mapToDouble(TableColumn::getWidth).sum();
      double itemsHeight=(table.getItems().size() + 1) * table.getFixedCellSize();
      double scrollbar=itemsHeight < table.getHeight() ? 0 : 15;
      c.setPrefWidth(table.getWidth() - (scrollbar + w - c.getWidth()));
    }
);
    return b;
  }
);
  EventStreams.changesOf(table.getSelectedItems()).reduceSuccessions((a,b) -> b,ofMillis(100)).subscribe(c -> {
    if (!sel_lock)     forwardItems(DB.views.getValue(lvl.getValue()));
  }
);
  table.setOnScroll(Event::consume);
}",0.9571807502841986
36601,"@Override public void init(){
  balance=new Balancer();
  soundGrid.add(balance,1,1);
  balance.setPrefSize(50,20);
  balance.setMax(PLAYBACK.getBalanceMax());
  balance.setMin(PLAYBACK.getBalanceMin());
  balance.balanceProperty().bindBidirectional(PLAYBACK.balanceProperty());
  volume.setMin(PLAYBACK.getVolumeMin());
  volume.setMax(PLAYBACK.getVolumeMax());
  volume.setValue(PLAYBACK.getVolume());
  volume.valueProperty().bindBidirectional(PLAYBACK.volumeProperty());
  seeker.bindTime(PLAYBACK.totalTimeProperty(),PLAYBACK.currentTimeProperty());
  entireArea.getChildren().add(seeker);
  AnchorPane.setBottomAnchor(seeker,0.0);
  AnchorPane.setLeftAnchor(seeker,0.0);
  AnchorPane.setRightAnchor(seeker,0.0);
  d1=maintain(GUI.snapDistance,d -> d,seeker.chapterSnapDistance);
  p1.setOnMouseClicked(e -> rewind());
  f2.setOnMouseClicked(e -> previous());
  f3.setOnMouseClicked(e -> play_pause());
  f4.setOnMouseClicked(e -> next());
  f5.setOnMouseClicked(e -> forward());
  f6.setOnMouseClicked(e -> stop());
  playButtons.getChildren().setAll(p1,f2,f3,f4,f5,f6);
  Tooltip.install(addB,new Tooltip(""String_Node_Str""));
  addB.setOnMouseClicked(e -> {
    if (e.getButton() == MouseButton.PRIMARY)     PlaylistManager.addOrEnqueueFiles(true);
 else     PlaylistManager.addOrEnqueueFolder(true);
  }
);
  entireArea.getChildren().add(addB);
  AnchorPane.setTopAnchor(addB,5d);
  AnchorPane.setLeftAnchor(addB,5d);
  loopB.setOnMouseClicked(this::cycleLoopMode);
  loopB.setScaleX(1.3);
  infoBox.getChildren().add(1,loopB);
  muteB.setOnMouseClicked(e -> cycleMute());
  soundGrid.add(muteB,0,0);
  playingItemMonitoring=Player.playingtem.subscribeToUpdates(this::playingItemChanged);
  playingItemChanged(Player.playingtem.get());
  PLAYBACK.statusProperty().addListener(statusListener);
  statusChanged(PLAYBACK.getStatus());
  PLAYBACK.loopModeProperty().addListener(loopModeListener);
  loopModeChanged(PLAYBACK.getLoopMode());
  PLAYBACK.muteProperty().addListener(muteListener);
  muteChanged(PLAYBACK.getMute(),volume.getValue());
  PLAYBACK.totalTimeProperty().addListener(totalTimeListener);
  PLAYBACK.realTimeProperty().addListener(realTimeListener);
  PLAYBACK.currentTimeProperty().addListener(currTimeListener);
  currTimeListener.invalidated(null);
  ChangeListener<Number> volumeListener=(o,ov,nv) -> muteChanged(PLAYBACK.isMute(),nv.doubleValue());
  volume.valueProperty().addListener(volumeListener);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      e.setDropCompleted(true);
      e.consume();
      if (playDropped) {
        PlaylistManager.playPlaylist(new Playlist(items.stream().map(Item::getURI),true));
      }
 else {
        PlaylistManager.addItems(items);
      }
    }
  }
);
}","@Override public void init(){
  balance=new Balancer();
  soundGrid.add(balance,1,1);
  balance.setPrefSize(50,20);
  balance.setMax(PLAYBACK.getBalanceMax());
  balance.setMin(PLAYBACK.getBalanceMin());
  balance.balanceProperty().bindBidirectional(PLAYBACK.balanceProperty());
  volume.setMin(PLAYBACK.getVolumeMin());
  volume.setMax(PLAYBACK.getVolumeMax());
  volume.setValue(PLAYBACK.getVolume());
  volume.valueProperty().bindBidirectional(PLAYBACK.volumeProperty());
  seeker.bindTime(PLAYBACK.totalTimeProperty(),PLAYBACK.currentTimeProperty());
  entireArea.getChildren().add(seeker);
  AnchorPane.setBottomAnchor(seeker,0.0);
  AnchorPane.setLeftAnchor(seeker,0.0);
  AnchorPane.setRightAnchor(seeker,0.0);
  d1=maintain(GUI.snapDistance,d -> d,seeker.chapterSnapDistance);
  p1.setOnMouseClicked(e -> rewind());
  f2.setOnMouseClicked(e -> previous());
  f3.setOnMouseClicked(e -> play_pause());
  f4.setOnMouseClicked(e -> next());
  f5.setOnMouseClicked(e -> forward());
  f6.setOnMouseClicked(e -> stop());
  playButtons.getChildren().setAll(p1,f2,f3,f4,f5,f6);
  Tooltip.install(addB,new Tooltip(""String_Node_Str""));
  addB.setOnMouseClicked(e -> {
    if (e.getButton() == MouseButton.PRIMARY)     PlaylistManager.addOrEnqueueFiles(true);
 else     PlaylistManager.addOrEnqueueFolder(true);
  }
);
  entireArea.getChildren().add(addB);
  AnchorPane.setTopAnchor(addB,5d);
  AnchorPane.setLeftAnchor(addB,5d);
  loopB.setOnMouseClicked(this::cycleLoopMode);
  loopB.setScaleX(1.3);
  infoBox.getChildren().add(1,loopB);
  muteB.setOnMouseClicked(e -> cycleMute());
  soundGrid.add(muteB,0,0);
  playingItemMonitoring=Player.playingtem.subscribeToUpdates(this::playingItemChanged);
  playingItemChanged(Player.playingtem.get());
  PLAYBACK.statusProperty().addListener(statusListener);
  statusChanged(PLAYBACK.getStatus());
  PLAYBACK.loopModeProperty().addListener(loopModeListener);
  loopModeChanged(PLAYBACK.getLoopMode());
  PLAYBACK.muteProperty().addListener(muteListener);
  muteChanged(PLAYBACK.getMute(),volume.getValue());
  PLAYBACK.totalTimeProperty().addListener(totalTimeListener);
  PLAYBACK.realTimeProperty().addListener(realTimeListener);
  PLAYBACK.currentTimeProperty().addListener(currTimeListener);
  currTimeListener.invalidated(null);
  ChangeListener<Number> volumeListener=(o,ov,nv) -> muteChanged(PLAYBACK.isMute(),nv.doubleValue());
  volume.valueProperty().addListener(volumeListener);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      e.setDropCompleted(true);
      e.consume();
      if (playDropped) {
        PlaylistManager.playPlaylist(new Playlist(map(items,Item::toPlaylist)));
      }
 else {
        PlaylistManager.addItems(items);
      }
    }
  }
);
}",0.9700139470013946
36602,"@Override public void init(){
  volume.setMin(PLAYBACK.getVolumeMin());
  volume.setMax(PLAYBACK.getVolumeMax());
  volume.setValue(PLAYBACK.getVolume());
  volume.valueProperty().bindBidirectional(PLAYBACK.volumeProperty());
  seeker.bindTime(PLAYBACK.totalTimeProperty(),PLAYBACK.currentTimeProperty());
  d6=maintain(GUI.snapDistance,d -> d,seeker.chapterSnapDistance);
  seekerPane.setCenter(seeker);
  prevB=new Icon(STEP_BACKWARD,14,null,PlaylistManager::playPreviousItem);
  playB=new Icon(null,14,null,PLAYBACK::pause_resume);
  stopB=new Icon(STOP,14,null,PLAYBACK::stop);
  nextB=new Icon(STEP_FORWARD,14,null,PlaylistManager::playNextItem);
  controlBox.getChildren().addAll(prevB,playB,stopB,nextB);
  volB=new Icon(null,14,null,PLAYBACK::toggleMute);
  volBox.getChildren().add(0,volB);
  d1=maintain(PLAYBACK.volumeProperty(),v -> muteChanged(PLAYBACK.isMute(),v.doubleValue()));
  d2=maintain(PLAYBACK.muteProperty(),m -> muteChanged(m,PLAYBACK.getVolume()));
  d3=maintain(PLAYBACK.statusProperty(),this::statusChanged);
  d4=Player.subscribe(ReadMode.PLAYING,d4,this::playbackItemChanged);
  d5=maintain(PLAYBACK.currentTimeProperty(),t -> currentTimeChanged());
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      e.setDropCompleted(true);
      e.consume();
      if (playDropped) {
        PlaylistManager.playPlaylist(new Playlist(items.stream().map(Item::getURI),true));
      }
 else {
        PlaylistManager.addItems(items);
      }
    }
  }
);
  ds=asList(d1,d2,d3,d4,d5,d6);
}","@Override public void init(){
  volume.setMin(PLAYBACK.getVolumeMin());
  volume.setMax(PLAYBACK.getVolumeMax());
  volume.setValue(PLAYBACK.getVolume());
  volume.valueProperty().bindBidirectional(PLAYBACK.volumeProperty());
  seeker.bindTime(PLAYBACK.totalTimeProperty(),PLAYBACK.currentTimeProperty());
  d6=maintain(GUI.snapDistance,d -> d,seeker.chapterSnapDistance);
  seekerPane.setCenter(seeker);
  prevB=new Icon(STEP_BACKWARD,14,null,PlaylistManager::playPreviousItem);
  playB=new Icon(null,14,null,PLAYBACK::pause_resume);
  stopB=new Icon(STOP,14,null,PLAYBACK::stop);
  nextB=new Icon(STEP_FORWARD,14,null,PlaylistManager::playNextItem);
  controlBox.getChildren().addAll(prevB,playB,stopB,nextB);
  volB=new Icon(null,14,null,PLAYBACK::toggleMute);
  volBox.getChildren().add(0,volB);
  d1=maintain(PLAYBACK.volumeProperty(),v -> muteChanged(PLAYBACK.isMute(),v.doubleValue()));
  d2=maintain(PLAYBACK.muteProperty(),m -> muteChanged(m,PLAYBACK.getVolume()));
  d3=maintain(PLAYBACK.statusProperty(),this::statusChanged);
  d4=Player.subscribe(ReadMode.PLAYING,d4,this::playbackItemChanged);
  d5=maintain(PLAYBACK.currentTimeProperty(),t -> currentTimeChanged());
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      e.setDropCompleted(true);
      e.consume();
      if (playDropped) {
        PlaylistManager.playPlaylist(new Playlist(map(items,Item::toPlaylist)));
      }
 else {
        PlaylistManager.addItems(items);
      }
    }
  }
);
  ds=asList(d1,d2,d3,d4,d5,d6);
}",0.9278728606356969
36603,"@Override public void init(){
  root.getChildren().setAll(table.getRoot(),optionPane);
  VBox.setVgrow(table.getRoot(),Priority.ALWAYS);
  InfoTable<PlaylistItem> infoL=new InfoTable(duration,table);
  infoL.textFactory=(all,list) -> {
    double d=list.stream().mapToDouble(PlaylistItem::getTimeMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(d);
  }
;
  PlaylistManager.getItems().addListener(playlistitemsL);
  root.setOnScroll(Event::consume);
  table.addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_RELEASED,consumeOnSecondaryButton);
  addMenu.setText(""String_Node_Str"");
  remMenu.setText(""String_Node_Str"");
  selMenu.setText(""String_Node_Str"");
  orderMenu.setText(""String_Node_Str"");
  Icons.setIcon(addMenu,PLUS,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(remMenu,MINUS,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(selMenu,CROP,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(orderMenu,NAVICON,""String_Node_Str"",""String_Node_Str"");
  Menu sortM=new Menu(""String_Node_Str"");
  for (  Field f : Field.values())   sortM.getItems().add(menuItem(f.toStringEnum(),() -> table.sortBy(f)));
  orderMenu.getItems().add(0,sortM);
}","@Override public void init(){
  root.getChildren().setAll(table.getRoot(),optionPane);
  VBox.setVgrow(table.getRoot(),Priority.ALWAYS);
  InfoTable<PlaylistItem> infoL=new InfoTable(duration,table);
  infoL.textFactory=(all,list) -> {
    if (list == null)     return ""String_Node_Str"";
    double d=list.stream().filter(isNotNULL).mapToDouble(PlaylistItem::getTimeMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(d);
  }
;
  PlaylistManager.getItems().addListener(playlistitemsL);
  root.setOnScroll(Event::consume);
  table.addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_RELEASED,consumeOnSecondaryButton);
  addMenu.setText(""String_Node_Str"");
  remMenu.setText(""String_Node_Str"");
  selMenu.setText(""String_Node_Str"");
  orderMenu.setText(""String_Node_Str"");
  Icons.setIcon(addMenu,PLUS,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(remMenu,MINUS,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(selMenu,CROP,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(orderMenu,NAVICON,""String_Node_Str"",""String_Node_Str"");
  Menu sortM=new Menu(""String_Node_Str"");
  for (  Field f : Field.values())   sortM.getItems().add(menuItem(f.toStringEnum(),() -> table.sortBy(f)));
  orderMenu.getItems().add(0,sortM);
}",0.9727414330218068
36604,"@Override public void init(){
  Thumbnail thumb=new Thumbnail();
  thumb.setBorderToImage(true);
  layout=new ImageFlowPane(entireArea,thumb);
  layout.setMinContentWidth(200);
  layout.setMinContentHeight(120);
  layout.setGap(5);
  tiles.widthProperty().addListener((o,ov,nv) -> resize(nv.doubleValue(),tiles.getHeight()));
  tiles.heightProperty().addListener((o,ov,nv) -> resize(tiles.getWidth(),nv.doubleValue()));
  tiles.setAlignment(TOP_LEFT);
  tiles.setTileAlignment(CENTER_LEFT);
  rating.setGraphic(rater);
  rating.setContentDisplay(ContentDisplay.RIGHT);
  labels=Arrays.asList(title,track,disc,gap1,artist,album,album_artist,year,genre,composer,publisher,gap2,rating,playcount,comment,category,gap3,filesize,filename,format,bitrate,encoding,location);
  layout.addChild(tiles);
  Util.setAnchors(tiles,3);
  rater.icons.bind(App.maxRating);
  rater.partialRating.bind(App.partialRating);
  rater.updateOnHover.bind(App.hoverRating);
  rater.editable.bind(App.allowRatingChange);
  rater.setOnRatingChanged(r -> MetadataWriter.useToRate(data,r));
  rater.setOnMouseClicked(e -> {
    if (e.getButton() == SECONDARY)     rater.toggleSkin();
  }
);
  rater.visibleProperty().bind(rating.disabledProperty().not());
  thumb.getPane().setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      layout.toggleShowContent();
      showFields.setValue(layout.isShowContent());
    }
  }
);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragEntered(e -> {
    if (hasImage(e.getDragboard())) {
      ((Area)getActivityNode().getUserData()).setActivityVisible(true);
      entireArea.getScene().getWindow().requestFocus();
    }
  }
);
  entireArea.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       populateGui(items.get(0).getMetadata());
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  actPane=new ActionChooser();
  actPane.setOnDragExited(e -> ((Area)actPane.getUserData()).setActivityVisible(false));
  Labeled copyB=actPane.addIcon(PLUS_SQUARE,""String_Node_Str"");
  copyB.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  copyB.setOnDragDropped(e -> {
    if (data != null && data.isFileBased()) {
      DragUtil.doWithImages(e,imgs -> {
        int n=imgs.size();
        if (n == 1) {
          copyFileSafe(imgs.get(0),data.getLocation(),""String_Node_Str"");
          Platform.runLater(cover_source::applyValue);
        }
 else         if (n > 1) {
        }
      }
);
      ((Area)actPane.getUserData()).setActivityVisible(false);
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  Labeled coverB=actPane.addIcon(PLUS,""String_Node_Str"");
  coverB.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  coverB.setOnDragDropped(e -> {
    if (data != null && data.isFileBased()) {
      DragUtil.doWithImages(e,imgs -> copyFiles(imgs,data.getLocation()));
      ((Area)actPane.getUserData()).setActivityVisible(false);
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  srcB=actPane.addIcon(SQUARE_ALT,""String_Node_Str"");
  srcB.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY)     readMode.setNextNapplyValue();
    if (e.getButton() == SECONDARY)     readMode.setPreviousNapplyValue();
    ReadMode r=readMode.getValue();
    GlyphIconName i=r == PLAYING ? PLAY : ANDROID;
    srcB.setText(i.characterToString());
    srcB.setStyle(String.format(""String_Node_Str"",i.getFontFamily(),15));
    srcB.getStyleClass().add(""String_Node_Str"");
    actPane.description.setText(""String_Node_Str"" + readMode.getValue().toString() + ""String_Node_Str""+ readMode.next().toString()+ ""String_Node_Str""+ ""String_Node_Str""+ readMode.getValue().toString()+ ""String_Node_Str""+ readMode.previous().toString());
  }
);
  srcB.setOnMouseEntered(e -> {
    actPane.description.setText(""String_Node_Str"" + readMode.getValue().toString() + ""String_Node_Str""+ readMode.next().toString()+ ""String_Node_Str""+ ""String_Node_Str""+ readMode.getValue().toString()+ ""String_Node_Str""+ readMode.previous().toString());
  }
);
  Labeled lvlB=actPane.addIcon(SQUARE_ALT,""String_Node_Str"",""String_Node_Str"",false);
  lvlB.setContentDisplay(CENTER);
  lvlB.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      lvlB.setText(""String_Node_Str"");
    }
    if (e.getButton() == SECONDARY) {
      lvlB.setText(""String_Node_Str"");
    }
    e.consume();
  }
);
}","@Override public void init(){
  Thumbnail thumb=new Thumbnail();
  thumb.setBorderToImage(true);
  layout=new ImageFlowPane(entireArea,thumb);
  layout.setMinContentWidth(200);
  layout.setMinContentHeight(120);
  layout.setGap(5);
  tiles.widthProperty().addListener((o,ov,nv) -> resize(nv.doubleValue(),tiles.getHeight()));
  tiles.heightProperty().addListener((o,ov,nv) -> resize(tiles.getWidth(),nv.doubleValue()));
  tiles.setAlignment(TOP_LEFT);
  tiles.setTileAlignment(CENTER_LEFT);
  rating.setGraphic(rater);
  rating.setContentDisplay(ContentDisplay.RIGHT);
  labels=Arrays.asList(title,track,disc,gap1,artist,album,album_artist,year,genre,composer,publisher,gap2,rating,playcount,comment,category,gap3,filesize,filename,format,bitrate,encoding,location);
  layout.addChild(tiles);
  Util.setAnchors(tiles,3);
  rater.icons.bind(App.maxRating);
  rater.partialRating.bind(App.partialRating);
  rater.updateOnHover.bind(App.hoverRating);
  rater.editable.bind(App.allowRatingChange);
  rater.setOnRatingChanged(r -> MetadataWriter.useToRate(data,r));
  rater.visibleProperty().bind(rating.disabledProperty().not());
  thumb.getPane().setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      layout.toggleShowContent();
      showFields.setValue(layout.isShowContent());
    }
  }
);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragEntered(e -> {
    if (hasImage(e.getDragboard())) {
      ((Area)getActivityNode().getUserData()).setActivityVisible(true);
      entireArea.getScene().getWindow().requestFocus();
    }
  }
);
  entireArea.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       populateGui(items.get(0).getMetadata());
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  actPane=new ActionChooser();
  actPane.setOnDragExited(e -> ((Area)actPane.getUserData()).setActivityVisible(false));
  Labeled copyB=actPane.addIcon(PLUS_SQUARE,""String_Node_Str"");
  copyB.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  copyB.setOnDragDropped(e -> {
    if (data != null && data.isFileBased()) {
      DragUtil.doWithImages(e,imgs -> {
        int n=imgs.size();
        if (n == 1) {
          copyFileSafe(imgs.get(0),data.getLocation(),""String_Node_Str"");
          Platform.runLater(cover_source::applyValue);
        }
 else         if (n > 1) {
        }
      }
);
      ((Area)actPane.getUserData()).setActivityVisible(false);
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  Labeled coverB=actPane.addIcon(PLUS,""String_Node_Str"");
  coverB.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  coverB.setOnDragDropped(e -> {
    if (data != null && data.isFileBased()) {
      DragUtil.doWithImages(e,imgs -> copyFiles(imgs,data.getLocation()));
      ((Area)actPane.getUserData()).setActivityVisible(false);
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  srcB=actPane.addIcon(SQUARE_ALT,""String_Node_Str"");
  srcB.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY)     readMode.setNextNapplyValue();
    if (e.getButton() == SECONDARY)     readMode.setPreviousNapplyValue();
    ReadMode r=readMode.getValue();
    GlyphIconName i=r == PLAYING ? PLAY : ANDROID;
    srcB.setText(i.characterToString());
    srcB.setStyle(String.format(""String_Node_Str"",i.getFontFamily(),15));
    srcB.getStyleClass().add(""String_Node_Str"");
    actPane.description.setText(""String_Node_Str"" + readMode.getValue().toString() + ""String_Node_Str""+ readMode.next().toString()+ ""String_Node_Str""+ ""String_Node_Str""+ readMode.getValue().toString()+ ""String_Node_Str""+ readMode.previous().toString());
  }
);
  srcB.setOnMouseEntered(e -> {
    actPane.description.setText(""String_Node_Str"" + readMode.getValue().toString() + ""String_Node_Str""+ readMode.next().toString()+ ""String_Node_Str""+ ""String_Node_Str""+ readMode.getValue().toString()+ ""String_Node_Str""+ readMode.previous().toString());
  }
);
}",0.9480396787907416
36605,"/** 
 * {@inheritDoc} 
 */
@Override public void showImages(List<File> img_files){
  if (img_files.isEmpty())   return;
  showImage(img_files.get(0));
  active_image=0;
  img_files.forEach(f -> addThumbnail(f));
}","/** 
 * {@inheritDoc} 
 */
@Override public void showImages(List<File> img_files){
  if (img_files.isEmpty())   return;
  showImage(img_files.get(0));
  active_image=0;
  img_files.forEach(this::addThumbnail);
}",0.9669811320754716
36606,"@Override public void init(){
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.setColumnStateFacory(f -> {
    double w=f == PATH || f == TITLE ? 150 : 50;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    TableColumn<Metadata,?> c=new TableColumn(f.toString());
    c.setCellValueFactory(f == RATING ? cf -> {
      if (cf.getValue() == null)       return null;
      String s=cf.getValue().getRatingPercentAsString();
      if (s.length() > 4)       s=s.substring(0,4);
      return new ReadOnlyObjectWrapper(s);
    }
 : cf -> {
      if (cf.getValue() == null)       return null;
      return new ReadOnlyObjectWrapper(cf.getValue().getField(f));
    }
);
    c.setCellValueFactory(cf -> {
      if (cf.getValue() == null)       return null;
      return new ReadOnlyObjectWrapper(cf.getValue().getField(f));
    }
);
    c.setCellFactory(f == RATING ? (Callback)App.ratingCell.getValue() : DEFAULT_ALIGNED_CELL_FACTORY(f.getType(),""String_Node_Str""));
    c.setUserData(f);
    if (f == Metadata.Field.TRACK || f == Metadata.Field.DISC || f == Metadata.Field.TRACKS_TOTAL || f == Metadata.Field.DISCS_TOTAL) {
      c.setComparator((Comparator)new Comparator<Integer>(){
        @Override public int compare(        Integer o1,        Integer o2){
          return Integer.compare(o1,o2);
        }
      }
);
    }
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.addEventHandler(MOUSE_CLICKED,e -> {
    if (table.isTableHeaderVisible() && e.getY() < table.getTableHeaderHeight())     return;
    if (e.getButton() == PRIMARY) {
      if (e.getClickCount() == 2) {
        Playlist p=new Playlist(listM(table.getItems(),Metadata::toPlaylistItem));
        PlaylistManager.playPlaylistFrom(p,table.getSelectionModel().getSelectedIndex());
      }
    }
 else     if (e.getButton() == SECONDARY) {
      double h=table.isTableHeaderVisible() ? e.getY() - table.getTableHeaderHeight() : e.getY();
      int i=(int)floor(h / table.getFixedCellSize());
      if (!table.getSelectionModel().isSelected(i))       table.getSelectionModel().clearAndSelect(i);
      contxt_menu.show(table,e);
      e.consume();
    }
  }
);
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER) {
      if (!table.getSelectionModel().isEmpty()) {
        Playlist p=new Playlist(listM(table.getItems(),Metadata::toPlaylistItem));
        PlaylistManager.playPlaylistFrom(p,table.getSelectionModel().getSelectedIndex());
      }
    }
 else     if (e.getCode() == DELETE)     DB.removeItems(table.getSelectedItems());
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && e.getY() > table.getFixedCellSize()) {
      Dragboard db=table.startDragAndDrop(TransferMode.COPY);
      DragUtil.setItemList(table.getSelectedItemsCopy(),db);
      e.consume();
    }
  }
);
  table.addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_RELEASED,consumeOnSecondaryButton);
  table.addEventFilter(ContextMenuEvent.ANY,Event::consume);
  table.setOnScroll(Event::consume);
  monitor2=Player.librarySelectedItemES.feedFrom(nonNullValuesOf(table.getSelectionModel().selectedItemProperty()));
  monitor3=Player.librarySelectedItemsES.feedFrom(changesOf(table.getSelectionModel().getSelectedItems()).map(i -> table.getSelectedItemsCopy()));
  taskInfo.setVisible(false);
  InfoTable<Metadata> infoL=new InfoTable(new Label(),table);
  infoL.textFactory=(all,list) -> {
    double d=list.stream().mapToDouble(Metadata::getLengthInMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(d);
  }
;
  Region padding=new Region();
  HBox controls=new HBox(controlsBar,infoL.node,padding,taskInfo.message,taskInfo.progressIndicator);
  controls.setSpacing(7);
  controls.setAlignment(Pos.CENTER_LEFT);
  controls.setPadding(new Insets(0,5,0,0));
  HBox.setHgrow(padding,ALWAYS);
  addMenu.setText(""String_Node_Str"");
  remMenu.setText(""String_Node_Str"");
  Icons.setIcon(addMenu,FontAwesomeIconName.PLUS,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(remMenu,FontAwesomeIconName.MINUS,""String_Node_Str"",""String_Node_Str"");
  content.getChildren().addAll(table.getRoot(),controls);
  VBox.setVgrow(table.getRoot(),ALWAYS);
}","@Override public void init(){
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.setColumnStateFacory(f -> {
    double w=f == PATH || f == TITLE ? 150 : 50;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(f -> {
    TableColumn<Metadata,?> c=new TableColumn(f.toString());
    c.setCellValueFactory(f == RATING ? cf -> {
      if (cf.getValue() == null)       return null;
      String s=cf.getValue().getRatingPercentAsString();
      if (s.length() > 4)       s=s.substring(0,4);
      return new ReadOnlyObjectWrapper(s);
    }
 : cf -> {
      if (cf.getValue() == null)       return null;
      return new ReadOnlyObjectWrapper(cf.getValue().getField(f));
    }
);
    c.setCellValueFactory(cf -> {
      if (cf.getValue() == null)       return null;
      return new ReadOnlyObjectWrapper(cf.getValue().getField(f));
    }
);
    c.setCellFactory(f == RATING ? (Callback)App.ratingCell.getValue() : DEFAULT_ALIGNED_CELL_FACTORY(f.getType(),""String_Node_Str""));
    c.setUserData(f);
    if (f == Metadata.Field.TRACK || f == Metadata.Field.DISC || f == Metadata.Field.TRACKS_TOTAL || f == Metadata.Field.DISCS_TOTAL) {
      c.setComparator((Comparator)new Comparator<Integer>(){
        @Override public int compare(        Integer o1,        Integer o2){
          return Integer.compare(o1,o2);
        }
      }
);
    }
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.addEventHandler(MOUSE_CLICKED,e -> {
    if (table.isTableHeaderVisible() && e.getY() < table.getTableHeaderHeight())     return;
    if (e.getButton() == PRIMARY) {
      if (e.getClickCount() == 2) {
        Playlist p=new Playlist(listM(table.getItems(),Metadata::toPlaylistItem));
        PlaylistManager.playPlaylistFrom(p,table.getSelectionModel().getSelectedIndex());
      }
    }
 else     if (e.getButton() == SECONDARY) {
      double h=table.isTableHeaderVisible() ? e.getY() - table.getTableHeaderHeight() : e.getY();
      int i=(int)floor(h / table.getFixedCellSize());
      if (!table.getSelectionModel().isSelected(i))       table.getSelectionModel().clearAndSelect(i);
      contxt_menu.show(table,e);
      e.consume();
    }
  }
);
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER) {
      if (!table.getSelectionModel().isEmpty()) {
        Playlist p=new Playlist(listM(table.getItems(),Metadata::toPlaylistItem));
        PlaylistManager.playPlaylistFrom(p,table.getSelectionModel().getSelectedIndex());
      }
    }
 else     if (e.getCode() == DELETE)     DB.removeItems(table.getSelectedItems());
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
  }
);
  table.setOnDragDetected(e -> {
    if (e.getButton() == PRIMARY && e.getY() > table.getFixedCellSize()) {
      Dragboard db=table.startDragAndDrop(TransferMode.COPY);
      DragUtil.setItemList(table.getSelectedItemsCopy(),db);
      e.consume();
    }
  }
);
  table.setOnDragOver(e -> {
    e.acceptTransferModes(COPY);
    e.consume();
  }
);
  table.setOnDragDropped(e -> addNeditDo(DragUtil.getAudioItems(e).stream().map(Item::getFile),false));
  table.addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_RELEASED,consumeOnSecondaryButton);
  table.addEventFilter(ContextMenuEvent.ANY,Event::consume);
  table.setOnScroll(Event::consume);
  d2=Player.librarySelectedItemES.feedFrom(nonNullValuesOf(table.getSelectionModel().selectedItemProperty()));
  d3=Player.librarySelectedItemsES.feedFrom(changesOf(table.getSelectionModel().getSelectedItems()).map(i -> table.getSelectedItemsCopy()));
  taskInfo.setVisible(false);
  InfoTable<Metadata> infoL=new InfoTable(new Label(),table);
  infoL.textFactory=(all,list) -> {
    double d=list.stream().mapToDouble(Metadata::getLengthInMs).sum();
    return DEFAULT_TEXT_FACTORY.apply(all,list) + ""String_Node_Str"" + new FormattedDuration(d);
  }
;
  Region padding=new Region();
  HBox controls=new HBox(controlsBar,infoL.node,padding,taskInfo.message,taskInfo.progressIndicator);
  controls.setSpacing(7);
  controls.setAlignment(Pos.CENTER_LEFT);
  controls.setPadding(new Insets(0,5,0,0));
  HBox.setHgrow(padding,ALWAYS);
  addMenu.setText(""String_Node_Str"");
  remMenu.setText(""String_Node_Str"");
  Icons.setIcon(addMenu,FontAwesomeIconName.PLUS,""String_Node_Str"",""String_Node_Str"");
  Icons.setIcon(remMenu,FontAwesomeIconName.MINUS,""String_Node_Str"",""String_Node_Str"");
  content.getChildren().addAll(table.getRoot(),controls);
  VBox.setVgrow(table.getRoot(),ALWAYS);
}",0.977835162470411
36607,"private void addNedit(boolean edit,boolean dir){
  Stream<File> files;
  if (dir) {
    File f=Enviroment.chooseFile(""String_Node_Str"",true,last_file,root.getScene().getWindow(),AudioFileFormat.filter(Use.APP));
    files=f == null ? Stream.empty() : getFilesAudio(f,Use.APP,Integer.MAX_VALUE);
    if (f != null)     last_file=f;
  }
 else {
    List<File> fs=Enviroment.chooseFiles(""String_Node_Str"",last_file,root.getScene().getWindow(),AudioFileFormat.filter(Use.APP));
    files=fs.stream();
    File f=files == null ? null : getCommonRoot(fs);
    if (f != null)     last_file=f;
  }
  if (files != null) {
    Task ts=runAsTask(""String_Node_Str"",() -> files.map(SimpleItem::new).collect(toList()),(success,result) -> {
      if (success) {
        BiConsumer<Boolean,List<Metadata>> onEnd=(succes,added) -> {
          if (succes & edit)           WidgetManager.use(TaggingFeature.class,NOLAYOUT,w -> w.read(added));
          hideInfo.restart();
        }
;
        Task t=MetadataReader.readAaddMetadata(result,onEnd,false);
        taskInfo.showNbind(t);
      }
 else {
        hideInfo.restart();
      }
    }
);
    taskInfo.showNbind(ts);
  }
}","private void addNedit(boolean edit,boolean dir){
  Stream<File> files;
  if (dir) {
    File f=Enviroment.chooseFile(""String_Node_Str"",true,last_file,root.getScene().getWindow(),AudioFileFormat.filter(Use.APP));
    files=f == null ? Stream.empty() : getFilesAudio(f,Use.APP,Integer.MAX_VALUE);
    if (f != null)     last_file=f;
  }
 else {
    List<File> fs=Enviroment.chooseFiles(""String_Node_Str"",last_file,root.getScene().getWindow(),AudioFileFormat.filter(Use.APP));
    files=fs.stream();
    File f=files == null ? null : getCommonRoot(fs);
    if (f != null)     last_file=f;
  }
  addNeditDo(files,edit);
}",0.668918918918919
36608,"@Override public void close(){
  monitor1.unsubscribe();
  monitor2.unsubscribe();
  monitor3.unsubscribe();
}","@Override public void close(){
  d1.unsubscribe();
  d2.unsubscribe();
  d3.unsubscribe();
}",0.8811881188118812
36609,"@Override public void init(){
  content.getChildren().addAll(table.getRoot());
  VBox.setVgrow(table.getRoot(),Priority.ALWAYS);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 200 : 50;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(mgf -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(mgf.toString(mf));
    c.setCellValueFactory(cf -> {
      if (cf.getValue() == null)       return null;
      return new ReadOnlyObjectWrapper(cf.getValue().getField(mgf));
    }
);
    String no_val=mgf == VALUE ? ""String_Node_Str"" : ""String_Node_Str"";
    c.setCellFactory(mgf == AVG_RATING ? (Callback)App.ratingCell.getValue() : mgf == W_RATING ? (Callback)new NumberRatingCellFactory() : DEFAULT_ALIGNED_CELL_FACTORY(mgf.getType(mf),no_val));
    c.setUserData(mgf);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.setOnMouseClicked(e -> {
    if (e.getY() < table.getTableHeaderHeight())     return;
    if (e.getButton() == PRIMARY) {
      if (e.getClickCount() == 2)       play();
    }
 else     if (e.getButton() == SECONDARY)     contxt_menu.show(this,(TableView)table,e);
  }
);
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER)     play();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
 else     if (e.isControlDown() && e.getCode() == L)     resizeMainColumn();
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    resizeMainColumn();
    return b;
  }
);
  table.getSelectionModel().getSelectedItems().addListener((  Observable o) -> forwardItems(DB.views.getValue(lvl.getValue())));
  table.addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_RELEASED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_CLICKED,consumeOnSecondaryButton);
  table.addEventFilter(ContextMenuEvent.ANY,Event::consume);
  table.setOnScroll(Event::consume);
}","@Override public void init(){
  content.getChildren().addAll(table.getRoot());
  VBox.setVgrow(table.getRoot(),Priority.ALWAYS);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 250 : 70;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(mgf -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(mgf.toString(mf));
    c.setCellValueFactory(cf -> {
      if (cf.getValue() == null)       return null;
      return new ReadOnlyObjectWrapper(cf.getValue().getField(mgf));
    }
);
    String no_val=mgf == VALUE ? ""String_Node_Str"" : ""String_Node_Str"";
    c.setCellFactory(mgf == AVG_RATING ? (Callback)App.ratingCell.getValue() : mgf == W_RATING ? (Callback)new NumberRatingCellFactory() : DEFAULT_ALIGNED_CELL_FACTORY(mgf.getType(mf),no_val));
    c.setUserData(mgf);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.setOnMouseClicked(e -> {
    if (e.getY() < table.getTableHeaderHeight())     return;
    if (e.getButton() == PRIMARY) {
      if (e.getClickCount() == 2)       play();
    }
 else     if (e.getButton() == SECONDARY)     contxt_menu.show(this,(TableView)table,e);
  }
);
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER)     play();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
 else     if (e.isControlDown() && e.getCode() == L)     resizeMainColumn();
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    resizeMainColumn();
    return b;
  }
);
  table.getSelectionModel().getSelectedItems().addListener((  Observable o) -> forwardItems(DB.views.getValue(lvl.getValue())));
  table.addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_RELEASED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_CLICKED,consumeOnSecondaryButton);
  table.addEventFilter(ContextMenuEvent.ANY,Event::consume);
  table.setOnScroll(Event::consume);
}",0.9991666666666666
36610,"@Override public void init(){
  balance=new Balancer();
  soundGrid.add(balance,1,1);
  balance.setPrefSize(50,20);
  balance.setMax(PLAYBACK.getBalanceMax());
  balance.setMin(PLAYBACK.getBalanceMin());
  balance.balanceProperty().bindBidirectional(PLAYBACK.balanceProperty());
  volume.setMin(PLAYBACK.getVolumeMin());
  volume.setMax(PLAYBACK.getVolumeMax());
  volume.setValue(PLAYBACK.getVolume());
  volume.valueProperty().bindBidirectional(PLAYBACK.volumeProperty());
  seeker.bindTime(PLAYBACK.totalTimeProperty(),PLAYBACK.currentTimeProperty());
  entireArea.getChildren().add(seeker);
  AnchorPane.setBottomAnchor(seeker,0.0);
  AnchorPane.setLeftAnchor(seeker,0.0);
  AnchorPane.setRightAnchor(seeker,0.0);
  seeker.setChapterSnapDistance(GUI.snapDistance);
  p1.setOnMouseClicked(e -> rewind());
  f2.setOnMouseClicked(e -> previous());
  f3.setOnMouseClicked(e -> play_pause());
  f4.setOnMouseClicked(e -> next());
  f5.setOnMouseClicked(e -> forward());
  f6.setOnMouseClicked(e -> stop());
  playButtons.getChildren().setAll(p1,f2,f3,f4,f5,f6);
  Tooltip.install(addB,new Tooltip(""String_Node_Str""));
  addB.setOnMouseClicked(e -> {
    if (e.getButton() == MouseButton.PRIMARY)     PlaylistManager.addOrEnqueueFiles(true);
 else     PlaylistManager.addOrEnqueueFolder(true);
  }
);
  entireArea.getChildren().add(addB);
  AnchorPane.setTopAnchor(addB,5d);
  AnchorPane.setLeftAnchor(addB,5d);
  loopB.setOnMouseClicked(e -> PLAYBACK.toggleLoopMode());
  loopB.setScaleX(1.3);
  infoBox.getChildren().add(1,loopB);
  muteB.setOnMouseClicked(e -> cycleMute());
  soundGrid.add(muteB,0,0);
  playingItemMonitoring=Player.playingtem.subscribeToUpdates(this::playingItemChanged);
  playingItemChanged(Player.playingtem.get());
  PLAYBACK.statusProperty().addListener(statusListener);
  statusChanged(PLAYBACK.getStatus());
  PLAYBACK.loopModeProperty().addListener(loopModeListener);
  loopModeChanged(PLAYBACK.getLoopMode());
  PLAYBACK.muteProperty().addListener(muteListener);
  muteChanged(PLAYBACK.getMute(),volume.getValue());
  PLAYBACK.totalTimeProperty().addListener(totalTimeListener);
  PLAYBACK.realTimeProperty().addListener(realTimeListener);
  PLAYBACK.currentTimeProperty().addListener(currTimeListener);
  currTimeListener.invalidated(null);
  ChangeListener<Number> volumeListener=(o,ov,nv) -> muteChanged(PLAYBACK.isMute(),nv.doubleValue());
  volume.valueProperty().addListener(volumeListener);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      e.setDropCompleted(true);
      e.consume();
      if (playDropped) {
        PlaylistManager.playPlaylist(new Playlist(items.stream().map(Item::getURI),true));
      }
 else {
        PlaylistManager.addItems(items);
      }
    }
  }
);
}","@Override public void init(){
  balance=new Balancer();
  soundGrid.add(balance,1,1);
  balance.setPrefSize(50,20);
  balance.setMax(PLAYBACK.getBalanceMax());
  balance.setMin(PLAYBACK.getBalanceMin());
  balance.balanceProperty().bindBidirectional(PLAYBACK.balanceProperty());
  volume.setMin(PLAYBACK.getVolumeMin());
  volume.setMax(PLAYBACK.getVolumeMax());
  volume.setValue(PLAYBACK.getVolume());
  volume.valueProperty().bindBidirectional(PLAYBACK.volumeProperty());
  seeker.bindTime(PLAYBACK.totalTimeProperty(),PLAYBACK.currentTimeProperty());
  entireArea.getChildren().add(seeker);
  AnchorPane.setBottomAnchor(seeker,0.0);
  AnchorPane.setLeftAnchor(seeker,0.0);
  AnchorPane.setRightAnchor(seeker,0.0);
  d1=maintain(GUI.snapDistance,d -> d,seeker.chapterSnapDistance);
  p1.setOnMouseClicked(e -> rewind());
  f2.setOnMouseClicked(e -> previous());
  f3.setOnMouseClicked(e -> play_pause());
  f4.setOnMouseClicked(e -> next());
  f5.setOnMouseClicked(e -> forward());
  f6.setOnMouseClicked(e -> stop());
  playButtons.getChildren().setAll(p1,f2,f3,f4,f5,f6);
  Tooltip.install(addB,new Tooltip(""String_Node_Str""));
  addB.setOnMouseClicked(e -> {
    if (e.getButton() == MouseButton.PRIMARY)     PlaylistManager.addOrEnqueueFiles(true);
 else     PlaylistManager.addOrEnqueueFolder(true);
  }
);
  entireArea.getChildren().add(addB);
  AnchorPane.setTopAnchor(addB,5d);
  AnchorPane.setLeftAnchor(addB,5d);
  loopB.setOnMouseClicked(e -> PLAYBACK.toggleLoopMode());
  loopB.setScaleX(1.3);
  infoBox.getChildren().add(1,loopB);
  muteB.setOnMouseClicked(e -> cycleMute());
  soundGrid.add(muteB,0,0);
  playingItemMonitoring=Player.playingtem.subscribeToUpdates(this::playingItemChanged);
  playingItemChanged(Player.playingtem.get());
  PLAYBACK.statusProperty().addListener(statusListener);
  statusChanged(PLAYBACK.getStatus());
  PLAYBACK.loopModeProperty().addListener(loopModeListener);
  loopModeChanged(PLAYBACK.getLoopMode());
  PLAYBACK.muteProperty().addListener(muteListener);
  muteChanged(PLAYBACK.getMute(),volume.getValue());
  PLAYBACK.totalTimeProperty().addListener(totalTimeListener);
  PLAYBACK.realTimeProperty().addListener(realTimeListener);
  PLAYBACK.currentTimeProperty().addListener(currTimeListener);
  currTimeListener.invalidated(null);
  ChangeListener<Number> volumeListener=(o,ov,nv) -> muteChanged(PLAYBACK.isMute(),nv.doubleValue());
  volume.valueProperty().addListener(volumeListener);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      e.setDropCompleted(true);
      e.consume();
      if (playDropped) {
        PlaylistManager.playPlaylist(new Playlist(items.stream().map(Item::getURI),true));
      }
 else {
        PlaylistManager.addItems(items);
      }
    }
  }
);
}",0.987134909596662
36611,"@Override public void close(){
  playingItemMonitoring.unsubscribe();
  PLAYBACK.statusProperty().removeListener(statusListener);
  PLAYBACK.loopModeProperty().removeListener(loopModeListener);
  PLAYBACK.muteProperty().removeListener(muteListener);
  PLAYBACK.totalTimeProperty().removeListener(totalTimeListener);
  PLAYBACK.realTimeProperty().removeListener(realTimeListener);
  PLAYBACK.currentTimeProperty().removeListener(currTimeListener);
  balance.balanceProperty().unbind();
  volume.valueProperty().unbind();
  seeker.unbindTime();
}","@Override public void close(){
  playingItemMonitoring.unsubscribe();
  PLAYBACK.statusProperty().removeListener(statusListener);
  PLAYBACK.loopModeProperty().removeListener(loopModeListener);
  PLAYBACK.muteProperty().removeListener(muteListener);
  PLAYBACK.totalTimeProperty().removeListener(totalTimeListener);
  PLAYBACK.realTimeProperty().removeListener(realTimeListener);
  PLAYBACK.currentTimeProperty().removeListener(currTimeListener);
  balance.balanceProperty().unbind();
  volume.valueProperty().unbind();
  seeker.unbindTime();
  d1.unsubscribe();
}",0.9819494584837544
36612,"@Override public void init(){
  volume.setMin(PLAYBACK.getVolumeMin());
  volume.setMax(PLAYBACK.getVolumeMax());
  volume.setValue(PLAYBACK.getVolume());
  volume.valueProperty().bindBidirectional(PLAYBACK.volumeProperty());
  seeker.bindTime(PLAYBACK.totalTimeProperty(),PLAYBACK.currentTimeProperty());
  seeker.setChapterSnapDistance(GUI.snapDistance);
  seekerPane.setCenter(seeker);
  prevB=new Icon(STEP_BACKWARD,14,null,PlaylistManager::playPreviousItem);
  playB=new Icon(null,14,null,PLAYBACK::pause_resume);
  stopB=new Icon(STOP,14,null,PLAYBACK::stop);
  nextB=new Icon(STEP_FORWARD,14,null,PlaylistManager::playNextItem);
  controlBox.getChildren().addAll(prevB,playB,stopB,nextB);
  volB=new Icon(null,14,null,PLAYBACK::toggleMute);
  volBox.getChildren().add(0,volB);
  d1=maintain(PLAYBACK.volumeProperty(),v -> muteChanged(PLAYBACK.isMute(),v.doubleValue()));
  d2=maintain(PLAYBACK.muteProperty(),m -> muteChanged(m,PLAYBACK.getVolume()));
  d3=maintain(PLAYBACK.statusProperty(),this::statusChanged);
  d4=Player.playingtem.subscribeToUpdates(this::playbackItemChanged);
  playbackItemChanged(Player.playingtem.get());
  d5=maintain(PLAYBACK.currentTimeProperty(),t -> currentTimeChanged());
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      e.setDropCompleted(true);
      e.consume();
      if (playDropped) {
        PlaylistManager.playPlaylist(new Playlist(items.stream().map(Item::getURI),true));
      }
 else {
        PlaylistManager.addItems(items);
      }
    }
  }
);
}","@Override public void init(){
  volume.setMin(PLAYBACK.getVolumeMin());
  volume.setMax(PLAYBACK.getVolumeMax());
  volume.setValue(PLAYBACK.getVolume());
  volume.valueProperty().bindBidirectional(PLAYBACK.volumeProperty());
  seeker.bindTime(PLAYBACK.totalTimeProperty(),PLAYBACK.currentTimeProperty());
  d6=maintain(GUI.snapDistance,d -> d,seeker.chapterSnapDistance);
  seekerPane.setCenter(seeker);
  prevB=new Icon(STEP_BACKWARD,14,null,PlaylistManager::playPreviousItem);
  playB=new Icon(null,14,null,PLAYBACK::pause_resume);
  stopB=new Icon(STOP,14,null,PLAYBACK::stop);
  nextB=new Icon(STEP_FORWARD,14,null,PlaylistManager::playNextItem);
  controlBox.getChildren().addAll(prevB,playB,stopB,nextB);
  volB=new Icon(null,14,null,PLAYBACK::toggleMute);
  volBox.getChildren().add(0,volB);
  d1=maintain(PLAYBACK.volumeProperty(),v -> muteChanged(PLAYBACK.isMute(),v.doubleValue()));
  d2=maintain(PLAYBACK.muteProperty(),m -> muteChanged(m,PLAYBACK.getVolume()));
  d3=maintain(PLAYBACK.statusProperty(),this::statusChanged);
  d4=Player.playingtem.subscribeToUpdates(this::playbackItemChanged);
  playbackItemChanged(Player.playingtem.get());
  d5=maintain(PLAYBACK.currentTimeProperty(),t -> currentTimeChanged());
  root.setOnDragOver(DragUtil.audioDragAccepthandler);
  root.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      e.setDropCompleted(true);
      e.consume();
      if (playDropped) {
        PlaylistManager.playPlaylist(new Playlist(items.stream().map(Item::getURI),true));
      }
 else {
        PlaylistManager.addItems(items);
      }
    }
  }
);
  ds=asList(d1,d2,d3,d4,d5,d6);
}",0.9681681681681682
36613,"@Override public void close(){
  d1.unsubscribe();
  d2.unsubscribe();
  d3.unsubscribe();
  d4.unsubscribe();
  d5.unsubscribe();
  seeker.unbindTime();
  volume.valueProperty().unbind();
}","@Override public void close(){
  ds.forEach(Subscription::unsubscribe);
  seeker.unbindTime();
  volume.valueProperty().unbind();
}",0.6728971962616822
36614,"@Override public void init(){
  items.addListener((  ListChangeListener.Change<? extends Item> c) -> {
    System.out.println(""String_Node_Str"");
    while (c.next()) {
      if (c.wasRemoved()) {
        List<? extends Item> rem=c.getRemoved();
        metas.removeIf(m -> rem.stream().anyMatch(i -> i.same(m)));
        populate(metas);
      }
 else       if (c.wasAdded()) {
        System.out.println(""String_Node_Str"" + c.getAddedSize());
        List<Metadata> ready=new ArrayList();
        List<Item> needs_read=new ArrayList();
        c.getAddedSubList().stream().filter(i -> !i.isCorrupt(Use.DB) && i.isFileBased()).forEach(i -> {
          if (i instanceof Metadata)           ready.add((Metadata)i);
 else           needs_read.add(i);
        }
);
        if (metaReader != null && metaReader.isRunning()) {
          System.out.println(""String_Node_Str"");
        }
        MetadataReader.readMetadata(needs_read,(success,result) -> {
          if (success) {
            ready.addAll(result);
            ready.forEach(i -> {
              if (!metas.stream().anyMatch(ii -> ii.same(i)))               metas.add(i);
            }
);
            System.out.println(result.size() + ""String_Node_Str"" + ""String_Node_Str""+ metas.size());
            populate(metas);
            Log.info(""String_Node_Str"");
          }
 else {
            Log.info(""String_Node_Str"");
          }
          hideProgress();
        }
);
        showProgressReading();
      }
    }
  }
);
  CoverV=new Thumbnail(200);
  CoverV.setDragImage(false);
  coverContainer.setCenter(CoverV.getPane());
  grid.add(MoodF,1,14,2,1);
  fields.add(new TagField(TitleF,TITLE));
  fields.add(new TagField(AlbumF,ALBUM));
  fields.add(new TagField(ArtistF,ARTIST));
  fields.add(new TagField(AlbumArtistF,ALBUM_ARTIST));
  fields.add(new TagField(ComposerF,COMPOSER));
  fields.add(new TagField(PublisherF,PUBLISHER));
  fields.add(new TagField(TrackF,TRACK,isIntS));
  fields.add(new TagField(TracksTotalF,TRACKS_TOTAL,isIntS));
  fields.add(new TagField(DiscF,DISC,isIntS));
  fields.add(new TagField(DiscsTotalF,DISCS_TOTAL,isIntS));
  fields.add(new TagField(GenreF,GENRE));
  fields.add(new TagField(CategoryF,CATEGORY));
  fields.add(new TagField(YearF,YEAR,isPastYearS));
  fields.add(new TagField(RatingF,RATING_RAW));
  fields.add(new TagField(RatingPF,RATING,IsBetween0And1));
  fields.add(new TagField(PlaycountF,PLAYCOUNT));
  fields.add(new TagField(CommentF,Metadata.Field.COMMENT));
  fields.add(new TagField(MoodF,MOOD));
  fields.add(new TagField(Custom1F,CUSTOM1));
  fields.add(new TagField(Custom2F,CUSTOM2));
  fields.add(new TagField(Custom3F,CUSTOM3));
  fields.add(new TagField(Custom4F,CUSTOM4));
  fields.add(new TagField(Custom5F,CUSTOM5));
  fields.add(new TagField(LyricsA,LYRICS));
  Custom1F.setEditable(false);
  ColorF.disableProperty().bind(Custom1F.disabledProperty());
  ColorF.valueProperty().addListener((o,ov,nv) -> Custom1F.setText(new ColorParser().toS(nv)));
  entireArea.setOnMousePressed(e -> {
    entireArea.requestFocus();
    fields.forEach(TagField::onLooseFocus);
  }
);
  entireArea.setOnKeyPressed(e -> {
    if (e.getCode() == KeyCode.ENTER)     write();
  }
);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragDropped(drag_dropped_handler);
  coverContainer.setOnMouseClicked(e -> {
    if (e.getButton() != PRIMARY || metas.isEmpty())     return;
    File initial_dir=metas.stream().filter(Item::isFileBased).findFirst().map(Item::getLocation).orElse(new File(""String_Node_Str""));
    File f=Enviroment.chooseFile(""String_Node_Str"",false,initial_dir,entireArea.getScene().getWindow());
    if (f != null)     addImg(f);
  }
);
  CoverV.getPane().setOnDragOver(t -> {
    Dragboard d=t.getDragboard();
    if (d.hasFiles() && d.getFiles().stream().anyMatch(ImageFileFormat::isSupported))     t.acceptTransferModes(TransferMode.ANY);
  }
);
  CoverV.getPane().setOnDragDropped(t -> {
    Dragboard d=t.getDragboard();
    if (d.hasFiles() && d.getFiles().stream().anyMatch(ImageFileFormat::isSupported)) {
      d.getFiles().stream().filter(ImageFileFormat::isSupported).findAny().ifPresent(this::addImg);
      t.setDropCompleted(true);
      t.consume();
    }
  }
);
  CoverV.getPane().setOnDragDetected(e -> CoverV.getPane().startFullDrag());
  entireArea.addEventFilter(MOUSE_DRAG_RELEASED,e -> {
    Point2D click=CoverV.getPane().sceneToLocal(e.getSceneX(),e.getSceneY());
    if (e.getGestureSource().equals(CoverV.getPane()) && !CoverV.getPane().contains(click)) {
      addImg(null);
    }
  }
);
  coverContainer.addEventHandler(MOUSE_EXITED,e -> img_border.setOpacity(0));
  coverContainer.addEventHandler(MOUSE_ENTERED,e -> {
    if (!isEmpty())     img_border.setOpacity(1);
  }
);
  img_border.setOpacity(0);
  AnchorPane clip=new AnchorPane();
  clip.layoutXProperty().bind(img_border.layoutXProperty());
  clip.layoutYProperty().bind(img_border.layoutYProperty());
  clip.prefWidthProperty().bind(img_border.widthProperty());
  clip.prefHeightProperty().bind(img_border.heightProperty());
  Rectangle r1=new Rectangle(35,35);
  Rectangle r2=new Rectangle(25,25);
  Rectangle r3=new Rectangle(25,25);
  Rectangle r4=new Rectangle(35,35);
  clip.getChildren().addAll(r1,r2,r3,r4);
  r1.relocate(0,0);
  r2.relocate(175,0);
  r3.relocate(0,175);
  r4.relocate(175,175);
  img_border.setClip(clip);
  RatingF.setOnKeyReleased(e -> setPR());
  RatingF.setOnMousePressed(e -> setPR());
  RatingPF.setOnKeyReleased(e -> setR());
  RatingPF.setOnMousePressed(e -> setR());
  infoL.setOnMouseClicked(e -> showItemsPopup());
  infoL.setCursor(Cursor.HAND);
}","@Override public void init(){
  items.addListener((  ListChangeListener.Change<? extends Item> c) -> {
    System.out.println(""String_Node_Str"");
    while (c.next()) {
      if (c.wasRemoved()) {
        List<? extends Item> rem=c.getRemoved();
        metas.removeIf(m -> rem.stream().anyMatch(i -> i.same(m)));
        populate(metas);
      }
 else       if (c.wasAdded()) {
        System.out.println(""String_Node_Str"" + c.getAddedSize());
        List<Metadata> ready=new ArrayList();
        List<Item> needs_read=new ArrayList();
        c.getAddedSubList().stream().filter(i -> !i.isCorrupt(Use.DB) && i.isFileBased()).forEach(i -> {
          if (i instanceof Metadata)           ready.add((Metadata)i);
 else           needs_read.add(i);
        }
);
        if (metaReader != null && metaReader.isRunning()) {
          System.out.println(""String_Node_Str"");
        }
        MetadataReader.readMetadata(needs_read,(success,result) -> {
          if (success) {
            ready.addAll(result);
            ready.forEach(i -> {
              if (!metas.stream().anyMatch(ii -> ii.same(i)))               metas.add(i);
            }
);
            System.out.println(result.size() + ""String_Node_Str"" + ""String_Node_Str""+ metas.size());
            populate(metas);
            Log.info(""String_Node_Str"");
          }
 else {
            Log.info(""String_Node_Str"");
          }
          hideProgress();
        }
);
        showProgressReading();
      }
    }
  }
);
  CoverV=new Thumbnail(200);
  CoverV.setDragImage(false);
  coverContainer.setCenter(CoverV.getPane());
  grid.add(MoodF,1,14,2,1);
  fields.add(new TagField(TitleF,TITLE));
  fields.add(new TagField(AlbumF,ALBUM));
  fields.add(new TagField(ArtistF,ARTIST));
  fields.add(new TagField(AlbumArtistF,ALBUM_ARTIST));
  fields.add(new TagField(ComposerF,COMPOSER));
  fields.add(new TagField(PublisherF,PUBLISHER));
  fields.add(new TagField(TrackF,TRACK,isIntS));
  fields.add(new TagField(TracksTotalF,TRACKS_TOTAL,isIntS));
  fields.add(new TagField(DiscF,DISC,isIntS));
  fields.add(new TagField(DiscsTotalF,DISCS_TOTAL,isIntS));
  fields.add(new TagField(GenreF,GENRE));
  fields.add(new TagField(CategoryF,CATEGORY));
  fields.add(new TagField(YearF,YEAR,isPastYearS));
  fields.add(new TagField(RatingF,RATING_RAW));
  fields.add(new TagField(RatingPF,RATING,IsBetween0And1));
  fields.add(new TagField(PlaycountF,PLAYCOUNT));
  fields.add(new TagField(CommentF,Metadata.Field.COMMENT));
  fields.add(new TagField(MoodF,MOOD));
  fields.add(new TagField(Custom1F,CUSTOM1));
  fields.add(new TagField(Custom2F,CUSTOM2));
  fields.add(new TagField(Custom3F,CUSTOM3));
  fields.add(new TagField(Custom4F,CUSTOM4));
  fields.add(new TagField(Custom5F,CUSTOM5));
  fields.add(new TagField(LyricsA,LYRICS));
  Custom1F.setEditable(false);
  ColorF.disableProperty().bind(Custom1F.disabledProperty());
  ColorF.valueProperty().addListener((o,ov,nv) -> Custom1F.setText(new ColorParser().toS(nv)));
  entireArea.setOnMousePressed(e -> {
    entireArea.requestFocus();
    fields.forEach(TagField::onLooseFocus);
  }
);
  entireArea.setOnKeyPressed(e -> {
    if (e.getCode() == KeyCode.ENTER)     write();
  }
);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragDropped(drag_dropped_handler);
  coverContainer.setOnMouseClicked(e -> {
    if (e.getButton() != PRIMARY || metas.isEmpty())     return;
    File initial_dir=metas.stream().filter(Item::isFileBased).findFirst().map(Item::getLocation).orElse(new File(""String_Node_Str""));
    File f=Enviroment.chooseFile(""String_Node_Str"",false,initial_dir,entireArea.getScene().getWindow());
    if (f != null)     addImg(f);
  }
);
  CoverV.getPane().setOnDragOver(t -> {
    Dragboard d=t.getDragboard();
    if (d.hasFiles() && d.getFiles().stream().anyMatch(ImageFileFormat::isSupported))     t.acceptTransferModes(TransferMode.ANY);
  }
);
  CoverV.getPane().setOnDragDropped(t -> {
    Dragboard d=t.getDragboard();
    if (d.hasFiles() && d.getFiles().stream().anyMatch(ImageFileFormat::isSupported)) {
      d.getFiles().stream().filter(ImageFileFormat::isSupported).findAny().ifPresent(this::addImg);
      t.setDropCompleted(true);
      t.consume();
    }
  }
);
  CoverV.getPane().setOnDragDetected(e -> CoverV.getPane().startFullDrag());
  entireArea.addEventFilter(MOUSE_DRAG_RELEASED,e -> {
    Point2D click=CoverV.getPane().sceneToLocal(e.getSceneX(),e.getSceneY());
    if (e.getGestureSource().equals(CoverV.getPane()) && !CoverV.getPane().contains(click)) {
      addImg(null);
    }
  }
);
  Text icon=Icons.createIcon(PLUS,60);
  icon.setMouseTransparent(true);
  coverSuperContainer.getChildren().add(icon);
  icon.setOpacity(0);
  coverContainer.addEventHandler(MOUSE_EXITED,e -> icon.setOpacity(0));
  coverContainer.addEventHandler(MOUSE_ENTERED,e -> icon.setOpacity(isEmpty() ? 0 : 1));
  RatingF.setOnKeyReleased(e -> setPR());
  RatingF.setOnMousePressed(e -> setPR());
  RatingPF.setOnKeyReleased(e -> setR());
  RatingPF.setOnMousePressed(e -> setR());
  infoL.setOnMouseClicked(e -> showItemsPopup());
  infoL.setCursor(Cursor.HAND);
}",0.9226765799256506
36615,"@Override public void init(){
  Thumbnail thumb=new Thumbnail();
  thumb.setBorderToImage(true);
  layout=new ImageFlowPane(entireArea,thumb);
  layout.setMinContentWidth(200);
  layout.setMinContentHeight(120);
  layout.setGap(5);
  tiles.widthProperty().addListener((o,ov,nv) -> resize(nv.doubleValue(),tiles.getHeight()));
  tiles.heightProperty().addListener((o,ov,nv) -> resize(tiles.getWidth(),nv.doubleValue()));
  tiles.setAlignment(TOP_LEFT);
  tiles.setTileAlignment(CENTER_LEFT);
  rating.setGraphic(rater);
  rating.setContentDisplay(ContentDisplay.RIGHT);
  labels=Arrays.asList(title,track,disc,gap1,artist,album,album_artist,year,genre,composer,publisher,gap2,rating,playcount,comment,category,gap3,filesize,filename,format,bitrate,encoding,location);
  layout.addChild(tiles);
  Util.setAnchors(tiles,3);
  rater.max.bind(App.maxRating);
  rater.partialRating.bind(App.partialRating);
  rater.updateOnHover.bind(App.hoverRating);
  rater.editable.bind(App.allowRatingChange);
  rater.setOnRatingChanged(r -> MetadataWriter.useToRate(data,r));
  rater.setOnMouseClicked(e -> {
    if (e.getButton() == SECONDARY)     rater.toggleSkin();
  }
);
  rater.visibleProperty().bind(rating.disabledProperty().not());
  thumb.getPane().setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      layout.toggleShowContent();
      showFields.setValue(layout.isShowContent());
    }
  }
);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragEntered(e -> {
    if (hasImage(e.getDragboard())) {
      ((Area)getActivityNode().getUserData()).setActivityVisible(true);
      entireArea.getScene().getWindow().requestFocus();
    }
  }
);
  entireArea.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       populateGui(items.get(0).getMetadata());
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  actPane=new ActionChooser();
  actPane.setOnDragExited(e -> ((Area)actPane.getUserData()).setActivityVisible(false));
  Labeled copyB=actPane.addIcon(PLUS_SQUARE,""String_Node_Str"");
  copyB.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  copyB.setOnDragDropped(e -> {
    if (data != null && data.isFileBased()) {
      DragUtil.doWithImages(e,imgs -> {
        int n=imgs.size();
        if (n == 1) {
          copyFileSafe(imgs.get(0),data.getLocation(),""String_Node_Str"");
          Platform.runLater(cover_source::applyValue);
        }
 else         if (n > 1) {
        }
      }
);
      ((Area)actPane.getUserData()).setActivityVisible(false);
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  Labeled coverB=actPane.addIcon(PLUS,""String_Node_Str"");
  coverB.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  coverB.setOnDragDropped(e -> {
    if (data != null && data.isFileBased()) {
      DragUtil.doWithImages(e,imgs -> copyFiles(imgs,data.getLocation()));
      ((Area)actPane.getUserData()).setActivityVisible(false);
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  Labeled lvlB=actPane.addIcon(SQUARE_ALT,""String_Node_Str"",""String_Node_Str"",false);
  lvlB.setContentDisplay(CENTER);
  lvlB.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      lvlB.setText(""String_Node_Str"");
    }
    if (e.getButton() == SECONDARY) {
      lvlB.setText(""String_Node_Str"");
    }
    e.consume();
  }
);
}","@Override public void init(){
  Thumbnail thumb=new Thumbnail();
  thumb.setBorderToImage(true);
  layout=new ImageFlowPane(entireArea,thumb);
  layout.setMinContentWidth(200);
  layout.setMinContentHeight(120);
  layout.setGap(5);
  tiles.widthProperty().addListener((o,ov,nv) -> resize(nv.doubleValue(),tiles.getHeight()));
  tiles.heightProperty().addListener((o,ov,nv) -> resize(tiles.getWidth(),nv.doubleValue()));
  tiles.setAlignment(TOP_LEFT);
  tiles.setTileAlignment(CENTER_LEFT);
  rating.setGraphic(rater);
  rating.setContentDisplay(ContentDisplay.RIGHT);
  labels=Arrays.asList(title,track,disc,gap1,artist,album,album_artist,year,genre,composer,publisher,gap2,rating,playcount,comment,category,gap3,filesize,filename,format,bitrate,encoding,location);
  layout.addChild(tiles);
  Util.setAnchors(tiles,3);
  rater.icons.bind(App.maxRating);
  rater.partialRating.bind(App.partialRating);
  rater.updateOnHover.bind(App.hoverRating);
  rater.editable.bind(App.allowRatingChange);
  rater.setOnRatingChanged(r -> MetadataWriter.useToRate(data,r));
  rater.setOnMouseClicked(e -> {
    if (e.getButton() == SECONDARY)     rater.toggleSkin();
  }
);
  rater.visibleProperty().bind(rating.disabledProperty().not());
  thumb.getPane().setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      layout.toggleShowContent();
      showFields.setValue(layout.isShowContent());
    }
  }
);
  entireArea.setOnDragOver(DragUtil.audioDragAccepthandler);
  entireArea.setOnDragEntered(e -> {
    if (hasImage(e.getDragboard())) {
      ((Area)getActivityNode().getUserData()).setActivityVisible(true);
      entireArea.getScene().getWindow().requestFocus();
    }
  }
);
  entireArea.setOnDragDropped(e -> {
    if (DragUtil.hasAudio(e.getDragboard())) {
      List<Item> items=DragUtil.getAudioItems(e);
      if (!items.isEmpty())       populateGui(items.get(0).getMetadata());
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  actPane=new ActionChooser();
  actPane.setOnDragExited(e -> ((Area)actPane.getUserData()).setActivityVisible(false));
  Labeled copyB=actPane.addIcon(PLUS_SQUARE,""String_Node_Str"");
  copyB.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  copyB.setOnDragDropped(e -> {
    if (data != null && data.isFileBased()) {
      DragUtil.doWithImages(e,imgs -> {
        int n=imgs.size();
        if (n == 1) {
          copyFileSafe(imgs.get(0),data.getLocation(),""String_Node_Str"");
          Platform.runLater(cover_source::applyValue);
        }
 else         if (n > 1) {
        }
      }
);
      ((Area)actPane.getUserData()).setActivityVisible(false);
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  Labeled coverB=actPane.addIcon(PLUS,""String_Node_Str"");
  coverB.setOnDragOver(DragUtil.imageFileDragAccepthandler);
  coverB.setOnDragDropped(e -> {
    if (data != null && data.isFileBased()) {
      DragUtil.doWithImages(e,imgs -> copyFiles(imgs,data.getLocation()));
      ((Area)actPane.getUserData()).setActivityVisible(false);
      e.setDropCompleted(true);
      e.consume();
    }
  }
);
  srcB=actPane.addIcon(SQUARE_ALT,""String_Node_Str"");
  srcB.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY)     readMode.setNextNapplyValue();
    if (e.getButton() == SECONDARY)     readMode.setPreviousNapplyValue();
    ReadMode r=readMode.getValue();
    GlyphIconName i=r == PLAYING ? PLAY : ANDROID;
    srcB.setText(i.characterToString());
    srcB.setStyle(String.format(""String_Node_Str"",i.getFontFamily(),15));
    srcB.getStyleClass().add(""String_Node_Str"");
    actPane.description.setText(""String_Node_Str"" + readMode.getValue().toString() + ""String_Node_Str""+ readMode.next().toString()+ ""String_Node_Str""+ ""String_Node_Str""+ readMode.getValue().toString()+ ""String_Node_Str""+ readMode.previous().toString());
  }
);
  srcB.setOnMouseEntered(e -> {
    actPane.description.setText(""String_Node_Str"" + readMode.getValue().toString() + ""String_Node_Str""+ readMode.next().toString()+ ""String_Node_Str""+ ""String_Node_Str""+ readMode.getValue().toString()+ ""String_Node_Str""+ readMode.previous().toString());
  }
);
  Labeled lvlB=actPane.addIcon(SQUARE_ALT,""String_Node_Str"",""String_Node_Str"",false);
  lvlB.setContentDisplay(CENTER);
  lvlB.setOnMouseClicked(e -> {
    if (e.getButton() == PRIMARY) {
      lvlB.setText(""String_Node_Str"");
    }
    if (e.getButton() == SECONDARY) {
      lvlB.setText(""String_Node_Str"");
    }
    e.consume();
  }
);
}",0.8354719857705502
36616,"/** 
 * HELPER METHODS 
 */
private void populateGui(Metadata m){
  if (!allowNoContent && m == Metadata.EMPTY)   return;
  data=m;
  if (m == null) {
    clear();
  }
 else {
    setCover(cover_source.getValue());
    rater.setRating(m.getRatingToStars(rater.max.get()));
    title.setText(""String_Node_Str"" + m.getTitle());
    track.setText(""String_Node_Str"" + m.getTrackInfo());
    disc.setText(""String_Node_Str"" + m.getDiscInfo());
    gap1.setText(""String_Node_Str"");
    artist.setText(""String_Node_Str"" + m.getArtist());
    album.setText(""String_Node_Str"" + m.getAlbum());
    album_artist.setText(""String_Node_Str"" + m.getAlbumArtist());
    year.setText(""String_Node_Str"" + m.getYear());
    genre.setText(""String_Node_Str"" + m.getGenre());
    composer.setText(""String_Node_Str"" + m.getComposer());
    publisher.setText(""String_Node_Str"" + m.getPublisher());
    gap2.setText(""String_Node_Str"");
    rating.setText(""String_Node_Str"" + m.getRatingAsString());
    playcount.setText(""String_Node_Str"" + m.getPlaycountAsString());
    comment.setText(""String_Node_Str"" + ""String_Node_Str"");
    category.setText(""String_Node_Str"" + m.getCategory());
    gap3.setText(""String_Node_Str"");
    filesize.setText(""String_Node_Str"" + m.getFilesize().toString());
    filename.setText(""String_Node_Str"" + m.getFilenameFull());
    format.setText(""String_Node_Str"" + m.getFormat());
    bitrate.setText(""String_Node_Str"" + m.getBitrate().toString());
    encoding.setText(""String_Node_Str"" + m.getEncoder());
    location.setText(""String_Node_Str"" + m.getPath());
  }
  setVisibility();
}","/** 
 * HELPER METHODS 
 */
private void populateGui(Metadata m){
  if (!allowNoContent && m == Metadata.EMPTY)   return;
  data=m;
  if (m == null) {
    clear();
  }
 else {
    setCover(cover_source.getValue());
    rater.rating.set(m.getRatingPercent());
    title.setText(""String_Node_Str"" + m.getTitle());
    track.setText(""String_Node_Str"" + m.getTrackInfo());
    disc.setText(""String_Node_Str"" + m.getDiscInfo());
    gap1.setText(""String_Node_Str"");
    artist.setText(""String_Node_Str"" + m.getArtist());
    album.setText(""String_Node_Str"" + m.getAlbum());
    album_artist.setText(""String_Node_Str"" + m.getAlbumArtist());
    year.setText(""String_Node_Str"" + m.getYear());
    genre.setText(""String_Node_Str"" + m.getGenre());
    composer.setText(""String_Node_Str"" + m.getComposer());
    publisher.setText(""String_Node_Str"" + m.getPublisher());
    gap2.setText(""String_Node_Str"");
    rating.setText(""String_Node_Str"" + m.getRatingAsString());
    playcount.setText(""String_Node_Str"" + m.getPlaycountAsString());
    comment.setText(""String_Node_Str"" + ""String_Node_Str"");
    category.setText(""String_Node_Str"" + m.getCategory());
    gap3.setText(""String_Node_Str"");
    filesize.setText(""String_Node_Str"" + m.getFilesize().toString());
    filename.setText(""String_Node_Str"" + m.getFilenameFull());
    format.setText(""String_Node_Str"" + m.getFormat());
    bitrate.setText(""String_Node_Str"" + m.getBitrate().toString());
    encoding.setText(""String_Node_Str"" + m.getEncoder());
    location.setText(""String_Node_Str"" + m.getPath());
  }
  setVisibility();
}",0.9816919191919192
36617,"private void clear(){
  rater.setRating(0d);
  title.setText(""String_Node_Str"");
  track.setText(""String_Node_Str"");
  disc.setText(""String_Node_Str"");
  gap1.setText(""String_Node_Str"");
  artist.setText(""String_Node_Str"");
  album.setText(""String_Node_Str"");
  album_artist.setText(""String_Node_Str"");
  year.setText(""String_Node_Str"");
  genre.setText(""String_Node_Str"");
  composer.setText(""String_Node_Str"");
  publisher.setText(""String_Node_Str"");
  gap2.setText(""String_Node_Str"");
  rating.setText(""String_Node_Str"");
  playcount.setText(""String_Node_Str"");
  comment.setText(""String_Node_Str"");
  category.setText(""String_Node_Str"");
  gap3.setText(""String_Node_Str"");
  filesize.setText(""String_Node_Str"");
  filename.setText(""String_Node_Str"");
  format.setText(""String_Node_Str"");
  bitrate.setText(""String_Node_Str"");
  encoding.setText(""String_Node_Str"");
  location.setText(""String_Node_Str"");
}","private void clear(){
  rater.rating.set(0d);
  title.setText(""String_Node_Str"");
  track.setText(""String_Node_Str"");
  disc.setText(""String_Node_Str"");
  gap1.setText(""String_Node_Str"");
  artist.setText(""String_Node_Str"");
  album.setText(""String_Node_Str"");
  album_artist.setText(""String_Node_Str"");
  year.setText(""String_Node_Str"");
  genre.setText(""String_Node_Str"");
  composer.setText(""String_Node_Str"");
  publisher.setText(""String_Node_Str"");
  gap2.setText(""String_Node_Str"");
  rating.setText(""String_Node_Str"");
  playcount.setText(""String_Node_Str"");
  comment.setText(""String_Node_Str"");
  category.setText(""String_Node_Str"");
  gap3.setText(""String_Node_Str"");
  filesize.setText(""String_Node_Str"");
  filename.setText(""String_Node_Str"");
  format.setText(""String_Node_Str"");
  bitrate.setText(""String_Node_Str"");
  encoding.setText(""String_Node_Str"");
  location.setText(""String_Node_Str"");
}",0.9895547003848268
36618,"private List<Metadata> filerList(List<Metadata> list){
  List<Metadata> l;
  if (table.getSelectionModel().isEmpty()) {
    l=list;
  }
 else {
    Predicate<Metadata> p=table.getSelectedItems().stream().map(MetadataGroup::toMetadataPredicate).reduce(Predicate::or).orElse(isFALSE);
    l=list.stream().filter(p).collect(toList());
  }
  return l;
}","private List<Metadata> filerList(List<Metadata> list){
  List<MetadataGroup> mgs=table.getSelectionModel().isEmpty() ? table.getItems() : table.getSelectedItems();
  Predicate<Metadata> p=mgs.stream().map(MetadataGroup::toMetadataPredicate).reduce(Predicate::or).orElse(isFALSE);
  return list.stream().filter(p).collect(toList());
}",0.3724340175953079
36619,"@Override public void init(){
  content.getChildren().addAll(table.getRoot());
  VBox.setVgrow(table.getRoot(),Priority.ALWAYS);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 200 : 50;
    boolean v=f != AVG_RATING || f != YEAR;
    return new ColumnInfo(f.toString(),f.ordinal(),v,w);
  }
);
  table.setColumnFactory(mgf -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(mgf.toString(mf));
    c.setCellValueFactory(cf -> {
      if (cf.getValue() == null)       return null;
      return new ReadOnlyObjectWrapper(cf.getValue().getField(mgf));
    }
);
    String no_val=mgf == VALUE ? ""String_Node_Str"" : ""String_Node_Str"";
    c.setCellFactory(mgf == AVG_RATING ? (Callback)App.ratingCell.getValue() : mgf == W_RATING ? (Callback)new NumberRatingCellFactory() : DEFAULT_ALIGNED_CELL_FACTORY(mgf.getType(mf),no_val));
    c.setUserData(mgf);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.setOnMouseClicked(e -> {
    if (e.getY() < table.getTableHeaderHeight())     return;
    if (e.getButton() == PRIMARY) {
      if (e.getClickCount() == 2)       play();
    }
 else     if (e.getButton() == SECONDARY)     contxt_menu.show(this,(TableView)table,e);
  }
);
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER)     play();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
 else     if (e.isControlDown() && e.getCode() == L)     resizeMainColumn();
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    resizeMainColumn();
    return b;
  }
);
  table.getSelectionModel().getSelectedItems().addListener((  Observable o) -> forwardItems(DB.views.getValue(lvl.getValue())));
  table.addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_RELEASED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_CLICKED,consumeOnSecondaryButton);
  table.addEventFilter(ContextMenuEvent.ANY,Event::consume);
  table.setOnScroll(Event::consume);
}","@Override public void init(){
  content.getChildren().addAll(table.getRoot());
  VBox.setVgrow(table.getRoot(),Priority.ALWAYS);
  table.setFixedCellSize(GUI.font.getValue().getSize() + 5);
  table.getSelectionModel().setSelectionMode(MULTIPLE);
  table.setkeyNameColMapper(name -> ""String_Node_Str"".equals(name) ? name : MetadataGroup.Field.valueOfEnumString(name).toString());
  table.setColumnStateFacory(f -> {
    double w=f == VALUE ? 200 : 50;
    return new ColumnInfo(f.toString(),f.ordinal(),f.isCommon(),w);
  }
);
  table.setColumnFactory(mgf -> {
    Metadata.Field mf=fieldFilter.getValue();
    TableColumn<MetadataGroup,?> c=new TableColumn(mgf.toString(mf));
    c.setCellValueFactory(cf -> {
      if (cf.getValue() == null)       return null;
      return new ReadOnlyObjectWrapper(cf.getValue().getField(mgf));
    }
);
    String no_val=mgf == VALUE ? ""String_Node_Str"" : ""String_Node_Str"";
    c.setCellFactory(mgf == AVG_RATING ? (Callback)App.ratingCell.getValue() : mgf == W_RATING ? (Callback)new NumberRatingCellFactory() : DEFAULT_ALIGNED_CELL_FACTORY(mgf.getType(mf),no_val));
    c.setUserData(mgf);
    return c;
  }
);
  App.ratingCell.addListener((o,ov,nv) -> table.getColumn(AVG_RATING).ifPresent(c -> c.setCellFactory((Callback)nv)));
  columnInfo=table.getDefaultColumnInfo();
  table.setOnMouseClicked(e -> {
    if (e.getY() < table.getTableHeaderHeight())     return;
    if (e.getButton() == PRIMARY) {
      if (e.getClickCount() == 2)       play();
    }
 else     if (e.getButton() == SECONDARY)     contxt_menu.show(this,(TableView)table,e);
  }
);
  table.setOnKeyReleased(e -> {
    if (e.getCode() == ENTER)     play();
 else     if (e.getCode() == ESCAPE)     table.getSelectionModel().clearSelection();
 else     if (e.isControlDown() && e.getCode() == L)     resizeMainColumn();
  }
);
  table.setColumnResizePolicy(resize -> {
    boolean b=UNCONSTRAINED_RESIZE_POLICY.call(resize);
    resizeMainColumn();
    return b;
  }
);
  table.getSelectionModel().getSelectedItems().addListener((  Observable o) -> forwardItems(DB.views.getValue(lvl.getValue())));
  table.addEventFilter(MOUSE_PRESSED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_RELEASED,consumeOnSecondaryButton);
  table.addEventFilter(MOUSE_CLICKED,consumeOnSecondaryButton);
  table.addEventFilter(ContextMenuEvent.ANY,Event::consume);
  table.setOnScroll(Event::consume);
}",0.9811711152493277
36620,"/** 
 * Set skin by its name (filename of the stylesheet). Use """" to set default skin. <p> Fires skin change event.
 * @param skincss 
 */
default void setSkinCurrent(String skincss){
  if (skincss.isEmpty()) {
    getSkinOwner().getStylesheets().clear();
    skinIndexProperty().set(-1);
  }
 else {
    List<String> skins=getSkins();
    getSkinOwner().getStylesheets().setAll(skincss);
    skinIndexProperty().set(skins.indexOf(skincss));
  }
  if (getOnSkinChanged() != null)   getOnSkinChanged().accept(skincss);
  System.out.println(skincss);
}","/** 
 * Set skin by its name (filename of the stylesheet). Use """" to set default skin. <p> Fires skin change event.
 * @param skincss 
 */
default void setSkinCurrent(String skincss){
  if (skincss.isEmpty()) {
    getSkinOwner().getStylesheets().clear();
    skinIndexProperty().set(-1);
  }
 else {
    List<String> skins=getSkins();
    getSkinOwner().getStylesheets().setAll(skincss);
    skinIndexProperty().set(skins.indexOf(skincss));
  }
  if (getOnSkinChanged() != null)   getOnSkinChanged().accept(skincss);
}",0.971000935453695
36621,"public Icon addIcon(FontAwesomeIconName icon,String text,String descriptn,boolean drag_activated){
  Icon l=new Icon(icon,icon_size,descriptn);
  l.setContentDisplay(ContentDisplay.TOP);
  l.setFont(new Font(l.getFont().getName(),13));
  l.setText(text);
  l.scaleYProperty().bind(l.scaleXProperty());
  if (drag_activated) {
    l.addEventHandler(DRAG_ENTERED,e -> description.setText(descriptn));
    l.addEventHandler(DRAG_EXITED,e -> description.setText(""String_Node_Str""));
    l.addEventHandler(DRAG_ENTERED,e -> l.setScaleX(1.1));
    l.addEventHandler(DRAG_EXITED,e -> l.setScaleX(1));
  }
 else {
    l.addEventHandler(MOUSE_ENTERED,e -> description.setText(descriptn));
    l.addEventHandler(MOUSE_EXITED,e -> description.setText(""String_Node_Str""));
    l.addEventHandler(MOUSE_ENTERED,e -> l.setScaleX(1.1));
    l.addEventHandler(MOUSE_EXITED,e -> l.setScaleX(1));
  }
  actionBox.getChildren().add(l);
  return l;
}","public Icon addIcon(FontAwesomeIconName icon,String text,String descriptn,boolean drag_activated){
  Icon l=new Icon(icon,icon_size);
  l.setContentDisplay(CENTER);
  l.setFont(new Font(l.getFont().getName(),13));
  l.setText(text);
  l.scaleYProperty().bind(l.scaleXProperty());
  if (drag_activated) {
    l.addEventHandler(DRAG_ENTERED,e -> description.setText(descriptn));
    l.addEventHandler(DRAG_EXITED,e -> description.setText(""String_Node_Str""));
    l.addEventHandler(DRAG_ENTERED,e -> l.setScaleX(1.1));
    l.addEventHandler(DRAG_EXITED,e -> l.setScaleX(1));
  }
 else {
    l.addEventHandler(MOUSE_ENTERED,e -> description.setText(descriptn));
    l.addEventHandler(MOUSE_EXITED,e -> description.setText(""String_Node_Str""));
    l.addEventHandler(MOUSE_ENTERED,e -> l.setScaleX(1.1));
    l.addEventHandler(MOUSE_EXITED,e -> l.setScaleX(1));
  }
  actionBox.getChildren().add(l);
  return l;
}",0.982570806100218
36622,"@Override public void onTick(TickEvent event){
  if (this.entity.isDead) {
    this.repeat=false;
  }
 else {
    Logging.debug(""String_Node_Str"" + this.effect.getEffectName() + ""String_Node_Str""+ this.entity.getName());
    this.entity.addPotionEffect(new PotionEffect(this.effect));
  }
}","@Override public void onTick(TickEvent event){
  if (this.entity.isDead) {
    this.repeat=false;
  }
 else {
    Logging.debug(""String_Node_Str"" + effect.getEffectName() + ""String_Node_Str""+ entity.getName());
    this.entity.addPotionEffect(new PotionEffect(this.effect));
  }
}",0.9824561403508772
36623,"public void onLivingHurtEvent(LivingHurtEvent event){
  if (event.source.getEntity() instanceof EntityPlayerMP) {
    EntityPlayerMP player=(EntityPlayerMP)event.source.getEntity();
    PlayerData playerData=PlayerStore.getPlayer(player);
    ArrayList<Slug> slugList=PerkStore.getSlugs(event.entity);
    ArrayList<EntitySkill> skillStore=SkillStore.getInstance().getEntitySkill();
    Boolean requiresPerk=false;
    if (slugList != null) {
      requiresPerk=true;
    }
    for (    EntitySkill skill : skillStore) {
      for (      Triplet entry : skill.exp) {
        if (Utils.MatchObject(event.entity,-1,entry.object,-1)) {
          if (requiresPerk) {
            if (!PlayerHandler.hasPerk(playerData,slugList) || !PlayerHandler.isWielding(skill,player)) {
              PlayerHandler.taskFail(player);
              event.ammount=1;
            }
          }
        }
      }
    }
  }
}","public void onLivingHurtEvent(LivingHurtEvent event){
  if (event.source.getEntity() instanceof EntityPlayerMP) {
    EntityPlayerMP player=(EntityPlayerMP)event.source.getEntity();
    PlayerData playerData=PlayerStore.getPlayer(player);
    ArrayList<Slug> slugList=PerkStore.getSlugs(event.entity);
    ArrayList<EntitySkill> skillStore=SkillStore.getInstance().getEntitySkill();
    Boolean requiresPerk=false;
    if (slugList != null) {
      requiresPerk=true;
    }
    for (    EntitySkill skill : skillStore) {
      for (      Triplet entry : skill.exp) {
        if (Utils.MatchEntity(event.entity,entry)) {
          if (requiresPerk) {
            if (!PlayerHandler.hasPerk(playerData,slugList) || !PlayerHandler.isWielding(skill,player)) {
              PlayerHandler.taskFail(player);
              event.ammount=1;
            }
          }
        }
      }
    }
  }
}",0.980435997764114
36624,"public static String addPerk(String perkSlug,PlayerData player){
  String toReturn=""String_Node_Str"";
  Perk perk=PerkStore.getPerk(perkSlug);
  if (perk == null) {
    return ""String_Node_Str"";
  }
  ArrayList<Requirement> requirements;
  if (perk.getRequirements() != null) {
    requirements=perk.getRequirements();
  }
 else {
    requirements=new ArrayList<Requirement>();
  }
  boolean cont=true;
  for (  Requirement req : requirements) {
switch (req.action) {
case DONT:
      if (player.getPerkList().contains(req.getNameAsSlug())) {
        cont=false;
        toReturn=""String_Node_Str"" + req.name + ""String_Node_Str"";
      }
    break;
case HAVE:
  if (!player.getPerkList().contains(req.getNameAsSlug())) {
    cont=false;
    toReturn=""String_Node_Str"" + req.name + ""String_Node_Str"";
  }
break;
case LEVEL_EQUALS:
if (!(player.getSkillLevel(SkillHandler.getSkill(req.getNameAsSlug())) == Integer.parseInt(req.extraData))) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
case LEVEL_GREATER:
if (player.getSkillLevel(SkillHandler.getSkill(req.getNameAsSlug())) < Integer.parseInt(req.extraData)) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
case LEVEL_LESS:
if (player.getSkillLevel(SkillHandler.getSkill(req.getNameAsSlug())) > Integer.parseInt(req.extraData)) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
default :
cont=false;
break;
}
if (!cont) {
break;
}
}
if (cont && !player.getPerkList().contains(perkSlug)) {
addPerk(perk,player);
toReturn=""String_Node_Str"";
}
return toReturn;
}","public static String addPerk(String perkSlug,PlayerData player){
  String toReturn=""String_Node_Str"";
  Perk perk=PerkStore.getPerk(perkSlug);
  if (perk == null) {
    return ""String_Node_Str"";
  }
  ArrayList<Requirement> requirements;
  if (perk.getRequirements() != null) {
    requirements=perk.getRequirements();
  }
 else {
    requirements=new ArrayList<Requirement>();
  }
  boolean cont=true;
  for (  Requirement req : requirements) {
switch (req.action) {
case DONT:
      if (player.getPerkList().contains(req.getNameAsSlug())) {
        cont=false;
        toReturn=""String_Node_Str"" + req.name + ""String_Node_Str"";
      }
    break;
case HAVE:
  if (!player.getPerkList().contains(req.getNameAsSlug())) {
    cont=false;
    toReturn=""String_Node_Str"" + req.name + ""String_Node_Str"";
  }
break;
case LEVEL_EQUALS:
if (!(player.getSkillLevel(SkillHandler.getSkill(req.name)) == Integer.parseInt(req.extraData))) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
case LEVEL_GREATER:
if (player.getSkillLevel(SkillHandler.getSkill(req.name)) < Integer.parseInt(req.extraData)) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
case LEVEL_LESS:
if (player.getSkillLevel(SkillHandler.getSkill(req.name)) > Integer.parseInt(req.extraData)) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
default :
cont=false;
break;
}
if (!cont) {
break;
}
}
if (cont && !player.getPerkList().contains(perkSlug)) {
addPerk(perk,player);
toReturn=""String_Node_Str"";
}
return toReturn;
}",0.9826060421116876
36625,"public void touchUp(){
  searchObject();
}","public void touchUp(){
  searchObject();
  getSlug();
}",0.865979381443299
36626,"@Override public void touchUp(){
  this.initTool();
  this.initName();
  ArrayList<Quad> initalised=new ArrayList<Quad>();
  for (  Quad object : exp) {
    object.object=(Block)Block.blockRegistry.getObject(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}","@Override public void touchUp(){
  this.initTool();
  ArrayList<Quad> initalised=new ArrayList<Quad>();
  for (  Quad object : exp) {
    object.object=(Block)Block.blockRegistry.getObject(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}",0.9767441860465116
36627,"@Override public void touchUp(){
  this.initTool();
  this.initName();
  ArrayList<Triplet> initalised=new ArrayList<Triplet>();
  for (  Triplet object : exp) {
    object.object=(Class)EntityList.stringToClassMapping.get(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}","@Override public void touchUp(){
  this.initTool();
  ArrayList<Triplet> initalised=new ArrayList<Triplet>();
  for (  Triplet object : exp) {
    object.object=(Class)EntityList.stringToClassMapping.get(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}",0.9775678866587958
36628,"@Override public void touchUp(){
  this.initName();
  ArrayList<Quad> initalised=new ArrayList<Quad>();
  for (  Quad object : exp) {
    object.object=(Item)Item.itemRegistry.getObject(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}","@Override public void touchUp(){
  ArrayList<Quad> initalised=new ArrayList<Quad>();
  for (  Quad object : exp) {
    object.object=(Item)Item.itemRegistry.getObject(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}",0.9754204398447608
36629,"public static boolean hasPerk(PlayerData player,ArrayList<Slug> slugList){
  for (  Slug slug : slugList) {
    if (player.getPerkList().contains(slug)) {
      return true;
    }
    return false;
  }
  return false;
}","public static boolean hasPerk(PlayerData player,ArrayList<Slug> slugList){
  for (  Slug slug : slugList) {
    for (    Slug current : player.getPerkList()) {
      if (slug.getSlug().equals(current.getSlug()))       return true;
    }
  }
  return false;
}",0.7547169811320755
36630,"@SubscribeEvent public void onPlayerLoggedInEvent(PlayerLoggedInEvent event){
  new DataSave().onPlayerLoggedInEvent(event);
  new PlayerHandler().reactivatePerks(event);
}","@SubscribeEvent public void onPlayerLoggedInEvent(PlayerLoggedInEvent event){
  new DataSave().onPlayerLoggedInEvent(event);
  new PlayerHandler().reactivatePerks(event);
  new PlayerHandler().checkPlayerSkills(event);
}",0.8775510204081632
36631,"public static String addPerk(String perkSlug,PlayerData player){
  String toReturn=""String_Node_Str"";
  Perk perk=PerkStore.getPerk(perkSlug);
  if (perk == null) {
    return ""String_Node_Str"";
  }
  ArrayList<Requirement> requirements;
  if (perk.getRequirements() != null) {
    requirements=perk.getRequirements();
  }
 else {
    requirements=new ArrayList<Requirement>();
  }
  boolean cont=true;
  for (  Requirement req : requirements) {
switch (req.action) {
case DONT:
      if (player.getPerkList().contains(req.getNameAsSlug())) {
        cont=false;
        toReturn=""String_Node_Str"" + req.name + ""String_Node_Str"";
      }
    break;
case HAVE:
  if (!player.getPerkList().contains(req.getNameAsSlug())) {
    cont=false;
    toReturn=""String_Node_Str"" + req.name + ""String_Node_Str"";
  }
break;
case LEVEL_EQUALS:
if (!(player.getSkillExp().get(req.name) == Integer.parseInt(req.extraData))) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
case LEVEL_GREATER:
if (player.getSkillExp().get(req.name) < Integer.parseInt(req.extraData)) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
case LEVEL_LESS:
if (player.getSkillExp().get(req.name) > Integer.parseInt(req.extraData)) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
default :
cont=false;
break;
}
if (!cont) {
break;
}
}
if (cont && !player.getPerkList().contains(perkSlug)) {
addPerk(perk,player);
toReturn=""String_Node_Str"";
}
return toReturn;
}","public static String addPerk(String perkSlug,PlayerData player){
  String toReturn=""String_Node_Str"";
  Perk perk=PerkStore.getPerk(perkSlug);
  if (perk == null) {
    return ""String_Node_Str"";
  }
  ArrayList<Requirement> requirements;
  if (perk.getRequirements() != null) {
    requirements=perk.getRequirements();
  }
 else {
    requirements=new ArrayList<Requirement>();
  }
  boolean cont=true;
  for (  Requirement req : requirements) {
switch (req.action) {
case DONT:
      if (player.getPerkList().contains(req.getNameAsSlug())) {
        cont=false;
        toReturn=""String_Node_Str"" + req.name + ""String_Node_Str"";
      }
    break;
case HAVE:
  if (!player.getPerkList().contains(req.getNameAsSlug())) {
    cont=false;
    toReturn=""String_Node_Str"" + req.name + ""String_Node_Str"";
  }
break;
case LEVEL_EQUALS:
if (!(player.getSkillLevel(SkillHandler.getSkill(req.name)) == Integer.parseInt(req.extraData))) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
case LEVEL_GREATER:
if (player.getSkillLevel(SkillHandler.getSkill(req.name)) < Integer.parseInt(req.extraData)) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
case LEVEL_LESS:
if (player.getSkillLevel(SkillHandler.getSkill(req.name)) > Integer.parseInt(req.extraData)) {
cont=false;
toReturn=""String_Node_Str"" + req.name + ""String_Node_Str""+ req.extraData;
}
break;
default :
cont=false;
break;
}
if (!cont) {
break;
}
}
if (cont && !player.getPerkList().contains(perkSlug)) {
addPerk(perk,player);
toReturn=""String_Node_Str"";
}
return toReturn;
}",0.948227172889865
36632,"@Override public void touchUp(){
  ArrayList<Quad> initalised=new ArrayList<Quad>();
  for (  Quad object : exp) {
    object.object=(Block)Block.blockRegistry.getObject(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}","@Override public void touchUp(){
  this.initTool();
  ArrayList<Quad> initalised=new ArrayList<Quad>();
  for (  Quad object : exp) {
    object.object=(Block)Block.blockRegistry.getObject(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}",0.975609756097561
36633,"@Override public void touchUp(){
  ArrayList<Triplet> initalised=new ArrayList<Triplet>();
  for (  Triplet object : exp) {
    object.object=(Class)EntityList.stringToClassMapping.get(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}","@Override public void touchUp(){
  this.initTool();
  ArrayList<Triplet> initalised=new ArrayList<Triplet>();
  for (  Triplet object : exp) {
    object.object=(Class)EntityList.stringToClassMapping.get(object.name);
    if (object.object != null) {
      Logging.debug(object.name + ""String_Node_Str"");
      initalised.add(object);
    }
 else {
      Logging.error(object.name + ""String_Node_Str"");
    }
  }
}",0.976514215080346
36634,"public void initTool(){
  toolClass=ToolRegistry.getEntry(tool);
}","public void initTool(){
  this.toolClass=ToolRegistry.getEntry(tool);
}",0.9635036496350364
36635,"@EventHandler public void preInit(FMLPreInitializationEvent event) throws Exception {
  settings.load(event);
  if (MinecraftServer.getServer().isDedicatedServer()) {
    settings.isServer=true;
  }
 else {
    settings.isServer=false;
    ClientCommandHandler.instance.registerCommand(new ConfigGUI());
  }
  snw=NetworkRegistry.INSTANCE.newSimpleChannel(Reference.ID);
  snw.registerMessage(ResponceHandler.class,Responce.class,0,Side.SERVER);
  snw.registerMessage(PerkInfoHandler.class,PerkInfo.class,1,Side.CLIENT);
  snw.registerMessage(RequestHandler.class,Request.class,2,Side.SERVER);
}","@EventHandler public void preInit(FMLPreInitializationEvent event) throws Exception {
  settings.load(event);
  if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isDedicatedServer()) {
    settings.isServer=true;
  }
 else {
    settings.isServer=false;
    ClientCommandHandler.instance.registerCommand(new ConfigGUI());
  }
  snw=NetworkRegistry.INSTANCE.newSimpleChannel(Reference.ID);
  snw.registerMessage(ResponceHandler.class,Responce.class,0,Side.SERVER);
  snw.registerMessage(PerkInfoHandler.class,PerkInfo.class,1,Side.CLIENT);
  snw.registerMessage(RequestHandler.class,Request.class,2,Side.SERVER);
}",0.96826688364524
36636,"private static void updateReqList(){
  DefaultListModel model=new DefaultListModel();
  ArrayList<Requirement> temp=currentPerk.getRequirements();
  for (  Requirement req : temp) {
    model.addElement(req.name);
  }
  listRequirement.setModel(model);
  listRequirement.updateUI();
}","private static void updateReqList(){
  DefaultListModel model=new DefaultListModel();
  if (currentPerk != null && currentPerk.getRequirements() != null) {
    ArrayList<Requirement> temp=currentPerk.getRequirements();
    for (    Requirement req : temp) {
      model.addElement(req.name);
    }
  }
  listRequirement.setModel(model);
  listRequirement.updateUI();
}",0.8711656441717791
36637,"protected static void updateCurrentRequirmentInfo(){
  if (currentReq != null) {
    currentReq.action=Action.valueOf(spinnerPerkAction.toString());
    currentReq.extraData=textPerkExtraData.getText();
    currentReq.name=textPerkReqName.getText();
  }
}","protected static void updateCurrentRequirmentInfo(){
  if (currentReq != null) {
    currentReq.action=Action.valueOf(spinnerPerkAction.getValue().toString());
    currentReq.extraData=textPerkExtraData.getText();
    currentReq.name=textPerkReqName.getText();
    updateReqList();
  }
}",0.940959409594096
36638,"protected static void deleteCurrentRequirement(){
  if (listRequirement.getSelectedIndex() > -1) {
    currentPerk.requirements.remove(listRequirement.getSelectedIndex());
    listRequirement.setSelectedIndex(-1);
    updateCurrentRequirment();
  }
}","protected static void deleteCurrentRequirement(){
  if (listRequirement.getSelectedIndex() > -1) {
    currentPerk.requirements.remove(listRequirement.getSelectedIndex());
    listRequirement.setSelectedIndex(-1);
    updateReqList();
  }
}",0.9551020408163264
36639,"protected static void newPerk(){
  BlockPerk perk=new BlockPerk();
  PerkStore.addPerk(perk);
  updatePerkList();
}","protected static void newPerk(){
  BlockPerk perk=new BlockPerk();
  perks.add(perk);
  updatePerkList();
}",0.945945945945946
36640,"protected static void updateCurrentPerk(){
  if (listPerk.getSelectedIndex() > -1) {
    currentPerk=perks.get(listPerk.getSelectedIndex());
  }
 else {
    currentPerk=null;
  }
  textPerkName.setText(currentPerk.name);
  editorPerkDescription.setText(currentPerk.description);
  spinnerPointCost.setValue(currentPerk.pointCost);
  if (currentPerk instanceof BlockPerk) {
    BlockPerk temp=(BlockPerk)currentPerk;
    spinnerPerkType.setValue(""String_Node_Str"");
    textPerkObject.setText(temp.blockName);
    temp=null;
  }
 else   if (currentPerk instanceof ItemPerk) {
    spinnerPerkType.setValue(""String_Node_Str"");
    ItemPerk temp=(ItemPerk)currentPerk;
    textPerkObject.setText(temp.itemName);
    temp=null;
  }
 else   if (currentPerk instanceof EntityPerk) {
    spinnerPerkType.setValue(""String_Node_Str"");
    EntityPerk temp=(EntityPerk)currentPerk;
    textPerkObject.setText(temp.entityName);
    temp=null;
  }
 else   if (currentPerk == null) {
    spinnerPerkType.setValue(""String_Node_Str"");
    textPerkObject.setText(""String_Node_Str"");
  }
  updateReqList();
  updateCurrentRequirment();
}","protected static void updateCurrentPerk(){
  if (listPerk.getSelectedIndex() > -1) {
    currentPerk=perks.get(listPerk.getSelectedIndex());
    textPerkName.setText(currentPerk.name);
    editorPerkDescription.setText(currentPerk.description);
    spinnerPointCost.setValue(currentPerk.pointCost);
  }
 else {
    currentPerk=null;
    textPerkName.setText(""String_Node_Str"");
    editorPerkDescription.setText(""String_Node_Str"");
    spinnerPointCost.setValue(0);
  }
  if (currentPerk instanceof BlockPerk) {
    BlockPerk temp=(BlockPerk)currentPerk;
    spinnerPerkType.setValue(""String_Node_Str"");
    textPerkObject.setText(temp.blockName);
    temp=null;
  }
 else   if (currentPerk instanceof ItemPerk) {
    spinnerPerkType.setValue(""String_Node_Str"");
    ItemPerk temp=(ItemPerk)currentPerk;
    textPerkObject.setText(temp.itemName);
    temp=null;
  }
 else   if (currentPerk instanceof EntityPerk) {
    spinnerPerkType.setValue(""String_Node_Str"");
    EntityPerk temp=(EntityPerk)currentPerk;
    textPerkObject.setText(temp.entityName);
    temp=null;
  }
 else   if (currentPerk == null) {
    spinnerPerkType.setValue(""String_Node_Str"");
    textPerkObject.setText(""String_Node_Str"");
  }
  updateReqList();
  updateCurrentRequirment();
}",0.8134736842105263
36641,"protected static void deleteCurrentSkill(){
  skills.remove(currentSkill);
  currentSkill=null;
  listSkill.setSelectedIndex(-1);
  updateSkillList();
}","protected static void deleteCurrentSkill(){
  skills.remove(currentSkill);
  currentSkill=null;
  listSkill.setSelectedIndex(-1);
  updateSkillList();
  updateCurrentSkill();
}",0.926829268292683
36642,"protected static void deleteCurrentPerk(){
  perks.remove(currentPerk);
  currentPerk=null;
  updatePerkList();
}","protected static void deleteCurrentPerk(){
  perks.remove(currentPerk);
  currentPerk=null;
  updatePerkList();
  updateCurrentPerk();
}",0.9076305220883534
36643,"protected static void updateCurrentSkillExpInfo(){
  if (currentExp != null) {
    currentExp.setXp((int)spinnerExpXP.getValue());
    currentExp.setName(txtSkillObjectName.getText());
  }
}","protected static void updateCurrentSkillExpInfo(){
  if (currentExp != null) {
    currentExp.setXp((int)spinnerExpXP.getValue());
    currentExp.setName(txtSkillObjectName.getText());
    updateSkillExpList();
  }
}",0.9359605911330048
36644,"protected static void newSkill(){
  BlockSkill skill=new BlockSkill();
  SkillStore.addSkill(skill);
  updateSkillList();
}","protected static void newSkill(){
  BlockSkill skill=new BlockSkill();
  skills.add(skill);
  updateSkillList();
}",0.9451476793248944
36645,"protected static void updateCurrentSkillExp(){
  ArrayList<? extends XPGain> temp=currentSkill.getExp();
  int x=listRequirement.getSelectedIndex();
  if (x > -1) {
    currentExp=temp.get(x);
    txtSkillObjectName.setText(currentExp.getName());
    spinnerExpXP.setValue(currentExp.getXp());
  }
 else {
    if (temp.size() > 0) {
      currentExp=temp.get(0);
      txtSkillObjectName.setText(currentExp.getName());
      spinnerExpXP.setValue(currentExp.getXp());
    }
 else {
      txtSkillObjectName.setText(null);
      spinnerExpXP.setValue(0);
    }
  }
}","protected static void updateCurrentSkillExp(){
  if (currentSkill != null && listSkillExp.getSelectedIndex() > -1) {
    currentExp=(XPGain)currentSkill.getExp().get(listSkillExp.getSelectedIndex());
    if (currentExp != null) {
      txtSkillObjectName.setText(currentExp.getName());
      spinnerExpXP.setValue(currentExp.getXp());
    }
 else {
      txtSkillObjectName.setText(""String_Node_Str"");
      spinnerExpXP.setValue(0);
    }
  }
}",0.502970297029703
36646,"/** 
 * Initialize the contents of the frame.
 */
public static void initialize(){
  frame=new JFrame();
  frame.setResizable(false);
  frame.setBounds(100,100,702,442);
  frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  JMenuBar menuBar=new JMenuBar();
  frame.setJMenuBar(menuBar);
  perks=PerkStore.getPerks();
  skills=SkillStore.getSkills();
  JMenuItem mntmNew=new JMenuItem(""String_Node_Str"");
  menuBar.add(mntmNew);
  mntmNew.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      PerkStore.Clear();
      SkillStore.Clear();
      updatePerkList();
      updateSkillList();
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
);
  mntmNew.addMouseListener(new MouseAdapter(){
  }
);
  JMenuItem mntmSave=new JMenuItem(""String_Node_Str"");
  menuBar.add(mntmSave);
  mntmSave.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      JsonConfigHandler.savePerkAndSkill();
      disconsented.anssrpg.data.PerkStore.Clear();
      disconsented.anssrpg.data.SkillStore.Clear();
      JsonConfigHandler.loadPerkAndSkill();
    }
  }
);
  mntmSave.addMouseListener(new MouseAdapter(){
  }
);
  frame.getContentPane().setLayout(new GridLayout(0,1,0,0));
  JTabbedPane tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  frame.getContentPane().add(tabbedPane);
  JPanel panelPerk=new JPanel();
  panelPerk.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent arg0){
      updatePerkList();
    }
  }
);
  tabbedPane.addTab(""String_Node_Str"",null,panelPerk,null);
  panelPerk.setLayout(null);
  JScrollPane scrollPane_3=new JScrollPane();
  scrollPane_3.setBounds(10,11,141,322);
  panelPerk.add(scrollPane_3);
  listPerk.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  listPerk.setSelectedIndex(0);
  listPerk.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent arg0){
      updateCurrentPerk();
    }
  }
);
  scrollPane_3.setViewportView(listPerk);
  JLabel lblPerkName=new JLabel(""String_Node_Str"");
  lblPerkName.setHorizontalAlignment(SwingConstants.CENTER);
  scrollPane_3.setColumnHeaderView(lblPerkName);
  textPerkName=new JTextField();
  textPerkName.setBounds(246,43,149,20);
  panelPerk.add(textPerkName);
  textPerkName.setColumns(10);
  textPerkObject=new JTextField();
  textPerkObject.setBounds(246,170,149,20);
  panelPerk.add(textPerkObject);
  textPerkObject.setColumns(10);
  JLabel lblName=new JLabel(""String_Node_Str"");
  lblName.setHorizontalAlignment(SwingConstants.RIGHT);
  lblName.setBounds(163,42,73,14);
  panelPerk.add(lblName);
  JLabel lblDescription=new JLabel(""String_Node_Str"");
  lblDescription.setHorizontalAlignment(SwingConstants.RIGHT);
  lblDescription.setBounds(163,70,73,14);
  panelPerk.add(lblDescription);
  editorPerkDescription.setBounds(246,75,303,51);
  panelPerk.add(editorPerkDescription);
  JLabel lblPointCost=new JLabel(""String_Node_Str"");
  lblPointCost.setHorizontalAlignment(SwingConstants.RIGHT);
  lblPointCost.setBounds(163,137,73,14);
  panelPerk.add(lblPointCost);
  JLabel lblObjectName=new JLabel(""String_Node_Str"");
  lblObjectName.setHorizontalAlignment(SwingConstants.RIGHT);
  lblObjectName.setBounds(163,168,73,14);
  panelPerk.add(lblObjectName);
  JScrollPane scrollPane_4=new JScrollPane();
  scrollPane_4.setBounds(246,202,124,130);
  panelPerk.add(scrollPane_4);
  listRequirement.setSelectedIndex(0);
  listRequirement.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  listRequirement.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent arg0){
      updateCurrentRequirment();
    }
  }
);
  listRequirement.setLocation(0,200);
  scrollPane_4.setViewportView(listRequirement);
  JLabel lblNewLabel_5=new JLabel(""String_Node_Str"");
  lblNewLabel_5.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_5.setBounds(163,198,73,14);
  panelPerk.add(lblNewLabel_5);
  JLabel lblNewLabel_6=new JLabel(""String_Node_Str"");
  lblNewLabel_6.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_6.setBounds(405,202,63,14);
  panelPerk.add(lblNewLabel_6);
  JLabel lblNewLabel_7=new JLabel(""String_Node_Str"");
  lblNewLabel_7.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_7.setBounds(405,227,63,14);
  panelPerk.add(lblNewLabel_7);
  JLabel lblExtraData=new JLabel(""String_Node_Str"");
  lblExtraData.setHorizontalAlignment(SwingConstants.RIGHT);
  lblExtraData.setBounds(405,252,63,14);
  panelPerk.add(lblExtraData);
  spinnerPerkAction.setModel(new SpinnerListModel(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  spinnerPerkAction.setBounds(478,202,187,14);
  panelPerk.add(spinnerPerkAction);
  textPerkReqName=new JTextField();
  textPerkReqName.setBounds(478,224,187,20);
  panelPerk.add(textPerkReqName);
  textPerkReqName.setColumns(10);
  textPerkExtraData=new JTextField();
  textPerkExtraData.setBounds(478,249,187,20);
  panelPerk.add(textPerkExtraData);
  textPerkExtraData.setColumns(10);
  spinnerPerkType.setModel(new SpinnerListModel(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  spinnerPerkType.setBounds(246,11,149,20);
  panelPerk.add(spinnerPerkType);
  JLabel lblType=new JLabel(""String_Node_Str"");
  lblType.setHorizontalAlignment(SwingConstants.RIGHT);
  lblType.setBounds(163,11,73,14);
  panelPerk.add(lblType);
  JButton btnPerkNew=new JButton(""String_Node_Str"");
  btnPerkNew.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      newPerk();
    }
  }
);
  btnPerkNew.setBounds(10,338,60,23);
  panelPerk.add(btnPerkNew);
  JButton btnPerkDelete=new JButton(""String_Node_Str"");
  btnPerkDelete.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      deleteCurrentPerk();
    }
  }
);
  btnPerkDelete.setBounds(67,338,86,23);
  panelPerk.add(btnPerkDelete);
  JButton btnUpdatePerkInfo=new JButton(""String_Node_Str"");
  btnUpdatePerkInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCurrentPerkInfo();
    }
  }
);
  btnUpdatePerkInfo.setBounds(246,338,124,23);
  panelPerk.add(btnUpdatePerkInfo);
  JButton btnNewRequirement=new JButton(""String_Node_Str"");
  btnNewRequirement.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      newRequirement();
    }
  }
);
  btnNewRequirement.setBounds(405,310,161,23);
  panelPerk.add(btnNewRequirement);
  JButton btnUpdateRequirementInfo=new JButton(""String_Node_Str"");
  btnUpdateRequirementInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCurrentRequirmentInfo();
    }
  }
);
  btnUpdateRequirementInfo.setBounds(576,338,89,23);
  panelPerk.add(btnUpdateRequirementInfo);
  JButton btnDeleteRequirement=new JButton(""String_Node_Str"");
  btnDeleteRequirement.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      deleteCurrentRequirement();
    }
  }
);
  btnDeleteRequirement.setBounds(405,338,161,23);
  panelPerk.add(btnDeleteRequirement);
  spinnerPointCost.setModel(new SpinnerNumberModel(new Integer(0),new Integer(0),null,new Integer(1)));
  spinnerPointCost.setBounds(246,137,29,20);
  panelPerk.add(spinnerPointCost);
  JPanel panelSkill=new JPanel();
  panelSkill.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      updateSkillList();
    }
  }
);
  tabbedPane.addTab(""String_Node_Str"",null,panelSkill,null);
  JLabel lblNewLabel=new JLabel(""String_Node_Str"");
  lblNewLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel.setBounds(150,39,65,14);
  txtSkillName=new JTextField();
  txtSkillName.setBounds(225,36,130,20);
  txtSkillName.setColumns(10);
  JLabel lblNewLabel_1=new JLabel(""String_Node_Str"");
  lblNewLabel_1.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_1.setBounds(365,69,76,14);
  JLabel lblNewLabel_2=new JLabel(""String_Node_Str"");
  lblNewLabel_2.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_2.setBounds(375,100,64,14);
  txtSkillObjectName=new JTextField();
  txtSkillObjectName.setBounds(451,66,145,20);
  txtSkillObjectName.setColumns(10);
  JScrollPane scrollPane=new JScrollPane();
  scrollPane.setBounds(10,11,130,316);
  JScrollPane scrollPane_2=new JScrollPane();
  scrollPane_2.setBounds(225,67,130,260);
  scrollPane_2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  JLabel lblExperience=new JLabel(""String_Node_Str"");
  lblExperience.setHorizontalAlignment(SwingConstants.RIGHT);
  lblExperience.setBounds(150,69,65,14);
  JButton btnNewSkill=new JButton(""String_Node_Str"");
  btnNewSkill.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      newSkill();
    }
  }
);
  btnNewSkill.setBounds(10,338,63,23);
  buttonGroup.add(btnNewSkill);
  listSkill.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  listSkill.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent arg0){
      updateCurrentSkill();
    }
  }
);
  panelSkill.setLayout(null);
  listSkill.setModel(new AbstractListModel(){
    String[] values=new String[]{};
    public int getSize(){
      return values.length;
    }
    public Object getElementAt(    int index){
      return values[index];
    }
  }
);
  listSkill.setSelectedIndex(0);
  scrollPane.setViewportView(listSkill);
  panelSkill.add(scrollPane);
  JLabel lblNewLabel_3=new JLabel(""String_Node_Str"");
  scrollPane.setColumnHeaderView(lblNewLabel_3);
  lblNewLabel_3.setHorizontalAlignment(SwingConstants.CENTER);
  panelSkill.add(lblNewLabel);
  panelSkill.add(lblExperience);
  panelSkill.add(scrollPane_2);
  listSkillExp.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateCurrentSkillExp();
    }
  }
);
  scrollPane_2.setViewportView(listSkillExp);
  listSkillExp.setModel(new AbstractListModel(){
    String[] values=new String[]{};
    public int getSize(){
      return values.length;
    }
    public Object getElementAt(    int index){
      return values[index];
    }
  }
);
  listSkillExp.setSelectedIndex(0);
  listSkillExp.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  panelSkill.add(txtSkillName);
  panelSkill.add(lblNewLabel_1);
  panelSkill.add(lblNewLabel_2);
  panelSkill.add(txtSkillObjectName);
  panelSkill.add(btnNewSkill);
  JButton btnUpdateSkillInfo=new JButton(""String_Node_Str"");
  btnUpdateSkillInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCurrentSkillInfo();
    }
  }
);
  btnUpdateSkillInfo.setBounds(235,338,120,23);
  panelSkill.add(btnUpdateSkillInfo);
  JButton btnNewExp=new JButton(""String_Node_Str"");
  btnNewExp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      newExperience();
    }
  }
);
  btnNewExp.setBounds(449,196,147,23);
  panelSkill.add(btnNewExp);
  JButton btnUpdateExpInfo=new JButton(""String_Node_Str"");
  btnUpdateExpInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCurrentSkillExpInfo();
    }
  }
);
  btnUpdateExpInfo.setBounds(449,128,147,23);
  panelSkill.add(btnUpdateExpInfo);
  JButton btnDeleteSkill=new JButton(""String_Node_Str"");
  btnDeleteSkill.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      deleteCurrentSkill();
    }
  }
);
  btnDeleteSkill.setBounds(72,338,76,23);
  buttonGroup.add(btnDeleteSkill);
  panelSkill.add(btnDeleteSkill);
  spinnerSkillType.setModel(new SpinnerListModel(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  spinnerSkillType.setBounds(225,11,130,14);
  panelSkill.add(spinnerSkillType);
  JLabel lblNewLabel_4=new JLabel(""String_Node_Str"");
  lblNewLabel_4.setBounds(136,11,79,14);
  panelSkill.add(lblNewLabel_4);
  lblNewLabel_4.setHorizontalAlignment(SwingConstants.RIGHT);
  JButton btnDeleteExperience=new JButton(""String_Node_Str"");
  btnDeleteExperience.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      deleteCurrentExperience();
    }
  }
);
  btnDeleteExperience.setBounds(449,162,147,23);
  panelSkill.add(btnDeleteExperience);
  spinnerExpXP.setModel(new SpinnerNumberModel(new Integer(0),new Integer(0),null,new Integer(1)));
  spinnerExpXP.setBounds(449,97,29,20);
  panelSkill.add(spinnerExpXP);
  JPanel panelRegistry=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelRegistry,null);
  panelRegistry.setLayout(new BoxLayout(panelRegistry,BoxLayout.X_AXIS));
  JScrollPane scrollPaneRegBlock=new JScrollPane();
  panelRegistry.add(scrollPaneRegBlock);
  scrollPaneRegBlock.setViewportView(listRegBlock);
  JLabel lblBlockRegistry=new JLabel(""String_Node_Str"");
  lblBlockRegistry.setHorizontalAlignment(SwingConstants.CENTER);
  scrollPaneRegBlock.setColumnHeaderView(lblBlockRegistry);
  JLabel label_1=new JLabel(""String_Node_Str"");
  panelRegistry.add(label_1);
  JLabel label_2=new JLabel(""String_Node_Str"");
  panelRegistry.add(label_2);
  JLabel label_3=new JLabel(""String_Node_Str"");
  panelRegistry.add(label_3);
  JScrollPane scrollPane_1=new JScrollPane();
  panelRegistry.add(scrollPane_1);
  scrollPane_1.setViewportView(listRegEntity);
  JLabel lblEntityRegistry=new JLabel(""String_Node_Str"");
  lblEntityRegistry.setHorizontalAlignment(SwingConstants.CENTER);
  scrollPane_1.setColumnHeaderView(lblEntityRegistry);
  JScrollPane scrollPane_5=new JScrollPane();
  panelRegistry.add(scrollPane_5);
  scrollPane_5.setViewportView(listRegItem);
  JLabel lblItemRegistry=new JLabel(""String_Node_Str"");
  lblItemRegistry.setHorizontalAlignment(SwingConstants.CENTER);
  scrollPane_5.setColumnHeaderView(lblItemRegistry);
  JLabel label=new JLabel(""String_Node_Str"");
  panelRegistry.add(label);
}","/** 
 * Initialize the contents of the frame.
 */
public static void initialize(){
  frame=new JFrame();
  frame.setResizable(false);
  frame.setBounds(100,100,702,442);
  frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  JMenuBar menuBar=new JMenuBar();
  frame.setJMenuBar(menuBar);
  perks=PerkStore.getPerks();
  skills=SkillStore.getSkills();
  JMenuItem mntmNew=new JMenuItem(""String_Node_Str"");
  menuBar.add(mntmNew);
  mntmNew.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      PerkStore.Clear();
      SkillStore.Clear();
      perks.clear();
      skills.clear();
      updatePerkList();
      updateSkillList();
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
);
  mntmNew.addMouseListener(new MouseAdapter(){
  }
);
  JMenuItem mntmSave=new JMenuItem(""String_Node_Str"");
  menuBar.add(mntmSave);
  mntmSave.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      JsonConfigHandler.savePerkAndSkill();
      disconsented.anssrpg.data.PerkStore.Clear();
      disconsented.anssrpg.data.SkillStore.Clear();
      JsonConfigHandler.loadPerkAndSkill();
    }
  }
);
  mntmSave.addMouseListener(new MouseAdapter(){
  }
);
  frame.getContentPane().setLayout(new GridLayout(0,1,0,0));
  JTabbedPane tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  frame.getContentPane().add(tabbedPane);
  JPanel panelPerk=new JPanel();
  panelPerk.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent arg0){
      updatePerkList();
    }
  }
);
  tabbedPane.addTab(""String_Node_Str"",null,panelPerk,null);
  panelPerk.setLayout(null);
  JScrollPane scrollPane_3=new JScrollPane();
  scrollPane_3.setBounds(10,11,141,322);
  panelPerk.add(scrollPane_3);
  listPerk.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  listPerk.setSelectedIndex(0);
  listPerk.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent arg0){
      updateCurrentPerk();
    }
  }
);
  scrollPane_3.setViewportView(listPerk);
  JLabel lblPerkName=new JLabel(""String_Node_Str"");
  lblPerkName.setHorizontalAlignment(SwingConstants.CENTER);
  scrollPane_3.setColumnHeaderView(lblPerkName);
  textPerkName=new JTextField();
  textPerkName.setBounds(246,43,149,20);
  panelPerk.add(textPerkName);
  textPerkName.setColumns(10);
  textPerkObject=new JTextField();
  textPerkObject.setBounds(246,170,149,20);
  panelPerk.add(textPerkObject);
  textPerkObject.setColumns(10);
  JLabel lblName=new JLabel(""String_Node_Str"");
  lblName.setHorizontalAlignment(SwingConstants.RIGHT);
  lblName.setBounds(163,42,73,14);
  panelPerk.add(lblName);
  JLabel lblDescription=new JLabel(""String_Node_Str"");
  lblDescription.setHorizontalAlignment(SwingConstants.RIGHT);
  lblDescription.setBounds(163,70,73,14);
  panelPerk.add(lblDescription);
  editorPerkDescription.setBounds(246,75,303,51);
  panelPerk.add(editorPerkDescription);
  JLabel lblPointCost=new JLabel(""String_Node_Str"");
  lblPointCost.setHorizontalAlignment(SwingConstants.RIGHT);
  lblPointCost.setBounds(163,137,73,14);
  panelPerk.add(lblPointCost);
  JLabel lblObjectName=new JLabel(""String_Node_Str"");
  lblObjectName.setHorizontalAlignment(SwingConstants.RIGHT);
  lblObjectName.setBounds(163,168,73,14);
  panelPerk.add(lblObjectName);
  JScrollPane scrollPane_4=new JScrollPane();
  scrollPane_4.setBounds(246,202,124,130);
  panelPerk.add(scrollPane_4);
  listRequirement.setSelectedIndex(0);
  listRequirement.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  listRequirement.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent arg0){
      updateCurrentRequirment();
    }
  }
);
  listRequirement.setLocation(0,200);
  scrollPane_4.setViewportView(listRequirement);
  JLabel lblNewLabel_5=new JLabel(""String_Node_Str"");
  lblNewLabel_5.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_5.setBounds(163,198,73,14);
  panelPerk.add(lblNewLabel_5);
  JLabel lblNewLabel_6=new JLabel(""String_Node_Str"");
  lblNewLabel_6.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_6.setBounds(405,202,63,14);
  panelPerk.add(lblNewLabel_6);
  JLabel lblNewLabel_7=new JLabel(""String_Node_Str"");
  lblNewLabel_7.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_7.setBounds(405,227,63,14);
  panelPerk.add(lblNewLabel_7);
  JLabel lblExtraData=new JLabel(""String_Node_Str"");
  lblExtraData.setHorizontalAlignment(SwingConstants.RIGHT);
  lblExtraData.setBounds(405,252,63,14);
  panelPerk.add(lblExtraData);
  spinnerPerkAction.setModel(new SpinnerListModel(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  spinnerPerkAction.setBounds(478,202,187,14);
  panelPerk.add(spinnerPerkAction);
  textPerkReqName=new JTextField();
  textPerkReqName.setBounds(478,224,187,20);
  panelPerk.add(textPerkReqName);
  textPerkReqName.setColumns(10);
  textPerkExtraData=new JTextField();
  textPerkExtraData.setBounds(478,249,187,20);
  panelPerk.add(textPerkExtraData);
  textPerkExtraData.setColumns(10);
  spinnerPerkType.setModel(new SpinnerListModel(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  spinnerPerkType.setBounds(246,11,149,20);
  panelPerk.add(spinnerPerkType);
  JLabel lblType=new JLabel(""String_Node_Str"");
  lblType.setHorizontalAlignment(SwingConstants.RIGHT);
  lblType.setBounds(163,11,73,14);
  panelPerk.add(lblType);
  JButton btnPerkNew=new JButton(""String_Node_Str"");
  btnPerkNew.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      newPerk();
    }
  }
);
  btnPerkNew.setBounds(10,338,60,23);
  panelPerk.add(btnPerkNew);
  JButton btnPerkDelete=new JButton(""String_Node_Str"");
  btnPerkDelete.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      deleteCurrentPerk();
    }
  }
);
  btnPerkDelete.setBounds(67,338,86,23);
  panelPerk.add(btnPerkDelete);
  JButton btnUpdatePerkInfo=new JButton(""String_Node_Str"");
  btnUpdatePerkInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCurrentPerkInfo();
    }
  }
);
  btnUpdatePerkInfo.setBounds(246,338,124,23);
  panelPerk.add(btnUpdatePerkInfo);
  JButton btnNewRequirement=new JButton(""String_Node_Str"");
  btnNewRequirement.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      newRequirement();
    }
  }
);
  btnNewRequirement.setBounds(405,310,161,23);
  panelPerk.add(btnNewRequirement);
  JButton btnUpdateRequirementInfo=new JButton(""String_Node_Str"");
  btnUpdateRequirementInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCurrentRequirmentInfo();
    }
  }
);
  btnUpdateRequirementInfo.setBounds(576,338,89,23);
  panelPerk.add(btnUpdateRequirementInfo);
  JButton btnDeleteRequirement=new JButton(""String_Node_Str"");
  btnDeleteRequirement.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      deleteCurrentRequirement();
    }
  }
);
  btnDeleteRequirement.setBounds(405,338,161,23);
  panelPerk.add(btnDeleteRequirement);
  spinnerPointCost.setModel(new SpinnerNumberModel(new Integer(0),new Integer(0),null,new Integer(1)));
  spinnerPointCost.setBounds(246,137,29,20);
  panelPerk.add(spinnerPointCost);
  JPanel panelSkill=new JPanel();
  panelSkill.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      updateSkillList();
    }
  }
);
  tabbedPane.addTab(""String_Node_Str"",null,panelSkill,null);
  JLabel lblNewLabel=new JLabel(""String_Node_Str"");
  lblNewLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel.setBounds(150,39,65,14);
  txtSkillName=new JTextField();
  txtSkillName.setBounds(225,36,130,20);
  txtSkillName.setColumns(10);
  JLabel lblNewLabel_1=new JLabel(""String_Node_Str"");
  lblNewLabel_1.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_1.setBounds(365,69,76,14);
  JLabel lblNewLabel_2=new JLabel(""String_Node_Str"");
  lblNewLabel_2.setHorizontalAlignment(SwingConstants.RIGHT);
  lblNewLabel_2.setBounds(375,100,64,14);
  txtSkillObjectName=new JTextField();
  txtSkillObjectName.setBounds(451,66,145,20);
  txtSkillObjectName.setColumns(10);
  JScrollPane scrollPane=new JScrollPane();
  scrollPane.setBounds(10,11,130,316);
  JScrollPane scrollPane_2=new JScrollPane();
  scrollPane_2.setBounds(225,67,130,260);
  scrollPane_2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  JLabel lblExperience=new JLabel(""String_Node_Str"");
  lblExperience.setHorizontalAlignment(SwingConstants.RIGHT);
  lblExperience.setBounds(150,69,65,14);
  JButton btnNewSkill=new JButton(""String_Node_Str"");
  btnNewSkill.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      newSkill();
    }
  }
);
  btnNewSkill.setBounds(10,338,63,23);
  buttonGroup.add(btnNewSkill);
  listSkill.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  listSkill.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent arg0){
      updateCurrentSkill();
    }
  }
);
  panelSkill.setLayout(null);
  listSkill.setModel(new AbstractListModel(){
    String[] values=new String[]{};
    public int getSize(){
      return values.length;
    }
    public Object getElementAt(    int index){
      return values[index];
    }
  }
);
  listSkill.setSelectedIndex(0);
  scrollPane.setViewportView(listSkill);
  panelSkill.add(scrollPane);
  JLabel lblNewLabel_3=new JLabel(""String_Node_Str"");
  scrollPane.setColumnHeaderView(lblNewLabel_3);
  lblNewLabel_3.setHorizontalAlignment(SwingConstants.CENTER);
  panelSkill.add(lblNewLabel);
  panelSkill.add(lblExperience);
  panelSkill.add(scrollPane_2);
  listSkillExp.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateCurrentSkillExp();
    }
  }
);
  scrollPane_2.setViewportView(listSkillExp);
  listSkillExp.setModel(new AbstractListModel(){
    String[] values=new String[]{};
    public int getSize(){
      return values.length;
    }
    public Object getElementAt(    int index){
      return values[index];
    }
  }
);
  listSkillExp.setSelectedIndex(0);
  listSkillExp.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  panelSkill.add(txtSkillName);
  panelSkill.add(lblNewLabel_1);
  panelSkill.add(lblNewLabel_2);
  panelSkill.add(txtSkillObjectName);
  panelSkill.add(btnNewSkill);
  JButton btnUpdateSkillInfo=new JButton(""String_Node_Str"");
  btnUpdateSkillInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCurrentSkillInfo();
    }
  }
);
  btnUpdateSkillInfo.setBounds(235,338,120,23);
  panelSkill.add(btnUpdateSkillInfo);
  JButton btnNewExp=new JButton(""String_Node_Str"");
  btnNewExp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      newExperience();
    }
  }
);
  btnNewExp.setBounds(449,196,147,23);
  panelSkill.add(btnNewExp);
  JButton btnUpdateExpInfo=new JButton(""String_Node_Str"");
  btnUpdateExpInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCurrentSkillExpInfo();
    }
  }
);
  btnUpdateExpInfo.setBounds(449,128,147,23);
  panelSkill.add(btnUpdateExpInfo);
  JButton btnDeleteSkill=new JButton(""String_Node_Str"");
  btnDeleteSkill.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      deleteCurrentSkill();
    }
  }
);
  btnDeleteSkill.setBounds(72,338,76,23);
  buttonGroup.add(btnDeleteSkill);
  panelSkill.add(btnDeleteSkill);
  spinnerSkillType.setModel(new SpinnerListModel(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  spinnerSkillType.setBounds(225,11,130,14);
  panelSkill.add(spinnerSkillType);
  JLabel lblNewLabel_4=new JLabel(""String_Node_Str"");
  lblNewLabel_4.setBounds(136,11,79,14);
  panelSkill.add(lblNewLabel_4);
  lblNewLabel_4.setHorizontalAlignment(SwingConstants.RIGHT);
  JButton btnDeleteExperience=new JButton(""String_Node_Str"");
  btnDeleteExperience.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      deleteCurrentExperience();
    }
  }
);
  btnDeleteExperience.setBounds(449,162,147,23);
  panelSkill.add(btnDeleteExperience);
  spinnerExpXP.setModel(new SpinnerNumberModel(new Integer(0),new Integer(0),null,new Integer(1)));
  spinnerExpXP.setBounds(449,97,29,20);
  panelSkill.add(spinnerExpXP);
  JPanel panelRegistry=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelRegistry,null);
  panelRegistry.setLayout(new BoxLayout(panelRegistry,BoxLayout.X_AXIS));
  JScrollPane scrollPaneRegBlock=new JScrollPane();
  panelRegistry.add(scrollPaneRegBlock);
  scrollPaneRegBlock.setViewportView(listRegBlock);
  JLabel lblBlockRegistry=new JLabel(""String_Node_Str"");
  lblBlockRegistry.setHorizontalAlignment(SwingConstants.CENTER);
  scrollPaneRegBlock.setColumnHeaderView(lblBlockRegistry);
  JLabel label_1=new JLabel(""String_Node_Str"");
  panelRegistry.add(label_1);
  JLabel label_2=new JLabel(""String_Node_Str"");
  panelRegistry.add(label_2);
  JLabel label_3=new JLabel(""String_Node_Str"");
  panelRegistry.add(label_3);
  JScrollPane scrollPane_1=new JScrollPane();
  panelRegistry.add(scrollPane_1);
  scrollPane_1.setViewportView(listRegEntity);
  JLabel lblEntityRegistry=new JLabel(""String_Node_Str"");
  lblEntityRegistry.setHorizontalAlignment(SwingConstants.CENTER);
  scrollPane_1.setColumnHeaderView(lblEntityRegistry);
  JScrollPane scrollPane_5=new JScrollPane();
  panelRegistry.add(scrollPane_5);
  scrollPane_5.setViewportView(listRegItem);
  JLabel lblItemRegistry=new JLabel(""String_Node_Str"");
  lblItemRegistry.setHorizontalAlignment(SwingConstants.CENTER);
  scrollPane_5.setColumnHeaderView(lblItemRegistry);
  JLabel label=new JLabel(""String_Node_Str"");
  panelRegistry.add(label);
}",0.9984793294903984
36647,"public static boolean hasPerk(PlayerData player,ArrayList<? extends Perk> blocklist){
  for (int i=0; i < blocklist.size(); i++) {
    if (player.getPerkList().contains(blocklist.get(i))) {
      return true;
    }
  }
  return false;
}","public static boolean hasPerk(PlayerData player,ArrayList<? extends Perk> blocklist){
  for (int i=0; i < blocklist.size(); i++) {
    if (player.getPerkList().contains(blocklist.get(i).perkSlug)) {
      return true;
    }
  }
  return false;
}",0.9812889812889812
36648,"public static int getXP(int blockIndex,int skillNumber){
  return (int)skillList.get(skillNumber).exp.get(skillNumber);
}","public static int getXP(int blockIndex,int skillNumber){
  return (int)skillList.get(skillNumber).exp.get(blockIndex);
}",0.9294605809128632
36649,"public static int getXP(int blockIndex,int skillNumber){
  return (int)skillList.get(skillNumber).exp.get(skillNumber);
}","public static int getXP(int blockIndex,int skillNumber){
  return (int)skillList.get(skillNumber).exp.get(blockIndex);
}",0.9294605809128632
36650,"private void showMedia(Bundle savedInstancState){
  viewStub.setLayoutResource(R.layout.facebook_detail_activity_type_video);
  FrameLayout temp=(FrameLayout)viewStub.inflate();
  final VideoThumbnail videoThumbnail=(VideoThumbnail)temp.getChildAt(0);
  videoThumbnail.setVisibility(View.GONE);
  final String imageUrl=UrlModifier.getFacebookLargePhotoUrl(post.getPicture());
  Picasso.with(this).load(imageUrl).error(R.drawable.facebook_icon_plain).centerCrop().fit().into(videoThumbnail.getVideoThumbnail(),new Callback(){
    @Override public void onSuccess(){
      videoThumbnail.setVisibility(View.VISIBLE);
      videoThumbnail.showPlayButton(TextUtils.equals(""String_Node_Str"",post.getType()));
    }
    @Override public void onError(){
    }
  }
);
  videoThumbnail.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (TextUtils.equals(""String_Node_Str"",post.getType())) {
        ViewAlbumActivity.createAndStartActivity(v.getContext(),post.getName(),Helper.createStringArrayList(imageUrl),0);
      }
      if (TextUtils.equals(""String_Node_Str"",post.getType())) {
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setData(Uri.parse(post.getLink()));
        v.getContext().startActivity(i);
      }
    }
  }
);
}","private void showMedia(Bundle savedInstancState){
  viewStub.setLayoutResource(R.layout.facebook_detail_activity_type_video);
  FrameLayout temp=(FrameLayout)viewStub.inflate();
  final VideoThumbnail videoThumbnail=(VideoThumbnail)temp.getChildAt(0);
  videoThumbnail.setVisibility(View.GONE);
  final String imageUrl=UrlModifier.getFacebookLargePhotoUrl(post.getPicture());
  Helper.debug(imageUrl);
  Picasso.with(this).load(imageUrl).error(R.drawable.facebook_icon_plain).into(videoThumbnail.getVideoThumbnail(),new Callback(){
    @Override public void onSuccess(){
      videoThumbnail.setVisibility(View.VISIBLE);
      videoThumbnail.showPlayButton(TextUtils.equals(""String_Node_Str"",post.getType()));
    }
    @Override public void onError(){
    }
  }
);
  videoThumbnail.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (TextUtils.equals(""String_Node_Str"",post.getType())) {
        ViewAlbumActivity.createAndStartActivity(v.getContext(),post.getName(),Helper.createStringArrayList(imageUrl),0);
      }
      if (TextUtils.equals(""String_Node_Str"",post.getType())) {
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setData(Uri.parse(post.getLink()));
        v.getContext().startActivity(i);
      }
    }
  }
);
}",0.9825513765025204
36651,"@Override public void updateRow(Object result){
  super.updateRow(result);
  Picasso.with(getContext()).load(post.getPicture()).error(R.drawable.drawable_image_loading).fit().centerCrop().into(imgvThumbnail.getVideoThumbnail());
  imgvThumbnail.showPlayButton(TextUtils.equals(""String_Node_Str"",post.getType()));
}","@Override public void updateRow(Object result){
  super.updateRow(result);
  Helper.debug(post.getPicture());
  Picasso.with(getContext()).load(post.getPicture()).error(R.drawable.drawable_image_loading).fit().centerCrop().into(imgvThumbnail.getVideoThumbnail());
  imgvThumbnail.showPlayButton(TextUtils.equals(""String_Node_Str"",post.getType()));
}",0.947209653092006
36652,"public static String getFacebookLargePhotoUrl(String smallPhotoUrl){
  String newUrl=FB_INTERNAL_URL_PATTERN.matcher(smallPhotoUrl).replaceAll(""String_Node_Str"");
  if (TextUtils.equals(smallPhotoUrl,newUrl) && smallPhotoUrl.contains(""String_Node_Str"")) {
    ;
  }
{
    Uri uri=Uri.parse(smallPhotoUrl);
    String imageUrl=uri.getQueryParameter(""String_Node_Str"");
    if (!TextUtils.isEmpty(imageUrl)) {
      try {
        newUrl=URLDecoder.decode(imageUrl,""String_Node_Str"");
        Helper.debug(""String_Node_Str"" + newUrl);
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
    }
  }
  return newUrl;
}","public static String getFacebookLargePhotoUrl(String smallPhotoUrl){
  String newUrl=FB_INTERNAL_URL_PATTERN.matcher(smallPhotoUrl).replaceAll(""String_Node_Str"");
  if (TextUtils.equals(smallPhotoUrl,newUrl) && smallPhotoUrl.contains(""String_Node_Str"")) {
    Uri uri=Uri.parse(smallPhotoUrl);
    String imageUrl=uri.getQueryParameter(""String_Node_Str"");
    if (!TextUtils.isEmpty(imageUrl)) {
      try {
        newUrl=URLDecoder.decode(imageUrl,""String_Node_Str"");
        Helper.debug(""String_Node_Str"" + newUrl);
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
    }
  }
  return newUrl;
}",0.990726429675425
36653,"private Route route() throws RoutesMapSyntaxException, RoutesMapLoadException {
  String classMethodFull=t.sval;
  t.next();
  if (t.ttype != '(') {
    throw new RoutesMapSyntaxException(t,""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
  }
  t.next();
  List<RouteParameter> parameters=new ArrayList<>();
  for (; ; ) {
    if (t.ttype == ')') {
      t.next();
      break;
    }
    parameters.add(parameter());
    if (t.ttype == ',') {
      t.next();
    }
  }
  Class[] classes=new Class[parameters.size()];
  for (int i=0; i < classes.length; i++) {
    try {
      classes[i]=getClassTypeBySimpleName(parameters.get(i).getDataType());
    }
 catch (    ClassNotFoundException ex) {
      throw new RoutesMapLoadException(ex);
    }
  }
  if (classMethodFull.trim().isEmpty()) {
    throw new RoutesMapLoadException(""String_Node_Str"");
  }
  int lio=classMethodFull.lastIndexOf('.');
  String className;
  String classMethod;
  if (lio < 0) {
    classMethod=classMethodFull;
switch (classMethod) {
case ""String_Node_Str"":
      return new Route(defaultController,tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
    return new Route(defaultController,tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
  return new Route(defaultController,tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
}
}
className=classMethodFull.substring(0,lio);
classMethod=classMethodFull.substring(lio + 1);
Class c;
Method m;
for (String use : uses) {
if ((c=tryLoadClass(className.isEmpty() ? use : use + ""String_Node_Str"" + className)) != null) {
if ((m=tryGetMethod(c,classMethod,classes)) != null) {
  return new Route(c,m,parameters);
}
}
}
throw new RoutesMapLoadException(""String_Node_Str"" + className + ""String_Node_Str""+ classMethod);
}","private Route route() throws RoutesMapSyntaxException, RoutesMapLoadException {
  String classMethodFull=t.sval;
  t.next();
  if (t.ttype != '(') {
    throw new RoutesMapSyntaxException(t,""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
  }
  t.next();
  List<RouteParameter> parameters=new ArrayList<>();
  for (; ; ) {
    if (t.ttype == ')') {
      t.next();
      break;
    }
    parameters.add(parameter());
    if (t.ttype == ',') {
      t.next();
    }
  }
  Class[] classes=new Class[parameters.size()];
  for (int i=0; i < classes.length; i++) {
    try {
      classes[i]=getClassTypeBySimpleName(parameters.get(i).getDataType());
    }
 catch (    ClassNotFoundException ex) {
      throw new RoutesMapLoadException(ex);
    }
  }
  if (classMethodFull.trim().isEmpty()) {
    throw new RoutesMapLoadException(""String_Node_Str"");
  }
  int lio=classMethodFull.lastIndexOf('.');
  String className;
  String classMethod;
  if (lio < 0) {
    classMethod=classMethodFull;
switch (classMethod) {
case ""String_Node_Str"":
      return new Route(defaultController,tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
    return new Route(defaultController,tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
  return new Route(defaultController,tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
return new Route(defaultController,tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
}
}
className=classMethodFull.substring(0,lio);
classMethod=classMethodFull.substring(lio + 1);
Class c;
Method m;
for (String use : uses) {
if ((c=tryLoadClass(className.isEmpty() ? use : use + ""String_Node_Str"" + className)) != null) {
if ((m=tryGetMethod(c,classMethod,classes)) != null) {
return new Route(c,m,parameters);
}
}
}
throw new RoutesMapLoadException(""String_Node_Str"" + className + ""String_Node_Str""+ classMethod);
}",0.965607087024492
36654,"public Response generateAsset(String path){
  File asset;
  if (ctx.getApp().getConfiguration().getBoolean(""String_Node_Str"",false)) {
    asset=new File(ctx.getApp().getConfiguration().get(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + path);
  }
 else {
    asset=new File(DefaultController.class.getResource(""String_Node_Str"" + path).getFile());
  }
  if (!asset.isFile() || !asset.exists() || !asset.canRead()) {
    return notFound();
  }
  String mime=MimeTypeUtils.getMimeTypeByExt(asset.getName().substring(asset.getName().lastIndexOf('.') + 1));
  try {
    return ok(new FileInputStream(asset)).setContentLength(asset.length()).setContentType(mime != null ? mime : ""String_Node_Str"");
  }
 catch (  IOException ex) {
    return notFound();
  }
}","public Response generateAsset(String path){
  InputStream asset=ctx.getApp().getResourceManager().load(""String_Node_Str"" + path);
  if (asset == null) {
    return notFound();
  }
  String mime=MimeTypeUtils.getMimeTypeByExt(path.substring(path.lastIndexOf('.') + 1));
  return ok(asset).setContentType(mime != null ? mime : ""String_Node_Str"");
}",0.4761904761904761
36655,"private Extension extension() throws Exception {
  RequestMethod method=null;
  Pattern pattern=null;
  for (; ; ) {
    if (t.ttype == TK_METHOD) {
      method=RequestMethod.valueOf(t.sval);
      t.next();
    }
 else     if (t.ttype == TK_PATTERN) {
      pattern=Pattern.compile(t.sval);
      t.next();
    }
 else     if (t.ttype == '{') {
      t.next();
      return new Extension(method,pattern,extensionList());
    }
 else     if (t.ttype == TK_WORD) {
      return new Extension(method,pattern,route());
    }
  }
}","private Extension extension() throws RoutesMapLoadException {
  RequestMethod method=null;
  Pattern pattern=null;
  for (; ; ) {
    if (t.ttype == TK_METHOD) {
      method=RequestMethod.valueOf(t.sval);
      t.next();
    }
 else     if (t.ttype == TK_PATTERN) {
      pattern=Pattern.compile(t.sval);
      t.next();
    }
 else     if (t.ttype == '{') {
      t.next();
      return new Extension(method,pattern,extensionList());
    }
 else     if (t.ttype == TK_WORD) {
      return new Extension(method,pattern,route());
    }
  }
}",0.9878391019644528
36656,"private Route route() throws Exception {
  String classMethodFull=t.sval;
  t.next();
  if (t.ttype != '(') {
    throw new Exception(""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
  }
  t.next();
  List<RouteParameter> parameters=new ArrayList<>();
  for (; ; ) {
    if (t.ttype == ')') {
      t.next();
      break;
    }
    parameters.add(parameter());
    if (t.ttype == ',') {
      t.next();
    }
  }
  Class[] classes=new Class[parameters.size() + 1];
  classes[0]=Context.class;
  for (int i=1; i < classes.length; i++) {
    classes[i]=getClassTypeBySimpleName(parameters.get(i - 1).getDataType());
  }
  if (classMethodFull.trim().isEmpty()) {
    throw new Exception(""String_Node_Str"");
  }
  int lio=classMethodFull.lastIndexOf('.');
  String className=""String_Node_Str"";
  String classMethod;
  if (lio < 0) {
    classMethod=classMethodFull;
switch (classMethod) {
case ""String_Node_Str"":
      return new Route(tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
    return new Route(tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
  return new Route(tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
}
}
className=classMethodFull.substring(0,lio);
classMethod=classMethodFull.substring(lio + 1);
Class c;
Method m;
for (String use : uses) {
if ((c=tryLoadClass(className.isEmpty() ? use : use + ""String_Node_Str"" + className)) != null) {
if ((m=tryGetMethod(c,classMethod,classes)) != null) {
  return new Route(m,parameters);
}
}
}
throw new Exception(""String_Node_Str"" + className + ""String_Node_Str""+ classMethod);
}","private Route route() throws RoutesMapLoadException {
  String classMethodFull=t.sval;
  t.next();
  if (t.ttype != '(') {
    throw new RoutesMapLoadException(""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
  }
  t.next();
  List<RouteParameter> parameters=new ArrayList<>();
  for (; ; ) {
    if (t.ttype == ')') {
      t.next();
      break;
    }
    parameters.add(parameter());
    if (t.ttype == ',') {
      t.next();
    }
  }
  Class[] classes=new Class[parameters.size() + 1];
  classes[0]=Context.class;
  for (int i=1; i < classes.length; i++) {
    try {
      classes[i]=getClassTypeBySimpleName(parameters.get(i - 1).getDataType());
    }
 catch (    ClassNotFoundException ex) {
      throw new RoutesMapLoadException(ex);
    }
  }
  if (classMethodFull.trim().isEmpty()) {
    throw new RoutesMapLoadException(""String_Node_Str"");
  }
  int lio=classMethodFull.lastIndexOf('.');
  String className=""String_Node_Str"";
  String classMethod;
  if (lio < 0) {
    classMethod=classMethodFull;
switch (classMethod) {
case ""String_Node_Str"":
      return new Route(tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
    return new Route(tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
case ""String_Node_Str"":
  return new Route(tryGetMethod(defaultController,""String_Node_Str"",classes),parameters);
}
}
className=classMethodFull.substring(0,lio);
classMethod=classMethodFull.substring(lio + 1);
Class c;
Method m;
for (String use : uses) {
if ((c=tryLoadClass(className.isEmpty() ? use : use + ""String_Node_Str"" + className)) != null) {
if ((m=tryGetMethod(c,classMethod,classes)) != null) {
  return new Route(m,parameters);
}
}
}
throw new RoutesMapLoadException(""String_Node_Str"" + className + ""String_Node_Str""+ classMethod);
}",0.9538020086083214
36657,"public List<Extension> load(InputStream input) throws Exception {
  t=new Tokenizer(new InputStreamReader(input));
  t.next();
  return extensionList();
}","public List<Extension> load(InputStream input) throws RoutesMapLoadException {
  t=new Tokenizer(new InputStreamReader(input));
  t.next();
  return extensionList();
}",0.9595015576323987
36658,"private List<Extension> extensionList() throws Exception {
  List<Extension> list=new ArrayList<>();
  while (t.ttype != Tokenizer.TK_EOF) {
switch (t.ttype) {
case TK_USE:
{
        t.next();
        if (t.ttype != TK_WORD) {
          throw new Exception(""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
        }
        uses.add(t.sval);
        t.next();
        break;
      }
case TK_METHOD:
case TK_PATTERN:
case TK_WORD:
case '{':
{
      list.add(extension());
      break;
    }
case '}':
{
    t.next();
    return list;
  }
}
}
return list;
}","private List<Extension> extensionList() throws RoutesMapLoadException {
  List<Extension> list=new ArrayList<>();
  while (t.ttype != Tokenizer.TK_EOF) {
switch (t.ttype) {
case TK_USE:
{
        t.next();
        if (t.ttype != TK_WORD) {
          throw new RoutesMapLoadException(""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
        }
        uses.add(t.sval);
        t.next();
        break;
      }
case TK_METHOD:
case TK_PATTERN:
case TK_WORD:
case '{':
{
      list.add(extension());
      break;
    }
case '}':
{
    t.next();
    return list;
  }
}
}
return list;
}",0.9775086505190312
36659,"private RouteParameter parameter() throws Exception {
  String value;
  String type=""String_Node_Str"";
  if (t.ttype != TK_INTEGER && t.ttype != TK_STRCONST) {
    throw new Exception(""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
  }
  boolean isConst=t.ttype == TK_STRCONST;
  value=t.sval;
  t.next();
  if (t.ttype == ':') {
    t.next();
    if (t.ttype != TK_WORD) {
      throw new Exception(""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
    }
    type=t.sval;
    t.next();
  }
  if (isConst) {
    return new RouteParameter(value,type);
  }
 else {
    return new RouteParameter(Integer.parseInt(value),type);
  }
}","private RouteParameter parameter() throws RoutesMapLoadException {
  String value;
  String type=""String_Node_Str"";
  if (t.ttype != TK_INTEGER && t.ttype != TK_STRCONST) {
    throw new RoutesMapLoadException(""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
  }
  boolean isConst=t.ttype == TK_STRCONST;
  value=t.sval;
  t.next();
  if (t.ttype == ':') {
    t.next();
    if (t.ttype != TK_WORD) {
      throw new RoutesMapLoadException(""String_Node_Str"" + (t.ttype >= 0 ? (char)t.ttype : ' '));
    }
    type=t.sval;
    t.next();
  }
  if (isConst) {
    return new RouteParameter(value,type);
  }
 else {
    return new RouteParameter(Integer.parseInt(value),type);
  }
}",0.9708302169035152
36660,"public void load(InputStream input) throws NullPointerException, Exception {
  if (input == null) {
    throw new NullPointerException();
  }
  BufferedReader br=new BufferedReader(new InputStreamReader(input));
  RouteMapLoader mapLoader=new RouteMapLoader();
  extensions=mapLoader.load(input);
}","public void load(InputStream input) throws NullPointerException, RoutesMapLoadException {
  if (input == null) {
    throw new NullPointerException();
  }
  BufferedReader br=new BufferedReader(new InputStreamReader(input));
  RouteMapLoader mapLoader=new RouteMapLoader();
  extensions=mapLoader.load(input);
}",0.9786535303776684
36661,"private Response forward(Context ctx,List<Extension> exts){
  Matcher m;
  for (  Extension ext : exts) {
    if (ext.getRequestMethod() != null && ext.getRequestMethod() != ctx.getRequest().getRequestMethod()) {
      continue;
    }
    if (ext.getPattern() == null) {
      m=null;
    }
 else     if (!(m=ext.getPattern().matcher(ctx.getRequest().getPath())).matches()) {
      continue;
    }
    if (ext.getRoute() != null) {
      Route route=ext.getRoute();
      Object[] args=new Object[route.getParameters().size() + 1];
      args[0]=ctx;
      for (int i=1; i < args.length; i++) {
        RouteParameter mp=route.getParameters().get(i - 1);
        if (mp.getType() == RouteParameter.ParameterType.CAPTURE_GROUP) {
          args[i]=mp.cast(m.group(mp.getCaptureGroup()));
        }
 else {
          args[i]=mp.cast();
        }
      }
      try {
        Response resp=(Response)route.getMethod().invoke(null,args);
        if (resp != null) {
          return resp;
        }
      }
 catch (      IllegalAccessException|IllegalArgumentException|InvocationTargetException ex) {
        log.catching(ex);
        Throwable cause=ex.getCause();
        if (cause == null) {
          return DefaultController.exception(ctx,ex);
        }
 else         if (cause instanceof Exception) {
          return DefaultController.exception(ctx,(Exception)cause);
        }
 else {
          return DefaultController.exception(ctx,ex);
        }
      }
    }
 else     if (ext.getNodes() != null && !ext.getNodes().isEmpty()) {
      Response resp=(Response)forward(ctx,ext.getNodes());
      if (resp != null) {
        return resp;
      }
    }
  }
  return null;
}","private Response forward(Context ctx,List<Extension> exts) throws RoutesMapException {
  if (exts == null) {
    throw new RoutesMapException(""String_Node_Str"");
  }
  Matcher m;
  for (  Extension ext : exts) {
    if (ext.getRequestMethod() != null && ext.getRequestMethod() != ctx.getRequest().getRequestMethod()) {
      continue;
    }
    if (ext.getPattern() == null) {
      m=null;
    }
 else     if (!(m=ext.getPattern().matcher(ctx.getRequest().getPath())).matches()) {
      continue;
    }
    if (ext.getRoute() != null) {
      Route route=ext.getRoute();
      Object[] args=new Object[route.getParameters().size() + 1];
      args[0]=ctx;
      for (int i=1; i < args.length; i++) {
        RouteParameter mp=route.getParameters().get(i - 1);
        if (mp.getType() == RouteParameter.ParameterType.CAPTURE_GROUP) {
          args[i]=mp.cast(m.group(mp.getCaptureGroup()));
        }
 else {
          args[i]=mp.cast();
        }
      }
      try {
        Response resp=(Response)route.getMethod().invoke(null,args);
        if (resp != null) {
          return resp;
        }
      }
 catch (      IllegalAccessException|IllegalArgumentException|InvocationTargetException ex) {
        log.catching(ex);
        Throwable cause=ex.getCause();
        if (cause == null) {
          return DefaultController.exception(ctx,ex);
        }
 else         if (cause instanceof Exception) {
          return DefaultController.exception(ctx,(Exception)cause);
        }
 else {
          return DefaultController.exception(ctx,ex);
        }
      }
    }
 else     if (ext.getNodes() != null && !ext.getNodes().isEmpty()) {
      Response resp=(Response)forward(ctx,ext.getNodes());
      if (resp != null) {
        return resp;
      }
    }
  }
  return null;
}",0.9693287037037036
36662,"public void loadFromResources(String path){
  try {
    load(Router.class.getResourceAsStream(""String_Node_Str"" + path));
    log.info(""String_Node_Str"",path);
  }
 catch (  Exception ex) {
    log.catching(ex);
  }
}","public void loadFromResources(String path){
  try {
    load(Router.class.getResourceAsStream(""String_Node_Str"" + path));
    log.info(""String_Node_Str"",path);
  }
 catch (  NullPointerException|RoutesMapLoadException ex) {
    log.catching(ex);
  }
}",0.9273504273504274
36663,"/** 
 * Constructs an instance of <code>BrookieTemplateNotFoundException</code> with the specified detail message.
 * @param msg the detail message.
 */
public TemplateNotFoundException(String msg){
  super(msg);
}","public TemplateNotFoundException(String msg){
  super(msg);
}",0.4436363636363636
36664,"/** 
 * Constructs an instance of <code>TemplateRenderException</code> with the specified detail message.
 * @param msg the detail message.
 */
public TemplateRenderException(String msg){
  super(msg);
}","public TemplateRenderException(String msg){
  super(msg);
}",0.4503816793893129
36665,Language getLanguage();,"/** 
 * @return language to use for API requests
 */
Language getLanguage();",0.4646464646464646
36666,String getClientId();,"/** 
 * @return client id
 */
String getClientId();",0.5833333333333334
36667,HostsProvider getHostsProvider();,"/** 
 * @return current host's provider
 */
HostsProvider getHostsProvider();",0.6
36668,void setAccessToken(String accessToken);,"/** 
 * Sets access token to use when executing API requests.
 * @param accessToken access token to use
 */
void setAccessToken(String accessToken);",0.425531914893617
36669,<T>T execute(ApiRequest<T> request) throws Exception ;,"/** 
 * Executes   {@link ApiRequest}.
 * @param request request to execute
 * @param < T > response document type
 * @return response document
 * @throws Exception if something goes wrong
 */
<T>T execute(ApiRequest<T> request) throws Exception ;",0.3588039867109635
36670,"public final Builder setPlatform(String platform){
  this.platform=checkNotEmpty(platform,""String_Node_Str"");
  return this;
}","/** 
 * Sets platform. Default value 'Java'.
 * @param platform platform
 * @return itself
 */
public final Builder setPlatform(String platform){
  this.platform=checkNotEmpty(platform,""String_Node_Str"");
  return this;
}",0.7262247838616714
36671,"protected void configHttpClient(OkHttpClient.Builder builder){
}","/** 
 * If required, subclasses may override this method to configure HTTP client.
 * @param builder this builder will be used to create HTTP client
 */
protected void configHttpClient(OkHttpClient.Builder builder){
}",0.4555160142348754
36672,"public final Builder setHostsProvider(HostsProvider hostsProvider){
  this.hostsProvider=checkNotNull(hostsProvider,""String_Node_Str"");
  return this;
}","/** 
 * Sets hosts provider. Default value is an instance of   {@link DefaultApiV1HostsProvider}.
 * @param hostsProvider hosts provider
 * @return itself
 */
public final Builder setHostsProvider(HostsProvider hostsProvider){
  this.hostsProvider=checkNotNull(hostsProvider,""String_Node_Str"");
  return this;
}",0.6565874730021598
36673,"protected DefaultApiClient(Builder builder){
  clientId=checkNotNull(builder.clientId,""String_Node_Str"");
  hostsProvider=builder.hostsProvider;
  userAgent=new DefaultUserAgent(checkNotNull(builder,""String_Node_Str"").platform);
  language=Language.getDefault();
  debugMode=builder.debugMode;
  OkHttpClient.Builder httpClientBuilder=createHttpClientBuilder();
  if (debugMode) {
    SSLSocketFactory sslSocketFactory=createSslSocketFactory();
    httpClientBuilder.sslSocketFactory(new WireLoggingSocketFactory(sslSocketFactory));
  }
  configHttpClient(httpClientBuilder);
  httpClient=httpClientBuilder.build();
}","/** 
 * Constructor.
 * @param builder provides required data to create an object
 */
protected DefaultApiClient(Builder builder){
  clientId=checkNotNull(builder.clientId,""String_Node_Str"");
  hostsProvider=builder.hostsProvider;
  userAgent=new DefaultUserAgent(checkNotNull(builder,""String_Node_Str"").platform);
  language=Language.getDefault();
  debugMode=builder.debugMode;
  OkHttpClient.Builder httpClientBuilder=createHttpClientBuilder();
  if (debugMode) {
    SSLSocketFactory sslSocketFactory=createSslSocketFactory();
    httpClientBuilder.sslSocketFactory(new WireLoggingSocketFactory(sslSocketFactory));
  }
  configHttpClient(httpClientBuilder);
  httpClient=httpClientBuilder.build();
}",0.9348484848484848
36674,"public final Builder setDebugMode(boolean debugMode){
  this.debugMode=debugMode;
  return this;
}","/** 
 * Sets debug mode. Enables logging. Default value is   {@code false}.
 * @param debugMode {@code true}, if debug mode is enabled
 * @return itself
 */
public final Builder setDebugMode(boolean debugMode){
  this.debugMode=debugMode;
  return this;
}",0.5552407932011332
36675,"public DefaultApiClient create(){
  return new DefaultApiClient(this);
}","/** 
 * Creates instance of   {@link DefaultApiClient}.
 * @return instance of {@link DefaultApiClient}
 */
public DefaultApiClient create(){
  return new DefaultApiClient(this);
}",0.5714285714285714
36676,"public final Builder setClientId(String clientId){
  this.clientId=clientId;
  return this;
}","/** 
 * Sets client id of   {@link DefaultApiClient}.
 * @param clientId client id
 * @return itself
 */
public final Builder setClientId(String clientId){
  this.clientId=clientId;
  return this;
}",0.6391752577319587
36677,"private static void logWire(String prefix,byte[] data,int off,int len) throws IOException {
  StringBuilder buffer=new StringBuilder(prefix).append(""String_Node_Str"").append(data.length).append(""String_Node_Str"").append(off).append(""String_Node_Str"").append(len).append('\n');
  for (int i=0; i < len; i++) {
    byte b=data[off + i];
    if (b == 13) {
      buffer.append(""String_Node_Str"");
    }
 else     if (b == 10) {
      buffer.append(""String_Node_Str"");
    }
 else     if (b < 32 || b > 127) {
      buffer.append(""String_Node_Str"").append(Numbers.byteToHex(b));
    }
 else {
      buffer.append((char)b);
    }
  }
  LOG.info(buffer.toString());
}","private static void logWire(String prefix,byte[] data,int off,int len){
  StringBuilder buffer=new StringBuilder(prefix).append(""String_Node_Str"").append(data.length).append(""String_Node_Str"").append(off).append(""String_Node_Str"").append(len).append('\n');
  for (int i=0; i < len; i++) {
    byte b=data[off + i];
    if (b == 13) {
      buffer.append(""String_Node_Str"");
    }
 else     if (b == 10) {
      buffer.append(""String_Node_Str"");
    }
 else     if (b < 32) {
      buffer.append(""String_Node_Str"").append(Numbers.byteToHex(b));
    }
 else {
      buffer.append((char)b);
    }
  }
  LOG.info(buffer.toString());
}",0.975987606506584
36678,"/** 
 * @see {@link BasePaymentProcess#setAccessToken(String)}
 */
public void setAccessToken(String accessToken){
  client.setAccessToken(accessToken);
  invalidatePaymentContext();
}","/** 
 * @see BasePaymentProcess#setAccessToken(String)
 */
public void setAccessToken(String accessToken){
  client.setAccessToken(accessToken);
  invalidatePaymentContext();
}",0.9777777777777776
36679,"/** 
 * @see {@link ExternalPaymentProcess#setInstanceId(String)}
 */
public void setInstanceId(String instanceId){
  externalPaymentProcess.setInstanceId(instanceId);
}","/** 
 * @see ExternalPaymentProcess#setInstanceId(String)
 */
public void setInstanceId(String instanceId){
  externalPaymentProcess.setInstanceId(instanceId);
}",0.9757575757575756
36680,"/** 
 * Tests that complex showcase successfully proceeds two steps asynchronously.
 * @throws Exception
 */
@Test public void testProceedSuccess() throws Exception {
  final ShowcaseProcess showcaseProcess=initShowcaseProcess();
  final ShowcaseContext showcaseContext=showcaseProcess.showcaseContext;
  Showcase showcase=showcaseContext.getCurrentStep().showcase;
  final Text inn=(Text)showcase.form.items.get(0);
  inn.setValue(SAMPLE_INN);
  showcaseProcess.proceed();
  assertEquals(showcaseContext.getHistorySize(),1);
  showcase=showcaseContext.getCurrentStep().showcase;
  ((Text)showcase.form.items.get(0)).setValue(""String_Node_Str"");
  ((Select)showcase.form.items.get(1)).setValue(""String_Node_Str"");
  showcaseProcess.proceed();
  assertEquals(showcaseContext.getHistorySize(),2);
  showcaseProcess.proceed();
  assertEquals(showcaseContext.getHistorySize(),3);
}","/** 
 * Tests that complex showcase successfully proceeds two steps asynchronously.
 * @throws Exception if something goes wrong
 */
@Test public void testProceedSuccess() throws Exception {
  final ShowcaseProcess showcaseProcess=initShowcaseProcess();
  final ShowcaseContext showcaseContext=showcaseProcess.showcaseContext;
  Showcase showcase=showcaseContext.getCurrentStep().showcase;
  final Text inn=(Text)showcase.form.items.get(0);
  inn.setValue(SAMPLE_INN);
  showcaseProcess.proceed();
  assertEquals(showcaseContext.getHistorySize(),1);
  showcase=showcaseContext.getCurrentStep().showcase;
  ((Text)showcase.form.items.get(0)).setValue(""String_Node_Str"");
  ((Select)showcase.form.items.get(1)).setValue(""String_Node_Str"");
  showcaseProcess.proceed();
  assertEquals(showcaseContext.getHistorySize(),2);
  showcaseProcess.proceed();
  assertEquals(showcaseContext.getHistorySize(),3);
}",0.9865016872890888
36681,"static <T extends AccountInfo>void serialize(JsonObject object,T src){
  object.addProperty(MEMBER_ACCOUNT,src.account);
  object.addProperty(MEMBER_BALANCE,src.balance);
  object.addProperty(MEMBER_CURRENCY,src.currency.numericCode);
  object.addProperty(MEMBER_STATUS,src.accountStatus.code);
  object.addProperty(MEMBER_TYPE,src.accountType.code);
  object.add(MEMBER_BALANCE_DETAILS,BalanceDetailsTypeAdapter.getInstance().toJsonTree(src.balanceDetails));
}","static <T extends AccountInfo>void serialize(JsonObject object,T src){
  object.addProperty(MEMBER_ACCOUNT,src.account);
  object.addProperty(MEMBER_BALANCE,src.balance);
  object.addProperty(MEMBER_CURRENCY,src.currency.numericCode.toString());
  object.addProperty(MEMBER_STATUS,src.accountStatus.code);
  object.addProperty(MEMBER_TYPE,src.accountType.code);
  object.add(MEMBER_BALANCE_DETAILS,BalanceDetailsTypeAdapter.getInstance().toJsonTree(src.balanceDetails));
}",0.9882100750267953
36682,"@Test public void testProcessExternalPayment() throws IOException, InsufficientScopeException, InvalidTokenException, InvalidRequestException {
  reqRequestExternalPayment=createRequestExternalPayment();
  respRequestExternalPayment=session.execute(reqRequestExternalPayment);
  String successUri=""String_Node_Str"";
  String failUri=""String_Node_Str"";
  reqProcessExternalPayment=new ProcessExternalPayment.Request(respInstanceId.instanceId,respRequestExternalPayment.requestId,successUri,failUri,false);
  testProcessPayment(reqProcessExternalPayment);
}","@Test public void testProcessExternalPayment() throws IOException, InsufficientScopeException, InvalidTokenException, InvalidRequestException {
  reqRequestExternalPayment=createRequestExternalPayment();
  respRequestExternalPayment=session.execute(reqRequestExternalPayment);
  if (respRequestExternalPayment.status == BaseRequestPayment.Status.SUCCESS) {
    String successUri=""String_Node_Str"";
    String failUri=""String_Node_Str"";
    reqProcessExternalPayment=new ProcessExternalPayment.Request(respInstanceId.instanceId,respRequestExternalPayment.requestId,successUri,failUri,false);
    testProcessPayment(reqProcessExternalPayment);
  }
}",0.9234608985024958
36683,"/** 
 * Gets nullable array from a JSON object. Uses   {@link ArrayList} implementation of{@link List}.
 * @param object json object
 * @param memberName member's name
 * @param converter converter
 * @param < T > type of a value in the array
 * @return list of values
 */
public static <T>List<T> getArray(JsonObject object,String memberName,TypeAdapter<T> converter){
  checkParameters(object,memberName);
  JsonArray array=object.getAsJsonArray(memberName);
  if (array == null) {
    return new ArrayList<>();
  }
  if (converter == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<T> result=new ArrayList<>(array.size());
  for (  JsonElement element : array) {
    result.add(converter.fromJson(element));
  }
  return result;
}","/** 
 * Gets nullable array from a JSON object. Uses   {@link ArrayList} implementation of{@link List}.
 * @param object json object
 * @param memberName member's name
 * @param converter converter
 * @param < T > type of a value in the array
 * @return list of values
 */
public static <T>List<T> getArray(JsonObject object,String memberName,TypeAdapter<T> converter){
  checkParameters(object,memberName);
  JsonArray array=object.getAsJsonArray(memberName);
  if (array == null) {
    return null;
  }
  if (converter == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<T> result=new ArrayList<>(array.size());
  for (  JsonElement element : array) {
    result.add(converter.fromJson(element));
  }
  return result;
}",0.987375415282392
36684,"private void fillPaymentParameters(Map<String,String> parameters,Group group){
  for (  Component component : group.items) {
    if (component instanceof Group) {
      fillPaymentParameters(parameters,(Group)component);
    }
 else     if (component instanceof Parameter) {
      Parameter parameter=(Parameter)component;
      parameters.put(parameter.getName(),parameter.getValue());
      if (component instanceof Select) {
        Group selectedGroup=((Select)component).getSelectedOption().group;
        if (selectedGroup != null) {
          fillPaymentParameters(parameters,selectedGroup);
        }
      }
    }
  }
}","private static void fillPaymentParameters(Map<String,String> parameters,Group group){
  for (  Component component : group.items) {
    if (component instanceof Group) {
      fillPaymentParameters(parameters,(Group)component);
    }
 else     if (component instanceof Parameter) {
      Parameter parameter=(Parameter)component;
      parameters.put(parameter.getName(),parameter.getValue());
      if (component instanceof Select) {
        Group selectedGroup=((Select)component).getSelectedOption().group;
        if (selectedGroup != null) {
          fillPaymentParameters(parameters,selectedGroup);
        }
      }
    }
  }
}",0.9944576405384006
36685,"public BaseTypeAdapter(){
  final Class<T> type=getType();
  if (registerAsHierarchy()) {
    registerTypeHierarchyAdapter(type,this);
  }
 else {
    registerTypeAdapter(type,this);
  }
}","public BaseTypeAdapter(){
  registerTypeHierarchyAdapter(getType(),this);
}",0.532319391634981
36686,"@Override public JsonElement serialize(Error src,Type typeOfSrc,JsonSerializationContext context){
  JsonObject jsonObject=new JsonObject();
  jsonObject.addProperty(""String_Node_Str"",src.name);
  jsonObject.addProperty(""String_Node_Str"",src.alert);
  return jsonObject;
}","@Override public JsonElement serialize(Error src,Type typeOfSrc,JsonSerializationContext context){
  JsonObject jsonObject=new JsonObject();
  jsonObject.addProperty(MEMBER_NAME,src.name);
  jsonObject.addProperty(MEMBER_ALERT,src.alert);
  return jsonObject;
}",0.7654784240150094
36687,"private ShowcaseTypeAdapter(){
}","private ShowcaseTypeAdapter(){
  GroupTypeAdapter.getInstance();
}",0.6530612244897959
36688,"@Override public Error deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  JsonObject jsonObject=json.getAsJsonObject();
  return new Error(JsonUtils.getMandatoryString(jsonObject,MEMBER_NAME),JsonUtils.getMandatoryString(jsonObject,MEMBER_ALERT));
}","@Override public Error deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  JsonObject jsonObject=json.getAsJsonObject();
  return new Error(getString(jsonObject,MEMBER_NAME),getMandatoryString(jsonObject,MEMBER_ALERT));
}",0.9399656946826758
36689,"private GroupTypeAdapter(){
}","private GroupTypeAdapter(){
  NumberTypeAdapter.getInstance();
  AmountTypeAdapter.getInstance();
  CheckboxTypeAdapter.getInstance();
  DateTypeAdapter.getInstance();
  EmailTypeAdapter.getInstance();
  MonthTypeAdapter.getInstance();
  SelectTypeAdapter.getInstance();
  SubmitTypeAdapter.getInstance();
  TextAreaTypeAdapter.getInstance();
  TextTypeAdapter.getInstance();
  TelTypeAdapter.getInstance();
  ParagraphTypeAdapter.getInstance();
}",0.1218487394957983
36690,"public static Type getClassFromType(String code){
  return TYPE_MAPPING.get(Component.Type.parse(code));
}","private static Type getClassFromType(String code){
  return TYPE_MAPPING.get(Component.Type.parse(code));
}",0.9577464788732394
36691,"@Override protected Component deserializeItem(JsonElement json,JsonDeserializationContext context){
  return context.deserialize(json,ComponentTypeAdapterFactory.getClassFromType(json.getAsJsonObject().get(""String_Node_Str"").getAsString()));
}","@Override protected Component deserializeItem(JsonElement json,JsonDeserializationContext context){
  return context.deserialize(json,ComponentTypeAdapterFactory.getJsonComponentType(json));
}",0.8367816091954023
36692,"private static Group deserializeOptionGroup(JsonArray items,JsonDeserializationContext context){
  Group.Builder groupBuilder=new Group.Builder();
  groupBuilder.setLayout(Group.Layout.VERTICAL);
  for (  JsonElement item : items) {
    Component component=(Component)context.deserialize(item,ComponentTypeAdapterFactory.getClassFromType(item.getAsJsonObject().get(""String_Node_Str"").getAsString()));
    groupBuilder.addItem(component);
  }
  return groupBuilder.create();
}","private static Group deserializeOptionGroup(JsonArray items,JsonDeserializationContext context){
  Group.Builder groupBuilder=new Group.Builder();
  groupBuilder.setLayout(Group.Layout.VERTICAL);
  for (  JsonElement item : items) {
    Component component=context.deserialize(item,ComponentTypeAdapterFactory.getJsonComponentType(item));
    groupBuilder.addItem(component);
  }
  return groupBuilder.create();
}",0.740990990990991
36693,"/** 
 * Gets nullable DateTime from a JSON object.
 * @param object json object
 * @param memberName member's name
 * @return {@link org.joda.time.DateTime} value
 */
public static DateTime getDateTime(JsonObject object,String memberName){
  JsonPrimitive primitive=getPrimitiveChecked(object,memberName);
  return primitive == null ? null : DateTime.parse(primitive.getAsString(),ISO_FORMATTER);
}","/** 
 * Gets nullable DateTime from a JSON object using formatter.
 * @param object     json object
 * @param memberName member's name
 * @param formatter  {@link org.joda.time.DateTime}'s formatter.
 * @return {@link org.joda.time.DateTime} value
 */
public static DateTime getDateTime(JsonObject object,String memberName,DateTimeFormatter formatter){
  JsonPrimitive primitive=getPrimitiveChecked(object,memberName);
  return primitive == null ? null : DateTime.parse(primitive.getAsString(),formatter);
}",0.8375690607734807
36694,"@Override protected JsonElement serializeItem(Component item,JsonSerializationContext context){
  return context.serialize(item,mapping.get(item.type));
}","@Override protected JsonElement serializeItem(Component item,JsonSerializationContext context){
  return context.serialize(item,item.getClass());
}",0.9235880398671096
36695,"@Override protected Component deserializeItem(JsonElement json,JsonDeserializationContext context){
  Component.Type type=Component.Type.parse(json.getAsJsonObject().get(""String_Node_Str"").getAsString());
  return context.deserialize(json,mapping.get(type));
}","@Override protected Component deserializeItem(JsonElement json,JsonDeserializationContext context){
  return context.deserialize(json,ComponentTypeAdapterFactory.getClassFromType(json.getAsJsonObject().get(""String_Node_Str"").getAsString()));
}",0.6998011928429424
36696,"@Override protected void serialize(Amount from,JsonObject to,JsonSerializationContext context){
  super.serialize(from,to,context);
}","@Override protected void serialize(Amount from,JsonObject to,JsonSerializationContext context){
  to.addProperty(KEY_CURRENCY,from.currency.alphaCode);
  to.add(KEY_FEE,context.serialize(from.fee,Fee.class));
  super.serialize(from,to,context);
}",0.5435356200527705
36697,"@Override protected void serialize(T from,JsonObject to,JsonSerializationContext context){
  to.addProperty(KEY_ALERT,from.alert);
  to.addProperty(KEY_HINT,from.hint);
  to.addProperty(KEY_LABEL,from.label);
  to.addProperty(KEY_READONLY,from.readonly);
  to.addProperty(KEY_REQUIRED,from.required);
}","@Override protected void serialize(T from,JsonObject to,JsonSerializationContext context){
  to.addProperty(KEY_ALERT,from.alert);
  to.addProperty(KEY_HINT,from.hint);
  to.addProperty(KEY_LABEL,from.label);
  if (from.readonly) {
    to.addProperty(KEY_READONLY,true);
  }
  if (!from.required) {
    to.addProperty(KEY_REQUIRED,false);
  }
}",0.8390092879256966
36698,"@Override protected void deserialize(JsonObject from,U builder,JsonDeserializationContext context){
  builder.setAlert(JsonUtils.getString(from,KEY_ALERT));
  builder.setHint(JsonUtils.getString(from,KEY_HINT));
  builder.setLabel(JsonUtils.getString(from,KEY_LABEL));
  builder.setReadonly(JsonUtils.getBoolean(from,KEY_READONLY));
  builder.setRequired(JsonUtils.getBoolean(from,KEY_REQUIRED));
}","@Override protected void deserialize(JsonObject from,U builder,JsonDeserializationContext context){
  builder.setAlert(JsonUtils.getString(from,KEY_ALERT));
  builder.setHint(JsonUtils.getString(from,KEY_HINT));
  builder.setLabel(JsonUtils.getString(from,KEY_LABEL));
  if (from.has(KEY_READONLY)) {
    builder.setReadonly(from.get(KEY_READONLY).getAsBoolean());
  }
  if (from.has(KEY_REQUIRED)) {
    builder.setRequired(from.get(KEY_REQUIRED).getAsBoolean());
  }
}",0.7419354838709677
36699,"@Override protected void serialize(Date from,JsonObject to,JsonSerializationContext context){
  super.serialize(from,to,context);
}","@Override protected void serialize(T from,JsonObject to,JsonSerializationContext context){
  to.addProperty(KEY_MIN,from.min.toString(getFormatter()));
  to.addProperty(KEY_MAX,from.max.toString(getFormatter()));
  super.serialize(from,to,context);
}",0.6666666666666666
36700,"@Override protected void deserialize(JsonObject from,Date.Builder builder,JsonDeserializationContext context){
  builder.setMin(JsonUtils.getDateTime(from,KEY_MIN));
  builder.setMax(JsonUtils.getDateTime(from,KEY_MAX));
  super.deserialize(from,builder,context);
}","@Override protected void deserialize(JsonObject from,U builder,JsonDeserializationContext context){
  builder.setMin(JsonUtils.getDateTime(from,KEY_MIN,getFormatter()));
  builder.setMax(JsonUtils.getDateTime(from,KEY_MAX,getFormatter()));
  super.deserialize(from,builder,context);
}",0.9216757741347904
36701,"@Override protected void deserialize(JsonObject from,Select.Builder builder,JsonDeserializationContext context){
  for (  JsonElement item : from.getAsJsonArray(KEY_OPTIONS)) {
    JsonObject itemObject=item.getAsJsonObject();
    Select.Option option=new Select.Option(itemObject.get(KEY_LABEL).getAsString(),itemObject.get(KEY_VALUE).getAsString());
    if (itemObject.has(KEY_GROUP)) {
      option.group=context.deserialize(item,Group.class);
    }
    builder.addOption(option);
  }
  builder.setStyle(Select.Style.parse(JsonUtils.getString(from,KEY_STYLE)));
  super.deserialize(from,builder,context);
}","@Override protected void deserialize(JsonObject from,Select.Builder builder,JsonDeserializationContext context){
  for (  JsonElement item : from.getAsJsonArray(KEY_OPTIONS)) {
    JsonObject itemObject=item.getAsJsonObject();
    Select.Option option=new Select.Option(itemObject.get(KEY_LABEL).getAsString(),itemObject.get(KEY_VALUE).getAsString());
    if (itemObject.has(KEY_GROUP)) {
      option.group=context.deserialize(itemObject.get(KEY_GROUP),Group.class);
    }
    builder.addOption(option);
  }
  builder.setStyle(Select.Style.parse(JsonUtils.getString(from,KEY_STYLE)));
  super.deserialize(from,builder,context);
}",0.9830508474576272
36702,"public Map<String,String> makeParams(){
  Map<String,String> result=new HashMap<String,String>();
  result.put(PARAM_TO,to);
switch (toType) {
case ACCOUNT:
    result.put(PARAM_TO_TYPE,""String_Node_Str"");
case PHONE:
  result.put(PARAM_TO_TYPE,""String_Node_Str"");
}
result.put(PARAM_AMOUNT_DUE,amountDue.toString());
if (!Utils.isEmpty(message)) {
result.put(PARAM_MESSAGE,message);
}
return result;
}","public Map<String,String> makeParams(){
  Map<String,String> result=new HashMap<String,String>();
  result.put(PARAM_TO,to);
switch (toType) {
case ACCOUNT:
    result.put(PARAM_TO_TYPE,""String_Node_Str"");
  break;
case PHONE:
result.put(PARAM_TO_TYPE,""String_Node_Str"");
break;
}
result.put(PARAM_AMOUNT_DUE,amountDue.toString());
if (!Utils.isEmpty(message)) {
result.put(PARAM_MESSAGE,message);
}
return result;
}",0.9779951100244498
36703,"private Future<T> createFuture(){
  return new Future<T>(){
    @Override public T get() throws Exception {
      final CountDownLatch latch=new CountDownLatch(1);
      final AtomicReference<T> resultReference=new AtomicReference<>();
      final AtomicReference<Exception> errorReference=new AtomicReference<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
          resultReference.set(result);
          latch.countDown();
        }
        @Override public void failed(        Exception throwable){
          errorReference.set(throwable);
          latch.countDown();
        }
      }
);
      latch.await();
      if (errorReference.get() == null) {
        return resultReference.get();
      }
 else {
        throw errorReference.get();
      }
    }
    @Override public Future<T> consume(    Consumer<T> consumer){
      FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
          try {
            consumer.accept(result);
          }
 catch (          Exception e) {
            this.failed(e);
          }
          nextFuture.getTrigger().completed(result);
        }
        @Override public void failed(        Exception throwable){
          nextFuture.getTrigger().failed(throwable);
        }
      }
);
      return nextFuture.getFuture();
    }
    @Override public <R>Future<R> map(    Function<T,R> mapper){
      FutureWithTrigger<R> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
          try {
            R mapped=mapper.apply(result);
            nextFuture.getTrigger().completed(mapped);
          }
 catch (          Exception e) {
            this.failed(e);
          }
        }
        @Override public void failed(        Exception throwable){
          nextFuture.getTrigger().failed(throwable);
        }
      }
);
      return nextFuture.getFuture();
    }
    @Override public <R>Future<R> mapFuture(    FutureFunction<T,R> mapper){
      FutureWithTrigger<R> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
          Future<R> mapped=mapper.apply(result);
          mapped.consume(nextFuture.getTrigger());
        }
        @Override public void failed(        Exception throwable){
          nextFuture.getTrigger().failed(throwable);
        }
      }
);
      return nextFuture.getFuture();
    }
    @Override public <E extends Exception>Future<T> trap(    Class<E> exceptionClass,    ExceptionTrapper<E,T> trapper){
      FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
        }
        @Override public void failed(        Exception throwable){
          if (exceptionClass.isAssignableFrom(throwable.getClass())) {
            try {
              T res=trapper.trap((E)throwable);
              nextFuture.getTrigger().completed(res);
            }
 catch (            Exception ex) {
              nextFuture.getTrigger().failed(throwable);
            }
          }
        }
      }
);
      return nextFuture.getFuture();
    }
    @Override public <E extends Exception>Future<T> trapFuture(    Class<E> exceptionClass,    ExceptionTrapper<E,Future<T>> trapper){
      FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
        }
        @Override public void failed(        Exception throwable){
          if (exceptionClass.isAssignableFrom(throwable.getClass())) {
            try {
              Future<T> res=trapper.trap((E)throwable);
              res.consume(nextFuture.getTrigger());
            }
 catch (            Exception ex) {
              nextFuture.getTrigger().failed(throwable);
            }
          }
        }
      }
);
      return nextFuture.getFuture();
    }
  }
;
}","private Future<T> createFuture(){
  return new Future<T>(){
    @Override public T get() throws Exception {
      final CountDownLatch latch=new CountDownLatch(1);
      final AtomicReference<T> resultReference=new AtomicReference<>();
      final AtomicReference<Exception> errorReference=new AtomicReference<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
          resultReference.set(result);
          latch.countDown();
        }
        @Override public void failed(        Exception throwable){
          errorReference.set(throwable);
          latch.countDown();
        }
      }
);
      latch.await();
      if (errorReference.get() == null) {
        return resultReference.get();
      }
 else {
        throw errorReference.get();
      }
    }
    @Override public Future<T> consume(    Consumer<T> consumer){
      FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
          try {
            consumer.accept(result);
          }
 catch (          Exception e) {
            this.failed(e);
            return;
          }
          nextFuture.getTrigger().completed(result);
        }
        @Override public void failed(        Exception throwable){
          nextFuture.getTrigger().failed(throwable);
        }
      }
);
      return nextFuture.getFuture();
    }
    @Override public <R>Future<R> map(    Function<T,R> mapper){
      FutureWithTrigger<R> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
          try {
            R mapped=mapper.apply(result);
            nextFuture.getTrigger().completed(mapped);
          }
 catch (          Exception e) {
            this.failed(e);
          }
        }
        @Override public void failed(        Exception throwable){
          nextFuture.getTrigger().failed(throwable);
        }
      }
);
      return nextFuture.getFuture();
    }
    @Override public <R>Future<R> mapFuture(    FutureFunction<T,R> mapper){
      FutureWithTrigger<R> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
          Future<R> mapped=mapper.apply(result);
          mapped.consume(nextFuture.getTrigger());
        }
        @Override public void failed(        Exception throwable){
          nextFuture.getTrigger().failed(throwable);
        }
      }
);
      return nextFuture.getFuture();
    }
    @Override public <E extends Exception>Future<T> trap(    Class<E> exceptionClass,    ExceptionTrapper<E,T> trapper){
      FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
        }
        @Override public void failed(        Exception throwable){
          if (exceptionClass.isAssignableFrom(throwable.getClass())) {
            try {
              T res=trapper.trap((E)throwable);
              nextFuture.getTrigger().completed(res);
            }
 catch (            Exception ex) {
              nextFuture.getTrigger().failed(throwable);
            }
          }
 else {
            nextFuture.getTrigger().failed(throwable);
          }
        }
      }
);
      return nextFuture.getFuture();
    }
    @Override public <E extends Exception>Future<T> trapFuture(    Class<E> exceptionClass,    ExceptionTrapper<E,Future<T>> trapper){
      FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
      FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
        @Override public void completed(        T result){
        }
        @Override public void failed(        Exception throwable){
          if (exceptionClass.isAssignableFrom(throwable.getClass())) {
            try {
              Future<T> res=trapper.trap((E)throwable);
              res.consume(nextFuture.getTrigger());
            }
 catch (            Exception ex) {
              nextFuture.getTrigger().failed(throwable);
            }
          }
        }
      }
);
      return nextFuture.getFuture();
    }
  }
;
}",0.9891391334171716
36704,"@Override public Future<T> consume(Consumer<T> consumer){
  FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
  FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
    @Override public void completed(    T result){
      try {
        consumer.accept(result);
      }
 catch (      Exception e) {
        this.failed(e);
      }
      nextFuture.getTrigger().completed(result);
    }
    @Override public void failed(    Exception throwable){
      nextFuture.getTrigger().failed(throwable);
    }
  }
);
  return nextFuture.getFuture();
}","@Override public Future<T> consume(Consumer<T> consumer){
  FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
  FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
    @Override public void completed(    T result){
      try {
        consumer.accept(result);
      }
 catch (      Exception e) {
        this.failed(e);
        return;
      }
      nextFuture.getTrigger().completed(result);
    }
    @Override public void failed(    Exception throwable){
      nextFuture.getTrigger().failed(throwable);
    }
  }
);
  return nextFuture.getFuture();
}",0.9860383944153578
36705,"@Override public <E extends Exception>Future<T> trap(Class<E> exceptionClass,ExceptionTrapper<E,T> trapper){
  FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
  FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
    @Override public void completed(    T result){
    }
    @Override public void failed(    Exception throwable){
      if (exceptionClass.isAssignableFrom(throwable.getClass())) {
        try {
          T res=trapper.trap((E)throwable);
          nextFuture.getTrigger().completed(res);
        }
 catch (        Exception ex) {
          nextFuture.getTrigger().failed(throwable);
        }
      }
    }
  }
);
  return nextFuture.getFuture();
}","@Override public <E extends Exception>Future<T> trap(Class<E> exceptionClass,ExceptionTrapper<E,T> trapper){
  FutureWithTrigger<T> nextFuture=new FutureWithTrigger<>();
  FutureWithTrigger.this.callbackLink.setCallbackTo(new Callback<T>(){
    @Override public void completed(    T result){
    }
    @Override public void failed(    Exception throwable){
      if (exceptionClass.isAssignableFrom(throwable.getClass())) {
        try {
          T res=trapper.trap((E)throwable);
          nextFuture.getTrigger().completed(res);
        }
 catch (        Exception ex) {
          nextFuture.getTrigger().failed(throwable);
        }
      }
 else {
        nextFuture.getTrigger().failed(throwable);
      }
    }
  }
);
  return nextFuture.getFuture();
}",0.9538249483115092
36706,"public void run() throws Exception {
  EventLoopGroup bossGroup=new NioEventLoopGroup(1);
  EventLoopGroup workerGroup=new NioEventLoopGroup();
  try {
    ServerBootstrap b=new ServerBootstrap();
    b.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new HttpStaticFileServerInitializer());
    b.bind(port).sync().channel().closeFuture().sync();
    System.out.println(""String_Node_Str"" + port + '.');
  }
  finally {
    bossGroup.shutdownGracefully();
    workerGroup.shutdownGracefully();
  }
}","public void run() throws Exception {
  EventLoopGroup bossGroup=new NioEventLoopGroup(1);
  EventLoopGroup workerGroup=new NioEventLoopGroup();
  try {
    ServerBootstrap b=new ServerBootstrap();
    b.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new HttpStaticFileServerInitializer());
    Channel ch=b.bind(port).sync().channel();
    System.out.println(""String_Node_Str"" + port + '.');
    ch.closeFuture().sync();
  }
  finally {
    bossGroup.shutdownGracefully();
    workerGroup.shutdownGracefully();
  }
}",0.8934198331788693
36707,"/** 
 * Parses out the HEADLINE element, which is a parse of the dateline if it exists. Assumes the position of vn is at a ""DOC"" tag
 */
private String parseHeadline(VTDNav vn) throws NavException {
  require(vn.matchElement(AgigaConstants.DOC));
  if (!vn.toElement(VTDNav.FIRST_CHILD,AgigaConstants.HEADLINE)) {
    log.finer(""String_Node_Str"");
    return null;
  }
  return vn.toString(vn.getText()).trim();
}","/** 
 * Parses out the HEADLINE element, which is a parse of the dateline if it exists. Assumes the position of vn is at a ""DOC"" tag
 */
private String parseHeadline(VTDNav vn) throws NavException {
  require(vn.matchElement(AgigaConstants.DOC));
  if (!vn.toElement(VTDNav.FIRST_CHILD,AgigaConstants.HEADLINE) || vn.getText() == -1) {
    log.finer(""String_Node_Str"");
    return null;
  }
  return vn.toString(vn.getText()).trim();
}",0.9740566037735848
36708,"/** 
 * Parses out the DATELINE element, which is a parse of the dateline if it exists. Assumes the position of vn is at a ""DOC"" tag
 */
private String parseDateline(VTDNav vn) throws NavException {
  require(vn.matchElement(AgigaConstants.DOC));
  if (!vn.toElement(VTDNav.FIRST_CHILD,AgigaConstants.DATELINE)) {
    log.finer(""String_Node_Str"");
    return null;
  }
  return vn.toString(vn.getText()).trim();
}","/** 
 * Parses out the DATELINE element, which is a parse of the dateline if it exists. Assumes the position of vn is at a ""DOC"" tag
 */
private String parseDateline(VTDNav vn) throws NavException {
  require(vn.matchElement(AgigaConstants.DOC));
  if (!vn.toElement(VTDNav.FIRST_CHILD,AgigaConstants.DATELINE) || vn.getText() == -1) {
    log.finer(""String_Node_Str"");
    return null;
  }
  return vn.toString(vn.getText()).trim();
}",0.9740566037735848
36709,"public static void main(String args[]) throws Exception {
  Util.initializeLogging();
  String usage=""String_Node_Str"" + AgigaPrinter.class.getName() + ""String_Node_Str""+ ""String_Node_Str"";
  String[][] options=new String[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  for (  String[] pair : options) {
    usage+=String.format(""String_Node_Str"",pair[0],pair[1]);
  }
  usage+=""String_Node_Str"";
  usage+=""String_Node_Str"";
  log.info(""String_Node_Str"");
  if (args.length != 2) {
    log.severe(usage);
    System.exit(1);
  }
  String type=args[0];
  String inputFile=args[1];
  Writer writer=new PrintWriter(System.out,true);
  if (type.equals(""String_Node_Str"")) {
    printWords(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printLemmas(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printPos(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printNer(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printDeps(inputFile,writer,DependencyForm.BASIC_DEPS);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printDeps(inputFile,writer,DependencyForm.COL_DEPS);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printDeps(inputFile,writer,DependencyForm.COL_CCPROC_DEPS);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printPhraseStructure(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printCoref(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printStanfordDeps(inputFile);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printStanfordPhraseStructure(inputFile);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printForTestingOnly(inputFile,writer);
  }
 else {
    log.severe(""String_Node_Str"" + type);
    log.severe(usage);
    System.exit(1);
  }
  writer.flush();
}","public static void main(String args[]) throws Exception {
  Util.initializeLogging();
  String usage=""String_Node_Str"" + AgigaPrinter.class.getName() + ""String_Node_Str""+ ""String_Node_Str"";
  String[][] options=new String[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  for (  String[] pair : options) {
    usage+=String.format(""String_Node_Str"",pair[0],pair[1]);
  }
  usage+=""String_Node_Str"";
  usage+=""String_Node_Str"";
  log.info(""String_Node_Str"");
  if (args.length != 2) {
    log.severe(usage);
    System.exit(1);
  }
  String type=args[0];
  String inputFile=args[1];
  Writer writer=new PrintWriter(System.out,true);
  if (type.equals(""String_Node_Str"")) {
    printWords(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printLemmas(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printPos(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printNer(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printDeps(inputFile,writer,DependencyForm.BASIC_DEPS);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printDeps(inputFile,writer,DependencyForm.COL_DEPS);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printDeps(inputFile,writer,DependencyForm.COL_CCPROC_DEPS);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printPhraseStructure(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printCoref(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printStanfordDeps(inputFile);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printStanfordPhraseStructure(inputFile);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printHeadlineDateline(inputFile,writer);
  }
 else   if (type.equals(""String_Node_Str"")) {
    printForTestingOnly(inputFile,writer);
  }
 else {
    log.severe(""String_Node_Str"" + type);
    log.severe(usage);
    System.exit(1);
  }
  writer.flush();
}",0.9715264397345322
36710,"public String getParseText(){
  return parseText;
}","public String getParseText(){
  final String nbsp=""String_Node_Str"";
  final Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(parseText);
  int ptr=0;
  StringBuilder sb=null;
  while (m.find()) {
    if (sb == null)     sb=new StringBuilder();
    int s=m.start();
    int e=m.end();
    sb.append(parseText.substring(ptr,s));
    String mid=parseText.substring(s,e);
    int mid_space=mid.indexOf(""String_Node_Str"");
    sb.append(mid.substring(0,mid_space + 1));
    sb.append(mid.substring(mid_space + 1).replaceAll(""String_Node_Str"",nbsp));
    ptr=e;
  }
  if (sb == null)   return parseText;
 else {
    sb.append(parseText.substring(ptr));
    return sb.toString();
  }
}",0.1121495327102803
36711,"@Override public Uri getUri(){
  return UriUtilities.getUri(mContext,ProductTaskStateViewModel.Paths.PRODUCT_TASK_STATE);
}","@Override public Uri getUri(){
  return SampleUriUtilities.getUri(mContext,ProductTaskStateViewModel.Paths.PRODUCT_TASK_STATE);
}",0.9761904761904762
36712,"@Override public Uri getUri(){
  return UriUtilities.getUri(mContext,ProductViewModel.Paths.PRODUCT_VIEW_MODEL);
}","@Override public Uri getUri(){
  return SampleUriUtilities.getUri(mContext,ProductViewModel.Paths.PRODUCT_VIEW_MODEL);
}",0.9743589743589745
36713,"@Override protected void onExecuteTask(final Context context) throws Exception {
  final Uri uri=UriUtilities.getUri(SCHEME,AUTHORITY,Paths.PRODUCTS);
  final String url=uri.toString();
  final ProductResponse productResponse=getProductResponse(url);
  final Uri tableUri=UriUtilities.getUri(context,ProductTable.Paths.PRODUCT_TABLE);
  final ArrayList<ContentProviderOperation> contentProviderOperations=new ArrayList<ContentProviderOperation>();
  final ContentProviderOperation deleteContentProviderOperation=ContentProviderOperation.newDelete(tableUri).build();
  contentProviderOperations.add(deleteContentProviderOperation);
  final ArrayList<Product> products=productResponse.getProducts();
  for (  final Product product : products) {
    final ContentValues contentValues=ProductTable.getContentValues(product);
    final ContentProviderOperation insertContentProviderOperation=ContentProviderOperation.newInsert(tableUri).withValues(contentValues).build();
    contentProviderOperations.add(insertContentProviderOperation);
  }
  final Resources resources=context.getResources();
  final String authority=resources.getString(R.string.authority);
  final ContentResolver contentResolver=context.getContentResolver();
  contentResolver.applyBatch(authority,contentProviderOperations);
  final Uri modelViewUri=UriUtilities.getUri(context,ProductViewModel.Paths.PRODUCT_VIEW_MODEL);
  contentResolver.notifyChange(modelViewUri,null);
}","@Override protected void onExecuteTask(final Context context) throws Exception {
  final Uri uri=SampleUriUtilities.getUri(SCHEME,AUTHORITY,Paths.PRODUCTS);
  final String url=uri.toString();
  final ProductResponse productResponse=getProductResponse(url);
  final Uri tableUri=SampleUriUtilities.getUri(context,ProductTable.Paths.PRODUCT_TABLE);
  final ArrayList<ContentProviderOperation> contentProviderOperations=new ArrayList<ContentProviderOperation>();
  final ContentProviderOperation deleteContentProviderOperation=ContentProviderOperation.newDelete(tableUri).build();
  contentProviderOperations.add(deleteContentProviderOperation);
  final ArrayList<Product> products=productResponse.getProducts();
  for (  final Product product : products) {
    final ContentValues contentValues=ProductTable.getContentValues(product);
    final ContentProviderOperation insertContentProviderOperation=ContentProviderOperation.newInsert(tableUri).withValues(contentValues).build();
    contentProviderOperations.add(insertContentProviderOperation);
  }
  final Resources resources=context.getResources();
  final String authority=resources.getString(R.string.authority);
  final ContentResolver contentResolver=context.getContentResolver();
  contentResolver.applyBatch(authority,contentProviderOperations);
  final Uri modelViewUri=SampleUriUtilities.getUri(context,ProductViewModel.Paths.PRODUCT_VIEW_MODEL);
  contentResolver.notifyChange(modelViewUri,null);
}",0.9937973811164714
36714,"private SignalAspect determineMyAspect(BlockPos otherCoord){
  BlockPos myTrack=trackLocator.getTrackLocation();
  if (myTrack == null)   return SignalAspect.RED;
  BlockPos otherTrack=getOtherTrackLocation(otherCoord);
  if (otherTrack == null)   return SignalAspect.YELLOW;
  TrackScanner.ScanResult scan=getOrCreateTrackScan(otherTrack);
  if (scan == null)   return SignalAspect.RED;
  int y1=scan.minY;
  int y2=scan.maxY + 1;
  int x1=Math.min(myTrack.getX(),otherTrack.getX());
  int z1=Math.min(myTrack.getZ(),otherTrack.getZ());
  int x2=Math.max(myTrack.getX(),otherTrack.getX()) + 1;
  int z2=Math.max(myTrack.getZ(),otherTrack.getZ()) + 1;
  boolean zAxis=Math.abs(myTrack.getX() - otherTrack.getX()) < Math.abs(myTrack.getZ() - otherTrack.getZ());
  int xOffset=otherTrack.getX() > myTrack.getX() ? -3 : 3;
  int zOffset=otherTrack.getZ() > myTrack.getZ() ? -3 : 3;
  List<EntityMinecart> carts=CartToolsAPI.getMinecartsIn(tile.getWorld(),new BlockPos(x1,y1,z1),new BlockPos(x2,y2,z2));
  SignalAspect newAspect=SignalAspect.GREEN;
  for (  EntityMinecart cart : carts) {
    int cartX=MathHelper.floor_double(cart.posX);
    int cartZ=MathHelper.floor_double(cart.posZ);
    if (Math.abs(cart.motionX) < 0.08 && Math.abs(cart.motionZ) < 0.08)     return SignalAspect.RED;
 else     if (zAxis)     if (cartZ > myTrack.getZ() + zOffset && cart.motionZ < 0)     return SignalAspect.RED;
 else     if (cartZ < myTrack.getZ() + zOffset && cart.motionZ > 0)     return SignalAspect.RED;
 else     newAspect=SignalAspect.YELLOW;
 else     if (cartX > myTrack.getX() + xOffset && cart.motionX < 0)     return SignalAspect.RED;
 else     if (cartX < myTrack.getX() + xOffset && cart.motionX > 0)     return SignalAspect.RED;
 else     newAspect=SignalAspect.YELLOW;
  }
  return newAspect;
}","private SignalAspect determineMyAspect(BlockPos otherCoord){
  BlockPos myTrack=trackLocator.getTrackLocation();
  if (myTrack == null)   return SignalAspect.RED;
  BlockPos otherTrack=getOtherTrackLocation(otherCoord);
  if (otherTrack == null)   return SignalAspect.YELLOW;
  TrackScanner.ScanResult scan=getOrCreateTrackScan(otherTrack);
  if (scan == null)   return SignalAspect.RED;
  int y1=scan.minY;
  int y2=scan.maxY + 1;
  int x1=Math.min(myTrack.getX(),otherTrack.getX());
  int z1=Math.min(myTrack.getZ(),otherTrack.getZ());
  int x2=Math.max(myTrack.getX(),otherTrack.getX()) + 1;
  int z2=Math.max(myTrack.getZ(),otherTrack.getZ()) + 1;
  boolean zAxis=Math.abs(myTrack.getX() - otherTrack.getX()) < Math.abs(myTrack.getZ() - otherTrack.getZ());
  int xOffset=otherTrack.getX() > myTrack.getX() ? -3 : 3;
  int zOffset=otherTrack.getZ() > myTrack.getZ() ? -3 : 3;
  List<EntityMinecart> carts=CartToolsAPI.getMinecartsIn(tile.getWorld(),new BlockPos(x1,y1,z1),new BlockPos(x2,y2,z2));
  SignalAspect newAspect=SignalAspect.GREEN;
  for (  EntityMinecart cart : carts) {
    int cartX=MathHelper.floor(cart.posX);
    int cartZ=MathHelper.floor(cart.posZ);
    if (Math.abs(cart.motionX) < 0.08 && Math.abs(cart.motionZ) < 0.08)     return SignalAspect.RED;
 else     if (zAxis)     if (cartZ > myTrack.getZ() + zOffset && cart.motionZ < 0)     return SignalAspect.RED;
 else     if (cartZ < myTrack.getZ() + zOffset && cart.motionZ > 0)     return SignalAspect.RED;
 else     newAspect=SignalAspect.YELLOW;
 else     if (cartX > myTrack.getX() + xOffset && cart.motionX < 0)     return SignalAspect.RED;
 else     if (cartX < myTrack.getX() + xOffset && cart.motionX > 0)     return SignalAspect.RED;
 else     newAspect=SignalAspect.YELLOW;
  }
  return newAspect;
}",0.9960871995528228
36715,"@Override public void onBlockPlacedBy(IBlockState state,@Nullable EntityLivingBase placer,ItemStack stack){
  if (placer != null && this instanceof ITrackKitReversible) {
    int dir=MathHelper.floor_double((double)((placer.rotationYaw * 4F) / 360F) + 0.5D) & 3;
    ((ITrackKitReversible)this).setReversed(dir == 0 || dir == 1);
  }
  switchTrack(state,true);
  testPower(state);
  markBlockNeedsUpdate();
}","@Override public void onBlockPlacedBy(IBlockState state,@Nullable EntityLivingBase placer,ItemStack stack){
  if (placer != null && this instanceof ITrackKitReversible) {
    int dir=MathHelper.floor((double)((placer.rotationYaw * 4F) / 360F) + 0.5D) & 3;
    ((ITrackKitReversible)this).setReversed(dir == 0 || dir == 1);
  }
  switchTrack(state,true);
  testPower(state);
  markBlockNeedsUpdate();
}",0.9913473423980222
36716,"public boolean createSignalBlock(SignalBlock other){
  if (other == this) {
    printDebugPair(""String_Node_Str"",other.tile);
    return false;
  }
  printDebugPair(""String_Node_Str"",other.tile);
  locateTrack();
  other.locateTrack();
  WorldCoordinate myTrack=getTrackLocation();
  WorldCoordinate otherTrack=other.getTrackLocation();
  if (myTrack == null || otherTrack == null) {
    printDebugPair(""String_Node_Str"",other.tile);
    return false;
  }
  TrackScanner.ScanResult scan=TrackScanner.scanStraightTrackSection(tile.getWorldObj(),myTrack.x,myTrack.y,myTrack.z,otherTrack.x,otherTrack.y,otherTrack.z);
  if (!scan.areConnected) {
    printDebugPair(""String_Node_Str"",other.tile);
    return false;
  }
  addPairing(other.getCoords());
  other.addPairing(getCoords());
  endPairing();
  other.endPairing();
  trackScans.put(otherTrack,scan);
  printDebugPair(""String_Node_Str"",other.tile);
  return true;
}","public boolean createSignalBlock(SignalBlock other){
  if (other == this) {
    printDebugPair(""String_Node_Str"",other.tile);
    return false;
  }
  printDebugPair(""String_Node_Str"",other.tile);
  Status myTrackStatus=getTrackStatus();
  Status otherTrackStatus=other.getTrackStatus();
  if (myTrackStatus == Status.INVALID || otherTrackStatus == Status.INVALID) {
    printDebugPair(""String_Node_Str"",other.tile);
    return false;
  }
  WorldCoordinate myTrack=getTrackLocation();
  WorldCoordinate otherTrack=other.getTrackLocation();
  TrackScanner.ScanResult scan=TrackScanner.scanStraightTrackSection(tile.getWorldObj(),myTrack.x,myTrack.y,myTrack.z,otherTrack.x,otherTrack.y,otherTrack.z);
  if (!scan.areConnected) {
    printDebugPair(""String_Node_Str"",other.tile);
    return false;
  }
  addPairing(other.getCoords());
  other.addPairing(getCoords());
  endPairing();
  other.endPairing();
  trackScans.put(otherTrack,scan);
  printDebugPair(""String_Node_Str"",other.tile);
  return true;
}",0.8410630536737884
36717,"private TrackValidationStatus isSignalBlockValid(WorldCoordinate other){
  if (other == null)   return new TrackValidationStatus(true,""String_Node_Str"");
  SignalBlock otherSignalBlock=getSignalAt(other);
  if (otherSignalBlock == null)   return new TrackValidationStatus(true,""String_Node_Str"");
  WorldCoordinate myTrack=getTrackLocation();
  if (myTrack == null)   return new TrackValidationStatus(false,""String_Node_Str"");
  Status otherTrackStatus=otherSignalBlock.getTrackStatus();
  if (otherTrackStatus == Status.INVALID)   return new TrackValidationStatus(false,""String_Node_Str"");
  WorldCoordinate otherTrack=trackCache.get(other);
  if (otherTrackStatus == Status.UNKNOWN) {
    if (otherTrack == null)     return new TrackValidationStatus(true,""String_Node_Str"");
  }
 else {
    otherTrack=otherSignalBlock.getTrackLocation();
    if (otherTrack != null)     trackCache.put(other,otherTrack);
  }
  if (otherTrack == null)   return new TrackValidationStatus(true,""String_Node_Str"");
  TrackScanner.ScanResult scan=TrackScanner.scanStraightTrackSection(tile.getWorldObj(),myTrack.x,myTrack.y,myTrack.z,otherTrack.x,otherTrack.y,otherTrack.z);
  trackScans.put(otherTrack,scan);
  if (scan.verdict == TrackScanner.ScanResult.Verdict.VALID)   return new TrackValidationStatus(true,""String_Node_Str"");
  if (scan.verdict == TrackScanner.ScanResult.Verdict.UNKNOWN)   return new TrackValidationStatus(true,""String_Node_Str"");
  return new TrackValidationStatus(false,""String_Node_Str"" + scan.verdict.name());
}","private TrackValidationStatus isSignalBlockValid(WorldCoordinate other){
  if (other == null)   return new TrackValidationStatus(true,""String_Node_Str"");
  SignalBlock otherSignalBlock=getSignalAt(other);
  if (otherSignalBlock == null)   return new TrackValidationStatus(true,""String_Node_Str"");
  Status trackStatus=getTrackStatus();
  if (trackStatus == Status.INVALID)   return new TrackValidationStatus(false,""String_Node_Str"");
  Status otherTrackStatus=otherSignalBlock.getTrackStatus();
  if (otherTrackStatus == Status.INVALID)   return new TrackValidationStatus(false,""String_Node_Str"");
  WorldCoordinate otherTrack=trackCache.get(other);
  if (otherTrackStatus == Status.UNKNOWN) {
    if (otherTrack == null)     return new TrackValidationStatus(true,""String_Node_Str"");
  }
 else {
    otherTrack=otherSignalBlock.getTrackLocation();
    if (otherTrack != null)     trackCache.put(other,otherTrack);
  }
  if (otherTrack == null)   return new TrackValidationStatus(true,""String_Node_Str"");
  WorldCoordinate myTrack=getTrackLocation();
  TrackScanner.ScanResult scan=TrackScanner.scanStraightTrackSection(tile.getWorldObj(),myTrack.x,myTrack.y,myTrack.z,otherTrack.x,otherTrack.y,otherTrack.z);
  trackScans.put(otherTrack,scan);
  if (scan.verdict == TrackScanner.ScanResult.Verdict.VALID)   return new TrackValidationStatus(true,""String_Node_Str"");
  if (scan.verdict == TrackScanner.ScanResult.Verdict.UNKNOWN)   return new TrackValidationStatus(true,""String_Node_Str"");
  return new TrackValidationStatus(false,""String_Node_Str"" + scan.verdict.name());
}",0.4108702685215141
36718,"private Status getTrackStatus(){
  if (trackLocation == null)   return locateTrack();
  if (!tile.getWorldObj().blockExists(trackLocation.x,trackLocation.y,trackLocation.z))   return Status.UNKNOWN;
  if (!RailTools.isRailBlockAt(tile.getWorldObj(),trackLocation.x,trackLocation.y,trackLocation.z)) {
    trackLocation=null;
    return Status.INVALID;
  }
  return Status.VALID;
}","public Status getTrackStatus(){
  if (trackLocation == null)   return locateTrack();
  if (!tile.getWorldObj().blockExists(trackLocation.x,trackLocation.y,trackLocation.z))   return Status.UNKNOWN;
  if (!RailTools.isRailBlockAt(tile.getWorldObj(),trackLocation.x,trackLocation.y,trackLocation.z)) {
    trackLocation=null;
    return locateTrack();
  }
  return Status.VALID;
}",0.9102902374670184
36719,"public void cleanPairings(){
  boolean changed=pairings.removeAll(invalidPairings);
  invalidPairings.clear();
  if (changed)   SignalTools.packetBuilder.sendPairPacketUpdate(this);
}","public void cleanPairings(){
  if (invalidPairings.isEmpty())   return;
  boolean changed=pairings.removeAll(invalidPairings);
  invalidPairings.clear();
  if (changed)   SignalTools.packetBuilder.sendPairPacketUpdate(this);
}",0.8948655256723717
36720,"protected TileEntity getPairAt(WorldCoordinate coord){
  if (!pairings.contains(coord))   return null;
  if (coord.y < 0) {
    clearPairing(coord);
    return null;
  }
  int x=coord.x;
  int y=coord.y;
  int z=coord.z;
  if (!tile.getWorldObj().blockExists(x,y,z))   return null;
  TileEntity target=tile.getWorldObj().getTileEntity(x,y,z);
  if (isValidPair(coord,target))   return target;
  clearPairing(coord);
  return null;
}","protected TileEntity getPairAt(WorldCoordinate coord){
  if (!pairings.contains(coord))   return null;
  int x=coord.x;
  int y=coord.y;
  int z=coord.z;
  TileEntity cacheTarget=tileCache.get(coord);
  if (cacheTarget != null) {
    if (cacheTarget.isInvalid() || cacheTarget.xCoord != x || cacheTarget.yCoord != y || cacheTarget.zCoord != z) {
      tileCache.remove(coord);
    }
 else     if (isValidPair(coord,cacheTarget))     return cacheTarget;
  }
  if (y < 0) {
    clearPairing(coord);
    return null;
  }
  World world=tile.getWorldObj();
  if (!world.blockExists(x,y,z))   return null;
  Block block=world.getBlock(x,y,z);
  int meta=world.getBlockMetadata(x,y,z);
  if (!block.hasTileEntity(meta)) {
    pairingsToTest.add(coord);
    return null;
  }
  TileEntity target=world.getTileEntity(x,y,z);
  if (target != null && !isValidPair(coord,target)) {
    pairingsToTest.add(coord);
    return null;
  }
  if (target != null) {
    tileCache.put(coord,target);
  }
  return target;
}",0.3729050279329609
36721,"protected void validatePairings(){
  for (  WorldCoordinate coord : pairings) {
    getPairAt(coord);
  }
  cleanPairings();
}","protected void validatePairings(){
  if (!pairingsToTestNext.isEmpty()) {
    pairingsToTestNext.retainAll(pairings);
    for (    WorldCoordinate coord : pairingsToTestNext) {
      int x=coord.x;
      int y=coord.y;
      int z=coord.z;
      World world=tile.getWorldObj();
      if (!world.blockExists(x,y,z))       continue;
      Block block=world.getBlock(x,y,z);
      int meta=world.getBlockMetadata(x,y,z);
      if (!block.hasTileEntity(meta)) {
        clearPairing(coord);
        continue;
      }
      TileEntity target=world.getTileEntity(x,y,z);
      if (target != null && !isValidPair(coord,target))       clearPairing(coord);
    }
    pairingsToTestNext.clear();
  }
  cleanPairings();
  for (  WorldCoordinate coord : pairings) {
    getPairAt(coord);
  }
  pairingsToTestNext.addAll(pairingsToTest);
  pairingsToTest.clear();
}",0.2167689161554192
36722,"private void updateReceiver(){
  for (  WorldCoordinate recv : getPairs()) {
    SignalReceiver receiver=getReceiverAt(recv);
    if (receiver != null) {
      receiver.onControllerAspectChange(this,aspect);
    }
  }
  cleanPairings();
}","private void updateReceiver(){
  for (  WorldCoordinate recv : getPairs()) {
    SignalReceiver receiver=getReceiverAt(recv);
    if (receiver != null) {
      receiver.onControllerAspectChange(this,aspect);
    }
  }
}",0.9584245076586432
36723,"/** 
 * If you want to be able to draw power from the track, this function needs to be called once per tick. Server side only. Generally this means overriding the EnityMinecart.func_145821_a() function. You don't have to call this function if you don't care about drawing from tracks. <p> <blockquote><pre>  {@code protected void func_145821_a(int trackX, int trackY, int trackZ, double maxSpeed, double slopeAdjustement, Block trackBlock, int trackMeta)}{ super.func_145821_a(trackX, trackY, trackZ, maxSpeed, slopeAdjustement, trackBlock, trackMeta); chargeHandler.tickOnTrack(trackX, trackY, trackZ); } } </pre></blockquote>
 */
public void tickOnTrack(int trackX,int trackY,int trackZ){
  if (type == Type.USER && charge < capacity && clock % DRAW_INTERVAL == 0) {
    IElectricGrid track=RailTools.getTrackObjectAt(minecart.worldObj,trackX,trackY,trackZ,IElectricGrid.class);
    if (track != null) {
      charge+=track.getChargeHandler().removeCharge(capacity - charge);
      drewFromTrack=DRAW_INTERVAL * 4;
    }
  }
}","/** 
 * If you want to be able to draw power from the track, this function needs to be called once per tick. Server side only. Generally this means overriding the EnityMinecart.func_145821_a() function. You don't have to call this function if you don't care about drawing from tracks. <p> <blockquote><pre>  {@code protected void func_145821_a(int trackX, int trackY, int trackZ, double maxSpeed, double slopeAdjustement, Block trackBlock, int trackMeta)}{ super.func_145821_a(trackX, trackY, trackZ, maxSpeed, slopeAdjustement, trackBlock, trackMeta); chargeHandler.tickOnTrack(trackX, trackY, trackZ); } } </pre></blockquote>
 */
public void tickOnTrack(int trackX,int trackY,int trackZ){
  if (type == Type.USER && charge < capacity && clock % DRAW_INTERVAL == 0) {
    IElectricGrid track=RailTools.getTrackObjectAt(minecart.worldObj,trackX,trackY,trackZ,IElectricGrid.class);
    if (track != null) {
      double draw=track.getChargeHandler().removeCharge(capacity - charge);
      if (draw > 0.0)       drewFromTrack=DRAW_INTERVAL * 4;
      charge+=draw;
    }
  }
}",0.9714557564224549
36724,"public void setJudgmentsEnrichmentTagsPageSize(int judgmentsEnrichmentTagsPageSize){
  this.judgmentsEnrichmentTagsPageSize=judgmentsEnrichmentTagsPageSize;
}","@Value(""String_Node_Str"") public void setJudgmentsEnrichmentTagsPageSize(int judgmentsEnrichmentTagsPageSize){
  this.judgmentsEnrichmentTagsPageSize=judgmentsEnrichmentTagsPageSize;
}",0.9239766081871345
36725,"public String getFilename(){
  return filename;
}","/** 
 * Returns name of file
 */
String getFilename();",0.4660194174757281
36726,"public InputStream getInputStream(){
  return inputStream;
}","/** 
 * Returns input stream that contains file content
 */
InputStream getInputStream() throws IOException ;",0.4733727810650887
36727,"/** 
 * Extracts judgment content file from archive file. Looks in the given archiveFile for a file with a name (without extension) equal to judgmentSourceId. At the moment only zip archive files are supported.
 * @param archiveFile - archive file from which judgment content file can be extracted
 * @param judgmentSourceId - source id of judgment.
 * @return 
 * @throws IOException - when I/O error has occurred
 * @throws ImportException - when archive is of not supported type or it doesn't containproper judgment content file
 */
public InputStreamWithFilename extractJudgmentContent(File archiveFile,String judgmentSourceId) throws IOException {
  if (FilenameUtils.getExtension(archiveFile.getName()).equals(""String_Node_Str"")) {
    ZipInputStream inputStream=null;
    try {
      inputStream=new ZipInputStream(new FileInputStream(archiveFile));
      ZipEntry entry=inputStream.getNextEntry();
      while (true) {
        if (entry == null) {
          break;
        }
        if (FilenameUtils.getBaseName(entry.getName()).equals(judgmentSourceId)) {
          return new InputStreamWithFilename(inputStream,entry.getName());
        }
        entry=inputStream.getNextEntry();
      }
      throw new ImportException(""String_Node_Str"" + judgmentSourceId + ""String_Node_Str""+ archiveFile.getName());
    }
 catch (    IOException|ImportException e) {
      if (inputStream != null) {
        inputStream.close();
      }
      throw e;
    }
  }
  throw new ImportException(""String_Node_Str"" + archiveFile.getName() + ""String_Node_Str"");
}","/** 
 * Extracts judgment content file from archive file. Looks in the given archiveFile for a file with a name (without extension) equal to judgmentSourceId. At the moment only zip archive files are supported.
 * @param archiveFile - archive file from which judgment content file can be extracted
 * @param judgmentSourceId - source id of judgment.
 * @return 
 * @throws IOException - when I/O error has occurred
 * @throws ImportException - when archive is of not supported type or it doesn't containproper judgment content file
 */
public InputStreamWithFilename extractJudgmentContent(File archiveFile,String judgmentSourceId) throws IOException {
  if (FilenameUtils.getExtension(archiveFile.getName()).equals(""String_Node_Str"")) {
    ZipFile file=null;
    file=new ZipFile(archiveFile);
    final Enumeration<? extends ZipEntry> entries=file.entries();
    while (entries.hasMoreElements()) {
      final ZipEntry entry=entries.nextElement();
      if (FilenameUtils.getBaseName(entry.getName()).equals(judgmentSourceId)) {
        return new ZipEntryBasedInputStreamWithFilename(file,entry);
      }
    }
    file.close();
    throw new ImportException(""String_Node_Str"" + judgmentSourceId + ""String_Node_Str""+ archiveFile.getName());
  }
  throw new ImportException(""String_Node_Str"" + archiveFile.getName() + ""String_Node_Str"");
}",0.6869175008629617
36728,"@Bean public HighlightingParams judgmentsHighlightParams(){
  HighlightingParams params=new HighlightingParams();
  params.addParam(HighlightParams.SIMPLE_PRE,""String_Node_Str"");
  params.addParam(HighlightParams.SIMPLE_POST,""String_Node_Str"");
  params.addParam(HighlightParams.MERGE_CONTIGUOUS_FRAGMENTS,""String_Node_Str"");
  HighlightingFieldParams contentFieldParams=new HighlightingFieldParams(JudgmentIndexField.CONTENT.getFieldName());
  contentFieldParams.addParam(HighlightParams.FRAGSIZE,""String_Node_Str"");
  contentFieldParams.addParam(HighlightParams.SNIPPETS,""String_Node_Str"");
  contentFieldParams.addParam(HighlightParams.ALTERNATE_FIELD,""String_Node_Str"");
  contentFieldParams.addParam(HighlightParams.ALTERNATE_FIELD_LENGTH,""String_Node_Str"");
  params.addFieldParams(contentFieldParams);
  return params;
}","@Bean public HighlightingParams judgmentsHighlightParams(){
  HighlightingParams params=new HighlightingParams();
  params.addParam(HighlightParams.SIMPLE_PRE,""String_Node_Str"");
  params.addParam(HighlightParams.SIMPLE_POST,""String_Node_Str"");
  params.addParam(HighlightParams.MERGE_CONTIGUOUS_FRAGMENTS,""String_Node_Str"");
  params.addParam(HighlightParams.FIELD_MATCH,""String_Node_Str"");
  HighlightingFieldParams contentFieldParams=new HighlightingFieldParams(JudgmentIndexField.CONTENT.getFieldName());
  contentFieldParams.addParam(HighlightParams.FRAGSIZE,""String_Node_Str"");
  contentFieldParams.addParam(HighlightParams.SNIPPETS,""String_Node_Str"");
  contentFieldParams.addParam(HighlightParams.ALTERNATE_FIELD,""String_Node_Str"");
  contentFieldParams.addParam(HighlightParams.ALTERNATE_FIELD_LENGTH,""String_Node_Str"");
  params.addFieldParams(contentFieldParams);
  return params;
}",0.9616279069767442
36729,"private SolrInputDocument fetchScJudgmentDoc(){
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(""String_Node_Str"",UUID.randomUUID());
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  return doc;
}","private SolrInputDocument fetchScJudgmentDoc(){
  SolrInputDocument doc=new SolrInputDocument();
  doc.addField(""String_Node_Str"",UUID.randomUUID());
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  doc.addField(""String_Node_Str"",""String_Node_Str"");
  return doc;
}",0.9699034639409426
36730,"private void translateSupremeCourt(SolrDocument document,JudgmentSearchResult result){
  String personnelType=fieldFetcher.fetchValue(document,JudgmentIndexField.SC_PERSONNEL_TYPE);
  result.setPersonnelType(personnelType);
  List<Pair<String,List<String>>> chambers=fieldFetcher.fetchValuesWithAttributes(document,JudgmentIndexField.SC_CHAMBER);
  List<SupremeCourtChamberResult> chambersResult=Lists.newLinkedList();
  chambers.forEach(x -> chambersResult.add(new SupremeCourtChamberResult(Integer.valueOf(x.getLeft()),x.getRight().get(0))));
  result.setCourtChambers(chambersResult);
  Integer divisionId=fieldFetcher.fetchIntValue(document,JudgmentIndexField.SC_DIVISION_ID);
  String divisionName=fieldFetcher.fetchValue(document,JudgmentIndexField.SC_DIVISION_NAME);
  result.setCourtChamberDivisionId(divisionId);
  result.setCourtChamberDivisionName(divisionName);
}","private void translateSupremeCourt(SolrDocument document,JudgmentSearchResult result){
  String personnelType=fieldFetcher.fetchValue(document,JudgmentIndexField.SC_PERSONNEL_TYPE);
  result.setPersonnelType(personnelType);
  List<Pair<String,List<String>>> chambers=fieldFetcher.fetchValuesWithAttributes(document,JudgmentIndexField.SC_CHAMBER);
  List<SupremeCourtChamberResult> chambersResult=Lists.newLinkedList();
  chambers.stream().filter(x -> x.getRight().size() > 0).forEach(x -> chambersResult.add(new SupremeCourtChamberResult(Integer.parseInt(x.getLeft()),x.getRight().get(0))));
  result.setCourtChambers(chambersResult);
  Integer divisionId=fieldFetcher.fetchIntValue(document,JudgmentIndexField.SC_DIVISION_ID);
  String divisionName=fieldFetcher.fetchValue(document,JudgmentIndexField.SC_DIVISION_NAME);
  result.setCourtChamberDivisionId(divisionId);
  result.setCourtChamberDivisionName(divisionName);
}",0.9493600445186422
36731,"@PostConstruct public void init(){
  judgmentIndexFieldsFillers=new HashMap<>();
  judgmentIndexFieldsFillers.put(CommonCourtJudgment.class,ccJudgmentIndexFieldsFillerProcessor);
}","@PostConstruct public void init(){
  judgmentIndexFieldsFillers=new HashMap<>();
  judgmentIndexFieldsFillers.put(CommonCourtJudgment.class,ccJudgmentIndexFieldsFiller);
}",0.9743589743589745
36732,"@SuppressWarnings(""String_Node_Str"") private void fillJudgmentFields(SolrInputDocument doc,Judgment item){
  if (judgmentIndexFieldsFillers.containsKey(item.getClass())) {
    JudgmentIndexFieldsFiller<Judgment> judgmentSpecificProcessor=(JudgmentIndexFieldsFiller<Judgment>)judgmentIndexFieldsFillers.get(item.getClass());
    judgmentSpecificProcessor.fillFields(doc,item);
  }
}","@SuppressWarnings(""String_Node_Str"") private void fillJudgmentFields(SolrInputDocument doc,Judgment item){
  if (judgmentIndexFieldsFillers.containsKey(item.getClass())) {
    JudgmentIndexFieldsFiller<Judgment> judgmentSpecificProcessor=(JudgmentIndexFieldsFiller<Judgment>)judgmentIndexFieldsFillers.get(item.getClass());
    judgmentSpecificProcessor.fillFields(doc,item);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + item.getClass());
  }
}",0.9039145907473308
36733,"@Override public Judgment read() throws Exception, UnexpectedInputException, ParseException, NonTransientResourceException {
  if (judgments.isEmpty()) {
    judgments=Lists.newLinkedList(judgmentRepository.findAllToIndex(new PageRequest(pageNo,pageSize)).getContent());
    if (judgments.isEmpty()) {
      return null;
    }
    log.debug(""String_Node_Str"",judgments.size());
    pageNo++;
  }
  Judgment commonCourtJudgment=judgments.poll();
  return commonCourtJudgment;
}","@Override public Judgment read() throws Exception, UnexpectedInputException, ParseException, NonTransientResourceException {
  if (judgments.isEmpty() && !allRead) {
    judgments=Lists.newLinkedList(judgmentRepository.findAllToIndex(new PageRequest(0,pageSize)).getContent());
    if (judgments.size() < pageSize) {
      allRead=true;
    }
    if (judgments.isEmpty()) {
      return null;
    }
    log.debug(""String_Node_Str"",judgments.size());
  }
  Judgment commonCourtJudgment=judgments.poll();
  return commonCourtJudgment;
}",0.7504950495049505
36734,"@Override public void open(ExecutionContext executionContext) throws ItemStreamException {
  judgments=Lists.newLinkedList();
}","@Override public void open(ExecutionContext executionContext) throws ItemStreamException {
  judgments=Lists.newLinkedList();
  allRead=false;
}",0.9372693726937268
36735,"@Before public void setUp(){
  judgmentIndexingProcessor.setCcJudgmentRepository(judgmentRepository);
  judgmentIndexingProcessor.setCcJudgmentIndexingProcessor(ccJudgmentIndexFieldsFiller);
  judgmentIndexingProcessor.init();
}","@Before public void setUp(){
  judgmentIndexingProcessor.setCcJudgmentRepository(judgmentRepository);
  judgmentIndexingProcessor.setCcJudgmentIndexFieldsFiller(ccJudgmentIndexFieldsFiller);
  judgmentIndexingProcessor.init();
}",0.7192982456140351
36736,"@Test public void read_FOUND() throws UnexpectedInputException, ParseException, NonTransientResourceException, Exception {
  Judgment firstJudgment=createCcJudgment(1);
  Judgment secondJudgment=createCcJudgment(2);
  Judgment thirdJudgment=createCcJudgment(3);
  Page<Judgment> firstPage=new PageImpl<Judgment>(Lists.newArrayList(firstJudgment,secondJudgment),new PageRequest(0,2),3);
  Page<Judgment> secondPage=new PageImpl<Judgment>(Lists.newArrayList(thirdJudgment),new PageRequest(1,1),3);
  Page<Judgment> thirdPage=new PageImpl<Judgment>(Lists.newArrayList());
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) OngoingStubbing<Page<Judgment>> thenReturn=when(judgmentRepository.findAllToIndex(any(Pageable.class))).thenReturn(firstPage,secondPage,thirdPage);
  Judgment actualFirst=judgmentIndexingReader.read();
  Judgment actualSecond=judgmentIndexingReader.read();
  Judgment actualThird=judgmentIndexingReader.read();
  Judgment actualFourth=judgmentIndexingReader.read();
  ArgumentCaptor<Pageable> pageArgCapture=ArgumentCaptor.forClass(Pageable.class);
  verify(judgmentRepository,atLeast(2)).findAllToIndex(pageArgCapture.capture());
  Pageable firstPageRequestArg=pageArgCapture.getAllValues().get(0);
  assertEquals(0,firstPageRequestArg.getPageNumber());
  Pageable secondPageRequestArg=pageArgCapture.getAllValues().get(1);
  assertEquals(1,secondPageRequestArg.getPageNumber());
  assertEquals(firstJudgment.getId(),actualFirst.getId());
  assertEquals(secondJudgment.getId(),actualSecond.getId());
  assertEquals(thirdJudgment.getId(),actualThird.getId());
  assertNull(actualFourth);
}","@Test public void read_FOUND() throws UnexpectedInputException, ParseException, NonTransientResourceException, Exception {
  Judgment firstJudgment=createCcJudgment(1);
  Judgment secondJudgment=createCcJudgment(2);
  Judgment thirdJudgment=createCcJudgment(3);
  Page<Judgment> firstPage=new PageImpl<Judgment>(Lists.newArrayList(firstJudgment,secondJudgment),new PageRequest(0,2),3);
  Page<Judgment> secondPage=new PageImpl<Judgment>(Lists.newArrayList(thirdJudgment),new PageRequest(0,1),1);
  Page<Judgment> thirdPage=new PageImpl<Judgment>(Lists.newArrayList());
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) OngoingStubbing<Page<Judgment>> thenReturn=when(judgmentRepository.findAllToIndex(any(Pageable.class))).thenReturn(firstPage,secondPage,thirdPage);
  Judgment actualFirst=judgmentIndexingReader.read();
  Judgment actualSecond=judgmentIndexingReader.read();
  Judgment actualThird=judgmentIndexingReader.read();
  Judgment actualFourth=judgmentIndexingReader.read();
  ArgumentCaptor<Pageable> pageArgCapture=ArgumentCaptor.forClass(Pageable.class);
  verify(judgmentRepository,atLeast(2)).findAllToIndex(pageArgCapture.capture());
  Pageable firstPageRequestArg=pageArgCapture.getAllValues().get(0);
  assertEquals(0,firstPageRequestArg.getPageNumber());
  assertEquals(2,firstPageRequestArg.getPageSize());
  Pageable secondPageRequestArg=pageArgCapture.getAllValues().get(1);
  assertEquals(0,secondPageRequestArg.getPageNumber());
  assertEquals(2,secondPageRequestArg.getPageSize());
  assertEquals(firstJudgment.getId(),actualFirst.getId());
  assertEquals(secondJudgment.getId(),actualSecond.getId());
  assertEquals(thirdJudgment.getId(),actualThird.getId());
  assertNull(actualFourth);
}",0.8548338820712361
36737,"@Before public void setUp(){
  judgmentIndexingReader.setJudgmentRepository(judgmentRepository);
}","@Before public void setUp(){
  judgmentIndexingReader.setJudgmentRepository(judgmentRepository);
  judgmentIndexingReader.setPageSize(2);
}",0.8270042194092827
36738,"/** 
 * Build and return the OpsLogger corresponding to the configuration provided.
 * @param < T > LogMessage enum of all possible logger objects.
 * @return ready to use OpsLogger
 * @throws IOException FIXME: not currently thrown, may be for future OpsLogger back ends.
 */
public <T extends Enum<T> & LogMessage>OpsLogger<T> build() throws IOException {
  Supplier<Map<String,String>> correlationIdSupplier=this.correlationIdSupplier.orElse(EMPTY_CORRELATION_ID_SUPPLIER);
  Consumer<Throwable> errorHandler=this.errorHandler.orElse(DEFAULT_ERROR_HANDLER);
  if (async) {
    AsyncOpsLogger.Destination<T> destination=configureAsyncDestination();
    return new AsyncOpsLogger<>(Clock.systemUTC(),correlationIdSupplier,destination,errorHandler,new LinkedTransferQueue<>(),new AsyncExecutor(Executors.defaultThreadFactory()));
  }
  BasicOpsLogger.Destination<T> destination=configureBasicDestination();
  return new BasicOpsLogger<>(Clock.systemUTC(),correlationIdSupplier,destination,new ReentrantLock(),errorHandler);
}","/** 
 * Build and return the OpsLogger corresponding to the configuration provided.
 * @param < T > LogMessage enum of all possible logger objects.
 * @return ready to use OpsLogger
 * @throws IOException if a problem occurs creating parent directories for log files and/or stack traces
 */
public <T extends Enum<T> & LogMessage>OpsLogger<T> build() throws IOException {
  Supplier<Map<String,String>> correlationIdSupplier=this.correlationIdSupplier.orElse(EMPTY_CORRELATION_ID_SUPPLIER);
  Consumer<Throwable> errorHandler=this.errorHandler.orElse(DEFAULT_ERROR_HANDLER);
  if (async) {
    AsyncOpsLogger.Destination<T> destination=configureAsyncDestination();
    return new AsyncOpsLogger<>(Clock.systemUTC(),correlationIdSupplier,destination,errorHandler,new LinkedTransferQueue<>(),new AsyncExecutor(Executors.defaultThreadFactory()));
  }
  BasicOpsLogger.Destination<T> destination=configureBasicDestination();
  return new BasicOpsLogger<>(Clock.systemUTC(),correlationIdSupplier,destination,new ReentrantLock(),errorHandler);
}",0.938953488372093
36739,"public OpsLoggerFactory setErrorHandler(Consumer<Throwable> handler){
  errorHandler=Optional.of(handler);
  return this;
}","public OpsLoggerFactory setErrorHandler(Consumer<Throwable> handler){
  errorHandler=Optional.ofNullable(handler);
  return this;
}",0.968503937007874
36740,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  BaseApplication.inject(this);
  bus.register(this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  bus.register(this);
}",0.8848920863309353
36741,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  BaseApplication.inject(this);
  bus.register(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  bus.register(this);
}",0.8823529411764706
36742,"@Override public void onReceive(Context context,Intent intent){
  detector.startMonitoring();
}","@Override public void onReceive(Context context,Intent intent){
  Region region=persistentState.getSelectedRegion();
  if (region != null) {
    detector.startMonitoring(region);
  }
}",0.6810035842293907
36743,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  dao.open();
  final ActionBar actionBar=getActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  mSectionsPagerAdapter=new SectionsPagerAdapter(getFragmentManager());
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      actionBar.setSelectedNavigationItem(position);
    }
  }
);
  for (int i=0; i < mSectionsPagerAdapter.getCount(); i++) {
    actionBar.addTab(actionBar.newTab().setText(mSectionsPagerAdapter.getPageTitle(i)).setTabListener(this));
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  dao.open();
  final ActionBar actionBar=getActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  mSectionsPagerAdapter=new SectionsPagerAdapter(getFragmentManager());
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(5);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      actionBar.setSelectedNavigationItem(position);
    }
  }
);
  for (int i=0; i < mSectionsPagerAdapter.getCount(); i++) {
    actionBar.addTab(actionBar.newTab().setText(mSectionsPagerAdapter.getPageTitle(i)).setTabListener(this));
  }
}",0.9766606822262118
36744,"@Override public Fragment getItem(int position){
switch (position) {
case 0:
    return ScanFragment.newInstance();
case 1:
  return BeaconDataFragment.newInstance();
case 2:
return RegionLogFragment.newInstance();
case 3:
return NotificationFragment.newInstance();
case 4:
return IndoorLocationFragment.newInstance();
default :
throw new RuntimeException(""String_Node_Str"" + position);
}
}","@Override public Fragment getItem(int position){
switch (position) {
case 0:
    return ScanFragment.newInstance();
case 1:
  return BeaconDataFragment.newInstance();
case 2:
return RegionLogFragment.newInstance();
case 3:
return NotificationFragment.newInstance();
case 4:
return LocationFragment.newInstance();
default :
throw new RuntimeException(""String_Node_Str"" + position);
}
}",0.992248062015504
36745,"@Subscribe public void fullScanRequested(RequestFullScanEvent event){
  if (scanner.isFullScanning())   return;
  scanner.connect(new BeaconController.ServiceReadyCallback(){
    @Override public void serviceReady(){
      scanner.stopMonitoring();
      scanner.stopRanging();
      scanner.startFullScan();
    }
  }
);
}","@Subscribe public void fullScanRequested(RequestFullScanEvent event){
  scanner.connect(new BeaconController.ServiceReadyCallback(){
    @Override public void serviceReady(){
      scanner.startFullScan();
    }
  }
);
}",0.7476979742173112
36746,"@Override protected void onStart(){
  super.onStart();
  scanner.connect(new BeaconController.ServiceReadyCallback(){
    @Override public void serviceReady(){
      scanner.setBackgroundMode(false);
    }
  }
);
}","@Override protected void onStart(){
  super.onStart();
  bus.post(new RequestFullScanEvent());
}",0.5290322580645161
36747,"@Override public void serviceReady(){
  scanner.stopFullScan();
  scanner.startRanging();
  scanner.startMonitoring();
}","@Override public void serviceReady(){
  scanner.stopFullScan();
}",0.7027027027027027
36748,"@Subscribe public void beaconScanRequested(RequestBeaconScanEvent event){
  if (scanner.isRangingSingleBeacon())   return;
  scanner.connect(new BeaconController.ServiceReadyCallback(){
    @Override public void serviceReady(){
      scanner.stopFullScan();
      scanner.startRanging();
      scanner.startMonitoring();
    }
  }
);
}","@Subscribe public void beaconScanRequested(final RequestBeaconScanEvent event){
  if (event.getRegion() == null)   return;
  scanner.connect(new BeaconController.ServiceReadyCallback(){
    @Override public void serviceReady(){
      scanner.startRanging(event.getRegion());
      scanner.startMonitoring(event.getRegion());
    }
  }
);
}",0.7299703264094956
36749,"@Override public void onStop(){
  super.onStop();
  scanner.connect(new BeaconController.ServiceReadyCallback(){
    @Override public void serviceReady(){
      scanner.stopRanging();
      scanner.stopFullScan();
      scanner.setBackgroundMode(true);
    }
  }
);
}","@Override public void onStop(){
  super.onStop();
  scanner.connect(new BeaconController.ServiceReadyCallback(){
    @Override public void serviceReady(){
      scanner.setBackgroundMode(true);
    }
  }
);
}",0.8757894736842106
36750,"public Cursor getHistory(Region region){
  assertAcccess();
  if (region == null)   return null;
  Cursor c=db.query(false,Database.TABLE_REGIONS,Database.ALL_COLUMNS,Database.COLUMN_UUID + ""String_Node_Str"" + Database.COLUMN_MAJOR+ ""String_Node_Str""+ Database.COLUMN_MINOR+ ""String_Node_Str"",new String[]{region.getId1().toString(),Integer.toString(region.getId2().toInt()),Integer.toString(region.getId3().toInt())},null,null,null,null);
  c.setNotificationUri(context.getContentResolver(),Uri.parse(TABLE_URI));
  return c;
}","public Cursor getHistory(Region region){
  assertAcccess();
  if (region == null)   return null;
  Cursor c=db.query(false,Database.TABLE_REGIONS,Database.ALL_COLUMNS,Database.COLUMN_UUID + ""String_Node_Str"" + Database.COLUMN_MAJOR+ ""String_Node_Str""+ Database.COLUMN_MINOR+ ""String_Node_Str"",new String[]{region.getId1().toString(),region.getId2().toString(),region.getId3().toString()},null,null,null,null);
  c.setNotificationUri(context.getContentResolver(),Uri.parse(TABLE_URI));
  return c;
}",0.9395711500974658
36751,"public void startFullScan(){
  assertServiceReady();
  if (rangingStarted)   throw new RuntimeException(""String_Node_Str"");
  if (fullScanStarted)   return;
  beaconManager.setRangeNotifier(new RangeNotifier(){
    @Override public void didRangeBeaconsInRegion(    Collection<Beacon> iBeacons,    Region region){
      postOnMainThread(new FullScanCompleteEvent(iBeacons));
    }
  }
);
  try {
    beaconManager.startRangingBeaconsInRegion(FULL_SCAN_REGION);
    fullScanStarted=true;
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","public void startFullScan(){
  assertServiceReady();
  if (beaconManager.getRangedRegions().contains(FULL_SCAN_REGION))   return;
  for (  Region r : beaconManager.getRangedRegions()) {
    stopRanging(r);
  }
  beaconManager.setRangeNotifier(new RangeNotifier(){
    @Override public void didRangeBeaconsInRegion(    Collection<Beacon> iBeacons,    Region region){
      postOnMainThread(new FullScanCompleteEvent(iBeacons));
    }
  }
);
  try {
    beaconManager.startRangingBeaconsInRegion(FULL_SCAN_REGION);
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.342904019688269
36752,"public void stopMonitoring(){
  if (!monitorStarted)   return;
  try {
    beaconManager.stopMonitoringBeaconsInRegion(persistentState.getSelectedRegion());
    monitorStarted=false;
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","public void stopMonitoring(Region region){
  try {
    beaconManager.stopMonitoringBeaconsInRegion(region);
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.7749510763209393
36753,"public void startMonitoring(){
  assertServiceReady();
  if (monitorStarted)   return;
  beaconManager.setMonitorNotifier(new MonitorNotifier(){
    @Override public void didEnterRegion(    final Region region){
      Log.d(TAG,""String_Node_Str"" + region);
      Toast.makeText(context,""String_Node_Str"" + region.getUniqueId(),Toast.LENGTH_SHORT).show();
      dao.execute(new Runnable(){
        @Override public void run(){
          currentRegion=dao.enterRegion(region);
        }
      }
);
    }
    @Override public void didExitRegion(    Region region){
      Log.d(TAG,""String_Node_Str"" + region);
      Toast.makeText(context,""String_Node_Str"" + region.getUniqueId(),Toast.LENGTH_SHORT).show();
      dao.execute(new Runnable(){
        @Override public void run(){
          dao.exitRegion(currentRegion);
        }
      }
);
    }
    @Override public void didDetermineStateForRegion(    int i,    Region region){
    }
  }
);
  try {
    Region selectedRegion=persistentState.getSelectedRegion();
    if (selectedRegion == null)     return;
    beaconManager.startMonitoringBeaconsInRegion(selectedRegion);
    monitorStarted=true;
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","public void startMonitoring(Region region){
  assertServiceReady();
  if (region.getId1() == null || region.getId2() == null || region.getId3() == null) {
    return;
  }
  if (beaconManager.getMonitoredRegions().contains(region))   return;
  for (  Region r : beaconManager.getMonitoredRegions()) {
    stopMonitoring(r);
  }
  beaconManager.setMonitorNotifier(new MonitorNotifier(){
    @Override public void didEnterRegion(    final Region region){
      Log.d(TAG,""String_Node_Str"" + region);
      Toast.makeText(context,""String_Node_Str"" + region.getUniqueId(),Toast.LENGTH_SHORT).show();
      dao.execute(new Runnable(){
        @Override public void run(){
          currentRegion=dao.enterRegion(region);
        }
      }
);
    }
    @Override public void didExitRegion(    Region region){
      Log.d(TAG,""String_Node_Str"" + region);
      Toast.makeText(context,""String_Node_Str"" + region.getUniqueId(),Toast.LENGTH_SHORT).show();
      dao.execute(new Runnable(){
        @Override public void run(){
          dao.exitRegion(currentRegion);
        }
      }
);
    }
    @Override public void didDetermineStateForRegion(    int i,    Region region){
    }
  }
);
  try {
    beaconManager.startMonitoringBeaconsInRegion(region);
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.8300153139356815
36754,"public void stopFullScan(){
  if (!fullScanStarted)   return;
  try {
    beaconManager.stopRangingBeaconsInRegion(FULL_SCAN_REGION);
    fullScanStarted=false;
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","public void stopFullScan(){
  stopRanging(FULL_SCAN_REGION);
}",0.3723723723723723
36755,"public void stopRanging(){
  if (!rangingStarted)   return;
  try {
    beaconManager.stopRangingBeaconsInRegion(persistentState.getSelectedRegion());
    rangingStarted=false;
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","public void stopRanging(Region region){
  try {
    beaconManager.stopRangingBeaconsInRegion(region);
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.7695390781563126
36756,"public void startRanging(){
  assertServiceReady();
  if (fullScanStarted)   throw new RuntimeException(""String_Node_Str"");
  if (rangingStarted)   return;
  beaconManager.setRangeNotifier(new RangeNotifier(){
    @Override public void didRangeBeaconsInRegion(    Collection<Beacon> iBeacons,    Region region){
      if (iBeacons.size() == 1) {
        Beacon beacon=iBeacons.iterator().next();
        Log.d(TAG,""String_Node_Str"" + beacon);
        postOnMainThread(new BeaconScanCompleteEvent(Calendar.getInstance(),beacon));
      }
    }
  }
);
  try {
    Region selectedRegion=persistentState.getSelectedRegion();
    if (selectedRegion == null)     return;
    beaconManager.startRangingBeaconsInRegion(persistentState.getSelectedRegion());
    rangingStarted=true;
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","public void startRanging(Region region){
  assertServiceReady();
  if (beaconManager.getRangedRegions().contains(region))   return;
  for (  Region r : beaconManager.getRangedRegions()) {
    stopRanging(r);
  }
  beaconManager.setRangeNotifier(new RangeNotifier(){
    @Override public void didRangeBeaconsInRegion(    Collection<Beacon> beacons,    Region region){
      if (beacons.size() > 0) {
        postOnMainThread(new RangeScanCompleteEvent(Calendar.getInstance(),beacons));
      }
    }
  }
);
  try {
    if (region != null) {
      beaconManager.startRangingBeaconsInRegion(region);
      Log.i(TAG,""String_Node_Str"");
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.182614133833646
36757,"public void updateImage(){
  System.out.println(""String_Node_Str"");
  Bitmap bitmap;
  bitmap=Bitmap.createBitmap(1024,768,Bitmap.Config.RGB_565);
  try {
    Frame.frameBuffer.position(0);
    bitmap.copyPixelsFromBuffer(Frame.frameBuffer);
    remoteScreen.setImageBitmap(bitmap);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
}","public void updateImage(){
  System.out.println(""String_Node_Str"");
  try {
    Frame.frameBuffer.position(0);
    bitmap.copyPixelsFromBuffer(Frame.frameBuffer);
    remoteScreen.setImageBitmap(bitmap);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
}",0.8856729377713459
36758,"/** 
 * @param rleData RLE encoded in byte[].
 * @param offset Data offset in rleData from where RLE data starts
 * @param length Length of RLE data in rleData
 * @return decode plain data in byte[]<br/> <p> Decodes RLE encoded data into plain form. Depending on the the length and contents of the input data, this might take some time to evaluate. </p> <br/> <p> It is assumed that the encoding scheme followed takes 2 bytes as basic block and uses special char 'rr' when there is a repetition of data. More details about the encoding scheme can be found at, https://github.com/praveendath92/udlfb </p>
 */
public byte[] decode(byte[] rleData,int offset,int length){
  int pos=offset;
  int count=0;
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  int bytesRead=0;
  while (pos < length) {
    if (rleData[pos] == 'r' && rleData[pos + 1] == 'r') {
      pos=pos + 2;
      count=rleData[pos] & 0x000000ff;
      pos++;
      while (count != 0) {
        count--;
        bytesRead=bytesRead + 2;
      }
    }
 else {
      out.write(rleData,pos,2);
      bytesRead=bytesRead + 2;
    }
    pos=pos + 2;
  }
  System.out.println(""String_Node_Str"" + bytesRead);
  outData=out.toByteArray();
  return outData;
}","/** 
 * @param rleData RLE encoded in byte[].
 * @param offset Data offset in rleData from where RLE data starts
 * @param length Length of RLE data in rleData
 * @return decode plain data in byte[]<br/> <p> Decodes RLE encoded data into plain form. Depending on the the length and contents of the input data, this might take some time to evaluate. </p> <br/> <p> It is assumed that the encoding scheme followed takes 2 bytes as basic block and uses special char 'rr' when there is a repetition of data. More details about the encoding scheme can be found at, https://github.com/praveendath92/udlfb </p>
 */
public byte[] decode(byte[] rleData,int offset,int length){
  int pos=offset;
  int count=0;
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  int bytesRead=0;
  while (pos < length) {
    if (rleData[pos] == 'r' && rleData[pos + 1] == 'r') {
      pos=pos + 2;
      count=rleData[pos] & 0x000000ff;
      pos++;
      while (count != 0) {
        count--;
        out.write(rleData,pos,2);
        bytesRead=bytesRead + 2;
      }
    }
 else {
      out.write(rleData,pos,2);
      bytesRead=bytesRead + 2;
    }
    pos=pos + 2;
  }
  System.out.println(""String_Node_Str"" + bytesRead);
  outData=out.toByteArray();
  return outData;
}",0.9434571890145396
36759,"public void setupImage(ByteBuffer buffer){
  System.out.println(""String_Node_Str"");
  Bitmap bitmap;
  bitmap=Bitmap.createBitmap(1024,768,Bitmap.Config.RGB_565);
  bitmap.copyPixelsFromBuffer(buffer);
  buffer.rewind();
  sampleImage.setImageBitmap(bitmap);
}","public void setupImage(ByteBuffer buffer){
  System.out.println(""String_Node_Str"");
  Bitmap bitmap;
  buffer.position(0);
  bitmap=Bitmap.createBitmap(1024,768,Bitmap.Config.RGB_565);
  bitmap.copyPixelsFromBuffer(buffer);
  buffer.rewind();
  sampleImage.setImageBitmap(bitmap);
}",0.959409594095941
36760,"public void setupImage(ByteBuffer buffer){
  System.out.println(""String_Node_Str"");
  Bitmap bitmap;
  bitmap=Bitmap.createBitmap(1024,668,Bitmap.Config.RGB_565);
  bitmap.copyPixelsFromBuffer(buffer);
  buffer.rewind();
  sampleImage.setImageBitmap(bitmap);
}","public void setupImage(ByteBuffer buffer){
  System.out.println(""String_Node_Str"");
  Bitmap bitmap;
  bitmap=Bitmap.createBitmap(1024,320,Bitmap.Config.RGB_565);
  bitmap.copyPixelsFromBuffer(buffer);
  buffer.rewind();
  sampleImage.setImageBitmap(bitmap);
}",0.9884615384615384
36761,"private void initAccessory(UsbAccessory accessory){
  FileDescriptor fd=null;
  try {
    fd=UsbManager.getInstance(this).openAccessory(accessory).getFileDescriptor();
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
    finish();
  }
catch (  NullPointerException e) {
    e.printStackTrace();
    finish();
  }
  mFout=new FileOutputStream(fd);
  mFin=new FileInputStream(fd);
  mADKReader=new ADKReader(mFin,new UIUpdater());
  mADKWriter=new ADKWriter(mFout);
  widgetsAvailable(true);
  mADKReader.start();
}","private void initAccessory(UsbAccessory accessory){
  FileDescriptor fd=null;
  try {
    fd=UsbManager.getInstance(this).openAccessory(accessory).getFileDescriptor();
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
    finish();
  }
catch (  NullPointerException e) {
    e.printStackTrace();
    finish();
  }
  mFout=new FileOutputStream(fd);
  mFin=new FileInputStream(fd);
  mADKReader=new ADKReader(mFin,new UIUpdater(),this,accessory);
  mADKWriter=new ADKWriter(mFout);
  widgetsAvailable(true);
  mADKReader.start();
}",0.9861239592969472
36762,"public ADKReader(FileInputStream mFin,UIUpdater uu){
  this.mFin=mFin;
  this.uu=uu;
}","public ADKReader(FileInputStream mFin,UIUpdater uu,Context context,UsbAccessory mAccessory){
  this.mFin=mFin;
  this.uu=uu;
  this.context=context;
  this.mAccessory=mAccessory;
}",0.6466165413533834
36763,"@Override protected Long doInBackground(Integer... params){
  int ret=0;
  int i;
  Log.d(DEBUG_TAG,""String_Node_Str"");
  while (true) {
    try {
      ret=mFin.read(buffer);
    }
 catch (    IOException e) {
      Log.d(DEBUG_TAG,""String_Node_Str"");
      e.printStackTrace();
      break;
    }
    i=0;
    read=""String_Node_Str"";
    while (i < ret) {
      int len=ret - i;
      if (len >= 1) {
        read=read + buffer[i] + ""String_Node_Str"";
      }
      i+=1;
      if (i == ret) {
        Log.d(DEBUG_TAG,""String_Node_Str"" + i);
        publishProgress(len);
      }
    }
  }
  return null;
}","@Override protected Long doInBackground(Integer... params){
  int ret=0;
  int i;
  Log.d(DEBUG_TAG,""String_Node_Str"");
  while (true) {
    byte[] buffer=new byte[16384];
    try {
      Log.d(DEBUG_TAG,""String_Node_Str"");
      ret=mFin.read(buffer);
      Log.d(DEBUG_TAG,""String_Node_Str"");
    }
 catch (    IOException e) {
      Log.d(DEBUG_TAG,""String_Node_Str"");
      e.printStackTrace();
      break;
    }
catch (    Exception e) {
      Log.d(DEBUG_TAG,""String_Node_Str"");
      e.printStackTrace();
    }
    read=buffer.toString();
    publishProgress(0);
  }
  return null;
}",0.5754795663052544
36764,"private boolean removeEntry(ViewEntry entry){
  boolean res=entries.remove(entry);
  Iterator<VodAddress> i=d2e.keySet().iterator();
  while (i.hasNext()) {
    if (entry.getDescriptor().getVodAddress().getPeerAddress().equals(i.next().getPeerAddress())) {
      i.remove();
      break;
    }
  }
  checkSize();
  return res;
}","private boolean removeEntry(ViewEntry entry){
  boolean res=entries.remove(entry);
  if (d2e.remove(entry.getDescriptor().getVodAddress()) == null && res == true) {
    System.err.println(""String_Node_Str"");
  }
  checkSize();
  return res;
}",0.4596491228070175
36765,"private boolean removeEntry(ViewEntry entry){
  boolean res=entries.remove(entry);
  if (d2e.remove(entry.getDescriptor().getVodAddress()) == null && res == true) {
    System.err.println(""String_Node_Str"");
  }
  checkSize();
  return res;
}","private boolean removeEntry(ViewEntry entry){
  boolean res=entries.remove(entry);
  Iterator<VodAddress> i=d2e.keySet().iterator();
  while (i.hasNext()) {
    if (entry.getDescriptor().getVodAddress().getPeerAddress().equals(i.next().getPeerAddress())) {
      i.remove();
      break;
    }
  }
  checkSize();
  return res;
}",0.4631578947368421
36766,"public NatTraverser(NatTraverserInit init){
  super();
  subscribe(handleStart,control);
  subscribe(handleStop,control);
  subscribe(handleDisconnectNeighbour,natTraverserPort);
  subscribe(handleStartServices,natTraverserPort);
  subscribe(handleConnectionEstablishmentTimeout,timer);
  subscribe(handleUpperDirectMsgNettyRequest,upperNet);
  subscribe(handleUpperDirectMsgNettyResponse,upperNet);
  subscribe(handleUpperDirectMsgNettyOneway,upperNet);
  subscribe(handleRelayRequestDown,upperNet);
  subscribe(handleRelayOnewayDown,upperNet);
  subscribe(handleRelayResponseDown,upperNet);
  subscribe(handleEchoChangePortResponse,network);
  subscribe(handleLowerDirectMsgRequest,network);
  subscribe(handleLowerDirectMsgResponse,network);
  subscribe(handleLowerDirectMsgOneway,network);
  subscribe(handleRelayRequestUp,network);
  subscribe(handleRelayOnewayUp,network);
  subscribe(handleRelayResponseUp,network);
  subscribe(handleGarbageCleanupTimeout,timer);
  subscribe(handleStunRetryTimeout,timer);
  subscribe(handleServersInitTimeout,timer);
  subscribe(handleCroupierSample,globalCroupierPort);
}","public NatTraverser(NatTraverserInit init){
  super();
  doInit(init);
  subscribe(handleStart,control);
  subscribe(handleStop,control);
  subscribe(handleDisconnectNeighbour,natTraverserPort);
  subscribe(handleStartServices,natTraverserPort);
  subscribe(handleConnectionEstablishmentTimeout,timer);
  subscribe(handleUpperDirectMsgNettyRequest,upperNet);
  subscribe(handleUpperDirectMsgNettyResponse,upperNet);
  subscribe(handleUpperDirectMsgNettyOneway,upperNet);
  subscribe(handleRelayRequestDown,upperNet);
  subscribe(handleRelayOnewayDown,upperNet);
  subscribe(handleRelayResponseDown,upperNet);
  subscribe(handleEchoChangePortResponse,network);
  subscribe(handleLowerDirectMsgRequest,network);
  subscribe(handleLowerDirectMsgResponse,network);
  subscribe(handleLowerDirectMsgOneway,network);
  subscribe(handleRelayRequestUp,network);
  subscribe(handleRelayOnewayUp,network);
  subscribe(handleRelayResponseUp,network);
  subscribe(handleGarbageCleanupTimeout,timer);
  subscribe(handleStunRetryTimeout,timer);
  subscribe(handleServersInitTimeout,timer);
  subscribe(handleCroupierSample,globalCroupierPort);
}",0.9928698752228164
36767,"public File store() throws IOException {
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"" + seed);
  for (  Field f : getClass().getDeclaredFields()) {
    try {
      p.setProperty(f.getName(),""String_Node_Str"" + f.get(this));
    }
 catch (    IllegalAccessException ex) {
      Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
      throw new IOException(""String_Node_Str"" + ex.getMessage());
    }
  }
  File file=File.createTempFile(getClass().getCanonicalName(),""String_Node_Str"");
  Writer writer=new FileWriter(file);
  p.store(writer,getClass().getCanonicalName());
  System.setProperty(getClass().getCanonicalName(),file.getCanonicalPath());
  return file;
}","public File store() throws IOException {
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"" + seed);
  for (  Field f : getClass().getDeclaredFields()) {
    try {
      f.setAccessible(true);
      p.setProperty(f.getName(),""String_Node_Str"" + f.get(this));
    }
 catch (    IllegalAccessException ex) {
      Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
      throw new IOException(""String_Node_Str"" + ex.getMessage());
    }
  }
  File file=File.createTempFile(getClass().getCanonicalName(),""String_Node_Str"");
  Writer writer=new FileWriter(file);
  p.store(writer,getClass().getCanonicalName());
  System.setProperty(getClass().getCanonicalName(),file.getCanonicalPath());
  return file;
}",0.9807308970099669
36768,"public T loadP(Class<? extends AbstractConfiguration> t,String file) throws IOException {
  Properties p=new Properties();
  Reader reader=new FileReader(file);
  p.load(reader);
  Constructor<T> c=(Constructor<T>)t.getConstructors()[1];
  Class<?>[] paramTypes=c.getParameterTypes();
  Object[] initargs=new Object[paramTypes.length];
  String seedStr=p.getProperty(""String_Node_Str"");
  int loadedSeed=Integer.parseInt(seedStr);
  int i=0;
  for (  Field f : getClass().getDeclaredFields()) {
    String val=p.getProperty(f.getName());
    if (val == null) {
      throw new NullPointerException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f.getName()+ ""String_Node_Str"");
    }
    Class<?> pt=paramTypes[i];
    if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
      initargs[i]=Integer.parseInt(val);
    }
 else     if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
      initargs[i]=Long.parseLong(val);
    }
 else     if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
      initargs[i]=Boolean.parseBoolean(val);
    }
 else     if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
      initargs[i]=Double.parseDouble(val);
    }
 else     if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
      initargs[i]=val;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + f.getName());
    }
    i++;
  }
  try {
    T obj=c.newInstance(initargs);
    obj.setSeed(loadedSeed);
    return obj;
  }
 catch (  InstantiationException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
catch (  IllegalAccessException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
catch (  IllegalArgumentException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
catch (  InvocationTargetException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
}","public T loadP(Class<? extends AbstractConfiguration> t,String file) throws IOException {
  Properties p=new Properties();
  Reader reader=new FileReader(file);
  p.load(reader);
  String seedStr=p.getProperty(""String_Node_Str"");
  int loadedSeed=Integer.parseInt(seedStr);
  try {
    Constructor<T> c=(Constructor<T>)t.getConstructor(new Class[]{});
    T obj=c.newInstance();
    for (    Field f : getClass().getDeclaredFields()) {
      f.setAccessible(true);
      String val=p.getProperty(f.getName());
      if (val == null) {
        throw new NullPointerException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f.getName()+ ""String_Node_Str"");
      }
      Class<?> pt=f.getType();
      if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
        f.set(obj,Integer.parseInt(val));
      }
 else       if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
        f.set(obj,Long.parseLong(val));
      }
 else       if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
        f.set(obj,Boolean.parseBoolean(val));
      }
 else       if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
        f.set(obj,Double.parseDouble(val));
      }
 else       if (pt.getSimpleName().compareTo(""String_Node_Str"") == 0) {
        f.set(obj,val);
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + f.getName());
      }
    }
    obj.setSeed(loadedSeed);
    return obj;
  }
 catch (  InstantiationException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
catch (  IllegalAccessException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
catch (  IllegalArgumentException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
catch (  InvocationTargetException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
catch (  NoSuchMethodException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
catch (  SecurityException ex) {
    Logger.getLogger(AbstractConfiguration.class.getName()).log(Level.SEVERE,null,ex);
    throw new IOException(t.getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
  }
}",0.5361433917667914
36769,"public void mapPort(RewriteableMsg msg,Address v,InetAddress destIp,int dstPort,InetAddress srcIp,int srcPort,int rtoRetries){
  int portToMap=0;
switch (allocationPolicy) {
case PORT_PRESERVATION:
    Address mappedEnd=pubPortToPrivateAddr.get(srcPort);
  if (mappedEnd == null && rtoRetries == 0) {
    portToMap=srcPort;
  }
 else {
    if ((clashingOverrides || isExpired(srcPort)) && rtoRetries == 0) {
      portToMap=srcPort;
    }
 else {
switch (alternativePortAllocationPolicy) {
case PORT_CONTIGUITY:
        portToMap=getContiguousPort();
      break;
case RANDOM:
    portToMap=getRandomPort_UnusedIfPossible();
  break;
default :
portToMap=getRandomPort_UnusedIfPossible();
break;
}
}
}
break;
case PORT_CONTIGUITY:
portToMap=getContiguousPort();
break;
case RANDOM:
portToMap=getRandomPort_UnusedIfPossible();
break;
default :
break;
}
logger.trace(compName + ""String_Node_Str"" + v.getPort()+ ""String_Node_Str""+ portToMap);
Address a=new Address(natPublicAddress,portToMap,99);
PortBindRequest req=new PortBindRequest(a,msg.getProtocol());
BindingSession session=new BindingSession(v,destIp,dstPort,msg);
NatPortBindResponse resp=new NatPortBindResponse(req,session,rtoRetries);
req.setResponse(resp);
delegator.doTrigger(req,lowerNetControl);
if (pubPortToPrivateAddr.containsKey(portToMap)) {
logger.warn(compName + ""String_Node_Str"" + pubPortToPrivateAddr.get(portToMap),portToMap,v);
}
pubPortToPrivateAddr.put(portToMap,v);
Map<InetAddress,Map<Integer,Integer>> map=null;
if (!privateEndPointToDestinationTable.containsKey(v)) {
map=new HashMap<InetAddress,Map<Integer,Integer>>();
privateEndPointToDestinationTable.put(v,map);
}
 else {
map=privateEndPointToDestinationTable.get(v);
}
Map<Integer,Integer> s;
if (map.containsKey(destIp)) {
s=map.get(destIp);
}
 else {
s=new HashMap<Integer,Integer>();
}
s.put(dstPort,portToMap);
map.put(destIp,s);
logger.trace(compName + ""String_Node_Str"" + portToMap+ ""String_Node_Str""+ v+ ""String_Node_Str""+ destIp+ ""String_Node_Str""+ dstPort);
}","public void mapPort(RewriteableMsg msg,Address v,InetAddress destIp,int dstPort,InetAddress srcIp,int srcPort,int rtoRetries){
  int portToMap=0;
switch (allocationPolicy) {
case PORT_PRESERVATION:
    Address mappedEnd=pubPortToPrivateAddr.get(srcPort);
  if (mappedEnd == null && rtoRetries == 0) {
    portToMap=srcPort;
  }
 else {
    if ((clashingOverrides || isExpired(srcPort)) && rtoRetries == 0) {
      portToMap=srcPort;
    }
 else {
switch (alternativePortAllocationPolicy) {
case PORT_CONTIGUITY:
        portToMap=getContiguousPort();
      break;
case RANDOM:
    portToMap=getRandomPort_UnusedIfPossible();
  break;
default :
portToMap=getRandomPort_UnusedIfPossible();
break;
}
}
}
break;
case PORT_CONTIGUITY:
portToMap=getContiguousPort();
break;
case RANDOM:
portToMap=getRandomPort_UnusedIfPossible();
break;
default :
break;
}
logger.trace(compName + ""String_Node_Str"" + v.getPort()+ ""String_Node_Str""+ portToMap);
Address a=new Address(natPublicAddress,portToMap,99);
PortBindRequest req=new PortBindRequest(a,msg.getProtocol());
BindingSession session=new BindingSession(v,destIp,dstPort,msg);
NatPortBindResponse resp=new NatPortBindResponse(req,session,rtoRetries);
req.setResponse(resp);
trigger(req,lowerNetControl);
if (pubPortToPrivateAddr.containsKey(portToMap)) {
logger.warn(compName + ""String_Node_Str"" + pubPortToPrivateAddr.get(portToMap),portToMap,v);
}
pubPortToPrivateAddr.put(portToMap,v);
Map<InetAddress,Map<Integer,Integer>> map=null;
if (!privateEndPointToDestinationTable.containsKey(v)) {
map=new HashMap<InetAddress,Map<Integer,Integer>>();
privateEndPointToDestinationTable.put(v,map);
}
 else {
map=privateEndPointToDestinationTable.get(v);
}
Map<Integer,Integer> s;
if (map.containsKey(destIp)) {
s=map.get(destIp);
}
 else {
s=new HashMap<Integer,Integer>();
}
s.put(dstPort,portToMap);
map.put(destIp,s);
logger.trace(compName + ""String_Node_Str"" + portToMap+ ""String_Node_Str""+ v+ ""String_Node_Str""+ destIp+ ""String_Node_Str""+ dstPort);
}",0.9964982491245624
36770,"@Override public void handle(NatPortBindResponse event){
  int portToMap=event.getPort();
  BindingSession session=event.getSession();
  Address v=session.getV();
  InetAddress publicEndPoint=session.getPublicEndPoint();
  int dstPort=session.getDstPort();
  RewriteableMsg msg=session.getMsg();
  if (event.getStatus() != NatPortBindResponse.Status.SUCCESS) {
    int rtoRetries=event.getRtoRetries();
    if (rtoRetries < 3) {
      mapPort(msg,v,publicEndPoint,dstPort,natPublicAddress,dstPort,rtoRetries + 1);
    }
 else {
      Address privateAddr=pubPortToPrivateAddr.remove(portToMap);
      if (privateAddr != null) {
        logger.warn(compName + ""String_Node_Str"",portToMap,privateAddr);
        Map<InetAddress,Map<Integer,Integer>> mapping=privateEndPointToDestinationTable.remove(privateAddr);
        if (mapping != null) {
          mapping.remove(publicEndPoint);
        }
 else {
          logger.warn(compName + ""String_Node_Str"" + mapping);
        }
      }
 else {
        logger.warn(compName + ""String_Node_Str"" + portToMap);
      }
      if (event.getStatus() == NatPortBindResponse.Status.PORT_ALREADY_BOUND) {
        delegator.doTrigger(new Fault(new IllegalStateException(""String_Node_Str"" + portToMap + ""String_Node_Str"")),control);
      }
    }
    return;
  }
  timers.put(portToMap,System.currentTimeMillis());
  Address newSourceAddress=new Address(natPublicAddress,portToMap,msg.getSource().getId());
  msg.rewritePublicSource(newSourceAddress);
  delegator.doTrigger(msg,network);
  logger.debug(compName + ""String_Node_Str"" + ""String_Node_Str""+ msg.getSource()+ ""String_Node_Str""+ msg.getDestination()+ ""String_Node_Str""+ msg.getTimeoutId()+ ""String_Node_Str""+ msg.getClass().toString());
}","@Override public void handle(Stop event){
  logger.debug(compName + ""String_Node_Str"");
}",0.0967032967032967
36771,"public DistributedNatGatewayEmulator(RetryComponentDelegator delegator){
  super(delegator);
  this.delegator.doSubscribe(handleStart,control);
  this.delegator.doSubscribe(handleStop,control);
  this.delegator.doSubscribe(handleUpperMessage,upperNet);
  this.delegator.doSubscribe(handleLowerMessage,network);
  this.delegator.doSubscribe(handleInit,control);
  this.delegator.doSubscribe(handleUpnpGetPublicIpRequest,upnpPort);
  this.delegator.doSubscribe(handleMapPortsRequest,upnpPort);
  this.delegator.doSubscribe(handleUnmapPortRequest,upnpPort);
  this.delegator.doSubscribe(handleShutdownUpnp,upnpPort);
  this.delegator.doSubscribe(handleNatPortBindResponse,lowerNetControl);
  this.delegator.doSubscribe(handlePortBindRequest,upperNetControl);
  this.delegator.doSubscribe(handlePortAllocRequest,upperNetControl);
  this.delegator.doSubscribe(handlePortDeleteRequest,upperNetControl);
  this.delegator.doSubscribe(handleRTO,timer);
}","public DistributedNatGatewayEmulator(){
  subscribe(handleStart,control);
  subscribe(handleStop,control);
  subscribe(handleUpperMessage,upperNet);
  subscribe(handleLowerMessage,network);
  subscribe(handleInit,control);
  subscribe(handleUpnpGetPublicIpRequest,upnpPort);
  subscribe(handleMapPortsRequest,upnpPort);
  subscribe(handleUnmapPortRequest,upnpPort);
  subscribe(handleShutdownUpnp,upnpPort);
  subscribe(handleNatPortBindResponse,lowerNetControl);
  subscribe(handlePortBindRequest,upperNetControl);
  subscribe(handlePortBindResponse,lowerNetControl);
  subscribe(handlePortAllocRequest,upperNetControl);
  subscribe(handlePortAllocResponse,lowerNetControl);
  subscribe(handlePortDeleteRequest,upperNetControl);
  subscribe(handlePortDeleteResponse,lowerNetControl);
}",0.071634893125361
36772,"private void addOpenedConnection(VodAddress openedHole,HpSession session){
  OpenedConnection openedConnection;
  int natBindingTimeout=(int)Math.min(self.getNat().getBindingTimeout(),openedHole.getNatBindingTimeout());
  if (session.isHeartbeatConnection()) {
    ScheduleTimeout st=new ScheduleTimeout(natBindingTimeout - 5);
    SendHeartbeatTimeout sht=new SendHeartbeatTimeout(st,openedHole.getId());
    st.setTimeoutEvent(sht);
    trigger(st,timer);
  }
 else {
    nonPingedConnections.incrementAndGet();
  }
  openedConnection=new OpenedConnection(session.getPortInUse(),openedHole.getPeerAddress(),natBindingTimeout,session.isHeartbeatConnection());
  openedConnections.put(openedHole.getId(),openedConnection);
  hpSessions.remove(session.getRemoteClientId());
}","private void addOpenedConnection(VodAddress openedHole,HpSession session){
  OpenedConnection openedConnection;
  int natBindingTimeout=(int)Math.min(self.getNat().getBindingTimeout(),openedHole.getNatBindingTimeout());
  if (session.isHeartbeatConnection()) {
    scheduleHeartbeat(openedHole.getId());
  }
 else {
    nonPingedConnections.incrementAndGet();
  }
  openedConnection=new OpenedConnection(session.getPortInUse(),openedHole.getPeerAddress(),natBindingTimeout,session.isHeartbeatConnection());
  openedConnections.put(openedHole.getId(),openedConnection);
  hpSessions.remove(session.getRemoteClientId());
}",0.3873744619799139
36773,"private void sendHeartbeat(OpenedConnection oc){
  VodAddress openedHole=ToVodAddr.hpServer(oc.getHoleOpened());
  VodAddress src=new VodAddress(new Address(self.getIp(),oc.getPortInUse(),self.getId()),self.getOverlayId(),self.getNat());
  HpKeepAliveMsg.Ping pingMsg=new HpKeepAliveMsg.Ping(src,openedHole);
  ScheduleRetryTimeout srt=new ScheduleRetryTimeout(2000,3,0.5);
  HeartbeatTimeout hbt=new HeartbeatTimeout(srt,pingMsg);
  delegator.doRetry(hbt);
  logger.trace(compName + ""String_Node_Str"" + self.getAddress()+ ""String_Node_Str""+ src.getPort()+ ""String_Node_Str""+ 2000,openedHole);
  startTimers.put(openedHole.getId(),System.currentTimeMillis());
}","private void sendHeartbeat(OpenedConnection oc){
  VodAddress openedHole=ToVodAddr.hpServer(oc.getHoleOpened());
  VodAddress src=new VodAddress(new Address(self.getIp(),oc.getPortInUse(),self.getId()),self.getOverlayId(),self.getNat());
  HpKeepAliveMsg.Ping pingMsg=new HpKeepAliveMsg.Ping(src,openedHole);
  ScheduleRetryTimeout srt=new ScheduleRetryTimeout(2000,3,0.5);
  HpKeepAliveMsg.PingTimeout hbt=new HpKeepAliveMsg.PingTimeout(srt,pingMsg);
  delegator.doRetry(hbt);
  logger.trace(compName + ""String_Node_Str"" + self.getAddress()+ ""String_Node_Str""+ src.getPort()+ ""String_Node_Str""+ 2000,openedHole);
  startTimers.put(openedHole.getId(),System.currentTimeMillis());
}",0.9612518628912072
36774,"@Override public <P extends PortType>void doTrigger(Event event,Port<P> port){
  if (event == null || port == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (event instanceof DirectMsgNetty.Request || event instanceof RelayMsgNetty.Request) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  trigger(event,port);
}","@Override public <P extends PortType>void doTrigger(Event event,Port<P> port){
  if (event == null || port == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (event instanceof DirectMsgNetty.Request || event instanceof RelayMsgNetty.Request) {
    logger.error(""String_Node_Str"" + event.getClass());
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  trigger(event,port);
}",0.93
36775,"private void sendGetNatTypeResponse(List<Address> stunServers){
  stunTypeDetermined=true;
  failedStunServers.clear();
  if (self.getNat().isOpen()) {
    retryStartServerComponents();
  }
 else   if (self.isUpnp()) {
    logger.info(""String_Node_Str"");
    if (parentMaker != null) {
      trigger(new Stop(),parentMaker.getControl());
    }
  }
 else {
    parentMaker=create(ParentMaker.class);
    connect(parentMaker.getNegative(Timer.class),timer);
    connect(parentMaker.getNegative(VodNetwork.class),network,new MsgDestFilterOverlayId(VodConfig.SYSTEM_OVERLAY_ID));
    connect(parentMaker.getNegative(NatNetworkControl.class),lowerNetControl);
    delegator.doTrigger(new ParentMakerInit(self.clone(VodConfig.SYSTEM_OVERLAY_ID),parentMakerConfig),parentMaker.control());
    List<VodAddress> bootstrappers=new ArrayList<VodAddress>();
    for (    Address va : stunServers) {
      bootstrappers.add(ToVodAddr.hpServer(va));
    }
    delegator.doTrigger(new Join(bootstrappers),parentMaker.getPositive(ParentMakerPort.class));
  }
  cacheStunResults();
}","private void sendGetNatTypeResponse(List<Address> stunServers){
  stunTypeDetermined=true;
  failedStunServers.clear();
  if (self.getNat().isOpen()) {
    retryStartServerComponents();
  }
 else   if (self.isUpnp()) {
    logger.info(""String_Node_Str"");
    if (parentMaker != null) {
      trigger(new Stop(),parentMaker.getControl());
    }
  }
 else {
    parentMaker=create(ParentMaker.class);
    connect(parentMaker.getNegative(Timer.class),timer);
    connect(parentMaker.getNegative(VodNetwork.class),network,new MsgDestFilterOverlayId(VodConfig.SYSTEM_OVERLAY_ID));
    connect(parentMaker.getNegative(NatNetworkControl.class),lowerNetControl);
    delegator.doTrigger(new ParentMakerInit(self.clone(VodConfig.SYSTEM_OVERLAY_ID),parentMakerConfig),parentMaker.control());
    List<VodAddress> bootstrappers=new ArrayList<VodAddress>();
    for (    Address va : stunServers) {
      bootstrappers.add(ToVodAddr.hpServer(va));
    }
    delegator.doTrigger(new Join(bootstrappers),parentMaker.getPositive(ParentMakerPort.class));
  }
}",0.9895734597156398
36776,"private void publishSample(){
  List<VodDescriptor> nodes=getAll();
  nodes.remove(new VodDescriptor(self.getAddress()));
  if (!nodes.isEmpty()) {
    delegator.doTrigger(new CroupierSample(nodes),peerSamplePort);
  }
}","private void publishSample(){
  List<VodDescriptor> nodes=getAll();
  nodes.remove(new VodDescriptor(self.getAddress()));
  if (!nodes.isEmpty()) {
    delegator.doTrigger(new CroupierSample(nodes),peerSamplePort);
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  for (  VodDescriptor d : nodes) {
    sb.append(d.getVodAddress().getId()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  logger.trace(compName + sb);
}",0.6586826347305389
36777,"private boolean removeEntry(ViewEntry entry){
  boolean res=entries.remove(entry);
  d2e.remove(entry.getDescriptor().getVodAddress());
  checkSize();
  return res;
}","private boolean removeEntry(ViewEntry entry){
  boolean res=entries.remove(entry);
  d2e.remove(entry.getDescriptor().getVodAddress().getId());
  checkSize();
  return res;
}",0.976470588235294
36778,"public View(Self self,int size,long seed){
  super();
  this.self=self;
  this.size=size;
  this.entries=new ArrayList<ViewEntry>();
  this.d2e=new HashMap<VodAddress,ViewEntry>();
  this.random=new Random(seed);
}","public View(Self self,int size,long seed){
  super();
  this.self=self;
  this.size=size;
  this.entries=new ArrayList<ViewEntry>();
  this.d2e=new HashMap<Integer,ViewEntry>();
  this.random=new Random(seed);
}",0.96
36779,"private void addEntry(ViewEntry entry){
  if (entry.getDescriptor().getVodAddress().getPort() == VodConfig.DEFAULT_STUN_PORT || entry.getDescriptor().getVodAddress().getPort() == VodConfig.DEFAULT_STUN_PORT_2) {
    entry.getDescriptor().getVodAddress().getPeerAddress().setPort(VodConfig.DEFAULT_PORT);
  }
  if (!entries.contains(entry)) {
    entries.add(entry);
    d2e.put(entry.getDescriptor().getVodAddress(),entry);
    checkSize();
  }
 else {
    removeEntry(entry);
    addEntry(entry);
  }
}","private void addEntry(ViewEntry entry){
  if (entry.getDescriptor().getVodAddress().getPort() == VodConfig.DEFAULT_STUN_PORT || entry.getDescriptor().getVodAddress().getPort() == VodConfig.DEFAULT_STUN_PORT_2) {
    entry.getDescriptor().getVodAddress().getPeerAddress().setPort(VodConfig.DEFAULT_PORT);
  }
  if (!entries.contains(entry)) {
    entries.add(entry);
    d2e.put(entry.getDescriptor().getVodAddress().getId(),entry);
    checkSize();
  }
 else {
    removeEntry(entry);
    addEntry(entry);
  }
}",0.9921104536489151
36780,"public boolean timedOutForShuffle(VodAddress node){
  ViewEntry entry=d2e.get(node);
  if (entry == null) {
    return false;
  }
  return removeEntry(entry);
}","public boolean timedOutForShuffle(VodAddress node){
  ViewEntry entry=d2e.get(node.getId());
  if (entry == null) {
    return false;
  }
  return removeEntry(entry);
}",0.975609756097561
36781,"public void selectToKeep(VodAddress from,List<VodDescriptor> descriptors){
  if (from.equals(self.getAddress())) {
    return;
  }
  LinkedList<ViewEntry> entriesSentToThisPeer=new LinkedList<ViewEntry>();
  ViewEntry fromEntry=d2e.get(from);
  if (fromEntry != null) {
    entriesSentToThisPeer.add(fromEntry);
  }
  for (  ViewEntry cacheEntry : entries) {
    if (cacheEntry.wasSentTo(from)) {
      entriesSentToThisPeer.add(cacheEntry);
    }
  }
  for (  VodDescriptor descriptor : descriptors) {
    if (self.getDescriptor().equals(descriptor)) {
      continue;
    }
    if (d2e.containsKey(descriptor.getVodAddress())) {
      ViewEntry entry=d2e.get(descriptor.getVodAddress());
      if (entry.getDescriptor().getAge() > descriptor.getAge()) {
        removeEntry(entry);
        addEntry(new ViewEntry(descriptor));
        continue;
      }
 else {
        continue;
      }
    }
    if (entries.size() < size) {
      addEntry(new ViewEntry(descriptor));
      continue;
    }
    ViewEntry sentEntry=entriesSentToThisPeer.poll();
    if (sentEntry != null) {
      removeEntry(sentEntry);
      addEntry(new ViewEntry(descriptor));
    }
  }
}","public void selectToKeep(VodAddress from,List<VodDescriptor> descriptors){
  if (from.equals(self.getAddress())) {
    return;
  }
  LinkedList<ViewEntry> entriesSentToThisPeer=new LinkedList<ViewEntry>();
  ViewEntry fromEntry=d2e.get(from.getId());
  if (fromEntry != null) {
    entriesSentToThisPeer.add(fromEntry);
  }
  for (  ViewEntry cacheEntry : entries) {
    if (cacheEntry.wasSentTo(from)) {
      entriesSentToThisPeer.add(cacheEntry);
    }
  }
  for (  VodDescriptor descriptor : descriptors) {
    if (self.getDescriptor().getVodAddress().getId() == descriptor.getVodAddress().getId()) {
      continue;
    }
    int id=descriptor.getVodAddress().getId();
    if (d2e.containsKey(id)) {
      ViewEntry entry=d2e.get(id);
      if (entry.getDescriptor().getAge() > descriptor.getAge()) {
        removeEntry(entry);
        addEntry(new ViewEntry(descriptor));
        continue;
      }
 else {
        continue;
      }
    }
    if (entries.size() < size) {
      addEntry(new ViewEntry(descriptor));
      continue;
    }
    ViewEntry sentEntry=entriesSentToThisPeer.poll();
    if (sentEntry != null) {
      removeEntry(sentEntry);
      addEntry(new ViewEntry(descriptor));
    }
  }
}",0.8624472573839662
36782,"@Override public RewriteableMsg copy(){
  GoMsg.Request copy=new GoMsg.Request(vodSrc,vodDest,openedHole,holePunchingMechanism,holePunchingRole,rtoRetries,PRP_PRP_interleavedPort,bindPort,msgTimeoutId);
  copy.setTimeoutId(timeoutId);
  return copy;
}","@Override public RewriteableMsg copy(){
  GoMsg.Request copy=new GoMsg.Request(vodSrc,vodDest,openedHole,holePunchingMechanism,holePunchingRole,rtoRetries,PRP_PRP_interleavedPort,bindPort,msgTimeoutId);
  return copy;
}",0.9319148936170212
36783,"private boolean bindPort(InetAddress addr,int port,InetAddress upnpIp,int upnpPort){
  if (portsToSockets.containsKey(port)) {
    return true;
  }
  NettyHandler handler=new NettyHandler(component,addr,port);
  EventLoopGroup group=new NioEventLoopGroup();
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(group).channel(NioDatagramChannel.class).option(ChannelOption.SO_BROADCAST,true).handler(new NettyClientInitializer(handler,msgDecoderClass));
  bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(1500));
  bootstrap.option(ChannelOption.SO_RCVBUF,RECV_BUFFER_SIZE);
  bootstrap.option(ChannelOption.SO_SNDBUF,SEND_BUFFER_SIZE);
  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,CONNECT_TIMEOUT_MS);
  bootstrap.option(ChannelOption.SO_REUSEADDR,true);
  try {
    DatagramChannel c;
    if (bindAllNetworkIfs) {
      c=(DatagramChannel)bootstrap.bind(new InetSocketAddress(port)).sync().channel();
    }
 else {
      c=(DatagramChannel)bootstrap.bind(new InetSocketAddress(addr,port)).sync().channel();
    }
    c.closeFuture().await();
    addLocalSocket(c,new InetSocketAddress(addr,port));
    upnpLocalSocket.put(new InetSocketAddress(upnpIp,upnpPort),new InetSocketAddress(addr,port));
    logger.info(""String_Node_Str"",addr,port);
  }
 catch (  InterruptedException e) {
    logger.warn(""String_Node_Str"",addr.getHostAddress(),port);
    trigger(new Fault(e.getCause()),control);
    return false;
  }
  bootstraps.add(bootstrap);
  socketsToBootstraps.put(new InetSocketAddress(addr,port),bootstrap);
  return true;
}","private boolean bindPort(InetAddress addr,int port,InetAddress upnpIp,int upnpPort){
  if (portsToSockets.containsKey(port)) {
    return true;
  }
  NettyHandler handler=new NettyHandler(component,addr,port);
  EventLoopGroup group=new NioEventLoopGroup();
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(group).channel(NioDatagramChannel.class).handler(new NettyClientInitializer(handler,msgDecoderClass));
  bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(1500));
  bootstrap.option(ChannelOption.SO_RCVBUF,RECV_BUFFER_SIZE);
  bootstrap.option(ChannelOption.SO_SNDBUF,SEND_BUFFER_SIZE);
  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,CONNECT_TIMEOUT_MS);
  bootstrap.option(ChannelOption.SO_REUSEADDR,true);
  try {
    DatagramChannel c;
    if (bindAllNetworkIfs) {
      c=(DatagramChannel)bootstrap.bind(new InetSocketAddress(port)).sync().channel();
    }
 else {
      c=(DatagramChannel)bootstrap.bind(new InetSocketAddress(addr,port)).sync().channel();
    }
    addLocalSocket(c,new InetSocketAddress(addr,port));
    upnpLocalSocket.put(new InetSocketAddress(upnpIp,upnpPort),new InetSocketAddress(addr,port));
    logger.info(""String_Node_Str"",addr,port);
  }
 catch (  InterruptedException e) {
    logger.warn(""String_Node_Str"",addr.getHostAddress(),port);
    trigger(new Fault(e.getCause()),control);
    return false;
  }
  bootstraps.add(bootstrap);
  socketsToBootstraps.put(new InetSocketAddress(addr,port),bootstrap);
  return true;
}",0.9776046738072056
36784,"private void send(DirectMsgNetty message){
  InetSocketAddress upnpSocket=address2SocketAddress(message.getSource());
  InetSocketAddress src=upnpLocalSocket.get(upnpSocket);
  InetSocketAddress dest=address2SocketAddress(message.getDestination());
  if (src == null) {
    String strError=""String_Node_Str"" + ""String_Node_Str"" + message.getClass() + ""String_Node_Str""+ message.getSource();
    logger.error(strError);
    trigger(new Fault(new IllegalArgumentException(strError)),control);
    return;
  }
  DatagramChannel channel=socketsToChannels.get(src);
  if (channel == null) {
    if (bindPort(localInetAddress,message.getSource().getPort(),localInetAddress,message.getSource().getPort()) == false) {
      logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
      trigger(new Fault(new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + src.getPort())),control);
      return;
    }
    channel=socketsToChannels.get(src);
  }
  try {
    logger.trace(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str"",message.getSource().getId(),message.getDestination().getId());
    channel.write(new DatagramPacket(message.toByteArray(),dest));
    totalWrittenBytes+=message.getSize();
  }
 catch (  NullPointerException ex) {
    logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
    trigger(new Fault(ex),control);
  }
catch (  MessageEncodingException ex) {
    logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
    trigger(new Fault(ex),control);
  }
}","private void send(RewriteableMsg message){
  InetSocketAddress upnpSocket=address2SocketAddress(message.getSource());
  InetSocketAddress src=upnpLocalSocket.get(upnpSocket);
  InetSocketAddress dest=address2SocketAddress(message.getDestination());
  if (src == null) {
    String strError=""String_Node_Str"" + ""String_Node_Str"" + message.getClass() + ""String_Node_Str""+ message.getSource();
    logger.error(strError);
    trigger(new Fault(new IllegalArgumentException(strError)),control);
    return;
  }
  DatagramChannel channel=socketsToChannels.get(src);
  if (channel == null) {
    if (bindPort(localInetAddress,message.getSource().getPort(),localInetAddress,message.getSource().getPort()) == false) {
      logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
      trigger(new Fault(new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + src.getPort())),control);
      return;
    }
    channel=socketsToChannels.get(src);
  }
  try {
    logger.trace(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str"",message.getSource().getId(),message.getDestination().getId());
    channel.write(new DatagramPacket(((Encodable)message).toByteArray(),dest));
    totalWrittenBytes+=message.getSize();
  }
 catch (  NullPointerException ex) {
    logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
    trigger(new Fault(ex),control);
  }
catch (  MessageEncodingException ex) {
    logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
    trigger(new Fault(ex),control);
  }
}",0.9853425067304816
36785,"private boolean bindPort(InetAddress addr,int port,InetAddress upnpIp,int upnpPort){
  if (portsToSockets.containsKey(port)) {
    return true;
  }
  NettyHandler handler=new NettyHandler(component,addr,port);
  EventLoopGroup group=new NioEventLoopGroup();
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(group).channel(NioDatagramChannel.class).option(ChannelOption.SO_BROADCAST,true).handler(new NettyClientInitializer(handler,msgDecoderClass));
  bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(1500));
  bootstrap.option(ChannelOption.SO_RCVBUF,RECV_BUFFER_SIZE);
  bootstrap.option(ChannelOption.SO_SNDBUF,SEND_BUFFER_SIZE);
  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,CONNECT_TIMEOUT_MS);
  bootstrap.option(ChannelOption.SO_REUSEADDR,true);
  try {
    DatagramChannel c;
    if (bindAllNetworkIfs) {
      c=(DatagramChannel)bootstrap.bind(new InetSocketAddress(port)).sync().channel();
    }
 else {
      c=(DatagramChannel)bootstrap.bind(new InetSocketAddress(addr,port)).sync().channel();
    }
    c.closeFuture().await();
    addLocalSocket(c,new InetSocketAddress(addr,port));
    upnpLocalSocket.put(new InetSocketAddress(upnpIp,upnpPort),new InetSocketAddress(addr,port));
    logger.info(""String_Node_Str"",addr,port);
  }
 catch (  InterruptedException e) {
    logger.warn(""String_Node_Str"",addr.getHostAddress(),port);
    trigger(new Fault(e.getCause()),control);
    return false;
  }
  bootstraps.add(bootstrap);
  socketsToBootstraps.put(new InetSocketAddress(addr,port),bootstrap);
  return true;
}","private boolean bindPort(InetAddress addr,int port,InetAddress upnpIp,int upnpPort){
  if (portsToSockets.containsKey(port)) {
    return true;
  }
  NettyHandler handler=new NettyHandler(component,addr,port);
  EventLoopGroup group=new NioEventLoopGroup();
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(group).channel(NioDatagramChannel.class).handler(new NettyClientInitializer(handler,msgDecoderClass));
  bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(1500));
  bootstrap.option(ChannelOption.SO_RCVBUF,RECV_BUFFER_SIZE);
  bootstrap.option(ChannelOption.SO_SNDBUF,SEND_BUFFER_SIZE);
  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,CONNECT_TIMEOUT_MS);
  bootstrap.option(ChannelOption.SO_REUSEADDR,true);
  try {
    DatagramChannel c;
    if (bindAllNetworkIfs) {
      c=(DatagramChannel)bootstrap.bind(new InetSocketAddress(port)).sync().channel();
    }
 else {
      c=(DatagramChannel)bootstrap.bind(new InetSocketAddress(addr,port)).sync().channel();
    }
    addLocalSocket(c,new InetSocketAddress(addr,port));
    upnpLocalSocket.put(new InetSocketAddress(upnpIp,upnpPort),new InetSocketAddress(addr,port));
    logger.info(""String_Node_Str"",addr,port);
  }
 catch (  InterruptedException e) {
    logger.warn(""String_Node_Str"",addr.getHostAddress(),port);
    trigger(new Fault(e.getCause()),control);
    return false;
  }
  bootstraps.add(bootstrap);
  socketsToBootstraps.put(new InetSocketAddress(addr,port),bootstrap);
  return true;
}",0.9776046738072056
36786,"private void send(DirectMsgNetty message){
  InetSocketAddress upnpSocket=address2SocketAddress(message.getSource());
  InetSocketAddress src=upnpLocalSocket.get(upnpSocket);
  InetSocketAddress dest=address2SocketAddress(message.getDestination());
  if (src == null) {
    String strError=""String_Node_Str"" + ""String_Node_Str"" + message.getClass() + ""String_Node_Str""+ message.getSource();
    logger.error(strError);
    trigger(new Fault(new IllegalArgumentException(strError)),control);
    return;
  }
  DatagramChannel channel=socketsToChannels.get(src);
  if (channel == null) {
    if (bindPort(localInetAddress,message.getSource().getPort(),localInetAddress,message.getSource().getPort()) == false) {
      logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
      trigger(new Fault(new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + src.getPort())),control);
      return;
    }
    channel=socketsToChannels.get(src);
  }
  try {
    logger.trace(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str"",message.getSource().getId(),message.getDestination().getId());
    channel.write(new DatagramPacket(message.toByteArray(),dest));
    totalWrittenBytes+=message.getSize();
  }
 catch (  NullPointerException ex) {
    logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
    trigger(new Fault(ex),control);
  }
catch (  MessageEncodingException ex) {
    logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
    trigger(new Fault(ex),control);
  }
}","private void send(RewriteableMsg message){
  InetSocketAddress upnpSocket=address2SocketAddress(message.getSource());
  InetSocketAddress src=upnpLocalSocket.get(upnpSocket);
  InetSocketAddress dest=address2SocketAddress(message.getDestination());
  if (src == null) {
    String strError=""String_Node_Str"" + ""String_Node_Str"" + message.getClass() + ""String_Node_Str""+ message.getSource();
    logger.error(strError);
    trigger(new Fault(new IllegalArgumentException(strError)),control);
    return;
  }
  DatagramChannel channel=socketsToChannels.get(src);
  if (channel == null) {
    if (bindPort(localInetAddress,message.getSource().getPort(),localInetAddress,message.getSource().getPort()) == false) {
      logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
      trigger(new Fault(new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + src.getPort())),control);
      return;
    }
    channel=socketsToChannels.get(src);
  }
  try {
    logger.trace(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str"",message.getSource().getId(),message.getDestination().getId());
    channel.write(new DatagramPacket(((Encodable)message).toByteArray(),dest));
    totalWrittenBytes+=message.getSize();
  }
 catch (  NullPointerException ex) {
    logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
    trigger(new Fault(ex),control);
  }
catch (  MessageEncodingException ex) {
    logger.warn(""String_Node_Str"" + message.getClass().getCanonicalName() + ""String_Node_Str""+ src.toString());
    trigger(new Fault(ex),control);
  }
}",0.9853425067304816
36787,"@Test public void RelayRequestMsg(){
  ParentKeepAliveMsg.Pong req=new ParentKeepAliveMsg.Pong(gSrc,gDest,UUID.nextUUID());
  RelayRequestMsg.ClientToServer msg=new RelayRequestMsg.ClientToServer(gSrc,gDest,remoteClientId,req);
  msg.setTimeoutId(UUID.nextUUID());
  try {
    ChannelBuffer buffer=msg.toByteArray();
    opCodeCorrect(buffer,msg);
    RelayRequestMsg.ClientToServer res=RelayRequestMsgFactory.Request.fromBuffer(buffer);
  }
 catch (  MessageDecodingException ex) {
    Logger.getLogger(EncodingDecodingTest.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
catch (  MessageEncodingException ex) {
    Logger.getLogger(EncodingDecodingTest.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
  ParentKeepAliveMsg.Pong msg2=new ParentKeepAliveMsg.Pong(gSrc,gDest,UUID.nextUUID());
  msg2.setTimeoutId(UUID.nextUUID());
  try {
    ChannelBuffer buffer=msg2.toByteArray();
    opCodeCorrect(buffer,msg2);
    RelayRequestMsg.ServerToClient res=RelayRequestMsgFactory.Response.fromBuffer(buffer);
  }
 catch (  MessageDecodingException ex) {
    Logger.getLogger(EncodingDecodingTest.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
catch (  MessageEncodingException ex) {
    Logger.getLogger(EncodingDecodingTest.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
}","@Test public void RelayRequestMsg(){
  ConnectMsg.Request req=new ConnectMsg.Request(gSrc,gSrc,utility,true,age);
  RelayRequestMsg.ClientToServer msg=new RelayRequestMsg.ClientToServer(gSrc,gDest,remoteClientId,req);
  msg.setTimeoutId(UUID.nextUUID());
  try {
    ChannelBuffer buffer=msg.toByteArray();
    opCodeCorrect(buffer,msg);
    RelayRequestMsg.ClientToServer res=RelayRequestMsgFactory.Request.fromBuffer(buffer);
  }
 catch (  MessageDecodingException ex) {
    Logger.getLogger(EncodingDecodingTest.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
catch (  MessageEncodingException ex) {
    Logger.getLogger(EncodingDecodingTest.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
  RelayRequestMsg.ServerToClient msg2=new RelayRequestMsg.ServerToClient(gSrc,gDest,remoteClientId,req);
  msg2.setTimeoutId(UUID.nextUUID());
  try {
    ChannelBuffer buffer=msg2.toByteArray();
    opCodeCorrect(buffer,msg2);
    RelayRequestMsg.ServerToClient res=RelayRequestMsgFactory.Response.fromBuffer(buffer);
  }
 catch (  MessageDecodingException ex) {
    Logger.getLogger(EncodingDecodingTest.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
catch (  MessageEncodingException ex) {
    Logger.getLogger(EncodingDecodingTest.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
}",0.2184376156978896
36788,"@Override public void onPacketReceiving(PacketEvent event){
  if (event.getPacketType() == WrapperPlayClientUseEntity.TYPE) {
    int entID=new WrapperPlayClientUseEntity(event.getPacket()).getTarget();
    if (running.containsKey(event.getPlayer().getUniqueId())) {
      running.get(event.getPlayer().getUniqueId()).markAsKilled(entID);
    }
  }
}","@Override public void onPacketReceiving(PacketEvent event){
  if (event.getPacketType() == WrapperPlayClientUseEntity.TYPE) {
    WrapperPlayClientUseEntity packet=new WrapperPlayClientUseEntity(event.getPacket());
    int entID=packet.getTarget();
    if (running.containsKey(event.getPlayer().getUniqueId()) && packet.getType().equals(EntityUseAction.ATTACK)) {
      running.get(event.getPlayer().getUniqueId()).markAsKilled(entID);
    }
  }
}",0.7553324968632371
36789,"public void register(){
  ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(this,WrapperPlayClientUseEntity.TYPE){
    @Override public void onPacketReceiving(    PacketEvent event){
      if (event.getPacketType() == WrapperPlayClientUseEntity.TYPE) {
        int entID=new WrapperPlayClientUseEntity(event.getPacket()).getTarget();
        if (running.containsKey(event.getPlayer().getUniqueId())) {
          running.get(event.getPlayer().getUniqueId()).markAsKilled(entID);
        }
      }
    }
  }
);
  this.isRegistered=true;
}","public void register(){
  ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(this,WrapperPlayClientUseEntity.TYPE){
    @Override public void onPacketReceiving(    PacketEvent event){
      if (event.getPacketType() == WrapperPlayClientUseEntity.TYPE) {
        WrapperPlayClientUseEntity packet=new WrapperPlayClientUseEntity(event.getPacket());
        int entID=packet.getTarget();
        if (running.containsKey(event.getPlayer().getUniqueId()) && packet.getType().equals(EntityUseAction.ATTACK)) {
          running.get(event.getPlayer().getUniqueId()).markAsKilled(entID);
        }
      }
    }
  }
);
  this.isRegistered=true;
}",0.7136997538966365
36790,"public static WrapperPlayServerNamedEntitySpawn getSpawnWrapper(Vector loc,AntiAura plugin){
  WrapperPlayServerNamedEntitySpawn wrapper=new WrapperPlayServerNamedEntitySpawn();
  wrapper.setEntityId(AntiAura.RANDOM.nextInt(20000));
  wrapper.setPosition(loc);
  wrapper.setPlayerUuid(UUID.randomUUID());
  wrapper.setYaw(0.0F);
  wrapper.setPitch(-45.0F);
  WrappedDataWatcher watcher=new WrappedDataWatcher();
  watcher.setObject(0,Byte.valueOf((byte)(plugin.getConfig().getBoolean(""String_Node_Str"",false) ? Byte.valueOf((byte)32).byteValue() : 0)));
  watcher.setObject(6,Float.valueOf(0.5F));
  watcher.setObject(11,Byte.valueOf((byte)1));
  wrapper.setMetadata(watcher);
  return wrapper;
}","public static WrapperPlayServerNamedEntitySpawn getSpawnWrapper(Vector loc,AntiAura plugin){
  WrapperPlayServerNamedEntitySpawn wrapper=new WrapperPlayServerNamedEntitySpawn();
  wrapper.setEntityId(AntiAura.RANDOM.nextInt(20000));
  wrapper.setPosition(loc);
  wrapper.setPlayerUuid(UUID.randomUUID());
  wrapper.setYaw(0.0F);
  wrapper.setPitch(-45.0F);
  WrappedDataWatcher watcher=new WrappedDataWatcher();
  watcher.setObject(0,plugin.getConfig().getBoolean(""String_Node_Str"",false) ? (Byte)(byte)0x20 : (byte)0);
  watcher.setObject(6,(Float)(float)0.5);
  watcher.setObject(11,(Byte)(byte)1);
  wrapper.setMetadata(watcher);
  return wrapper;
}",0.8664688427299704
36791,"private static String getRandomLetter(){
  Random rand=new Random();
  return ((Alphabet)letters.get(rand.nextInt(letters.size()))).name();
}","private static String getRandomLetter(){
  return ((Alphabet)letters.get(rand.nextInt(letters.size()))).name();
}",0.889763779527559
36792,"public static String newName(){
  Random rand=new Random();
  int size=3 + rand.nextInt(4);
  StringBuilder stringBuilder=new StringBuilder();
  while (size > 0) {
    size--;
    stringBuilder.append(getRandomLetter());
  }
  stringBuilder.append(rand.nextInt(999999));
  return stringBuilder.toString();
}","public static String newName(){
  int size=3 + rand.nextInt(4);
  StringBuilder stringBuilder=new StringBuilder();
  while (size > 0) {
    size--;
    stringBuilder.append(getRandomLetter());
  }
  stringBuilder.append(rand.nextInt(999999));
  return stringBuilder.toString();
}",0.9522184300341296
36793,"public List<GitTag> findTags() throws IOException {
  Repository repository=getRepository();
  List<GitTag> result=new LinkedList<>();
  try (Git git=new Git(repository)){
    List<Ref> tags=git.tagList().call();
    for (    Ref tagRef : tags) {
      String label=tagRef.getName();
      String objectId=ObjectId.toString(tagRef.getObjectId());
      if (tagRef.isSymbolic()) {
        String newObjectId=ObjectId.toString(tagRef.getLeaf().getObjectId());
        logger.debug(""String_Node_Str"",label,newObjectId,objectId);
        objectId=newObjectId;
      }
 else {
        logger.debug(""String_Node_Str"",label,objectId);
      }
      if (tagRef.isPeeled()) {
        logger.debug(""String_Node_Str"",label,ObjectId.toString(tagRef.getPeeledObjectId()));
      }
      GitTag newTag=new GitTag(label,objectId);
      result.add(newTag);
    }
  }
 catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"" + path + ""String_Node_Str"",e);
  }
 finally {
    repository.close();
  }
  return result;
}","public List<GitTag> findTags() throws IOException {
  Repository repository=getRepository();
  List<GitTag> result=new LinkedList<>();
  try (Git git=new Git(repository)){
    List<Ref> tags=git.tagList().call();
    for (    Ref tagRef : tags) {
      String label=tagRef.getName();
      RevCommit firstCommit=resolveFirstCommitForTag(git,tagRef);
      String objectId=ObjectId.toString(firstCommit);
      logger.debug(""String_Node_Str"",tagRef,label,objectId);
      GitTag newTag=new GitTag(label,objectId);
      result.add(newTag);
    }
  }
 catch (  GitAPIException e) {
    throw new IllegalStateException(""String_Node_Str"" + path + ""String_Node_Str"",e);
  }
 finally {
    repository.close();
  }
  return result;
}",0.719088319088319
36794,"private SourceLineDescriptor createSourceLineDescriptor(final Store store,final SourceLineType bugInstanceTypeSourceLine){
  final SourceLineDescriptor sourceLineDescriptor=store.create(SourceLineDescriptor.class);
  sourceLineDescriptor.setClassname(bugInstanceTypeSourceLine.getClassname());
  sourceLineDescriptor.setStart(bugInstanceTypeSourceLine.getStart());
  sourceLineDescriptor.setEnd(bugInstanceTypeSourceLine.getEnd());
  sourceLineDescriptor.setSourcefile(bugInstanceTypeSourceLine.getSourcefile());
  sourceLineDescriptor.setSourcepath(bugInstanceTypeSourceLine.getSourcepath());
  return sourceLineDescriptor;
}","private SourceLineDescriptor createSourceLineDescriptor(final Store store,final SourceLineType bugInstanceTypeSourceLine){
  final SourceLineDescriptor sourceLineDescriptor=store.create(SourceLineDescriptor.class);
  if (bugInstanceTypeSourceLine != null) {
    sourceLineDescriptor.setClassname(bugInstanceTypeSourceLine.getClassname());
    sourceLineDescriptor.setStart(bugInstanceTypeSourceLine.getStart());
    sourceLineDescriptor.setEnd(bugInstanceTypeSourceLine.getEnd());
    sourceLineDescriptor.setSourcefile(bugInstanceTypeSourceLine.getSourcefile());
    sourceLineDescriptor.setSourcepath(bugInstanceTypeSourceLine.getSourcepath());
  }
  return sourceLineDescriptor;
}",0.9564553093964858
36795,"protected void addBugInstancesToFindBugsDescriptor(final Store store,final BugCollectionType bugCollectionType,final FindBugsDescriptor findBugsDescriptor){
  for (  BugInstanceType bugInstanceType : bugCollectionType.getBugInstance()) {
    BugInstanceDescriptor bugInstanceDescriptor=store.create(BugInstanceDescriptor.class);
    bugInstanceDescriptor.setType(bugInstanceType.getType());
    bugInstanceDescriptor.setPriority(bugInstanceType.getPriority());
    bugInstanceDescriptor.setAbbrev(bugInstanceType.getAbbrev());
    bugInstanceDescriptor.setCategory(bugInstanceType.getCategory());
    final SourceLineType bugInstanceTypeSourceLine=bugInstanceType.getSourceLine();
    final SourceLineDescriptor sourceLineDescriptor=store.create(SourceLineDescriptor.class);
    sourceLineDescriptor.setClassname(bugInstanceTypeSourceLine.getClassname());
    sourceLineDescriptor.setStart(bugInstanceTypeSourceLine.getStart());
    sourceLineDescriptor.setEnd(bugInstanceTypeSourceLine.getEnd());
    sourceLineDescriptor.setSourcefile(bugInstanceTypeSourceLine.getSourcefile());
    sourceLineDescriptor.setSourcepath(bugInstanceTypeSourceLine.getSourcepath());
    bugInstanceDescriptor.setSourceLineDescriptor(sourceLineDescriptor);
    findBugsDescriptor.getContains().add(bugInstanceDescriptor);
  }
}","protected void addBugInstancesToFindBugsDescriptor(final Store store,final BugCollectionType bugCollectionType,final FindBugsDescriptor findBugsDescriptor){
  for (  BugInstanceType bugInstanceType : bugCollectionType.getBugInstance()) {
    BugInstanceDescriptor bugInstanceDescriptor=store.create(BugInstanceDescriptor.class);
    bugInstanceDescriptor.setType(bugInstanceType.getType());
    bugInstanceDescriptor.setPriority(bugInstanceType.getPriority());
    bugInstanceDescriptor.setAbbrev(bugInstanceType.getAbbrev());
    bugInstanceDescriptor.setCategory(bugInstanceType.getCategory());
    if (bugInstanceType.getSourceLine() != null) {
      final SourceLineType bugInstanceTypeSourceLine=bugInstanceType.getSourceLine();
      final SourceLineDescriptor sourceLineDescriptor=store.create(SourceLineDescriptor.class);
      sourceLineDescriptor.setClassname(bugInstanceTypeSourceLine.getClassname());
      sourceLineDescriptor.setStart(bugInstanceTypeSourceLine.getStart());
      sourceLineDescriptor.setEnd(bugInstanceTypeSourceLine.getEnd());
      sourceLineDescriptor.setSourcefile(bugInstanceTypeSourceLine.getSourcefile());
      sourceLineDescriptor.setSourcepath(bugInstanceTypeSourceLine.getSourcepath());
      bugInstanceDescriptor.setSourceLineDescriptor(sourceLineDescriptor);
    }
    findBugsDescriptor.getContains().add(bugInstanceDescriptor);
  }
}",0.9393375511723112
36796,"public long getAvailableSpace(){
  return available_space;
}","public long getAvailableSpace(){
  if (available_space == null || available_space.isEmpty()) {
    return 0;
  }
  return Long.parseLong(available_space);
}",0.5185185185185185
36797,"public long getStorageLimit(){
  return storage_limit;
}","public long getStorageLimit(){
  if (storage_limit == null || used_storage_size.isEmpty()) {
    return 0;
  }
  return Long.parseLong(storage_limit);
}",0.4807692307692308
36798,"public long getUsedStorageSize(){
  return used_storage_size;
}","public long getUsedStorageSize(){
  if (used_storage_size == null || used_storage_size.isEmpty()) {
    return 0;
  }
  return Long.parseLong(used_storage_size);
}",0.5309734513274337
36799,"void checkFinished(Upload upload){
  if (mDebug) {
    System.out.println(""String_Node_Str"" + mUpload);
  }
  if (upload.isHashInAccount()) {
    if (mDebug) {
      System.out.println(""String_Node_Str"" + mUpload);
    }
    Upload.Options.ActionOnInAccount actionOnInAccount=upload.getOptions().getActionOnInAccount();
switch (actionOnInAccount) {
case UPLOAD_ALWAYS:
      doInstantUpload(upload);
    break;
case UPLOAD_IF_NOT_IN_FOLDER:
  if (upload.isHashInFolder()) {
    doInstantUpload(upload);
  }
 else {
    if (mListener != null) {
      mListener.uploadFinished(upload,upload.getDuplicateQuickKey());
    }
  }
break;
case DO_NOT_UPLOAD:
default :
if (mListener != null) {
mListener.uploadFinished(upload,upload.getDuplicateQuickKey());
}
break;
}
return;
}
 else {
if (mDebug) {
System.out.println(""String_Node_Str"" + mUpload);
}
}
if (upload.isHashInMediaFire()) {
if (mDebug) {
System.out.println(""String_Node_Str"" + mUpload);
}
doInstantUpload(upload);
}
 else {
if (mDebug) {
System.out.println(""String_Node_Str"" + mUpload);
}
doResumableUpload(upload);
}
}","void checkFinished(Upload upload){
  if (mDebug) {
    System.out.println(""String_Node_Str"" + mUpload);
  }
  if (upload.isHashInAccount()) {
    if (mDebug) {
      System.out.println(""String_Node_Str"" + mUpload);
    }
    Upload.Options.ActionOnInAccount actionOnInAccount=upload.getOptions().getActionOnInAccount();
switch (actionOnInAccount) {
case UPLOAD_ALWAYS:
      doInstantUpload(upload);
    break;
case UPLOAD_IF_NOT_IN_FOLDER:
  if (!upload.isHashInFolder()) {
    doInstantUpload(upload);
  }
 else {
    if (mListener != null) {
      mListener.uploadFinished(upload,upload.getDuplicateQuickKey());
    }
  }
break;
case DO_NOT_UPLOAD:
default :
if (mListener != null) {
mListener.uploadFinished(upload,upload.getDuplicateQuickKey());
}
break;
}
return;
}
 else {
if (mDebug) {
System.out.println(""String_Node_Str"" + mUpload);
}
}
if (upload.isHashInMediaFire()) {
if (mDebug) {
System.out.println(""String_Node_Str"" + mUpload);
}
doInstantUpload(upload);
}
 else {
if (mDebug) {
System.out.println(""String_Node_Str"" + mUpload);
}
doResumableUpload(upload);
}
}",0.99953509995351
36800,"private ActionToken createActionToken(Class<? extends ActionToken> clazz,GetActionTokenResponse getActionTokenResponse,Request request){
  if (getActionTokenResponse == null) {
    return null;
  }
  if (getActionTokenResponse.hasError()) {
    return null;
  }
  String tokenString=getActionTokenResponse.getActionToken();
  long tokenExpiry;
  if (request.getQueryParameters().containsKey(""String_Node_Str"")) {
    Object lifeSpanParam=request.getQueryParameters().get(""String_Node_Str"");
    String lifeSpanParamAsString=String.valueOf(lifeSpanParam);
    tokenExpiry=Long.valueOf(lifeSpanParamAsString);
  }
 else {
    tokenExpiry=0;
  }
  if (clazz == ImageActionToken.class) {
    return new ImageActionToken(tokenString,tokenExpiry);
  }
  if (clazz == UploadActionToken.class) {
    return new UploadActionToken(tokenString,tokenExpiry);
  }
  return null;
}","private ActionToken createActionToken(Class<? extends ActionToken> clazz,GetActionTokenResponse getActionTokenResponse,Request request){
  if (getActionTokenResponse == null) {
    return null;
  }
  if (getActionTokenResponse.hasError()) {
    return null;
  }
  String tokenString=getActionTokenResponse.getActionToken();
  long tokenExpiry;
  if (request.getQueryParameters().containsKey(""String_Node_Str"")) {
    Object lifeSpanParam=request.getQueryParameters().get(""String_Node_Str"");
    String lifeSpanParamAsString=String.valueOf(lifeSpanParam);
    tokenExpiry=Long.valueOf(lifeSpanParamAsString);
  }
 else {
    tokenExpiry=0;
  }
  int multiplier=60 * 1000;
  tokenExpiry*=multiplier;
  if (clazz == ImageActionToken.class) {
    return new ImageActionToken(tokenString,tokenExpiry);
  }
  if (clazz == UploadActionToken.class) {
    return new UploadActionToken(tokenString,tokenExpiry);
  }
  return null;
}",0.9692565679150364
36801,"private void pollUploadFinished(PollResponse pollResponse) throws IOException, NoSuchAlgorithmException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  PollResponse.DoUpload doUpload=pollResponse.getDoUpload();
  PollResponse.Status pollStatusCode=doUpload.getStatusCode();
  PollResponse.Result pollResultCode=doUpload.getResultCode();
  PollResponse.FileError pollFileErrorCode=doUpload.getFileErrorCode();
  if (pollStatusCode != PollResponse.Status.NO_MORE_REQUESTS_FOR_THIS_KEY && pollResultCode == PollResponse.Result.SUCCESS && pollFileErrorCode == PollResponse.FileError.NO_ERROR) {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + pollResponse.getDoUpload().getStatusCode().toString() + ""String_Node_Str"");
    startOrRestartUpload();
  }
}","private void pollUploadFinished(PollResponse pollResponse) throws IOException, NoSuchAlgorithmException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  PollResponse.DoUpload doUpload=pollResponse.getDoUpload();
  PollResponse.Status pollStatusCode=doUpload.getStatusCode();
  PollResponse.Result pollResultCode=doUpload.getResultCode();
  PollResponse.FileError pollFileErrorCode=doUpload.getFileErrorCode();
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + pollStatusCode.toString());
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + pollResultCode.toString());
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + pollFileErrorCode.toString());
  if (pollStatusCode == PollResponse.Status.NO_MORE_REQUESTS_FOR_THIS_KEY && pollResultCode == PollResponse.Result.SUCCESS && pollFileErrorCode == PollResponse.FileError.NO_ERROR) {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
    notifyUploadListenerCompleted();
  }
 else   if (pollStatusCode != PollResponse.Status.NO_MORE_REQUESTS_FOR_THIS_KEY && pollResultCode == PollResponse.Result.SUCCESS && pollFileErrorCode == PollResponse.FileError.NO_ERROR) {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + PollResponse.Status.NO_MORE_REQUESTS_FOR_THIS_KEY + ""String_Node_Str""+ pollStatusCode.toString()+ ""String_Node_Str"");
    startOrRestartUpload();
  }
 else {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
    notifyUploadListenerCancelled();
  }
}",0.4741641337386018
36802,"@Override public MFResponse doRequest(final MFRequester mfRequester){
  MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
  MFResponse mfResponse=null;
  try {
    mfHttpClientSetup.prepareMFRequestForHttpClient(mfRequester);
    mfResponse=mfHttpClient.sendRequest(mfRequester);
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
 finally {
    final MFResponse finalMfResponse=mfResponse;
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        mfHttpClientCleanup.returnToken(mfRequester,finalMfResponse);
      }
    }
);
    thread.start();
  }
  return mfResponse;
}","@Override public MFResponse doRequest(final MFRequester mfRequester){
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  MFResponse mfResponse=null;
  try {
    mfHttpClientSetup.prepareMFRequestForHttpClient(mfRequester);
    mfResponse=mfHttpClient.sendRequest(mfRequester);
    final MFResponse finalMfResponse=mfResponse;
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          mfHttpClientCleanup.returnToken(mfRequester,finalMfResponse);
        }
 catch (        MFHttpException e) {
          MFConfiguration.getStaticMFLogger().e(TAG,e.getMessage(),e);
        }
      }
    }
);
    thread.start();
  }
 catch (  UnsupportedEncodingException e) {
    return null;
  }
catch (  MFHttpException e) {
    return null;
  }
  return mfResponse;
}",0.7321428571428571
36803,"@Override public void run(){
  mfHttpClientCleanup.returnToken(mfRequester,finalMfResponse);
}","@Override public void run(){
  try {
    mfHttpClientCleanup.returnToken(mfRequester,finalMfResponse);
  }
 catch (  MFHttpException e) {
    MFConfiguration.getStaticMFLogger().e(TAG,e.getMessage(),e);
  }
}",0.6225165562913907
36804,"protected final String urlEncodedQueryValue(String value) throws UnsupportedEncodingException {
  return URLEncoder.encode(value,""String_Node_Str"");
}","protected final String urlEncodedQueryValue(String value) throws UnsupportedEncodingException {
  if (value == null) {
    return null;
  }
  return URLEncoder.encode(value,""String_Node_Str"");
}",0.872093023255814
36805,"protected final String makeQueryString(Map<String,String> requestParameters,boolean urlEncode) throws UnsupportedEncodingException {
  StringBuilder stringBuilder=new StringBuilder();
  for (  String key : requestParameters.keySet()) {
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(key);
    stringBuilder.append(""String_Node_Str"");
    if (urlEncode) {
      stringBuilder.append(urlEncodedQueryValue(requestParameters.get(key)));
    }
 else {
      stringBuilder.append(requestParameters.get(key));
    }
  }
  String queryString=stringBuilder.toString().substring(1);
  return queryString;
}","protected final String makeQueryString(Map<String,String> requestParameters,boolean urlEncode) throws UnsupportedEncodingException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + urlEncode + ""String_Node_Str"");
  StringBuilder stringBuilder=new StringBuilder();
  for (  String key : requestParameters.keySet()) {
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(key);
    stringBuilder.append(""String_Node_Str"");
    if (urlEncode) {
      stringBuilder.append(urlEncodedQueryValue(requestParameters.get(key)));
    }
 else {
      stringBuilder.append(requestParameters.get(key));
    }
  }
  String queryString=stringBuilder.toString().substring(1);
  return queryString;
}",0.6476761619190404
36806,"protected final String makeUrlAttachableQueryString(String queryString){
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(queryString);
  return stringBuilder.toString();
}","protected final String makeUrlAttachableQueryString(String queryString){
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(queryString);
  return stringBuilder.toString();
}",0.6213235294117647
36807,"protected final String makeBaseUrl(MFRequester mfRequester){
  String scheme=mfRequester.getProtocol().getScheme();
  String host=mfRequester.getHost().getSubDomainAndHostName();
  String uri=mfRequester.getUri();
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(scheme);
  stringBuilder.append(host);
  stringBuilder.append(uri);
  return stringBuilder.toString();
}","protected final String makeBaseUrl(MFRequester mfRequester){
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  String scheme=mfRequester.getProtocol().getScheme();
  String host=mfRequester.getHost().getSubDomainAndHostName();
  String uri=mfRequester.getUri();
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(scheme);
  stringBuilder.append(host);
  stringBuilder.append(uri);
  return stringBuilder.toString();
}",0.9245283018867924
36808,"private MFResponse getResponseFromStream(URLConnection connection,MFRequester mfRequester) throws IOException {
  int status=((HttpURLConnection)connection).getResponseCode();
  MFResponse mfResponse;
  if (status / 100 != 2) {
    MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
    BufferedInputStream bufferedInputStream=new BufferedInputStream(((HttpURLConnection)connection).getErrorStream());
    byte[] body=readStream(bufferedInputStream);
    mfResponse=new MFResponse(status,new Hashtable<String,List<String>>(),body,mfRequester);
  }
 else {
    MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
    BufferedInputStream bufferedInputStream=new BufferedInputStream(connection.getInputStream());
    byte[] body=readStream(bufferedInputStream);
    mfResponse=new MFResponse(status,connection.getHeaderFields(),body,mfRequester);
  }
  return mfResponse;
}","private MFResponse getResponseFromStream(URLConnection connection,MFRequester mfRequester) throws IOException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  int status=((HttpURLConnection)connection).getResponseCode();
  MFResponse mfResponse;
  if (status / 100 != 2) {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
    BufferedInputStream bufferedInputStream=new BufferedInputStream(((HttpURLConnection)connection).getErrorStream());
    byte[] body=readStream(bufferedInputStream);
    mfResponse=new MFResponse(status,new Hashtable<String,List<String>>(),body,mfRequester);
  }
 else {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
    BufferedInputStream bufferedInputStream=new BufferedInputStream(connection.getInputStream());
    byte[] body=readStream(bufferedInputStream);
    mfResponse=new MFResponse(status,connection.getHeaderFields(),body,mfRequester);
  }
  return mfResponse;
}",0.9631635969664138
36809,"private HttpURLConnection createHttpConnection(MFRequester mfRequester) throws IOException, NoSuchAlgorithmException, KeyManagementException {
  MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + mfRequester.getProtocol() + ""String_Node_Str"");
  URL url=makeFullUrl(mfRequester);
  MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + url.toString());
  URLConnection connection;
switch (mfRequester.getProtocol()) {
case HTTP:
    connection=url.openConnection();
  setConnectionParameters(connection,mfRequester);
return (HttpURLConnection)connection;
case HTTPS:
TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
public java.security.cert.X509Certificate[] getAcceptedIssuers(){
  return null;
}
public void checkClientTrusted(X509Certificate[] certs,String authType){
}
public void checkServerTrusted(X509Certificate[] certs,String authType){
}
}
};
SSLContext sc=SSLContext.getInstance(""String_Node_Str"");
sc.init(null,trustAllCerts,new java.security.SecureRandom());
HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
HostnameVerifier allHostsValid=new HostnameVerifier(){
public boolean verify(String hostname,SSLSession session){
return true;
}
}
;
HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
connection=url.openConnection();
setConnectionParameters(connection,mfRequester);
return (HttpsURLConnection)connection;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","private HttpURLConnection createHttpConnection(MFRequester mfRequester) throws IOException, NoSuchAlgorithmException, KeyManagementException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfRequester.getProtocol() + ""String_Node_Str"");
  URL url=makeFullUrl(mfRequester);
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + url.toString());
  URLConnection connection;
switch (mfRequester.getProtocol()) {
case HTTP:
    connection=url.openConnection();
  setConnectionParameters(connection,mfRequester);
return (HttpURLConnection)connection;
case HTTPS:
TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
public java.security.cert.X509Certificate[] getAcceptedIssuers(){
  return null;
}
public void checkClientTrusted(X509Certificate[] certs,String authType){
}
public void checkServerTrusted(X509Certificate[] certs,String authType){
}
}
};
SSLContext sc=SSLContext.getInstance(""String_Node_Str"");
sc.init(null,trustAllCerts,new java.security.SecureRandom());
HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
HostnameVerifier allHostsValid=new HostnameVerifier(){
public boolean verify(String hostname,SSLSession session){
return true;
}
}
;
HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
connection=url.openConnection();
setConnectionParameters(connection,mfRequester);
return (HttpsURLConnection)connection;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}",0.9986357435197816
36810,"private void setConnectionParameters(URLConnection connection,MFRequester mfRequester){
  if (mfRequester.isQueryPostable() || mfRequester.getPayload() != null) {
    connection.setDoOutput(true);
  }
 else {
  }
  connection.setConnectTimeout(connectionTimeout);
  connection.setReadTimeout(readTimeout);
  if (mfRequester.getHeaders() != null) {
    for (    String key : mfRequester.getHeaders().keySet()) {
      connection.addRequestProperty(key,mfRequester.getHeaders().get(key));
    }
  }
}","private void setConnectionParameters(URLConnection connection,MFRequester mfRequester){
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  if (mfRequester.isQueryPostable() || mfRequester.getPayload() != null) {
    connection.setDoOutput(true);
  }
 else {
  }
  connection.setConnectTimeout(connectionTimeout);
  connection.setReadTimeout(readTimeout);
  if (mfRequester.getHeaders() != null) {
    for (    String key : mfRequester.getHeaders().keySet()) {
      connection.addRequestProperty(key,mfRequester.getHeaders().get(key));
    }
  }
}",0.939622641509434
36811,"private URL makeFullUrl(MFRequester mfRequester) throws MalformedURLException, UnsupportedEncodingException {
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(makeBaseUrl(mfRequester));
  if (!mfRequester.isQueryPostable()) {
    String queryString=makeQueryString(mfRequester.getRequestParameters());
    queryString=makeUrlAttachableQueryString(queryString);
    stringBuilder.append(queryString);
  }
  return new URL(stringBuilder.toString());
}","private URL makeFullUrl(MFRequester mfRequester) throws MalformedURLException, UnsupportedEncodingException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(makeBaseUrl(mfRequester));
  if (!mfRequester.isQueryPostable()) {
    String queryString=makeQueryString(mfRequester.getRequestParameters());
    queryString=makeUrlAttachableQueryString(queryString);
    stringBuilder.append(queryString);
  }
  return new URL(stringBuilder.toString());
}",0.9367588932806324
36812,"private byte[] readStream(InputStream inputStream) throws IOException {
  if (inputStream == null) {
    return null;
  }
  byte[] buffer=new byte[1024];
  int count;
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream(1024);
  while ((count=inputStream.read(buffer)) != -1) {
    outputStream.write(buffer,0,count);
  }
  inputStream.close();
  byte[] bytes=outputStream.toByteArray();
  outputStream.close();
  return bytes;
}","private byte[] readStream(InputStream inputStream) throws IOException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  if (inputStream == null) {
    return null;
  }
  byte[] buffer=new byte[1024];
  int count;
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream(1024);
  while ((count=inputStream.read(buffer)) != -1) {
    outputStream.write(buffer,0,count);
  }
  inputStream.close();
  byte[] bytes=outputStream.toByteArray();
  outputStream.close();
  return bytes;
}",0.9320594479830148
36813,"public MFResponse sendRequest(MFRequester mfRequester){
  MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
  URLConnection connection=null;
  MFResponse mfResponse=null;
  try {
    connection=createHttpConnection(mfRequester);
    postData(mfRequester,connection);
    mfResponse=getResponseFromStream(connection,mfRequester);
    MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + mfResponse.getResponseAsString());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
catch (  KeyManagementException e) {
    e.printStackTrace();
  }
 finally {
    if (connection != null) {
      ((HttpURLConnection)connection).disconnect();
    }
  }
  return mfResponse;
}","public MFResponse sendRequest(MFRequester mfRequester){
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  URLConnection connection=null;
  MFResponse mfResponse=null;
  try {
    connection=createHttpConnection(mfRequester);
    postData(mfRequester,connection);
    mfResponse=getResponseFromStream(connection,mfRequester);
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfResponse.getResponseAsString());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
catch (  KeyManagementException e) {
    e.printStackTrace();
  }
 finally {
    if (connection != null) {
      ((HttpURLConnection)connection).disconnect();
    }
  }
  return mfResponse;
}",0.9973718791064388
36814,"private void postData(MFRequester mfRequester,URLConnection connection) throws IOException {
  byte[] payload=null;
  if (mfRequester.isQueryPostable()) {
    payload=makeQueryString(mfRequester.getRequestParameters()).getBytes();
  }
 else   if (mfRequester.getPayload() != null) {
    payload=mfRequester.getPayload();
  }
  if (payload != null) {
    connection.addRequestProperty(""String_Node_Str"",String.valueOf(payload.length));
    connection.getOutputStream().write(payload);
  }
}","private void postData(MFRequester mfRequester,URLConnection connection) throws IOException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  byte[] payload=null;
  if (mfRequester.isQueryPostable()) {
    String stringPayload=makeQueryString(mfRequester.getRequestParameters());
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + stringPayload);
    payload=stringPayload.getBytes();
  }
 else   if (mfRequester.getPayload() != null) {
    payload=mfRequester.getPayload();
  }
  if (payload != null) {
    connection.addRequestProperty(""String_Node_Str"",String.valueOf(payload.length));
    connection.getOutputStream().write(payload);
  }
}",0.8384879725085911
36815,"public MFActionToken createActionToken(MFActionToken.Type type,GetActionTokenResponse getActionTokenResponse,MFRequester mfRequester){
  MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
  if (getActionTokenResponse == null) {
    MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
    return null;
  }
  if (getActionTokenResponse.hasError()) {
    MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
    return null;
  }
  String tokenString=getActionTokenResponse.getActionToken();
  long tokenExpiry;
  if (mfRequester.getRequestParameters().containsKey(""String_Node_Str"")) {
    tokenExpiry=Long.valueOf(mfRequester.getRequestParameters().get(""String_Node_Str""));
  }
 else {
    tokenExpiry=0;
  }
  MFActionToken actionToken=new MFActionToken(tokenString,type,tokenExpiry);
  MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + actionToken.toString());
  return actionToken;
}","public MFActionToken createActionToken(MFActionToken.Type type,GetActionTokenResponse getActionTokenResponse,MFRequester mfRequester){
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  if (getActionTokenResponse == null) {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
    return null;
  }
  if (getActionTokenResponse.hasError()) {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
    return null;
  }
  String tokenString=getActionTokenResponse.getActionToken();
  long tokenExpiry;
  if (mfRequester.getRequestParameters().containsKey(""String_Node_Str"")) {
    tokenExpiry=Long.valueOf(mfRequester.getRequestParameters().get(""String_Node_Str""));
  }
 else {
    tokenExpiry=0;
  }
  MFActionToken actionToken=new MFActionToken(tokenString,type,tokenExpiry);
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + actionToken.toString());
  return actionToken;
}",0.9956803455723542
36816,"public MFSessionToken createNewSessionToken(GetSessionTokenResponse getSessionTokenResponse){
  MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
  if (getSessionTokenResponse == null) {
    MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
    return null;
  }
  if (getSessionTokenResponse.hasError()) {
    MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"");
    return null;
  }
  String tokenString=getSessionTokenResponse.getSessionToken();
  String secretKey=getSessionTokenResponse.getSecretKey();
  String time=getSessionTokenResponse.getTime();
  String pkey=getSessionTokenResponse.getPkey();
  String ekey=getSessionTokenResponse.getEkey();
  MFSessionToken mfSessionToken=new MFSessionToken(tokenString,secretKey,time,pkey,ekey);
  MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + mfSessionToken.toString());
  return mfSessionToken;
}","public MFSessionToken createNewSessionToken(GetSessionTokenResponse getSessionTokenResponse) throws MFHttpException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
  if (getSessionTokenResponse == null) {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
    return null;
  }
  if (getSessionTokenResponse.hasError()) {
    MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"");
    throw new MFHttpException(""String_Node_Str"" + getSessionTokenResponse.getMessage());
  }
  String tokenString=getSessionTokenResponse.getSessionToken();
  String secretKey=getSessionTokenResponse.getSecretKey();
  String time=getSessionTokenResponse.getTime();
  String pkey=getSessionTokenResponse.getPkey();
  String ekey=getSessionTokenResponse.getEkey();
  MFSessionToken mfSessionToken=new MFSessionToken(tokenString,secretKey,time,pkey,ekey);
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfSessionToken.toString());
  return mfSessionToken;
}",0.9331919406150584
36817,"public void returnToken(MFRequester mfRequester,MFResponse mfResponse){
switch (mfRequester.getTypeOfTokenToReturn()) {
case NEW:
    GetSessionTokenResponse newSessionTokenResponse=mfResponse.getResponseObject(GetSessionTokenResponse.class);
  MFSessionToken newSessionToken=createNewSessionToken(newSessionTokenResponse);
MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + newSessionToken.toString());
mfTokenFarmCallback.receiveNewSessionToken(newSessionToken);
break;
case V2:
ApiResponse apiResponse=mfResponse.getResponseObject(ApiResponse.class);
if (apiResponse.hasError() && apiResponse.getError() == 105 || apiResponse.getError() == 127) {
mfTokenFarmCallback.sessionTokenSpoiled((MFSessionToken)mfResponse.getOriginMFRequester().getToken());
}
 else {
if (apiResponse.needNewKey()) {
MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + mfRequester.getToken().toString());
((MFSessionToken)mfRequester.getToken()).updateSessionToken();
MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + mfRequester.getToken().toString());
}
mfTokenFarmCallback.returnSessionToken(((MFSessionToken)mfRequester.getToken()));
}
break;
case UPLOAD:
GetActionTokenResponse uploadActionTokenResponse=mfResponse.getResponseObject(GetActionTokenResponse.class);
if (uploadActionTokenResponse.hasError() && uploadActionTokenResponse.getError() == 105 || uploadActionTokenResponse.getError() == 127) {
mfTokenFarmCallback.sessionTokenSpoiled((MFSessionToken)mfResponse.getOriginMFRequester().getToken());
}
 else {
MFActionToken mfUploadActionToken=createActionToken(MFActionToken.Type.UPLOAD,uploadActionTokenResponse,mfRequester);
MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + mfUploadActionToken.toString());
mfTokenFarmCallback.receiveNewUploadActionToken(mfUploadActionToken);
}
break;
case IMAGE:
GetActionTokenResponse imageActionTokenResponse=mfResponse.getResponseObject(GetActionTokenResponse.class);
if (imageActionTokenResponse.hasError() && imageActionTokenResponse.getError() == 105 || imageActionTokenResponse.getError() == 127) {
mfTokenFarmCallback.sessionTokenSpoiled((MFSessionToken)mfResponse.getOriginMFRequester().getToken());
}
 else {
MFActionToken mfImageActionToken=createActionToken(MFActionToken.Type.IMAGE,imageActionTokenResponse,mfRequester);
MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + mfImageActionToken.toString());
mfTokenFarmCallback.receiveNewImageActionToken(mfImageActionToken);
}
break;
case NONE:
MFConfiguration.getStaticMFLogger().v(TAG,""String_Node_Str"" + mfRequester.getTypeOfTokenToReturn().toString() + ""String_Node_Str"");
break;
}
}","public void returnToken(MFRequester mfRequester,MFResponse mfResponse) throws MFHttpException {
  MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfRequester.getTypeOfTokenToReturn().toString() + ""String_Node_Str"");
  if (mfResponse == null || mfResponse.getResponseObject(ApiResponse.class) == null) {
    return;
  }
switch (mfRequester.getTypeOfTokenToReturn()) {
case NEW:
    GetSessionTokenResponse newSessionTokenResponse=mfResponse.getResponseObject(GetSessionTokenResponse.class);
  MFSessionToken newSessionToken=createNewSessionToken(newSessionTokenResponse);
mfTokenFarmCallback.receiveNewSessionToken(newSessionToken);
break;
case V2:
ApiResponse apiResponse=mfResponse.getResponseObject(ApiResponse.class);
if (apiResponse.hasError() && apiResponse.getError() == 105 || apiResponse.getError() == 127) {
MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfRequester.getUri() + mfRequester.getRequestParameters().toString()+ ""String_Node_Str""+ mfRequester.getToken().toString());
mfTokenFarmCallback.sessionTokenSpoiled((MFSessionToken)mfResponse.getOriginMFRequester().getToken());
}
 else {
if (apiResponse.needNewKey()) {
MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfRequester.getUri() + mfRequester.getRequestParameters().toString()+ ""String_Node_Str""+ mfRequester.getToken().toString());
((MFSessionToken)mfRequester.getToken()).updateSessionToken();
MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfRequester.getToken().toString() + ""String_Node_Str""+ mfRequester.getUri()+ mfRequester.getRequestParameters().toString());
}
mfTokenFarmCallback.returnSessionToken(((MFSessionToken)mfRequester.getToken()));
}
break;
case UPLOAD:
GetActionTokenResponse uploadActionTokenResponse=mfResponse.getResponseObject(GetActionTokenResponse.class);
if (uploadActionTokenResponse.hasError() && uploadActionTokenResponse.getError() == 105 || uploadActionTokenResponse.getError() == 127) {
mfTokenFarmCallback.sessionTokenSpoiled((MFSessionToken)mfResponse.getOriginMFRequester().getToken());
}
 else {
MFActionToken mfUploadActionToken=createActionToken(MFActionToken.Type.UPLOAD,uploadActionTokenResponse,mfRequester);
MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfUploadActionToken.toString());
mfTokenFarmCallback.receiveNewUploadActionToken(mfUploadActionToken);
}
break;
case IMAGE:
GetActionTokenResponse imageActionTokenResponse=mfResponse.getResponseObject(GetActionTokenResponse.class);
if (imageActionTokenResponse.hasError() && imageActionTokenResponse.getError() == 105 || imageActionTokenResponse.getError() == 127) {
mfTokenFarmCallback.sessionTokenSpoiled((MFSessionToken)mfResponse.getOriginMFRequester().getToken());
}
 else {
MFActionToken mfImageActionToken=createActionToken(MFActionToken.Type.IMAGE,imageActionTokenResponse,mfRequester);
MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfImageActionToken.toString());
mfTokenFarmCallback.receiveNewImageActionToken(mfImageActionToken);
}
break;
case NONE:
MFConfiguration.getStaticMFLogger().w(TAG,""String_Node_Str"" + mfRequester.getUri() + mfRequester.getRequestParameters().toString());
break;
}
}",0.7991718426501035
36818,"@Override protected void doUploadProcess(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  Thread.currentThread().setPriority(3);
  String filename;
  try {
    filename=URLEncoder.encode(uploadItem.getFileName(),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + e);
    notifyListenerException(e);
    return;
  }
  Map<String,String> keyValue=generateRequestParameters(filename);
  MFRequest mfRequest=new MFRequest(MFHost.LIVE_HTTP,MFApi.UPLOAD_INSTANT,keyValue);
  MFHttpRunner.RunnerHolder runnerHolder=mfTokenFarm.getMfHttpRunner().doRequest(mfRequest);
  MFResponse receivedMFResponse=runnerHolder.getMfResponse();
  InstantResponse response=receivedMFResponse.getResponseObject(InstantResponse.class);
  if (response == null) {
    notifyListenerLostConnection();
    return;
  }
  if (response.getErrorCode() != ApiResponse.ResponseCode.NO_ERROR) {
    notifyListenerCancelled(response);
    return;
  }
  if (!response.getQuickkey().isEmpty()) {
    notifyListenerCompleted(response);
  }
 else {
    notifyListenerCancelled(response);
  }
}","@Override protected void doUploadProcess(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  String filename;
  try {
    filename=URLEncoder.encode(uploadItem.getFileName(),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + e);
    notifyListenerException(e);
    return;
  }
  Map<String,String> keyValue=generateRequestParameters(filename);
  MFRequest mfRequest=new MFRequest(MFHost.LIVE_HTTP,MFApi.UPLOAD_INSTANT,keyValue);
  MFHttpRunner.RunnerHolder runnerHolder=mfTokenFarm.getMfHttpRunner().doRequest(mfRequest);
  MFResponse receivedMFResponse=runnerHolder.getMfResponse();
  InstantResponse response=receivedMFResponse.getResponseObject(InstantResponse.class);
  if (response == null) {
    notifyListenerLostConnection();
    return;
  }
  if (response.getErrorCode() != ApiResponse.ResponseCode.NO_ERROR) {
    notifyListenerCancelled(response);
    return;
  }
  if (!response.getQuickkey().isEmpty()) {
    notifyListenerCompleted(response);
  }
 else {
    notifyListenerCancelled(response);
  }
}",0.982197134172818
36819,"@Override protected void doUploadProcess(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  Thread.currentThread().setPriority(3);
  FileData fileData=uploadItem.getFileData();
  long fileSize=fileData.getFileSize();
  String encodedShortFileName;
  try {
    encodedShortFileName=URLEncoder.encode(uploadItem.getFileName(),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + e);
    notifyListenerException(e);
    return;
  }
  ChunkData chunkData=uploadItem.getChunkData();
  int numChunks=chunkData.getNumberOfUnits();
  int unitSize=chunkData.getUnitSize();
  ResumableResponse response=null;
  for (int chunkNumber=0; chunkNumber < numChunks; chunkNumber++) {
    if (uploadItem.isCancelled()) {
      notifyListenerCancelled(response);
      return;
    }
    if (!uploadItem.getBitmap().isUploaded(chunkNumber)) {
      int chunkSize=getChunkSize(chunkNumber,numChunks,fileSize,unitSize);
      ResumableChunkInfo resumableChunkInfo=createResumableChunkInfo(unitSize,chunkNumber);
      if (resumableChunkInfo == null || resumableChunkInfo.hasException()) {
        notifyListenerException(resumableChunkInfo.getException());
        return;
      }
      String chunkHash=resumableChunkInfo.getChunkHash();
      byte[] uploadChunk=resumableChunkInfo.getUploadChunk();
      printDebugCurrentChunk(chunkNumber,numChunks,chunkSize,unitSize,fileSize,chunkHash,uploadChunk);
      HashMap<String,String> headers=generatePostHeaders(encodedShortFileName,fileSize,chunkNumber,chunkHash,chunkSize);
      HashMap<String,String> parameters=generateGetParameters();
      printDebugRequestData(headers,parameters);
      MFRequest mfRequest=new MFRequest(MFHost.LIVE_HTTP,MFApi.UPLOAD_INSTANT,parameters,headers,uploadChunk);
      MFHttpRunner.RunnerHolder runnerHolder=mfTokenFarm.getMfHttpRunner().doRequest(mfRequest);
      MFResponse receivedMFResponse=runnerHolder.getMfResponse();
      response=receivedMFResponse.getResponseObject(ResumableResponse.class);
      if (shouldSetPollUploadKey(response)) {
        uploadItem.setPollUploadKey(response.getDoUpload().getPollUploadKey());
      }
      if (shouldCancelUpload(response)) {
        notifyListenerCancelled(response);
        return;
      }
      int count=response.getResumableUpload().getBitmap().getCount();
      List<Integer> words=response.getResumableUpload().getBitmap().getWords();
      ResumableBitmap bitmap=new ResumableBitmap(count,words);
      uploadItem.setBitmap(bitmap);
      MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + uploadItem.getFileData().getFilePath() + ""String_Node_Str""+ uploadItem.getBitmap().getCount()+ ""String_Node_Str""+ uploadItem.getBitmap().getWords().toString()+ ""String_Node_Str"");
      clearReferences(chunkSize,chunkHash,uploadChunk,headers,parameters);
    }
    updateProgressForListener(numChunks);
  }
  notifyListenerCompleted(response);
}","@Override protected void doUploadProcess(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  FileData fileData=uploadItem.getFileData();
  long fileSize=fileData.getFileSize();
  String encodedShortFileName;
  try {
    encodedShortFileName=URLEncoder.encode(uploadItem.getFileName(),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + e);
    notifyListenerException(e);
    return;
  }
  ChunkData chunkData=uploadItem.getChunkData();
  int numChunks=chunkData.getNumberOfUnits();
  int unitSize=chunkData.getUnitSize();
  ResumableResponse response=null;
  for (int chunkNumber=0; chunkNumber < numChunks; chunkNumber++) {
    if (uploadItem.isCancelled()) {
      notifyListenerCancelled(response);
      return;
    }
    if (!uploadItem.getBitmap().isUploaded(chunkNumber)) {
      int chunkSize=getChunkSize(chunkNumber,numChunks,fileSize,unitSize);
      ResumableChunkInfo resumableChunkInfo=createResumableChunkInfo(unitSize,chunkNumber);
      if (resumableChunkInfo == null || resumableChunkInfo.hasException()) {
        notifyListenerException(resumableChunkInfo.getException());
        return;
      }
      String chunkHash=resumableChunkInfo.getChunkHash();
      byte[] uploadChunk=resumableChunkInfo.getUploadChunk();
      printDebugCurrentChunk(chunkNumber,numChunks,chunkSize,unitSize,fileSize,chunkHash,uploadChunk);
      HashMap<String,String> headers=generatePostHeaders(encodedShortFileName,fileSize,chunkNumber,chunkHash,chunkSize);
      HashMap<String,String> parameters=generateGetParameters();
      printDebugRequestData(headers,parameters);
      MFRequest mfRequest=new MFRequest(MFHost.LIVE_HTTP,MFApi.UPLOAD_INSTANT,parameters,headers,uploadChunk);
      MFHttpRunner.RunnerHolder runnerHolder=mfTokenFarm.getMfHttpRunner().doRequest(mfRequest);
      MFResponse receivedMFResponse=runnerHolder.getMfResponse();
      response=receivedMFResponse.getResponseObject(ResumableResponse.class);
      if (shouldSetPollUploadKey(response)) {
        uploadItem.setPollUploadKey(response.getDoUpload().getPollUploadKey());
      }
      if (shouldCancelUpload(response)) {
        notifyListenerCancelled(response);
        return;
      }
      int count=response.getResumableUpload().getBitmap().getCount();
      List<Integer> words=response.getResumableUpload().getBitmap().getWords();
      ResumableBitmap bitmap=new ResumableBitmap(count,words);
      uploadItem.setBitmap(bitmap);
      MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + uploadItem.getFileData().getFilePath() + ""String_Node_Str""+ uploadItem.getBitmap().getCount()+ ""String_Node_Str""+ uploadItem.getBitmap().getWords().toString()+ ""String_Node_Str"");
      clearReferences(chunkSize,chunkHash,uploadChunk,headers,parameters);
    }
    updateProgressForListener(numChunks);
  }
  notifyListenerCompleted(response);
}",0.9931196509481456
36820,"private MFConfiguration(MFConfigurationBuilder mfConfigurationBuilder){
  this.httpReadTimeout=mfConfigurationBuilder.httpReadTimeout;
  this.httpConnectionTimeout=mfConfigurationBuilder.httpConnectionTimeout;
  this.minimumSessionTokens=mfConfigurationBuilder.minimumSessionTokens;
  this.maximumSessionTokens=mfConfigurationBuilder.maximumSessionTokens;
  this.httpPoolSize=mfConfigurationBuilder.httpPoolSize;
  this.appId=mfConfigurationBuilder.appId;
  this.apiKey=mfConfigurationBuilder.apiKey;
  this.mfLogger=mfConfigurationBuilder.mfLogger;
  this.mfCredentials=mfConfigurationBuilder.mfCredentials;
  this.mfExecutorService=mfConfigurationBuilder.mfExecutorService;
}","private MFConfiguration(MFConfigurationBuilder mfConfigurationBuilder){
  this.httpReadTimeout=mfConfigurationBuilder.httpReadTimeout;
  this.httpConnectionTimeout=mfConfigurationBuilder.httpConnectionTimeout;
  this.minimumSessionTokens=mfConfigurationBuilder.minimumSessionTokens;
  this.maximumSessionTokens=mfConfigurationBuilder.maximumSessionTokens;
  this.httpPoolSize=mfConfigurationBuilder.httpPoolSize;
  this.appId=mfConfigurationBuilder.appId;
  this.apiKey=mfConfigurationBuilder.apiKey;
  this.mfLogger=mfConfigurationBuilder.mfLogger;
  this.mfCredentials=mfConfigurationBuilder.mfCredentials;
  this.mfExecutorService=mfConfigurationBuilder.mfExecutorService;
  staticMFLogger=this.mfLogger;
}",0.976911976911977
36821,"public void doRequest(MFRequest mfRequest){
  doRequest(mfRequest,null);
}","public RunnerHolder doRequest(MFRequest mfRequest){
  mfConfiguration.getMfLogger().logMessage(TAG,""String_Node_Str"");
  MFResponse mfResponse=null;
  try {
    mfHttpClientSetup.prepareMFRequestForHttpClient(mfRequest);
    mfResponse=mfHttpClient.sendRequest(mfRequest);
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  mfConfiguration.getMfLogger().logApiError(TAG,mfRequest,mfResponse);
  mfHttpClientCleanup.returnToken(mfRequest,mfResponse);
  return new RunnerHolder(mfRequest,mfResponse);
}",0.1461794019933555
36822,"public int getAllItems(){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  return workQueue.size() + executor.getActiveCount();
}","public int getAllItems(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  return workQueue.size() + executor.getActiveCount();
}",0.8963210702341137
36823,"public void setUploadListener(UploadListener uiListener){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  this.uiListener=uiListener;
}","public void setUploadListener(UploadListener uiListener){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  this.uiListener=uiListener;
}",0.9009584664536742
36824,"public void addUploadRequest(UploadItem uploadItem){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (uploadItem == null) {
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
    return;
  }
  if (uploadItem.getFileData() == null || uploadItem.getFileData().getFilePath() == null || uploadItem.getFileData().getFilePath().isEmpty() || uploadItem.getFileData().getFileHash().isEmpty() || uploadItem.getFileData().getFileSize() == 0) {
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
    return;
  }
  if (uploadItem.getUploadAttemptCount() < MAX_UPLOAD_ATTEMPTS) {
    CheckProcess process=new CheckProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
}","public void addUploadRequest(UploadItem uploadItem){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (uploadItem == null) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
    return;
  }
  if (uploadItem.getFileData() == null || uploadItem.getFileData().getFilePath() == null || uploadItem.getFileData().getFilePath().isEmpty() || uploadItem.getFileData().getFileHash().isEmpty() || uploadItem.getFileData().getFileSize() == 0) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
    return;
  }
  if (uploadItem.getUploadAttemptCount() < MAX_UPLOAD_ATTEMPTS) {
    CheckProcess process=new CheckProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
}",0.9124236252545824
36825,"public void clearUploadQueue(){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  boolean isPaused=isPaused();
  if (!isPaused) {
    pause();
  }
  executor.purge();
  if (!isPaused) {
    resume();
  }
}","public void clearUploadQueue(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  boolean isPaused=isPaused();
  if (!isPaused) {
    pause();
  }
  executor.purge();
  if (!isPaused) {
    resume();
  }
}",0.9265033407572384
36826,"protected void notifyUploadListenerCancelled(UploadItem uploadItem){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onCancelled(uploadItem);
  }
}","protected void notifyUploadListenerCancelled(UploadItem uploadItem){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onCancelled(uploadItem);
  }
}",0.9212410501193318
36827,"protected void notifyUploadListenerStarted(UploadItem uploadItem){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onStarted(uploadItem);
  }
}","protected void notifyUploadListenerStarted(UploadItem uploadItem){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onStarted(uploadItem);
  }
}",0.924574209245742
36828,"protected void notifyUploadListenerOnProgressUpdate(UploadItem uploadItem,int chunkNumber,int numChunks){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onProgressUpdate(uploadItem,chunkNumber,numChunks);
  }
}","protected void notifyUploadListenerOnProgressUpdate(UploadItem uploadItem,int chunkNumber,int numChunks){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onProgressUpdate(uploadItem,chunkNumber,numChunks);
  }
}",0.939670932358318
36829,"protected void notifyUploadListenerCompleted(UploadItem uploadItem){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onCompleted(uploadItem);
  }
}","protected void notifyUploadListenerCompleted(UploadItem uploadItem){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onCompleted(uploadItem);
  }
}",0.9260143198090692
36830,"public BlockingQueue<Runnable> getAllWaitingRunnables(){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  return workQueue;
}","public BlockingQueue<Runnable> getAllWaitingRunnables(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  return workQueue;
}",0.8934707903780069
36831,"private void hashNotInAccount(UploadItem uploadItem){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  InstantProcess process=new InstantProcess(mfTokenFarm,this,uploadItem);
  Thread thread=new Thread(process);
  thread.start();
}","private void hashNotInAccount(UploadItem uploadItem){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  InstantProcess process=new InstantProcess(mfTokenFarm,this,uploadItem);
  Thread thread=new Thread(process);
  thread.start();
}",0.9343936381709742
36832,"@Override public void onCancelled(UploadItem uploadItem,ApiResponse apiResponse){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  notifyUploadListenerCancelled(uploadItem);
  if (apiResponse != null && apiResponse.hasError()) {
    addUploadRequest(uploadItem);
  }
}","@Override public void onCancelled(UploadItem uploadItem,ApiResponse apiResponse){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  notifyUploadListenerCancelled(uploadItem);
  if (apiResponse != null && apiResponse.hasError()) {
    addUploadRequest(uploadItem);
  }
}",0.9428076256499134
36833,"public void resume(){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  executor.resume();
}","public void resume(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  executor.resume();
}",0.8609865470852018
36834,"public boolean isPaused(){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  return executor.isPaused();
}","public boolean isPaused(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  return executor.isPaused();
}",0.8764940239043825
36835,"@Override public void onInstantCompleted(UploadItem uploadItem,InstantResponse response){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  notifyUploadListenerCompleted(uploadItem);
}","@Override public void onInstantCompleted(UploadItem uploadItem,InstantResponse response){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  notifyUploadListenerCompleted(uploadItem);
}",0.9238329238329238
36836,"@Override public void onProcessException(UploadItem uploadItem,Exception exception){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"" + exception);
  if (errorTracker != null) {
    errorTracker.e(UploadManagerWorker.class.getCanonicalName(),exception);
  }
  notifyUploadListenerCancelled(uploadItem);
}","@Override public void onProcessException(UploadItem uploadItem,Exception exception){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + exception);
  if (errorTracker != null) {
    errorTracker.logException(UploadManagerWorker.class.getCanonicalName(),exception);
  }
  notifyUploadListenerCancelled(uploadItem);
}",0.8742058449809402
36837,"/** 
 * Pausable interface
 */
public void pause(){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  executor.pause();
}","/** 
 * Pausable interface
 */
public void pause(){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  executor.pause();
}",0.8896797153024911
36838,"@Override public void onLostConnection(UploadItem uploadItem){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  notifyUploadListenerCancelled(uploadItem);
  pause();
  addUploadRequest(uploadItem);
}","@Override public void onLostConnection(UploadItem uploadItem){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  notifyUploadListenerCancelled(uploadItem);
  pause();
  addUploadRequest(uploadItem);
}",0.9248291571753986
36839,"@Override public void onProgressUpdate(UploadItem uploadItem,int chunkNumber,int numChunks){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  notifyUploadListenerOnProgressUpdate(uploadItem,chunkNumber,numChunks);
}","@Override public void onProgressUpdate(UploadItem uploadItem,int chunkNumber,int numChunks){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  notifyUploadListenerOnProgressUpdate(uploadItem,chunkNumber,numChunks);
}",0.929936305732484
36840,"private void hashDoesNotExist(UploadItem uploadItem,CheckResponse checkResponse){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (checkResponse.getResumableUpload().getUnitSize() == 0) {
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
    notifyUploadListenerCancelled(uploadItem);
    return;
  }
  if (checkResponse.getResumableUpload().getNumberOfUnits() == 0) {
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
    notifyUploadListenerCancelled(uploadItem);
    return;
  }
  if (checkResponse.getResumableUpload().areAllUnitsReady() && !uploadItem.getPollUploadKey().isEmpty()) {
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
    PollProcess process=new PollProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
 else {
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
    ResumableProcess process=new ResumableProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
}","private void hashDoesNotExist(UploadItem uploadItem,CheckResponse checkResponse){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (checkResponse.getResumableUpload().getUnitSize() == 0) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
    notifyUploadListenerCancelled(uploadItem);
    return;
  }
  if (checkResponse.getResumableUpload().getNumberOfUnits() == 0) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
    notifyUploadListenerCancelled(uploadItem);
    return;
  }
  if (checkResponse.getResumableUpload().areAllUnitsReady() && !uploadItem.getPollUploadKey().isEmpty()) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
    PollProcess process=new PollProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
 else {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
    ResumableProcess process=new ResumableProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
}",0.8946594806467418
36841,"private void hashExists(UploadItem uploadItem,CheckResponse checkResponse){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (!checkResponse.isInAccount()) {
    hashNotInAccount(uploadItem);
  }
 else {
    hashInAccount(uploadItem,checkResponse);
  }
}","private void hashExists(UploadItem uploadItem,CheckResponse checkResponse){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (!checkResponse.isInAccount()) {
    hashNotInAccount(uploadItem);
  }
 else {
    hashInAccount(uploadItem,checkResponse);
  }
}",0.9405405405405406
36842,"@Override public void onResumableCompleted(UploadItem uploadItem,ResumableResponse response){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (response != null && response.getResumableUpload().areAllUnitsReady() && !response.getDoUpload().getPollUploadKey().isEmpty()) {
    PollProcess process=new PollProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
 else {
    CheckProcess process=new CheckProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
}","@Override public void onResumableCompleted(UploadItem uploadItem,ResumableResponse response){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (response != null && response.getResumableUpload().areAllUnitsReady() && !response.getDoUpload().getPollUploadKey().isEmpty()) {
    PollProcess process=new PollProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
 else {
    CheckProcess process=new CheckProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
}",0.9583736689254598
36843,"private void hashInAccount(UploadItem uploadItem,CheckResponse checkResponse){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  boolean inFolder=checkResponse.isInFolder();
  InstantProcess process=new InstantProcess(mfTokenFarm,this,uploadItem);
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"" + uploadItem.getUploadOptions().getActionOnInAccount().toString());
switch (uploadItem.getUploadOptions().getActionOnInAccount()) {
case UPLOAD_ALWAYS:
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  executor.execute(process);
break;
case UPLOAD_IF_NOT_IN_FOLDER:
MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
if (!inFolder) {
MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
executor.execute(process);
}
 else {
MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
notifyUploadListenerCompleted(uploadItem);
}
break;
case DO_NOT_UPLOAD:
default :
MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
notifyUploadListenerCompleted(uploadItem);
break;
}
}","private void hashInAccount(UploadItem uploadItem,CheckResponse checkResponse){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  boolean inFolder=checkResponse.isInFolder();
  InstantProcess process=new InstantProcess(mfTokenFarm,this,uploadItem);
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + uploadItem.getUploadOptions().getActionOnInAccount().toString());
switch (uploadItem.getUploadOptions().getActionOnInAccount()) {
case UPLOAD_ALWAYS:
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  executor.execute(process);
break;
case UPLOAD_IF_NOT_IN_FOLDER:
MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
if (!inFolder) {
MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
executor.execute(process);
}
 else {
MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
notifyUploadListenerCompleted(uploadItem);
}
break;
case DO_NOT_UPLOAD:
default :
MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
notifyUploadListenerCompleted(uploadItem);
break;
}
}",0.859542697153523
36844,"@Override public void onCheckCompleted(UploadItem uploadItem,CheckResponse checkResponse){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  if (uploadItem.getUploadAttemptCount() > MAX_UPLOAD_ATTEMPTS || uploadItem.isCancelled()) {
    notifyUploadListenerCancelled(uploadItem);
    return;
  }
  if (checkResponse.getStorageLimitExceeded()) {
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
    storageLimitExceeded(uploadItem);
  }
 else   if (checkResponse.getResumableUpload().areAllUnitsReady() && !uploadItem.getPollUploadKey().isEmpty()) {
    PollProcess process=new PollProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
 else {
    if (checkResponse.doesHashExists()) {
      hashExists(uploadItem,checkResponse);
    }
 else {
      hashDoesNotExist(uploadItem,checkResponse);
    }
  }
}","@Override public void onCheckCompleted(UploadItem uploadItem,CheckResponse checkResponse){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  if (uploadItem.getUploadAttemptCount() > MAX_UPLOAD_ATTEMPTS || uploadItem.isCancelled()) {
    notifyUploadListenerCancelled(uploadItem);
    return;
  }
  if (checkResponse.getStorageLimitExceeded()) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
    storageLimitExceeded(uploadItem);
  }
 else   if (checkResponse.getResumableUpload().areAllUnitsReady() && !uploadItem.getPollUploadKey().isEmpty()) {
    PollProcess process=new PollProcess(mfTokenFarm,this,uploadItem);
    executor.execute(process);
  }
 else {
    if (checkResponse.doesHashExists()) {
      hashExists(uploadItem,checkResponse);
    }
 else {
      hashDoesNotExist(uploadItem,checkResponse);
    }
  }
}",0.9501738122827348
36845,"private void storageLimitExceeded(UploadItem uploadItem){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  notifyUploadListenerCancelled(uploadItem);
}","private void storageLimitExceeded(UploadItem uploadItem){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  notifyUploadListenerCancelled(uploadItem);
}",0.9096209912536444
36846,"@Override public void onStartedUploadProcess(UploadItem uploadItem){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  notifyUploadListenerStarted(uploadItem);
}","@Override public void onStartedUploadProcess(UploadItem uploadItem){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  notifyUploadListenerStarted(uploadItem);
}",0.9141274238227148
36847,"@Override public void onPollCompleted(UploadItem uploadItem,PollResponse pollResponse){
  MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"");
  PollResponse.DoUpload doUpload=pollResponse.getDoUpload();
  PollResponse.Status pollStatusCode=doUpload.getStatusCode();
  PollResponse.Result pollResultCode=doUpload.getResultCode();
  PollResponse.FileError pollFileErrorCode=doUpload.getFileErrorCode();
  if (pollStatusCode != PollResponse.Status.NO_MORE_REQUESTS_FOR_THIS_KEY && pollResultCode == PollResponse.Result.SUCCESS && pollFileErrorCode == PollResponse.FileError.NO_ERROR) {
    MFConfiguration.getErrorTracker().i(TAG,""String_Node_Str"" + pollResponse.getDoUpload().getStatusCode().toString() + ""String_Node_Str"");
    notifyUploadListenerCancelled(uploadItem);
    addUploadRequest(uploadItem);
  }
 else {
    notifyUploadListenerCompleted(uploadItem);
  }
}","@Override public void onPollCompleted(UploadItem uploadItem,PollResponse pollResponse){
  MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"");
  PollResponse.DoUpload doUpload=pollResponse.getDoUpload();
  PollResponse.Status pollStatusCode=doUpload.getStatusCode();
  PollResponse.Result pollResultCode=doUpload.getResultCode();
  PollResponse.FileError pollFileErrorCode=doUpload.getFileErrorCode();
  if (pollStatusCode != PollResponse.Status.NO_MORE_REQUESTS_FOR_THIS_KEY && pollResultCode == PollResponse.Result.SUCCESS && pollFileErrorCode == PollResponse.FileError.NO_ERROR) {
    MFConfiguration.getStaticMFLogger().logMessage(TAG,""String_Node_Str"" + pollResponse.getDoUpload().getStatusCode().toString() + ""String_Node_Str"");
    notifyUploadListenerCancelled(uploadItem);
    addUploadRequest(uploadItem);
  }
 else {
    notifyUploadListenerCompleted(uploadItem);
  }
}",0.9537767756482526
36848,"public void sendHttpsPostRequest(HttpRequestCallback callback,HttpProcessor httpPreProcessor,HttpProcessor httpPostProcessor,ApiRequestObject apiRequestObject){
  HttpPostRequestRunnable httpsPostRequestRunnable=new HttpPostRequestRunnable(callback,httpPreProcessor,httpPostProcessor,apiRequestObject,this);
  executor.execute(httpsPostRequestRunnable);
}","public void sendHttpsPostRequest(HttpRequestCallback callback,HttpProcessor httpPreProcessor,HttpProcessor httpPostProcessor,ApiRequestObject apiRequestObject){
  logger.info(""String_Node_Str"");
  HttpPostRequestRunnable httpsPostRequestRunnable=new HttpPostRequestRunnable(callback,httpPreProcessor,httpPostProcessor,apiRequestObject,this);
  executor.execute(httpsPostRequestRunnable);
}",0.9543010752688172
36849,"public void sendHttpsGetRequest(HttpRequestCallback callback,HttpProcessor httpPreProcessor,HttpProcessor httpPostProcessor,ApiRequestObject apiRequestObject){
  HttpsGetRequestRunnable httpsGetRequestRunnable=new HttpsGetRequestRunnable(callback,httpPreProcessor,httpPostProcessor,apiRequestObject,this);
  executor.execute(httpsGetRequestRunnable);
}","public void sendHttpsGetRequest(HttpRequestCallback callback,HttpProcessor httpPreProcessor,HttpProcessor httpPostProcessor,ApiRequestObject apiRequestObject){
  logger.info(""String_Node_Str"");
  HttpsGetRequestRunnable httpsGetRequestRunnable=new HttpsGetRequestRunnable(callback,httpPreProcessor,httpPostProcessor,apiRequestObject,this);
  executor.execute(httpsGetRequestRunnable);
}",0.9539295392953928
36850,"@Override public final void run(){
  if (callback != null) {
    callback.httpRequestStarted(apiRequestObject);
  }
  connectionTimeout=httpPeriProcessor.getConnectionTimeout();
  readTimeout=httpPeriProcessor.getReadTimeout();
  doRequest();
  if (httpPreProcessor != null) {
    httpPreProcessor.processApiRequestObject(apiRequestObject);
  }
  sendApiErrorIfExists();
  if (httpPostProcessor != null) {
    httpPostProcessor.processApiRequestObject(apiRequestObject);
  }
  if (callback != null) {
    callback.httpRequestFinished(apiRequestObject);
  }
}","@Override public final void run(){
  notifyHttpRequestStarted();
  setTimeouts();
  doPreProcess();
  doRequest();
  sendApiErrorIfExists();
  doPostProcess();
  notifyHttpRequestFinished();
}",0.4506666666666666
36851,"private String getViewLink(){
  return view;
}","public String getViewLink(){
  return view;
}",0.9010989010989012
36852,"private String getNormalDownloadLink(){
  return normal_download;
}","public String getNormalDownloadLink(){
  return normal_download;
}",0.9323308270676692
36853,"public List<FileInfo> getFileInfos(){
  if (file_infos == null) {
    file_infos=new LinkedList<FileInfo>();
  }
  return file_infos;
}","public List<FileInfos> getFileInfos(){
  if (file_infos == null) {
    file_infos=new LinkedList<FileInfos>();
  }
  return file_infos;
}",0.9926470588235294
36854,"public List<Links> getLinks(){
  return links;
}","public Links getLinks(){
  return links;
}",0.9333333333333332
36855,"public List<FileInfos> getFileInfos(){
  if (file_infos == null) {
    file_infos=new LinkedList<FileInfos>();
  }
  return file_infos;
}","public List<FileInfo> getFileInfos(){
  if (file_infos == null) {
    file_infos=new LinkedList<FileInfo>();
  }
  return file_infos;
}",0.9926470588235294
36856,"@Override public void borrowUploadActionToken(ApiRequestObject apiRequestObject){
  System.out.println(TAG + ""String_Node_Str"");
  borrowUploadTokenLock.lock();
  if (uploadActionToken == null || uploadActionToken.isExpired()) {
    getNewImageActionToken();
  }
  try {
    while (uploadActionToken == null || uploadActionToken.isExpired() || uploadActionToken.getTokenString() == null) {
      uploadTokenNotExpired.await(45,TimeUnit.SECONDS);
    }
  }
 catch (  InterruptedException e) {
    apiRequestObject.addExceptionDuringRequest(e);
  }
 finally {
    borrowUploadTokenLock.unlock();
  }
  apiRequestObject.setActionToken(imageActionToken);
}","@Override public void borrowUploadActionToken(ApiRequestObject apiRequestObject){
  System.out.println(TAG + ""String_Node_Str"");
  borrowUploadTokenLock.lock();
  if (uploadActionToken == null || uploadActionToken.isExpired()) {
    getNewImageActionToken();
  }
  try {
    while (uploadActionToken == null || uploadActionToken.isExpired() || uploadActionToken.getTokenString() == null) {
      uploadTokenNotExpired.await(45,TimeUnit.SECONDS);
    }
  }
 catch (  InterruptedException e) {
    apiRequestObject.addExceptionDuringRequest(e);
  }
 finally {
    borrowUploadTokenLock.unlock();
  }
  apiRequestObject.setActionToken(uploadActionToken);
}",0.9915708812260536
36857,"/** 
 * creates an upload chunk array of bytes based on a position in a file.
 */
private byte[] createUploadChunk(long unitSize,int chunkNumber,BufferedInputStream fileStream) throws IOException {
  logger.info(""String_Node_Str"");
  byte[] readBytes=new byte[(int)unitSize];
  logger.info(""String_Node_Str"" + readBytes.length);
  int offset=(int)(unitSize * chunkNumber);
  int skipLength=offset;
  logger.info(""String_Node_Str"" + offset);
  logger.info(""String_Node_Str"" + unitSize);
  logger.info(""String_Node_Str"");
  fileStream.skip(skipLength);
  logger.info(""String_Node_Str"" + fileStream.available());
  int readSize=fileStream.read(readBytes,0,(int)unitSize);
  logger.info(""String_Node_Str"" + readSize);
  if (readSize != unitSize) {
    logger.info(""String_Node_Str"");
    byte[] temp=new byte[readSize];
    System.arraycopy(readBytes,0,temp,0,readSize);
    readBytes=temp;
  }
  StringBuilder sb=new StringBuilder();
  for (  Byte b : readBytes) {
    sb.append(b.toString());
  }
  logger.info(""String_Node_Str"" + sb.toString());
  return readBytes;
}","/** 
 * creates an upload chunk array of bytes based on a position in a file.
 */
private byte[] createUploadChunk(long unitSize,int chunkNumber,BufferedInputStream fileStream) throws IOException {
  logger.info(""String_Node_Str"");
  byte[] readBytes=new byte[(int)unitSize];
  logger.info(""String_Node_Str"" + readBytes.length);
  int offset=(int)(unitSize * chunkNumber);
  int skipLength=offset;
  logger.info(""String_Node_Str"" + offset);
  logger.info(""String_Node_Str"" + unitSize);
  logger.info(""String_Node_Str"" + skipLength + ""String_Node_Str"");
  fileStream.skip(skipLength);
  logger.info(""String_Node_Str"" + fileStream.available());
  int readSize=fileStream.read(readBytes,0,(int)unitSize);
  logger.info(""String_Node_Str"" + readSize);
  if (readSize != unitSize) {
    logger.info(""String_Node_Str"");
    byte[] temp=new byte[readSize];
    System.arraycopy(readBytes,0,temp,0,readSize);
    readBytes=temp;
  }
  StringBuilder sb=new StringBuilder();
  for (  Byte b : readBytes) {
    sb.append(b.toString());
  }
  logger.info(""String_Node_Str"" + sb.toString());
  return readBytes;
}",0.984757505773672
36858,"/** 
 * Transform a string into a JsonElement.  All resposne strings returned from the web api are wrapped in response json element. This method strips the wrapper element, and converts the remaining element into a JsonElement via GSON.
 * @param response  A response string from a web API call.
 * @return  The JsonElement created from the response string.
 */
public static JsonElement getResponseElement(String response){
  if (response.length() == 0 || response.equalsIgnoreCase(""String_Node_Str"") || response == null) {
    response=FAIL_RES;
  }
  JsonElement returnJson=new JsonObject();
  JsonParser parser=new JsonParser();
  JsonElement rootElement=parser.parse(response);
  if (rootElement.isJsonObject()) {
    JsonElement jsonResult=rootElement.getAsJsonObject().get(""String_Node_Str"");
    if (jsonResult.isJsonObject()) {
      returnJson=jsonResult.getAsJsonObject();
    }
  }
  return returnJson;
}","/** 
 * Transform a string into a JsonElement.  All resposne strings returned from the web api are wrapped in response json element. This method strips the wrapper element, and converts the remaining element into a JsonElement via GSON.
 * @param response  A response string from a web API call.
 * @return  The JsonElement created from the response string.
 */
public static JsonElement getResponseElement(String response){
  if (response.length() == 0 || response.isEmpty() || response == null) {
    response=FAIL_RES;
  }
  JsonElement returnJson=new JsonObject();
  JsonParser parser=new JsonParser();
  JsonElement rootElement=parser.parse(response);
  if (rootElement.isJsonObject()) {
    JsonElement jsonResult=rootElement.getAsJsonObject().get(""String_Node_Str"");
    if (jsonResult.isJsonObject()) {
      returnJson=jsonResult.getAsJsonObject();
    }
  }
  return returnJson;
}",0.9767441860465116
36859,"/** 
 * converts a String received from JSON format into a response String.
 * @param response - the response received in JSON format
 * @return the response received which can then be parsed into a specific format as per Gson.fromJson()
 */
public static String getResponseString(String response){
  if (response.length() == 0 || response.equalsIgnoreCase(""String_Node_Str"") || response == null) {
    response=FAIL_RES;
  }
  JsonParser parser=new JsonParser();
  JsonElement element=parser.parse(response);
  if (element.isJsonObject()) {
    JsonObject jsonResponse=element.getAsJsonObject().get(""String_Node_Str"").getAsJsonObject();
    return jsonResponse.toString();
  }
 else {
    return FAIL_RES;
  }
}","/** 
 * converts a String received from JSON format into a response String.
 * @param response - the response received in JSON format
 * @return the response received which can then be parsed into a specific format as per Gson.fromJson()
 */
public static String getResponseString(String response){
  if (response.length() == 0 || response.isEmpty() || response == null) {
    response=FAIL_RES;
  }
  JsonParser parser=new JsonParser();
  JsonElement element=parser.parse(response);
  if (element.isJsonObject()) {
    JsonObject jsonResponse=element.getAsJsonObject().get(""String_Node_Str"").getAsJsonObject();
    return jsonResponse.toString();
  }
 else {
    return FAIL_RES;
  }
}",0.9699570815450644
36860,"public int getNumberOfUnits(){
  if (number_of_units == null || number_of_units.equals(""String_Node_Str"")) {
    return 0;
  }
  return Integer.parseInt(number_of_units);
}","public int getNumberOfUnits(){
  if (number_of_units == null || number_of_units.isEmpty()) {
    return 0;
  }
  return Integer.parseInt(number_of_units);
}",0.9146341463414634
36861,"public int getUnitSize(){
  if (unit_size == null || unit_size.equals(""String_Node_Str"")) {
    return 0;
  }
  return Integer.parseInt(unit_size);
}","public int getUnitSize(){
  if (unit_size == null || unit_size.isEmpty()) {
    return 0;
  }
  return Integer.parseInt(unit_size);
}",0.900709219858156
36862,"public int getCount(){
  if (count == null || count.equals(""String_Node_Str"")) {
    return 0;
  }
  return Integer.parseInt(count);
}","public int getCount(){
  if (count == null || count.isEmpty()) {
    return 0;
  }
  return Integer.parseInt(count);
}",0.8888888888888888
36863,"public int getDeviceRevision(){
  if (device_revision == null || device_revision.equals(""String_Node_Str"")) {
    return 0;
  }
  return Integer.parseInt(device_revision);
}","public int getDeviceRevision(){
  if (device_revision == null || device_revision.isEmpty()) {
    return 0;
  }
  return Integer.parseInt(device_revision);
}",0.9151515151515152
36864,"public long getSize(){
  if (size == null || size.equals(""String_Node_Str"")) {
    return 0;
  }
  return Long.parseLong(size);
}","public long getSize(){
  if (size == null || size.isEmpty()) {
    return 0;
  }
  return Long.parseLong(size);
}",0.8842975206611571
36865,"public PollResultCode getResultCode(){
  if (result == null || result.equals(""String_Node_Str"")) {
    result=""String_Node_Str"";
  }
  return PollResultCode.fromInt(Integer.parseInt(result));
}","public PollResultCode getResultCode(){
  if (result == null || result.isEmpty()) {
    result=""String_Node_Str"";
  }
  return PollResultCode.fromInt(Integer.parseInt(result));
}",0.9243243243243244
36866,"public PollStatusCode getStatusCode(){
  if (status == null || status.equals(""String_Node_Str"")) {
    return PollStatusCode.fromInt(0);
  }
  return PollStatusCode.fromInt(Integer.parseInt(status));
}","public PollStatusCode getStatusCode(){
  if (status == null || status.isEmpty()) {
    return PollStatusCode.fromInt(0);
  }
  return PollStatusCode.fromInt(Integer.parseInt(status));
}",0.927461139896373
36867,"public PollFileErrorCode getFileErrorCode(){
  if (fileerror == null || fileerror.equals(""String_Node_Str"")) {
    fileerror=""String_Node_Str"";
  }
  return PollFileErrorCode.fromInt(Integer.parseInt(fileerror));
}","public PollFileErrorCode getFileErrorCode(){
  if (fileerror == null || fileerror.isEmpty()) {
    fileerror=""String_Node_Str"";
  }
  return PollFileErrorCode.fromInt(Integer.parseInt(fileerror));
}",0.9320388349514565
36868,"@Override public void onPollCompleted(UploadItem uploadItem,PollResponse response){
  logger.info(""String_Node_Str"");
  if (response.getDoUpload().getStatusCode() != PollStatusCode.NO_MORE_REQUESTS_FOR_THIS_KEY) {
    addUploadRequest(uploadItem);
  }
 else {
    notifyListenersCompleted(uploadItem);
  }
}","@Override public void onPollCompleted(UploadItem uploadItem,PollResponse response){
  logger.info(""String_Node_Str"");
  if (response.getDoUpload().getStatusCode() != PollStatusCode.NO_MORE_REQUESTS_FOR_THIS_KEY) {
    logger.info(""String_Node_Str"" + response.getDoUpload().getStatusCode().toString() + ""String_Node_Str"");
    addUploadRequest(uploadItem);
  }
 else {
    notifyListenersCompleted(uploadItem);
  }
}",0.850415512465374
36869,"private void notifyListenersStarted(UploadItem uploadItem){
  logger.info(""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onCompleted(uploadItem);
  }
  if (dbListener != null) {
    dbListener.onCompleted(uploadItem);
  }
}","private void notifyListenersStarted(UploadItem uploadItem){
  logger.info(""String_Node_Str"");
  if (uiListener != null) {
    uiListener.onStarted(uploadItem);
  }
  if (dbListener != null) {
    dbListener.onStarted(uploadItem);
  }
}",0.9578059071729956
36870,"/** 
 * adds an UploadItem to the backlog queue. If the UploadItem already exists in the backlog queue then we do not add the item.
 * @param uploadItem The UploadItem to add to the backlog queue.
 */
public void addUploadRequest(UploadItem uploadItem){
  logger.info(""String_Node_Str"");
  if (uploadItem == null || uploadItem.getFileData() == null || uploadItem.getFileData().getFileHash() == null || uploadItem.getFileData().getFileHash().isEmpty() || uploadItem.getFileData().getFilePath() == null || uploadItem.getFileData().getFilePath().isEmpty() || uploadItem.getFileData().getFileSize() == 0) {
    logger.info(""String_Node_Str"");
    return;
  }
  CheckProcess process=new CheckProcess(sessionManager,this,uploadItem);
  executor.execute(process);
}","/** 
 * adds an UploadItem to the backlog queue. If the UploadItem already exists in the backlog queue then we do not add the item.
 * @param uploadItem The UploadItem to add to the backlog queue.
 */
public void addUploadRequest(UploadItem uploadItem){
  logger.info(""String_Node_Str"");
  if (uploadItem == null || uploadItem.getFileData() == null || uploadItem.getFileData().getFilePath() == null || uploadItem.getFileData().getFilePath().isEmpty()) {
    logger.info(""String_Node_Str"");
    return;
  }
  CheckProcess process=new CheckProcess(sessionManager,this,uploadItem);
  executor.execute(process);
}",0.8822238478419897
36871,"@Override public void run(){
  logger.info(""String_Node_Str"");
  check();
}","@Override public void run(){
  logger.info(""String_Node_Str"");
  uploadItem.getFileData().setFileSize();
  uploadItem.getFileData().setFileHash();
  check();
}",0.6410256410256411
36872,"/** 
 * lets listeners know that this process has been cancelled for this item. manager is informed of lost connection.
 */
private void notifyManagerLostConnection(){
  if (uploadManager != null) {
    uploadManager.onLostConnection(uploadItem);
  }
}","/** 
 * lets listeners know that this process has been cancelled for this item. manager is informed of lost connection.
 */
private void notifyManagerLostConnection(){
  logger.info(""String_Node_Str"");
  if (uploadManager != null) {
    uploadManager.onLostConnection(uploadItem);
  }
}",0.9368029739776952
36873,"/** 
 * start the poll upload process with a maximum of 2 minutes of polling with the following process: 1. create GET request 2. send GET request 3. get response 4. check response data 5. step 1 again until 2 minutes is up, there is an error, or status code 99 (no more requests for this key)
 */
private void pollUpload(){
  HashMap<String,String> keyValue=generateGetParameters();
  String request=sessionManager.getDomain() + getQueryString(POLL_UPLOAD_URI,keyValue);
  int pollCount=0;
  PollResponse response;
  do {
    pollCount++;
    String jsonResponse;
    try {
      jsonResponse=sessionManager.getHttpInterface().sendGetRequest(request);
    }
 catch (    IOException e) {
      notifyListenersException(uploadItem,e);
      return;
    }
    if (jsonResponse.isEmpty()) {
      notifyManagerLostConnection();
      return;
    }
    Gson gson=new Gson();
    response=gson.fromJson(getResponseString(jsonResponse),PollResponse.class);
switch (response.getErrorCode()) {
case NO_ERROR:
      if (response.getDoUpload().getResultCode() != PollResultCode.SUCCESS) {
        notifyManagerCancelled(response);
        return;
      }
    if (response.getDoUpload().getFileErrorCode() != PollFileErrorCode.NO_ERROR) {
      notifyManagerCancelled(response);
      return;
    }
  if (response.getDoUpload().getStatusCode() == PollStatusCode.NO_MORE_REQUESTS_FOR_THIS_KEY) {
    notifyManagerCompleted(response);
    return;
  }
break;
default :
notifyManagerCancelled(response);
return;
}
try {
Thread.sleep(TIME_BETWEEN_POLLS);
}
 catch (InterruptedException e) {
logger.error(""String_Node_Str"" + e);
Thread.currentThread().interrupt();
}
}
 while (pollCount < MAX_POLLS);
notifyManagerCompleted(response);
}","/** 
 * start the poll upload process with a maximum of 2 minutes of polling with the following process: 1. create GET request 2. send GET request 3. get response 4. check response data 5. step 1 again until 2 minutes is up, there is an error, or status code 99 (no more requests for this key)
 */
private void pollUpload(){
  HashMap<String,String> keyValue=generateGetParameters();
  String request=sessionManager.getDomain() + getQueryString(POLL_UPLOAD_URI,keyValue);
  int pollCount=0;
  PollResponse response;
  do {
    pollCount++;
    String jsonResponse;
    try {
      jsonResponse=sessionManager.getHttpInterface().sendGetRequest(request);
    }
 catch (    IOException e) {
      notifyListenersException(uploadItem,e);
      return;
    }
    if (jsonResponse.isEmpty()) {
      notifyManagerLostConnection();
      return;
    }
    Gson gson=new Gson();
    response=gson.fromJson(getResponseString(jsonResponse),PollResponse.class);
    logger.info(""String_Node_Str"" + response.getErrorCode());
switch (response.getErrorCode()) {
case NO_ERROR:
      if (response.getDoUpload().getResultCode() != PollResultCode.SUCCESS) {
        logger.info(""String_Node_Str"" + response.getDoUpload().getResultCode().toString() + ""String_Node_Str"");
        notifyManagerCancelled(response);
        return;
      }
    if (response.getDoUpload().getFileErrorCode() != PollFileErrorCode.NO_ERROR) {
      logger.info(""String_Node_Str"" + response.getDoUpload().getFileErrorCode().toString() + ""String_Node_Str"");
      logger.info(""String_Node_Str"" + uploadItem.getFileData().getFilePath());
      logger.info(""String_Node_Str"" + uploadItem.getFileData().getFileHash());
      logger.info(""String_Node_Str"" + uploadItem.getFileData().getFileSize());
      notifyManagerCancelled(response);
      return;
    }
  if (response.getDoUpload().getStatusCode() == PollStatusCode.NO_MORE_REQUESTS_FOR_THIS_KEY) {
    logger.info(""String_Node_Str"" + response.getDoUpload().getStatusCode().toString() + ""String_Node_Str"");
    notifyManagerCompleted(response);
    return;
  }
break;
default :
notifyManagerCancelled(response);
return;
}
try {
Thread.sleep(TIME_BETWEEN_POLLS);
}
 catch (InterruptedException e) {
logger.error(""String_Node_Str"" + e);
notifyManagerCompleted(response);
Thread.currentThread().interrupt();
}
}
 while (pollCount < MAX_POLLS);
notifyManagerCompleted(response);
}",0.8377192982456141
36874,"public void notifyListenersException(UploadItem uploadItem,Exception exception){
  if (uploadManager != null) {
    uploadManager.onProcessException(uploadItem,exception);
  }
}","public void notifyListenersException(UploadItem uploadItem,Exception exception){
  logger.info(""String_Node_Str"");
  if (uploadManager != null) {
    uploadManager.onProcessException(uploadItem,exception);
  }
}",0.9123711340206184
36875,"/** 
 * notifies the upload manager that the process has been cancelled and then notifies other listeners.
 * @param response - poll response.
 */
private void notifyManagerCancelled(PollResponse response){
  if (uploadManager != null) {
    uploadManager.onCancelled(uploadItem,response);
  }
}","/** 
 * notifies the upload manager that the process has been cancelled and then notifies other listeners.
 * @param response - poll response.
 */
private void notifyManagerCancelled(PollResponse response){
  logger.info(""String_Node_Str"");
  if (uploadManager != null) {
    uploadManager.onCancelled(uploadItem,response);
  }
}",0.9455128205128204
36876,"/** 
 * notifies the listeners that this upload has successfully completed.
 * @param response - poll response.
 */
public void notifyManagerCompleted(PollResponse response){
  if (uploadManager != null) {
    uploadManager.onPollCompleted(uploadItem,response);
  }
}","/** 
 * notifies the listeners that this upload has successfully completed.
 * @param response - poll response.
 */
public void notifyManagerCompleted(PollResponse response){
  logger.info(""String_Node_Str"");
  if (uploadManager != null) {
    uploadManager.onPollCompleted(uploadItem,response);
  }
}",0.9401408450704224
36877,"/** 
 * generates a HashMap of the GET parameters.
 * @return - map of request parameters.
 */
private HashMap<String,String> generateGetParameters(){
  HashMap<String,String> keyValue=new HashMap<String,String>();
  keyValue.put(""String_Node_Str"",uploadItem.getPollUploadKey());
  keyValue.put(""String_Node_Str"",""String_Node_Str"");
  return keyValue;
}","/** 
 * generates a HashMap of the GET parameters.
 * @return - map of request parameters.
 */
private HashMap<String,String> generateGetParameters(){
  logger.info(""String_Node_Str"");
  HashMap<String,String> keyValue=new HashMap<String,String>();
  keyValue.put(""String_Node_Str"",uploadItem.getPollUploadKey());
  keyValue.put(""String_Node_Str"",""String_Node_Str"");
  return keyValue;
}",0.954054054054054
36878,"/** 
 * begin the upload process via the following steps: 1. set the LinkedList of Chunk within the item we want to upload 2. create chunks for all units of the item we want to upload 3. send upload POST request for each chunk
 */
private void resumable(){
  logger.info(""String_Node_Str"");
  int numChunks=uploadItem.getChunkData().getNumberOfUnits();
  int unitSize=uploadItem.getChunkData().getUnitSize();
  long fileSize=uploadItem.getFileData().getFileSize();
  for (int chunkNumber=0; chunkNumber < numChunks; chunkNumber++) {
    logger.info(""String_Node_Str"");
    if (uploadItem.getBitmap().isUploaded(chunkNumber)) {
      logger.info(""String_Node_Str"" + chunkNumber + ""String_Node_Str"");
    }
 else {
      logger.info(""String_Node_Str"" + chunkNumber + ""String_Node_Str"");
      int chunkSize=getChunkSize(chunkNumber,numChunks,fileSize,unitSize);
      FileInputStream fis;
      BufferedInputStream bis;
      String chunkHash;
      String encodedShortFileName;
      byte[] chunkData;
      try {
        fis=new FileInputStream(uploadItem.getFileData().getFilePath());
        bis=new BufferedInputStream(fis);
        chunkData=createUploadChunk(chunkSize,bis);
        chunkHash=getSHA256(chunkData);
        encodedShortFileName=URLEncoder.encode(uploadItem.getFileName(),""String_Node_Str"");
        fis.close();
        bis.close();
      }
 catch (      FileNotFoundException e) {
        this.exceptionHandler(e);
        return;
      }
catch (      NoSuchAlgorithmException e) {
        this.exceptionHandler(e);
        return;
      }
catch (      UnsupportedEncodingException e) {
        this.exceptionHandler(e);
        return;
      }
catch (      IOException e) {
        this.exceptionHandler(e);
        return;
      }
      HashMap<String,String> headers=generatePostHeaders(encodedShortFileName,fileSize,chunkNumber,chunkHash,chunkSize);
      HashMap<String,String> parameters=generateGetParameters();
      String jsonResponse;
      try {
        jsonResponse=sessionManager.getHttpInterface().sendPostRequest(sessionManager.getDomain(),UPLOAD_URI,parameters,headers,chunkData);
      }
 catch (      IOException e) {
        e.printStackTrace();
        notifyManagerException(e);
        return;
      }
      if (jsonResponse.isEmpty()) {
        notifyManagerLostConnection();
        return;
      }
      Gson gson=new Gson();
      ResumableResponse response=gson.fromJson(getResponseString(jsonResponse),ResumableResponse.class);
      if (shouldSetPollUploadKey(response)) {
        uploadItem.setPollUploadKey(response.getDoUpload().getKey());
      }
      if (response.hasError()) {
        notifyManagerCancelled(response);
        return;
      }
      if (response.getDoUpload().getResultCode() != ResumableResultCode.NO_ERROR) {
        if (response.getDoUpload().getResultCode() != ResumableResultCode.SUCCESS_FILE_MOVED_TO_ROOT) {
          notifyManagerCancelled(response);
          return;
        }
      }
    }
    notifyListenersProgressUpdate(chunkNumber,numChunks);
  }
  notifyManagerCompleted();
}","/** 
 * begin the upload process via the following steps: 1. set the LinkedList of Chunk within the item we want to upload 2. create chunks for all units of the item we want to upload 3. send upload POST request for each chunk
 */
private void resumable(){
  logger.info(""String_Node_Str"");
  int numChunks=uploadItem.getChunkData().getNumberOfUnits();
  int unitSize=uploadItem.getChunkData().getUnitSize();
  long fileSize=uploadItem.getFileData().getFileSize();
  logger.info(""String_Node_Str"" + numChunks);
  logger.info(""String_Node_Str"" + unitSize);
  logger.info(""String_Node_Str"" + fileSize);
  for (int chunkNumber=0; chunkNumber < numChunks; chunkNumber++) {
    logger.info(""String_Node_Str"");
    if (uploadItem.getBitmap().isUploaded(chunkNumber)) {
      logger.info(""String_Node_Str"" + chunkNumber + ""String_Node_Str"");
    }
 else {
      logger.info(""String_Node_Str"" + chunkNumber + ""String_Node_Str"");
      int chunkSize=getChunkSize(chunkNumber,numChunks,fileSize,unitSize);
      FileInputStream fis;
      BufferedInputStream bis;
      String chunkHash;
      String encodedShortFileName;
      byte[] chunkData;
      try {
        fis=new FileInputStream(uploadItem.getFileData().getFilePath());
        bis=new BufferedInputStream(fis);
        chunkData=createUploadChunk(unitSize,chunkNumber,bis);
        chunkHash=getSHA256(chunkData);
        encodedShortFileName=URLEncoder.encode(uploadItem.getFileName(),""String_Node_Str"");
        logger.info(""String_Node_Str"" + chunkNumber + ""String_Node_Str""+ chunkHash);
        logger.info(""String_Node_Str"" + chunkNumber + ""String_Node_Str""+ chunkSize);
        logger.info(""String_Node_Str"" + chunkNumber + ""String_Node_Str""+ encodedShortFileName);
        fis.close();
        bis.close();
      }
 catch (      FileNotFoundException e) {
        this.exceptionHandler(e);
        return;
      }
catch (      NoSuchAlgorithmException e) {
        this.exceptionHandler(e);
        return;
      }
catch (      UnsupportedEncodingException e) {
        this.exceptionHandler(e);
        return;
      }
catch (      IOException e) {
        this.exceptionHandler(e);
        return;
      }
      HashMap<String,String> headers=generatePostHeaders(encodedShortFileName,fileSize,chunkNumber,chunkHash,chunkSize);
      HashMap<String,String> parameters=generateGetParameters();
      String jsonResponse;
      try {
        jsonResponse=sessionManager.getHttpInterface().sendPostRequest(sessionManager.getDomain(),UPLOAD_URI,parameters,headers,chunkData);
      }
 catch (      IOException e) {
        e.printStackTrace();
        notifyManagerException(e);
        return;
      }
      if (jsonResponse.isEmpty()) {
        notifyManagerLostConnection();
        return;
      }
      Gson gson=new Gson();
      ResumableResponse response=gson.fromJson(getResponseString(jsonResponse),ResumableResponse.class);
      if (shouldSetPollUploadKey(response)) {
        logger.info(""String_Node_Str"" + response.getDoUpload().getPollUploadKey());
        uploadItem.setPollUploadKey(response.getDoUpload().getPollUploadKey());
      }
      if (response.hasError()) {
        logger.info(""String_Node_Str"" + response.getErrorNumber() + ""String_Node_Str""+ response.getMessage());
        notifyManagerCancelled(response);
        return;
      }
      if (response.getDoUpload().getResultCode() != ResumableResultCode.NO_ERROR) {
        if (response.getDoUpload().getResultCode() != ResumableResultCode.SUCCESS_FILE_MOVED_TO_ROOT) {
          logger.info(""String_Node_Str"" + response.getDoUpload().getResultCode().toString());
          notifyManagerCancelled(response);
          return;
        }
      }
    }
    notifyListenersProgressUpdate(chunkNumber,numChunks);
  }
  notifyManagerCompleted();
}",0.894829097283085
36879,"/** 
 * calculates the chunk size.
 * @param chunkNumber The current chunk number.
 * @param numChunks   The total number of chunks.
 * @param fileSize    The file size in bytes.
 * @param unitSize    The size of a single chunk.
 * @return The actual chunk size.
 */
private int getChunkSize(int chunkNumber,int numChunks,long fileSize,int unitSize){
  logger.info(""String_Node_Str"");
  if (chunkNumber >= numChunks) {
    return 0;
  }
  if (fileSize % unitSize == 0) {
    return unitSize;
  }
 else   if (chunkNumber < numChunks - 1) {
    return unitSize;
  }
 else {
    return (int)(fileSize % unitSize);
  }
}","/** 
 * calculates the chunk size.
 * @param chunkNumber The current chunk number.
 * @param numChunks   The total number of chunks.
 * @param fileSize    The file size in bytes.
 * @param unitSize    The size of a single chunk.
 * @return The actual chunk size.
 */
private int getChunkSize(int chunkNumber,int numChunks,long fileSize,int unitSize){
  logger.info(""String_Node_Str"");
  int chunkSize;
  if (chunkNumber >= numChunks) {
    chunkSize=0;
  }
 else {
    if (fileSize % unitSize == 0) {
      logger.info(""String_Node_Str"" + unitSize);
      chunkSize=unitSize;
    }
 else     if (chunkNumber < numChunks - 1) {
      logger.info(""String_Node_Str"" + unitSize);
      chunkSize=unitSize;
    }
 else {
      logger.info(""String_Node_Str"" + unitSize);
      chunkSize=(int)(fileSize % unitSize);
    }
  }
  logger.info(""String_Node_Str"" + chunkSize);
  return chunkSize;
}",0.7563249001331558
36880,"/** 
 * converts an array of bytes into a SHA256 hash.
 * @param chunkData The chunk to hash.
 * @return The SHA-256 hash of an upload chunk.
 */
private String getSHA256(byte[] chunkData) throws NoSuchAlgorithmException {
  logger.info(""String_Node_Str"");
  MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
  byte[] hashBytes=md.digest(chunkData);
  StringBuilder sb=new StringBuilder();
  for (  byte hashByte : hashBytes) {
    String tempString=Integer.toHexString((hashByte & 0xFF) | 0x100).substring(1,3);
    sb.append(tempString);
  }
  return sb.toString();
}","/** 
 * converts an array of bytes into a SHA256 hash.
 * @param chunkData The chunk to hash.
 * @return The SHA-256 hash of an upload chunk.
 */
private String getSHA256(byte[] chunkData) throws NoSuchAlgorithmException {
  logger.info(""String_Node_Str"");
  MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
  byte[] hashBytes=md.digest(chunkData);
  StringBuilder sb=new StringBuilder();
  for (  byte hashByte : hashBytes) {
    String tempString=Integer.toHexString((hashByte & 0xFF) | 0x100).substring(1,3);
    sb.append(tempString);
  }
  String hash=sb.toString();
  logger.info(""String_Node_Str"" + hash);
  return hash;
}",0.9175510204081632
36881,"/** 
 * creates an upload chunk array of bytes.
 * @param unitSize   The size of the chunk to create.
 * @param fileStream The BufferedInputStream containing the upload file.
 * @return an array of bytes with unitSize size, or 0 size if IOException is caught
 */
private byte[] createUploadChunk(long unitSize,BufferedInputStream fileStream) throws IOException {
  logger.info(""String_Node_Str"");
  byte[] readBytes=new byte[(int)unitSize];
  int readSize;
  readSize=fileStream.read(readBytes,0,(int)unitSize);
  if (readSize != unitSize) {
    byte[] temp=new byte[readSize];
    System.arraycopy(readBytes,0,temp,0,readSize);
    readBytes=temp;
  }
  return readBytes;
}","/** 
 * creates an upload chunk array of bytes based on a position in a file.
 */
private byte[] createUploadChunk(long unitSize,int chunkNumber,BufferedInputStream fileStream) throws IOException {
  logger.info(""String_Node_Str"");
  byte[] readBytes=new byte[(int)unitSize];
  logger.info(""String_Node_Str"" + readBytes.length);
  int offset=(int)(unitSize * chunkNumber);
  int skipLength=offset;
  logger.info(""String_Node_Str"" + offset);
  logger.info(""String_Node_Str"" + unitSize);
  logger.info(""String_Node_Str"" + skipLength + ""String_Node_Str"");
  fileStream.skip(skipLength);
  logger.info(""String_Node_Str"" + fileStream.available());
  int readSize=fileStream.read(readBytes,0,(int)unitSize);
  logger.info(""String_Node_Str"" + readSize);
  if (readSize != unitSize) {
    logger.info(""String_Node_Str"");
    byte[] temp=new byte[readSize];
    System.arraycopy(readBytes,0,temp,0,readSize);
    readBytes=temp;
  }
  StringBuilder sb=new StringBuilder();
  for (  Byte b : readBytes) {
    sb.append(b.toString());
  }
  logger.info(""String_Node_Str"" + sb.toString());
  return readBytes;
}",0.3677382966723068
36882,"/** 
 * go to TestComplete activity
 */
public void gotoComplete(){
  Intent intent=new Intent(this,TestComplete.class);
  startActivity(intent);
}",void gotoComplete();,0.2395209580838323
36883,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
    getWindow().setStatusBarColor(getResources().getColor(R.color.primary_dark));
  }
  final String[] allSavedTests=fileList();
  LinearLayout layout=new LinearLayout(this);
  setContentView(layout);
  layout.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  layout.setOrientation(LinearLayout.VERTICAL);
  layout.setPadding(0,16,16,16);
  TextView textview=new TextView(this);
  textview.setText(""String_Node_Str"");
  textview.setTextColor(Color.parseColor(""String_Node_Str""));
  textview.setTextSize(30);
  textview.setTypeface(null,Typeface.BOLD);
  textview.setGravity(Gravity.RIGHT);
  layout.addView(textview,new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT));
  if (allSavedTests.length < 2) {
    TextView message=new TextView(this);
    message.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));
    message.setTextColor(Color.parseColor(""String_Node_Str""));
    message.setBackgroundColor(Color.parseColor(""String_Node_Str""));
    message.setText(""String_Node_Str"");
    layout.addView(message,new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));
  }
 else {
    ScrollView scrollview=new ScrollView(this);
    scrollview.setLayoutParams(new ScrollView.LayoutParams(ScrollView.LayoutParams.FILL_PARENT,ScrollView.LayoutParams.WRAP_CONTENT));
    LinearLayout container=new LinearLayout(this);
    container.setOrientation(LinearLayout.VERTICAL);
    for (int i=0; i < allSavedTests.length; i++) {
      if (allSavedTests[i].equals(""String_Node_Str"")) {
      }
 else {
        LinearLayout spacer=new LinearLayout(this);
        spacer.setLayoutParams(new LinearLayout.LayoutParams(40,40));
        container.addView(spacer);
        Button b=new Button(this);
        final int number=i;
        b.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT + 50));
        b.setBackgroundResource(R.drawable.button_background);
        b.setPadding(10,20,10,20);
        String[] names=allSavedTests[i].split(""String_Node_Str"");
        String time=""String_Node_Str"";
        for (int j=0; j < 4; j=j + 2) {
          if (j != 2) {
            time+=String.valueOf(names[3].charAt(j)) + String.valueOf(names[3].charAt(j + 1)) + ""String_Node_Str"";
          }
 else {
            time+=String.valueOf(names[3].charAt(j)) + String.valueOf(names[3].charAt(j + 1));
          }
        }
        String name=""String_Node_Str"" + time + ""String_Node_Str""+ names[2].replaceAll(""String_Node_Str"",""String_Node_Str"");
        b.setText(name);
        b.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            gotoTestData(view,allSavedTests[number]);
          }
        }
);
        container.addView(b,new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));
        i++;
      }
    }
    scrollview.addView(container);
    layout.addView(scrollview);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
    getWindow().setStatusBarColor(getResources().getColor(R.color.primary_dark));
  }
  final String[] allSavedTests=fileList();
  LinearLayout layout=new LinearLayout(this);
  setContentView(layout);
  layout.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  layout.setOrientation(LinearLayout.VERTICAL);
  layout.setPadding(0,40,16,16);
  TextView textview=new TextView(this);
  textview.setText(""String_Node_Str"");
  textview.setTextColor(Color.parseColor(""String_Node_Str""));
  textview.setTextSize(30);
  textview.setTypeface(null,Typeface.BOLD);
  textview.setGravity(Gravity.CENTER);
  layout.addView(textview,new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT));
  if (allSavedTests.length < 2) {
    TextView message=new TextView(this);
    message.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));
    message.setTextColor(Color.parseColor(""String_Node_Str""));
    message.setTextSize(20);
    message.setBackgroundColor(Color.parseColor(""String_Node_Str""));
    message.setPadding(40,30,16,0);
    message.setText(""String_Node_Str"");
    layout.addView(message,new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));
  }
 else {
    ScrollView scrollview=new ScrollView(this);
    scrollview.setLayoutParams(new ScrollView.LayoutParams(ScrollView.LayoutParams.FILL_PARENT,ScrollView.LayoutParams.WRAP_CONTENT));
    LinearLayout container=new LinearLayout(this);
    container.setOrientation(LinearLayout.VERTICAL);
    for (int i=0; i < allSavedTests.length; i++) {
      if (allSavedTests[i].equals(""String_Node_Str"")) {
      }
 else {
        LinearLayout spacer=new LinearLayout(this);
        spacer.setLayoutParams(new LinearLayout.LayoutParams(40,40));
        container.addView(spacer);
        Button b=new Button(this);
        final int number=i;
        b.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT + 50));
        b.setBackgroundResource(R.drawable.button_background);
        b.setPadding(10,20,10,20);
        String[] names=allSavedTests[i].split(""String_Node_Str"");
        String time=""String_Node_Str"";
        for (int j=0; j < 4; j=j + 2) {
          if (j != 2) {
            time+=String.valueOf(names[3].charAt(j)) + String.valueOf(names[3].charAt(j + 1)) + ""String_Node_Str"";
          }
 else {
            time+=String.valueOf(names[3].charAt(j)) + String.valueOf(names[3].charAt(j + 1));
          }
        }
        String name=""String_Node_Str"" + time + ""String_Node_Str""+ names[2].replaceAll(""String_Node_Str"",""String_Node_Str"");
        b.setText(name);
        b.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            gotoTestData(view,allSavedTests[number]);
          }
        }
);
        container.addView(b,new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));
        i++;
      }
    }
    scrollview.addView(container);
    layout.addView(scrollview);
  }
}",0.9886330515884582
36884,"public static List<ConnectedComponent> splitStrategy(BigLong2ShortHashMap hm,int k,int b1,int b2,String statFP,Logger logger) throws FileNotFoundException {
  List<ConnectedComponent> ans=new ArrayList<ConnectedComponent>();
  BigLongHashSet processedKmers=new BigLongHashSet(hm.capacity());
  PrintWriter statPW=new PrintWriter(statFP);
  statPW.println(""String_Node_Str"");
  for (int freqThreshold=0; ; freqThreshold++) {
    List<ConnectedComponent> components=getComponents(hm,k,freqThreshold,processedKmers);
    if (components.size() == 0) {
      break;
    }
    int added=0;
    for (    ConnectedComponent comp : components) {
      if (comp.size() < b1) {
        banComponent(hm,comp);
      }
 else       if (comp.size() < b2) {
        ans.add(comp);
        added++;
        statPW.println(comp.size() + ""String_Node_Str"" + comp.getWeight()+ ""String_Node_Str""+ freqThreshold);
        banComponent(hm,comp);
      }
    }
    logger.debug(""String_Node_Str"" + freqThreshold + ""String_Node_Str""+ ""String_Node_Str""+ added+ ""String_Node_Str""+ ans.size());
  }
  statPW.close();
  return ans;
}","public static List<ConnectedComponent> splitStrategy(BigLong2ShortHashMap hm,int k,int b1,int b2,String statFP,Logger logger) throws FileNotFoundException {
  List<ConnectedComponent> ans=new ArrayList<ConnectedComponent>();
  BigLongHashSet processedKmers=new BigLongHashSet(hm.capacity());
  PrintWriter statPW=new PrintWriter(statFP);
  statPW.println(""String_Node_Str"");
  for (int freqThreshold=0; ; freqThreshold++) {
    List<ConnectedComponent> components=getComponents(hm,k,freqThreshold,b2,processedKmers);
    if (components.size() == 0) {
      break;
    }
    int added=0;
    for (    ConnectedComponent comp : components) {
      if (comp.size() < b1) {
        banComponent(hm,comp);
      }
 else       if (comp.size() < b2) {
        ans.add(comp);
        added++;
        statPW.println(comp.size() + ""String_Node_Str"" + comp.getWeight()+ ""String_Node_Str""+ freqThreshold);
        banComponent(hm,comp);
      }
    }
    logger.debug(""String_Node_Str"" + freqThreshold + ""String_Node_Str""+ ""String_Node_Str""+ added+ ""String_Node_Str""+ ans.size());
  }
  statPW.close();
  return ans;
}",0.9986431478968792
36885,"private static List<ConnectedComponent> getComponents(BigLong2ShortHashMap hm,int k,int freqThreshold,BigLongHashSet processedKmers){
  List<ConnectedComponent> ans=new ArrayList<ConnectedComponent>();
  processedKmers.reset();
  Iterator<MutableLongShortEntry> it=hm.entryIterator();
  while (it.hasNext()) {
    MutableLongShortEntry entry=it.next();
    long kmer=entry.getKey();
    short value=entry.getValue();
    if (value > freqThreshold && !processedKmers.contains(kmer)) {
      ConnectedComponent comp=getComponent(hm,k,kmer,freqThreshold,processedKmers);
      ans.add(comp);
    }
  }
  return ans;
}","private static List<ConnectedComponent> getComponents(BigLong2ShortHashMap hm,int k,int freqThreshold,int b2,BigLongHashSet processedKmers){
  List<ConnectedComponent> ans=new ArrayList<ConnectedComponent>();
  processedKmers.reset();
  Iterator<MutableLongShortEntry> it=hm.entryIterator();
  while (it.hasNext()) {
    MutableLongShortEntry entry=it.next();
    long kmer=entry.getKey();
    short value=entry.getValue();
    if (value > freqThreshold && !processedKmers.contains(kmer)) {
      ConnectedComponent comp=getComponent(hm,k,kmer,freqThreshold,b2,processedKmers);
      ans.add(comp);
    }
  }
  return ans;
}",0.9919224555735056
36886,"private static ConnectedComponent getComponent(BigLong2ShortHashMap hm,int k,long startKmer,int freqThreshold,BigLongHashSet processedKmers){
  ConnectedComponent ans=new ConnectedComponent();
  long weight=0;
  LongArrayFIFOQueue queue=new LongArrayFIFOQueue();
  queue.enqueue(startKmer);
  processedKmers.add(startKmer);
  ans.add(startKmer);
  weight+=hm.get(startKmer);
  while (queue.size() > 0) {
    long kmer=queue.dequeue();
    for (    long neighbour : KmerOperations.possibleNeighbours(kmer,k)) {
      short value=hm.get(neighbour);
      if (value > freqThreshold && !processedKmers.contains(neighbour)) {
        queue.enqueue(neighbour);
        processedKmers.add(neighbour);
        ans.add(neighbour);
        weight+=value;
      }
    }
  }
  ans.setWeight(weight);
  return ans;
}","private static ConnectedComponent getComponent(BigLong2ShortHashMap hm,int k,long startKmer,int freqThreshold,int b2,BigLongHashSet processedKmers){
  ConnectedComponent ans=new ConnectedComponent();
  long weight=0;
  LongArrayFIFOQueue queue=new LongArrayFIFOQueue();
  queue.enqueue(startKmer);
  processedKmers.add(startKmer);
  ans.add(startKmer);
  weight+=hm.get(startKmer);
  while (queue.size() > 0) {
    long kmer=queue.dequeue();
    for (    long neighbour : KmerOperations.possibleNeighbours(kmer,k)) {
      short value=hm.get(neighbour);
      if (value > freqThreshold && !processedKmers.contains(neighbour)) {
        queue.enqueue(neighbour);
        processedKmers.add(neighbour);
        if (ans.size() < b2) {
          ans.add(neighbour);
          weight+=value;
        }
      }
    }
  }
  ans.setWeight(weight);
  return ans;
}",0.9445114595898672
36887,"@Override protected void runImpl() throws ExecutionFailedException {
  if (maximalBadFrequency.get() != null && bottomCutPercent.get() != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Timer t=new Timer();
  BigLong2ShortHashMap hm=IOUtils.loadKmers(inputFiles.get(),maximalBadFrequency.get(),availableProcessors.get(),logger);
  debug(""String_Node_Str"" + Misc.usedMemoryAsString() + ""String_Node_Str""+ t);
  long totalKmers=0;
  int[] stat=new int[STAT_LEN];
  Iterator<MutableLongShortEntry> it=hm.entryIterator();
  while (it.hasNext()) {
    MutableLongShortEntry entry=it.next();
    int value=entry.getValue();
    totalKmers+=value;
    if (value >= stat.length) {
      value=stat.length - 1;
    }
    ++stat[value];
  }
  try {
    dumpStat(stat,workDir + File.separator + DISTRIBUTION_FILENAME);
  }
 catch (  FileNotFoundException e) {
    throw new ExecutionFailedException(e);
  }
  if (bottomCutPercent.get() != null) {
    long kmersToCut=totalKmers * bottomCutPercent.get() / 100;
    debug(""String_Node_Str"" + NumUtils.groupDigits(kmersToCut));
    long currentKmersCount=0;
    for (int i=0; i < stat.length - 1; i++) {
      if (currentKmersCount >= kmersToCut) {
        maximalBadFrequency.set(i);
        break;
      }
      currentKmersCount+=(long)i * stat[i];
    }
  }
  if (maximalBadFrequency.get() == null) {
    int threshold=1;
    long currentSum=0;
    while (stat[threshold] * (long)threshold > stat[threshold + 1] * (long)(threshold + 1)) {
      currentSum+=stat[threshold];
      if (currentSum * 2 > totalKmers) {
        debug(""String_Node_Str"");
        break;
      }
      threshold++;
    }
    maximalBadFrequency.set(threshold);
  }
  info(""String_Node_Str"" + maximalBadFrequency.get());
  File dir=outputDir.get();
  if (!dir.isDirectory()) {
    dir.mkdir();
  }
  String basename=FileUtils.removeExtension(inputFiles.get()[0].getName(),""String_Node_Str"");
  String fp=dir + File.separator + basename;
  fp+=(inputFiles.get().length > 1 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  File destination=new File(fp);
  outputFilePr.set(destination);
  Deque<Sequence> sequences;
  try {
    sequences=SequencesFinders.thresholdStrategy(hm,availableProcessors.get(),maximalBadFrequency.get(),sequenceLen.get(),k.get());
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return;
  }
  info(NumUtils.groupDigits(sequences.size()) + ""String_Node_Str"");
  debug(""String_Node_Str"" + Misc.usedMemoryWithoutRunningGCAsString());
  try {
    Sequence.printSequences(sequences,destination);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  info(""String_Node_Str"" + destination);
}","@Override protected void runImpl() throws ExecutionFailedException {
  Timer t=new Timer();
  BigLong2ShortHashMap hm=IOUtils.loadKmers(inputFiles.get(),maximalBadFrequency.get(),availableProcessors.get(),logger);
  debug(""String_Node_Str"" + Misc.usedMemoryAsString() + ""String_Node_Str""+ t);
  long totalKmers=0;
  int[] stat=new int[STAT_LEN];
  Iterator<MutableLongShortEntry> it=hm.entryIterator();
  while (it.hasNext()) {
    MutableLongShortEntry entry=it.next();
    int value=entry.getValue();
    totalKmers+=value;
    if (value >= stat.length) {
      value=stat.length - 1;
    }
    ++stat[value];
  }
  try {
    dumpStat(stat,workDir + File.separator + DISTRIBUTION_FILENAME);
  }
 catch (  FileNotFoundException e) {
    throw new ExecutionFailedException(e);
  }
  if (bottomCutPercent.get() != null) {
    info(""String_Node_Str"" + bottomCutPercent.get());
    long kmersToCut=totalKmers * bottomCutPercent.get() / 100;
    debug(""String_Node_Str"" + NumUtils.groupDigits(kmersToCut));
    long currentKmersCount=0;
    for (int i=0; i < stat.length - 1; i++) {
      if (currentKmersCount >= kmersToCut) {
        maximalBadFrequency.set(i);
        break;
      }
      currentKmersCount+=(long)i * stat[i];
    }
  }
  info(""String_Node_Str"" + maximalBadFrequency.get());
  File dir=outputDir.get();
  if (!dir.isDirectory()) {
    dir.mkdir();
  }
  String basename=FileUtils.removeExtension(inputFiles.get()[0].getName(),""String_Node_Str"");
  String fp=dir + File.separator + basename;
  fp+=(inputFiles.get().length > 1 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  File destination=new File(fp);
  outputFilePr.set(destination);
  Deque<Sequence> sequences;
  try {
    sequences=SequencesFinders.thresholdStrategy(hm,availableProcessors.get(),maximalBadFrequency.get(),sequenceLen.get(),k.get());
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return;
  }
  info(NumUtils.groupDigits(sequences.size()) + ""String_Node_Str"");
  debug(""String_Node_Str"" + Misc.usedMemoryWithoutRunningGCAsString());
  try {
    Sequence.printSequences(sequences,destination);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  info(""String_Node_Str"" + destination);
}",0.883926775296721
36888,"private void processSequence(ShortKmer startKmer){
  int value=hm.get(startKmer.toLong());
  StringBuilder sequenceSB=new StringBuilder(startKmer.toString());
  long seqWeight=value, minWeight=value, maxWeight=value;
  byte rightNuc=HashMapOperations.getRightNucleotide(hm,startKmer,freqThreshold);
  if (rightNuc < 0) {
    return;
  }
  ShortKmer kmer=new ShortKmer(startKmer);
  while (true) {
    kmer.shiftRight(rightNuc);
    byte nextRightNuc=HashMapOperations.getRightNucleotide(hm,kmer,freqThreshold);
    if (nextRightNuc < 0 || HashMapOperations.getLeftNucleotide(hm,kmer,freqThreshold) < 0) {
      break;
    }
    sequenceSB.append(DnaTools.toChar(rightNuc));
    value=hm.get(kmer.toLong());
    seqWeight+=value;
    minWeight=Math.min(minWeight,value);
    maxWeight=Math.max(maxWeight,value);
    rightNuc=nextRightNuc;
  }
  if (sequenceSB.length() >= lenThreshold) {
    sequenceList.add(new Sequence(sequenceSB.toString(),seqWeight,minWeight,maxWeight));
  }
}","private void processSequence(ShortKmer startKmer){
  int value=hm.get(startKmer.toLong());
  StringBuilder sequenceSB=new StringBuilder(startKmer.toString());
  long seqWeight=value, minWeight=value, maxWeight=value;
  ShortKmer kmer=new ShortKmer(startKmer);
  while (true) {
    byte rightNuc=HashMapOperations.getRightNucleotide(hm,kmer,freqThreshold);
    if (rightNuc < 0) {
      break;
    }
    kmer.shiftRight(rightNuc);
    byte leftNuc=HashMapOperations.getLeftNucleotide(hm,kmer,freqThreshold);
    if (leftNuc < 0) {
      break;
    }
    sequenceSB.append(DnaTools.toChar(rightNuc));
    value=hm.get(kmer.toLong());
    seqWeight+=value;
    minWeight=Math.min(minWeight,value);
    maxWeight=Math.max(maxWeight,value);
  }
  if (sequenceSB.length() >= lenThreshold) {
    sequenceList.add(new Sequence(sequenceSB.toString(),seqWeight,minWeight,maxWeight));
  }
}",0.710752688172043
36889,"@Override public void run(){
  for (  Long2IntMap.Entry entry : openHM.long2IntEntrySet()) {
    int value=entry.getIntValue();
    if (value <= freqThreshold) {
      continue;
    }
    long key=entry.getLongKey();
    ShortKmer kmer=new ShortKmer(key,k);
    if (HashMapOperations.getRightNucleotide(hm,kmer,freqThreshold) < 0 || HashMapOperations.getLeftNucleotide(hm,kmer,freqThreshold) >= 0) {
      continue;
    }
    processSequence(kmer);
  }
}","@Override public void run(){
  for (  Long2IntMap.Entry entry : openHM.long2IntEntrySet()) {
    int value=entry.getIntValue();
    if (value <= freqThreshold) {
      continue;
    }
    long key=entry.getLongKey();
    ShortKmer kmerF=new ShortKmer(key,k);
    ShortKmer[] kmers=new ShortKmer[]{kmerF,kmerF.rc()};
    for (    ShortKmer kmer : kmers) {
      boolean isLeft=false;
      byte nuc=HashMapOperations.getLeftNucleotide(hm,kmer,freqThreshold);
      if (nuc < 0) {
        isLeft=true;
      }
 else {
        byte rightNuc=kmer.nucAt(k - 1);
        kmer.shiftLeft(nuc);
        if (HashMapOperations.getRightNucleotide(hm,kmer,freqThreshold) < 0) {
          isLeft=true;
        }
        kmer.shiftRight(rightNuc);
      }
      if (isLeft) {
        processSequence(kmer);
      }
    }
  }
}",0.675098814229249
36890,"private void processSequence(ShortKmer startKmer){
  int value=hm.get(startKmer.toLong());
  StringBuilder sequenceSB=new StringBuilder(startKmer.toString());
  long seqWeight=value, minWeight=value, maxWeight=value;
  ShortKmer kmer=new ShortKmer(startKmer);
  while (true) {
    byte rightNuc=HashMapOperations.getRightNucleotide(hm,kmer,freqThreshold);
    if (rightNuc < 0) {
      break;
    }
    kmer.shiftRight(rightNuc);
    byte leftNuc=HashMapOperations.getLeftNucleotide(hm,kmer,freqThreshold);
    if (leftNuc < 0) {
      break;
    }
    sequenceSB.append(DnaTools.toChar(rightNuc));
    value=hm.get(kmer.toLong());
    seqWeight+=value;
    minWeight=Math.min(minWeight,value);
    maxWeight=Math.max(maxWeight,value);
  }
  if (sequenceSB.length() >= lenThreshold) {
    sequenceList.add(new Sequence(sequenceSB.toString(),seqWeight,minWeight,maxWeight));
  }
}","private void processSequence(ShortKmer startKmer){
  int value=hm.get(startKmer.toLong());
  StringBuilder sequenceSB=new StringBuilder(startKmer.toString());
  long seqWeight=value;
  int minWeight=value, maxWeight=value;
  ShortKmer kmer=new ShortKmer(startKmer);
  while (true) {
    byte rightNuc=HashMapOperations.getRightNucleotide(hm,kmer,freqThreshold);
    if (rightNuc < 0) {
      break;
    }
    kmer.shiftRight(rightNuc);
    byte leftNuc=HashMapOperations.getLeftNucleotide(hm,kmer,freqThreshold);
    if (leftNuc < 0) {
      break;
    }
    sequenceSB.append(DnaTools.toChar(rightNuc));
    value=hm.get(kmer.toLong());
    seqWeight+=value;
    minWeight=Math.min(minWeight,value);
    maxWeight=Math.max(maxWeight,value);
  }
  if (sequenceSB.length() >= lenThreshold) {
    sequenceList.add(new Sequence(sequenceSB.toString(),(int)(seqWeight / (sequenceSB.length() - k + 1)),minWeight,maxWeight));
  }
}",0.963948973932335
36891,"public Sequence(String repr,long totalWeight,long minWeight,long maxWeight){
  this.repr=repr;
  this.totalWeight=totalWeight;
  this.minWeight=minWeight;
  this.maxWeight=maxWeight;
}","public Sequence(String repr,int avgWeight,int minWeight,int maxWeight){
  this.repr=repr;
  this.avgWeight=avgWeight;
  this.minWeight=minWeight;
  this.maxWeight=maxWeight;
}",0.9025069637883008
36892,"public int averageWeight(){
  return (int)(totalWeight / length());
}","public int averageWeight(){
  return avgWeight;
}",0.7966101694915254
36893,"@Override protected void runImpl() throws ExecutionFailedException {
  if (maximalBadFrequency.get() != null && bottomCutPercent.get() != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ArrayLong2IntHashMap hm;
  try {
    hm=IOUtils.loadKmers(inputFiles.get(),0,availableProcessors.get());
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return;
  }
  debug(hm.size() + ""String_Node_Str"");
  long totalKmers=0;
  int[] stat=new int[STAT_LEN];
  for (int i=0; i < hm.hm.length; ++i) {
    for (    int value : hm.hm[i].values()) {
      totalKmers+=value;
      if (value >= stat.length) {
        value=stat.length - 1;
      }
      ++stat[value];
    }
  }
  try {
    dumpStat(stat,workDir + File.separator + DISTIBUTION_FILENAME);
  }
 catch (  FileNotFoundException e) {
    throw new ExecutionFailedException(e);
  }
  if (bottomCutPercent.get() != null) {
    long kmersToCut=totalKmers * bottomCutPercent.get() / 100;
    debug(""String_Node_Str"" + kmersToCut);
    long currentKmersCount=0;
    for (int i=0; i < stat.length - 1; i++) {
      if (currentKmersCount >= kmersToCut) {
        maximalBadFrequency.set(i);
        break;
      }
      currentKmersCount+=(long)i * stat[i];
    }
  }
  if (maximalBadFrequency.get() == null) {
    int threshold=1;
    long currentSum=0;
    while (stat[threshold] * (long)threshold > stat[threshold + 1] * (long)(threshold + 1)) {
      currentSum+=stat[threshold];
      if (currentSum * 2 > totalKmers) {
        debug(""String_Node_Str"");
        break;
      }
      threshold++;
    }
    maximalBadFrequency.set(threshold);
  }
  info(""String_Node_Str"" + maximalBadFrequency.get());
  File destination=outputFile.get();
  if (destination == null) {
    File dir=new File(workDir + File.separator + ""String_Node_Str"");
    if (!dir.isDirectory()) {
      dir.mkdir();
    }
    String basename=inputFiles.get()[0].getName().replace(""String_Node_Str"",""String_Node_Str"");
    String fp=dir + File.separator + basename;
    fp+=(inputFiles.get().length > 1 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    destination=new File(fp);
  }
  List<Sequence> sequences;
  try {
    sequences=SequencesFinders.thresholdStrategy(hm,availableProcessors.get(),maximalBadFrequency.get(),sequenceLen.get(),k.get());
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return;
  }
  info(""String_Node_Str"" + sequences.size());
  try {
    Sequence.printSequences(sequences,destination);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  info(""String_Node_Str"" + destination);
}","@Override protected void runImpl() throws ExecutionFailedException {
  if (maximalBadFrequency.get() != null && bottomCutPercent.get() != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ArrayLong2IntHashMap hm;
  try {
    hm=IOUtils.loadKmers(inputFiles.get(),0,availableProcessors.get());
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return;
  }
  debug(hm.size() + ""String_Node_Str"");
  long totalKmers=0;
  int[] stat=new int[STAT_LEN];
  for (int i=0; i < hm.hm.length; ++i) {
    for (    int value : hm.hm[i].values()) {
      totalKmers+=value;
      if (value >= stat.length) {
        value=stat.length - 1;
      }
      ++stat[value];
    }
  }
  try {
    dumpStat(stat,workDir + File.separator + DISTRIBUTION_FILENAME);
  }
 catch (  FileNotFoundException e) {
    throw new ExecutionFailedException(e);
  }
  if (bottomCutPercent.get() != null) {
    long kmersToCut=totalKmers * bottomCutPercent.get() / 100;
    debug(""String_Node_Str"" + kmersToCut);
    long currentKmersCount=0;
    for (int i=0; i < stat.length - 1; i++) {
      if (currentKmersCount >= kmersToCut) {
        maximalBadFrequency.set(i);
        break;
      }
      currentKmersCount+=(long)i * stat[i];
    }
  }
  if (maximalBadFrequency.get() == null) {
    int threshold=1;
    long currentSum=0;
    while (stat[threshold] * (long)threshold > stat[threshold + 1] * (long)(threshold + 1)) {
      currentSum+=stat[threshold];
      if (currentSum * 2 > totalKmers) {
        debug(""String_Node_Str"");
        break;
      }
      threshold++;
    }
    maximalBadFrequency.set(threshold);
  }
  info(""String_Node_Str"" + maximalBadFrequency.get());
  File destination=outputFile.get();
  if (destination == null) {
    File dir=new File(workDir + File.separator + ""String_Node_Str"");
    if (!dir.isDirectory()) {
      dir.mkdir();
    }
    String basename=inputFiles.get()[0].getName().replace(""String_Node_Str"",""String_Node_Str"");
    String fp=dir + File.separator + basename;
    fp+=(inputFiles.get().length > 1 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    destination=new File(fp);
  }
  List<Sequence> sequences;
  try {
    sequences=SequencesFinders.thresholdStrategy(hm,availableProcessors.get(),maximalBadFrequency.get(),sequenceLen.get(),k.get());
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return;
  }
  info(""String_Node_Str"" + sequences.size());
  try {
    Sequence.printSequences(sequences,destination);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  info(""String_Node_Str"" + destination);
}",0.9998092695021934
36894,"public static void printSequences(Iterable<Sequence> sequences,File destination) throws FileNotFoundException {
  PrintWriter pw=new PrintWriter(destination);
  int sequenceId=0;
  for (  Sequence seq : sequences) {
    sequenceId++;
    String seqInfo=String.format(""String_Node_Str"",sequenceId,seq.length(),seq.averageWeight(),seq.minWeight,seq.maxWeight);
    pw.println(seqInfo);
    pw.println(seq);
  }
}","public static void printSequences(Iterable<Sequence> sequences,File destination) throws FileNotFoundException {
  PrintWriter pw=new PrintWriter(destination);
  int sequenceId=0;
  for (  Sequence seq : sequences) {
    sequenceId++;
    String seqInfo=String.format(""String_Node_Str"",sequenceId,seq.length(),seq.averageWeight(),seq.minWeight,seq.maxWeight);
    pw.println(seqInfo);
    pw.println(seq);
  }
  pw.close();
}",0.9832134292565948
36895,"/** 
 * Set the priority of codecs to use.
 */
private void setCodecPrio(){
  try {
    CodecInfoVector codecList=mEndpoint.codecEnum();
    String codecId;
    CodecInfo info;
    Short prio;
    for (int i=1; i < codecList.size(); i++) {
      info=codecList.get(i);
      codecId=info.getCodecId();
      prio=sCodecPrioMapping.get(codecId);
      if (prio != null) {
        mEndpoint.codecSetPriority(codecId,prio);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Set the priority of codecs to use.
 */
private void setCodecPrio(){
  try {
    CodecInfoVector codecList=mEndpoint.codecEnum();
    String codecId;
    CodecInfo info;
    Short prio;
    for (int i=1; i < codecList.size(); i++) {
      info=codecList.get(i);
      codecId=info.getCodecId();
      prio=findCodecPriority(codecId);
      if (prio != null) {
        mEndpoint.codecSetPriority(codecId,prio);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9796747967479674
36896,"@Override protected void onPause(){
  super.onPause();
  mRemoteLogger.d(""String_Node_Str"");
  PowerManager powerManager=(PowerManager)getSystemService(POWER_SERVICE);
  boolean isScreenInteractive;
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    isScreenInteractive=powerManager.isScreenOn();
  }
 else {
    isScreenInteractive=powerManager.isInteractive();
  }
  if (!isScreenInteractive) {
    mRemoteLogger.i(""String_Node_Str"");
    return;
  }
  if (mIncomingCallIsRinging) {
    mNotificationHelper.removeAllNotifications();
    mNotificationId=mNotificationHelper.displayNotificationWithCallActions(mCallerIdToDisplay,mPhoneNumberToDisplay);
    mMediaManager.stopIncomingCallRinger();
    mPausedRinging=true;
  }
  if (!mSipServiceBound && mSipService == null) {
    mBroadcastManager.unregisterReceiver(mCallStatusReceiver);
  }
  unregisterReceiver(mBluetoothButtonReceiver);
  stopService();
}","@Override protected void onPause(){
  super.onPause();
  mRemoteLogger.d(""String_Node_Str"");
  PowerManager powerManager=(PowerManager)getSystemService(POWER_SERVICE);
  boolean isScreenInteractive;
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    isScreenInteractive=powerManager.isScreenOn();
  }
 else {
    isScreenInteractive=powerManager.isInteractive();
  }
  if (!isScreenInteractive) {
    mRemoteLogger.i(""String_Node_Str"");
    return;
  }
  if (mIncomingCallIsRinging) {
    mNotificationHelper.removeAllNotifications();
    mNotificationId=mNotificationHelper.displayNotificationWithCallActions(mCallerIdToDisplay,mPhoneNumberToDisplay);
    mMediaManager.stopIncomingCallRinger();
    mPausedRinging=true;
  }
  if (mSipService != null && mSipService.getCurrentCall() == null) {
    try {
      mBroadcastManager.unregisterReceiver(mCallStatusReceiver);
    }
 catch (    IllegalArgumentException e) {
      mRemoteLogger.w(""String_Node_Str"");
    }
  }
  try {
    unregisterReceiver(mBluetoothButtonReceiver);
  }
 catch (  IllegalArgumentException e) {
    mRemoteLogger.w(""String_Node_Str"");
  }
  stopService();
}",0.8615533043897733
36897,"@Override protected void onDestroy(){
  super.onDestroy();
  mRemoteLogger.d(""String_Node_Str"");
  mNotificationHelper.removeAllNotifications();
  mProximityHelper.stopSensor();
  mMediaManager.deInit();
}","@Override protected void onDestroy(){
  super.onDestroy();
  mRemoteLogger.d(""String_Node_Str"");
  mNotificationHelper.removeAllNotifications();
  mProximityHelper.stopSensor();
  try {
    unregisterReceiver(mBluetoothButtonReceiver);
  }
 catch (  IllegalArgumentException e) {
    mRemoteLogger.w(""String_Node_Str"");
  }
  mMediaManager.deInit();
}",0.737410071942446
36898,"/** 
 * The call has transitioned to another state. We can now visually update the view with extra info or perform required actions.
 * @param newStatus the new interaction state to which we should act.
 * @see SipConstants for the possible states.
 */
private void onCallStatusUpdate(String newStatus){
  mRemoteLogger.d(""String_Node_Str"" + newStatus);
switch (newStatus) {
case CALL_CONNECTED_MESSAGE:
    toggleCallStateButtonVisibility(TYPE_CONNECTED_CALL);
  mStateView.setText(R.string.call_connected);
mCallStartTime=System.currentTimeMillis();
mCallHandler.postDelayed(mCallDurationRunnable,0);
mConnected=true;
mHasConnected=true;
mIncomingCallIsRinging=false;
mProximityHelper.updateWakeLock();
mNotificationHelper.updateNotification(getCallerInfo(),this.getString(R.string.callnotification_active_call),NotificationHelper.mCallNotifyId);
if (mOnTransfer && mSipService.getCurrentCall() != null && mSipService.getFirstCall() != null) {
CallTransferFragment callTransferFragment=(CallTransferFragment)getFragmentManager().findFragmentByTag(TAG_CALL_TRANSFER_FRAGMENT);
callTransferFragment.secondCallIsConnected();
}
mCallDurationView.setVisibility(View.VISIBLE);
break;
case CALL_DISCONNECTED_MESSAGE:
if (!mHasConnected && !mSelfHangup) {
mStateView.setText(R.string.call_unreachable);
sendBroadcast(new Intent(BluetoothMediaButtonReceiver.DECLINE_BTN));
}
 else {
mStateView.setText(R.string.call_ended);
}
mCallHandler.removeCallbacks(mCallDurationRunnable);
mConnected=false;
mIncomingCallIsRinging=false;
mMediaManager.stopIncomingCallRinger();
if (mOnTransfer) {
if (mCallIsTransferred) {
toggleVisibilityCallInfo(false);
Map<String,String> map=new HashMap<>();
map.put(MAP_ORIGINAL_CALLER_ID,mSipService.getFirstCall().getCallerId());
map.put(MAP_ORIGINAL_CALLER_PHONE_NUMBER,mSipService.getFirstCall().getPhoneNumber());
map.put(MAP_TRANSFERRED_PHONE_NUMBER,mTransferredNumber);
swapFragment(TAG_CALL_TRANSFER_COMPLETE_FRAGMENT,map);
mOnTransfer=false;
try {
mSipService.getFirstCall().hangup(true);
}
 catch (Exception e) {
e.printStackTrace();
}
}
 else if (mSipService.getCurrentCall() != null) {
String currentCallIdentifier=mSipService.getCurrentCall().getIdentifier();
String initialCallIdentifier=mSipService.getFirstCall().getIdentifier();
mMediaManager.setCallOnSpeaker(false);
mConnected=true;
toggleVisibilityCallInfo(true);
findViewById(R.id.button_transfer).setVisibility(View.VISIBLE);
swapFragment(TAG_CALL_CONNECTED_FRAGMENT,null);
newStatus=mSipService.getCurrentCall().getCurrentCallState();
if (!currentCallIdentifier.equals(initialCallIdentifier)) {
mCurrentCallId=mSipService.getCurrentCall().getIdentifier();
mCallerIdToDisplay=mSipService.getCurrentCall().getCallerId();
mPhoneNumberToDisplay=mSipService.getCurrentCall().getPhoneNumber();
}
 else {
mCurrentCallId=mSipService.getFirstCall().getIdentifier();
newStatus=mSipService.getFirstCall().getCurrentCallState();
mCallerIdToDisplay=mSipService.getFirstCall().getCallerId();
mPhoneNumberToDisplay=mSipService.getFirstCall().getPhoneNumber();
}
displayCallInfo();
mOnHold=mSipService.getCurrentCall().isOnHold();
mOnTransfer=false;
updateCallButton(R.id.button_transfer,true);
updateCallButton(R.id.button_onhold,true);
updateCallButton(R.id.button_keypad,true);
updateCallButton(R.id.button_microphone,true);
onCallStatusUpdate(mSipService.getCurrentCall().getCurrentCallState());
}
 else {
if (mSipService != null && mSipService.getCurrentCall() == null && mSipService.getFirstCall() == null) {
toggleVisibilityCallInfo(true);
swapFragment(TAG_CALL_CONNECTED_FRAGMENT,null);
displayCallInfo();
mOnTransfer=false;
mOnHold=false;
updateCallButton(R.id.button_transfer,false);
updateCallButton(R.id.button_onhold,false);
updateCallButton(R.id.button_keypad,false);
updateCallButton(R.id.button_microphone,false);
updateCallButton(R.id.button_hangup,false);
onCallStatusUpdate(CALL_DISCONNECTED_MESSAGE);
}
}
}
 else {
mMediaManager.callEnded();
finishWithDelay();
}
onCallStatesUpdateButtons(newStatus);
break;
case CALL_PUT_ON_HOLD_ACTION:
mCallHandler.removeCallbacks(mCallDurationRunnable);
mCallDurationView.setVisibility(View.GONE);
mStateView.setText(R.string.call_on_hold);
mNotificationHelper.updateNotification(getCallerInfo(),this.getString(R.string.callnotification_on_hold),NotificationHelper.mCallNotifyId);
break;
case CALL_UNHOLD_ACTION:
mCallHandler.postDelayed(mCallDurationRunnable,0);
mCallDurationView.setVisibility(View.VISIBLE);
mStateView.setText(R.string.call_connected);
mNotificationHelper.updateNotification(getCallerInfo(),this.getString(R.string.callnotification_active_call),NotificationHelper.mCallNotifyId);
break;
case CALL_RINGING_OUT_MESSAGE:
mStateView.setText(R.string.call_outgoing);
findViewById(R.id.button_speaker).setEnabled(false);
findViewById(R.id.button_microphone).setEnabled(false);
break;
case CALL_RINGING_IN_MESSAGE:
mStateView.setText(R.string.call_incoming);
break;
case SERVICE_STOPPED:
mConnected=false;
mIncomingCallIsRinging=false;
finishWithDelay();
break;
}
}","/** 
 * The call has transitioned to another state. We can now visually update the view with extra info or perform required actions.
 * @param newStatus the new interaction state to which we should act.
 * @see SipConstants for the possible states.
 */
private void onCallStatusUpdate(String newStatus){
  mRemoteLogger.d(""String_Node_Str"" + newStatus);
switch (newStatus) {
case CALL_CONNECTED_MESSAGE:
    toggleCallStateButtonVisibility(TYPE_CONNECTED_CALL);
  mStateView.setText(R.string.call_connected);
mCallStartTime=System.currentTimeMillis();
mCallHandler.postDelayed(mCallDurationRunnable,0);
mConnected=true;
mHasConnected=true;
mIncomingCallIsRinging=false;
mProximityHelper.updateWakeLock();
mNotificationHelper.updateNotification(getCallerInfo(),this.getString(R.string.callnotification_active_call),NotificationHelper.mCallNotifyId);
if (mOnTransfer && mSipService.getCurrentCall() != null && mSipService.getFirstCall() != null) {
CallTransferFragment callTransferFragment=(CallTransferFragment)getFragmentManager().findFragmentByTag(TAG_CALL_TRANSFER_FRAGMENT);
callTransferFragment.secondCallIsConnected();
}
mCallDurationView.setVisibility(View.VISIBLE);
break;
case CALL_DISCONNECTED_MESSAGE:
if (!mHasConnected && !mSelfHangup) {
mStateView.setText(R.string.call_unreachable);
sendBroadcast(new Intent(BluetoothMediaButtonReceiver.DECLINE_BTN));
}
 else {
mStateView.setText(R.string.call_ended);
}
mCallHandler.removeCallbacks(mCallDurationRunnable);
mConnected=false;
mIncomingCallIsRinging=false;
mMediaManager.stopIncomingCallRinger();
if (mOnTransfer) {
if (mCallIsTransferred) {
toggleVisibilityCallInfo(false);
Map<String,String> map=new HashMap<>();
map.put(MAP_ORIGINAL_CALLER_ID,mSipService.getFirstCall().getCallerId());
map.put(MAP_ORIGINAL_CALLER_PHONE_NUMBER,mSipService.getFirstCall().getPhoneNumber());
map.put(MAP_TRANSFERRED_PHONE_NUMBER,mTransferredNumber);
swapFragment(TAG_CALL_TRANSFER_COMPLETE_FRAGMENT,map);
mOnTransfer=false;
try {
mSipService.getFirstCall().hangup(true);
}
 catch (Exception e) {
e.printStackTrace();
}
}
 else if (mSipService.getCurrentCall() != null) {
String currentCallIdentifier=mSipService.getCurrentCall().getIdentifier();
String initialCallIdentifier=mSipService.getFirstCall().getIdentifier();
mMediaManager.setCallOnSpeaker(false);
mConnected=true;
toggleVisibilityCallInfo(true);
findViewById(R.id.button_transfer).setVisibility(View.VISIBLE);
swapFragment(TAG_CALL_CONNECTED_FRAGMENT,null);
newStatus=mSipService.getCurrentCall().getCurrentCallState();
if (!currentCallIdentifier.equals(initialCallIdentifier)) {
mCurrentCallId=mSipService.getCurrentCall().getIdentifier();
mCallerIdToDisplay=mSipService.getCurrentCall().getCallerId();
mPhoneNumberToDisplay=mSipService.getCurrentCall().getPhoneNumber();
}
 else {
mCurrentCallId=mSipService.getFirstCall().getIdentifier();
newStatus=mSipService.getFirstCall().getCurrentCallState();
mCallerIdToDisplay=mSipService.getFirstCall().getCallerId();
mPhoneNumberToDisplay=mSipService.getFirstCall().getPhoneNumber();
}
displayCallInfo();
mOnHold=mSipService.getCurrentCall().isOnHold();
mOnTransfer=false;
updateCallButton(R.id.button_transfer,true);
updateCallButton(R.id.button_onhold,true);
updateCallButton(R.id.button_keypad,true);
updateCallButton(R.id.button_microphone,true);
onCallStatusUpdate(mSipService.getCurrentCall().getCurrentCallState());
}
 else {
if (mSipService != null && mSipService.getCurrentCall() == null && mSipService.getFirstCall() == null) {
toggleVisibilityCallInfo(true);
swapFragment(TAG_CALL_CONNECTED_FRAGMENT,null);
displayCallInfo();
mOnTransfer=false;
mOnHold=false;
updateCallButton(R.id.button_transfer,false);
updateCallButton(R.id.button_onhold,false);
updateCallButton(R.id.button_keypad,false);
updateCallButton(R.id.button_microphone,false);
updateCallButton(R.id.button_hangup,false);
onCallStatusUpdate(CALL_DISCONNECTED_MESSAGE);
}
}
}
 else {
mMediaManager.callEnded();
finishWithDelay();
}
onCallStatesUpdateButtons(newStatus);
break;
case CALL_PUT_ON_HOLD_ACTION:
mOnHold=true;
mCallHandler.removeCallbacks(mCallDurationRunnable);
mCallDurationView.setVisibility(View.GONE);
mStateView.setText(R.string.call_on_hold);
updateCallButton(R.id.button_onhold,true);
mNotificationHelper.updateNotification(getCallerInfo(),this.getString(R.string.callnotification_on_hold),NotificationHelper.mCallNotifyId);
break;
case CALL_UNHOLD_ACTION:
mOnHold=false;
mCallHandler.postDelayed(mCallDurationRunnable,0);
mCallDurationView.setVisibility(View.VISIBLE);
mStateView.setText(R.string.call_connected);
updateCallButton(R.id.button_onhold,true);
mNotificationHelper.updateNotification(getCallerInfo(),this.getString(R.string.callnotification_active_call),NotificationHelper.mCallNotifyId);
break;
case CALL_RINGING_OUT_MESSAGE:
mStateView.setText(R.string.call_outgoing);
findViewById(R.id.button_speaker).setEnabled(false);
findViewById(R.id.button_microphone).setEnabled(false);
break;
case CALL_RINGING_IN_MESSAGE:
mStateView.setText(R.string.call_incoming);
break;
case SERVICE_STOPPED:
mConnected=false;
mIncomingCallIsRinging=false;
finishWithDelay();
break;
}
}",0.9886576585462076
36899,"@Override public void audioLost(boolean lost){
  mRemoteLogger.i(""String_Node_Str"");
  mRemoteLogger.i(""String_Node_Str"" + lost);
  if (lost) {
    if (mConnected) {
      toggleOnHold();
      updateCallButton(R.id.button_onhold,true);
      onCallStatusUpdate(CALL_PUT_ON_HOLD_ACTION);
    }
  }
}","@Override public void audioLost(boolean lost){
  mRemoteLogger.i(""String_Node_Str"");
  mRemoteLogger.i(""String_Node_Str"" + lost);
  if (lost) {
    mRemoteLogger.e(""String_Node_Str"" + mSipService.nativeCallIsRinging());
    if (mConnected && !mSipService.nativeCallIsRinging()) {
      onCallStatusUpdate(CALL_PUT_ON_HOLD_ACTION);
    }
  }
 else {
    if (mConnected && mSipService.getCurrentCall() != null && mSipService.getCurrentCall().isOnHold()) {
      onCallStatusUpdate(CALL_PUT_ON_HOLD_ACTION);
    }
  }
}",0.5595092024539877
36900,"@Override protected void onResume(){
  super.onResume();
  if (mIncomingCallIsRinging && mPausedRinging) {
    mMediaManager.startIncomingCallRinger();
  }
  mPausedRinging=false;
  mRemoteLogger.d(""String_Node_Str"");
  if (!mSipServiceBound && mSipService == null) {
    mRemoteLogger.e(""String_Node_Str"");
    bindService(new Intent(this,SipService.class),mSipServiceConnection,Context.BIND_AUTO_CREATE);
  }
  if (!mOnTransfer && mSipService != null && mSipService.getCurrentCall() != null) {
    if (mSipService.getCurrentCall().isOnHold()) {
      mRemoteLogger.d(""String_Node_Str"");
      if (!mOnHold) {
        mRemoteLogger.i(""String_Node_Str"");
        mOnHold=true;
        updateCallButton(R.id.button_onhold,true);
        onCallStatusUpdate(CALL_PUT_ON_HOLD_ACTION);
      }
 else       if (!findViewById(R.id.button_onhold).isActivated()) {
        mRemoteLogger.i(""String_Node_Str"");
        updateCallButton(R.id.button_onhold,true);
      }
    }
  }
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (!mSipServiceBound) {
        finishWithDelay();
      }
 else       if (mSipService.getCurrentCall() == null) {
        mRemoteLogger.d(""String_Node_Str"");
        onCallStatusUpdate(CALL_DISCONNECTED_MESSAGE);
      }
    }
  }
,500);
}","@Override protected void onResume(){
  super.onResume();
  if (mIncomingCallIsRinging && mPausedRinging) {
    mMediaManager.startIncomingCallRinger();
  }
  mPausedRinging=false;
  mRemoteLogger.d(""String_Node_Str"");
  if (!mSipServiceBound && mSipService == null) {
    mRemoteLogger.i(""String_Node_Str"");
    bindService(new Intent(this,SipService.class),mSipServiceConnection,Context.BIND_AUTO_CREATE);
  }
  if (!mOnTransfer && mSipService != null && mSipService.getCurrentCall() != null) {
    if (mSipService.getCurrentCall().isOnHold()) {
      mRemoteLogger.d(""String_Node_Str"");
      if (!mOnHold) {
        mRemoteLogger.i(""String_Node_Str"");
        mOnHold=true;
        updateCallButton(R.id.button_onhold,true);
        onCallStatusUpdate(CALL_PUT_ON_HOLD_ACTION);
      }
 else       if (!findViewById(R.id.button_onhold).isActivated()) {
        mRemoteLogger.i(""String_Node_Str"");
        updateCallButton(R.id.button_onhold,true);
      }
    }
  }
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (!mSipServiceBound) {
        finishWithDelay();
      }
 else       if (mSipService.getCurrentCall() == null) {
        mRemoteLogger.d(""String_Node_Str"");
        onCallStatusUpdate(CALL_DISCONNECTED_MESSAGE);
      }
    }
  }
,500);
}",0.9992266047950504
36901,"@Override protected void onPause(){
  super.onPause();
  unregisterReceivers();
}","@Override protected void onPause(){
  super.onPause();
  mReachabilityReceiver.stopListening();
}",0.8314606741573034
36902,"@Override protected void onResume(){
  askForPermissions(requestCounter);
  registerReceivers();
  super.onResume();
}","@Override protected void onResume(){
  askForPermissions(requestCounter);
  mReachabilityReceiver.startListening();
  super.onResume();
}",0.8862745098039215
36903,"private void askForPermissions(int requestNr){
switch (requestNr) {
case 0:
    int storagePermissionState=ReadExternalStoragePermission.getPermissionStatus(this,ReadExternalStoragePermission.mPermissionToCheck);
  if (storagePermissionState != ReadExternalStoragePermission.BLOCKED || ReadExternalStoragePermission.firstRequest) {
    if (!ReadExternalStoragePermission.hasPermission(this)) {
      ReadExternalStoragePermission.askForPermission(this);
      requestCounter++;
      return;
    }
  }
case 1:
if (!PhonePermission.hasPermission(this)) {
  PhonePermission.askForPermission(this);
  requestCounter++;
  return;
}
case 2:
if (!ContactsPermission.hasPermission(this)) {
if (mAskForPermission) {
  mAskForPermission=false;
  ContactsPermission.askForPermission(this);
  requestCounter++;
  return;
}
}
}
}","private void askForPermissions(int requestNr){
switch (requestNr) {
case 0:
    int storagePermissionState=ReadExternalStoragePermission.getPermissionStatus(this,ReadExternalStoragePermission.mPermissionToCheck);
  if (storagePermissionState != ReadExternalStoragePermission.BLOCKED || ReadExternalStoragePermission.firstRequest) {
    if (!ReadExternalStoragePermission.hasPermission(this)) {
      ReadExternalStoragePermission.askForPermission(this);
      requestCounter++;
      return;
    }
  }
case 1:
if (!PhonePermission.hasPermission(this)) {
  PhonePermission.askForPermission(this);
  requestCounter++;
  return;
}
case 2:
if (!ContactsPermission.hasPermission(this)) {
if (mAskForPermission) {
  mAskForPermission=false;
  ContactsPermission.askForPermission(this);
  requestCounter++;
}
}
}
}",0.9938423645320196
36904,"/** 
 * Use the deprecated version of the onAttach method for api levels < 23 The old android 4.1.2 API level 16 calls this method. If don't use this function no callback will be set.
 * @param activity Activity the attached activity/
 */
@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mCallback=(CallKeyPadFragmentListener)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
}","/** 
 * Use the deprecated version of the onAttach method for api levels < 23 The old android 4.1.2 API level 16 calls this method. If don't use this function no callback will be set.
 * @param activity Activity the attached activity.
 */
@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mCallback=(CallKeyPadFragmentListener)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
}",0.997983870967742
36905,"@Override public void onAttach(Context context){
  super.onAttach(context);
  try {
    mCallback=(CallTransferFragmentListener)context;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(context.toString() + ""String_Node_Str"");
  }
}","/** 
 * Use the deprecated version of the onAttach method for api levels < 23 The old android 4.1.2 API level 16 calls this method. If don't use this function no callback will be set.
 * @param activity Activity the attached activity/
 */
@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mCallback=(CallTransferFragmentListener)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
}",0.5797872340425532
36906,"@Override public void onAttach(Context context){
  super.onAttach(context);
  if (context instanceof Activity) {
    Activity activity=(Activity)context;
    try {
      mListener=(OnFragmentInteractionListener)activity;
    }
 catch (    ClassCastException e) {
      throw new ClassCastException(activity.toString() + ""String_Node_Str"");
    }
  }
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mListener=(OnFragmentInteractionListener)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
}",0.7594108019639935
36907,"@Override public void onMessageReceived(RemoteMessage remoteMessage){
  super.onMessageReceived(remoteMessage);
  Map<String,String> data=remoteMessage.getData();
  String requestType=data.get(MESSAGE_TYPE);
  if (requestType == null) {
    return;
  }
  if (requestType.equals(CALL_REQUEST_TYPE)) {
    AnalyticsHelper analyticsHelper=new AnalyticsHelper(((AnalyticsApplication)getApplication()).getDefaultTracker());
    ConnectivityHelper connectivityHelper=ConnectivityHelper.get(this);
    if (connectivityHelper.hasNetworkConnection() && connectivityHelper.hasFastData()) {
      String number=data.get(PHONE_NUMBER);
      if (number != null && (number.equalsIgnoreCase(SUPPRESSED) || number.toLowerCase().contains(""String_Node_Str""))) {
        number=getString(R.string.supressed_number);
      }
      startSipService(number,data.get(CALLER_ID) != null ? data.get(CALLER_ID) : ""String_Node_Str"",data.get(RESPONSE_URL) != null ? data.get(RESPONSE_URL) : ""String_Node_Str"",data.get(REQUEST_TOKEN) != null ? data.get(REQUEST_TOKEN) : ""String_Node_Str"",data.get(MESSAGE_START_TIME) != null ? data.get(MESSAGE_START_TIME) : ""String_Node_Str"");
    }
 else {
      String analyticsLabel=connectivityHelper.getAnalyticsLabel();
      analyticsHelper.sendEvent(getString(R.string.analytics_event_category_middleware),getString(R.string.analytics_event_action_middleware_rejected),analyticsLabel);
      replyServer(data.get(RESPONSE_URL) != null ? data.get(RESPONSE_URL) : ""String_Node_Str"",data.get(REQUEST_TOKEN) != null ? data.get(REQUEST_TOKEN) : ""String_Node_Str"",data.get(MESSAGE_START_TIME) != null ? data.get(MESSAGE_START_TIME) : ""String_Node_Str"",false);
    }
  }
 else   if (requestType.equals(MESSAGE_REQUEST_TYPE)) {
  }
}","@Override public void onMessageReceived(RemoteMessage remoteMessage){
  super.onMessageReceived(remoteMessage);
  Map<String,String> data=remoteMessage.getData();
  String requestType=data.get(MESSAGE_TYPE);
  if (requestType == null) {
    return;
  }
  if (requestType.equals(CALL_REQUEST_TYPE)) {
    AnalyticsHelper analyticsHelper=new AnalyticsHelper(((AnalyticsApplication)getApplication()).getDefaultTracker());
    ConnectivityHelper connectivityHelper=ConnectivityHelper.get(this);
    if (!SipService.sipServiceActive && connectivityHelper.hasNetworkConnection() && connectivityHelper.hasFastData()) {
      String number=data.get(PHONE_NUMBER);
      if (number != null && (number.equalsIgnoreCase(SUPPRESSED) || number.toLowerCase().contains(""String_Node_Str""))) {
        number=getString(R.string.supressed_number);
      }
      startSipService(number,data.get(CALLER_ID) != null ? data.get(CALLER_ID) : ""String_Node_Str"",data.get(RESPONSE_URL) != null ? data.get(RESPONSE_URL) : ""String_Node_Str"",data.get(REQUEST_TOKEN) != null ? data.get(REQUEST_TOKEN) : ""String_Node_Str"",data.get(MESSAGE_START_TIME) != null ? data.get(MESSAGE_START_TIME) : ""String_Node_Str"");
    }
 else {
      String analyticsLabel=connectivityHelper.getAnalyticsLabel();
      analyticsHelper.sendEvent(getString(R.string.analytics_event_category_middleware),getString(R.string.analytics_event_action_middleware_rejected),analyticsLabel);
      replyServer(data.get(RESPONSE_URL) != null ? data.get(RESPONSE_URL) : ""String_Node_Str"",data.get(REQUEST_TOKEN) != null ? data.get(REQUEST_TOKEN) : ""String_Node_Str"",data.get(MESSAGE_START_TIME) != null ? data.get(MESSAGE_START_TIME) : ""String_Node_Str"",false);
    }
  }
 else   if (requestType.equals(MESSAGE_REQUEST_TYPE)) {
  }
}",0.9908779931584948
36908,"private void unregisterForWiredHeadsetIntentBroadcast(){
  mRemoteLogger.v(""String_Node_Str"");
  mContext.unregisterReceiver(mWiredHeadsetReceiver);
  mWiredHeadsetReceiver=null;
}","private void unregisterForWiredHeadsetIntentBroadcast(){
  mRemoteLogger.v(""String_Node_Str"");
  try {
    mContext.unregisterReceiver(mWiredHeadsetReceiver);
  }
 catch (  IllegalArgumentException e) {
    mRemoteLogger.w(""String_Node_Str"");
  }
  mWiredHeadsetReceiver=null;
}",0.7860262008733624
36909,"private void unregisterForBluetoothScoIntentBroadcast(){
  mRemoteLogger.v(""String_Node_Str"");
  mContext.unregisterReceiver(mBluetoothScoReceiver);
  mBluetoothScoReceiver=null;
}","private void unregisterForBluetoothScoIntentBroadcast(){
  mRemoteLogger.v(""String_Node_Str"");
  try {
    mContext.unregisterReceiver(mBluetoothScoReceiver);
  }
 catch (  IllegalArgumentException e) {
    mRemoteLogger.w(""String_Node_Str"");
  }
  mBluetoothScoReceiver=null;
}",0.7860262008733624
36910,"private void unregisterForBluetoothHeadsetIntentBroadcast(){
  mRemoteLogger.v(""String_Node_Str"");
  mContext.unregisterReceiver(mBluetoothHeadsetReceiver);
  mBluetoothHeadsetReceiver=null;
}","private void unregisterForBluetoothHeadsetIntentBroadcast(){
  mRemoteLogger.v(""String_Node_Str"");
  try {
    mContext.unregisterReceiver(mBluetoothHeadsetReceiver);
  }
 catch (  IllegalArgumentException e) {
    mRemoteLogger.w(""String_Node_Str"");
  }
  mBluetoothHeadsetReceiver=null;
}",0.7966804979253111
36911,"/** 
 * Function for the call activity when a call has been answered
 */
public void callAnswered(){
  mRemoteLogger.v(""String_Node_Str"");
  mAudioRouter.onAnsweredCall();
  BluetoothMediaButtonReceiver.setCallAnswered();
}","/** 
 * Function for the call activity when a call has been answered
 */
public void callAnswered(){
  mRemoteLogger.v(""String_Node_Str"");
  if (mAudioRouter == null) {
    mAudioRouter=new AudioRouter(mContext,this,mAudioManager);
    mAudioRouter.onAnsweredCall();
  }
 else {
    mAudioRouter.onAnsweredCall();
  }
  BluetoothMediaButtonReceiver.setCallAnswered();
}",0.7533783783783784
36912,"public ReachabilityReceiver(Context context){
  mContext=context;
}","public ReachabilityReceiver(Context context){
  mContext=context;
  mRemoteLogger=new RemoteLogger(context,ReachabilityReceiver.class,1);
}",0.6504854368932039
36913,"public void stopListening(){
  mContext.unregisterReceiver(this);
}","public void stopListening(){
  try {
    mContext.unregisterReceiver(this);
  }
 catch (  IllegalArgumentException e) {
    mRemoteLogger.w(""String_Node_Str"");
  }
}",0.5775862068965517
36914,"private void stopNetworkingListener(){
  mSipService.unregisterReceiver(mNetworkStateReceiver);
}","private void stopNetworkingListener(){
  try {
    mSipService.unregisterReceiver(mNetworkStateReceiver);
  }
 catch (  IllegalArgumentException e) {
    mRemoteLogger.w(""String_Node_Str"");
  }
}",0.6643835616438356
36915,"/** 
 * This will calculate the current MOS value of the call. Credits to: https://www.pingman.com/kb/article/how-is-mos-calculated-in-pingplotter-pro-50.html
 */
private float getR(){
  float r=0;
  try {
    StreamStat mStreamStat=this.getStreamStat(0);
    RtcpStat rtcpStat=mStreamStat.getRtcp();
    RtcpStreamStat rtcpStreamStat=rtcpStat.getRxStat();
    float rxJitter=(float)rtcpStreamStat.getJitterUsec().getMean() / 1000;
    float averageRoundTripTime=(float)rtcpStat.getRttUsec().getMean() / 1000;
    if (averageRoundTripTime == 0) {
      averageRoundTripTime=20;
    }
    float effectiveLatency=averageRoundTripTime + rxJitter * 2 + 10;
    if (effectiveLatency < 160) {
      r=93.2f - (effectiveLatency / 40);
    }
 else {
      r=93.2f - (effectiveLatency - 120) / 10;
    }
    float rxPackets=rtcpStreamStat.getPkt();
    float rxLoss=rtcpStreamStat.getLoss();
    float rxPacketLoss;
    if (rxPackets == 0) {
      rxPacketLoss=100f;
    }
 else {
      rxPacketLoss=(rxLoss / (rxPackets + rxLoss)) * 100f;
    }
    r=r - (rxPacketLoss * 2.5f);
    Log.e(TAG,""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return r;
}","/** 
 * This will calculate the current MOS value of the call. Credits to: https://www.pingman.com/kb/article/how-is-mos-calculated-in-pingplotter-pro-50.html
 */
private float getR(){
  float r=0;
  try {
    StreamStat mStreamStat=this.getStreamStat(0);
    RtcpStat rtcpStat=mStreamStat.getRtcp();
    RtcpStreamStat rtcpStreamStat=rtcpStat.getRxStat();
    float rxJitter=(float)rtcpStreamStat.getJitterUsec().getMean() / 1000;
    float averageRoundTripTime=(float)rtcpStat.getRttUsec().getMean() / 1000;
    if (averageRoundTripTime == 0) {
      averageRoundTripTime=20;
    }
    float effectiveLatency=averageRoundTripTime + rxJitter * 2 + 10;
    if (effectiveLatency < 160) {
      r=93.2f - (effectiveLatency / 40);
    }
 else {
      r=93.2f - (effectiveLatency - 120) / 10;
    }
    float rxPackets=rtcpStreamStat.getPkt();
    float rxLoss=rtcpStreamStat.getLoss();
    float rxPacketLoss;
    if (rxPackets == 0) {
      rxPacketLoss=100f;
    }
 else {
      rxPacketLoss=(rxLoss / (rxPackets + rxLoss)) * 100f;
    }
    r=r - (rxPacketLoss * 2.5f);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return r;
}",0.9853195164075992
36916,"private void stopNetworkingListener(){
  mSipService.unregisterReceiver(mNetworkStateReceiver);
}","private void stopNetworkingListener(){
  try {
    mSipService.unregisterReceiver(mNetworkStateReceiver);
  }
 catch (  IllegalArgumentException e) {
    mRemoteLogger.w(""String_Node_Str"");
  }
}",0.6643835616438356
36917,"/** 
 * Add text to the number input field
 * @param text
 */
public void add(CharSequence text){
  Editable inputText=mEditText.getText();
  Integer startCursorPosition=mEditText.getSelectionStart();
  Integer endCursorPosition=mEditText.getSelectionEnd();
  removeTextFromInput(startCursorPosition,endCursorPosition);
  inputText.insert(startCursorPosition,text);
}","/** 
 * Add text to the number input field
 * @param text
 */
public void add(CharSequence text){
  Editable inputText=mNumberInputEditText.getText();
  Integer startCursorPosition=mNumberInputEditText.getSelectionStart();
  Integer endCursorPosition=mNumberInputEditText.getSelectionEnd();
  removeTextFromInput(startCursorPosition,endCursorPosition);
  inputText.insert(startCursorPosition,text);
}",0.9569752281616688
36918,"private void init(){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.view_number_input,this);
  mEditText=(EditText)findViewById(R.id.edit_text);
  mEditText.addTextChangedListener(this);
  mEditText.setOnClickListener(this);
  mEditText.setOnLongClickListener(this);
  mRemoveButton=(ImageButton)findViewById(R.id.remove_button);
  mRemoveButton.setOnClickListener(this);
  mRemoveButton.setOnLongClickListener(this);
  mEditText.setTextSize(TypedValue.COMPLEX_UNIT_SP,getResources().getDimension(R.dimen.dialpad_number_input_text_size));
  mDefaultTextsize=mEditText.getTextSize();
}","private void init(){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.view_number_input,this);
  mNumberInputEditText=(EditText)findViewById(R.id.edit_text);
  mNumberInputEditText.addTextChangedListener(this);
  mNumberInputEditText.setOnClickListener(this);
  mNumberInputEditText.setOnLongClickListener(this);
  mRemoveButton=(ImageButton)findViewById(R.id.remove_button);
  mRemoveButton.setOnClickListener(this);
  mRemoveButton.setOnLongClickListener(this);
  mNumberInputEditText.setTextSize(TypedValue.COMPLEX_UNIT_SP,getResources().getDimension(R.dimen.dialpad_number_input_text_size));
}",0.926829268292683
36919,"@Override public void onClick(View view){
switch (view.getId()) {
case R.id.remove_button:
    remove();
  break;
case R.id.edit_text:
if (!isEmpty()) {
  mEditText.setCursorVisible(true);
}
break;
}
}","@Override public void onClick(View view){
switch (view.getId()) {
case R.id.remove_button:
    remove();
  break;
case R.id.edit_text:
if (!isEmpty()) {
  mNumberInputEditText.setCursorVisible(true);
}
break;
}
}",0.973365617433414
36920,"public void setCorrectFontSize(){
  int charCount=mEditText.getText().length();
  float charSize=mDefaultTextsize;
  if (charCount > mNormalPhoneNumberLengthMax) {
    for (int i=charCount; i > mNormalPhoneNumberLengthMax; i--) {
      charSize=charSize / 1.03f;
    }
  }
  mEditText.setTextSize(TypedValue.COMPLEX_UNIT_PX,charSize);
}","public void setCorrectFontSize(){
  int charCount=mNumberInputEditText.getText().length();
  float charSize=getTextSize();
  int inputMaxScalingLength=getResources().getInteger(R.integer.dialpad_number_input_max_scaling_length);
  int maxLengthNormalPhoneNumber=getResources().getInteger(R.integer.dialpad_normal_phonenumber_length_max);
  if (charCount > maxLengthNormalPhoneNumber && charCount < inputMaxScalingLength) {
    charSize=charSize / 1.04f;
  }
  mNumberInputEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,charSize);
}",0.522439585730725
36921,"/** 
 * Clear the number input field
 */
public void clear(){
  mEditText.setCursorVisible(false);
  mEditText.getText().clear();
}","/** 
 * Clear the number input field
 */
public void clear(){
  mNumberInputEditText.setCursorVisible(false);
  mNumberInputEditText.getText().clear();
}",0.9225352112676056
36922,"public boolean isEmpty(){
  return mEditText.length() == 0;
}","public boolean isEmpty(){
  return mNumberInputEditText.length() == 0;
}",0.9172932330827068
36923,"/** 
 * Remove character from input field
 */
public void remove(){
  if (mEditText.length() > 0) {
    mRemoveButton.animate();
    Integer startCursorPosition=mEditText.getSelectionStart();
    Integer endCursorPosition=mEditText.getSelectionEnd();
    if (startCursorPosition == 0 && endCursorPosition == 0) {
      return;
    }
    if ((endCursorPosition - startCursorPosition) > 0) {
      removeTextFromInput(startCursorPosition,endCursorPosition);
    }
 else {
      removeTextFromInput(startCursorPosition - 1,endCursorPosition);
    }
  }
  setCorrectFontSize();
}","/** 
 * Remove character from input field
 */
public void remove(){
  if (mNumberInputEditText.length() > 0) {
    mRemoveButton.animate();
    Integer startCursorPosition=mNumberInputEditText.getSelectionStart();
    Integer endCursorPosition=mNumberInputEditText.getSelectionEnd();
    if (startCursorPosition == 0 && endCursorPosition == 0) {
      return;
    }
    if ((endCursorPosition - startCursorPosition) > 0) {
      removeTextFromInput(startCursorPosition,endCursorPosition);
    }
 else {
      removeTextFromInput(startCursorPosition - 1,endCursorPosition);
    }
  }
  setCorrectFontSize();
}",0.9721048182586643
36924,"public void setNumber(String number){
  mEditText.setText(number);
  mEditText.setSelection(number.length());
}","public void setNumber(String number){
  mNumberInputEditText.setText(number);
  mNumberInputEditText.setSelection(number.length());
}",0.9098360655737704
36925,"/** 
 * Return the number input as String
 * @return
 */
public String getNumber(){
  return mEditText.getText().toString();
}","/** 
 * Return the number input as String
 * @return String representation of the number
 */
public String getNumber(){
  return mNumberInputEditText.getText().toString();
}",0.842809364548495
36926,"@Override public boolean onLongClick(View view){
switch (view.getId()) {
case R.id.remove_button:
    clear();
  return true;
case R.id.edit_text:
mEditText.setCursorVisible(true);
return false;
}
return false;
}","@Override public boolean onLongClick(View view){
switch (view.getId()) {
case R.id.remove_button:
    clear();
  return true;
case R.id.edit_text:
mNumberInputEditText.setCursorVisible(true);
return false;
}
return false;
}",0.9747126436781608
36927,"private void removeTextFromInput(Integer startCursorPosition,Integer endCursorPosition){
  if ((endCursorPosition - startCursorPosition) > 0) {
    mEditText.getText().delete(startCursorPosition,endCursorPosition);
  }
  if (startCursorPosition == mEditText.length()) {
    mEditText.setCursorVisible(false);
  }
 else {
    mEditText.setCursorVisible(true);
  }
}","private void removeTextFromInput(Integer startCursorPosition,Integer endCursorPosition){
  if ((endCursorPosition - startCursorPosition) > 0) {
    mNumberInputEditText.getText().delete(startCursorPosition,endCursorPosition);
  }
  if (startCursorPosition == mNumberInputEditText.length()) {
    mNumberInputEditText.setCursorVisible(false);
  }
 else {
    mNumberInputEditText.setCursorVisible(true);
  }
}",0.9430051813471504
36928,"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  if (mPreferences.hasSipEnabled() == isChecked) {
    return;
  }
  mPreferences.setSipEnabled(isChecked);
  if (!isChecked) {
    MiddlewareHelper.executeUnregisterTask(this);
    mSipIdEditText.setVisibility(View.GONE);
  }
 else {
    enableProgressBar(true);
    new AsyncTask<Void,Void,PhoneAccount>(){
      @Override protected PhoneAccount doInBackground(      Void... params){
        return mPhoneAccountHelper.getLinkedPhoneAccount();
      }
      @Override protected void onPostExecute(      PhoneAccount phoneAccount){
        super.onPostExecute(phoneAccount);
        if (phoneAccount != null) {
          mPhoneAccountHelper.savePhoneAccountAndRegister(phoneAccount);
          updateAndPopulate();
        }
 else {
          setVoipAccount();
        }
      }
    }
.execute();
  }
}","@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  if (mPreferences.hasSipEnabled() == isChecked) {
    return;
  }
  mPreferences.setSipEnabled(isChecked);
  if (!isChecked) {
    MiddlewareHelper.executeUnregisterTask(this);
    stopService(new Intent(this,SipService.class));
    mSipIdEditText.setVisibility(View.GONE);
  }
 else {
    enableProgressBar(true);
    new AsyncTask<Void,Void,PhoneAccount>(){
      @Override protected PhoneAccount doInBackground(      Void... params){
        return mPhoneAccountHelper.getLinkedPhoneAccount();
      }
      @Override protected void onPostExecute(      PhoneAccount phoneAccount){
        super.onPostExecute(phoneAccount);
        if (phoneAccount != null) {
          mPhoneAccountHelper.savePhoneAccountAndRegister(phoneAccount);
          updateAndPopulate();
        }
 else {
          setVoipAccount();
        }
      }
    }
.execute();
  }
}",0.9715536105032824
36929,"@Override public void run(){
  mToneGenerator.startTone(ToneGenerator.TONE_SUP_DIAL,1000);
  mHandler.postDelayed(mRingbackRunnable,4000);
}","@Override public void run(){
  checkServiceBeingUsed();
}",0.4263959390862944
36930,"@Override public void onCreate(){
  super.onCreate();
  mHandler=new Handler();
  mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,SipConstants.RINGING_VOLUME);
  mSipBroadcaster=new SipBroadcaster(this);
  mPreferences=new Preferences(this);
  mRemoteLogger=new RemoteLogger(this);
  mRemoteLogger.d(TAG + ""String_Node_Str"");
  IntentFilter filter=new IntentFilter();
  filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
  registerReceiver(phoneStateReceiver,filter);
  PhoneAccount phoneAccount=new JsonStorage<PhoneAccount>(this).get(PhoneAccount.class);
  if (phoneAccount != null) {
    mSipConfig=new SipConfig(this,phoneAccount);
    try {
      mSipConfig.initLibrary();
    }
 catch (    SipConfig.LibraryInitFailedException e) {
      stopSelf();
    }
  }
 else {
    mRemoteLogger.w(""String_Node_Str"");
    stopSelf();
  }
}","@Override public void onCreate(){
  super.onCreate();
  mHandler=new Handler();
  mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,SipConstants.RINGING_VOLUME);
  mSipBroadcaster=new SipBroadcaster(this);
  mPreferences=new Preferences(this);
  mRemoteLogger=new RemoteLogger(this);
  mRemoteLogger.d(TAG + ""String_Node_Str"");
  IntentFilter filter=new IntentFilter();
  filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
  registerReceiver(phoneStateReceiver,filter);
  PhoneAccount phoneAccount=new JsonStorage<PhoneAccount>(this).get(PhoneAccount.class);
  if (phoneAccount != null) {
    mSipConfig=new SipConfig(this,phoneAccount);
    try {
      mSipConfig.initLibrary();
    }
 catch (    SipConfig.LibraryInitFailedException e) {
      stopSelf();
    }
  }
 else {
    mRemoteLogger.w(""String_Node_Str"");
    stopSelf();
  }
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      checkServiceBeingUsed();
    }
  }
,5000);
}",0.9319654427645788
36931,"@Override public void onServiceConnected(ComponentName className,IBinder service){
  SipService.SipServiceBinder binder=(SipService.SipServiceBinder)service;
  mSipService=binder.getService();
  mServiceBound=true;
  if (mSipService.getFirstCall() != null) {
    mCurrentCallId=mSipService.getFirstCall().getIdentifier();
  }
  if (mIsIncomingCall) {
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        mSipService.getFirstCall().setCallerId(mCallerIdToDisplay);
        mSipService.getFirstCall().setPhoneNumber(mPhoneNumberToDisplay);
      }
    }
,1000);
  }
}","@Override public void onServiceConnected(ComponentName className,IBinder service){
  SipService.SipServiceBinder binder=(SipService.SipServiceBinder)service;
  mSipService=binder.getService();
  mServiceBound=true;
  if (mSipService.getFirstCall() != null) {
    mCurrentCallId=mSipService.getFirstCall().getIdentifier();
  }
  if (mIsIncomingCall) {
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        SipCall firstCall=mSipService.getFirstCall();
        if (firstCall != null) {
          firstCall.setCallerId(mCallerIdToDisplay);
          firstCall.setPhoneNumber(mPhoneNumberToDisplay);
        }
      }
    }
,1000);
  }
}",0.9062253743104808
36932,"public void stopSensor(){
  if (mProximitySensor != null) {
    mSensorManager.unregisterListener(this);
  }
  if (mWakeLock.isHeld()) {
    mWakeLock.release();
  }
}","public void stopSensor(){
  if (mProximitySensor != null) {
    mSensorManager.unregisterListener(this);
  }
  if (mWakeLock != null) {
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
  }
}",0.8840970350404312
36933,"@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof SystemUser) {
    SystemUser systemUser=((SystemUser)response.body());
    mJsonStorage.save(systemUser);
    mSystemUser=systemUser;
    String phoneAccountId=mSystemUser.getPhoneAccountId();
    if (phoneAccountId != null) {
      Call<PhoneAccount> apicall=mApi.phoneAccount(phoneAccountId);
      apicall.enqueue(this);
    }
 else {
      mJsonStorage.remove(PhoneAccount.class);
    }
  }
 else   if (response.body() instanceof PhoneAccount) {
    mJsonStorage.save(response.body());
    mListener.onFinish(this);
  }
}","@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof SystemUser) {
    SystemUser systemUser=((SystemUser)response.body());
    SystemUser currentSystemuser=mSystemUser;
    currentSystemuser.setOutgoingCli(systemUser.getOutgoingCli());
    currentSystemuser.setMobileNumber(systemUser.getMobileNumber());
    currentSystemuser.setClient(systemUser.getClient());
    currentSystemuser.setAppAccountUri(systemUser.getAppAccountUri());
    mJsonStorage.save(currentSystemuser);
    mSystemUser=currentSystemuser;
    String phoneAccountId=mSystemUser.getPhoneAccountId();
    if (phoneAccountId != null) {
      Call<PhoneAccount> apicall=mApi.phoneAccount(phoneAccountId);
      apicall.enqueue(this);
    }
 else {
      mJsonStorage.remove(PhoneAccount.class);
    }
  }
 else   if (response.body() instanceof PhoneAccount) {
    mJsonStorage.save(response.body());
    mListener.onFinish(this);
  }
}",0.7752234993614304
36934,"/** 
 * Function to update the systemuser information.
 */
private void updateSystemUser(SystemUser systemUser){
  SystemUser currentSystemuser=(SystemUser)mJsonStorage.get(SystemUser.class);
  currentSystemuser.setOutgoingCli(systemUser.getOutgoingCli());
  currentSystemuser.setMobileNumber(systemUser.getMobileNumber());
  currentSystemuser.setClient(systemUser.getClient());
  mJsonStorage.save(currentSystemuser);
}","/** 
 * Function to update the systemuser information.
 */
private void updateSystemUser(SystemUser systemUser){
  SystemUser currentSystemuser=(SystemUser)mJsonStorage.get(SystemUser.class);
  currentSystemuser.setOutgoingCli(systemUser.getOutgoingCli());
  currentSystemuser.setMobileNumber(systemUser.getMobileNumber());
  currentSystemuser.setClient(systemUser.getClient());
  currentSystemuser.setAppAccountUri(systemUser.getAppAccountUri());
  mJsonStorage.save(currentSystemuser);
}",0.924092409240924
36935,"private void hangup(Integer viewId){
  if (mServiceBound) {
    updateCallButton(viewId,false);
    mSipService.hangUp(mSipService.getCurrentCall(),true);
    mStateView.setText(R.string.call_hangup);
    finishWithDelay();
  }
}","private void hangup(Integer viewId){
  if (mServiceBound) {
    updateCallButton(viewId,false);
    mSipService.hangUp(mSipService.getCurrentCall(),true);
    mSelfHangup=true;
    mStateView.setText(R.string.call_hangup);
    finishWithDelay();
  }
}",0.9541666666666668
36936,"/** 
 * The call has transitioned to another state. We can now visually update the view with extra info or perform required actions.
 * @param newStatus the new interaction state to which we should act.
 * @see SipConstants for the possible states.
 */
private void onCallStatusUpdate(String newStatus){
  mRemoteLogger.d(TAG + ""String_Node_Str"" + newStatus);
switch (newStatus) {
case CALL_MEDIA_AVAILABLE_MESSAGE:
    onCallStatusUpdate(CALL_STOP_RINGBACK_MESSAGE);
  break;
case CALL_CONNECTED_MESSAGE:
toggleCallStateButtonVisibility(TYPE_CONNECTED_CALL);
mStateView.setText(R.string.call_connected);
mCallStartTime=System.currentTimeMillis();
mCallHandler.postDelayed(mCallDurationRunnable,0);
mConnected=true;
mHasConnected=true;
mIncomingCallIsRinging=false;
mProximityHelper.updateWakeLock();
break;
case CALL_DISCONNECTED_MESSAGE:
onCallStatusUpdate(CALL_STOP_RINGBACK_MESSAGE);
if (!mHasConnected) {
mStateView.setText(R.string.call_unreachable);
}
 else {
mStateView.setText(R.string.call_ended);
}
mAudioManager.setSpeakerphoneOn(false);
mCallHandler.removeCallbacks(mCallDurationRunnable);
mConnected=false;
mIncomingCallIsRinging=false;
playRingtone(false);
vibrate(false);
finishWithDelay();
break;
case CALL_PUT_ON_HOLD_ACTION:
mCallHandler.removeCallbacks(mCallDurationRunnable);
mCallDurationView.setVisibility(View.INVISIBLE);
mStateView.setText(R.string.call_on_hold);
break;
case CALL_UNHOLD_ACTION:
mCallHandler.postDelayed(mCallDurationRunnable,0);
mCallDurationView.setVisibility(View.VISIBLE);
mStateView.setText(R.string.call_connected);
break;
case CALL_RINGING_OUT_MESSAGE:
mStateView.setText(R.string.call_outgoing);
findViewById(R.id.button_speaker).setEnabled(false);
findViewById(R.id.button_microphone).setEnabled(false);
break;
case CALL_RINGING_IN_MESSAGE:
mStateView.setText(R.string.call_incoming);
break;
case SERVICE_STOPPED:
mConnected=false;
mIncomingCallIsRinging=false;
finishWithDelay();
break;
}
}","/** 
 * The call has transitioned to another state. We can now visually update the view with extra info or perform required actions.
 * @param newStatus the new interaction state to which we should act.
 * @see SipConstants for the possible states.
 */
private void onCallStatusUpdate(String newStatus){
  mRemoteLogger.d(TAG + ""String_Node_Str"" + newStatus);
switch (newStatus) {
case CALL_MEDIA_AVAILABLE_MESSAGE:
    onCallStatusUpdate(CALL_STOP_RINGBACK_MESSAGE);
  break;
case CALL_CONNECTED_MESSAGE:
toggleCallStateButtonVisibility(TYPE_CONNECTED_CALL);
mStateView.setText(R.string.call_connected);
mCallStartTime=System.currentTimeMillis();
mCallHandler.postDelayed(mCallDurationRunnable,0);
mConnected=true;
mHasConnected=true;
mIncomingCallIsRinging=false;
mProximityHelper.updateWakeLock();
break;
case CALL_DISCONNECTED_MESSAGE:
onCallStatusUpdate(CALL_STOP_RINGBACK_MESSAGE);
if (!mHasConnected && !mSelfHangup) {
mStateView.setText(R.string.call_unreachable);
}
 else {
mStateView.setText(R.string.call_ended);
}
mAudioManager.setSpeakerphoneOn(false);
mCallHandler.removeCallbacks(mCallDurationRunnable);
mConnected=false;
mIncomingCallIsRinging=false;
playRingtone(false);
vibrate(false);
finishWithDelay();
break;
case CALL_PUT_ON_HOLD_ACTION:
mCallHandler.removeCallbacks(mCallDurationRunnable);
mCallDurationView.setVisibility(View.INVISIBLE);
mStateView.setText(R.string.call_on_hold);
break;
case CALL_UNHOLD_ACTION:
mCallHandler.postDelayed(mCallDurationRunnable,0);
mCallDurationView.setVisibility(View.VISIBLE);
mStateView.setText(R.string.call_connected);
break;
case CALL_RINGING_OUT_MESSAGE:
mStateView.setText(R.string.call_outgoing);
findViewById(R.id.button_speaker).setEnabled(false);
findViewById(R.id.button_microphone).setEnabled(false);
break;
case CALL_RINGING_IN_MESSAGE:
mStateView.setText(R.string.call_incoming);
break;
case SERVICE_STOPPED:
mConnected=false;
mIncomingCallIsRinging=false;
finishWithDelay();
break;
}
}",0.9958974358974358
36937,"/** 
 * Create a SyncContactNumber object from the give number cursor.
 * @param numberCursor Cursor containing phone numbers.
 * @return Populated SyncContact object or null.
 */
private SyncContactNumber createSyncContactNumberFromCursor(Cursor numberCursor){
  long dataId=numberCursor.getLong(numberCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone._ID));
  String number=numberCursor.getString(numberCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
  int type=numberCursor.getInt(numberCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE));
  String label=numberCursor.getString(numberCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.LABEL));
  number=number.replace(""String_Node_Str"",""String_Node_Str"");
  if (number == null || number.length() < 1) {
    return null;
  }
  return new SyncContactNumber(dataId,number,type,label);
}","/** 
 * Create a SyncContactNumber object from the give number cursor.
 * @param numberCursor Cursor containing phone numbers.
 * @return Populated SyncContact object or null.
 */
private SyncContactNumber createSyncContactNumberFromCursor(Cursor numberCursor){
  long dataId=numberCursor.getLong(numberCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone._ID));
  String number=numberCursor.getString(numberCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
  int type=numberCursor.getInt(numberCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE));
  String label=numberCursor.getString(numberCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.LABEL));
  if (number == null) {
    return null;
  }
  number=number.replace(""String_Node_Str"",""String_Node_Str"");
  if (number.length() < 1) {
    return null;
  }
  return new SyncContactNumber(dataId,number,type,label);
}",0.9653655854865312
36938,"@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof SystemUser) {
    SystemUser systemUser=((SystemUser)response.body());
    mJsonStorage.save(systemUser);
    mSystemUser=systemUser;
    String phoneAccountId=mSystemUser.getPhoneAccountId();
    if (phoneAccountId != null) {
      Call<PhoneAccount> apicall=mApi.phoneAccount(phoneAccountId);
      apicall.enqueue(this);
    }
 else {
      mJsonStorage.remove(PhoneAccount.class);
    }
  }
 else   if (response.body() instanceof PhoneAccount) {
    mJsonStorage.save(response.body());
    mListener.onFinish(this);
  }
}","@Override public void onResponse(Call call,Response response){
  if (response.body() instanceof SystemUser) {
    SystemUser systemUser=((SystemUser)response.body());
    SystemUser currentSystemuser=mSystemUser;
    currentSystemuser.setOutgoingCli(systemUser.getOutgoingCli());
    currentSystemuser.setMobileNumber(systemUser.getMobileNumber());
    currentSystemuser.setClient(systemUser.getClient());
    currentSystemuser.setAppAccountUri(systemUser.getAppAccountUri());
    mJsonStorage.save(currentSystemuser);
    mSystemUser=currentSystemuser;
    String phoneAccountId=mSystemUser.getPhoneAccountId();
    if (phoneAccountId != null) {
      Call<PhoneAccount> apicall=mApi.phoneAccount(phoneAccountId);
      apicall.enqueue(this);
    }
 else {
      mJsonStorage.remove(PhoneAccount.class);
    }
  }
 else   if (response.body() instanceof PhoneAccount) {
    mJsonStorage.save(response.body());
    mListener.onFinish(this);
  }
}",0.7752234993614304
36939,"/** 
 * Function to update the systemuser information.
 */
private void updateSystemUser(SystemUser systemUser){
  SystemUser currentSystemuser=(SystemUser)mJsonStorage.get(SystemUser.class);
  currentSystemuser.setOutgoingCli(systemUser.getOutgoingCli());
  currentSystemuser.setMobileNumber(systemUser.getMobileNumber());
  currentSystemuser.setClient(systemUser.getClient());
  mJsonStorage.save(currentSystemuser);
}","/** 
 * Function to update the systemuser information.
 */
private void updateSystemUser(SystemUser systemUser){
  SystemUser currentSystemuser=(SystemUser)mJsonStorage.get(SystemUser.class);
  currentSystemuser.setOutgoingCli(systemUser.getOutgoingCli());
  currentSystemuser.setMobileNumber(systemUser.getMobileNumber());
  currentSystemuser.setClient(systemUser.getClient());
  currentSystemuser.setAppAccountUri(systemUser.getAppAccountUri());
  mJsonStorage.save(currentSystemuser);
}",0.924092409240924
36940,"private void onCallStatesUpdateButtons(String callState){
  Integer speakerButtonId=R.id.button_speaker;
  Integer microphoneButtonId=R.id.button_microphone;
  Integer keypadButtonId=R.id.button_keypad;
  Integer onHoldButtonId=R.id.button_onhold;
  View declineButton=findViewById(R.id.button_reject);
  View acceptButton=findViewById(R.id.button_pickup);
switch (callState) {
case CALL_CONNECTED_MESSAGE:
    updateCallButton(speakerButtonId,true);
  updateCallButton(microphoneButtonId,true);
updateCallButton(keypadButtonId,true);
updateCallButton(onHoldButtonId,true);
break;
case CALL_DISCONNECTED_MESSAGE:
if (mIsIncomingCall) {
if (declineButton != null && declineButton.getVisibility() == View.VISIBLE) {
declineButton.setEnabled(false);
declineButton.setClickable(false);
declineButton.setAlpha(0.5f);
}
if (acceptButton != null && acceptButton.getVisibility() == View.VISIBLE) {
acceptButton.setEnabled(false);
acceptButton.setClickable(false);
acceptButton.setAlpha(0.5f);
}
}
 else {
updateCallButton(R.id.button_hangup,false);
}
updateCallButton(speakerButtonId,false);
updateCallButton(microphoneButtonId,false);
updateCallButton(keypadButtonId,false);
updateCallButton(onHoldButtonId,false);
if (mKeyPadVisible) {
toggleDialPad();
updateCallButton(keypadButtonId,false);
}
break;
case SERVICE_STOPPED:
updateCallButton(microphoneButtonId,false);
updateCallButton(keypadButtonId,false);
updateCallButton(onHoldButtonId,false);
break;
}
}","private void onCallStatesUpdateButtons(String callState){
  Integer speakerButtonId=R.id.button_speaker;
  Integer microphoneButtonId=R.id.button_microphone;
  Integer keypadButtonId=R.id.button_keypad;
  Integer onHoldButtonId=R.id.button_onhold;
  View declineButton=findViewById(R.id.button_reject);
  View acceptButton=findViewById(R.id.button_pickup);
switch (callState) {
case CALL_CONNECTED_MESSAGE:
    updateCallButton(speakerButtonId,true);
  updateCallButton(microphoneButtonId,true);
updateCallButton(keypadButtonId,true);
updateCallButton(onHoldButtonId,true);
break;
case CALL_DISCONNECTED_MESSAGE:
if (mIsIncomingCall) {
if (declineButton != null && declineButton.getVisibility() == View.VISIBLE) {
declineButton.setEnabled(false);
declineButton.setClickable(false);
declineButton.setAlpha(0.5f);
}
if (acceptButton != null && acceptButton.getVisibility() == View.VISIBLE) {
acceptButton.setEnabled(false);
acceptButton.setClickable(false);
acceptButton.setAlpha(0.5f);
}
}
updateCallButton(R.id.button_hangup,false);
updateCallButton(speakerButtonId,false);
updateCallButton(microphoneButtonId,false);
updateCallButton(keypadButtonId,false);
updateCallButton(onHoldButtonId,false);
if (mKeyPadVisible) {
toggleDialPad();
updateCallButton(keypadButtonId,false);
}
break;
case SERVICE_STOPPED:
updateCallButton(microphoneButtonId,false);
updateCallButton(keypadButtonId,false);
updateCallButton(onHoldButtonId,false);
break;
}
}",0.9965445749827228
36941,"@Override public void onStop(){
  super.onStop();
  mRemoteLogger.d(TAG + ""String_Node_Str"");
  mBroadcastManager.unregisterReceiver(mCallStatusReceiver);
  mBroadcastManager.unregisterReceiver(mDTMFButtonPressed);
  if (mServiceBound) {
    unbindService(mConnection);
    mServiceBound=false;
  }
}","@Override public void onStop(){
  super.onStop();
  mRemoteLogger.d(TAG + ""String_Node_Str"");
  mBroadcastManager.unregisterReceiver(mCallStatusReceiver);
  mBroadcastManager.unregisterReceiver(mDTMFButtonPressed);
  if (mServiceBound && (mSipService != null && mSipService.getCurrentCall() == null)) {
    unbindService(mConnection);
    mServiceBound=false;
  }
}",0.9022556390977444
36942,"@Override public void onStart(){
  super.onStart();
  IntentFilter intentFilter=new IntentFilter(ACTION_BROADCAST_CALL_STATUS);
  mBroadcastManager.registerReceiver(mCallStatusReceiver,intentFilter);
  mProximityHelper.startSensor();
}","@Override public void onStart(){
  super.onStart();
  IntentFilter intentFilter=new IntentFilter(ACTION_BROADCAST_CALL_STATUS);
  mBroadcastManager.registerReceiver(mCallStatusReceiver,intentFilter);
}",0.9220183486238532
36943,"@Override public void onStop(){
  super.onStop();
  mBroadcastManager.unregisterReceiver(mCallStatusReceiver);
  mProximityHelper.stopSensor();
  if (mServiceBound) {
    unbindService(mConnection);
    mServiceBound=false;
  }
}","@Override public void onStop(){
  super.onStop();
  mBroadcastManager.unregisterReceiver(mCallStatusReceiver);
  if (mServiceBound) {
    unbindService(mConnection);
    mServiceBound=false;
  }
}",0.9223529411764706
36944,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!MicrophonePermission.hasPermission(this)) {
    MicrophonePermission.askForPermission(this);
  }
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  setContentView(R.layout.activity_call);
  mAnalyticsHelper=new AnalyticsHelper(((AnalyticsApplication)getApplication()).getDefaultTracker());
  mKeyPadViewContainer=(ViewGroup)findViewById(R.id.key_pad_container);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  mAudioManager.setSpeakerphoneOn(false);
  mAudioManager.requestAudioFocus(this,AudioManager.STREAM_VOICE_CALL,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);
  setVolumeControlStream(AudioManager.STREAM_VOICE_CALL);
  mProximityHelper=new ProximitySensorHelper(this,this,findViewById(R.id.screen_off));
  mRingtone=RingtoneManager.getRingtone(this,Settings.System.DEFAULT_RINGTONE_URI);
  mVibrator=(Vibrator)getSystemService(VIBRATOR_SERVICE);
  mBroadcastManager=LocalBroadcastManager.getInstance(this);
  mStateView=(TextView)findViewById(R.id.state_text_view);
  mCallDurationView=(TextView)findViewById(R.id.duration_text_view);
  mConnected=false;
  onCallStatesUpdateButtons(SERVICE_STOPPED);
  Intent intent=getIntent();
  String type=intent.getType();
  if (type.equals(TYPE_INCOMING_CALL) || type.equals(TYPE_OUTGOING_CALL)) {
    String phoneNumber=intent.getStringExtra(PHONE_NUMBER);
    String contactName=intent.getStringExtra(CONTACT_NAME);
    displayCallInfo(phoneNumber,contactName);
    mIsIncomingCall=type.equals(TYPE_INCOMING_CALL);
    toggleCallStateButtonVisibility(type);
    if (mIsIncomingCall) {
      mIncomingCallIsRinging=true;
switch (mAudioManager.getRingerMode()) {
case AudioManager.RINGER_MODE_NORMAL:
        playRingtone(true);
      break;
case AudioManager.RINGER_MODE_VIBRATE:
    vibrate(true);
  break;
case AudioManager.RINGER_MODE_SILENT:
playRingtone(false);
vibrate(false);
break;
}
}
}
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!MicrophonePermission.hasPermission(this)) {
    MicrophonePermission.askForPermission(this);
  }
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  setContentView(R.layout.activity_call);
  mAnalyticsHelper=new AnalyticsHelper(((AnalyticsApplication)getApplication()).getDefaultTracker());
  mKeyPadViewContainer=(ViewGroup)findViewById(R.id.key_pad_container);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  mAudioManager.setSpeakerphoneOn(false);
  mAudioManager.requestAudioFocus(this,AudioManager.STREAM_VOICE_CALL,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);
  setVolumeControlStream(AudioManager.STREAM_VOICE_CALL);
  mProximityHelper=new ProximitySensorHelper(this,this,findViewById(R.id.screen_off));
  mRingtone=RingtoneManager.getRingtone(this,Settings.System.DEFAULT_RINGTONE_URI);
  mVibrator=(Vibrator)getSystemService(VIBRATOR_SERVICE);
  mBroadcastManager=LocalBroadcastManager.getInstance(this);
  mStateView=(TextView)findViewById(R.id.state_text_view);
  mCallDurationView=(TextView)findViewById(R.id.duration_text_view);
  mConnected=false;
  onCallStatesUpdateButtons(SERVICE_STOPPED);
  Intent intent=getIntent();
  String type=intent.getType();
  if (type.equals(TYPE_INCOMING_CALL) || type.equals(TYPE_OUTGOING_CALL)) {
    String phoneNumber=intent.getStringExtra(PHONE_NUMBER);
    String contactName=intent.getStringExtra(CONTACT_NAME);
    displayCallInfo(phoneNumber,contactName);
    mIsIncomingCall=type.equals(TYPE_INCOMING_CALL);
    toggleCallStateButtonVisibility(type);
    if (mIsIncomingCall) {
      mIncomingCallIsRinging=true;
switch (mAudioManager.getRingerMode()) {
case AudioManager.RINGER_MODE_NORMAL:
        playRingtone(true);
      break;
case AudioManager.RINGER_MODE_VIBRATE:
    vibrate(true);
  break;
case AudioManager.RINGER_MODE_SILENT:
playRingtone(false);
vibrate(false);
break;
}
}
}
mProximityHelper.startSensor();
}",0.9928283281039892
36945,"@Override protected void onDestroy(){
  super.onDestroy();
  mAudioManager.abandonAudioFocus(this);
}","@Override protected void onDestroy(){
  super.onDestroy();
  mAudioManager.abandonAudioFocus(this);
  mProximityHelper.stopSensor();
}",0.8595744680851064
36946,"@Override public void onTextChanged(CharSequence s,int start,int before,int count){
  mRemoveButton.setVisibility(s.length() == 0 ? View.INVISIBLE : View.VISIBLE);
  if (s.length() > 0) {
    mListener.onInputChanged(s.toString());
  }
}","@Override public void onTextChanged(CharSequence s,int start,int before,int count){
  mRemoveButton.setVisibility(s.length() == 0 ? View.INVISIBLE : View.VISIBLE);
  if (s.length() >= 0) {
    mListener.onInputChanged(s.toString());
  }
}",0.9978947368421052
36947,"@Override public void onClick(View view){
}","@Override public void onClick(View view){
  Integer viewId=view.getId();
switch (viewId) {
case R.id.button_speaker:
    toggleSpeaker();
  updateCallButton(viewId,true);
break;
case R.id.button_microphone:
if (mConnected) {
toggleMute();
updateCallButton(viewId,true);
}
break;
case R.id.button_keypad:
if (mConnected) {
toggleDialPad();
updateCallButton(viewId,true);
}
break;
case R.id.button_onhold:
if (mConnected) {
toggleOnHold();
updateCallButton(viewId,true);
}
break;
case R.id.button_hangup:
if (mServiceBound) {
mSipService.hangUp(mSipService.getCurrentCall());
mStateView.setText(R.string.call_hangup);
finishWithDelay();
}
break;
case R.id.button_reject:
if (mServiceBound) {
mSipService.decline(mSipService.getCurrentCall());
mAnalyticsHelper.sendEvent(getString(R.string.analytics_event_category_call),getString(R.string.analytics_event_action_inbound),getString(R.string.analytics_event_label_declined));
finishWithDelay();
}
break;
case R.id.button_pickup:
if (mServiceBound) {
mSipService.answer(mSipService.getCurrentCall());
mAnalyticsHelper.sendEvent(getString(R.string.analytics_event_category_call),getString(R.string.analytics_event_action_inbound),getString(R.string.analytics_event_label_accepted));
}
break;
}
}",0.0670826833073322
36948,"@Override public void onCallDisconnected(final Call call){
  try {
    mSipAccount.setRegistration(false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (!mUserHangupCall && mCallIsConnected) {
    mToneGenerator.startTone(ToneGenerator.TONE_CDMA_NETWORK_BUSY,1500);
  }
  setCurrentCall(null);
  if (PhonePermission.hasPermission(getApplicationContext())) {
    unregisterReceiver(mGsmCallListener);
  }
  broadcast(SipConstants.CALL_DISCONNECTED_MESSAGE);
  stopSelf();
}","@Override public void onCallDisconnected(final Call call){
  try {
    mSipAccount.setRegistration(false);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (!mUserHangupCall && mCallIsConnected) {
    mToneGenerator.startTone(ToneGenerator.TONE_CDMA_NETWORK_BUSY,1500);
  }
  setCurrentCall(null);
  if (PhonePermission.hasPermission(getApplicationContext()) && mCallIsConnected) {
    unregisterReceiver(mGsmCallListener);
  }
  broadcast(SipConstants.CALL_DISCONNECTED_MESSAGE);
  stopSelf();
}",0.98
36949,"/** 
 * Translate the callback to the interface, which is currently implemented by the SipService.
 * @see CallStatus
 * @param onCallStateParam parameters containing the state of an active call.
 */
@Override public void onCallState(OnCallStateParam onCallStateParam){
  try {
    CallInfo info=getInfo();
    pjsip_inv_state callState=info.getState();
    if (callState == pjsip_inv_state.PJSIP_INV_STATE_CALLING) {
      mOutgoingCall=true;
    }
 else     if (callState == pjsip_inv_state.PJSIP_INV_STATE_CONNECTING || callState == pjsip_inv_state.PJSIP_INV_STATE_EARLY) {
      if (callState == pjsip_inv_state.PJSIP_INV_STATE_EARLY) {
        if (!hasMedia() && mOutgoingCall) {
          mCallStatus.onCallStartRingback();
        }
      }
      pjsip_status_code lastStatusCode=info.getLastStatusCode();
      if (hasMedia() && (lastStatusCode == pjsip_status_code.PJSIP_SC_PROGRESS || lastStatusCode == pjsip_status_code.PJSIP_SC_OK)) {
        mCallStatus.onCallStopRingback();
      }
    }
 else     if (callState == pjsip_inv_state.PJSIP_INV_STATE_CONFIRMED) {
      mCallStatus.onCallStopRingback();
      mCallStatus.onCallConnected(this);
    }
 else     if (callState == pjsip_inv_state.PJSIP_INV_STATE_DISCONNECTED) {
      mCallStatus.onCallDisconnected(this);
      mCallStatus.onCallStopRingback();
      this.delete();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    mCallStatus.onCallInvalidState(this,e);
  }
}","/** 
 * Translate the callback to the interface, which is currently implemented by the SipService.
 * @see CallStatus
 * @param onCallStateParam parameters containing the state of an active call.
 */
@Override public void onCallState(OnCallStateParam onCallStateParam){
  try {
    CallInfo info=getInfo();
    pjsip_inv_state callState=info.getState();
    if (callState == pjsip_inv_state.PJSIP_INV_STATE_CALLING) {
      mOutgoingCall=true;
    }
 else     if (callState == pjsip_inv_state.PJSIP_INV_STATE_CONNECTING || callState == pjsip_inv_state.PJSIP_INV_STATE_EARLY) {
      if (callState == pjsip_inv_state.PJSIP_INV_STATE_EARLY) {
        if (!hasMedia() && mOutgoingCall) {
          mCallStatus.onCallStartRingback();
        }
      }
      pjsip_status_code lastStatusCode=info.getLastStatusCode();
      if (hasMedia() && (lastStatusCode == pjsip_status_code.PJSIP_SC_PROGRESS || lastStatusCode == pjsip_status_code.PJSIP_SC_OK)) {
        mCallStatus.onCallStopRingback();
      }
    }
 else     if (callState == pjsip_inv_state.PJSIP_INV_STATE_CONFIRMED) {
      mCallStatus.onCallStopRingback();
      mCallStatus.onCallConnected(this);
    }
 else     if (callState == pjsip_inv_state.PJSIP_INV_STATE_DISCONNECTED) {
      mCallStatus.onCallStopRingback();
      mCallStatus.onCallDisconnected(this);
      this.delete();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    mCallStatus.onCallInvalidState(this,e);
  }
}",0.9696760854583046
36950,"/** 
 * @param phoneNumber the number that tried call in.
 * @param callerId pretty name of the phonenumber that tied to call in.
 * @param messageStartTime message roundtrip throughput timestamp handled as String for loggingpurposes.
 */
private void startSipService(String phoneNumber,String callerId,String url,String token,String messageStartTime){
  Intent intent=new Intent(this,SipService.class);
  intent.setAction(SipConstants.ACTION_VIALER_INCOMING);
  intent.setData(SipUri.build(this,phoneNumber));
  intent.putExtra(SipConstants.EXTRA_RESPONSE_URL,url);
  intent.putExtra(SipConstants.EXTRA_REQUEST_TOKEN,token);
  intent.putExtra(SipConstants.EXTRA_PHONE_NUMBER,phoneNumber);
  intent.putExtra(SipConstants.EXTRA_CONTACT_NAME,callerId);
  intent.putExtra(VialerGcmListenerService.MESSAGE_START_TIME,messageStartTime);
  startService(intent);
}","/** 
 * @param phoneNumber the number that tried call in.
 * @param callerId pretty name of the phonenumber that tied to call in.
 * @param messageStartTime message roundtrip throughput timestamp handled as String for loggingpurposes.
 */
private void startSipService(String phoneNumber,String callerId,String url,String token,String messageStartTime){
  Intent intent=new Intent(this,SipService.class);
  intent.setAction(SipConstants.ACTION_VIALER_INCOMING);
  Uri sipAddressUri=SipUri.sipAddressUri(this,PhoneNumberUtils.format(phoneNumber));
  intent.setData(sipAddressUri);
  intent.putExtra(SipConstants.EXTRA_RESPONSE_URL,url);
  intent.putExtra(SipConstants.EXTRA_REQUEST_TOKEN,token);
  intent.putExtra(SipConstants.EXTRA_PHONE_NUMBER,phoneNumber);
  intent.putExtra(SipConstants.EXTRA_CONTACT_NAME,callerId);
  intent.putExtra(VialerGcmListenerService.MESSAGE_START_TIME,messageStartTime);
  startService(intent);
}",0.9315375982042648
36951,"@Override public void onCreate(){
  super.onCreate();
  mHandler=new Handler();
  mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,SipConstants.RINGING_VOLUME);
  mBroadcastManager=LocalBroadcastManager.getInstance(this);
  PhoneAccount phoneAccount=new JsonStorage<PhoneAccount>(this).get(PhoneAccount.class);
  if (phoneAccount != null) {
    loadPjsip();
    mEndpoint=createEndpoint(pjsip_transport_type_e.PJSIP_TRANSPORT_UDP,createTransportConfig(getResources().getInteger(R.integer.sip_port)));
    if (mEndpoint != null) {
      setCodecPrio();
      AuthCredInfo credInfo=new AuthCredInfo(""String_Node_Str"",""String_Node_Str"",phoneAccount.getAccountId(),0,phoneAccount.getPassword());
      AccountConfig accountConfig=createAccountConfig(SipUri.build(this,phoneAccount.getAccountId()),SipUri.buildRegistrar(this),credInfo);
      mSipAccount=createSipAccount(accountConfig,this,this);
      setupCallInteractionReceiver();
      setupKeyPadInteractionReceiver();
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
 else {
    broadcast(SipConstants.SIP_SERVICE_HAS_NO_ACCOUNT);
    stopSelf();
  }
}","@Override public void onCreate(){
  super.onCreate();
  mHandler=new Handler();
  mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,SipConstants.RINGING_VOLUME);
  mBroadcastManager=LocalBroadcastManager.getInstance(this);
  PhoneAccount phoneAccount=new JsonStorage<PhoneAccount>(this).get(PhoneAccount.class);
  if (phoneAccount != null) {
    loadPjsip();
    pjsip_transport_type_e transportType=pjsip_transport_type_e.PJSIP_TRANSPORT_UDP;
    String sipTransport=this.getString(R.string.sip_transport_type);
    String tcp=""String_Node_Str"";
    if (sipTransport.equals(""String_Node_Str"")) {
      transportType=pjsip_transport_type_e.PJSIP_TRANSPORT_TCP;
      tcp=""String_Node_Str"";
    }
    mEndpoint=createEndpoint(transportType,createTransportConfig(getResources().getInteger(R.integer.sip_port)));
    if (mEndpoint != null) {
      setCodecPrio();
      AuthCredInfo credInfo=new AuthCredInfo(this.getString(R.string.sip_auth_scheme),this.getString(R.string.sip_auth_realm),phoneAccount.getAccountId(),0,phoneAccount.getPassword());
      String sipAccountRegId=SipUri.sipAddress(this,phoneAccount.getAccountId()) + tcp;
      String sipRegistratUri=SipUri.prependSIPUri(this,this.getString(R.string.sip_host)) + tcp;
      AccountConfig accountConfig=createAccountConfig(sipAccountRegId,sipRegistratUri,credInfo);
      mSipAccount=createSipAccount(accountConfig,this,this);
      setupCallInteractionReceiver();
      setupKeyPadInteractionReceiver();
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
 else {
    broadcast(SipConstants.SIP_SERVICE_HAS_NO_ACCOUNT);
    stopSelf();
  }
}",0.6760972071091766
36952,"private AccountConfig createAccountConfig(Uri idUri,Uri registrarUri,AuthCredInfo credInfo){
  AccountConfig config=new AccountConfig();
  config.setIdUri(idUri.toString());
  config.getRegConfig().setRegistrarUri(registrarUri.toString());
  config.getSipConfig().getAuthCreds().add(credInfo);
  return config;
}","private AccountConfig createAccountConfig(String idUri,String registrarUri,AuthCredInfo credInfo){
  AccountConfig config=new AccountConfig();
  config.setIdUri(idUri);
  config.getRegConfig().setRegistrarUri(registrarUri);
  config.getSipConfig().getAuthCreds().add(credInfo);
  config.getSipConfig().getProxies().add(registrarUri);
  return config;
}",0.5753012048192772
36953,"private void callVisibleForUser(Call call,String type,String number,String callerId){
  Intent intent=new Intent(this,CallActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.setDataAndType(SipUri.build(this,number),type);
  intent.putExtra(CallActivity.CONTACT_NAME,callerId);
  intent.putExtra(CallActivity.PHONE_NUMBER,number);
  startActivity(intent);
}","private void callVisibleForUser(Call call,String type,String number,String callerId){
  Intent intent=new Intent(this,CallActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  Uri sipAddressUri=SipUri.sipAddressUri(this,PhoneNumberUtils.format(number));
  intent.setDataAndType(sipAddressUri,type);
  intent.putExtra(CallActivity.CONTACT_NAME,callerId);
  intent.putExtra(CallActivity.PHONE_NUMBER,number);
  startActivity(intent);
}",0.8478260869565217
36954,"/** 
 * Setup a call using SIP
 * @param number
 * @param contactName
 */
private void callWithSip(String number,String contactName){
  Intent intent=new Intent(mContext,SipService.class);
  intent.setAction(SipConstants.ACTION_VIALER_OUTGOING);
  intent.setData(SipUri.build(mContext,number));
  intent.putExtra(SipConstants.EXTRA_PHONE_NUMBER,number);
  intent.putExtra(SipConstants.EXTRA_CONTACT_NAME,contactName);
  mContext.startService(intent);
  mAnalyticsHelper.send(mContext.getString(R.string.analytics_dimension),mContext.getString(R.string.analytics_event_category_call),mContext.getString(R.string.analytics_event_action_outbound),mContext.getString(R.string.analytics_event_label_sip));
}","/** 
 * Setup a call using SIP
 * @param number
 * @param contactName
 */
private void callWithSip(String number,String contactName){
  Intent intent=new Intent(mContext,SipService.class);
  intent.setAction(SipConstants.ACTION_VIALER_OUTGOING);
  Uri sipAddressUri=SipUri.sipAddressUri(mContext,PhoneNumberUtils.format(number));
  intent.setData(sipAddressUri);
  intent.putExtra(SipConstants.EXTRA_PHONE_NUMBER,number);
  intent.putExtra(SipConstants.EXTRA_CONTACT_NAME,contactName);
  mContext.startService(intent);
  mAnalyticsHelper.send(mContext.getString(R.string.analytics_dimension),mContext.getString(R.string.analytics_event_category_call),mContext.getString(R.string.analytics_event_action_outbound),mContext.getString(R.string.analytics_event_label_sip));
}",0.9184782608695652
36955,"/** 
 * Function to get the phone linked to the user.
 * @return PhoneAccount object or null.
 */
public PhoneAccount getLinkedPhoneAccount(){
  Call<SystemUser> call=mApi.systemUser();
  PhoneAccount phoneAccount=null;
  try {
    Response<SystemUser> response=call.execute();
    if (response.isSuccess() && response.body() != null) {
      SystemUser systemUser=response.body();
      mPreferences.setSipPermission(systemUser.hasSipPermission());
      String phoneAccountId=systemUser.getPhoneAccountId();
      if (phoneAccountId != null) {
        Call<PhoneAccount> phoneAccountCall=mApi.phoneAccount(phoneAccountId);
        Response<PhoneAccount> phoneAccountResponse=phoneAccountCall.execute();
        if (phoneAccountResponse.isSuccess() && phoneAccountResponse.body() != null) {
          phoneAccount=phoneAccountResponse.body();
        }
      }
    }
  }
 catch (  IOException e) {
    return phoneAccount;
  }
  return phoneAccount;
}","/** 
 * Function to get the phone linked to the user.
 * @return PhoneAccount object or null.
 */
public PhoneAccount getLinkedPhoneAccount(){
  Call<SystemUser> call=mApi.systemUser();
  PhoneAccount phoneAccount=null;
  try {
    Response<SystemUser> response=call.execute();
    if (response.isSuccess() && response.body() != null) {
      SystemUser systemUser=response.body();
      mPreferences.setSipPermission(systemUser.hasSipPermission());
      String phoneAccountId=systemUser.getPhoneAccountId();
      if (phoneAccountId != null) {
        Call<PhoneAccount> phoneAccountCall=mApi.phoneAccount(phoneAccountId);
        Response<PhoneAccount> phoneAccountResponse=phoneAccountCall.execute();
        if (phoneAccountResponse.isSuccess() && phoneAccountResponse.body() != null) {
          phoneAccount=phoneAccountResponse.body();
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return phoneAccount;
}",0.9800420168067226
36956,"public void processTable(int[] table_array){
  Instance iExample=null;
  try {
    int tableid;
    Instances data;
    FastVector atts;
    FastVector attVals;
    double[] vals;
    int i;
    String Caption=""String_Node_Str"";
    String WholeHeader=""String_Node_Str"";
    String WholeStub=""String_Node_Str"";
    String WholeSuperRow=""String_Node_Str"";
    String WholeData=""String_Node_Str"";
    String RefereingSentences=""String_Node_Str"";
    int PMC=0;
    atts=new FastVector();
    atts.addElement(new Attribute(""String_Node_Str""));
    atts.addElement(new Attribute(""String_Node_Str""));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    FastVector fvClassVal=new FastVector(4);
    fvClassVal.addElement(""String_Node_Str"");
    fvClassVal.addElement(""String_Node_Str"");
    fvClassVal.addElement(""String_Node_Str"");
    fvClassVal.addElement(""String_Node_Str"");
    Attribute ClassAttribute=new Attribute(""String_Node_Str"",fvClassVal);
    atts.addElement(ClassAttribute);
    data=new Instances(""String_Node_Str"",atts,0);
    String SQL=""String_Node_Str"" + Arrays.toString(table_array);
    SQL=SQL.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Statement st=conn.createStatement();
    rs=st.executeQuery(SQL);
    while (rs.next()) {
      tableid=rs.getInt(1);
      String SQL2=""String_Node_Str"" + tableid;
      Statement st2=conn.createStatement();
      ResultSet rs1=st2.executeQuery(SQL2);
      while (rs1.next()) {
        Caption=rs1.getString(3);
        PMC=rs1.getInt(12);
      }
      SQL=""String_Node_Str"" + tableid;
      Statement st3=conn.createStatement();
      ResultSet rs2=st3.executeQuery(SQL);
      while (rs2.next()) {
        int cell_id=rs2.getInt(1);
        String SQL3=""String_Node_Str"" + cell_id;
        Statement st4=conn.createStatement();
        ResultSet rs4=st4.executeQuery(SQL3);
        while (rs4.next()) {
          int CellRole=rs4.getInt(2);
          if (CellRole == 1) {
            WholeHeader+=""String_Node_Str"" + rs4.getString(13).toLowerCase();
          }
          if (CellRole == 2) {
            WholeStub+=""String_Node_Str"" + rs4.getString(13).toLowerCase();
          }
          if (CellRole == 3) {
            WholeData+=""String_Node_Str"" + rs4.getString(13).toLowerCase();
          }
          if (CellRole == 4) {
            WholeSuperRow+=""String_Node_Str"" + rs4.getString(13).toLowerCase();
          }
        }
      }
      SQL=""String_Node_Str"" + tableid;
      Statement st4=conn.createStatement();
      ResultSet rs5=st4.executeQuery(SQL);
      while (rs5.next()) {
        RefereingSentences+=""String_Node_Str"" + rs5.getString(2);
      }
      vals=new double[data.numAttributes()];
      vals[0]=PMC;
      vals[1]=tableid;
      vals[2]=data.attribute(2).addStringValue(Caption);
      vals[3]=data.attribute(3).addStringValue(WholeHeader);
      vals[4]=data.attribute(4).addStringValue(WholeStub);
      vals[5]=data.attribute(5).addStringValue(WholeSuperRow);
      vals[6]=data.attribute(6).addStringValue(WholeData);
      vals[7]=data.attribute(7).addStringValue(RefereingSentences);
      iExample=new DenseInstance(1.0,vals);
      data.add(iExample);
    }
    ArffSaver saver=new ArffSaver();
    saver.setInstances(data);
    saver.setFile(new File(""String_Node_Str""));
    saver.writeBatch();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public void processTable(int[] table_array){
  Instance iExample=null;
  try {
    int tableid;
    Instances data;
    FastVector atts;
    FastVector attVals;
    double[] vals;
    int i;
    String Caption=""String_Node_Str"";
    String WholeHeader=""String_Node_Str"";
    String WholeStub=""String_Node_Str"";
    String WholeSuperRow=""String_Node_Str"";
    String WholeData=""String_Node_Str"";
    String RefereingSentences=""String_Node_Str"";
    int PMC=0;
    atts=new FastVector();
    atts.addElement(new Attribute(""String_Node_Str""));
    atts.addElement(new Attribute(""String_Node_Str""));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    atts.addElement(new Attribute(""String_Node_Str"",(FastVector)null));
    FastVector fvClassVal=new FastVector(4);
    fvClassVal.addElement(""String_Node_Str"");
    fvClassVal.addElement(""String_Node_Str"");
    fvClassVal.addElement(""String_Node_Str"");
    fvClassVal.addElement(""String_Node_Str"");
    Attribute ClassAttribute=new Attribute(""String_Node_Str"",fvClassVal);
    atts.addElement(ClassAttribute);
    data=new Instances(""String_Node_Str"",atts,3);
    String SQL=""String_Node_Str"" + Arrays.toString(table_array);
    SQL=SQL.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Statement st=conn.createStatement();
    rs=st.executeQuery(SQL);
    while (rs.next()) {
      Caption=""String_Node_Str"";
      WholeHeader=""String_Node_Str"";
      WholeStub=""String_Node_Str"";
      WholeSuperRow=""String_Node_Str"";
      WholeData=""String_Node_Str"";
      RefereingSentences=""String_Node_Str"";
      tableid=rs.getInt(1);
      String SQL2=""String_Node_Str"" + tableid;
      Statement st2=conn.createStatement();
      ResultSet rs1=st2.executeQuery(SQL2);
      while (rs1.next()) {
        Caption=rs1.getString(3);
        PMC=rs1.getInt(12);
      }
      SQL=""String_Node_Str"" + tableid;
      Statement st3=conn.createStatement();
      ResultSet rs2=st3.executeQuery(SQL);
      while (rs2.next()) {
        int cell_id=rs2.getInt(1);
        String SQL3=""String_Node_Str"" + cell_id;
        Statement st4=conn.createStatement();
        ResultSet rs4=st4.executeQuery(SQL3);
        while (rs4.next()) {
          int CellRole=rs4.getInt(2);
          if (CellRole == 1) {
            WholeHeader+=""String_Node_Str"" + rs4.getString(13).toLowerCase();
          }
          if (CellRole == 2) {
            WholeStub+=""String_Node_Str"" + rs4.getString(13).toLowerCase();
          }
          if (CellRole == 3) {
            WholeData+=""String_Node_Str"" + rs4.getString(13).toLowerCase();
          }
          if (CellRole == 4) {
            WholeSuperRow+=""String_Node_Str"" + rs4.getString(13).toLowerCase();
          }
        }
      }
      SQL=""String_Node_Str"" + tableid;
      Statement st4=conn.createStatement();
      ResultSet rs5=st4.executeQuery(SQL);
      while (rs5.next()) {
        RefereingSentences+=""String_Node_Str"" + rs5.getString(2);
      }
      vals=new double[data.numAttributes()];
      vals[0]=PMC;
      vals[1]=tableid;
      vals[2]=data.attribute(2).addStringValue(Caption);
      vals[3]=data.attribute(3).addStringValue(WholeHeader);
      vals[4]=data.attribute(4).addStringValue(WholeStub);
      vals[5]=data.attribute(5).addStringValue(WholeSuperRow);
      vals[6]=data.attribute(6).addStringValue(WholeData);
      vals[7]=data.attribute(7).addStringValue(RefereingSentences);
      vals[8]=2;
      iExample=new DenseInstance(1.0,vals);
      data.add(iExample);
    }
    ArffSaver saver=new ArffSaver();
    saver.setInstances(data);
    saver.setFile(new File(""String_Node_Str""));
    saver.writeBatch();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9690774341937132
36957,"public static void main(String[] args){
  GetContentFeaturesARFF sp=new GetContentFeaturesARFF();
  int[] table_array={7,36,115,394,428,440,464,765,766,771,799,944,1062,1091,1098,1102,1111,1112,1127,1170,1181,1209,1217,1243,1274,1277,1279,1280,1285,1296,1297,1309,1390,1423,1424,1425,1465,1466,1486,1515,1517,1544,1551,1585,1618,1624,1635,1664,1676,1764,1792,1800,1838,1871,1875,1916,1930,1947,1951,1958,1959,1962,1963,1978,2013,2027,2045,2066,2161,2171,2249,2279,2286,2295,2316,2338,2374,2406,2532,2662,2699,2750,2778,2782,2885,2888,2923,3155,3156,3162,3176,3251,3333,3338,3369,3371,3378,3379,3391,3399,3400,3419,3420,3478,3479,3484,3514,3543,3558,3592,3661,3736,3762,3766,3811,3829,3848,3849,3888,3931,3979,4004,4019,4025,4028,4055,4068,4093,4111,4136,4163,4202,4205,4206,4209,4223,4227,4312,4350,4351,4359,4379,4380,4385,4406,4442,4485,4496,4532,4552,4559,4588,4589,4594,4595,4596,4610,4615,4617,4625,4629,4650,4664,4672,4673,4674,4675,4682,4726,4781,4798,4850,4859,4882,4883,4923,4947,4963,4973,4975,4987,4988,4999,5000,5063,5092,5093,5106,5186,5226,5240,5243,5284,5305,5322,8049,8071,8107,8117,8139,8148,293,653,1048,1658,1862,2466,2467,3272,3985,3986,4127,4868,4901,4951,5292,5602,6186,6857,7052,7103,7104,7105,7506,7507,7508,7509,7961,8163,8446,9505,11072,12375,12465,12466,12519,12559};
  sp.ProcessTables(table_array);
}","public static void main(String[] args){
  GetContentFeaturesARFF sp=new GetContentFeaturesARFF();
  int[] table_array={8929,5409,3286,3623,3020,3357,8266,1887,2914,5230,9895,9271,11081,5396,12031,8454,3472,2588,2186,6461,12513,4319,11237,169,262,2544,6936,7798,4505,4787,585,10154,4090,7574,1282,10317,11573,4838,9745,795,5905,8141,6466,1496,8121,10681,12193,5049,4429,7906,12621,7455,1463,5753,8516,604,1645,6212,7154,4271,5652,3777,4949,11019,6066,4120,821,5287,6403,1940,3421,845,1074,3236,11668,12249,7641,3219,4176,6310,7979,10274,1939,151,8912,10566,12663,2904,2747,5175,10258,9669,11743,3469,9870,7296,6597,1941,6677,538,9700,3505,7815,2473,6435,3717,11334,4220,11252,11300,1331,4151,5556,4875,7155,3041,4234,7712,12040,6712,8259,5729,481,8377,4092,8947,9528,2538,1328,1773,3619,1034,11430,2922,8663,10376,2647,4449,3704,6338,7500,5417,879,3493,11560,8416,8513,4243,9400,4037,4919,11843,7535,5707,2015,1257,4075,5919,647,6539,6886,7635,6732,8662,2207,3573,7060,8799,8198,1018,498,3962,411,4018,8485,801,7224,3168,5354,8369,4493,10290,3614,6877,7091,132,2090,10429,7348,1859,732,6385,424,220,11978,1136,546,5765,2883,8543,8666,7947,16,4519,8076,11375,12771,3101,5080,1808,1493,2050,11525,5318,3821};
  sp.ProcessTables(table_array);
}",0.1214480342545737
36958,"/** 
 * Read table caption.
 * @param tablexmlNode the tablexml node
 * @return the string
 */
public String readTableCaption(Element tablexmlNode){
  String caption=""String_Node_Str"";
  List<Element> nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  Elements inDivChild=tablexmlNode.parent().getAllElements().first().children();
  for (int i=0; i < inDivChild.size(); i++) {
    Element el=inDivChild.get(i);
    if (i + 1 < inDivChild.size()) {
      Element tableel=inDivChild.get(i + 1);
      if (tableel.tagName().equals(""String_Node_Str"")) {
        caption=el.text();
      }
    }
  }
  nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  return caption;
}","/** 
 * Read table caption.
 * @param tablexmlNode the tablexml node
 * @return the string
 */
public String readTableCaption(Element tablexmlNode){
  String caption=""String_Node_Str"";
  boolean captionFound=false;
  List<Element> nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  Elements inDivChild=tablexmlNode.parent().getAllElements().first().children();
  for (int i=0; i < inDivChild.size(); i++) {
    Element el=inDivChild.get(i);
    if (i + 1 < inDivChild.size()) {
      Element tableel=inDivChild.get(i + 1);
      if (tableel.tagName().equals(""String_Node_Str"") && captionFound == false && tableel.equals(tablexmlNode)) {
        caption=el.text();
        captionFound=true;
      }
    }
  }
  nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  return caption;
}",0.9352272727272728
36959,"/** 
 * Read table footer.
 * @param tablesxmlNode the tablesxml node
 * @return the string
 */
public String ReadTableFooter(Element tablesxmlNode){
  String caption=""String_Node_Str"";
  List<Element> nl=getChildrenByTagName(tablesxmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  nl=getChildrenByTagName(tablesxmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    for (int i=0; i < nl.size(); i++) {
      caption+=Utilities.getString(nl.get(i)) + '\n';
    }
  }
  Elements inDivChild=tablesxmlNode.parent().getAllElements().first().children();
  boolean isafterTable=false;
  for (int i=0; i < inDivChild.size(); i++) {
    Element el=inDivChild.get(i);
    if (el.tagName().equals(""String_Node_Str"")) {
      isafterTable=true;
      continue;
    }
    if (isafterTable) {
      caption+=el.text() + '\n';
    }
  }
  nl=getChildrenByTagName(tablesxmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  return caption;
}","/** 
 * Read table footer.
 * @param tablesxmlNode the tablesxml node
 * @return the string
 */
public String ReadTableFooter(Element tablesxmlNode){
  String caption=""String_Node_Str"";
  List<Element> nl=getChildrenByTagName(tablesxmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  nl=getChildrenByTagName(tablesxmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    for (int i=0; i < nl.size(); i++) {
      caption+=Utilities.getString(nl.get(i)) + '\n';
    }
  }
  Elements inDivChild=tablesxmlNode.parent().getAllElements().first().children();
  boolean isafterTable=false;
  for (int i=0; i < inDivChild.size(); i++) {
    Element el=inDivChild.get(i);
    if (el.tagName().equals(""String_Node_Str"") && el.equals(tablesxmlNode)) {
      isafterTable=true;
      continue;
    }
    if (isafterTable && !el.tagName().equals(""String_Node_Str"")) {
      caption+=el.text() + '\n';
    }
    if (el.tagName().equals(""String_Node_Str"")) {
      isafterTable=false;
    }
  }
  nl=getChildrenByTagName(tablesxmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  return caption;
}",0.930486142662426
36960,"/** 
 * Process list table. List table is a table that forms data in a list. It can have multiple columns for space saving, but generally it is one dimensional list
 * @param cells the table object. 2 dimensional array of Cell object
 * @param table Table object
 * @param art the Article object
 * @param tableFileName the table file name
 */
public Table processListTable(Cell[][] cells,Table table,Article art,String tableFileName){
  if (cells == null || cells.length == 0 || cells[0] == null || cells[0].length == 0)   return table;
  if (table.getTableStructureType() != Table.StructureType.LIST && table.getTableStructureType() != null) {
    return table;
  }
  if (isListTable(cells,table)) {
    Statistics.addListTable();
    table.setTableStructureType(Table.StructureType.LIST);
    if (TablInExMain.ExportLinkedData) {
      TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
    }
    boolean hasSubheaders=hasSuperRowsListTable(cells,table);
    boolean TopLevel=false;
    String currentSubHeader=""String_Node_Str"";
    for (int j=0; j < cells.length; j++) {
      for (int k=0; k < cells[j].length; k++) {
        if (cells[j][k].isIs_header())         continue;
        try {
          if (hasSubheaders) {
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && cells[j + 1] != null && Utilities.numOfSpaceOrBullets(cells[j + 1][k].getCell_content()) != 0 && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && (cells[j + 2] != null && Utilities.numOfSpaceOrBullets(cells[j + 2][k].getCell_content()) != 0) && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == true && !cells[j][k].isBreakingLineOverRow() && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && !currentSubHeader.equals(""String_Node_Str"")) {
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
          }
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          for (int s=0; s < cells[0][k].headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(cells[0][k].headers.get(s));
            NavigationPath.appendChild(Header);
          }
          if (currentSubHeader != ""String_Node_Str"") {
            Element SubHeader=doc.createElement(""String_Node_Str"");
            SubHeader.setTextContent(currentSubHeader);
            NavigationPath.appendChild(SubHeader);
          }
          cell.appendChild(NavigationPath);
          cells[j][k].setHeader_values(cells[0][k].getCell_content());
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableA=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableA);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableA.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableA.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableA.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableA.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(""String_Node_Str"",null,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),""String_Node_Str"",j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
  return table;
}","/** 
 * Process list table. List table is a table that forms data in a list. It can have multiple columns for space saving, but generally it is one dimensional list
 * @param cells the table object. 2 dimensional array of Cell object
 * @param table Table object
 * @param art the Article object
 * @param tableFileName the table file name
 */
public Table processListTable(Cell[][] cells,Table table,Article art,String tableFileName){
  if (cells == null || cells.length == 0 || cells[0] == null || cells[0].length == 0)   return table;
  if (table.getTableStructureType() != Table.StructureType.LIST && table.getTableStructureType() != null) {
    return table;
  }
  if (isListTable(cells,table)) {
    Statistics.addListTable();
    table.setTableStructureType(Table.StructureType.LIST);
    if (TablInExMain.ExportLinkedData) {
      TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
    }
    boolean hasSubheaders=hasSuperRowsListTable(cells,table);
    boolean TopLevel=false;
    String currentSubHeader=""String_Node_Str"";
    String SubHeaderIndex=""String_Node_Str"";
    for (int j=0; j < cells.length; j++) {
      for (int k=0; k < cells[j].length; k++) {
        if (cells[j][k].isIs_header())         continue;
        if (cells[j][k].isIs_stub())         cells[j][k].setIs_stub(false);
        try {
          if (hasSubheaders) {
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && cells[j + 1] != null && Utilities.numOfSpaceOrBullets(cells[j + 1][k].getCell_content()) != 0 && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              cells[j][k].setIs_subheader(true);
              SubHeaderIndex=j + ""String_Node_Str"" + k;
              continue;
            }
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && (cells[j + 2] != null && Utilities.numOfSpaceOrBullets(cells[j + 2][k].getCell_content()) != 0) && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              cells[j][k].setIs_subheader(true);
              SubHeaderIndex=j + ""String_Node_Str"" + k;
              continue;
            }
            if (TopLevel == true && !cells[j][k].isBreakingLineOverRow() && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && !currentSubHeader.equals(""String_Node_Str"")) {
              currentSubHeader=cells[j][k].getCell_content();
              cells[j][k].setIs_subheader(true);
              SubHeaderIndex=j + ""String_Node_Str"" + k;
              continue;
            }
          }
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          for (int s=0; s < cells[0][k].headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(cells[0][k].headers.get(s));
            NavigationPath.appendChild(Header);
          }
          if (currentSubHeader != ""String_Node_Str"") {
            Element SubHeader=doc.createElement(""String_Node_Str"");
            SubHeader.setTextContent(currentSubHeader);
            cells[j][k].setSuperRowIndex(SubHeaderIndex);
            NavigationPath.appendChild(SubHeader);
          }
          cell.appendChild(NavigationPath);
          cells[j][k].setHeader_values(cells[0][k].getCell_content());
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableA=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableA);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableA.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableA.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableA.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableA.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(""String_Node_Str"",null,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),""String_Node_Str"",j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
  table.cells=cells;
  table.original_cells=cells;
  return table;
}",0.8541684590897358
36961,"public void SaveArticleAnnotationToDB(Article art){
  try {
    Statement stmt=conn.createStatement();
    String insertTableSQL=""String_Node_Str"";
    PreparedStatement preparedStatement=conn.prepareStatement(insertTableSQL,Statement.RETURN_GENERATED_KEYS);
    preparedStatement.setString(1,art.getPmc());
    preparedStatement.setString(2,art.getPmid());
    preparedStatement.setString(3,art.getPissn());
    preparedStatement.setString(4,art.getPissn());
    preparedStatement.setString(5,art.getTitle());
    preparedStatement.setString(6,art.getAbstract());
    preparedStatement.setString(7,art.getJournal_name());
    preparedStatement.setString(8,art.getPublisher_name());
    preparedStatement.setString(9,art.getPublisher_loc());
    int articleId=preparedStatement.executeUpdate();
    ResultSet rs1=preparedStatement.getGeneratedKeys();
    if (rs1.next()) {
      articleId=rs1.getInt(1);
    }
    Statement stmt12=conn.createStatement();
    String insertTableSQL12=""String_Node_Str"";
    PreparedStatement preparedStatement12=conn.prepareStatement(insertTableSQL12,Statement.RETURN_GENERATED_KEYS);
    preparedStatement12.setString(1,art.getPmid());
    preparedStatement12.setString(2,art.getPmid());
    preparedStatement12.setString(3,art.getPissn());
    preparedStatement12.setString(4,art.getEissn());
    preparedStatement12.setString(5,art.getXML());
    preparedStatement12.setInt(6,articleId);
    int TableXMLId=preparedStatement12.executeUpdate();
    ResultSet rs12=preparedStatement12.getGeneratedKeys();
    if (rs12.next()) {
      TableXMLId=rs12.getInt(1);
    }
    int authorId=-1;
    for (int i=0; i < art.getAuthors().size(); i++) {
      Statement stmt2=conn.createStatement();
      String insertTableSQL2=""String_Node_Str"";
      PreparedStatement preparedStatement2=conn.prepareStatement(insertTableSQL2,Statement.RETURN_GENERATED_KEYS);
      String AuthorName=art.getAuthors().get(i).name;
      String AuthorFName=""String_Node_Str"";
      String AuthorSName=""String_Node_Str"";
      String[] AuthorFirstSecondName=AuthorName.split(""String_Node_Str"");
      if (AuthorFirstSecondName.length > 1)       AuthorFName=AuthorFirstSecondName[1];
      AuthorSName=AuthorFirstSecondName[0];
      preparedStatement2.setString(1,AuthorFName);
      preparedStatement2.setString(2,AuthorSName);
      preparedStatement2.setInt(3,articleId);
      authorId=preparedStatement2.executeUpdate();
      ResultSet rs=preparedStatement2.getGeneratedKeys();
      if (rs.next()) {
        authorId=rs.getInt(1);
      }
      Statement stmt4=conn.createStatement();
      String insertTableSQL4=""String_Node_Str"";
      PreparedStatement preparedStatement4=conn.prepareStatement(insertTableSQL4,Statement.RETURN_GENERATED_KEYS);
      preparedStatement4.setString(1,art.getAuthors().get(i).email);
      preparedStatement4.setInt(2,authorId);
      int EmailId=preparedStatement4.executeUpdate();
      ResultSet rs3=preparedStatement4.getGeneratedKeys();
      if (rs3.next()) {
        EmailId=rs3.getInt(1);
      }
      LinkedList<String> affs=art.getAuthors().get(i).affiliation;
      for (int j=0; j < affs.size(); j++) {
        Statement stmt5=conn.createStatement();
        String insertTableSQL5=""String_Node_Str"";
        PreparedStatement preparedStatement5=conn.prepareStatement(insertTableSQL5,Statement.RETURN_GENERATED_KEYS);
        preparedStatement5.setString(1,affs.get(j));
        preparedStatement5.setInt(2,authorId);
        int AffId=preparedStatement5.executeUpdate();
        ResultSet rs4=preparedStatement5.getGeneratedKeys();
        if (rs4.next()) {
          AffId=rs4.getInt(1);
        }
      }
    }
    Table[] Tables=art.getTables();
    for (int i=0; i < Tables.length; i++) {
      Statement stmt6=conn.createStatement();
      String insertTableSQL6=""String_Node_Str"";
      PreparedStatement preparedStatement6=conn.prepareStatement(insertTableSQL6,Statement.RETURN_GENERATED_KEYS);
      preparedStatement6.setString(1,Tables[i].getTable_title());
      preparedStatement6.setString(2,Tables[i].getTable_caption());
      preparedStatement6.setString(3,Tables[i].getTable_footer());
      preparedStatement6.setString(4,Tables[i].getTableStructureType().name());
      preparedStatement6.setString(5,Tables[i].PragmaticClass);
      if (Tables[i].isNoXMLTable())       preparedStatement6.setString(6,""String_Node_Str"");
 else       preparedStatement6.setString(6,""String_Node_Str"");
      preparedStatement6.setInt(7,articleId);
      int TableId=preparedStatement6.executeUpdate();
      ResultSet rs4=preparedStatement6.getGeneratedKeys();
      if (rs4.next()) {
        TableId=rs4.getInt(1);
      }
      Cell[][] cells=Tables[i].cells;
      for (int j=0; j < cells.length; j++) {
        for (int k=0; k < cells.length; k++) {
          Statement stmt7=conn.createStatement();
          String insertTableSQL7=""String_Node_Str"";
          PreparedStatement preparedStatement7=conn.prepareStatement(insertTableSQL7,Statement.RETURN_GENERATED_KEYS);
          preparedStatement7.setString(1,""String_Node_Str"" + j + ""String_Node_Str""+ k);
          preparedStatement7.setString(2,cells[j][k].getCellType());
          preparedStatement7.setInt(3,TableId);
          preparedStatement7.setString(4,cells[j][k].getRow_number() + ""String_Node_Str"");
          preparedStatement7.setString(5,cells[j][k].getColumn_number() + ""String_Node_Str"");
          preparedStatement7.setString(6,cells[j][k].getHeader_ref());
          preparedStatement7.setString(7,cells[j][k].getStub_ref());
          preparedStatement7.setString(8,cells[j][k].getSuper_row_ref());
          preparedStatement7.setString(9,cells[j][k].getCell_content());
          int CellId=preparedStatement7.executeUpdate();
          ResultSet rs5=preparedStatement7.getGeneratedKeys();
          if (rs5.next()) {
            CellId=rs5.getInt(1);
          }
          for (int l=0; l < cells[j][k].CellRoles.size(); l++) {
            String insertTableSQL8=""String_Node_Str"";
            PreparedStatement preparedStatement8=conn.prepareStatement(insertTableSQL8,Statement.RETURN_GENERATED_KEYS);
            if (cells[j][k].CellRoles.get(l).equals(""String_Node_Str"")) {
              preparedStatement8.setInt(1,1);
            }
            if (cells[j][k].CellRoles.get(l).equals(""String_Node_Str"")) {
              preparedStatement8.setInt(1,2);
            }
            if (cells[j][k].CellRoles.get(l).equals(""String_Node_Str"")) {
              preparedStatement8.setInt(1,3);
            }
            if (cells[j][k].CellRoles.get(l).equals(""String_Node_Str"")) {
              preparedStatement8.setInt(1,4);
            }
            preparedStatement8.setInt(2,CellId);
            preparedStatement8.executeUpdate();
          }
          LinkedList<Annotation> annot=cells[j][k].annotations;
          for (int l=0; l < annot.size(); l++) {
            Statement stmt8=conn.createStatement();
            String insertTableSQL8=""String_Node_Str"";
            PreparedStatement preparedStatement8=conn.prepareStatement(insertTableSQL8,Statement.RETURN_GENERATED_KEYS);
            preparedStatement8.setString(1,annot.get(l).getContent());
            preparedStatement8.setInt(2,annot.get(l).getStart());
            preparedStatement8.setInt(3,annot.get(l).getEnd());
            preparedStatement8.setString(4,annot.get(l).getID());
            preparedStatement8.setString(5,annot.get(l).getType());
            preparedStatement8.setString(6,annot.get(l).getTypeVal());
            preparedStatement8.setString(7,annot.get(l).getURL());
            preparedStatement8.setString(8,annot.get(l).getSource());
            preparedStatement8.setInt(9,CellId);
            preparedStatement8.executeUpdate();
          }
        }
      }
    }
  }
 catch (  SQLException ex) {
    System.out.println(""String_Node_Str"" + ex.getMessage());
    System.out.println(""String_Node_Str"" + ex.getSQLState());
    System.out.println(""String_Node_Str"" + ex.getErrorCode());
  }
catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public void SaveArticleAnnotationToDB(Article art){
  try {
    Statement stmt=conn.createStatement();
    String insertTableSQL=""String_Node_Str"";
    PreparedStatement preparedStatement=conn.prepareStatement(insertTableSQL,Statement.RETURN_GENERATED_KEYS);
    preparedStatement.setString(1,art.getPmc());
    preparedStatement.setString(2,art.getPmid());
    preparedStatement.setString(3,art.getPissn());
    preparedStatement.setString(4,art.getPissn());
    preparedStatement.setString(5,art.getTitle());
    preparedStatement.setString(6,art.getAbstract());
    preparedStatement.setString(7,art.getJournal_name());
    preparedStatement.setString(8,art.getPublisher_name());
    preparedStatement.setString(9,art.getPublisher_loc());
    int articleId=preparedStatement.executeUpdate();
    ResultSet rs1=preparedStatement.getGeneratedKeys();
    if (rs1.next()) {
      articleId=rs1.getInt(1);
    }
    Statement stmt12=conn.createStatement();
    String insertTableSQL12=""String_Node_Str"";
    PreparedStatement preparedStatement12=conn.prepareStatement(insertTableSQL12,Statement.RETURN_GENERATED_KEYS);
    preparedStatement12.setString(1,art.getPmid());
    preparedStatement12.setString(2,art.getPmid());
    preparedStatement12.setString(3,art.getPissn());
    preparedStatement12.setString(4,art.getEissn());
    preparedStatement12.setString(5,art.getXML());
    preparedStatement12.setInt(6,articleId);
    int TableXMLId=preparedStatement12.executeUpdate();
    ResultSet rs12=preparedStatement12.getGeneratedKeys();
    if (rs12.next()) {
      TableXMLId=rs12.getInt(1);
    }
    int authorId=-1;
    for (int i=0; i < art.getAuthors().size(); i++) {
      Statement stmt2=conn.createStatement();
      String insertTableSQL2=""String_Node_Str"";
      PreparedStatement preparedStatement2=conn.prepareStatement(insertTableSQL2,Statement.RETURN_GENERATED_KEYS);
      String AuthorName=art.getAuthors().get(i).name;
      String AuthorFName=""String_Node_Str"";
      String AuthorSName=""String_Node_Str"";
      String[] AuthorFirstSecondName=AuthorName.split(""String_Node_Str"");
      if (AuthorFirstSecondName.length > 1)       AuthorFName=AuthorFirstSecondName[1];
      AuthorSName=AuthorFirstSecondName[0];
      preparedStatement2.setString(1,AuthorFName);
      preparedStatement2.setString(2,AuthorSName);
      preparedStatement2.setInt(3,articleId);
      authorId=preparedStatement2.executeUpdate();
      ResultSet rs=preparedStatement2.getGeneratedKeys();
      if (rs.next()) {
        authorId=rs.getInt(1);
      }
      Statement stmt4=conn.createStatement();
      String insertTableSQL4=""String_Node_Str"";
      PreparedStatement preparedStatement4=conn.prepareStatement(insertTableSQL4,Statement.RETURN_GENERATED_KEYS);
      preparedStatement4.setString(1,art.getAuthors().get(i).email);
      preparedStatement4.setInt(2,authorId);
      int EmailId=preparedStatement4.executeUpdate();
      ResultSet rs3=preparedStatement4.getGeneratedKeys();
      if (rs3.next()) {
        EmailId=rs3.getInt(1);
      }
      LinkedList<String> affs=art.getAuthors().get(i).affiliation;
      for (int j=0; j < affs.size(); j++) {
        Statement stmt5=conn.createStatement();
        String insertTableSQL5=""String_Node_Str"";
        PreparedStatement preparedStatement5=conn.prepareStatement(insertTableSQL5,Statement.RETURN_GENERATED_KEYS);
        preparedStatement5.setString(1,affs.get(j));
        preparedStatement5.setInt(2,authorId);
        int AffId=preparedStatement5.executeUpdate();
        ResultSet rs4=preparedStatement5.getGeneratedKeys();
        if (rs4.next()) {
          AffId=rs4.getInt(1);
        }
      }
    }
    Table[] Tables=art.getTables();
    for (int i=0; i < Tables.length; i++) {
      Statement stmt6=conn.createStatement();
      String insertTableSQL6=""String_Node_Str"";
      PreparedStatement preparedStatement6=conn.prepareStatement(insertTableSQL6,Statement.RETURN_GENERATED_KEYS);
      preparedStatement6.setString(1,Tables[i].getTable_title());
      preparedStatement6.setString(2,Tables[i].getTable_caption());
      preparedStatement6.setString(3,Tables[i].getTable_footer());
      preparedStatement6.setString(4,Tables[i].getTableStructureType().name());
      preparedStatement6.setString(5,Tables[i].PragmaticClass);
      if (Tables[i].isNoXMLTable())       preparedStatement6.setString(6,""String_Node_Str"");
 else       preparedStatement6.setString(6,""String_Node_Str"");
      preparedStatement6.setInt(7,articleId);
      int TableId=preparedStatement6.executeUpdate();
      ResultSet rs4=preparedStatement6.getGeneratedKeys();
      if (rs4.next()) {
        TableId=rs4.getInt(1);
      }
      Cell[][] cells=Tables[i].cells;
      for (int j=0; j < cells.length; j++) {
        for (int k=0; k < cells.length; k++) {
          Statement stmt7=conn.createStatement();
          String insertTableSQL7=""String_Node_Str"";
          PreparedStatement preparedStatement7=conn.prepareStatement(insertTableSQL7,Statement.RETURN_GENERATED_KEYS);
          preparedStatement7.setString(1,""String_Node_Str"" + j + ""String_Node_Str""+ k);
          preparedStatement7.setString(2,cells[j][k].getCellType());
          preparedStatement7.setInt(3,TableId);
          preparedStatement7.setString(4,cells[j][k].getRow_number() + ""String_Node_Str"");
          preparedStatement7.setString(5,cells[j][k].getColumn_number() + ""String_Node_Str"");
          preparedStatement7.setString(6,cells[j][k].getHeader_ref());
          preparedStatement7.setString(7,cells[j][k].getStub_ref());
          preparedStatement7.setString(8,cells[j][k].getSuper_row_ref());
          preparedStatement7.setString(9,cells[j][k].getCell_content());
          preparedStatement7.setString(10,cells[j][k].getHeader_values());
          preparedStatement7.setString(11,cells[j][k].getStub_values());
          preparedStatement7.setString(12,cells[j][k].getSubheader_values());
          int CellId=preparedStatement7.executeUpdate();
          ResultSet rs5=preparedStatement7.getGeneratedKeys();
          if (rs5.next()) {
            CellId=rs5.getInt(1);
          }
          for (int l=0; l < cells[j][k].CellRoles.size(); l++) {
            String insertTableSQL8=""String_Node_Str"";
            PreparedStatement preparedStatement8=conn.prepareStatement(insertTableSQL8,Statement.RETURN_GENERATED_KEYS);
            if (cells[j][k].CellRoles.get(l).equals(""String_Node_Str"")) {
              preparedStatement8.setInt(1,1);
            }
            if (cells[j][k].CellRoles.get(l).equals(""String_Node_Str"")) {
              preparedStatement8.setInt(1,2);
            }
            if (cells[j][k].CellRoles.get(l).equals(""String_Node_Str"")) {
              preparedStatement8.setInt(1,3);
            }
            if (cells[j][k].CellRoles.get(l).equals(""String_Node_Str"")) {
              preparedStatement8.setInt(1,4);
            }
            preparedStatement8.setInt(2,CellId);
            preparedStatement8.executeUpdate();
          }
          LinkedList<Annotation> annot=cells[j][k].annotations;
          for (int l=0; l < annot.size(); l++) {
            Statement stmt8=conn.createStatement();
            String insertTableSQL8=""String_Node_Str"";
            PreparedStatement preparedStatement8=conn.prepareStatement(insertTableSQL8,Statement.RETURN_GENERATED_KEYS);
            preparedStatement8.setString(1,annot.get(l).getContent());
            preparedStatement8.setInt(2,annot.get(l).getStart());
            preparedStatement8.setInt(3,annot.get(l).getEnd());
            preparedStatement8.setString(4,annot.get(l).getID());
            preparedStatement8.setString(5,annot.get(l).getType());
            preparedStatement8.setString(6,annot.get(l).getTypeVal());
            preparedStatement8.setString(7,annot.get(l).getURL());
            preparedStatement8.setString(8,annot.get(l).getSource());
            preparedStatement8.setInt(9,CellId);
            preparedStatement8.executeUpdate();
          }
        }
      }
    }
  }
 catch (  SQLException ex) {
    System.out.println(""String_Node_Str"" + ex.getMessage());
    System.out.println(""String_Node_Str"" + ex.getSQLState());
    System.out.println(""String_Node_Str"" + ex.getErrorCode());
  }
catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9862178314428588
36962,"/** 
 * Process table body.
 * @param table the table
 * @param cells the cells
 * @param rowsbody the rowsbody
 * @param headrowscount the headrowscount
 * @param num_of_columns the num_of_columns
 * @return the table
 */
public Table ProcessTableBody(Article a,Table table,Cell[][] cells,List<Node> rowsbody,int headrowscount,int num_of_columns){
  int startj=headrowscount;
  boolean tablecounted=false;
  for (int j=0; j < rowsbody.size(); j++) {
    table.stat.AddBodyRow();
    List<Node> tds=getChildrenByTagName(rowsbody.get(j),""String_Node_Str"");
    int index=0;
    int rowindex=startj;
    for (int k=0; k < tds.size(); k++) {
      table.stat.AddUnprCell();
      List<Node> hr=getChildrenByTagName(tds.get(k),""String_Node_Str"");
      boolean isStub=false;
      float stubProbability=0;
      if (index == 0) {
        isStub=true;
        stubProbability=(float)0.9;
      }
      boolean is_colspanning=false;
      boolean is_rowspanning=false;
      int colspanVal=1;
      int rowspanVal=1;
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Utilities.getFirstValue(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setRowSpanning(true);
        Statistics.addRowSpanningCell();
        table.stat.AddRowSpanningCell();
        is_rowspanning=true;
        rowspanVal=Utilities.getFirstValue(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Utilities.getFirstValue(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setColSpanning(true);
        Statistics.addColumnSpanningCell();
        table.stat.AddColSpanningCell();
        is_colspanning=true;
        colspanVal=Utilities.getFirstValue(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      for (int l=0; l < colspanVal; l++) {
        rowindex=startj + j;
        for (int s=0; s < rowspanVal; s++) {
          try {
            while (cells[rowindex][index].isIs_filled() && index != num_of_columns)             index++;
            cells[rowindex][index]=Cell.setCellValues(a,cells[rowindex][index],Utilities.getString(tds.get(k)),is_colspanning,colspanVal,is_rowspanning,rowspanVal,false,0,isStub,stubProbability,index,rowindex,l,s);
            if (hr != null && hr.size() != 0 && hr.get(0) != null)             cells[rowindex][index].setBreakingLineOverRow(true);
            table=Statistics.statisticsForCell(table,cells[rowindex][index]);
          }
 catch (          Exception ex) {
            System.out.println(""String_Node_Str"");
          }
          rowindex++;
        }
        index++;
      }
    }
  }
  table.stat.setNum_columns(num_of_columns);
  return table;
}","/** 
 * Process table body.
 * @param table the table
 * @param cells the cells
 * @param rowsbody the rowsbody
 * @param headrowscount the headrowscount
 * @param num_of_columns the num_of_columns
 * @return the table
 */
public Table ProcessTableBody(Article a,Table table,Cell[][] cells,List<Node> rowsbody,int headrowscount,int num_of_columns){
  int startj=headrowscount;
  boolean tablecounted=false;
  for (int j=0; j < rowsbody.size(); j++) {
    table.stat.AddBodyRow();
    List<Node> tds=getChildrenByTagName(rowsbody.get(j),""String_Node_Str"");
    int index=0;
    int rowindex=startj;
    for (int k=0; k < tds.size(); k++) {
      table.stat.AddUnprCell();
      List<Node> hr=getChildrenByTagName(tds.get(k),""String_Node_Str"");
      boolean isStub=false;
      float stubProbability=0;
      if (index == 0) {
        isStub=true;
        stubProbability=(float)0.9;
      }
      boolean is_colspanning=false;
      boolean is_rowspanning=false;
      int colspanVal=1;
      int rowspanVal=1;
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Utilities.getFirstValue(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setRowSpanning(true);
        Statistics.addRowSpanningCell();
        table.stat.AddRowSpanningCell();
        is_rowspanning=true;
        rowspanVal=Utilities.getFirstValue(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Utilities.getFirstValue(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setColSpanning(true);
        Statistics.addColumnSpanningCell();
        table.stat.AddColSpanningCell();
        is_colspanning=true;
        colspanVal=Utilities.getFirstValue(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      for (int l=0; l < colspanVal; l++) {
        rowindex=startj + j;
        for (int s=0; s < rowspanVal; s++) {
          try {
            while (cells[rowindex][index].isIs_filled() && index != num_of_columns)             index++;
            cells[rowindex][index]=Cell.setCellValues(a,cells[rowindex][index],Utilities.getString(tds.get(k)),is_colspanning,colspanVal,is_rowspanning,rowspanVal,false,0,isStub,stubProbability,index,rowindex,l,s);
            if (hr != null && hr.size() != 0 && hr.get(0) != null) {
              cells[rowindex][index].setBreakingLineOverRow(true);
              isStub=false;
            }
            table=Statistics.statisticsForCell(table,cells[rowindex][index]);
          }
 catch (          Exception ex) {
            System.out.println(""String_Node_Str"");
          }
          rowindex++;
        }
        index++;
      }
    }
  }
  table.stat.setNum_columns(num_of_columns);
  return table;
}",0.992468893254748
36963,"/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      if (table.getTableStructureType() == null) {
        table.setTableStructureType(StructureType.NULL);
      }
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      if (cells != null) {
        for (int j=0; j < cells.length; j++) {
          for (int k=0; k < cells[j].length; k++) {
            Element CellEl=doc.createElement(""String_Node_Str"");
            CellsEl.appendChild(CellEl);
            Element CellID=doc.createElement(""String_Node_Str"");
            String cellIDStr=""String_Node_Str"" + j + ""String_Node_Str""+ k;
            CellID.setTextContent(cellIDStr);
            cells[j][k].CellId=cellIDStr;
            CellEl.appendChild(CellID);
            if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
              Element SuperRowRef=doc.createElement(""String_Node_Str"");
              SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
              CellEl.appendChild(SuperRowRef);
            }
            Element CellValue=doc.createElement(""String_Node_Str"");
            CellValue.setTextContent(cells[j][k].getCell_content());
            CellEl.appendChild(CellValue);
            String valueToParse=cells[j][k].getCell_content();
            LinkedList<ValueItem> valueTags=TablInExMain.vp.parseValue(valueToParse);
            Element CellSemantics=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellSemantics);
            for (int p=0; p < valueTags.size(); p++) {
              Element CellValueSemantics=doc.createElement(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).type.toString());
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).start_position + ""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).end_position + ""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).value);
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellSemantics.appendChild(CellValueSemantics);
            }
            int mathTypeIndex=valueToParse.indexOf(""String_Node_Str"");
            if (mathTypeIndex > 0) {
              valueToParse=valueToParse.substring(0,mathTypeIndex);
            }
            LinkedList<Word> words=null;
            if (valueToParse != null) {
              valueToParse=valueToParse.trim();
              if (!Utilities.isSpaceOrEmpty(valueToParse)) {
                words=TablInExMain.marvin.annotate(valueToParse);
              }
            }
            if (words != null) {
              for (int p=0; p < words.size(); p++) {
                for (int s=0; s < words.get(p).wordmeanings.size(); s++) {
                  Element Meaning=doc.createElement(""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).Source);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).id);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).URL);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).startAt + ""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).endAt + ""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).appearingWord);
                  CellSemantics.appendChild(Meaning);
                }
              }
            }
            Element CellType=doc.createElement(""String_Node_Str"");
            CellType.setTextContent(cells[j][k].getCellType());
            CellEl.appendChild(CellType);
            for (int s=j - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[j][k].isIs_header() && !cells[j - 1][k].isIs_header()) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderRef=doc.createElement(""String_Node_Str"");
                HeaderRef.setTextContent(""String_Node_Str"" + s + ""String_Node_Str""+ k);
                CellEl.appendChild(HeaderRef);
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderCatRef=doc.createElement(""String_Node_Str"");
                HeaderCatRef.setTextContent(""String_Node_Str"" + s + ""String_Node_Str""+ 0);
                CellEl.appendChild(HeaderCatRef);
                break;
              }
            }
            for (int s=k - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
                Element StubRef=doc.createElement(""String_Node_Str"");
                StubRef.setTextContent(""String_Node_Str"" + j + ""String_Node_Str""+ s);
                CellEl.appendChild(StubRef);
                break;
              }
            }
            Element CellRoles=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellRoles);
            boolean isDataCell=true;
            if (cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (cells[j][k].isIs_stub() && cells[j][k].getColumnspanning_index() == 0) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            boolean isSuperRow=false;
            for (int l=0; l < 5; l++) {
              if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
                isSuperRow=true;
                break;
              }
            }
            if (isSuperRow) {
              for (int l=0; l < cells[j].length; l++) {
                cells[j][l].setIs_subheader(true);
              }
            }
            if (cells[j][k].isIs_subheader()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            if (isDataCell) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            Element CellRow=doc.createElement(""String_Node_Str"");
            CellRow.setTextContent(j + ""String_Node_Str"");
            CellEl.appendChild(CellRow);
            Element CellColumn=doc.createElement(""String_Node_Str"");
            CellColumn.setTextContent(k + ""String_Node_Str"");
            CellEl.appendChild(CellColumn);
          }
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      if (table.getTableStructureType() == null) {
        table.setTableStructureType(StructureType.NULL);
      }
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      if (cells != null) {
        for (int j=0; j < cells.length; j++) {
          for (int k=0; k < cells[j].length; k++) {
            if (k == 0 && cells[j][k].isIs_header()) {
              cells[j][k].setIs_stub(true);
            }
            Element CellEl=doc.createElement(""String_Node_Str"");
            CellsEl.appendChild(CellEl);
            Element CellID=doc.createElement(""String_Node_Str"");
            String cellIDStr=""String_Node_Str"" + j + ""String_Node_Str""+ k;
            CellID.setTextContent(cellIDStr);
            cells[j][k].CellId=cellIDStr;
            CellEl.appendChild(CellID);
            if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
              Element SuperRowRef=doc.createElement(""String_Node_Str"");
              SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
              CellEl.appendChild(SuperRowRef);
            }
            Element CellValue=doc.createElement(""String_Node_Str"");
            CellValue.setTextContent(cells[j][k].getCell_content());
            CellEl.appendChild(CellValue);
            String valueToParse=cells[j][k].getCell_content();
            LinkedList<ValueItem> valueTags=TablInExMain.vp.parseValue(valueToParse);
            Element CellSemantics=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellSemantics);
            for (int p=0; p < valueTags.size(); p++) {
              Element CellValueSemantics=doc.createElement(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).type.toString());
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).start_position + ""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).end_position + ""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).value);
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellSemantics.appendChild(CellValueSemantics);
            }
            int mathTypeIndex=valueToParse.indexOf(""String_Node_Str"");
            if (mathTypeIndex > 0) {
              valueToParse=valueToParse.substring(0,mathTypeIndex);
            }
            LinkedList<Word> words=null;
            if (valueToParse != null) {
              valueToParse=valueToParse.trim();
              if (!Utilities.isSpaceOrEmpty(valueToParse)) {
                words=TablInExMain.marvin.annotate(valueToParse);
              }
            }
            if (words != null) {
              for (int p=0; p < words.size(); p++) {
                for (int s=0; s < words.get(p).wordmeanings.size(); s++) {
                  Element Meaning=doc.createElement(""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).Source);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).id);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).URL);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).startAt + ""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).endAt + ""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).appearingWord);
                  CellSemantics.appendChild(Meaning);
                }
              }
            }
            Element CellType=doc.createElement(""String_Node_Str"");
            CellType.setTextContent(cells[j][k].getCellType());
            CellEl.appendChild(CellType);
            for (int s=j - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[j][k].isIs_header() && !cells[j - 1][k].isIs_header()) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderRef=doc.createElement(""String_Node_Str"");
                HeaderRef.setTextContent(""String_Node_Str"" + s + ""String_Node_Str""+ k);
                CellEl.appendChild(HeaderRef);
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderCatRef=doc.createElement(""String_Node_Str"");
                HeaderCatRef.setTextContent(""String_Node_Str"" + s + ""String_Node_Str""+ 0);
                CellEl.appendChild(HeaderCatRef);
                break;
              }
            }
            for (int s=k - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
                Element StubRef=doc.createElement(""String_Node_Str"");
                StubRef.setTextContent(""String_Node_Str"" + j + ""String_Node_Str""+ s);
                CellEl.appendChild(StubRef);
                break;
              }
            }
            Element CellRoles=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellRoles);
            boolean isDataCell=true;
            if (cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (cells[j][k].isIs_stub() && cells[j][k].getColumnspanning_index() == 0) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            boolean isSuperRow=false;
            for (int l=0; l < 5; l++) {
              if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
                isSuperRow=true;
                break;
              }
            }
            if (isSuperRow) {
              for (int l=0; l < cells[j].length; l++) {
                cells[j][l].setIs_subheader(true);
              }
            }
            if (cells[j][k].isIs_subheader()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            if (isDataCell) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            Element CellRow=doc.createElement(""String_Node_Str"");
            CellRow.setTextContent(j + ""String_Node_Str"");
            CellEl.appendChild(CellRow);
            Element CellColumn=doc.createElement(""String_Node_Str"");
            CellColumn.setTextContent(k + ""String_Node_Str"");
            CellEl.appendChild(CellColumn);
          }
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.5360623018823621
36964,"/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      if (table.getTableStructureType() == null) {
        table.setTableStructureType(StructureType.NULL);
      }
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      if (cells != null) {
        for (int j=0; j < cells.length; j++) {
          for (int k=0; k < cells[j].length; k++) {
            if (k == 0 && cells[j][k].isIs_header()) {
              cells[j][k].setIs_stub(true);
            }
            Element CellEl=doc.createElement(""String_Node_Str"");
            CellsEl.appendChild(CellEl);
            Element CellID=doc.createElement(""String_Node_Str"");
            String cellIDStr=""String_Node_Str"" + j + ""String_Node_Str""+ k;
            CellID.setTextContent(cellIDStr);
            cells[j][k].CellId=cellIDStr;
            CellEl.appendChild(CellID);
            if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
              Element SuperRowRef=doc.createElement(""String_Node_Str"");
              SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
              cells[j][k].setSuper_row_ref(cells[j][k].getSuperRowIndex());
              CellEl.appendChild(SuperRowRef);
            }
            Element CellValue=doc.createElement(""String_Node_Str"");
            CellValue.setTextContent(cells[j][k].getCell_content());
            CellEl.appendChild(CellValue);
            String valueToParse=cells[j][k].getCell_content();
            LinkedList<ValueItem> valueTags=TablInExMain.vp.parseValue(valueToParse);
            Element CellSemantics=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellSemantics);
            for (int p=0; p < valueTags.size(); p++) {
              Annotation annot=new Annotation();
              Element CellValueSemantics=doc.createElement(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              annot.setType(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).type.toString());
              annot.setTypeVal(valueTags.get(p).type.toString());
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).start_position + ""String_Node_Str"");
              annot.setStart(valueTags.get(p).start_position);
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).end_position + ""String_Node_Str"");
              annot.setEnd(valueTags.get(p).end_position);
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).value);
              annot.setContent(valueTags.get(p).value);
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              annot.setID(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              annot.setURL(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              annot.setSource(""String_Node_Str"");
              cells[j][k].annotations.add(annot);
              CellSemantics.appendChild(CellValueSemantics);
            }
            int mathTypeIndex=valueToParse.indexOf(""String_Node_Str"");
            if (mathTypeIndex > 0) {
              valueToParse=valueToParse.substring(0,mathTypeIndex);
            }
            LinkedList<Word> words=null;
            if (valueToParse != null) {
              valueToParse=valueToParse.trim();
              if (!Utilities.isSpaceOrEmpty(valueToParse)) {
                words=TablInExMain.marvin.annotate(valueToParse);
              }
            }
            if (words != null) {
              for (int p=0; p < words.size(); p++) {
                for (int s=0; s < words.get(p).wordmeanings.size(); s++) {
                  Element Meaning=doc.createElement(""String_Node_Str"");
                  Annotation annot=new Annotation();
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  annot.setType(""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  annot.setTypeVal(""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).Source);
                  annot.setSource(words.get(p).wordmeanings.get(s).Source);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).id);
                  annot.setID(words.get(p).wordmeanings.get(s).id);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).URL);
                  annot.setURL(words.get(p).wordmeanings.get(s).URL);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).startAt + ""String_Node_Str"");
                  annot.setStart(words.get(p).wordmeanings.get(s).startAt);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).endAt + ""String_Node_Str"");
                  annot.setEnd(words.get(p).wordmeanings.get(s).endAt);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).appearingWord);
                  annot.setContent(words.get(p).wordmeanings.get(s).appearingWord);
                  cells[j][k].annotations.add(annot);
                  CellSemantics.appendChild(Meaning);
                }
              }
            }
            Element CellType=doc.createElement(""String_Node_Str"");
            CellType.setTextContent(cells[j][k].getCellType());
            CellEl.appendChild(CellType);
            for (int s=j - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[j][k].isIs_header() && !cells[j - 1][k].isIs_header()) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderRef=doc.createElement(""String_Node_Str"");
                String href=""String_Node_Str"" + s + ""String_Node_Str""+ k;
                HeaderRef.setTextContent(href);
                cells[j][k].setHeader_ref(href);
                CellEl.appendChild(HeaderRef);
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderCatRef=doc.createElement(""String_Node_Str"");
                String hsref=""String_Node_Str"" + s + ""String_Node_Str""+ 0;
                HeaderCatRef.setTextContent(hsref);
                cells[j][k].setHead_stub_ref(hsref);
                CellEl.appendChild(HeaderCatRef);
                break;
              }
            }
            for (int s=k - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
                Element StubRef=doc.createElement(""String_Node_Str"");
                String sref=""String_Node_Str"" + j + ""String_Node_Str""+ s;
                StubRef.setTextContent(sref);
                cells[j][k].setStub_ref(sref);
                if (cells[j][k].isIs_header() || cells[j][k].isIs_subheader()) {
                  cells[j][k].setStub_values(cells[j][s].getCell_content());
                }
                CellEl.appendChild(StubRef);
                break;
              }
            }
            Element CellRoles=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellRoles);
            boolean isDataCell=true;
            if (cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              cells[j][k].CellRoles.add(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (cells[j][k].isIs_stub() && cells[j][k].getColumnspanning_index() == 0) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              cells[j][k].CellRoles.add(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            boolean isSuperRow=false;
            for (int l=0; l < 5; l++) {
              if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
                isSuperRow=true;
                break;
              }
            }
            if (isSuperRow) {
              for (int l=0; l < cells[j].length; l++) {
                cells[j][l].setIs_subheader(true);
              }
            }
            if (cells[j][k].isIs_subheader()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              cells[j][k].CellRoles.add(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            if (isDataCell) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              cells[j][k].CellRoles.add(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            Element CellRow=doc.createElement(""String_Node_Str"");
            CellRow.setTextContent(j + ""String_Node_Str"");
            CellEl.appendChild(CellRow);
            Element CellColumn=doc.createElement(""String_Node_Str"");
            CellColumn.setTextContent(k + ""String_Node_Str"");
            CellEl.appendChild(CellColumn);
          }
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(TablInExMain.Inpath + ""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      if (table.getTableStructureType() == null) {
        table.setTableStructureType(StructureType.NULL);
      }
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      if (cells != null) {
        for (int j=0; j < cells.length; j++) {
          for (int k=0; k < cells[j].length; k++) {
            if (k == 0 && cells[j][k].isIs_header()) {
              cells[j][k].setIs_stub(true);
            }
            Element CellEl=doc.createElement(""String_Node_Str"");
            CellsEl.appendChild(CellEl);
            Element CellID=doc.createElement(""String_Node_Str"");
            String cellIDStr=""String_Node_Str"" + j + ""String_Node_Str""+ k;
            CellID.setTextContent(cellIDStr);
            cells[j][k].CellId=cellIDStr;
            CellEl.appendChild(CellID);
            if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
              Element SuperRowRef=doc.createElement(""String_Node_Str"");
              SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
              cells[j][k].setSuper_row_ref(cells[j][k].getSuperRowIndex());
              CellEl.appendChild(SuperRowRef);
            }
            Element CellValue=doc.createElement(""String_Node_Str"");
            CellValue.setTextContent(cells[j][k].getCell_content());
            CellEl.appendChild(CellValue);
            String valueToParse=cells[j][k].getCell_content();
            LinkedList<ValueItem> valueTags=TablInExMain.vp.parseValue(valueToParse);
            Element CellSemantics=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellSemantics);
            for (int p=0; p < valueTags.size(); p++) {
              Annotation annot=new Annotation();
              Element CellValueSemantics=doc.createElement(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              annot.setType(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).type.toString());
              annot.setTypeVal(valueTags.get(p).type.toString());
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).start_position + ""String_Node_Str"");
              annot.setStart(valueTags.get(p).start_position);
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).end_position + ""String_Node_Str"");
              annot.setEnd(valueTags.get(p).end_position);
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).value);
              annot.setContent(valueTags.get(p).value);
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              annot.setID(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              annot.setURL(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              annot.setSource(""String_Node_Str"");
              cells[j][k].annotations.add(annot);
              CellSemantics.appendChild(CellValueSemantics);
            }
            int mathTypeIndex=valueToParse.indexOf(""String_Node_Str"");
            if (mathTypeIndex > 0) {
              valueToParse=valueToParse.substring(0,mathTypeIndex);
            }
            LinkedList<Word> words=null;
            if (valueToParse != null) {
              valueToParse=valueToParse.trim();
              if (!Utilities.isSpaceOrEmpty(valueToParse)) {
                words=TablInExMain.marvin.annotate(valueToParse);
              }
            }
            if (words != null) {
              for (int p=0; p < words.size(); p++) {
                for (int s=0; s < words.get(p).wordmeanings.size(); s++) {
                  Element Meaning=doc.createElement(""String_Node_Str"");
                  Annotation annot=new Annotation();
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  annot.setType(""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  annot.setTypeVal(""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).Source);
                  annot.setSource(words.get(p).wordmeanings.get(s).Source);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).id);
                  annot.setID(words.get(p).wordmeanings.get(s).id);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).URL);
                  annot.setURL(words.get(p).wordmeanings.get(s).URL);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).startAt + ""String_Node_Str"");
                  annot.setStart(words.get(p).wordmeanings.get(s).startAt);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).endAt + ""String_Node_Str"");
                  annot.setEnd(words.get(p).wordmeanings.get(s).endAt);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).appearingWord);
                  annot.setContent(words.get(p).wordmeanings.get(s).appearingWord);
                  cells[j][k].annotations.add(annot);
                  CellSemantics.appendChild(Meaning);
                }
              }
            }
            Element CellType=doc.createElement(""String_Node_Str"");
            CellType.setTextContent(cells[j][k].getCellType());
            CellEl.appendChild(CellType);
            for (int s=j - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[j][k].isIs_header() && !cells[j - 1][k].isIs_header()) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderRef=doc.createElement(""String_Node_Str"");
                String href=""String_Node_Str"" + s + ""String_Node_Str""+ k;
                HeaderRef.setTextContent(href);
                cells[j][k].setHeader_ref(href);
                CellEl.appendChild(HeaderRef);
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderCatRef=doc.createElement(""String_Node_Str"");
                String hsref=""String_Node_Str"" + s + ""String_Node_Str""+ 0;
                HeaderCatRef.setTextContent(hsref);
                cells[j][k].setHead_stub_ref(hsref);
                CellEl.appendChild(HeaderCatRef);
                break;
              }
            }
            for (int s=k - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
                Element StubRef=doc.createElement(""String_Node_Str"");
                String sref=""String_Node_Str"" + j + ""String_Node_Str""+ s;
                StubRef.setTextContent(sref);
                cells[j][k].setStub_ref(sref);
                if (cells[j][k].isIs_header() || cells[j][k].isIs_subheader()) {
                  cells[j][k].setStub_values(cells[j][s].getCell_content());
                }
                CellEl.appendChild(StubRef);
                break;
              }
            }
            Element CellRoles=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellRoles);
            boolean isDataCell=true;
            if (cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              cells[j][k].CellRoles.add(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (cells[j][k].isIs_stub() && cells[j][k].getColumnspanning_index() == 0) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              cells[j][k].CellRoles.add(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            boolean isSuperRow=false;
            for (int l=0; l < 5; l++) {
              if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
                isSuperRow=true;
                break;
              }
            }
            if (isSuperRow) {
              for (int l=0; l < cells[j].length; l++) {
                cells[j][l].setIs_subheader(true);
              }
            }
            if (cells[j][k].isIs_subheader()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              cells[j][k].CellRoles.add(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            if (isDataCell) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              cells[j][k].CellRoles.add(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            Element CellRow=doc.createElement(""String_Node_Str"");
            CellRow.setTextContent(j + ""String_Node_Str"");
            CellEl.appendChild(CellRow);
            Element CellColumn=doc.createElement(""String_Node_Str"");
            CellColumn.setTextContent(k + ""String_Node_Str"");
            CellEl.appendChild(CellColumn);
          }
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(TablInExMain.Inpath + ""String_Node_Str"" + a.getPmc()+ ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9911109608949876
36965,"/** 
 * Extract information from simple tables.
 * @param art the art
 */
public void ExtractData(Article art){
  if (art == null)   return;
  TablInExMain.linkedData.AddArticle(art);
  Table[] tables=art.getTables();
  for (int i=0; i < tables.length; i++) {
    if (tables[i] == null || tables[i].cells == null || tables[i].cells.length == 0)     continue;
    String tableFileName=""String_Node_Str"" + tables[i].getDocumentFileName() + tables[i].getTable_title()+ ""String_Node_Str""+ tables[i].tableInTable;
    getFullHeaderValues(tables[i]);
    Cell[][] cells=tables[i].cells;
    if (isMultiTable(cells,tables[i])) {
      tables[i]=processMultiTable(cells,tables[i],art,tableFileName);
    }
    if (tables[i].getTableStructureType() != null && tables[i].getTableStructureType().equals(Table.StructureType.MULTI))     continue;
    tables[i]=processListTable(cells,tables[i],art,tableFileName);
    tables[i]=processTableWithSubheadersWithoutHeader(cells,tables[i],art,tableFileName);
    if (!isListTable(cells,tables[i]) && !hasTableSubheader(cells,tables[i])) {
      tables[i]=processRegularTable(cells,tables,art,tableFileName,i);
    }
  }
  art.setTables(tables);
}","/** 
 * Extract information from simple tables.
 * @param art the art
 */
public void ExtractData(Article art){
  if (art == null)   return;
  TablInExMain.linkedData.AddArticle(art);
  Table[] tables=art.getTables();
  for (int i=0; i < tables.length; i++) {
    if (tables[i] == null || tables[i].cells == null || tables[i].cells.length == 0)     continue;
    String tableFileName=""String_Node_Str"" + tables[i].getDocumentFileName() + tables[i].getTable_title()+ ""String_Node_Str""+ tables[i].tableInTable;
    getFullHeaderValues(tables[i]);
    Cell[][] cells=tables[i].cells;
    if (isMultiTable(cells,tables[i])) {
      tables[i]=processMultiTable(cells,tables[i],art,tableFileName);
    }
    if (tables[i].getTableStructureType() != null && tables[i].getTableStructureType().equals(Table.StructureType.MULTI))     continue;
    tables[i]=processListTable(cells,tables[i],art,tableFileName);
    tables[i]=processTableWithSubheaders(cells,tables[i],art,tableFileName);
    if (!isListTable(cells,tables[i]) && !hasTableSubheader(cells,tables[i])) {
      tables[i]=processRegularTable(cells,tables,art,tableFileName,i);
    }
  }
  art.setTables(tables);
}",0.9944515578318396
36966,"private Cell[][] markMultiTableHeaders(Cell[][] cells){
  if (cells == null)   return cells;
  for (int i=0; i < cells.length; i++) {
    if (cells[i][0].isBreakingLineOverRow()) {
      if (i - 2 >= 0 && !cells[i - 2][0].isIs_header() && !isSequentiallyBreakingLine(cells,i - 2,0) && cells[i - 2][0].isBreakingLineOverRow()) {
        for (int j=0; j < cells[i].length; j++) {
          cells[i][j].setIs_header(true);
        }
        for (int j=0; j < cells[i].length; j++) {
          cells[i - 1][j].setIs_header(true);
        }
        for (int j=0; j < cells[i].length; j++) {
          cells[i - 2][j].setIs_header(true);
        }
      }
    }
  }
  return cells;
}","private Cell[][] markMultiTableHeaders(Cell[][] cells){
  if (cells == null)   return cells;
  for (int i=0; i < cells.length; i++) {
    if (cells[i][0].isBreakingLineOverRow()) {
      if (i - 2 >= 0 && !cells[i - 2][0].isIs_header() && !isSequentiallyBreakingLine(cells,i - 2,0) && cells[i - 2][0].isBreakingLineOverRow() && Utilities.isOneCellFilledRow(cells[i - 1])) {
        for (int j=0; j < cells[i].length; j++) {
        }
        for (int j=0; j < cells[i].length; j++) {
          cells[i - 1][j].setIs_subheader(true);
        }
        for (int j=0; j < cells[i].length; j++) {
        }
      }
 else       if (i - 2 >= 0 && !cells[i - 2][0].isIs_header() && !isSequentiallyBreakingLine(cells,i - 2,0) && cells[i - 2][0].isBreakingLineOverRow()) {
        for (int j=0; j < cells[i].length; j++) {
          cells[i][j].setIs_header(true);
        }
        for (int j=0; j < cells[i].length; j++) {
          cells[i - 1][j].setIs_header(true);
        }
        for (int j=0; j < cells[i].length; j++) {
          cells[i - 2][j].setIs_header(true);
        }
      }
    }
  }
  return cells;
}",0.6893854748603352
36967,"/** 
 * Checks if is row subheader.
 * @param cells the cells
 * @param table the table
 * @return true, if is row subheader
 */
public boolean isRowSubheader(Cell[] cells,Table table){
  boolean emptyLine=true;
  for (int h=0; h < cells.length; h++) {
    if (!Utilities.isSpaceOrEmpty(cells[h].getCell_content())) {
      emptyLine=false;
      break;
    }
  }
  if (emptyLine)   return false;
  boolean isSubheader=false;
  if (cells[0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[0].getCells_columnspanning() >= table.getNum_of_columns() && !cells[0].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !cells[0].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !(((int)cells[0].getCell_content().trim().charAt(0)) == 160)) {
    isSubheader=true;
  }
  boolean emptyCells=true;
  for (int j=1; j < cells.length; j++) {
    if (cells[j].getCell_content() == null) {
      cells[j].setCell_content(""String_Node_Str"");
    }
    if ((!Utilities.isSpaceOrEmpty(cells[0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[j].getCell_content())) || (Utilities.isSpaceOrEmpty(cells[0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[j].getCell_content()))) {
      emptyCells=false;
    }
  }
  if (emptyCells == true) {
    isSubheader=true;
  }
  return isSubheader;
}","public boolean isRowSubheader(Cell[][] cellsAll,int row,Cell[] cells,Table table){
  boolean emptyLine=true;
  for (int h=0; h < cells.length; h++) {
    if (!Utilities.isSpaceOrEmpty(cells[h].getCell_content())) {
      emptyLine=false;
      break;
    }
  }
  if (emptyLine)   return false;
  boolean isSubheader=false;
  if (cells[0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[0].getCells_columnspanning() >= table.getNum_of_columns() && !cells[0].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !cells[0].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !(((int)cells[0].getCell_content().trim().charAt(0)) == 160)) {
    isSubheader=true;
  }
  boolean emptyCells=true;
  for (int j=1; j < cells.length; j++) {
    if (cells[j].getCell_content() == null) {
      cells[j].setCell_content(""String_Node_Str"");
    }
    if ((!Utilities.isSpaceOrEmpty(cells[0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[j].getCell_content())) || (Utilities.isSpaceOrEmpty(cells[0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[j].getCell_content()))) {
      emptyCells=false;
    }
  }
  if (emptyCells == true) {
    isSubheader=true;
  }
  if (cellsAll.length > row + 1 && cellsAll[row + 1][0].getCell_content().length() > 0 && Utilities.numOfBegeningSpaces(cellsAll[row + 1][0].getCell_content()) > Utilities.numOfBegeningSpaces(cellsAll[row][0].getCell_content())) {
    isSubheader=true;
  }
  return isSubheader;
}",0.8266761768901569
36968,"/** 
 * Checks for table subheader.
 * @param cells the cells
 * @param table the table
 * @return true, if successful
 */
public boolean hasTableSubheader(Cell[][] cells,Table table){
  boolean hasSubheader=false;
  if (table.getNum_of_columns() < 2)   return false;
  for (int i=1; i < cells.length; i++) {
    if (cells[i][0].isIs_header())     continue;
    if (cells[i][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[i][0].getCells_columnspanning() >= table.getNum_of_columns() && !Utilities.isSpaceOrEmpty(cells[i][0].getCell_content())) {
      hasSubheader=true;
      break;
    }
    if (Utilities.numOfBegeningSpaces(cells[i][0].getCell_content()) > 0) {
      hasSubheader=true;
      break;
    }
    boolean emptyCells=true;
    for (int j=1; j < cells[i].length; j++) {
      if (cells[i][j].getCell_content() == null) {
        cells[i][j].setCell_content(""String_Node_Str"");
      }
      if ((!Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[i][j].getCell_content())) || (Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && Utilities.isSpaceOrEmpty(cells[i][j].getCell_content()))) {
        emptyCells=false;
      }
    }
    if (emptyCells == true && table.getNum_of_columns() > 2) {
      hasSubheader=true;
      break;
    }
  }
  return hasSubheader;
}","/** 
 * Checks for table subheader.
 * @param cells the cells
 * @param table the table
 * @return true, if successful
 */
public boolean hasTableSubheader(Cell[][] cells,Table table){
  boolean hasSubheader=false;
  if (table.getNum_of_columns() < 2)   return false;
  for (int i=1; i < cells.length; i++) {
    if (cells[i][0].isIs_header())     continue;
    if (cells[i][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[i][0].getCells_columnspanning() >= table.getNum_of_columns() && !Utilities.isSpaceOrEmpty(cells[i][0].getCell_content())) {
      hasSubheader=true;
      break;
    }
    if (cells[i][0].isIs_subheader()) {
      hasSubheader=true;
      break;
    }
    if (Utilities.numOfBegeningSpaces(cells[i][0].getCell_content()) > 0) {
      hasSubheader=true;
      break;
    }
    boolean emptyCells=true;
    for (int j=1; j < cells[i].length; j++) {
      if (cells[i][j].getCell_content() == null) {
        cells[i][j].setCell_content(""String_Node_Str"");
      }
      if ((!Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[i][j].getCell_content())) || (Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && Utilities.isSpaceOrEmpty(cells[i][j].getCell_content()))) {
        emptyCells=false;
      }
    }
    if (emptyCells == true && table.getNum_of_columns() > 2) {
      hasSubheader=true;
      break;
    }
  }
  return hasSubheader;
}",0.9697624190064796
36969,"public Table processMultiTable(Cell[][] cells,Table table,Article art,String tableFileName){
  if (table.getTableStructureType() != Table.StructureType.MULTI && table.getTableStructureType() != null) {
    return table;
  }
  Statistics.addMultiTable();
  table.setTableStructureType(Table.StructureType.MULTI);
  if (TablInExMain.ExportLinkedData) {
    TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
  }
  if (!table.isHasHeader()) {
    table=checkHeaders(table);
    cells=table.cells;
  }
  table.original_cells=markMultiTableHeaders(table.original_cells);
  table.cells=markMultiTableHeaders(table.cells);
  cells=table.cells;
  Cell[][] original_cells=table.original_cells;
  if (cells[0].length > 1) {
    String[] headerStackA=new String[20];
    String[] headerStackIndexes=new String[20];
    int currentSubHeaderLevel=0;
    String prevSubheader=""String_Node_Str"";
    String prevSubheaderIndex=""String_Node_Str"";
    boolean hasSpaceSubheaders=false;
    if (table.isHasHeader() == false) {
      table=checkHeaders(table);
    }
    cells=table.cells;
    boolean firstHeader=true;
    for (int j=0; j < cells.length; j++) {
      if (cells[j][0].isIs_header()) {
        continue;
      }
      boolean emptyLine=true;
      for (int h=0; h < cells[j].length; h++) {
        if (!Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyLine=false;
          break;
        }
      }
      if (emptyLine)       continue;
      if (cells[j][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[j][0].getCells_columnspanning() >= table.getNum_of_columns()) {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
        }
        SetUnderSubheaderRow(cells[j]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        continue;
      }
      boolean emptyCells=true;
      for (int h=0; h < cells[j].length; h++) {
        if (cells[j][h].getCell_content() == null) {
          cells[j][h].setCell_content(""String_Node_Str"");
        }
        if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()) || !Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyCells=false;
        }
      }
      if (emptyCells) {
        if (currentSubHeaderLevel != 0 && currentSubHeaderLevel == j - 1) {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
        }
 else {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
          if (j > 0 && isRowSubheader(cells[j - 1],table)) {
            prevSubheader=cells[j - 1][0].getCell_content();
            prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
          }
          continue;
        }
      }
      if (isRowSubheader(cells[j],table)) {
        if (j > 0 && isRowSubheader(cells[j - 1],table)) {
          prevSubheader=cells[j - 1][0].getCell_content();
          prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
        }
        continue;
      }
      if (cells[j][0].getCell_content() == null) {
        cells[j][0].setCell_content(""String_Node_Str"");
      }
      if ((cells != null && cells[j] != null && cells[j][0] != null && cells[j][0].getCell_content() != null) && (cells[j][0].getCell_content().length() > 0 && Utilities.isSpace(cells[j][0].getCell_content().trim().charAt(0))) || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        hasSpaceSubheaders=true;
        SetUnderSubheaderRow(cells[j]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        }
      }
 else {
        if (hasSpaceSubheaders)         currentSubHeaderLevel=0;
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
      for (int k=0; k < cells[j].length; k++) {
        try {
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          String Head00Str=""String_Node_Str"";
          if (!Utilities.isSpaceOrEmpty(cells[0][0].getCell_content()) && cells[0][0].isIs_header()) {
            boolean foundHeader=false;
            for (int l=j; l >= 0; l--) {
              if (cells[l][0].isIs_header()) {
                if (!cells[l][0].getCell_content().equals(""String_Node_Str""))                 Head00Str=cells[l][0].getCell_content();
                foundHeader=true;
              }
              if (foundHeader && !cells[l][0].isIs_header()) {
                break;
              }
            }
            Element Head00=doc.createElement(""String_Node_Str"");
            Head00.setTextContent(Head00Str);
            cells[j][k].setHead00(Head00Str);
            NavigationPath.appendChild(Head00);
          }
          Element Stub=doc.createElement(""String_Node_Str"");
          if (currentSubHeaderLevel > 0) {
            getStackAsElements(headerStackA,prevSubheader,currentSubHeaderLevel,doc,Stub);
            getStackIndex(headerStackIndexes,prevSubheaderIndex,currentSubHeaderLevel,cells[j][k],table);
          }
          String subheaderValues=""String_Node_Str"";
          String[] SubHeaders=new String[Stub.getChildNodes().getLength()];
          for (int l=0; l < Stub.getChildNodes().getLength(); l++) {
            subheaderValues+=""String_Node_Str"" + Stub.getChildNodes().item(l).getTextContent();
            SubHeaders[l]=Stub.getChildNodes().item(l).getTextContent();
          }
          cells[j][k].setSubheader_values(subheaderValues);
          Element ss=doc.createElement(""String_Node_Str"");
          ss.setTextContent(cells[j][0].getCell_content());
          cells[j][k].setStub_values(cells[j][0].getCell_content());
          Stub.appendChild(ss);
          NavigationPath.appendChild(Stub);
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          String WholeHeader=""String_Node_Str"";
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            WholeHeader+=headers.get(s) + ""String_Node_Str"";
            NavigationPath.appendChild(Header);
          }
          cell.appendChild(NavigationPath);
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableEl=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableEl);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableEl.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableEl.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableEl.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableEl.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(cells[j][0].getCell_content(),SubHeaders,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),cells[0][0].getCell_content(),j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 else {
    boolean hasSubheaders=hasSuperRowsListTable(cells,table);
    boolean TopLevel=false;
    String currentSubHeader=""String_Node_Str"";
    for (int j=0; j < cells.length; j++) {
      for (int k=0; k < cells[j].length; k++) {
        if (cells[j][k].isIs_header())         continue;
        try {
          if (hasSubheaders) {
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && cells[j + 1] != null && Utilities.numOfSpaceOrBullets(cells[j + 1][k].getCell_content()) != 0 && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && (cells[j + 2] != null && Utilities.numOfSpaceOrBullets(cells[j + 2][k].getCell_content()) != 0) && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == true && !cells[j][k].isBreakingLineOverRow() && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && !currentSubHeader.equals(""String_Node_Str"")) {
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
          }
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          String WholeHeader=""String_Node_Str"";
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            WholeHeader+=headers.get(s) + ""String_Node_Str"";
            NavigationPath.appendChild(Header);
          }
          if (currentSubHeader != ""String_Node_Str"") {
            Element SubHeader=doc.createElement(""String_Node_Str"");
            SubHeader.setTextContent(currentSubHeader);
            NavigationPath.appendChild(SubHeader);
          }
          cell.appendChild(NavigationPath);
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableA=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableA);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableA.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableA.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableA.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableA.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(""String_Node_Str"",null,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),""String_Node_Str"",j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
  table.cells=cells;
  return table;
}","public Table processMultiTable(Cell[][] cells,Table table,Article art,String tableFileName){
  if (table.getTableStructureType() != Table.StructureType.MULTI && table.getTableStructureType() != null) {
    return table;
  }
  Statistics.addMultiTable();
  table.setTableStructureType(Table.StructureType.MULTI);
  if (TablInExMain.ExportLinkedData) {
    TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
  }
  if (!table.isHasHeader()) {
    table=checkHeaders(table);
    cells=table.cells;
  }
  cells=table.cells;
  Cell[][] original_cells=table.original_cells;
  if (cells[0].length > 1) {
    String[] headerStackA=new String[20];
    String[] headerStackIndexes=new String[20];
    int currentSubHeaderLevel=0;
    String prevSubheader=""String_Node_Str"";
    String prevSubheaderIndex=""String_Node_Str"";
    boolean hasSpaceSubheaders=false;
    if (table.isHasHeader() == false) {
      table=checkHeaders(table);
    }
    cells=table.cells;
    boolean firstHeader=true;
    for (int j=0; j < cells.length; j++) {
      if (cells[j][0].isIs_header()) {
        continue;
      }
      boolean emptyLine=true;
      for (int h=0; h < cells[j].length; h++) {
        if (!Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyLine=false;
          break;
        }
      }
      if (emptyLine)       continue;
      if (cells[j][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[j][0].getCells_columnspanning() >= table.getNum_of_columns()) {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
        }
        SetUnderSubheaderRow(cells[j]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        continue;
      }
      boolean emptyCells=true;
      for (int h=0; h < cells[j].length; h++) {
        if (cells[j][h].getCell_content() == null) {
          cells[j][h].setCell_content(""String_Node_Str"");
        }
        if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()) || !Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyCells=false;
        }
      }
      if (emptyCells) {
        if (currentSubHeaderLevel != 0 && currentSubHeaderLevel == j - 1) {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
        }
 else {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
          if (j > 0 && isRowSubheader(cells[j - 1],table)) {
            prevSubheader=cells[j - 1][0].getCell_content();
            prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
          }
          continue;
        }
      }
      if (isRowSubheader(cells[j],table)) {
        if (j > 0 && isRowSubheader(cells[j - 1],table)) {
          prevSubheader=cells[j - 1][0].getCell_content();
          prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
        }
        continue;
      }
      if (cells[j][0].getCell_content() == null) {
        cells[j][0].setCell_content(""String_Node_Str"");
      }
      if ((cells != null && cells[j] != null && cells[j][0] != null && cells[j][0].getCell_content() != null) && (cells[j][0].getCell_content().length() > 0 && Utilities.isSpace(cells[j][0].getCell_content().trim().charAt(0))) || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        hasSpaceSubheaders=true;
        SetUnderSubheaderRow(cells[j]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        }
      }
 else {
        if (hasSpaceSubheaders)         currentSubHeaderLevel=0;
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
      for (int k=0; k < cells[j].length; k++) {
        try {
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          String Head00Str=""String_Node_Str"";
          if (!Utilities.isSpaceOrEmpty(cells[0][0].getCell_content()) && cells[0][0].isIs_header()) {
            boolean foundHeader=false;
            for (int l=j; l >= 0; l--) {
              if (cells[l][0].isIs_header()) {
                if (!cells[l][0].getCell_content().equals(""String_Node_Str""))                 Head00Str=cells[l][0].getCell_content();
                foundHeader=true;
              }
              if (foundHeader && !cells[l][0].isIs_header()) {
                break;
              }
            }
            Element Head00=doc.createElement(""String_Node_Str"");
            Head00.setTextContent(Head00Str);
            cells[j][k].setHead00(Head00Str);
            NavigationPath.appendChild(Head00);
          }
          Element Stub=doc.createElement(""String_Node_Str"");
          if (currentSubHeaderLevel > 0) {
            getStackAsElements(headerStackA,prevSubheader,currentSubHeaderLevel,doc,Stub);
            getStackIndex(headerStackIndexes,prevSubheaderIndex,currentSubHeaderLevel,cells[j][k],table);
          }
          String subheaderValues=""String_Node_Str"";
          String[] SubHeaders=new String[Stub.getChildNodes().getLength()];
          for (int l=0; l < Stub.getChildNodes().getLength(); l++) {
            subheaderValues+=""String_Node_Str"" + Stub.getChildNodes().item(l).getTextContent();
            SubHeaders[l]=Stub.getChildNodes().item(l).getTextContent();
          }
          cells[j][k].setSubheader_values(subheaderValues);
          Element ss=doc.createElement(""String_Node_Str"");
          ss.setTextContent(cells[j][0].getCell_content());
          cells[j][k].setStub_values(cells[j][0].getCell_content());
          Stub.appendChild(ss);
          NavigationPath.appendChild(Stub);
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          String WholeHeader=""String_Node_Str"";
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            WholeHeader+=headers.get(s) + ""String_Node_Str"";
            NavigationPath.appendChild(Header);
          }
          cell.appendChild(NavigationPath);
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableEl=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableEl);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableEl.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableEl.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableEl.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableEl.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(cells[j][0].getCell_content(),SubHeaders,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),cells[0][0].getCell_content(),j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 else {
    boolean hasSubheaders=hasSuperRowsListTable(cells,table);
    boolean TopLevel=false;
    String currentSubHeader=""String_Node_Str"";
    for (int j=0; j < cells.length; j++) {
      for (int k=0; k < cells[j].length; k++) {
        if (cells[j][k].isIs_header())         continue;
        try {
          if (hasSubheaders) {
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && cells[j + 1] != null && Utilities.numOfSpaceOrBullets(cells[j + 1][k].getCell_content()) != 0 && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && (cells[j + 2] != null && Utilities.numOfSpaceOrBullets(cells[j + 2][k].getCell_content()) != 0) && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == true && !cells[j][k].isBreakingLineOverRow() && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && !currentSubHeader.equals(""String_Node_Str"")) {
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
          }
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          String WholeHeader=""String_Node_Str"";
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            WholeHeader+=headers.get(s) + ""String_Node_Str"";
            NavigationPath.appendChild(Header);
          }
          if (currentSubHeader != ""String_Node_Str"") {
            Element SubHeader=doc.createElement(""String_Node_Str"");
            SubHeader.setTextContent(currentSubHeader);
            NavigationPath.appendChild(SubHeader);
          }
          cell.appendChild(NavigationPath);
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableA=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableA);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableA.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableA.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableA.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableA.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(""String_Node_Str"",null,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),""String_Node_Str"",j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
  table.cells=cells;
  return table;
}",0.9968603661132396
36970,"public boolean isMultiTable(Cell[][] cells,Table table){
  if (cells == null)   return false;
  for (int i=0; i < cells.length; i++) {
    if (cells[i][0].isBreakingLineOverRow()) {
      if (i - 2 >= 0 && !cells[i - 2][0].isIs_header() && !isSequentiallyBreakingLine(cells,i - 2,0) && cells[i - 2][0].isBreakingLineOverRow())       return true;
    }
  }
  return false;
}","public boolean isMultiTable(Cell[][] cells,Table table){
  if (cells == null)   return false;
  table.original_cells=markMultiTableHeaders(table.original_cells);
  table.cells=markMultiTableHeaders(table.cells);
  for (int i=0; i < cells.length; i++) {
    if (cells[i][0].isBreakingLineOverRow()) {
      if (i - 2 >= 0 && !cells[i - 2][0].isIs_header() && !isSequentiallyBreakingLine(cells,i - 2,0) && cells[i - 2][0].isBreakingLineOverRow() && !Utilities.isOneCellFilledRow(cells[i - 1]))       return true;
    }
  }
  return false;
}",0.818880351262349
36971,"/** 
 * Checks for table subheader.
 * @param cells the cells
 * @param table the table
 * @return true, if successful
 */
public boolean hasTableSubheader(Cell[][] cells,Table table){
  boolean hasSubheader=false;
  if (table.getNum_of_columns() < 2)   return false;
  for (int i=1; i < cells.length; i++) {
    if (cells[i][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[i][0].getCells_columnspanning() >= table.getNum_of_columns() && !Utilities.isSpaceOrEmpty(cells[i][0].getCell_content())) {
      hasSubheader=true;
      break;
    }
    if (Utilities.numOfBegeningSpaces(cells[i][0].getCell_content()) > 0) {
      hasSubheader=true;
      break;
    }
    boolean emptyCells=true;
    for (int j=1; j < cells[i].length; j++) {
      if (cells[i][j].getCell_content() == null) {
        cells[i][j].setCell_content(""String_Node_Str"");
      }
      if ((!Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[i][j].getCell_content())) || (Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && Utilities.isSpaceOrEmpty(cells[i][j].getCell_content()))) {
        emptyCells=false;
      }
    }
    if (emptyCells == true && table.getNum_of_columns() > 2) {
      hasSubheader=true;
      break;
    }
  }
  return hasSubheader;
}","/** 
 * Checks for table subheader.
 * @param cells the cells
 * @param table the table
 * @return true, if successful
 */
public boolean hasTableSubheader(Cell[][] cells,Table table){
  boolean hasSubheader=false;
  if (table.getNum_of_columns() < 2)   return false;
  for (int i=1; i < cells.length; i++) {
    if (cells[i][0].isIs_header())     continue;
    if (cells[i][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[i][0].getCells_columnspanning() >= table.getNum_of_columns() && !Utilities.isSpaceOrEmpty(cells[i][0].getCell_content())) {
      hasSubheader=true;
      break;
    }
    if (Utilities.numOfBegeningSpaces(cells[i][0].getCell_content()) > 0) {
      hasSubheader=true;
      break;
    }
    boolean emptyCells=true;
    for (int j=1; j < cells[i].length; j++) {
      if (cells[i][j].getCell_content() == null) {
        cells[i][j].setCell_content(""String_Node_Str"");
      }
      if ((!Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[i][j].getCell_content())) || (Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && Utilities.isSpaceOrEmpty(cells[i][j].getCell_content()))) {
        emptyCells=false;
      }
    }
    if (emptyCells == true && table.getNum_of_columns() > 2) {
      hasSubheader=true;
      break;
    }
  }
  return hasSubheader;
}",0.9814744801512288
36972,"public void SetUnderSubheaderRow(Cell[] row){
  for (int i=0; i < row.length; i++) {
    row[i].setUnderSubheader(true);
  }
}","public Cell[] SetUnderSubheaderRow(Cell[] row,String superRowIndex){
  for (int i=0; i < row.length; i++) {
    row[i].setUnderSubheader(true);
    row[i].setSuperRowIndex(superRowIndex);
  }
  return row;
}",0.7327327327327328
36973,"/** 
 * Process table with subheaders without header.
 * @param cells the cells
 * @param table the table
 * @param art the art
 * @param tableFileName the table file name
 */
private Table processTableWithSubheadersWithoutHeader(Cell[][] cells,Table table,Article art,String tableFileName){
  if (!hasTableSubheader(cells,table)) {
    return table;
  }
  if (table.getTableStructureType() != Table.StructureType.SUBHEADER && table.getTableStructureType() != null) {
    return table;
  }
  Statistics.addSubheaderTable();
  table.setTableStructureType(Table.StructureType.SUBHEADER);
  if (TablInExMain.ExportLinkedData) {
    TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
  }
  String[] headerStackA=new String[20];
  String[] headerStackIndexes=new String[20];
  int currentSubHeaderLevel=0;
  String prevSubheader=""String_Node_Str"";
  String prevSubheaderIndex=""String_Node_Str"";
  boolean hasSpaceSubheaders=false;
  if (table.isHasHeader() == false) {
    table=checkHeaders(table);
  }
  cells=table.cells;
  Cell[][] original_cells=table.original_cells;
  for (int j=0; j < cells.length; j++) {
    if (cells[j][0].isIs_header())     continue;
    boolean emptyLine=true;
    for (int h=0; h < cells[j].length; h++) {
      if (!Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
        emptyLine=false;
        break;
      }
    }
    if (emptyLine)     continue;
    if (cells[j][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[j][0].getCells_columnspanning() >= table.getNum_of_columns()) {
      if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        currentSubHeaderLevel++;
      }
 else {
        currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        currentSubHeaderLevel++;
      }
      SetUnderSubheaderRow(cells[j]);
      SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
      continue;
    }
    boolean emptyCells=true;
    for (int h=1; h < cells[j].length; h++) {
      if (cells[j][h].getCell_content() == null) {
        cells[j][h].setCell_content(""String_Node_Str"");
      }
      if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()) || !Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
        emptyCells=false;
      }
    }
    if (emptyCells) {
      if (currentSubHeaderLevel != 0 && currentSubHeaderLevel == j - 1) {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
          SetUnderSubheaderRow(cells[j]);
          SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
          SetUnderSubheaderRow(cells[j]);
          SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        }
      }
 else {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
          SetUnderSubheaderRow(cells[j]);
          SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
          SetUnderSubheaderRow(cells[j]);
          SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        }
        if (j > 0 && isRowSubheader(cells[j - 1],table)) {
          prevSubheader=cells[j - 1][0].getCell_content();
          prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
        }
        continue;
      }
    }
    if (isRowSubheader(cells[j],table)) {
      if (j > 0 && isRowSubheader(cells[j - 1],table)) {
        prevSubheader=cells[j - 1][0].getCell_content();
        prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
      }
      continue;
    }
    if (cells[j][0].getCell_content() == null) {
      cells[j][0].setCell_content(""String_Node_Str"");
    }
    if ((cells != null && cells[j] != null && cells[j][0] != null && cells[j][0].getCell_content() != null) && (cells[j][0].getCell_content().length() > 0 && Utilities.isSpace(cells[j][0].getCell_content().trim().charAt(0))) || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
      hasSpaceSubheaders=true;
      SetUnderSubheaderRow(cells[j]);
      SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
      if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
 else {
        currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
    }
 else {
      if (hasSpaceSubheaders)       currentSubHeaderLevel=0;
      headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
      headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
    }
    for (int k=1; k < cells[j].length; k++) {
      try {
        DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
        Document doc=docBuilder.newDocument();
        Element rootElement=doc.createElement(""String_Node_Str"");
        doc.appendChild(rootElement);
        Element cell=doc.createElement(""String_Node_Str"");
        rootElement.appendChild(cell);
        Element NavigationPath=doc.createElement(""String_Node_Str"");
        if (!Utilities.isSpaceOrEmpty(cells[0][0].getCell_content()) && cells[0][0].isIs_header()) {
          Element Head00=doc.createElement(""String_Node_Str"");
          Head00.setTextContent(cells[0][0].getCell_content());
          cells[j][k].setHead00(cells[0][0].getCell_content());
          NavigationPath.appendChild(Head00);
        }
        Element Stub=doc.createElement(""String_Node_Str"");
        if (currentSubHeaderLevel > 0) {
          getStackAsElements(headerStackA,prevSubheader,currentSubHeaderLevel,doc,Stub);
          getStackIndex(headerStackIndexes,prevSubheaderIndex,currentSubHeaderLevel,cells[j][k],table);
        }
        String subheaderValues=""String_Node_Str"";
        String[] SubHeaders=new String[Stub.getChildNodes().getLength()];
        for (int l=0; l < Stub.getChildNodes().getLength(); l++) {
          subheaderValues+=""String_Node_Str"" + Stub.getChildNodes().item(l).getTextContent();
          SubHeaders[l]=Stub.getChildNodes().item(l).getTextContent();
        }
        cells[j][k].setSubheader_values(subheaderValues);
        Element ss=doc.createElement(""String_Node_Str"");
        ss.setTextContent(cells[j][0].getCell_content());
        cells[j][k].setStub_values(cells[j][0].getCell_content());
        Stub.appendChild(ss);
        NavigationPath.appendChild(Stub);
        if (cells[0][k].isIs_header()) {
          for (int s=0; s < cells[0][k].headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(cells[0][k].headers.get(s));
            cells[j][k].setHeader_values(cells[0][k].getCell_content());
            NavigationPath.appendChild(Header);
          }
        }
        cell.appendChild(NavigationPath);
        Element info=doc.createElement(""String_Node_Str"");
        info.setTextContent(cells[j][k].getCell_content());
        cell.appendChild(info);
        Element CellType=doc.createElement(""String_Node_Str"");
        CellType.setTextContent(cells[j][k].getCellType());
        cell.appendChild(CellType);
        Element tableEl=doc.createElement(""String_Node_Str"");
        rootElement.appendChild(tableEl);
        Element tname=doc.createElement(""String_Node_Str"");
        tname.setTextContent(table.getTable_caption());
        tableEl.appendChild(tname);
        Element TableType=doc.createElement(""String_Node_Str"");
        TableType.setTextContent(""String_Node_Str"");
        tableEl.appendChild(TableType);
        Element torder=doc.createElement(""String_Node_Str"");
        torder.setTextContent(table.getTable_title());
        tableEl.appendChild(torder);
        Element tfooter=doc.createElement(""String_Node_Str"");
        tfooter.setTextContent(table.getTable_footer());
        tableEl.appendChild(tfooter);
        Element document=doc.createElement(""String_Node_Str"");
        rootElement.appendChild(document);
        Element docTitle=doc.createElement(""String_Node_Str"");
        docTitle.setTextContent(art.getTitle());
        document.appendChild(docTitle);
        Element pmc=doc.createElement(""String_Node_Str"");
        pmc.setTextContent(art.getPmc());
        document.appendChild(pmc);
        if (TablInExMain.ExportLinkedData) {
          TablInExMain.linkedData.AddCell(cells[j][0].getCell_content(),SubHeaders,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),cells[0][0].getCell_content(),j,k);
        }
        DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
        table.output.add(dataExtObj);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
  table.cells=cells;
  return table;
}","/** 
 * Process table with subheaders without header.
 * @param cells the cells
 * @param table the table
 * @param art the art
 * @param tableFileName the table file name
 */
private Table processTableWithSubheadersWithoutHeader(Cell[][] cells,Table table,Article art,String tableFileName){
  if (!hasTableSubheader(cells,table)) {
    return table;
  }
  if (table.getTableStructureType() != Table.StructureType.SUBHEADER && table.getTableStructureType() != null) {
    return table;
  }
  Statistics.addSubheaderTable();
  table.setTableStructureType(Table.StructureType.SUBHEADER);
  if (TablInExMain.ExportLinkedData) {
    TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
  }
  String[] headerStackA=new String[20];
  String[] headerStackIndexes=new String[20];
  int currentSubHeaderLevel=0;
  String prevSubheader=""String_Node_Str"";
  String prevSubheaderIndex=""String_Node_Str"";
  boolean hasSpaceSubheaders=false;
  if (table.isHasHeader() == false) {
    table=checkHeaders(table);
  }
  cells=table.cells;
  Cell[][] original_cells=table.original_cells;
  for (int j=0; j < cells.length; j++) {
    if (cells[j][0].isIs_header())     continue;
    boolean emptyLine=true;
    for (int h=0; h < cells[j].length; h++) {
      if (!Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
        emptyLine=false;
        break;
      }
    }
    if (emptyLine)     continue;
    if (cells[j][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[j][0].getCells_columnspanning() >= table.getNum_of_columns()) {
      if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        currentSubHeaderLevel++;
      }
 else {
        currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        currentSubHeaderLevel++;
      }
      SetUnderSubheaderRow(cells[j]);
      SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
      continue;
    }
    boolean emptyCells=true;
    for (int h=1; h < cells[j].length; h++) {
      if (cells[j][h].getCell_content() == null) {
        cells[j][h].setCell_content(""String_Node_Str"");
      }
      if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()) || !Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
        emptyCells=false;
      }
    }
    if (emptyCells) {
      if (currentSubHeaderLevel != 0 && currentSubHeaderLevel == j - 1) {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
          SetUnderSubheaderRow(cells[j]);
          SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
          SetUnderSubheaderRow(cells[j]);
          SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        }
      }
 else {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
          SetUnderSubheaderRow(cells[j]);
          SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
          SetUnderSubheaderRow(cells[j]);
          SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        }
        if (j > 0 && isRowSubheader(cells[j - 1],table)) {
          prevSubheader=cells[j - 1][0].getCell_content();
          prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
        }
        continue;
      }
    }
    if (isRowSubheader(cells[j],table)) {
      if (j > 0 && isRowSubheader(cells[j - 1],table)) {
        prevSubheader=cells[j - 1][0].getCell_content();
        prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
      }
      continue;
    }
    if (cells[j][0].getCell_content() == null) {
      cells[j][0].setCell_content(""String_Node_Str"");
    }
    if ((cells != null && cells[j] != null && cells[j][0] != null && cells[j][0].getCell_content() != null) && (cells[j][0].getCell_content().length() > 0 && Utilities.isSpace(cells[j][0].getCell_content().trim().charAt(0)))) {
      hasSpaceSubheaders=true;
      SetUnderSubheaderRow(cells[j]);
      SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
      if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
 else {
        currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
    }
 else {
      if (hasSpaceSubheaders)       currentSubHeaderLevel=0;
      if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        SetUnderSubheaderRow(cells[j],headerStackIndexes[currentSubHeaderLevel]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()],headerStackIndexes[currentSubHeaderLevel]);
      }
 else {
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
    }
    for (int k=1; k < cells[j].length; k++) {
      try {
        DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
        Document doc=docBuilder.newDocument();
        Element rootElement=doc.createElement(""String_Node_Str"");
        doc.appendChild(rootElement);
        Element cell=doc.createElement(""String_Node_Str"");
        rootElement.appendChild(cell);
        Element NavigationPath=doc.createElement(""String_Node_Str"");
        if (!Utilities.isSpaceOrEmpty(cells[0][0].getCell_content()) && cells[0][0].isIs_header()) {
          Element Head00=doc.createElement(""String_Node_Str"");
          Head00.setTextContent(cells[0][0].getCell_content());
          cells[j][k].setHead00(cells[0][0].getCell_content());
          NavigationPath.appendChild(Head00);
        }
        Element Stub=doc.createElement(""String_Node_Str"");
        if (currentSubHeaderLevel > 0) {
          getStackAsElements(headerStackA,prevSubheader,currentSubHeaderLevel,doc,Stub);
          getStackIndex(headerStackIndexes,prevSubheaderIndex,currentSubHeaderLevel,cells[j][k],table);
        }
        String subheaderValues=""String_Node_Str"";
        String[] SubHeaders=new String[Stub.getChildNodes().getLength()];
        for (int l=0; l < Stub.getChildNodes().getLength(); l++) {
          subheaderValues+=""String_Node_Str"" + Stub.getChildNodes().item(l).getTextContent();
          SubHeaders[l]=Stub.getChildNodes().item(l).getTextContent();
        }
        cells[j][k].setSubheader_values(subheaderValues);
        Element ss=doc.createElement(""String_Node_Str"");
        ss.setTextContent(cells[j][0].getCell_content());
        cells[j][k].setStub_values(cells[j][0].getCell_content());
        Stub.appendChild(ss);
        NavigationPath.appendChild(Stub);
        if (cells[0][k].isIs_header()) {
          for (int s=0; s < cells[0][k].headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(cells[0][k].headers.get(s));
            cells[j][k].setHeader_values(cells[0][k].getCell_content());
            NavigationPath.appendChild(Header);
          }
        }
        cell.appendChild(NavigationPath);
        Element info=doc.createElement(""String_Node_Str"");
        info.setTextContent(cells[j][k].getCell_content());
        cell.appendChild(info);
        Element CellType=doc.createElement(""String_Node_Str"");
        CellType.setTextContent(cells[j][k].getCellType());
        cell.appendChild(CellType);
        Element tableEl=doc.createElement(""String_Node_Str"");
        rootElement.appendChild(tableEl);
        Element tname=doc.createElement(""String_Node_Str"");
        tname.setTextContent(table.getTable_caption());
        tableEl.appendChild(tname);
        Element TableType=doc.createElement(""String_Node_Str"");
        TableType.setTextContent(""String_Node_Str"");
        tableEl.appendChild(TableType);
        Element torder=doc.createElement(""String_Node_Str"");
        torder.setTextContent(table.getTable_title());
        tableEl.appendChild(torder);
        Element tfooter=doc.createElement(""String_Node_Str"");
        tfooter.setTextContent(table.getTable_footer());
        tableEl.appendChild(tfooter);
        Element document=doc.createElement(""String_Node_Str"");
        rootElement.appendChild(document);
        Element docTitle=doc.createElement(""String_Node_Str"");
        docTitle.setTextContent(art.getTitle());
        document.appendChild(docTitle);
        Element pmc=doc.createElement(""String_Node_Str"");
        pmc.setTextContent(art.getPmc());
        document.appendChild(pmc);
        if (TablInExMain.ExportLinkedData) {
          TablInExMain.linkedData.AddCell(cells[j][0].getCell_content(),SubHeaders,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),cells[0][0].getCell_content(),j,k);
        }
        DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
        table.output.add(dataExtObj);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
  table.cells=cells;
  return table;
}",0.9860032330560264
36974,"public static int numOfSpaceOrBullets(String s){
  int num=0;
  if (s == null)   return 0;
  if (s.length() == 0)   return 0;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (((int)ch) == 8195 || (int)ch == 160 || (int)ch == ' ' || (int)ch == 8194 || (int)ch == 8201 || (int)ch == '-' || (int)ch == '�') {
      num++;
    }
 else     break;
  }
  return num;
}","public static int numOfSpaceOrBullets(String s){
  int num=0;
  if (s == null)   return 0;
  if (s.length() == 0)   return 0;
  for (int i=0; i < s.length(); i++) {
    char ch=s.charAt(i);
    if (((int)ch) == 8195 || (int)ch == 160 || (int)ch == ' ' || (int)ch == 8194 || (int)ch == 8201 || (int)ch == '-' || (int)ch == '•') {
      num++;
    }
 else     break;
  }
  return num;
}",0.9973958333333334
36975,"/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      if (table.getTableStructureType() == null) {
        table.setTableStructureType(StructureType.NULL);
      }
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      if (cells != null) {
        for (int j=0; j < cells.length; j++) {
          for (int k=0; k < cells[j].length; k++) {
            Element CellEl=doc.createElement(""String_Node_Str"");
            CellsEl.appendChild(CellEl);
            Element CellID=doc.createElement(""String_Node_Str"");
            String cellIDStr=""String_Node_Str"" + j + ""String_Node_Str""+ k;
            CellID.setTextContent(cellIDStr);
            cells[j][k].CellId=cellIDStr;
            CellEl.appendChild(CellID);
            if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
              Element SuperRowRef=doc.createElement(""String_Node_Str"");
              SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
              CellEl.appendChild(SuperRowRef);
            }
            Element CellValue=doc.createElement(""String_Node_Str"");
            CellValue.setTextContent(cells[j][k].getCell_content());
            CellEl.appendChild(CellValue);
            String valueToParse=cells[j][k].getCell_content();
            LinkedList<ValueItem> valueTags=TablInExMain.vp.parseValue(valueToParse);
            Element CellSemantics=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellSemantics);
            for (int p=0; p < valueTags.size(); p++) {
              Element CellValueSemantics=doc.createElement(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).type.toString());
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).start_position + ""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).end_position + ""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).value);
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellSemantics.appendChild(CellValueSemantics);
            }
            int mathTypeIndex=valueToParse.indexOf(""String_Node_Str"");
            if (mathTypeIndex > 0) {
              valueToParse=valueToParse.substring(0,mathTypeIndex);
            }
            LinkedList<Word> words=null;
            if (valueToParse != null) {
              valueToParse=valueToParse.trim();
              if (!Utilities.isSpaceOrEmpty(valueToParse)) {
                words=TablInExMain.marvin.annotate(valueToParse);
              }
            }
            if (words != null) {
              for (int p=0; p < words.size(); p++) {
                for (int s=0; s < words.get(p).wordmeanings.size(); s++) {
                  Element Meaning=doc.createElement(""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).Source);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).id);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).URL);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).startAt + ""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).endAt + ""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).appearingWord);
                  CellSemantics.appendChild(Meaning);
                }
              }
            }
            Element CellType=doc.createElement(""String_Node_Str"");
            CellType.setTextContent(cells[j][k].getCellType());
            CellEl.appendChild(CellType);
            for (int s=j - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[j][k].isIs_header() && !cells[j - 1][k].isIs_header()) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderRef=doc.createElement(""String_Node_Str"");
                HeaderRef.setTextContent(""String_Node_Str"" + s + ""String_Node_Str""+ k);
                CellEl.appendChild(HeaderRef);
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderCatRef=doc.createElement(""String_Node_Str"");
                HeaderCatRef.setTextContent(""String_Node_Str"" + s + ""String_Node_Str""+ 0);
                CellEl.appendChild(HeaderCatRef);
                break;
              }
            }
            for (int s=k - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
                Element StubRef=doc.createElement(""String_Node_Str"");
                StubRef.setTextContent(""String_Node_Str"" + j + ""String_Node_Str""+ s);
                CellEl.appendChild(StubRef);
                break;
              }
            }
            Element CellRoles=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellRoles);
            boolean isDataCell=true;
            if (cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (cells[j][k].isIs_stub() && cells[j][k].getCells_columnspanning() == 0) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            boolean isSuperRow=false;
            for (int l=0; l < 5; l++) {
              if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
                isSuperRow=true;
                break;
              }
            }
            if (isSuperRow) {
              for (int l=0; l < cells[j].length; l++) {
                cells[j][l].setIs_subheader(true);
              }
            }
            if (cells[j][k].isIs_subheader()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            if (k == 0 && cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (isDataCell) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            Element CellRow=doc.createElement(""String_Node_Str"");
            CellRow.setTextContent(j + ""String_Node_Str"");
            CellEl.appendChild(CellRow);
            Element CellColumn=doc.createElement(""String_Node_Str"");
            CellColumn.setTextContent(k + ""String_Node_Str"");
            CellEl.appendChild(CellColumn);
          }
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      if (table.getTableStructureType() == null) {
        table.setTableStructureType(StructureType.NULL);
      }
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      if (cells != null) {
        for (int j=0; j < cells.length; j++) {
          for (int k=0; k < cells[j].length; k++) {
            Element CellEl=doc.createElement(""String_Node_Str"");
            CellsEl.appendChild(CellEl);
            Element CellID=doc.createElement(""String_Node_Str"");
            String cellIDStr=""String_Node_Str"" + j + ""String_Node_Str""+ k;
            CellID.setTextContent(cellIDStr);
            cells[j][k].CellId=cellIDStr;
            CellEl.appendChild(CellID);
            if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
              Element SuperRowRef=doc.createElement(""String_Node_Str"");
              SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
              CellEl.appendChild(SuperRowRef);
            }
            Element CellValue=doc.createElement(""String_Node_Str"");
            CellValue.setTextContent(cells[j][k].getCell_content());
            CellEl.appendChild(CellValue);
            String valueToParse=cells[j][k].getCell_content();
            LinkedList<ValueItem> valueTags=TablInExMain.vp.parseValue(valueToParse);
            Element CellSemantics=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellSemantics);
            for (int p=0; p < valueTags.size(); p++) {
              Element CellValueSemantics=doc.createElement(""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).type.toString());
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).start_position + ""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).end_position + ""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",valueTags.get(p).value);
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellValueSemantics.setAttribute(""String_Node_Str"",""String_Node_Str"");
              CellSemantics.appendChild(CellValueSemantics);
            }
            int mathTypeIndex=valueToParse.indexOf(""String_Node_Str"");
            if (mathTypeIndex > 0) {
              valueToParse=valueToParse.substring(0,mathTypeIndex);
            }
            LinkedList<Word> words=null;
            if (valueToParse != null) {
              valueToParse=valueToParse.trim();
              if (!Utilities.isSpaceOrEmpty(valueToParse)) {
                words=TablInExMain.marvin.annotate(valueToParse);
              }
            }
            if (words != null) {
              for (int p=0; p < words.size(); p++) {
                for (int s=0; s < words.get(p).wordmeanings.size(); s++) {
                  Element Meaning=doc.createElement(""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).Source);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).id);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).URL);
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).startAt + ""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).endAt + ""String_Node_Str"");
                  Meaning.setAttribute(""String_Node_Str"",words.get(p).wordmeanings.get(s).appearingWord);
                  CellSemantics.appendChild(Meaning);
                }
              }
            }
            Element CellType=doc.createElement(""String_Node_Str"");
            CellType.setTextContent(cells[j][k].getCellType());
            CellEl.appendChild(CellType);
            for (int s=j - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[j][k].isIs_header() && !cells[j - 1][k].isIs_header()) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderRef=doc.createElement(""String_Node_Str"");
                HeaderRef.setTextContent(""String_Node_Str"" + s + ""String_Node_Str""+ k);
                CellEl.appendChild(HeaderRef);
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderCatRef=doc.createElement(""String_Node_Str"");
                HeaderCatRef.setTextContent(""String_Node_Str"" + s + ""String_Node_Str""+ 0);
                CellEl.appendChild(HeaderCatRef);
                break;
              }
            }
            for (int s=k - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
                Element StubRef=doc.createElement(""String_Node_Str"");
                StubRef.setTextContent(""String_Node_Str"" + j + ""String_Node_Str""+ s);
                CellEl.appendChild(StubRef);
                break;
              }
            }
            Element CellRoles=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellRoles);
            boolean isDataCell=true;
            if (cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (cells[j][k].isIs_stub() && cells[j][k].getColumnspanning_index() == 0) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            boolean isSuperRow=false;
            for (int l=0; l < 5; l++) {
              if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
                isSuperRow=true;
                break;
              }
            }
            if (isSuperRow) {
              for (int l=0; l < cells[j].length; l++) {
                cells[j][l].setIs_subheader(true);
              }
            }
            if (cells[j][k].isIs_subheader()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            if (isDataCell) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            Element CellRow=doc.createElement(""String_Node_Str"");
            CellRow.setTextContent(j + ""String_Node_Str"");
            CellEl.appendChild(CellRow);
            Element CellColumn=doc.createElement(""String_Node_Str"");
            CellColumn.setTextContent(k + ""String_Node_Str"");
            CellEl.appendChild(CellColumn);
          }
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.98782811588567
36976,"public Table processMultiTable(Cell[][] cells,Table table,Article art,String tableFileName){
  if (table.getTableStructureType() != Table.StructureType.MULTI && table.getTableStructureType() != null) {
    return table;
  }
  Statistics.addMultiTable();
  table.setTableStructureType(Table.StructureType.MULTI);
  if (TablInExMain.ExportLinkedData) {
    TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
  }
  if (!table.isHasHeader()) {
    table=checkHeaders(table);
    cells=table.cells;
  }
  table.cells=markMultiTableHeaders(cells);
  table.original_cells=table.cells;
  cells=table.cells;
  Cell[][] original_cells=table.original_cells;
  if (cells[0].length > 1) {
    String[] headerStackA=new String[20];
    String[] headerStackIndexes=new String[20];
    int currentSubHeaderLevel=0;
    String prevSubheader=""String_Node_Str"";
    String prevSubheaderIndex=""String_Node_Str"";
    boolean hasSpaceSubheaders=false;
    if (table.isHasHeader() == false) {
      table=checkHeaders(table);
    }
    cells=table.cells;
    boolean firstHeader=true;
    for (int j=0; j < cells.length; j++) {
      if (cells[j][0].isIs_header()) {
        continue;
      }
      boolean emptyLine=true;
      for (int h=0; h < cells[j].length; h++) {
        if (!Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyLine=false;
          break;
        }
      }
      if (emptyLine)       continue;
      if (cells[j][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[j][0].getCells_columnspanning() >= table.getNum_of_columns()) {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
        }
        SetUnderSubheaderRow(cells[j]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        continue;
      }
      boolean emptyCells=true;
      for (int h=1; h < cells[j].length; h++) {
        if (cells[j][h].getCell_content() == null) {
          cells[j][h].setCell_content(""String_Node_Str"");
        }
        if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()) || !Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyCells=false;
        }
      }
      if (emptyCells) {
        if (currentSubHeaderLevel != 0 && currentSubHeaderLevel == j - 1) {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
        }
 else {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
          if (j > 0 && isRowSubheader(cells[j - 1],table)) {
            prevSubheader=cells[j - 1][0].getCell_content();
            prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
          }
          continue;
        }
      }
      if (isRowSubheader(cells[j],table)) {
        if (j > 0 && isRowSubheader(cells[j - 1],table)) {
          prevSubheader=cells[j - 1][0].getCell_content();
          prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
        }
        continue;
      }
      if (cells[j][0].getCell_content() == null) {
        cells[j][0].setCell_content(""String_Node_Str"");
      }
      if ((cells != null && cells[j] != null && cells[j][0] != null && cells[j][0].getCell_content() != null) && (cells[j][0].getCell_content().length() > 0 && Utilities.isSpace(cells[j][0].getCell_content().trim().charAt(0))) || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        hasSpaceSubheaders=true;
        SetUnderSubheaderRow(cells[j]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        }
      }
 else {
        if (hasSpaceSubheaders)         currentSubHeaderLevel=0;
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
      for (int k=1; k < cells[j].length; k++) {
        try {
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          String Head00Str=""String_Node_Str"";
          if (!Utilities.isSpaceOrEmpty(cells[0][0].getCell_content()) && cells[0][0].isIs_header()) {
            boolean foundHeader=false;
            for (int l=j; l >= 0; l--) {
              if (cells[l][0].isIs_header()) {
                if (!cells[l][0].getCell_content().equals(""String_Node_Str""))                 Head00Str=cells[l][0].getCell_content();
                foundHeader=true;
              }
              if (foundHeader && !cells[l][0].isIs_header()) {
                break;
              }
            }
            Element Head00=doc.createElement(""String_Node_Str"");
            Head00.setTextContent(Head00Str);
            cells[j][k].setHead00(Head00Str);
            NavigationPath.appendChild(Head00);
          }
          Element Stub=doc.createElement(""String_Node_Str"");
          if (currentSubHeaderLevel > 0) {
            getStackAsElements(headerStackA,prevSubheader,currentSubHeaderLevel,doc,Stub);
            getStackIndex(headerStackIndexes,prevSubheaderIndex,currentSubHeaderLevel,cells[j][k],table);
          }
          String subheaderValues=""String_Node_Str"";
          String[] SubHeaders=new String[Stub.getChildNodes().getLength()];
          for (int l=0; l < Stub.getChildNodes().getLength(); l++) {
            subheaderValues+=""String_Node_Str"" + Stub.getChildNodes().item(l).getTextContent();
            SubHeaders[l]=Stub.getChildNodes().item(l).getTextContent();
          }
          cells[j][k].setSubheader_values(subheaderValues);
          Element ss=doc.createElement(""String_Node_Str"");
          ss.setTextContent(cells[j][0].getCell_content());
          cells[j][k].setStub_values(cells[j][0].getCell_content());
          Stub.appendChild(ss);
          NavigationPath.appendChild(Stub);
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            cells[j][k].setHeader_values(headers.toString());
            NavigationPath.appendChild(Header);
          }
          cell.appendChild(NavigationPath);
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableEl=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableEl);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableEl.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableEl.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableEl.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableEl.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(cells[j][0].getCell_content(),SubHeaders,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),cells[0][0].getCell_content(),j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 else {
    boolean hasSubheaders=hasSuperRowsListTable(cells,table);
    boolean TopLevel=false;
    String currentSubHeader=""String_Node_Str"";
    for (int j=0; j < cells.length; j++) {
      for (int k=0; k < cells[j].length; k++) {
        if (cells[j][k].isIs_header())         continue;
        try {
          if (hasSubheaders) {
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && cells[j + 1] != null && Utilities.numOfSpaceOrBullets(cells[j + 1][k].getCell_content()) != 0 && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && (cells[j + 2] != null && Utilities.numOfSpaceOrBullets(cells[j + 2][k].getCell_content()) != 0) && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == true && !cells[j][k].isBreakingLineOverRow() && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && !currentSubHeader.equals(""String_Node_Str"")) {
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
          }
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            cells[j][k].setHeader_values(headers.toString());
            NavigationPath.appendChild(Header);
          }
          if (currentSubHeader != ""String_Node_Str"") {
            Element SubHeader=doc.createElement(""String_Node_Str"");
            SubHeader.setTextContent(currentSubHeader);
            NavigationPath.appendChild(SubHeader);
          }
          cell.appendChild(NavigationPath);
          cells[j][k].setHeader_values(cells[0][k].getCell_content());
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableA=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableA);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableA.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableA.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableA.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableA.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(""String_Node_Str"",null,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),""String_Node_Str"",j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
  table.cells=cells;
  return table;
}","public Table processMultiTable(Cell[][] cells,Table table,Article art,String tableFileName){
  if (table.getTableStructureType() != Table.StructureType.MULTI && table.getTableStructureType() != null) {
    return table;
  }
  Statistics.addMultiTable();
  table.setTableStructureType(Table.StructureType.MULTI);
  if (TablInExMain.ExportLinkedData) {
    TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
  }
  if (!table.isHasHeader()) {
    table=checkHeaders(table);
    cells=table.cells;
  }
  table.original_cells=markMultiTableHeaders(table.original_cells);
  table.cells=markMultiTableHeaders(table.cells);
  cells=table.cells;
  Cell[][] original_cells=table.original_cells;
  if (cells[0].length > 1) {
    String[] headerStackA=new String[20];
    String[] headerStackIndexes=new String[20];
    int currentSubHeaderLevel=0;
    String prevSubheader=""String_Node_Str"";
    String prevSubheaderIndex=""String_Node_Str"";
    boolean hasSpaceSubheaders=false;
    if (table.isHasHeader() == false) {
      table=checkHeaders(table);
    }
    cells=table.cells;
    boolean firstHeader=true;
    for (int j=0; j < cells.length; j++) {
      if (cells[j][0].isIs_header()) {
        continue;
      }
      boolean emptyLine=true;
      for (int h=0; h < cells[j].length; h++) {
        if (!Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyLine=false;
          break;
        }
      }
      if (emptyLine)       continue;
      if (cells[j][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[j][0].getCells_columnspanning() >= table.getNum_of_columns()) {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
          currentSubHeaderLevel++;
        }
        SetUnderSubheaderRow(cells[j]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        continue;
      }
      boolean emptyCells=true;
      for (int h=1; h < cells[j].length; h++) {
        if (cells[j][h].getCell_content() == null) {
          cells[j][h].setCell_content(""String_Node_Str"");
        }
        if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()) || !Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyCells=false;
        }
      }
      if (emptyCells) {
        if (currentSubHeaderLevel != 0 && currentSubHeaderLevel == j - 1) {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
        }
 else {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
            headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
            currentSubHeaderLevel++;
            SetUnderSubheaderRow(cells[j]);
            SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
          }
          if (j > 0 && isRowSubheader(cells[j - 1],table)) {
            prevSubheader=cells[j - 1][0].getCell_content();
            prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
          }
          continue;
        }
      }
      if (isRowSubheader(cells[j],table)) {
        if (j > 0 && isRowSubheader(cells[j - 1],table)) {
          prevSubheader=cells[j - 1][0].getCell_content();
          prevSubheaderIndex=cells[j - 1][0].getRow_number() + cells[j - 1][0].getColumn_number() + ""String_Node_Str"";
        }
        continue;
      }
      if (cells[j][0].getCell_content() == null) {
        cells[j][0].setCell_content(""String_Node_Str"");
      }
      if ((cells != null && cells[j] != null && cells[j][0] != null && cells[j][0].getCell_content() != null) && (cells[j][0].getCell_content().length() > 0 && Utilities.isSpace(cells[j][0].getCell_content().trim().charAt(0))) || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        hasSpaceSubheaders=true;
        SetUnderSubheaderRow(cells[j]);
        SetUnderSubheaderRow(original_cells[cells[j][0].getRow_number()]);
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        }
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
          headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
        }
      }
 else {
        if (hasSpaceSubheaders)         currentSubHeaderLevel=0;
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        headerStackIndexes[currentSubHeaderLevel]=""String_Node_Str"" + original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getRow_number() + ""String_Node_Str""+ original_cells[cells[j][0].getRow_number()][cells[j][0].getColumn_number()].getColumn_number();
      }
      for (int k=1; k < cells[j].length; k++) {
        try {
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          String Head00Str=""String_Node_Str"";
          if (!Utilities.isSpaceOrEmpty(cells[0][0].getCell_content()) && cells[0][0].isIs_header()) {
            boolean foundHeader=false;
            for (int l=j; l >= 0; l--) {
              if (cells[l][0].isIs_header()) {
                if (!cells[l][0].getCell_content().equals(""String_Node_Str""))                 Head00Str=cells[l][0].getCell_content();
                foundHeader=true;
              }
              if (foundHeader && !cells[l][0].isIs_header()) {
                break;
              }
            }
            Element Head00=doc.createElement(""String_Node_Str"");
            Head00.setTextContent(Head00Str);
            cells[j][k].setHead00(Head00Str);
            NavigationPath.appendChild(Head00);
          }
          Element Stub=doc.createElement(""String_Node_Str"");
          if (currentSubHeaderLevel > 0) {
            getStackAsElements(headerStackA,prevSubheader,currentSubHeaderLevel,doc,Stub);
            getStackIndex(headerStackIndexes,prevSubheaderIndex,currentSubHeaderLevel,cells[j][k],table);
          }
          String subheaderValues=""String_Node_Str"";
          String[] SubHeaders=new String[Stub.getChildNodes().getLength()];
          for (int l=0; l < Stub.getChildNodes().getLength(); l++) {
            subheaderValues+=""String_Node_Str"" + Stub.getChildNodes().item(l).getTextContent();
            SubHeaders[l]=Stub.getChildNodes().item(l).getTextContent();
          }
          cells[j][k].setSubheader_values(subheaderValues);
          Element ss=doc.createElement(""String_Node_Str"");
          ss.setTextContent(cells[j][0].getCell_content());
          cells[j][k].setStub_values(cells[j][0].getCell_content());
          Stub.appendChild(ss);
          NavigationPath.appendChild(Stub);
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            cells[j][k].setHeader_values(headers.toString());
            NavigationPath.appendChild(Header);
          }
          cell.appendChild(NavigationPath);
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableEl=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableEl);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableEl.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableEl.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableEl.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableEl.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(cells[j][0].getCell_content(),SubHeaders,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),cells[0][0].getCell_content(),j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 else {
    boolean hasSubheaders=hasSuperRowsListTable(cells,table);
    boolean TopLevel=false;
    String currentSubHeader=""String_Node_Str"";
    for (int j=0; j < cells.length; j++) {
      for (int k=0; k < cells[j].length; k++) {
        if (cells[j][k].isIs_header())         continue;
        try {
          if (hasSubheaders) {
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && cells[j + 1] != null && Utilities.numOfSpaceOrBullets(cells[j + 1][k].getCell_content()) != 0 && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && (cells[j + 2] != null && Utilities.numOfSpaceOrBullets(cells[j + 2][k].getCell_content()) != 0) && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == true && !cells[j][k].isBreakingLineOverRow() && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && !currentSubHeader.equals(""String_Node_Str"")) {
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
          }
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            cells[j][k].setHeader_values(headers.toString());
            NavigationPath.appendChild(Header);
          }
          if (currentSubHeader != ""String_Node_Str"") {
            Element SubHeader=doc.createElement(""String_Node_Str"");
            SubHeader.setTextContent(currentSubHeader);
            NavigationPath.appendChild(SubHeader);
          }
          cell.appendChild(NavigationPath);
          cells[j][k].setHeader_values(cells[0][k].getCell_content());
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableA=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableA);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableA.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableA.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableA.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableA.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(""String_Node_Str"",null,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),""String_Node_Str"",j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
  table.cells=cells;
  return table;
}",0.9970758679355628
36977,"/** 
 * Function that simplifies complex headers, that have more then one row. Function merges complex header into one row header, by appending  higher cells before content of lower cells. At the end copied cells are deleted.
 * @param cells - Cell[][] - Table
 * @return cells - Cell[][] - Table with simplified header
 */
public static Table MergeHeaders(Table table){
  if (table.cells == null)   return table;
  if (table.stat.getNum_of_header_rows() < 2 && table.cells != null && table.cells[0] != null) {
    for (int j=0; j < table.cells[0].length; j++)     table.cells[0][j].headers.add(table.cells[0][j].getCell_content());
    return table;
  }
  Cell[][] cells=table.getTable_cells();
  for (int i=table.stat.getNum_of_header_rows() - 1; i >= 0; i--) {
    for (int j=0; j < cells[i].length; j++) {
      if (cells[i][j].getCell_content() == null) {
        cells[i][j].setCell_content(""String_Node_Str"");
      }
      if (!Utilities.isSpaceOrEmpty(cells[i][j].getCell_content())) {
        if (cells.length > i + 1 && cells[i + 1] != null && cells[i + 1][j] != null && !cells[i][j].getCell_content().equals(cells[i + 1][j].getCell_content())) {
          cells[table.stat.getNum_of_header_rows() - 1][j].headers.addFirst(cells[i][j].getCell_content());
        }
        cells[table.stat.getNum_of_header_rows() - 1][j].setIs_header(true);
      }
    }
  }
  System.out.println(""String_Node_Str"" + table.getDocumentFileName());
  Cell[][] newcells=new Cell[table.cells.length - table.stat.getNum_of_header_rows() + 1][table.getNum_of_columns()];
  for (int i=0; i < newcells.length; i++) {
    newcells[i]=cells[i + table.stat.getNum_of_header_rows() - 1].clone();
  }
  for (int j=0; j < newcells[0].length; j++) {
    for (int s=newcells[0][j].headers.size() - 1; s >= 0; s--)     if (!newcells[0][j].headers.get(s).equals(newcells[0][j].getCell_content()))     newcells[0][j].setCell_content(newcells[0][j].headers.get(s) + ""String_Node_Str"" + newcells[0][j].getCell_content());
  }
  table.stat.setNum_of_header_rows(1);
  table.setNum_of_rows(1 + table.stat.getNum_of_body_rows());
  table.cells=newcells;
  for (int i=0; i < table.cells.length; i++) {
    int num_of_empty=0;
    for (int j=0; j < table.cells[i].length; j++) {
      if (table.cells[i][j].getCell_content() == null) {
        table.cells[i][j].setCell_content(""String_Node_Str"");
      }
      if (table.cells[i][j] == null) {
        table.cells[i][j]=new Cell(i,j);
        table.cells[i][j].setCell_content(""String_Node_Str"");
      }
      if (Utilities.isSpaceOrEmpty(table.cells[i][j].getCell_content())) {
        num_of_empty++;
      }
    }
    if (table.getNum_of_columns() - num_of_empty > 1)     table.isEmptyOnlyHeaders=false;
  }
  return table;
}","/** 
 * Function that simplifies complex headers, that have more then one row. Function merges complex header into one row header, by appending  higher cells before content of lower cells. At the end copied cells are deleted.
 * @param cells - Cell[][] - Table
 * @return cells - Cell[][] - Table with simplified header
 */
public static Table MergeHeaders(Table table){
  table.original_cells=table.cells;
  if (table.cells == null)   return table;
  if (table.stat.getNum_of_header_rows() < 2 && table.cells != null && table.cells[0] != null) {
    for (int j=0; j < table.cells[0].length; j++)     table.cells[0][j].headers.add(table.cells[0][j].getCell_content());
    return table;
  }
  Cell[][] cells=table.getTable_cells();
  for (int i=table.stat.getNum_of_header_rows() - 1; i >= 0; i--) {
    for (int j=0; j < cells[i].length; j++) {
      if (cells[i][j].getCell_content() == null) {
        cells[i][j].setCell_content(""String_Node_Str"");
      }
      if (!Utilities.isSpaceOrEmpty(cells[i][j].getCell_content())) {
        if (cells.length > i + 1 && cells[i + 1] != null && cells[i + 1][j] != null && !cells[i][j].getCell_content().equals(cells[i + 1][j].getCell_content())) {
          cells[table.stat.getNum_of_header_rows() - 1][j].headers.addFirst(cells[i][j].getCell_content());
        }
        cells[table.stat.getNum_of_header_rows() - 1][j].setIs_header(true);
      }
    }
  }
  System.out.println(""String_Node_Str"" + table.getDocumentFileName());
  Cell[][] newcells=new Cell[table.cells.length - table.stat.getNum_of_header_rows() + 1][table.getNum_of_columns()];
  for (int i=0; i < newcells.length; i++) {
    newcells[i]=cells[i + table.stat.getNum_of_header_rows() - 1].clone();
  }
  for (int j=0; j < newcells[0].length; j++) {
    for (int s=newcells[0][j].headers.size() - 1; s >= 0; s--)     if (!newcells[0][j].headers.get(s).equals(newcells[0][j].getCell_content()))     newcells[0][j].setCell_content(newcells[0][j].headers.get(s) + ""String_Node_Str"" + newcells[0][j].getCell_content());
  }
  table.stat.setNum_of_header_rows(1);
  table.setNum_of_rows(1 + table.stat.getNum_of_body_rows());
  table.cells=newcells;
  for (int i=0; i < table.cells.length; i++) {
    int num_of_empty=0;
    for (int j=0; j < table.cells[i].length; j++) {
      if (table.cells[i][j].getCell_content() == null) {
        table.cells[i][j].setCell_content(""String_Node_Str"");
      }
      if (table.cells[i][j] == null) {
        table.cells[i][j]=new Cell(i,j);
        table.cells[i][j].setCell_content(""String_Node_Str"");
      }
      if (Utilities.isSpaceOrEmpty(table.cells[i][j].getCell_content())) {
        num_of_empty++;
      }
    }
    if (table.getNum_of_columns() - num_of_empty > 1)     table.isEmptyOnlyHeaders=false;
  }
  return table;
}",0.99349475966751
36978,"/** 
 * Parses table, makes matrix of cells and put it into Article object
 * @param article - Article to populate
 * @param parse - Document which is being parsed
 * @return populated Article
 */
public Article ParseTables(Article article,Document parse){
  NodeList tablesxml=parse.getElementsByTagName(""String_Node_Str"");
  int numOfTables=getNumOfTablesInArticle(tablesxml);
  Table[] tables=new Table[numOfTables];
  article.setTables(tables);
  int tableindex=0;
  for (int i=0; i < tablesxml.getLength(); i++) {
    List<Node> inline_formula=null;
    if ((inline_formula != null && inline_formula.size() == 0) || inline_formula == null) {
      Statistics.addTable();
      String label=""String_Node_Str"" + tableindex;
      tables[tableindex]=new Table(label);
      tables[tableindex].setDocumentFileName(""String_Node_Str"" + article.getSpec_id());
      tables[tableindex].setXml(Utilities.CreateXMLStringFromSubNode(tablesxml.item(i)));
      System.out.println(""String_Node_Str"" + tables[tableindex].getTable_title());
      String caption=readTableLabel(tablesxml.item(i));
      tables[tableindex].setTable_caption(caption);
      String foot=ReadTableFooter(tablesxml.item(i));
      tables[tableindex].setTable_footer(foot);
      System.out.println(""String_Node_Str"" + foot);
      int headsize=0;
      List<Node> thead=null;
      if (tablesxml.getLength() > 0) {
        thead=getChildrenByTagName(tablesxml.item(0),""String_Node_Str"");
        headsize=thead.size();
      }
      List<Node> rowshead=null;
      if (headsize > 0) {
        rowshead=getChildrenByTagName(thead.get(0),""String_Node_Str"");
      }
 else {
        tables[tableindex].setHasHeader(false);
        Statistics.TableWithoutHead();
      }
      List<Node> tbody=getChildrenByTagName(tablesxml.item(0),""String_Node_Str"");
      if (tbody.size() == 0) {
        Statistics.TableWithoutBody();
        tables[tableindex].setHasBody(false);
        tableindex++;
        continue;
      }
      List<Node> rowsbody=getChildrenByTagName(tbody.get(0),""String_Node_Str"");
      int headrowscount=0;
      if (rowshead != null)       headrowscount=rowshead.size();
      int num_of_rows=rowsbody.size() + headrowscount;
      int cols=CountColumns(rowsbody,rowshead);
      int num_of_columns=cols;
      tables[tableindex].setNum_of_columns(num_of_columns);
      tables[tableindex].setNum_of_rows(num_of_rows);
      tables[tableindex].CreateCells(num_of_columns,num_of_rows);
      Cell[][] cells=tables[tableindex].getTable_cells();
      tables[tableindex]=ProcessTableHeader(article,tables[tableindex],cells,rowshead,headrowscount,num_of_columns);
      Statistics.addColumn(num_of_columns);
      Statistics.addRow(num_of_rows);
      tables[tableindex]=ProcessTableBody(article,tables[tableindex],cells,rowsbody,headrowscount,num_of_columns);
      tables[tableindex].setTable_cells(cells);
      for (int j=0; j < cells.length; j++) {
        for (int k=0; k < cells[j].length; k++) {
          System.out.println(j + ""String_Node_Str"" + k+ ""String_Node_Str""+ cells[j][k].getCell_content());
        }
      }
      System.out.println(""String_Node_Str"" + num_of_rows);
      System.out.println(""String_Node_Str"" + num_of_columns);
      tableindex++;
    }
  }
  return article;
}","/** 
 * Parses table, makes matrix of cells and put it into Article object
 * @param article - Article to populate
 * @param parse - Document which is being parsed
 * @return populated Article
 */
public Article ParseTables(Article article,Document parse){
  NodeList tablesxml=parse.getElementsByTagName(""String_Node_Str"");
  int numOfTables=getNumOfTablesInArticle(tablesxml);
  Table[] tables=new Table[numOfTables];
  article.setTables(tables);
  int tableindex=0;
  for (int i=0; i < tablesxml.getLength(); i++) {
    List<Node> inline_formula=null;
    if ((inline_formula != null && inline_formula.size() == 0) || inline_formula == null) {
      Statistics.addTable();
      String label=""String_Node_Str"" + tableindex;
      tables[tableindex]=new Table(label);
      tables[tableindex].setDocumentFileName(""String_Node_Str"" + article.getSpec_id());
      tables[tableindex].setXml(Utilities.CreateXMLStringFromSubNode(tablesxml.item(i)));
      System.out.println(""String_Node_Str"" + tables[tableindex].getTable_title());
      String caption=readTableLabel(tablesxml.item(i));
      tables[tableindex].setTable_caption(caption);
      try {
        Node sibling=tablesxml.item(i).getParentNode().getPreviousSibling();
        System.out.println(sibling.getTextContent());
        while (sibling != null) {
          sibling=sibling.getPreviousSibling();
          if (sibling.getNodeName() == ""String_Node_Str"") {
            tables[tableindex].setSectionOfTable(sibling.getTextContent().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
            break;
          }
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        System.out.println(""String_Node_Str"");
      }
      System.out.println(tables[tableindex].getSectionOfTable());
      String foot=ReadTableFooter(tablesxml.item(i));
      tables[tableindex].setTable_footer(foot);
      System.out.println(""String_Node_Str"" + foot);
      int headsize=0;
      List<Node> thead=null;
      if (tablesxml.getLength() > 0) {
        thead=getChildrenByTagName(tablesxml.item(i),""String_Node_Str"");
        headsize=thead.size();
      }
      List<Node> rowshead=null;
      if (headsize > 0) {
        rowshead=getChildrenByTagName(thead.get(0),""String_Node_Str"");
      }
 else {
        tables[tableindex].setHasHeader(false);
        Statistics.TableWithoutHead();
      }
      List<Node> tbody=getChildrenByTagName(tablesxml.item(i),""String_Node_Str"");
      if (tbody.size() == 0) {
        Statistics.TableWithoutBody();
        tables[tableindex].setHasBody(false);
        tableindex++;
        continue;
      }
      List<Node> rowsbody=getChildrenByTagName(tbody.get(0),""String_Node_Str"");
      int headrowscount=0;
      if (rowshead != null)       headrowscount=rowshead.size();
      int num_of_rows=rowsbody.size() + headrowscount;
      int cols=CountColumns(rowsbody,rowshead);
      int num_of_columns=cols;
      tables[tableindex].setNum_of_columns(num_of_columns);
      tables[tableindex].setNum_of_rows(num_of_rows);
      tables[tableindex].CreateCells(num_of_columns,num_of_rows);
      Cell[][] cells=tables[tableindex].getTable_cells();
      tables[tableindex]=ProcessTableHeader(article,tables[tableindex],cells,rowshead,headrowscount,num_of_columns);
      Statistics.addColumn(num_of_columns);
      Statistics.addRow(num_of_rows);
      tables[tableindex]=ProcessTableBody(article,tables[tableindex],cells,rowsbody,headrowscount,num_of_columns);
      tables[tableindex].setTable_cells(cells);
      for (int j=0; j < cells.length; j++) {
        for (int k=0; k < cells[j].length; k++) {
          System.out.println(j + ""String_Node_Str"" + k+ ""String_Node_Str""+ cells[j][k].getCell_content());
        }
      }
      System.out.println(""String_Node_Str"" + num_of_rows);
      System.out.println(""String_Node_Str"" + num_of_columns);
      tableindex++;
    }
  }
  return article;
}",0.9045711918243337
36979,"public static void main(String[] args){
  String propsFile=""String_Node_Str"";
  try {
    JWNL.initialize(new FileInputStream(propsFile));
  }
 catch (  Exception Ex) {
    Ex.printStackTrace();
  }
  concept=new ConceptizationStats();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  String path=args[0];
  Inpath=path;
  String runas=""String_Node_Str"";
  if (args.length > 1)   runas=args[1];
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    int i=Arrays.asList(args).indexOf(""String_Node_Str"");
    outputDest=args[i + 1];
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    int i=Arrays.asList(args).indexOf(""String_Node_Str"");
    learnheaders=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    shouldTag=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    ExportLinkedData=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    Conceptization=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    IEFreqSQLTial=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doStats=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    IEinSQLTial=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    IEFine=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    TypeClassify=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doXMLInput=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    ComplexClassify=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doIE=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    printHelp();
    return;
  }
  classifiers.PragmaticClassifier pc=new classifiers.PragmaticClassifier(""String_Node_Str"");
  if (TypeClassify)   SimpleTableClassifier.init(TablInExMain.Inpath);
  if (ComplexClassify)   SimpleTableClassifier.initComplexity(Inpath);
  System.out.println(""String_Node_Str"" + path);
  File Dir=new File(path);
  File[] files=Dir.listFiles();
  Article article=new Article(""String_Node_Str"");
  boolean newrun=true;
  String LinkedDataFolder=""String_Node_Str"";
  if (ExportLinkedData) {
    boolean success=(new File(LinkedDataFolder)).mkdirs();
  }
  for (int a=0; a < files.length; a++) {
    if (ExportLinkedData) {
      linkedData=new DecompositionRDFWriter();
    }
    if (runas.toLowerCase().equals(""String_Node_Str"")) {
      article=runReadingloopOneFile(article,files[a],PMCXMLReader.class);
      for (int s=0; s < article.getTables().length; s++) {
        Cell[][] original_cells=new Cell[article.getTables()[s].cells.length][];
        for (int i=0; i < article.getTables()[s].cells.length; i++) {
          original_cells[i]=new Cell[article.getTables()[s].cells[i].length];
          for (int j=0; j < article.getTables()[s].cells[i].length; j++)           original_cells[i][j]=new Cell(article.getTables()[s].cells[i][j]);
        }
        article.getTables()[s].original_cells=original_cells;
      }
    }
    Decomposition ie=null;
    TrialIE2 tie=null;
    FreqIE tie2=null;
    IEArmBased21 tie3=null;
    if (doIE) {
      ie=new Decomposition(Inpath,newrun);
      newrun=false;
    }
    if (IEFreqSQLTial) {
      tie2=new FreqIE();
    }
    if (IEinSQLTial) {
      tie=new TrialIE2();
    }
    if (IEFine) {
      tie3=new IEArmBased21();
      informationClasses=ResourceReader.read(""String_Node_Str"");
    }
    if (Conceptization) {
      concept.ReadPatterns(""String_Node_Str"");
    }
    if (article != null && article.getTables() != null)     for (int j=0; j < article.getTables().length; j++) {
      Table t=article.getTables()[j];
      if (t.isHasHeader()) {
        t=TableSimplifier.MergeHeaders(t);
        t=TableSimplifier.MergeStubs(t);
      }
      t.PragmaticClass=pc.Classify(t);
    }
    if (doIE) {
      ie.ExtractData(article);
    }
    if (TablInExMain.ComplexClassify) {
      for (int i=0; i < article.getTables().length; i++) {
        SimpleTableClassifier.ClassifyTableByComplexity(article.getTables()[i]);
      }
    }
    if (IEinSQLTial) {
      tie.ExtractTrialData(article);
    }
    if (IEFreqSQLTial) {
      tie2.ExtractTrialData(article);
    }
    if (IEFine) {
      tie3.ExtractTrialData(article);
    }
    if (Conceptization) {
      concept.processArticle(article);
    }
    if (ExportLinkedData) {
      linkedData.printToFile(LinkedDataFolder + ""String_Node_Str"" + article.getPmc()+ ""String_Node_Str"");
    }
    for (int l=0; l < article.getTables().length; l++) {
      LinkedList<DataExtractionOutputObj> outputs=article.getTables()[l].output;
      for (      DataExtractionOutputObj out : outputs) {
        out.CreateOutput();
      }
    }
    Annotate annot=new Annotate();
    annot.AnnotateArticle(article);
  }
  int weight=0;
  int BMI=0;
  if (learnheaders) {
    LinkedHashMap lm=Utilities.sortHashMapByValuesD(headermap);
    Object[] ss=lm.keySet().toArray();
    String[] sa=new String[ss.length];
    int k=0;
    for (    Object o : ss) {
      sa[k]=(String)ss[k];
      k++;
    }
    PrintWriter writer;
    try {
      writer=new PrintWriter(""String_Node_Str"",""String_Node_Str"");
      for (      String name : sa) {
        String key=name.toString();
        String value=lm.get(name).toString();
        writer.println(key + ""String_Node_Str"" + value);
        if ((key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str"")|| key.toLowerCase().contains(""String_Node_Str"")) && (!key.toLowerCase().contains(""String_Node_Str"") || !key.toLowerCase().contains(""String_Node_Str"") || !key.toLowerCase().contains(""String_Node_Str"")|| !key.toLowerCase().contains(""String_Node_Str"")|| !key.toLowerCase().contains(""String_Node_Str""))) {
          weight+=Integer.parseInt(lm.get(name).toString());
        }
        if ((key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str""))) {
          BMI+=Integer.parseInt(lm.get(name).toString());
        }
      }
      writer.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    lm=Utilities.sortHashMapByValuesD(stubmap);
    ss=lm.keySet().toArray();
    sa=new String[ss.length];
    k=0;
    for (    Object o : ss) {
      sa[k]=(String)ss[k];
      k++;
    }
    try {
      writer=new PrintWriter(""String_Node_Str"",""String_Node_Str"");
      for (      String name : sa) {
        String key=name.toString();
        String value=lm.get(name).toString();
        writer.println(key + ""String_Node_Str"" + value);
        if ((key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str"")|| key.toLowerCase().contains(""String_Node_Str"")) && (!key.toLowerCase().contains(""String_Node_Str"") || !key.toLowerCase().contains(""String_Node_Str"") || !key.toLowerCase().contains(""String_Node_Str"")|| !key.toLowerCase().contains(""String_Node_Str"")|| !key.toLowerCase().contains(""String_Node_Str""))) {
          weight+=Integer.parseInt(lm.get(name).toString());
        }
        if ((key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str""))) {
          BMI+=Integer.parseInt(lm.get(name).toString());
        }
      }
      writer.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
  Statistics.CalculateStatistics();
  String stats=Statistics.makeOutputStatisticString();
  System.out.print(stats);
  concept.PrintConceptizationStats();
}","public static void main(String[] args){
  String propsFile=""String_Node_Str"";
  try {
    JWNL.initialize(new FileInputStream(propsFile));
  }
 catch (  Exception Ex) {
    Ex.printStackTrace();
  }
  concept=new ConceptizationStats();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  String path=args[0];
  Inpath=path;
  String runas=""String_Node_Str"";
  if (args.length > 1)   runas=args[1];
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    int i=Arrays.asList(args).indexOf(""String_Node_Str"");
    outputDest=args[i + 1];
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    int i=Arrays.asList(args).indexOf(""String_Node_Str"");
    learnheaders=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    shouldTag=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    ExportLinkedData=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    Conceptization=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    IEFreqSQLTial=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doStats=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    IEinSQLTial=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    IEFine=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    TypeClassify=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doXMLInput=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    ComplexClassify=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doIE=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    printHelp();
    return;
  }
  classifiers.PragmaticClassifier pc=new classifiers.PragmaticClassifier(""String_Node_Str"");
  if (TypeClassify)   SimpleTableClassifier.init(TablInExMain.Inpath);
  if (ComplexClassify)   SimpleTableClassifier.initComplexity(Inpath);
  System.out.println(""String_Node_Str"" + path);
  File Dir=new File(path);
  File[] files=Dir.listFiles();
  Article article=new Article(""String_Node_Str"");
  boolean newrun=true;
  String LinkedDataFolder=""String_Node_Str"";
  if (ExportLinkedData) {
    boolean success=(new File(LinkedDataFolder)).mkdirs();
  }
  for (int a=0; a < files.length; a++) {
    if (ExportLinkedData) {
      linkedData=new DecompositionRDFWriter();
    }
    if (runas.toLowerCase().equals(""String_Node_Str"")) {
      article=runReadingloopOneFile(article,files[a],PMCXMLReader.class);
      for (int s=0; s < article.getTables().length; s++) {
        if (article.getTables()[s].cells == null)         continue;
        Cell[][] original_cells=new Cell[article.getTables()[s].cells.length][];
        for (int i=0; i < article.getTables()[s].cells.length; i++) {
          original_cells[i]=new Cell[article.getTables()[s].cells[i].length];
          for (int j=0; j < article.getTables()[s].cells[i].length; j++)           original_cells[i][j]=new Cell(article.getTables()[s].cells[i][j]);
        }
        article.getTables()[s].original_cells=original_cells;
      }
    }
    Decomposition ie=null;
    TrialIE2 tie=null;
    FreqIE tie2=null;
    IEArmBased21 tie3=null;
    if (doIE) {
      ie=new Decomposition(Inpath,newrun);
      newrun=false;
    }
    if (IEFreqSQLTial) {
      tie2=new FreqIE();
    }
    if (IEinSQLTial) {
      tie=new TrialIE2();
    }
    if (IEFine) {
      tie3=new IEArmBased21();
      informationClasses=ResourceReader.read(""String_Node_Str"");
    }
    if (Conceptization) {
      concept.ReadPatterns(""String_Node_Str"");
    }
    if (article != null && article.getTables() != null)     for (int j=0; j < article.getTables().length; j++) {
      Table t=article.getTables()[j];
      if (t.isHasHeader()) {
        t=TableSimplifier.MergeHeaders(t);
        t=TableSimplifier.MergeStubs(t);
      }
      t.PragmaticClass=pc.Classify(t);
    }
    if (doIE) {
      ie.ExtractData(article);
    }
    if (TablInExMain.ComplexClassify) {
      for (int i=0; i < article.getTables().length; i++) {
        SimpleTableClassifier.ClassifyTableByComplexity(article.getTables()[i]);
      }
    }
    if (IEinSQLTial) {
      tie.ExtractTrialData(article);
    }
    if (IEFreqSQLTial) {
      tie2.ExtractTrialData(article);
    }
    if (IEFine) {
      tie3.ExtractTrialData(article);
    }
    if (Conceptization) {
      concept.processArticle(article);
    }
    if (ExportLinkedData) {
      linkedData.printToFile(LinkedDataFolder + ""String_Node_Str"" + article.getPmc()+ ""String_Node_Str"");
    }
    for (int l=0; l < article.getTables().length; l++) {
      LinkedList<DataExtractionOutputObj> outputs=article.getTables()[l].output;
      for (      DataExtractionOutputObj out : outputs) {
        out.CreateOutput();
      }
    }
    Annotate annot=new Annotate();
    annot.AnnotateArticle(article);
  }
  int weight=0;
  int BMI=0;
  if (learnheaders) {
    LinkedHashMap lm=Utilities.sortHashMapByValuesD(headermap);
    Object[] ss=lm.keySet().toArray();
    String[] sa=new String[ss.length];
    int k=0;
    for (    Object o : ss) {
      sa[k]=(String)ss[k];
      k++;
    }
    PrintWriter writer;
    try {
      writer=new PrintWriter(""String_Node_Str"",""String_Node_Str"");
      for (      String name : sa) {
        String key=name.toString();
        String value=lm.get(name).toString();
        writer.println(key + ""String_Node_Str"" + value);
        if ((key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str"")|| key.toLowerCase().contains(""String_Node_Str"")) && (!key.toLowerCase().contains(""String_Node_Str"") || !key.toLowerCase().contains(""String_Node_Str"") || !key.toLowerCase().contains(""String_Node_Str"")|| !key.toLowerCase().contains(""String_Node_Str"")|| !key.toLowerCase().contains(""String_Node_Str""))) {
          weight+=Integer.parseInt(lm.get(name).toString());
        }
        if ((key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str""))) {
          BMI+=Integer.parseInt(lm.get(name).toString());
        }
      }
      writer.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    lm=Utilities.sortHashMapByValuesD(stubmap);
    ss=lm.keySet().toArray();
    sa=new String[ss.length];
    k=0;
    for (    Object o : ss) {
      sa[k]=(String)ss[k];
      k++;
    }
    try {
      writer=new PrintWriter(""String_Node_Str"",""String_Node_Str"");
      for (      String name : sa) {
        String key=name.toString();
        String value=lm.get(name).toString();
        writer.println(key + ""String_Node_Str"" + value);
        if ((key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str"")|| key.toLowerCase().contains(""String_Node_Str"")) && (!key.toLowerCase().contains(""String_Node_Str"") || !key.toLowerCase().contains(""String_Node_Str"") || !key.toLowerCase().contains(""String_Node_Str"")|| !key.toLowerCase().contains(""String_Node_Str"")|| !key.toLowerCase().contains(""String_Node_Str""))) {
          weight+=Integer.parseInt(lm.get(name).toString());
        }
        if ((key.toLowerCase().contains(""String_Node_Str"") || key.toLowerCase().contains(""String_Node_Str""))) {
          BMI+=Integer.parseInt(lm.get(name).toString());
        }
      }
      writer.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
  Statistics.CalculateStatistics();
  String stats=Statistics.makeOutputStatisticString();
  System.out.print(stats);
  concept.PrintConceptizationStats();
}",0.9957151858853184
36980,"/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      for (int j=0; j < cells.length; j++) {
        for (int k=0; k < cells[j].length; k++) {
          Element CellEl=doc.createElement(""String_Node_Str"");
          CellsEl.appendChild(CellEl);
          Element CellID=doc.createElement(""String_Node_Str"");
          String cellIDStr=""String_Node_Str"" + j + k;
          CellID.setTextContent(cellIDStr);
          cells[j][k].CellId=cellIDStr;
          CellEl.appendChild(CellID);
          if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
            Element SuperRowRef=doc.createElement(""String_Node_Str"");
            SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
            CellEl.appendChild(SuperRowRef);
          }
          Element CellValue=doc.createElement(""String_Node_Str"");
          CellValue.setTextContent(cells[j][k].getCell_content());
          CellEl.appendChild(CellValue);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          CellEl.appendChild(CellType);
          for (int s=j - 1; s >= 0; s--) {
            if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
              break;
            }
            if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header() && !cells[s][k].getCell_content().equals(""String_Node_Str"")) {
              Element HeaderRef=doc.createElement(""String_Node_Str"");
              HeaderRef.setTextContent(""String_Node_Str"" + s + k);
              CellEl.appendChild(HeaderRef);
              break;
            }
            if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header() && cells[s][k].getCell_content().equals(""String_Node_Str"")) {
              Element HeaderCatRef=doc.createElement(""String_Node_Str"");
              HeaderCatRef.setTextContent(""String_Node_Str"" + s + 0);
              CellEl.appendChild(HeaderCatRef);
              break;
            }
          }
          for (int s=k - 1; s >= 0; s--) {
            if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
              Element StubRef=doc.createElement(""String_Node_Str"");
              StubRef.setTextContent(""String_Node_Str"" + j + s);
              CellEl.appendChild(StubRef);
              break;
            }
          }
          Element CellRoles=doc.createElement(""String_Node_Str"");
          CellEl.appendChild(CellRoles);
          boolean isDataCell=true;
          if (cells[j][k].isIs_header()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          if (cells[j][k].isIs_stub()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          boolean isSuperRow=false;
          for (int l=0; l < 5; l++) {
            if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
              isSuperRow=true;
              break;
            }
          }
          if (isSuperRow) {
            for (int l=0; l < cells[j].length; l++) {
              cells[j][l].setIs_subheader(true);
            }
          }
          if (cells[j][k].isIs_subheader()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
          }
          if (j == 0 && k == 0 && cells[j][k].isIs_header()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          if (isDataCell) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
          }
          Element CellRow=doc.createElement(""String_Node_Str"");
          CellRow.setTextContent(j + ""String_Node_Str"");
          CellEl.appendChild(CellRow);
          Element CellColumn=doc.createElement(""String_Node_Str"");
          CellColumn.setTextContent(k + ""String_Node_Str"");
          CellEl.appendChild(CellColumn);
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      for (int j=0; j < cells.length; j++) {
        for (int k=0; k < cells[j].length; k++) {
          Element CellEl=doc.createElement(""String_Node_Str"");
          CellsEl.appendChild(CellEl);
          Element CellID=doc.createElement(""String_Node_Str"");
          String cellIDStr=""String_Node_Str"" + j + k;
          CellID.setTextContent(cellIDStr);
          cells[j][k].CellId=cellIDStr;
          CellEl.appendChild(CellID);
          if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
            Element SuperRowRef=doc.createElement(""String_Node_Str"");
            SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
            CellEl.appendChild(SuperRowRef);
          }
          Element CellValue=doc.createElement(""String_Node_Str"");
          CellValue.setTextContent(cells[j][k].getCell_content());
          CellEl.appendChild(CellValue);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          CellEl.appendChild(CellType);
          for (int s=j - 1; s >= 0; s--) {
            if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
              break;
            }
            if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
              Element HeaderRef=doc.createElement(""String_Node_Str"");
              HeaderRef.setTextContent(""String_Node_Str"" + s + k);
              CellEl.appendChild(HeaderRef);
            }
            if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
              Element HeaderCatRef=doc.createElement(""String_Node_Str"");
              HeaderCatRef.setTextContent(""String_Node_Str"" + s + 0);
              CellEl.appendChild(HeaderCatRef);
              break;
            }
          }
          for (int s=k - 1; s >= 0; s--) {
            if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
              Element StubRef=doc.createElement(""String_Node_Str"");
              StubRef.setTextContent(""String_Node_Str"" + j + s);
              CellEl.appendChild(StubRef);
              break;
            }
          }
          Element CellRoles=doc.createElement(""String_Node_Str"");
          CellEl.appendChild(CellRoles);
          boolean isDataCell=true;
          if (cells[j][k].isIs_header()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          if (cells[j][k].isIs_stub()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          boolean isSuperRow=false;
          for (int l=0; l < 5; l++) {
            if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
              isSuperRow=true;
              break;
            }
          }
          if (isSuperRow) {
            for (int l=0; l < cells[j].length; l++) {
              cells[j][l].setIs_subheader(true);
            }
          }
          if (cells[j][k].isIs_subheader()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
          }
          if (k == 0 && cells[j][k].isIs_header()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          if (isDataCell) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
          }
          Element CellRow=doc.createElement(""String_Node_Str"");
          CellRow.setTextContent(j + ""String_Node_Str"");
          CellEl.appendChild(CellRow);
          Element CellColumn=doc.createElement(""String_Node_Str"");
          CellColumn.setTextContent(k + ""String_Node_Str"");
          CellEl.appendChild(CellColumn);
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9683991683991684
36981,"/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      for (int j=0; j < cells.length; j++) {
        for (int k=0; k < cells[j].length; k++) {
          Element CellEl=doc.createElement(""String_Node_Str"");
          CellsEl.appendChild(CellEl);
          Element CellID=doc.createElement(""String_Node_Str"");
          String cellIDStr=""String_Node_Str"" + j + k;
          CellID.setTextContent(cellIDStr);
          cells[j][k].CellId=cellIDStr;
          CellEl.appendChild(CellID);
          if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
            Element SuperRowRef=doc.createElement(""String_Node_Str"");
            SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
            CellEl.appendChild(SuperRowRef);
          }
          Element CellValue=doc.createElement(""String_Node_Str"");
          CellValue.setTextContent(cells[j][k].getCell_content());
          CellEl.appendChild(CellValue);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          CellEl.appendChild(CellType);
          for (int s=j - 1; s >= 0; s--) {
            if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
              break;
            }
            if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
              Element HeaderRef=doc.createElement(""String_Node_Str"");
              HeaderRef.setTextContent(""String_Node_Str"" + s + k);
              CellEl.appendChild(HeaderRef);
            }
            if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
              Element HeaderCatRef=doc.createElement(""String_Node_Str"");
              HeaderCatRef.setTextContent(""String_Node_Str"" + s + 0);
              CellEl.appendChild(HeaderCatRef);
              break;
            }
          }
          for (int s=k - 1; s >= 0; s--) {
            if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
              Element StubRef=doc.createElement(""String_Node_Str"");
              StubRef.setTextContent(""String_Node_Str"" + j + s);
              CellEl.appendChild(StubRef);
              break;
            }
          }
          Element CellRoles=doc.createElement(""String_Node_Str"");
          CellEl.appendChild(CellRoles);
          boolean isDataCell=true;
          if (cells[j][k].isIs_header()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          if (cells[j][k].isIs_stub()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          boolean isSuperRow=false;
          for (int l=0; l < 5; l++) {
            if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
              isSuperRow=true;
              break;
            }
          }
          if (isSuperRow) {
            for (int l=0; l < cells[j].length; l++) {
              cells[j][l].setIs_subheader(true);
            }
          }
          if (cells[j][k].isIs_subheader()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
          }
          if (k == 0 && cells[j][k].isIs_header()) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
            isDataCell=false;
          }
          if (isDataCell) {
            Element CellRole=doc.createElement(""String_Node_Str"");
            CellRole.setTextContent(""String_Node_Str"");
            CellRoles.appendChild(CellRole);
          }
          Element CellRow=doc.createElement(""String_Node_Str"");
          CellRow.setTextContent(j + ""String_Node_Str"");
          CellEl.appendChild(CellRow);
          Element CellColumn=doc.createElement(""String_Node_Str"");
          CellColumn.setTextContent(k + ""String_Node_Str"");
          CellEl.appendChild(CellColumn);
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","/** 
 * Annotate article with annotation schema.
 * @param a the read article
 */
public void AnnotateArticle(Article a){
  try {
    Utilities.MakeDirectory(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    Element rootElement=doc.createElement(""String_Node_Str"");
    doc.appendChild(rootElement);
    Element pmcid=doc.createElement(""String_Node_Str"");
    pmcid.setTextContent(a.getPmc());
    rootElement.appendChild(pmcid);
    Element pcid=doc.createElement(""String_Node_Str"");
    pcid.setTextContent(a.getPmid());
    rootElement.appendChild(pcid);
    Element pissn=doc.createElement(""String_Node_Str"");
    pissn.setTextContent(a.getPissn());
    rootElement.appendChild(pissn);
    Element eissn=doc.createElement(""String_Node_Str"");
    eissn.setTextContent(a.getEissn());
    rootElement.appendChild(eissn);
    Element title=doc.createElement(""String_Node_Str"");
    title.setTextContent(a.getTitle());
    rootElement.appendChild(title);
    Element authors=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getAuthors().size(); i++) {
      Element author=doc.createElement(""String_Node_Str"");
      Element authorName=doc.createElement(""String_Node_Str"");
      authorName.setTextContent(a.getAuthors().get(i).name);
      author.appendChild(authorName);
      for (int j=0; j < a.getAuthors().get(i).affiliation.size(); j++) {
        Element AuthorAffiliation=doc.createElement(""String_Node_Str"");
        AuthorAffiliation.setTextContent(a.getAuthors().get(i).affiliation.get(j));
        author.appendChild(AuthorAffiliation);
      }
      Element authorEmail=doc.createElement(""String_Node_Str"");
      authorEmail.setTextContent(a.getAuthors().get(i).email);
      author.appendChild(authorEmail);
      authors.appendChild(author);
    }
    rootElement.appendChild(authors);
    Element keywords=doc.createElement(""String_Node_Str"");
    for (int i=0; i < a.getKeywords().length; i++) {
      Element keyword=doc.createElement(""String_Node_Str"");
      keyword.setTextContent(a.getKeywords()[i]);
      keywords.appendChild(keyword);
    }
    rootElement.appendChild(keywords);
    Element publisher=doc.createElement(""String_Node_Str"");
    Element publisherName=doc.createElement(""String_Node_Str"");
    publisherName.setTextContent(a.getPublisher_name());
    publisher.appendChild(publisherName);
    Element publisherLoc=doc.createElement(""String_Node_Str"");
    publisherLoc.setTextContent(a.getPublisher_loc());
    publisher.appendChild(publisherLoc);
    rootElement.appendChild(publisher);
    Element venue=doc.createElement(""String_Node_Str"");
    venue.setTextContent(a.getVenue());
    publisher.appendChild(venue);
    Element journal=doc.createElement(""String_Node_Str"");
    journal.setTextContent(a.getJournal_name());
    publisher.appendChild(journal);
    Element abstractEl=doc.createElement(""String_Node_Str"");
    abstractEl.setTextContent(a.getAbstract());
    rootElement.appendChild(abstractEl);
    Table[] tables=a.getTables();
    Element tablesEl=doc.createElement(""String_Node_Str"");
    rootElement.appendChild(tablesEl);
    for (int i=0; i < tables.length; i++) {
      Element tableEl=doc.createElement(""String_Node_Str"");
      tablesEl.appendChild(tableEl);
      Table table=tables[i];
      Element TabOrder=doc.createElement(""String_Node_Str"");
      TabOrder.setTextContent(table.getTable_title());
      tableEl.appendChild(TabOrder);
      Element TabCaption=doc.createElement(""String_Node_Str"");
      TabCaption.setTextContent(table.getTable_caption());
      tableEl.appendChild(TabCaption);
      Element TabFooter=doc.createElement(""String_Node_Str"");
      TabFooter.setTextContent(table.getTable_footer());
      tableEl.appendChild(TabFooter);
      Element TabStructure=doc.createElement(""String_Node_Str"");
      if (table.getTableStructureType() == null) {
        table.setTableStructureType(StructureType.NULL);
      }
      TabStructure.setTextContent(table.getTableStructureType().toString());
      tableEl.appendChild(TabStructure);
      Element TabPragmatic=doc.createElement(""String_Node_Str"");
      TabPragmatic.setTextContent(table.PragmaticClass);
      tableEl.appendChild(TabPragmatic);
      Element TabHasXML=doc.createElement(""String_Node_Str"");
      if (table.isNoXMLTable())       TabHasXML.setTextContent(""String_Node_Str"");
 else       TabHasXML.setTextContent(""String_Node_Str"");
      tableEl.appendChild(TabHasXML);
      Element CellsEl=doc.createElement(""String_Node_Str"");
      tableEl.appendChild(CellsEl);
      Cell[][] cells=table.original_cells;
      if (cells != null) {
        for (int j=0; j < cells.length; j++) {
          for (int k=0; k < cells[j].length; k++) {
            Element CellEl=doc.createElement(""String_Node_Str"");
            CellsEl.appendChild(CellEl);
            Element CellID=doc.createElement(""String_Node_Str"");
            String cellIDStr=""String_Node_Str"" + j + k;
            CellID.setTextContent(cellIDStr);
            cells[j][k].CellId=cellIDStr;
            CellEl.appendChild(CellID);
            if (cells[j][k].getSuperRowIndex() != null && !cells[j][k].getSuperRowIndex().equals(""String_Node_Str"")) {
              Element SuperRowRef=doc.createElement(""String_Node_Str"");
              SuperRowRef.setTextContent(cells[j][k].getSuperRowIndex());
              CellEl.appendChild(SuperRowRef);
            }
            Element CellValue=doc.createElement(""String_Node_Str"");
            CellValue.setTextContent(cells[j][k].getCell_content());
            CellEl.appendChild(CellValue);
            Element CellType=doc.createElement(""String_Node_Str"");
            CellType.setTextContent(cells[j][k].getCellType());
            CellEl.appendChild(CellType);
            for (int s=j - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][k].isIs_header() && !cells[s][k].isIs_header() && !cells[j][k].getCell_content().equals(""String_Node_Str"")) {
                break;
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderRef=doc.createElement(""String_Node_Str"");
                HeaderRef.setTextContent(""String_Node_Str"" + s + k);
                CellEl.appendChild(HeaderRef);
              }
              if (s >= 0 && cells[s][k] != null && cells[s][k].isIs_header()) {
                Element HeaderCatRef=doc.createElement(""String_Node_Str"");
                HeaderCatRef.setTextContent(""String_Node_Str"" + s + 0);
                CellEl.appendChild(HeaderCatRef);
                break;
              }
            }
            for (int s=k - 1; s >= 0; s--) {
              if (s >= 0 && cells[j][s] != null && cells[j][s].isIs_stub()) {
                Element StubRef=doc.createElement(""String_Node_Str"");
                StubRef.setTextContent(""String_Node_Str"" + j + s);
                CellEl.appendChild(StubRef);
                break;
              }
            }
            Element CellRoles=doc.createElement(""String_Node_Str"");
            CellEl.appendChild(CellRoles);
            boolean isDataCell=true;
            if (cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (cells[j][k].isIs_stub()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            boolean isSuperRow=false;
            for (int l=0; l < 5; l++) {
              if (cells[j][k] != null && j + l < cells.length && cells[j + l][k] != null && cells[j + l][k].getSuperRowIndex() != null && cells[j + l][k].getSuperRowIndex().equals(cells[j][k].CellId)) {
                isSuperRow=true;
                break;
              }
            }
            if (isSuperRow) {
              for (int l=0; l < cells[j].length; l++) {
                cells[j][l].setIs_subheader(true);
              }
            }
            if (cells[j][k].isIs_subheader()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            if (k == 0 && cells[j][k].isIs_header()) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
              isDataCell=false;
            }
            if (isDataCell) {
              Element CellRole=doc.createElement(""String_Node_Str"");
              CellRole.setTextContent(""String_Node_Str"");
              CellRoles.appendChild(CellRole);
            }
            Element CellRow=doc.createElement(""String_Node_Str"");
            CellRow.setTextContent(j + ""String_Node_Str"");
            CellEl.appendChild(CellRow);
            Element CellColumn=doc.createElement(""String_Node_Str"");
            CellColumn.setTextContent(k + ""String_Node_Str"");
            CellEl.appendChild(CellColumn);
          }
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    DOMSource source;
    source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(""String_Node_Str"" + a.getPmc() + ""String_Node_Str""));
    transformer.transform(source,result);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9824507230713808
36982,"public String getCellType(){
  if (Utilities.isNumeric(this.getCell_content())) {
    return ""String_Node_Str"";
  }
  int numbers=0;
  int chars=0;
  String tempCellVal=this.getCell_content().replaceAll(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < tempCellVal.length(); i++) {
    if (Utilities.isNumeric(tempCellVal.substring(i,i + 1))) {
      numbers++;
    }
 else {
      chars++;
    }
  }
  float proportion=(float)numbers / (chars + numbers);
  if (proportion > 0.49 && !Utilities.isNumeric(this.getCell_content())) {
    return ""String_Node_Str"";
  }
  if (proportion <= 0.49 && !Utilities.isNumeric(this.getCell_content())) {
    return ""String_Node_Str"";
  }
  if (Utilities.isSpaceOrEmpty(this.getCell_content())) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","public String getCellType(){
  if (this.getCell_content() == null) {
    this.setCell_content(""String_Node_Str"");
  }
  if (Utilities.isNumeric(this.getCell_content())) {
    return ""String_Node_Str"";
  }
  int numbers=0;
  int chars=0;
  String tempCellVal=this.getCell_content().replaceAll(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < tempCellVal.length(); i++) {
    if (Utilities.isNumeric(tempCellVal.substring(i,i + 1))) {
      numbers++;
    }
 else {
      chars++;
    }
  }
  float proportion=(float)numbers / (chars + numbers);
  if (proportion > 0.49 && !Utilities.isNumeric(this.getCell_content())) {
    return ""String_Node_Str"";
  }
  if (proportion <= 0.49 && !Utilities.isNumeric(this.getCell_content())) {
    return ""String_Node_Str"";
  }
  if (Utilities.isSpaceOrEmpty(this.getCell_content())) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}",0.9475545079552152
36983,"public Table processMultiTable(Cell[][] cells,Table table,Article art,String tableFileName){
  if (table.getTableStructureType() != Table.StructureType.MULTI && table.getTableStructureType() != null) {
    return table;
  }
  Statistics.addMultiTable();
  table.setTableStructureType(Table.StructureType.MULTI);
  if (TablInExMain.ExportLinkedData) {
    TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
  }
  if (!table.isHasHeader()) {
    table=checkHeaders(table);
    cells=table.cells;
  }
  cells=markMultiTableHeaders(cells);
  if (cells[0].length > 1) {
    String[] headerStackA=new String[20];
    int currentSubHeaderLevel=0;
    String prevSubheader=""String_Node_Str"";
    boolean hasSpaceSubheaders=false;
    if (table.isHasHeader() == false) {
      table=checkHeaders(table);
    }
    cells=table.cells;
    boolean firstHeader=true;
    for (int j=0; j < cells.length; j++) {
      if (cells[j][0].isIs_header()) {
        continue;
      }
      boolean emptyLine=true;
      for (int h=0; h < cells[j].length; h++) {
        if (!Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyLine=false;
          break;
        }
      }
      if (emptyLine)       continue;
      if (cells[j][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[j][0].getCells_columnspanning() >= table.getNum_of_columns()) {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel)         headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
        }
        SetSubheaderRow(cells[j]);
        continue;
      }
      boolean emptyCells=true;
      for (int h=1; h < cells[j].length; h++) {
        if (cells[j][h].getCell_content() == null) {
          cells[j][h].setCell_content(""String_Node_Str"");
        }
        if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()) || !Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyCells=false;
        }
      }
      if (emptyCells) {
        if (currentSubHeaderLevel != 0 && currentSubHeaderLevel == j - 1) {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
            SetSubheaderRow(cells[j]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
            SetSubheaderRow(cells[j]);
          }
        }
 else {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
            SetSubheaderRow(cells[j]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
            SetSubheaderRow(cells[j]);
          }
          if (j > 0 && isRowSubheader(cells[j - 1],table)) {
            prevSubheader=cells[j - 1][0].getCell_content();
          }
          continue;
        }
      }
      if (isRowSubheader(cells[j],table)) {
        if (j > 0 && isRowSubheader(cells[j - 1],table)) {
          prevSubheader=cells[j - 1][0].getCell_content();
        }
        continue;
      }
      if (cells[j][0].getCell_content() == null) {
        cells[j][0].setCell_content(""String_Node_Str"");
      }
      if ((cells != null && cells[j] != null && cells[j][0] != null && cells[j][0].getCell_content() != null) && (cells[j][0].getCell_content().length() > 0 && Utilities.isSpace(cells[j][0].getCell_content().trim().charAt(0))) || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        hasSpaceSubheaders=true;
        SetSubheaderRow(cells[j]);
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()))         headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        }
      }
 else {
        if (hasSpaceSubheaders)         currentSubHeaderLevel=0;
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
      }
      for (int k=1; k < cells[j].length; k++) {
        try {
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          String Head00Str=""String_Node_Str"";
          if (!Utilities.isSpaceOrEmpty(cells[0][0].getCell_content()) && cells[0][0].isIs_header()) {
            boolean foundHeader=false;
            for (int l=j; l >= 0; l--) {
              if (cells[l][k].isIs_header()) {
                if (!cells[l][k].getCell_content().equals(""String_Node_Str""))                 Head00Str=cells[l][k].getCell_content();
                foundHeader=true;
              }
              if (foundHeader && !cells[l][k].isIs_header()) {
                break;
              }
            }
            Element Head00=doc.createElement(""String_Node_Str"");
            Head00.setTextContent(Head00Str);
            cells[j][k].setHead00(Head00Str);
            NavigationPath.appendChild(Head00);
          }
          Element Stub=doc.createElement(""String_Node_Str"");
          if (currentSubHeaderLevel > 0) {
            getStackAsElements(headerStackA,prevSubheader,currentSubHeaderLevel,doc,Stub);
          }
          String subheaderValues=""String_Node_Str"";
          String[] SubHeaders=new String[Stub.getChildNodes().getLength()];
          for (int l=0; l < Stub.getChildNodes().getLength(); l++) {
            subheaderValues+=""String_Node_Str"" + Stub.getChildNodes().item(l).getTextContent();
            SubHeaders[l]=Stub.getChildNodes().item(l).getTextContent();
          }
          cells[j][k].setSubheader_values(subheaderValues);
          Element ss=doc.createElement(""String_Node_Str"");
          ss.setTextContent(cells[j][0].getCell_content());
          cells[j][k].setStub_values(cells[j][0].getCell_content());
          Stub.appendChild(ss);
          NavigationPath.appendChild(Stub);
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            cells[j][k].setHeader_values(headers.toString());
            NavigationPath.appendChild(Header);
          }
          cell.appendChild(NavigationPath);
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableEl=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableEl);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableEl.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableEl.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableEl.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableEl.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(cells[j][0].getCell_content(),SubHeaders,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),cells[0][0].getCell_content(),j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 else {
    boolean hasSubheaders=hasSuperRowsListTable(cells,table);
    boolean TopLevel=false;
    String currentSubHeader=""String_Node_Str"";
    for (int j=0; j < cells.length; j++) {
      for (int k=0; k < cells[j].length; k++) {
        if (cells[j][k].isIs_header())         continue;
        try {
          if (hasSubheaders) {
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && cells[j + 1] != null && Utilities.numOfSpaceOrBullets(cells[j + 1][k].getCell_content()) != 0 && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && (cells[j + 2] != null && Utilities.numOfSpaceOrBullets(cells[j + 2][k].getCell_content()) != 0) && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == true && !cells[j][k].isBreakingLineOverRow() && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && !currentSubHeader.equals(""String_Node_Str"")) {
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
          }
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            cells[j][k].setHeader_values(headers.toString());
            NavigationPath.appendChild(Header);
          }
          if (currentSubHeader != ""String_Node_Str"") {
            Element SubHeader=doc.createElement(""String_Node_Str"");
            SubHeader.setTextContent(currentSubHeader);
            NavigationPath.appendChild(SubHeader);
          }
          cell.appendChild(NavigationPath);
          cells[j][k].setHeader_values(cells[0][k].getCell_content());
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableA=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableA);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableA.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableA.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableA.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableA.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(""String_Node_Str"",null,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),""String_Node_Str"",j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
  table.cells=cells;
  return table;
}","public Table processMultiTable(Cell[][] cells,Table table,Article art,String tableFileName){
  if (table.getTableStructureType() != Table.StructureType.MULTI && table.getTableStructureType() != null) {
    return table;
  }
  Statistics.addMultiTable();
  table.setTableStructureType(Table.StructureType.MULTI);
  if (TablInExMain.ExportLinkedData) {
    TablInExMain.linkedData.AddTable(table.getTable_title(),table.getTable_caption(),""String_Node_Str"",""String_Node_Str"",table.getTable_footer(),table.getXml());
  }
  if (!table.isHasHeader()) {
    table=checkHeaders(table);
    cells=table.cells;
  }
  cells=markMultiTableHeaders(cells);
  if (cells[0].length > 1) {
    String[] headerStackA=new String[20];
    int currentSubHeaderLevel=0;
    String prevSubheader=""String_Node_Str"";
    boolean hasSpaceSubheaders=false;
    if (table.isHasHeader() == false) {
      table=checkHeaders(table);
    }
    cells=table.cells;
    boolean firstHeader=true;
    for (int j=0; j < cells.length; j++) {
      if (cells[j][0].isIs_header()) {
        continue;
      }
      boolean emptyLine=true;
      for (int h=0; h < cells[j].length; h++) {
        if (!Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyLine=false;
          break;
        }
      }
      if (emptyLine)       continue;
      if (cells[j][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[j][0].getCells_columnspanning() >= table.getNum_of_columns()) {
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel)         headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
        }
        SetSubheaderRow(cells[j]);
        continue;
      }
      boolean emptyCells=true;
      for (int h=1; h < cells[j].length; h++) {
        if (cells[j][h].getCell_content() == null) {
          cells[j][h].setCell_content(""String_Node_Str"");
        }
        if (Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()) || !Utilities.isSpaceOrEmpty(cells[j][h].getCell_content())) {
          emptyCells=false;
        }
      }
      if (emptyCells) {
        if (currentSubHeaderLevel != 0 && currentSubHeaderLevel == j - 1) {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
            SetSubheaderRow(cells[j]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
            SetSubheaderRow(cells[j]);
          }
        }
 else {
          if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel) {
            headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
            SetSubheaderRow(cells[j]);
          }
 else {
            currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
            headerStackA[currentSubHeaderLevel++]=cells[j][0].getCell_content();
            SetSubheaderRow(cells[j]);
          }
          if (j > 0 && isRowSubheader(cells[j - 1],table)) {
            prevSubheader=cells[j - 1][0].getCell_content();
          }
          continue;
        }
      }
      if (isRowSubheader(cells[j],table)) {
        if (j > 0 && isRowSubheader(cells[j - 1],table)) {
          prevSubheader=cells[j - 1][0].getCell_content();
        }
        continue;
      }
      if (cells[j][0].getCell_content() == null) {
        cells[j][0].setCell_content(""String_Node_Str"");
      }
      if ((cells != null && cells[j] != null && cells[j][0] != null && cells[j][0].getCell_content() != null) && (cells[j][0].getCell_content().length() > 0 && Utilities.isSpace(cells[j][0].getCell_content().trim().charAt(0))) || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content())) {
        hasSpaceSubheaders=true;
        SetSubheaderRow(cells[j]);
        if (Utilities.numOfBegeningSpaces(cells[j][0].getCell_content()) == currentSubHeaderLevel || Utilities.isSpaceOrEmpty(cells[j][0].getCell_content()))         headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
 else {
          currentSubHeaderLevel=Utilities.numOfBegeningSpaces(cells[j][0].getCell_content());
          headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
        }
      }
 else {
        if (hasSpaceSubheaders)         currentSubHeaderLevel=0;
        headerStackA[currentSubHeaderLevel]=cells[j][0].getCell_content();
      }
      for (int k=1; k < cells[j].length; k++) {
        try {
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          String Head00Str=""String_Node_Str"";
          if (!Utilities.isSpaceOrEmpty(cells[0][0].getCell_content()) && cells[0][0].isIs_header()) {
            boolean foundHeader=false;
            for (int l=j; l >= 0; l--) {
              if (cells[l][0].isIs_header()) {
                if (!cells[l][0].getCell_content().equals(""String_Node_Str""))                 Head00Str=cells[l][0].getCell_content();
                foundHeader=true;
              }
              if (foundHeader && !cells[l][0].isIs_header()) {
                break;
              }
            }
            Element Head00=doc.createElement(""String_Node_Str"");
            Head00.setTextContent(Head00Str);
            cells[j][k].setHead00(Head00Str);
            NavigationPath.appendChild(Head00);
          }
          Element Stub=doc.createElement(""String_Node_Str"");
          if (currentSubHeaderLevel > 0) {
            getStackAsElements(headerStackA,prevSubheader,currentSubHeaderLevel,doc,Stub);
          }
          String subheaderValues=""String_Node_Str"";
          String[] SubHeaders=new String[Stub.getChildNodes().getLength()];
          for (int l=0; l < Stub.getChildNodes().getLength(); l++) {
            subheaderValues+=""String_Node_Str"" + Stub.getChildNodes().item(l).getTextContent();
            SubHeaders[l]=Stub.getChildNodes().item(l).getTextContent();
          }
          cells[j][k].setSubheader_values(subheaderValues);
          Element ss=doc.createElement(""String_Node_Str"");
          ss.setTextContent(cells[j][0].getCell_content());
          cells[j][k].setStub_values(cells[j][0].getCell_content());
          Stub.appendChild(ss);
          NavigationPath.appendChild(Stub);
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            cells[j][k].setHeader_values(headers.toString());
            NavigationPath.appendChild(Header);
          }
          cell.appendChild(NavigationPath);
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableEl=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableEl);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableEl.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableEl.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableEl.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableEl.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(cells[j][0].getCell_content(),SubHeaders,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),cells[0][0].getCell_content(),j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 else {
    boolean hasSubheaders=hasSuperRowsListTable(cells,table);
    boolean TopLevel=false;
    String currentSubHeader=""String_Node_Str"";
    for (int j=0; j < cells.length; j++) {
      for (int k=0; k < cells[j].length; k++) {
        if (cells[j][k].isIs_header())         continue;
        try {
          if (hasSubheaders) {
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && cells[j + 1] != null && Utilities.numOfSpaceOrBullets(cells[j + 1][k].getCell_content()) != 0 && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == false && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && (cells[j + 2] != null && Utilities.numOfSpaceOrBullets(cells[j + 2][k].getCell_content()) != 0) && currentSubHeader.equals(""String_Node_Str"")) {
              TopLevel=true;
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
            if (TopLevel == true && !cells[j][k].isBreakingLineOverRow() && Utilities.numOfSpaceOrBullets(cells[j][k].getCell_content()) == 0 && !currentSubHeader.equals(""String_Node_Str"")) {
              currentSubHeader=cells[j][k].getCell_content();
              continue;
            }
          }
          DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
          Document doc=docBuilder.newDocument();
          Element rootElement=doc.createElement(""String_Node_Str"");
          doc.appendChild(rootElement);
          Element cell=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(cell);
          Element NavigationPath=doc.createElement(""String_Node_Str"");
          LinkedList<String> headers=new LinkedList<String>();
          boolean foundHeader=false;
          for (int l=j; l >= 0; l--) {
            if (cells[l][k].isIs_header()) {
              if (!cells[l][k].getCell_content().equals(""String_Node_Str""))               headers.addFirst(cells[l][k].getCell_content());
              foundHeader=true;
            }
            if (foundHeader && !cells[l][k].isIs_header()) {
              break;
            }
          }
          for (int s=0; s < headers.size(); s++) {
            Element Header=doc.createElement(""String_Node_Str"" + s);
            Header.setTextContent(headers.get(s));
            cells[j][k].setHeader_values(headers.toString());
            NavigationPath.appendChild(Header);
          }
          if (currentSubHeader != ""String_Node_Str"") {
            Element SubHeader=doc.createElement(""String_Node_Str"");
            SubHeader.setTextContent(currentSubHeader);
            NavigationPath.appendChild(SubHeader);
          }
          cell.appendChild(NavigationPath);
          cells[j][k].setHeader_values(cells[0][k].getCell_content());
          Element info=doc.createElement(""String_Node_Str"");
          info.setTextContent(cells[j][k].getCell_content());
          cell.appendChild(info);
          Element CellType=doc.createElement(""String_Node_Str"");
          CellType.setTextContent(cells[j][k].getCellType());
          cell.appendChild(CellType);
          Element tableA=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(tableA);
          Element tname=doc.createElement(""String_Node_Str"");
          tname.setTextContent(table.getTable_caption());
          tableA.appendChild(tname);
          Element TableType=doc.createElement(""String_Node_Str"");
          TableType.setTextContent(""String_Node_Str"");
          tableA.appendChild(TableType);
          Element torder=doc.createElement(""String_Node_Str"");
          torder.setTextContent(table.getTable_title());
          tableA.appendChild(torder);
          Element tfooter=doc.createElement(""String_Node_Str"");
          tfooter.setTextContent(table.getTable_footer());
          tableA.appendChild(tfooter);
          Element document=doc.createElement(""String_Node_Str"");
          rootElement.appendChild(document);
          Element docTitle=doc.createElement(""String_Node_Str"");
          docTitle.setTextContent(art.getTitle());
          document.appendChild(docTitle);
          Element pmc=doc.createElement(""String_Node_Str"");
          pmc.setTextContent(art.getPmc());
          document.appendChild(pmc);
          if (TablInExMain.ExportLinkedData) {
            TablInExMain.linkedData.AddCell(""String_Node_Str"",null,cells[j][k].getCell_content(),cells[j][k].getCellType(),cells[0][k].headers.toArray(new String[0]),""String_Node_Str"",j,k);
          }
          DataExtractionOutputObj dataExtObj=new DataExtractionOutputObj(folder + tableFileName + ""String_Node_Str""+ j+ ""String_Node_Str""+ k+ ""String_Node_Str"",doc);
          table.output.add(dataExtObj);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
  table.cells=cells;
  return table;
}",0.9997328167791064
36984,"/** 
 * Inits the complexity classification.
 * @param initFolder the init folder
 */
public static void initComplexity(String initFolder){
  setFolder(initFolder);
  SimplestFolder=initFolder + ""String_Node_Str"";
  SimpleFolder=initFolder + ""String_Node_Str"";
  MediumFolder=initFolder + ""String_Node_Str"";
  ComplexFolder=initFolder + ""String_Node_Str"";
  Utilities.DeleteFolderWithContent(SimplestFolder);
  Utilities.DeleteFolderWithContent(SimpleFolder);
  Utilities.DeleteFolderWithContent(MediumFolder);
  Utilities.DeleteFolderWithContent(ComplexFolder);
  Utilities.MakeDirectory(SimplestFolder);
  Utilities.MakeDirectory(SimpleFolder);
  Utilities.MakeDirectory(MediumFolder);
  Utilities.MakeDirectory(ComplexFolder);
}","/** 
 * Inits the complexity classification.
 * @param initFolder the init folder
 */
public static void initComplexity(String initFolder){
  setFolder(initFolder);
  SimplestFolder=initFolder + ""String_Node_Str"";
  SimpleFolder=initFolder + ""String_Node_Str"";
  MediumFolder=initFolder + ""String_Node_Str"";
  ComplexFolder=initFolder + ""String_Node_Str"";
  ListFolder=initFolder + ""String_Node_Str"";
  MatrixFolder=initFolder + ""String_Node_Str"";
  SuperRowFolder=initFolder + ""String_Node_Str"";
  ;
  MultiTableFolder=initFolder + ""String_Node_Str"";
  ;
  Utilities.DeleteFolderWithContent(SimplestFolder);
  Utilities.DeleteFolderWithContent(SimpleFolder);
  Utilities.DeleteFolderWithContent(MediumFolder);
  Utilities.DeleteFolderWithContent(ComplexFolder);
  Utilities.DeleteFolderWithContent(ListFolder);
  Utilities.DeleteFolderWithContent(MatrixFolder);
  Utilities.DeleteFolderWithContent(SuperRowFolder);
  Utilities.DeleteFolderWithContent(MultiTableFolder);
  Utilities.MakeDirectory(SimplestFolder);
  Utilities.MakeDirectory(SimpleFolder);
  Utilities.MakeDirectory(MediumFolder);
  Utilities.MakeDirectory(ComplexFolder);
  Utilities.MakeDirectory(ListFolder);
  Utilities.MakeDirectory(MatrixFolder);
  Utilities.MakeDirectory(SuperRowFolder);
  Utilities.MakeDirectory(MultiTableFolder);
}",0.7173699705593719
36985,"/** 
 * Classify table by complexity.
 * @param t the t
 */
public static void ClassifyTableByComplexity(Table t){
  if (t == null)   return;
  String tableFileName=""String_Node_Str"" + t.getDocumentFileName() + t.getTable_title()+ ""String_Node_Str"";
  if (t.stat.getNum_of_header_rows() < 5 && t.isHasHeader() && !t.isNoXMLTable() && t.stat.getNum_of_empty_cells() == 0 && t.stat.getNum_of_part_numeric_cells() == 0) {
    if (t.getStructureClass() == 0)     t.setStructureClass(1);
    Utilities.WriteFile(SimplestFolder + tableFileName,t.getXml());
  }
 else   if (t.stat.getNum_of_header_rows() < 15 && (t.stat.getNum_of_empty_cells() == t.stat.getHeader_empty_cells() || t.isEmptyOnlyHeaders) && t.isHasHeader() && !t.isNoXMLTable()) {
    t.setStructureClass(2);
    Utilities.WriteFile(SimpleFolder + tableFileName,t.getXml());
  }
 else   if (t.isHasHeader() && !t.isNoXMLTable()) {
    if (t.getStructureClass() == 0)     t.setStructureClass(3);
    Utilities.WriteFile(MediumFolder + tableFileName,t.getXml());
  }
 else {
    if (t.getStructureClass() == 0)     t.setStructureClass(4);
    Utilities.WriteFile(ComplexFolder + tableFileName,t.getXml());
  }
}","/** 
 * Classify table by complexity.
 * @param t the t
 */
public static void ClassifyTableByComplexity(Table t){
  if (t == null)   return;
  String tableFileName=""String_Node_Str"" + t.getDocumentFileName() + t.getTable_title()+ ""String_Node_Str"";
  if (t.getTableStructureType() == StructureType.LIST) {
    Utilities.WriteFile(ListFolder + tableFileName,t.getXml());
  }
  if (t.getTableStructureType() == StructureType.MATRIX) {
    Utilities.WriteFile(MatrixFolder + tableFileName,t.getXml());
  }
  if (t.getTableStructureType() == StructureType.SUBHEADER) {
    Utilities.WriteFile(SuperRowFolder + tableFileName,t.getXml());
  }
  if (t.getTableStructureType() == StructureType.MULTI) {
    Utilities.WriteFile(MultiTableFolder + tableFileName,t.getXml());
  }
  if (t.stat.getNum_of_header_rows() < 5 && t.isHasHeader() && !t.isNoXMLTable() && t.stat.getNum_of_empty_cells() == 0 && t.stat.getNum_of_part_numeric_cells() == 0) {
    if (t.getStructureClass() == 0)     t.setStructureClass(1);
    Utilities.WriteFile(SimplestFolder + tableFileName,t.getXml());
  }
 else   if (t.stat.getNum_of_header_rows() < 15 && (t.stat.getNum_of_empty_cells() == t.stat.getHeader_empty_cells() || t.isEmptyOnlyHeaders) && t.isHasHeader() && !t.isNoXMLTable()) {
    t.setStructureClass(2);
    Utilities.WriteFile(SimpleFolder + tableFileName,t.getXml());
  }
 else   if (t.isHasHeader() && !t.isNoXMLTable()) {
    if (t.getStructureClass() == 0)     t.setStructureClass(3);
    Utilities.WriteFile(MediumFolder + tableFileName,t.getXml());
  }
 else {
    if (t.getStructureClass() == 0)     t.setStructureClass(4);
    Utilities.WriteFile(ComplexFolder + tableFileName,t.getXml());
  }
}",0.8179271708683473
36986,"public String[] GetAuthors(Document parse){
  NodeList authors=parse.getElementsByTagName(""String_Node_Str"");
  String[] auths=new String[authors.getLength()];
  for (int j=0; j < authors.getLength(); j++) {
    String givenName=""String_Node_Str"";
    String surname=""String_Node_Str"";
    NodeList name=authors.item(j).getChildNodes().item(0).getChildNodes();
    if (name.item(1) != null)     surname=name.item(0).getTextContent();
    if (name.item(1) != null)     givenName=name.item(1).getTextContent();
    auths[j]=surname + ""String_Node_Str"" + givenName;
  }
  return auths;
}","public String[] GetAuthors(Document parse){
  NodeList authors=parse.getElementsByTagName(""String_Node_Str"");
  String[] auths=new String[authors.getLength()];
  for (int j=0; j < authors.getLength(); j++) {
    String givenName=""String_Node_Str"";
    String surname=""String_Node_Str"";
    NodeList name=authors.item(j).getChildNodes().item(0).getChildNodes();
    if (name.item(1) != null)     surname=Utilities.getString(name.item(0));
    if (name.item(1) != null)     givenName=Utilities.getString(name.item(1));
    auths[j]=surname + ""String_Node_Str"" + givenName;
  }
  return auths;
}",0.9387755102040816
36987,"/** 
 * Read table caption.
 * @param tablexmlNode the tablexml node
 * @return the string
 */
public String readTableCaption(Node tablexmlNode){
  String caption=""String_Node_Str"";
  List<Node> nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=nl.get(0).getTextContent();
  }
  nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=nl.get(0).getTextContent();
  }
  nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=nl.get(0).getTextContent();
  }
  return caption;
}","/** 
 * Read table caption.
 * @param tablexmlNode the tablexml node
 * @return the string
 */
public String readTableCaption(Node tablexmlNode){
  String caption=""String_Node_Str"";
  List<Node> nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    caption=Utilities.getString(nl.get(0));
  }
  return caption;
}",0.9093959731543624
36988,"/** 
 * Read table footer.
 * @param tablesxmlNode the tablesxml node
 * @return the string
 */
public String ReadTableFooter(Node tablesxmlNode){
  String foot=""String_Node_Str"";
  List<Node> nl=getChildrenByTagName(tablesxmlNode,""String_Node_Str"");
  if (nl.size() >= 1) {
    foot=nl.get(0).getTextContent();
  }
  return foot;
}","/** 
 * Read table footer.
 * @param tablesxmlNode the tablesxml node
 * @return the string
 */
public String ReadTableFooter(Node tablesxmlNode){
  String foot=""String_Node_Str"";
  List<Node> nl=getChildrenByTagName(tablesxmlNode,""String_Node_Str"");
  if (nl.size() >= 1) {
    foot=Utilities.getString(nl.get(0));
  }
  return foot;
}",0.940119760479042
36989,"/** 
 * Gets the affiliations of authors.
 * @param parse the parse
 * @return the string[]
 */
public String[] GetAffiliations(Document parse){
  NodeList affis=parse.getElementsByTagName(""String_Node_Str"");
  String[] affilis=new String[affis.getLength()];
  for (int j=0; j < affis.getLength(); j++) {
    String affiliation=affis.item(j).getTextContent();
    affilis[j]=affiliation;
    System.out.println(""String_Node_Str"" + affiliation);
  }
  return affilis;
}","/** 
 * Gets the affiliations of authors.
 * @param parse the parse
 * @return the string[]
 */
public String[] GetAffiliations(Document parse){
  NodeList affis=parse.getElementsByTagName(""String_Node_Str"");
  String[] affilis=new String[affis.getLength()];
  for (int j=0; j < affis.getLength(); j++) {
    String affiliation=Utilities.getString(affis.item(j));
    affilis[j]=affiliation;
    System.out.println(""String_Node_Str"" + affiliation);
  }
  return affilis;
}",0.9617021276595744
36990,"/** 
 * Read table label.
 * @param tablexmlNode the tablexml node
 * @return the string
 */
public String readTableLabel(Node tablexmlNode){
  String label=""String_Node_Str"";
  List<Node> nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    label=nl.get(0).getTextContent();
  }
  return label;
}","/** 
 * Read table label.
 * @param tablexmlNode the tablexml node
 * @return the string
 */
public String readTableLabel(Node tablexmlNode){
  String label=""String_Node_Str"";
  List<Node> nl=getChildrenByTagName(tablexmlNode,""String_Node_Str"");
  if (nl.size() > 0) {
    label=Utilities.getString(nl.get(0));
  }
  return label;
}",0.9393939393939394
36991,"/** 
 * Process table header.
 * @param table the table
 * @param cells the cells
 * @param rowshead the rowshead
 * @param headrowscount the headrowscount
 * @param num_of_columns the num_of_columns
 * @return the table
 */
public Table ProcessTableHeader(Table table,Cell[][] cells,List<Node> rowshead,int headrowscount,int num_of_columns){
  for (int j=0; j < headrowscount; j++) {
    Statistics.addHeaderRow();
    table.stat.AddHeaderRow();
    List<Node> tds=getChildrenByTagName(rowshead.get(j),""String_Node_Str"");
    if (tds.size() == 0)     tds=getChildrenByTagName(rowshead.get(j),""String_Node_Str"");
    int index=0;
    for (int k=0; k < tds.size(); k++) {
      boolean is_colspanning=false;
      boolean is_rowspanning=false;
      int colspanVal=1;
      int rowspanVal=1;
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setRowSpanning(true);
        Statistics.addRowSpanningCell();
        table.stat.AddRowSpanningCell();
        is_rowspanning=true;
        rowspanVal=Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setColSpanning(true);
        Statistics.addColumnSpanningCell();
        table.stat.AddColSpanningCell();
        is_colspanning=true;
        colspanVal=Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      for (int l=0; l < colspanVal; l++) {
        int rowindex=j;
        for (int s=0; s < rowspanVal; s++) {
          try {
            while (cells[rowindex][index].isIs_filled() && index != num_of_columns)             index++;
            cells[rowindex][index]=Cell.setCellValues(cells[rowindex][index],tds.get(k).getTextContent(),is_colspanning,colspanVal,is_rowspanning,rowspanVal,true,1,false,0,index,rowindex,l,s);
            table=Statistics.statisticsForCell(table,cells[rowindex][index]);
          }
 catch (          Exception ex) {
            System.out.println(""String_Node_Str"");
          }
          rowindex++;
        }
        index++;
      }
    }
  }
  return table;
}","/** 
 * Process table header.
 * @param table the table
 * @param cells the cells
 * @param rowshead the rowshead
 * @param headrowscount the headrowscount
 * @param num_of_columns the num_of_columns
 * @return the table
 */
public Table ProcessTableHeader(Table table,Cell[][] cells,List<Node> rowshead,int headrowscount,int num_of_columns){
  for (int j=0; j < headrowscount; j++) {
    Statistics.addHeaderRow();
    table.stat.AddHeaderRow();
    List<Node> tds=getChildrenByTagName(rowshead.get(j),""String_Node_Str"");
    if (tds.size() == 0)     tds=getChildrenByTagName(rowshead.get(j),""String_Node_Str"");
    int index=0;
    for (int k=0; k < tds.size(); k++) {
      boolean is_colspanning=false;
      boolean is_rowspanning=false;
      int colspanVal=1;
      int rowspanVal=1;
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setRowSpanning(true);
        Statistics.addRowSpanningCell();
        table.stat.AddRowSpanningCell();
        is_rowspanning=true;
        rowspanVal=Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setColSpanning(true);
        Statistics.addColumnSpanningCell();
        table.stat.AddColSpanningCell();
        is_colspanning=true;
        colspanVal=Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      for (int l=0; l < colspanVal; l++) {
        int rowindex=j;
        for (int s=0; s < rowspanVal; s++) {
          try {
            while (cells[rowindex][index].isIs_filled() && index != num_of_columns)             index++;
            cells[rowindex][index]=Cell.setCellValues(cells[rowindex][index],Utilities.getString(tds.get(k)),is_colspanning,colspanVal,is_rowspanning,rowspanVal,true,1,false,0,index,rowindex,l,s);
            table=Statistics.statisticsForCell(table,cells[rowindex][index]);
          }
 catch (          Exception ex) {
            System.out.println(""String_Node_Str"");
          }
          rowindex++;
        }
        index++;
      }
    }
  }
  return table;
}",0.993025958930647
36992,"/** 
 * Process table body.
 * @param table the table
 * @param cells the cells
 * @param rowsbody the rowsbody
 * @param headrowscount the headrowscount
 * @param num_of_columns the num_of_columns
 * @return the table
 */
public Table ProcessTableBody(Table table,Cell[][] cells,List<Node> rowsbody,int headrowscount,int num_of_columns){
  int startj=headrowscount;
  for (int j=0; j < rowsbody.size(); j++) {
    table.stat.AddBodyRow();
    List<Node> tds=getChildrenByTagName(rowsbody.get(j),""String_Node_Str"");
    int index=0;
    int rowindex=startj;
    for (int k=0; k < tds.size(); k++) {
      boolean isStub=false;
      float stubProbability=0;
      if (index == 0) {
        isStub=true;
        stubProbability=(float)0.9;
      }
      boolean is_colspanning=false;
      boolean is_rowspanning=false;
      int colspanVal=1;
      int rowspanVal=1;
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setRowSpanning(true);
        Statistics.addRowSpanningCell();
        table.stat.AddRowSpanningCell();
        is_rowspanning=true;
        rowspanVal=Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setColSpanning(true);
        Statistics.addColumnSpanningCell();
        table.stat.AddColSpanningCell();
        is_colspanning=true;
        colspanVal=Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      for (int l=0; l < colspanVal; l++) {
        rowindex=startj + j;
        for (int s=0; s < rowspanVal; s++) {
          try {
            while (cells[rowindex][index].isIs_filled() && index != num_of_columns)             index++;
            cells[rowindex][index]=Cell.setCellValues(cells[rowindex][index],tds.get(k).getTextContent(),is_colspanning,colspanVal,is_rowspanning,rowspanVal,false,0,isStub,stubProbability,index,rowindex,l,s);
            table=Statistics.statisticsForCell(table,cells[rowindex][index]);
          }
 catch (          Exception ex) {
            System.out.println(""String_Node_Str"");
          }
          rowindex++;
        }
        index++;
      }
    }
  }
  return table;
}","/** 
 * Process table body.
 * @param table the table
 * @param cells the cells
 * @param rowsbody the rowsbody
 * @param headrowscount the headrowscount
 * @param num_of_columns the num_of_columns
 * @return the table
 */
public Table ProcessTableBody(Table table,Cell[][] cells,List<Node> rowsbody,int headrowscount,int num_of_columns){
  int startj=headrowscount;
  for (int j=0; j < rowsbody.size(); j++) {
    table.stat.AddBodyRow();
    List<Node> tds=getChildrenByTagName(rowsbody.get(j),""String_Node_Str"");
    int index=0;
    int rowindex=startj;
    for (int k=0; k < tds.size(); k++) {
      boolean isStub=false;
      float stubProbability=0;
      if (index == 0) {
        isStub=true;
        stubProbability=(float)0.9;
      }
      boolean is_colspanning=false;
      boolean is_rowspanning=false;
      int colspanVal=1;
      int rowspanVal=1;
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setRowSpanning(true);
        Statistics.addRowSpanningCell();
        table.stat.AddRowSpanningCell();
        is_rowspanning=true;
        rowspanVal=Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      if (tds.get(k).getAttributes().getNamedItem(""String_Node_Str"") != null && Utilities.isNumeric(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) && Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue()) > 1) {
        table.setColSpanning(true);
        Statistics.addColumnSpanningCell();
        table.stat.AddColSpanningCell();
        is_colspanning=true;
        colspanVal=Integer.parseInt(tds.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
      }
      for (int l=0; l < colspanVal; l++) {
        rowindex=startj + j;
        for (int s=0; s < rowspanVal; s++) {
          try {
            while (cells[rowindex][index].isIs_filled() && index != num_of_columns)             index++;
            cells[rowindex][index]=Cell.setCellValues(cells[rowindex][index],Utilities.getString(tds.get(k)),is_colspanning,colspanVal,is_rowspanning,rowspanVal,false,0,isStub,stubProbability,index,rowindex,l,s);
            table=Statistics.statisticsForCell(table,cells[rowindex][index]);
          }
 catch (          Exception ex) {
            System.out.println(""String_Node_Str"");
          }
          rowindex++;
        }
        index++;
      }
    }
  }
  return table;
}",0.9932785660941
36993,"/** 
 * Prints the help.
 */
public static void printHelp(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","/** 
 * Prints the help.
 */
public static void printHelp(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}",0.9687738004569688
36994,"public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  String path=args[0];
  Inpath=path;
  String runas=args[1];
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    int i=Arrays.asList(args).indexOf(""String_Node_Str"");
    outputDest=args[i + 1];
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    int i=Arrays.asList(args).indexOf(""String_Node_Str"");
    learnheaders=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doStats=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    TypeClassify=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    ComplexClassify=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doIE=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    printHelp();
  }
  if (TypeClassify)   SimpleTableClassifier.init(TablInExMain.Inpath);
  if (ComplexClassify)   SimpleTableClassifier.initComplexity(Inpath);
  System.out.println(""String_Node_Str"" + path);
  File Dir=new File(path);
  File[] files=Dir.listFiles();
  Article[] articles=new Article[files.length];
  if (runas.toLowerCase().equals(""String_Node_Str"")) {
    articles=runReadingloop(articles,files,files.length,PMCXMLReader.class);
  }
  for (int i=0; i < articles.length; i++) {
    if (articles[i] != null && articles[i].getTables() != null)     for (int j=0; j < articles[i].getTables().length; j++) {
      Table t=articles[i].getTables()[j];
      t=TableSimplifier.MergeHeaders(t);
      t=TableSimplifier.MergeStubs(t);
    }
  }
  if (doIE) {
    SimpleIE ie=new SimpleIE(Inpath);
    for (int i=0; i < articles.length; i++) {
      ie.ExtractInformation(articles[i]);
    }
  }
  if (learnheaders) {
    LinkedHashMap lm=Utilities.sortHashMapByValuesD(headermap);
    Object[] ss=lm.keySet().toArray();
    String[] sa=new String[ss.length];
    int k=0;
    for (    Object o : ss) {
      sa[k]=(String)ss[k];
      k++;
    }
    PrintWriter writer;
    try {
      writer=new PrintWriter(""String_Node_Str"",""String_Node_Str"");
      for (      String name : sa) {
        String key=name.toString();
        String value=lm.get(name).toString();
        writer.println(key + ""String_Node_Str"" + value);
      }
      writer.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
  Statistics.CalculateStatistics();
  String stats=Statistics.makeOutputStatisticString();
  System.out.print(stats);
}","public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  String path=args[0];
  Inpath=path;
  String runas=""String_Node_Str"";
  if (args.length > 1)   runas=args[1];
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    int i=Arrays.asList(args).indexOf(""String_Node_Str"");
    outputDest=args[i + 1];
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    int i=Arrays.asList(args).indexOf(""String_Node_Str"");
    learnheaders=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doStats=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    TypeClassify=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doXMLInput=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    ComplexClassify=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    doIE=true;
  }
  if (Arrays.asList(args).contains(""String_Node_Str"")) {
    printHelp();
    return;
  }
  if (TypeClassify)   SimpleTableClassifier.init(TablInExMain.Inpath);
  if (ComplexClassify)   SimpleTableClassifier.initComplexity(Inpath);
  System.out.println(""String_Node_Str"" + path);
  File Dir=new File(path);
  File[] files=Dir.listFiles();
  Article[] articles=new Article[files.length];
  if (runas.toLowerCase().equals(""String_Node_Str"")) {
    articles=runReadingloop(articles,files,files.length,PMCXMLReader.class);
  }
  for (int i=0; i < articles.length; i++) {
    if (articles[i] != null && articles[i].getTables() != null)     for (int j=0; j < articles[i].getTables().length; j++) {
      Table t=articles[i].getTables()[j];
      t=TableSimplifier.MergeHeaders(t);
      t=TableSimplifier.MergeStubs(t);
    }
  }
  if (doIE) {
    SimpleIE ie=new SimpleIE(Inpath);
    for (int i=0; i < articles.length; i++) {
      ie.ExtractInformation(articles[i]);
    }
  }
  if (learnheaders) {
    LinkedHashMap lm=Utilities.sortHashMapByValuesD(headermap);
    Object[] ss=lm.keySet().toArray();
    String[] sa=new String[ss.length];
    int k=0;
    for (    Object o : ss) {
      sa[k]=(String)ss[k];
      k++;
    }
    PrintWriter writer;
    try {
      writer=new PrintWriter(""String_Node_Str"",""String_Node_Str"");
      for (      String name : sa) {
        String key=name.toString();
        String value=lm.get(name).toString();
        writer.println(key + ""String_Node_Str"" + value);
      }
      writer.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
  Statistics.CalculateStatistics();
  String stats=Statistics.makeOutputStatisticString();
  System.out.print(stats);
}",0.97422126745435
36995,"public MetaMapping() throws MalformedURLException {
  api=new MetaMapApiImpl();
  api.setHost(""String_Node_Str"");
  api.setPort(8066);
  List<String> theOptions=new ArrayList<String>();
  theOptions.add(""String_Node_Str"");
  theOptions.add(""String_Node_Str"");
  theOptions.add(""String_Node_Str"");
  for (  String opt : theOptions)   api.setOptions(opt);
  try {
    SemanticTypes=new HashMap<String,String>();
    BufferedReader br=new BufferedReader(new FileReader(""String_Node_Str""));
    String line;
    while ((line=br.readLine()) != null) {
      String[] splitted=line.split(""String_Node_Str"");
      SemanticTypes.put(splitted[0],splitted[2]);
    }
    br.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public MetaMapping() throws MalformedURLException {
  List<String> theOptions=new ArrayList<String>();
  ;
  try {
    String HostName=""String_Node_Str"";
    int PortNumber=0;
    String[] options=new String[0];
    BufferedReader bropt=new BufferedReader(new FileReader(""String_Node_Str""));
    String linea;
    while ((linea=bropt.readLine()) != null) {
      if (linea.contains(""String_Node_Str"")) {
        HostName=linea.substring(5);
      }
      if (linea.contains(""String_Node_Str"")) {
        PortNumber=Integer.parseInt(linea.substring(5));
      }
      if (linea.contains(""String_Node_Str"")) {
        String opt=linea.substring(8);
        options=opt.split(""String_Node_Str"");
      }
    }
    api=new MetaMapApiImpl();
    api.setHost(HostName);
    api.setPort(PortNumber);
    for (int i=0; i < options.length; i++) {
      theOptions.add(options[i]);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  String opt : theOptions)   api.setOptions(opt);
  try {
    SemanticTypes=new HashMap<String,String>();
    BufferedReader br=new BufferedReader(new FileReader(""String_Node_Str""));
    String line;
    while ((line=br.readLine()) != null) {
      String[] splitted=line.split(""String_Node_Str"");
      SemanticTypes.put(splitted[0],splitted[2]);
    }
    br.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.4339175746091899
36996,"/** 
 * Checks for table subheader.
 * @param cells the cells
 * @param table the table
 * @return true, if successful
 */
public boolean hasTableSubheader(Cell[][] cells,Table table){
  boolean hasSubheader=false;
  if (table.getNum_of_columns() < 2)   return false;
  for (int i=1; i < cells.length; i++) {
    if (cells[i][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[i][0].getCells_columnspanning() >= table.getNum_of_columns() && !cells[i][0].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !cells[i][0].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !(((int)cells[i][0].getCell_content().trim().charAt(0)) == 160)) {
      hasSubheader=true;
      break;
    }
    boolean emptyCells=true;
    for (int j=1; j < cells[i].length; j++) {
      if (cells[i][j].getCell_content() == null) {
        cells[i][j].setCell_content(""String_Node_Str"");
      }
      if (!cells[i][0].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !cells[i][0].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !(((int)cells[i][0].getCell_content().trim().charAt(0)) == 160)&& (!cells[i][j].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !cells[i][j].getCell_content().trim().equalsIgnoreCase(""String_Node_Str"") && !(((int)cells[i][j].getCell_content().trim().charAt(0)) == 160))) {
        emptyCells=false;
      }
    }
    if (emptyCells == true) {
      hasSubheader=true;
      break;
    }
  }
  return hasSubheader;
}","/** 
 * Checks for table subheader.
 * @param cells the cells
 * @param table the table
 * @return true, if successful
 */
public boolean hasTableSubheader(Cell[][] cells,Table table){
  boolean hasSubheader=false;
  if (table.getNum_of_columns() < 2)   return false;
  for (int i=1; i < cells.length; i++) {
    if (cells[i][0].isIs_columnspanning() && table.getNum_of_columns() > 1 && cells[i][0].getCells_columnspanning() >= table.getNum_of_columns() && !Utilities.isSpaceOrEmpty(cells[i][0].getCell_content())) {
      hasSubheader=true;
      break;
    }
    if (Utilities.numOfBegeningSpaces(cells[i][0].getCell_content()) > 0) {
      hasSubheader=true;
      break;
    }
    boolean emptyCells=true;
    for (int j=1; j < cells[i].length; j++) {
      if (cells[i][j].getCell_content() == null) {
        cells[i][j].setCell_content(""String_Node_Str"");
      }
      if (!Utilities.isSpaceOrEmpty(cells[i][0].getCell_content()) && !Utilities.isSpaceOrEmpty(cells[i][j].getCell_content())) {
        emptyCells=false;
      }
    }
    if (emptyCells == true) {
      hasSubheader=true;
      break;
    }
  }
  return hasSubheader;
}",0.7086792452830188
36997,"public void MetamapTagDocument(){
  NodeList Head00=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList HeaderValue=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList Stub=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList value=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList CellType=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList TableType=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList tableName=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList tableOrder=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList tableFooter=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList DocumentTitle=XMLDocument.getElementsByTagName(""String_Node_Str"");
  try {
    NodeList PMC=XMLDocument.getElementsByTagName(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    String Head00Str=""String_Node_Str"";
    String HeaderValueStr=""String_Node_Str"";
    String[] Subheaders;
    String StubValue=""String_Node_Str"";
    String valueStr=""String_Node_Str"";
    String CellTypeStr=""String_Node_Str"";
    String TableTypeStr=""String_Node_Str"";
    String TableNameStr=""String_Node_Str"";
    String TableOrderStr=""String_Node_Str"";
    String TableFooterStr=""String_Node_Str"";
    String DocumentTitleStr=""String_Node_Str"";
    String PMCStr=""String_Node_Str"";
    Head00Str=Head00.item(0).getTextContent();
    Head00Str=Head00Str.replaceAll(""String_Node_Str"",""String_Node_Str"");
    MetaMapping mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    Map<Object,Object> aMap=mp.getClassification(Head00Str);
    System.out.println(""String_Node_Str"");
    Element RootElement=doc.createElement(""String_Node_Str"");
    Element Cell=doc.createElement(""String_Node_Str"");
    RootElement.appendChild(Cell);
    Element NavigationPath=doc.createElement(""String_Node_Str"");
    Cell.appendChild(NavigationPath);
    doc.appendChild(RootElement);
    Element Head00e=doc.createElement(""String_Node_Str"");
    int lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      lastY=X + Y;
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        Text tn=doc.createTextNode(Head00Str.substring(lastY,X));
        Head00e.appendChild(tn);
      }
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddHead00MMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(Head00Str.substring(X,X + Y));
      Head00e.appendChild(HeadPart);
    }
    Text tn=doc.createTextNode(Head00Str.substring(lastY,Head00Str.length()));
    Head00e.appendChild(tn);
    NavigationPath.appendChild(Head00e);
    HeaderValueStr=HeaderValue.item(0).getTextContent();
    HeaderValueStr=HeaderValueStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(HeaderValueStr);
    System.out.println(""String_Node_Str"");
    Element HeaderValuee=doc.createElement(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(HeaderValueStr.substring(lastY,X));
        HeaderValuee.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddHeaderMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(HeaderValueStr.substring(X,X + Y));
      HeaderValuee.appendChild(HeadPart);
    }
    tn=doc.createTextNode(HeaderValueStr.substring(lastY,HeaderValueStr.length()));
    HeaderValuee.appendChild(tn);
    NavigationPath.appendChild(HeaderValuee);
    Element Stube=doc.createElement(""String_Node_Str"");
    NavigationPath.appendChild(Stube);
    NodeList stubVals=Stub.item(0).getChildNodes();
    for (int j=0; j < stubVals.getLength(); j++) {
      String nodeName=stubVals.item(j).getNodeName();
      String nodeValue=stubVals.item(j).getTextContent();
      nodeValue=nodeValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      mp=new MetaMapping();
      System.out.print(""String_Node_Str"");
      aMap=mp.getClassification(nodeValue);
      System.out.println(""String_Node_Str"");
      Element StubVal=doc.createElement(nodeName);
      lastY=0;
      for (int i=1; i < aMap.size(); i=i + 6) {
        Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
        int X=pos.getX();
        int Y=pos.getY();
        Element HeadPart=doc.createElement(""String_Node_Str"");
        if (X > lastY) {
          tn=doc.createTextNode(nodeValue.substring(lastY,X));
          StubVal.appendChild(tn);
        }
        lastY=X + Y;
        HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
        HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
        HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
        if (nodeName.equals(""String_Node_Str"")) {
          MetaMapStats.AddStubMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
        }
 else {
          MetaMapStats.AddSubHeaderMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
        }
        HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
        HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
        HeadPart.setTextContent(nodeValue.substring(X,X + Y));
        StubVal.appendChild(HeadPart);
      }
      tn=doc.createTextNode(nodeValue.substring(lastY,nodeValue.length()));
      StubVal.appendChild(tn);
      Stube.appendChild(StubVal);
    }
    valueStr=value.item(0).getTextContent();
    valueStr=valueStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    Element Valuee=doc.createElement(""String_Node_Str"");
    Cell.appendChild(Valuee);
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(valueStr);
    System.out.println(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size() - 1; i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(valueStr.substring(lastY,X));
        Valuee.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddValueMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(valueStr.substring(X,X + Y));
      Valuee.appendChild(HeadPart);
    }
    tn=doc.createTextNode(valueStr.substring(lastY,valueStr.length()));
    Valuee.appendChild(tn);
    CellTypeStr=CellType.item(0).getTextContent();
    Element CellTypee=doc.createElement(""String_Node_Str"");
    Cell.appendChild(CellTypee);
    CellTypee.setTextContent(CellTypeStr);
    Element Table=doc.createElement(""String_Node_Str"");
    RootElement.appendChild(Table);
    Element TableTypee=doc.createElement(""String_Node_Str"");
    TableTypeStr=TableType.item(0).getTextContent();
    TableTypee.setTextContent(TableTypeStr);
    Table.appendChild(TableTypee);
    Element TableNamee=doc.createElement(""String_Node_Str"");
    Table.appendChild(TableNamee);
    TableNameStr=tableName.item(0).getTextContent();
    TableNameStr=TableNameStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(TableNameStr);
    System.out.println(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(TableNameStr.substring(lastY,X));
        TableNamee.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddTableNameMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(TableNameStr.substring(X,X + Y));
      TableNamee.appendChild(HeadPart);
    }
    tn=doc.createTextNode(TableNameStr.substring(lastY,TableNameStr.length()));
    TableNamee.appendChild(tn);
    Element TableOrdere=doc.createElement(""String_Node_Str"");
    TableOrderStr=tableOrder.item(0).getTextContent();
    TableOrdere.setTextContent(TableOrderStr);
    Table.appendChild(TableOrdere);
    Element TableFootere=doc.createElement(""String_Node_Str"");
    Table.appendChild(TableFootere);
    TableFooterStr=tableFooter.item(0).getTextContent();
    TableFooterStr=TableFooterStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(TableFooterStr);
    System.out.println(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(TableFooterStr.substring(lastY,X));
        TableFootere.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddTableFooterMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(TableFooterStr.substring(X,X + Y));
      TableFootere.appendChild(HeadPart);
    }
    tn=doc.createTextNode(TableFooterStr.substring(lastY,TableFooterStr.length()));
    TableFootere.appendChild(tn);
    Element Documente=doc.createElement(""String_Node_Str"");
    RootElement.appendChild(Documente);
    Element DocumentTitlee=doc.createElement(""String_Node_Str"");
    DocumentTitleStr=DocumentTitle.item(0).getTextContent();
    DocumentTitleStr=DocumentTitleStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    Documente.appendChild(DocumentTitlee);
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(DocumentTitleStr);
    System.out.println(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(DocumentTitleStr.substring(lastY,X));
        DocumentTitlee.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddArticleNameMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(DocumentTitleStr.substring(X,X + Y));
      DocumentTitlee.appendChild(HeadPart);
    }
    tn=doc.createTextNode(DocumentTitleStr.substring(lastY,DocumentTitleStr.length()));
    DocumentTitlee.appendChild(tn);
    Element PMCe=doc.createElement(""String_Node_Str"");
    Documente.appendChild(PMCe);
    PMCe.setTextContent(PMC.item(0).getTextContent());
    XMLDocumentTagged=doc;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public void MetamapTagDocument(){
  NodeList Head00=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList HeaderValue=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList Stub=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList value=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList CellType=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList TableType=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList tableName=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList tableOrder=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList tableFooter=XMLDocument.getElementsByTagName(""String_Node_Str"");
  NodeList DocumentTitle=XMLDocument.getElementsByTagName(""String_Node_Str"");
  try {
    NodeList PMC=XMLDocument.getElementsByTagName(""String_Node_Str"");
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    String Head00Str=""String_Node_Str"";
    String HeaderValueStr=""String_Node_Str"";
    String[] Subheaders;
    String StubValue=""String_Node_Str"";
    String valueStr=""String_Node_Str"";
    String CellTypeStr=""String_Node_Str"";
    String TableTypeStr=""String_Node_Str"";
    String TableNameStr=""String_Node_Str"";
    String TableOrderStr=""String_Node_Str"";
    String TableFooterStr=""String_Node_Str"";
    String DocumentTitleStr=""String_Node_Str"";
    String PMCStr=""String_Node_Str"";
    if (Head00 != null && Head00.item(0) != null) {
      Head00Str=Head00.item(0).getTextContent();
    }
    Head00Str=Head00Str.replaceAll(""String_Node_Str"",""String_Node_Str"");
    MetaMapping mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    Map<Object,Object> aMap=mp.getClassification(Head00Str);
    System.out.println(""String_Node_Str"");
    Element RootElement=doc.createElement(""String_Node_Str"");
    Element Cell=doc.createElement(""String_Node_Str"");
    RootElement.appendChild(Cell);
    Element NavigationPath=doc.createElement(""String_Node_Str"");
    Cell.appendChild(NavigationPath);
    doc.appendChild(RootElement);
    Element Head00e=doc.createElement(""String_Node_Str"");
    int lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      lastY=X + Y;
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        Text tn=doc.createTextNode(Head00Str.substring(lastY,X));
        Head00e.appendChild(tn);
      }
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddHead00MMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(Head00Str.substring(X,X + Y));
      Head00e.appendChild(HeadPart);
    }
    Text tn=doc.createTextNode(Head00Str.substring(lastY,Head00Str.length()));
    Head00e.appendChild(tn);
    NavigationPath.appendChild(Head00e);
    if (HeaderValue != null && HeaderValue.item(0) != null) {
      HeaderValueStr=HeaderValue.item(0).getTextContent();
    }
    HeaderValueStr=HeaderValueStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(HeaderValueStr);
    System.out.println(""String_Node_Str"");
    Element HeaderValuee=doc.createElement(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(HeaderValueStr.substring(lastY,X));
        HeaderValuee.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddHeaderMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(HeaderValueStr.substring(X,X + Y));
      HeaderValuee.appendChild(HeadPart);
    }
    tn=doc.createTextNode(HeaderValueStr.substring(lastY,HeaderValueStr.length()));
    HeaderValuee.appendChild(tn);
    NavigationPath.appendChild(HeaderValuee);
    Element Stube=doc.createElement(""String_Node_Str"");
    NavigationPath.appendChild(Stube);
    NodeList stubVals=Stub.item(0).getChildNodes();
    for (int j=0; j < stubVals.getLength(); j++) {
      String nodeName=stubVals.item(j).getNodeName();
      String nodeValue=stubVals.item(j).getTextContent();
      nodeValue=nodeValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      mp=new MetaMapping();
      System.out.print(""String_Node_Str"");
      aMap=mp.getClassification(nodeValue);
      System.out.println(""String_Node_Str"");
      Element StubVal=doc.createElement(nodeName);
      lastY=0;
      for (int i=1; i < aMap.size(); i=i + 6) {
        Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
        int X=pos.getX();
        int Y=pos.getY();
        Element HeadPart=doc.createElement(""String_Node_Str"");
        if (X > lastY) {
          tn=doc.createTextNode(nodeValue.substring(lastY,X));
          StubVal.appendChild(tn);
        }
        lastY=X + Y;
        HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
        HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
        HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
        if (nodeName.equals(""String_Node_Str"")) {
          MetaMapStats.AddStubMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
        }
 else {
          MetaMapStats.AddSubHeaderMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
        }
        HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
        HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
        HeadPart.setTextContent(nodeValue.substring(X,X + Y));
        StubVal.appendChild(HeadPart);
      }
      tn=doc.createTextNode(nodeValue.substring(lastY,nodeValue.length()));
      StubVal.appendChild(tn);
      Stube.appendChild(StubVal);
    }
    if (value != null && value.item(0) != null) {
      valueStr=value.item(0).getTextContent();
    }
    valueStr=valueStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    Element Valuee=doc.createElement(""String_Node_Str"");
    Cell.appendChild(Valuee);
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(valueStr);
    System.out.println(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size() - 1; i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(valueStr.substring(lastY,X));
        Valuee.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddValueMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(valueStr.substring(X,X + Y));
      Valuee.appendChild(HeadPart);
    }
    tn=doc.createTextNode(valueStr.substring(lastY,valueStr.length()));
    Valuee.appendChild(tn);
    CellTypeStr=CellType.item(0).getTextContent();
    Element CellTypee=doc.createElement(""String_Node_Str"");
    Cell.appendChild(CellTypee);
    CellTypee.setTextContent(CellTypeStr);
    Element Table=doc.createElement(""String_Node_Str"");
    RootElement.appendChild(Table);
    Element TableTypee=doc.createElement(""String_Node_Str"");
    TableTypeStr=TableType.item(0).getTextContent();
    TableTypee.setTextContent(TableTypeStr);
    Table.appendChild(TableTypee);
    Element TableNamee=doc.createElement(""String_Node_Str"");
    Table.appendChild(TableNamee);
    if (tableName != null && tableName.item(0) != null) {
      TableNameStr=tableName.item(0).getTextContent();
    }
    TableNameStr=TableNameStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(TableNameStr);
    System.out.println(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(TableNameStr.substring(lastY,X));
        TableNamee.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddTableNameMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(TableNameStr.substring(X,X + Y));
      TableNamee.appendChild(HeadPart);
    }
    tn=doc.createTextNode(TableNameStr.substring(lastY,TableNameStr.length()));
    TableNamee.appendChild(tn);
    Element TableOrdere=doc.createElement(""String_Node_Str"");
    if (tableOrder != null && tableOrder.item(0) != null) {
      TableOrderStr=tableOrder.item(0).getTextContent();
    }
    TableOrdere.setTextContent(TableOrderStr);
    Table.appendChild(TableOrdere);
    Element TableFootere=doc.createElement(""String_Node_Str"");
    Table.appendChild(TableFootere);
    if (tableFooter != null && tableFooter.item(0) != null) {
      TableFooterStr=tableFooter.item(0).getTextContent();
    }
    TableFooterStr=TableFooterStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(TableFooterStr);
    System.out.println(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(TableFooterStr.substring(lastY,X));
        TableFootere.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddTableFooterMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(TableFooterStr.substring(X,X + Y));
      TableFootere.appendChild(HeadPart);
    }
    tn=doc.createTextNode(TableFooterStr.substring(lastY,TableFooterStr.length()));
    TableFootere.appendChild(tn);
    Element Documente=doc.createElement(""String_Node_Str"");
    RootElement.appendChild(Documente);
    Element DocumentTitlee=doc.createElement(""String_Node_Str"");
    if (DocumentTitle != null && DocumentTitle.item(0) != null) {
      DocumentTitleStr=DocumentTitle.item(0).getTextContent();
    }
    DocumentTitleStr=DocumentTitleStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
    Documente.appendChild(DocumentTitlee);
    mp=new MetaMapping();
    System.out.print(""String_Node_Str"");
    aMap=mp.getClassification(DocumentTitleStr);
    System.out.println(""String_Node_Str"");
    lastY=0;
    for (int i=1; i < aMap.size(); i=i + 6) {
      Position pos=(Position)((ArrayList)aMap.get(i + 1)).get(0);
      int X=pos.getX();
      int Y=pos.getY();
      Element HeadPart=doc.createElement(""String_Node_Str"");
      if (X > lastY) {
        tn=doc.createTextNode(DocumentTitleStr.substring(lastY,X));
        DocumentTitlee.appendChild(tn);
      }
      lastY=X + Y;
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i - 1).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 2).toString());
      HeadPart.setAttribute(""String_Node_Str"",MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      MetaMapStats.AddArticleNameMMStats(MetaMapping.getNiceSemanticType(aMap.get(i + 2).toString()));
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setAttribute(""String_Node_Str"",aMap.get(i + 3).toString());
      HeadPart.setTextContent(DocumentTitleStr.substring(X,X + Y));
      DocumentTitlee.appendChild(HeadPart);
    }
    tn=doc.createTextNode(DocumentTitleStr.substring(lastY,DocumentTitleStr.length()));
    DocumentTitlee.appendChild(tn);
    Element PMCe=doc.createElement(""String_Node_Str"");
    Documente.appendChild(PMCe);
    PMCe.setTextContent(PMC.item(0).getTextContent());
    XMLDocumentTagged=doc;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.981232672211559
36998,"@Override protected void onPostExecute(String result){
  mProgressDialog.dismiss();
  if (result != null) {
    Toast.makeText(context,""String_Node_Str"" + result,Toast.LENGTH_LONG).show();
  }
 else {
    Intent intent;
    Uri uri=Uri.fromFile(downloadFile);
    if (downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else     if (downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")|| downloadFileName.contains(""String_Node_Str"")|| downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else     if (downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else     if (downloadFileName.contains(""String_Node_Str"")) {
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,""String_Node_Str"");
    }
 else {
      String mimeType=URLConnection.guessContentTypeFromName(downloadFileName);
      intent=new Intent(Intent.ACTION_VIEW);
      intent.setDataAndType(uri,mimeType);
    }
    context.startActivity(intent);
  }
}","@Override protected void onPostExecute(String result){
  mProgressDialog.dismiss();
  if (result != null) {
    Toast.makeText(context,""String_Node_Str"" + result,Toast.LENGTH_LONG).show();
  }
 else {
    Uri uri=Uri.fromFile(downloadFile);
    Intent intent=new Intent(Intent.ACTION_VIEW);
    String mimeType=URLConnection.guessContentTypeFromName(downloadFileName);
    if (downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
 else     if (downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")|| downloadFileName.contains(""String_Node_Str"")|| downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
 else     if (downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
 else     if (downloadFileName.contains(""String_Node_Str"") || downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
 else     if (downloadFileName.contains(""String_Node_Str"")) {
      mimeType=""String_Node_Str"";
    }
    intent.setDataAndType(uri,mimeType);
    try {
      context.startActivity(intent);
    }
 catch (    Exception e) {
      Toast.makeText(context,""String_Node_Str"" + mimeType + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
}",0.2012726844213999
36999,"@Override public void readSonargraphReport(final Project project,final FileSystem fileSystem,final Settings settings){
  if (project == null) {
    LOG.error(""String_Node_Str"");
    return;
  }
  final String reportFileName=determineReportFileName(fileSystem,settings);
  LOG.info(""String_Node_Str"" + reportFileName);
  report=null;
  InputStream input=null;
  final ClassLoader defaultClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    input=new FileInputStream(reportFileName);
    Thread.currentThread().setContextClassLoader(ReportFileReader.class.getClassLoader());
    final JAXBContext context=JAXBContext.newInstance(""String_Node_Str"");
    final Unmarshaller u=context.createUnmarshaller();
    report=(ReportContext)u.unmarshal(input);
  }
 catch (  final JAXBException e) {
    LOG.error(""String_Node_Str"" + reportFileName,e);
  }
catch (  final FileNotFoundException e) {
    if (project.isRoot()) {
      LOG.error(""String_Node_Str"" + reportFileName + ""String_Node_Str"");
      LOG.error(""String_Node_Str"" + ""String_Node_Str"");
      LOG.error(""String_Node_Str"" + ""String_Node_Str"");
    }
    LOG.debug(""String_Node_Str"",e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(defaultClassLoader);
    if (input != null) {
      try {
        input.close();
      }
 catch (      final IOException e) {
        LOG.error(""String_Node_Str"" + reportFileName,e);
      }
    }
  }
}","@Override public void readSonargraphReport(final Project project,final FileSystem fileSystem,final Settings settings){
  if (project == null) {
    LOG.error(""String_Node_Str"");
    return;
  }
  final String reportFileName=determineReportFileName(fileSystem,settings);
  LOG.info(""String_Node_Str"" + reportFileName);
  report=null;
  final ClassLoader defaultClassLoader=Thread.currentThread().getContextClassLoader();
  try (InputStream input=new FileInputStream(reportFileName)){
    Thread.currentThread().setContextClassLoader(ReportFileReader.class.getClassLoader());
    final JAXBContext context=JAXBContext.newInstance(""String_Node_Str"");
    final Unmarshaller u=context.createUnmarshaller();
    report=(ReportContext)u.unmarshal(input);
  }
 catch (  final JAXBException e) {
    LOG.error(""String_Node_Str"" + reportFileName,e);
  }
catch (  final FileNotFoundException e) {
    if (project.isRoot()) {
      LOG.error(""String_Node_Str"" + reportFileName + ""String_Node_Str"");
      LOG.error(""String_Node_Str"" + ""String_Node_Str"");
      LOG.error(""String_Node_Str"" + ""String_Node_Str"");
    }
    LOG.debug(""String_Node_Str"",e);
  }
catch (  final IOException e) {
    LOG.error(""String_Node_Str"" + reportFileName,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(defaultClassLoader);
  }
}",0.8591190389515836
37000,"public static String getBuildUnitName(String fqName){
  if (fqName == null) {
    return UNKNOWN;
  }
  int projectSeparatorPos=fqName.indexOf(PROJECT_BUILDUNIT_SEPARATOR);
  if (projectSeparatorPos == -1) {
    return UNKNOWN;
  }
  String buName=fqName.substring(projectSeparatorPos + 2);
  int groupSeparatorPos=buName.indexOf(GROUP_ARTIFACT_SEPARATOR);
  if (groupSeparatorPos > -1) {
    buName=buName.substring(groupSeparatorPos + 1);
  }
  if (DEFAULT_BUILD_UNIT.equals(buName)) {
    buName=fqName.substring(0,projectSeparatorPos);
  }
  return buName;
}","public static String getBuildUnitName(String fqName){
  if (fqName == null) {
    return UNKNOWN;
  }
  int projectSeparatorPos=fqName.indexOf(PROJECT_BUILDUNIT_SEPARATOR);
  if (projectSeparatorPos == -1) {
    return UNKNOWN;
  }
  String buName=fqName.substring(projectSeparatorPos + 2);
  if (DEFAULT_BUILD_UNIT.equals(buName)) {
    buName=fqName.substring(0,projectSeparatorPos);
  }
  return buName;
}",0.8412371134020619
